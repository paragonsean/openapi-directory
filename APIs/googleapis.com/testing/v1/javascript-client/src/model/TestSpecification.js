/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AndroidInstrumentationTest from './AndroidInstrumentationTest';
import AndroidRoboTest from './AndroidRoboTest';
import AndroidTestLoop from './AndroidTestLoop';
import IosRoboTest from './IosRoboTest';
import IosTestLoop from './IosTestLoop';
import IosTestSetup from './IosTestSetup';
import IosXcTest from './IosXcTest';
import TestSetup from './TestSetup';

/**
 * The TestSpecification model module.
 * @module model/TestSpecification
 * @version v1
 */
class TestSpecification {
    /**
     * Constructs a new <code>TestSpecification</code>.
     * A description of how to run the test.
     * @alias module:model/TestSpecification
     */
    constructor() { 
        
        TestSpecification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestSpecification} obj Optional instance to populate.
     * @return {module:model/TestSpecification} The populated <code>TestSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestSpecification();

            if (data.hasOwnProperty('androidInstrumentationTest')) {
                obj['androidInstrumentationTest'] = AndroidInstrumentationTest.constructFromObject(data['androidInstrumentationTest']);
            }
            if (data.hasOwnProperty('androidRoboTest')) {
                obj['androidRoboTest'] = AndroidRoboTest.constructFromObject(data['androidRoboTest']);
            }
            if (data.hasOwnProperty('androidTestLoop')) {
                obj['androidTestLoop'] = AndroidTestLoop.constructFromObject(data['androidTestLoop']);
            }
            if (data.hasOwnProperty('disablePerformanceMetrics')) {
                obj['disablePerformanceMetrics'] = ApiClient.convertToType(data['disablePerformanceMetrics'], 'Boolean');
            }
            if (data.hasOwnProperty('disableVideoRecording')) {
                obj['disableVideoRecording'] = ApiClient.convertToType(data['disableVideoRecording'], 'Boolean');
            }
            if (data.hasOwnProperty('iosRoboTest')) {
                obj['iosRoboTest'] = IosRoboTest.constructFromObject(data['iosRoboTest']);
            }
            if (data.hasOwnProperty('iosTestLoop')) {
                obj['iosTestLoop'] = IosTestLoop.constructFromObject(data['iosTestLoop']);
            }
            if (data.hasOwnProperty('iosTestSetup')) {
                obj['iosTestSetup'] = IosTestSetup.constructFromObject(data['iosTestSetup']);
            }
            if (data.hasOwnProperty('iosXcTest')) {
                obj['iosXcTest'] = IosXcTest.constructFromObject(data['iosXcTest']);
            }
            if (data.hasOwnProperty('testSetup')) {
                obj['testSetup'] = TestSetup.constructFromObject(data['testSetup']);
            }
            if (data.hasOwnProperty('testTimeout')) {
                obj['testTimeout'] = ApiClient.convertToType(data['testTimeout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestSpecification</code>.
     */
    static validateJSON(data) {
        // validate the optional field `androidInstrumentationTest`
        if (data['androidInstrumentationTest']) { // data not null
          AndroidInstrumentationTest.validateJSON(data['androidInstrumentationTest']);
        }
        // validate the optional field `androidRoboTest`
        if (data['androidRoboTest']) { // data not null
          AndroidRoboTest.validateJSON(data['androidRoboTest']);
        }
        // validate the optional field `androidTestLoop`
        if (data['androidTestLoop']) { // data not null
          AndroidTestLoop.validateJSON(data['androidTestLoop']);
        }
        // validate the optional field `iosRoboTest`
        if (data['iosRoboTest']) { // data not null
          IosRoboTest.validateJSON(data['iosRoboTest']);
        }
        // validate the optional field `iosTestLoop`
        if (data['iosTestLoop']) { // data not null
          IosTestLoop.validateJSON(data['iosTestLoop']);
        }
        // validate the optional field `iosTestSetup`
        if (data['iosTestSetup']) { // data not null
          IosTestSetup.validateJSON(data['iosTestSetup']);
        }
        // validate the optional field `iosXcTest`
        if (data['iosXcTest']) { // data not null
          IosXcTest.validateJSON(data['iosXcTest']);
        }
        // validate the optional field `testSetup`
        if (data['testSetup']) { // data not null
          TestSetup.validateJSON(data['testSetup']);
        }
        // ensure the json data is a string
        if (data['testTimeout'] && !(typeof data['testTimeout'] === 'string' || data['testTimeout'] instanceof String)) {
            throw new Error("Expected the field `testTimeout` to be a primitive type in the JSON string but got " + data['testTimeout']);
        }

        return true;
    }


}



/**
 * @member {module:model/AndroidInstrumentationTest} androidInstrumentationTest
 */
TestSpecification.prototype['androidInstrumentationTest'] = undefined;

/**
 * @member {module:model/AndroidRoboTest} androidRoboTest
 */
TestSpecification.prototype['androidRoboTest'] = undefined;

/**
 * @member {module:model/AndroidTestLoop} androidTestLoop
 */
TestSpecification.prototype['androidTestLoop'] = undefined;

/**
 * Disables performance metrics recording. May reduce test latency.
 * @member {Boolean} disablePerformanceMetrics
 */
TestSpecification.prototype['disablePerformanceMetrics'] = undefined;

/**
 * Disables video recording. May reduce test latency.
 * @member {Boolean} disableVideoRecording
 */
TestSpecification.prototype['disableVideoRecording'] = undefined;

/**
 * @member {module:model/IosRoboTest} iosRoboTest
 */
TestSpecification.prototype['iosRoboTest'] = undefined;

/**
 * @member {module:model/IosTestLoop} iosTestLoop
 */
TestSpecification.prototype['iosTestLoop'] = undefined;

/**
 * @member {module:model/IosTestSetup} iosTestSetup
 */
TestSpecification.prototype['iosTestSetup'] = undefined;

/**
 * @member {module:model/IosXcTest} iosXcTest
 */
TestSpecification.prototype['iosXcTest'] = undefined;

/**
 * @member {module:model/TestSetup} testSetup
 */
TestSpecification.prototype['testSetup'] = undefined;

/**
 * Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
 * @member {String} testTimeout
 */
TestSpecification.prototype['testTimeout'] = undefined;






export default TestSpecification;

