/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RoboDirective model module.
 * @module model/RoboDirective
 * @version v1
 */
class RoboDirective {
    /**
     * Constructs a new <code>RoboDirective</code>.
     * Directs Robo to interact with a specific UI element if it is encountered during the crawl. Currently, Robo can perform text entry or element click.
     * @alias module:model/RoboDirective
     */
    constructor() { 
        
        RoboDirective.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RoboDirective</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoboDirective} obj Optional instance to populate.
     * @return {module:model/RoboDirective} The populated <code>RoboDirective</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoboDirective();

            if (data.hasOwnProperty('actionType')) {
                obj['actionType'] = ApiClient.convertToType(data['actionType'], 'String');
            }
            if (data.hasOwnProperty('inputText')) {
                obj['inputText'] = ApiClient.convertToType(data['inputText'], 'String');
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoboDirective</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoboDirective</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionType'] && !(typeof data['actionType'] === 'string' || data['actionType'] instanceof String)) {
            throw new Error("Expected the field `actionType` to be a primitive type in the JSON string but got " + data['actionType']);
        }
        // ensure the json data is a string
        if (data['inputText'] && !(typeof data['inputText'] === 'string' || data['inputText'] instanceof String)) {
            throw new Error("Expected the field `inputText` to be a primitive type in the JSON string but got " + data['inputText']);
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }

        return true;
    }


}



/**
 * Required. The type of action that Robo should perform on the specified element.
 * @member {module:model/RoboDirective.ActionTypeEnum} actionType
 */
RoboDirective.prototype['actionType'] = undefined;

/**
 * The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.
 * @member {String} inputText
 */
RoboDirective.prototype['inputText'] = undefined;

/**
 * Required. The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the \"foo\" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
 * @member {String} resourceName
 */
RoboDirective.prototype['resourceName'] = undefined;





/**
 * Allowed values for the <code>actionType</code> property.
 * @enum {String}
 * @readonly
 */
RoboDirective['ActionTypeEnum'] = {

    /**
     * value: "ACTION_TYPE_UNSPECIFIED"
     * @const
     */
    "ACTION_TYPE_UNSPECIFIED": "ACTION_TYPE_UNSPECIFIED",

    /**
     * value: "SINGLE_CLICK"
     * @const
     */
    "SINGLE_CLICK": "SINGLE_CLICK",

    /**
     * value: "ENTER_TEXT"
     * @const
     */
    "ENTER_TEXT": "ENTER_TEXT",

    /**
     * value: "IGNORE"
     * @const
     */
    "IGNORE": "IGNORE"
};



export default RoboDirective;

