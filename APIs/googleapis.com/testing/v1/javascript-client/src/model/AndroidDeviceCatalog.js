/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AndroidModel from './AndroidModel';
import AndroidRuntimeConfiguration from './AndroidRuntimeConfiguration';
import AndroidVersion from './AndroidVersion';

/**
 * The AndroidDeviceCatalog model module.
 * @module model/AndroidDeviceCatalog
 * @version v1
 */
class AndroidDeviceCatalog {
    /**
     * Constructs a new <code>AndroidDeviceCatalog</code>.
     * The currently supported Android devices.
     * @alias module:model/AndroidDeviceCatalog
     */
    constructor() { 
        
        AndroidDeviceCatalog.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AndroidDeviceCatalog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AndroidDeviceCatalog} obj Optional instance to populate.
     * @return {module:model/AndroidDeviceCatalog} The populated <code>AndroidDeviceCatalog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AndroidDeviceCatalog();

            if (data.hasOwnProperty('models')) {
                obj['models'] = ApiClient.convertToType(data['models'], [AndroidModel]);
            }
            if (data.hasOwnProperty('runtimeConfiguration')) {
                obj['runtimeConfiguration'] = AndroidRuntimeConfiguration.constructFromObject(data['runtimeConfiguration']);
            }
            if (data.hasOwnProperty('versions')) {
                obj['versions'] = ApiClient.convertToType(data['versions'], [AndroidVersion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AndroidDeviceCatalog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AndroidDeviceCatalog</code>.
     */
    static validateJSON(data) {
        if (data['models']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['models'])) {
                throw new Error("Expected the field `models` to be an array in the JSON data but got " + data['models']);
            }
            // validate the optional field `models` (array)
            for (const item of data['models']) {
                AndroidModel.validateJSON(item);
            };
        }
        // validate the optional field `runtimeConfiguration`
        if (data['runtimeConfiguration']) { // data not null
          AndroidRuntimeConfiguration.validateJSON(data['runtimeConfiguration']);
        }
        if (data['versions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['versions'])) {
                throw new Error("Expected the field `versions` to be an array in the JSON data but got " + data['versions']);
            }
            // validate the optional field `versions` (array)
            for (const item of data['versions']) {
                AndroidVersion.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The set of supported Android device models.
 * @member {Array.<module:model/AndroidModel>} models
 */
AndroidDeviceCatalog.prototype['models'] = undefined;

/**
 * @member {module:model/AndroidRuntimeConfiguration} runtimeConfiguration
 */
AndroidDeviceCatalog.prototype['runtimeConfiguration'] = undefined;

/**
 * The set of supported Android OS versions.
 * @member {Array.<module:model/AndroidVersion>} versions
 */
AndroidDeviceCatalog.prototype['versions'] = undefined;






export default AndroidDeviceCatalog;

