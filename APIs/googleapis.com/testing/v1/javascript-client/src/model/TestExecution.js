/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Environment from './Environment';
import Shard from './Shard';
import TestDetails from './TestDetails';
import TestSpecification from './TestSpecification';
import ToolResultsStep from './ToolResultsStep';

/**
 * The TestExecution model module.
 * @module model/TestExecution
 * @version v1
 */
class TestExecution {
    /**
     * Constructs a new <code>TestExecution</code>.
     * A single test executed in a single environment.
     * @alias module:model/TestExecution
     */
    constructor() { 
        
        TestExecution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestExecution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestExecution} obj Optional instance to populate.
     * @return {module:model/TestExecution} The populated <code>TestExecution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestExecution();

            if (data.hasOwnProperty('environment')) {
                obj['environment'] = Environment.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('matrixId')) {
                obj['matrixId'] = ApiClient.convertToType(data['matrixId'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('shard')) {
                obj['shard'] = Shard.constructFromObject(data['shard']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('testDetails')) {
                obj['testDetails'] = TestDetails.constructFromObject(data['testDetails']);
            }
            if (data.hasOwnProperty('testSpecification')) {
                obj['testSpecification'] = TestSpecification.constructFromObject(data['testSpecification']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('toolResultsStep')) {
                obj['toolResultsStep'] = ToolResultsStep.constructFromObject(data['toolResultsStep']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestExecution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestExecution</code>.
     */
    static validateJSON(data) {
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          Environment.validateJSON(data['environment']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['matrixId'] && !(typeof data['matrixId'] === 'string' || data['matrixId'] instanceof String)) {
            throw new Error("Expected the field `matrixId` to be a primitive type in the JSON string but got " + data['matrixId']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // validate the optional field `shard`
        if (data['shard']) { // data not null
          Shard.validateJSON(data['shard']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `testDetails`
        if (data['testDetails']) { // data not null
          TestDetails.validateJSON(data['testDetails']);
        }
        // validate the optional field `testSpecification`
        if (data['testSpecification']) { // data not null
          TestSpecification.validateJSON(data['testSpecification']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // validate the optional field `toolResultsStep`
        if (data['toolResultsStep']) { // data not null
          ToolResultsStep.validateJSON(data['toolResultsStep']);
        }

        return true;
    }


}



/**
 * @member {module:model/Environment} environment
 */
TestExecution.prototype['environment'] = undefined;

/**
 * Output only. Unique id set by the service.
 * @member {String} id
 */
TestExecution.prototype['id'] = undefined;

/**
 * Output only. Id of the containing TestMatrix.
 * @member {String} matrixId
 */
TestExecution.prototype['matrixId'] = undefined;

/**
 * Output only. The cloud project that owns the test execution.
 * @member {String} projectId
 */
TestExecution.prototype['projectId'] = undefined;

/**
 * @member {module:model/Shard} shard
 */
TestExecution.prototype['shard'] = undefined;

/**
 * Output only. Indicates the current progress of the test execution (e.g., FINISHED).
 * @member {module:model/TestExecution.StateEnum} state
 */
TestExecution.prototype['state'] = undefined;

/**
 * @member {module:model/TestDetails} testDetails
 */
TestExecution.prototype['testDetails'] = undefined;

/**
 * @member {module:model/TestSpecification} testSpecification
 */
TestExecution.prototype['testSpecification'] = undefined;

/**
 * Output only. The time this test execution was initially created.
 * @member {String} timestamp
 */
TestExecution.prototype['timestamp'] = undefined;

/**
 * @member {module:model/ToolResultsStep} toolResultsStep
 */
TestExecution.prototype['toolResultsStep'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
TestExecution['StateEnum'] = {

    /**
     * value: "TEST_STATE_UNSPECIFIED"
     * @const
     */
    "TEST_STATE_UNSPECIFIED": "TEST_STATE_UNSPECIFIED",

    /**
     * value: "VALIDATING"
     * @const
     */
    "VALIDATING": "VALIDATING",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "FINISHED"
     * @const
     */
    "FINISHED": "FINISHED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "UNSUPPORTED_ENVIRONMENT"
     * @const
     */
    "UNSUPPORTED_ENVIRONMENT": "UNSUPPORTED_ENVIRONMENT",

    /**
     * value: "INCOMPATIBLE_ENVIRONMENT"
     * @const
     */
    "INCOMPATIBLE_ENVIRONMENT": "INCOMPATIBLE_ENVIRONMENT",

    /**
     * value: "INCOMPATIBLE_ARCHITECTURE"
     * @const
     */
    "INCOMPATIBLE_ARCHITECTURE": "INCOMPATIBLE_ARCHITECTURE",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID"
};



export default TestExecution;

