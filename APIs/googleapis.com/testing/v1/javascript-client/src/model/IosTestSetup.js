/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileReference from './FileReference';
import IosDeviceFile from './IosDeviceFile';

/**
 * The IosTestSetup model module.
 * @module model/IosTestSetup
 * @version v1
 */
class IosTestSetup {
    /**
     * Constructs a new <code>IosTestSetup</code>.
     * A description of how to set up an iOS device prior to running the test.
     * @alias module:model/IosTestSetup
     */
    constructor() { 
        
        IosTestSetup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IosTestSetup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IosTestSetup} obj Optional instance to populate.
     * @return {module:model/IosTestSetup} The populated <code>IosTestSetup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IosTestSetup();

            if (data.hasOwnProperty('additionalIpas')) {
                obj['additionalIpas'] = ApiClient.convertToType(data['additionalIpas'], [FileReference]);
            }
            if (data.hasOwnProperty('networkProfile')) {
                obj['networkProfile'] = ApiClient.convertToType(data['networkProfile'], 'String');
            }
            if (data.hasOwnProperty('pullDirectories')) {
                obj['pullDirectories'] = ApiClient.convertToType(data['pullDirectories'], [IosDeviceFile]);
            }
            if (data.hasOwnProperty('pushFiles')) {
                obj['pushFiles'] = ApiClient.convertToType(data['pushFiles'], [IosDeviceFile]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IosTestSetup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IosTestSetup</code>.
     */
    static validateJSON(data) {
        if (data['additionalIpas']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalIpas'])) {
                throw new Error("Expected the field `additionalIpas` to be an array in the JSON data but got " + data['additionalIpas']);
            }
            // validate the optional field `additionalIpas` (array)
            for (const item of data['additionalIpas']) {
                FileReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['networkProfile'] && !(typeof data['networkProfile'] === 'string' || data['networkProfile'] instanceof String)) {
            throw new Error("Expected the field `networkProfile` to be a primitive type in the JSON string but got " + data['networkProfile']);
        }
        if (data['pullDirectories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pullDirectories'])) {
                throw new Error("Expected the field `pullDirectories` to be an array in the JSON data but got " + data['pullDirectories']);
            }
            // validate the optional field `pullDirectories` (array)
            for (const item of data['pullDirectories']) {
                IosDeviceFile.validateJSON(item);
            };
        }
        if (data['pushFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pushFiles'])) {
                throw new Error("Expected the field `pushFiles` to be an array in the JSON data but got " + data['pushFiles']);
            }
            // validate the optional field `pushFiles` (array)
            for (const item of data['pushFiles']) {
                IosDeviceFile.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * iOS apps to install in addition to those being directly tested.
 * @member {Array.<module:model/FileReference>} additionalIpas
 */
IosTestSetup.prototype['additionalIpas'] = undefined;

/**
 * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
 * @member {String} networkProfile
 */
IosTestSetup.prototype['networkProfile'] = undefined;

/**
 * List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (such as /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (such as /Documents) by specifying the bundle ID.
 * @member {Array.<module:model/IosDeviceFile>} pullDirectories
 */
IosTestSetup.prototype['pullDirectories'] = undefined;

/**
 * List of files to push to the device before starting the test.
 * @member {Array.<module:model/IosDeviceFile>} pushFiles
 */
IosTestSetup.prototype['pushFiles'] = undefined;






export default IosTestSetup;

