/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AndroidDevice from './AndroidDevice';
import SessionStateEvent from './SessionStateEvent';

/**
 * The DeviceSession model module.
 * @module model/DeviceSession
 * @version v1
 */
class DeviceSession {
    /**
     * Constructs a new <code>DeviceSession</code>.
     * Protobuf message describing the device message, used from several RPCs.
     * @alias module:model/DeviceSession
     */
    constructor() { 
        
        DeviceSession.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceSession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceSession} obj Optional instance to populate.
     * @return {module:model/DeviceSession} The populated <code>DeviceSession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceSession();

            if (data.hasOwnProperty('activeStartTime')) {
                obj['activeStartTime'] = ApiClient.convertToType(data['activeStartTime'], 'String');
            }
            if (data.hasOwnProperty('androidDevice')) {
                obj['androidDevice'] = AndroidDevice.constructFromObject(data['androidDevice']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('inactivityTimeout')) {
                obj['inactivityTimeout'] = ApiClient.convertToType(data['inactivityTimeout'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateHistories')) {
                obj['stateHistories'] = ApiClient.convertToType(data['stateHistories'], [SessionStateEvent]);
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceSession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceSession</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activeStartTime'] && !(typeof data['activeStartTime'] === 'string' || data['activeStartTime'] instanceof String)) {
            throw new Error("Expected the field `activeStartTime` to be a primitive type in the JSON string but got " + data['activeStartTime']);
        }
        // validate the optional field `androidDevice`
        if (data['androidDevice']) { // data not null
          AndroidDevice.validateJSON(data['androidDevice']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['inactivityTimeout'] && !(typeof data['inactivityTimeout'] === 'string' || data['inactivityTimeout'] instanceof String)) {
            throw new Error("Expected the field `inactivityTimeout` to be a primitive type in the JSON string but got " + data['inactivityTimeout']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['stateHistories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stateHistories'])) {
                throw new Error("Expected the field `stateHistories` to be an array in the JSON data but got " + data['stateHistories']);
            }
            // validate the optional field `stateHistories` (array)
            for (const item of data['stateHistories']) {
                SessionStateEvent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp that the session first became ACTIVE.
 * @member {String} activeStartTime
 */
DeviceSession.prototype['activeStartTime'] = undefined;

/**
 * @member {module:model/AndroidDevice} androidDevice
 */
DeviceSession.prototype['androidDevice'] = undefined;

/**
 * Output only. The time that the Session was created.
 * @member {String} createTime
 */
DeviceSession.prototype['createTime'] = undefined;

/**
 * Output only. The title of the DeviceSession to be presented in the UI.
 * @member {String} displayName
 */
DeviceSession.prototype['displayName'] = undefined;

/**
 * Optional. If the device is still in use at this time, any connections will be ended and the SessionState will transition from ACTIVE to FINISHED.
 * @member {String} expireTime
 */
DeviceSession.prototype['expireTime'] = undefined;

/**
 * Output only. The interval of time that this device must be interacted with before it transitions from ACTIVE to TIMEOUT_INACTIVITY.
 * @member {String} inactivityTimeout
 */
DeviceSession.prototype['inactivityTimeout'] = undefined;

/**
 * Optional. Name of the DeviceSession, e.g. \"projects/{project_id}/deviceSessions/{session_id}\"
 * @member {String} name
 */
DeviceSession.prototype['name'] = undefined;

/**
 * Output only. Current state of the DeviceSession.
 * @member {module:model/DeviceSession.StateEnum} state
 */
DeviceSession.prototype['state'] = undefined;

/**
 * Output only. The historical state transitions of the session_state message including the current session state.
 * @member {Array.<module:model/SessionStateEvent>} stateHistories
 */
DeviceSession.prototype['stateHistories'] = undefined;

/**
 * Optional. The amount of time that a device will be initially allocated for. This can eventually be extended with the UpdateDeviceSession RPC. Default: 30 minutes.
 * @member {String} ttl
 */
DeviceSession.prototype['ttl'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DeviceSession['StateEnum'] = {

    /**
     * value: "SESSION_STATE_UNSPECIFIED"
     * @const
     */
    "SESSION_STATE_UNSPECIFIED": "SESSION_STATE_UNSPECIFIED",

    /**
     * value: "REQUESTED"
     * @const
     */
    "REQUESTED": "REQUESTED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED",

    /**
     * value: "FINISHED"
     * @const
     */
    "FINISHED": "FINISHED",

    /**
     * value: "UNAVAILABLE"
     * @const
     */
    "UNAVAILABLE": "UNAVAILABLE",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default DeviceSession;

