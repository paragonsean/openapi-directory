/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DirectAccessVersionInfo model module.
 * @module model/DirectAccessVersionInfo
 * @version v1
 */
class DirectAccessVersionInfo {
    /**
     * Constructs a new <code>DirectAccessVersionInfo</code>.
     * Denotes whether Direct Access is supported, and by which client versions. DirectAccessService is currently available as a preview to select developers. You can register today on behalf of you and your team at https://developer.android.com/studio/preview/android-device-streaming
     * @alias module:model/DirectAccessVersionInfo
     */
    constructor() { 
        
        DirectAccessVersionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DirectAccessVersionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DirectAccessVersionInfo} obj Optional instance to populate.
     * @return {module:model/DirectAccessVersionInfo} The populated <code>DirectAccessVersionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DirectAccessVersionInfo();

            if (data.hasOwnProperty('directAccessSupported')) {
                obj['directAccessSupported'] = ApiClient.convertToType(data['directAccessSupported'], 'Boolean');
            }
            if (data.hasOwnProperty('minimumAndroidStudioVersion')) {
                obj['minimumAndroidStudioVersion'] = ApiClient.convertToType(data['minimumAndroidStudioVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DirectAccessVersionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DirectAccessVersionInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['minimumAndroidStudioVersion'] && !(typeof data['minimumAndroidStudioVersion'] === 'string' || data['minimumAndroidStudioVersion'] instanceof String)) {
            throw new Error("Expected the field `minimumAndroidStudioVersion` to be a primitive type in the JSON string but got " + data['minimumAndroidStudioVersion']);
        }

        return true;
    }


}



/**
 * Whether direct access is supported at all. Clients are expected to filter down the device list to only android models and versions which support Direct Access when that is the user intent.
 * @member {Boolean} directAccessSupported
 */
DirectAccessVersionInfo.prototype['directAccessSupported'] = undefined;

/**
 * Output only. Indicates client-device compatibility, where a device is known to work only with certain workarounds implemented in the Android Studio client. Expected format \"major.minor.micro.patch\", e.g. \"5921.22.2211.8881706\".
 * @member {String} minimumAndroidStudioVersion
 */
DirectAccessVersionInfo.prototype['minimumAndroidStudioVersion'] = undefined;






export default DirectAccessVersionInfo;

