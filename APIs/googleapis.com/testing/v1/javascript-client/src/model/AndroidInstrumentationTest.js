/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppBundle from './AppBundle';
import FileReference from './FileReference';
import ShardingOption from './ShardingOption';

/**
 * The AndroidInstrumentationTest model module.
 * @module model/AndroidInstrumentationTest
 * @version v1
 */
class AndroidInstrumentationTest {
    /**
     * Constructs a new <code>AndroidInstrumentationTest</code>.
     * A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
     * @alias module:model/AndroidInstrumentationTest
     */
    constructor() { 
        
        AndroidInstrumentationTest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AndroidInstrumentationTest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AndroidInstrumentationTest} obj Optional instance to populate.
     * @return {module:model/AndroidInstrumentationTest} The populated <code>AndroidInstrumentationTest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AndroidInstrumentationTest();

            if (data.hasOwnProperty('appApk')) {
                obj['appApk'] = FileReference.constructFromObject(data['appApk']);
            }
            if (data.hasOwnProperty('appBundle')) {
                obj['appBundle'] = AppBundle.constructFromObject(data['appBundle']);
            }
            if (data.hasOwnProperty('appPackageId')) {
                obj['appPackageId'] = ApiClient.convertToType(data['appPackageId'], 'String');
            }
            if (data.hasOwnProperty('orchestratorOption')) {
                obj['orchestratorOption'] = ApiClient.convertToType(data['orchestratorOption'], 'String');
            }
            if (data.hasOwnProperty('shardingOption')) {
                obj['shardingOption'] = ShardingOption.constructFromObject(data['shardingOption']);
            }
            if (data.hasOwnProperty('testApk')) {
                obj['testApk'] = FileReference.constructFromObject(data['testApk']);
            }
            if (data.hasOwnProperty('testPackageId')) {
                obj['testPackageId'] = ApiClient.convertToType(data['testPackageId'], 'String');
            }
            if (data.hasOwnProperty('testRunnerClass')) {
                obj['testRunnerClass'] = ApiClient.convertToType(data['testRunnerClass'], 'String');
            }
            if (data.hasOwnProperty('testTargets')) {
                obj['testTargets'] = ApiClient.convertToType(data['testTargets'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AndroidInstrumentationTest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AndroidInstrumentationTest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `appApk`
        if (data['appApk']) { // data not null
          FileReference.validateJSON(data['appApk']);
        }
        // validate the optional field `appBundle`
        if (data['appBundle']) { // data not null
          AppBundle.validateJSON(data['appBundle']);
        }
        // ensure the json data is a string
        if (data['appPackageId'] && !(typeof data['appPackageId'] === 'string' || data['appPackageId'] instanceof String)) {
            throw new Error("Expected the field `appPackageId` to be a primitive type in the JSON string but got " + data['appPackageId']);
        }
        // ensure the json data is a string
        if (data['orchestratorOption'] && !(typeof data['orchestratorOption'] === 'string' || data['orchestratorOption'] instanceof String)) {
            throw new Error("Expected the field `orchestratorOption` to be a primitive type in the JSON string but got " + data['orchestratorOption']);
        }
        // validate the optional field `shardingOption`
        if (data['shardingOption']) { // data not null
          ShardingOption.validateJSON(data['shardingOption']);
        }
        // validate the optional field `testApk`
        if (data['testApk']) { // data not null
          FileReference.validateJSON(data['testApk']);
        }
        // ensure the json data is a string
        if (data['testPackageId'] && !(typeof data['testPackageId'] === 'string' || data['testPackageId'] instanceof String)) {
            throw new Error("Expected the field `testPackageId` to be a primitive type in the JSON string but got " + data['testPackageId']);
        }
        // ensure the json data is a string
        if (data['testRunnerClass'] && !(typeof data['testRunnerClass'] === 'string' || data['testRunnerClass'] instanceof String)) {
            throw new Error("Expected the field `testRunnerClass` to be a primitive type in the JSON string but got " + data['testRunnerClass']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['testTargets'])) {
            throw new Error("Expected the field `testTargets` to be an array in the JSON data but got " + data['testTargets']);
        }

        return true;
    }


}



/**
 * @member {module:model/FileReference} appApk
 */
AndroidInstrumentationTest.prototype['appApk'] = undefined;

/**
 * @member {module:model/AppBundle} appBundle
 */
AndroidInstrumentationTest.prototype['appBundle'] = undefined;

/**
 * The java package for the application under test. The default value is determined by examining the application's manifest.
 * @member {String} appPackageId
 */
AndroidInstrumentationTest.prototype['appPackageId'] = undefined;

/**
 * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
 * @member {module:model/AndroidInstrumentationTest.OrchestratorOptionEnum} orchestratorOption
 */
AndroidInstrumentationTest.prototype['orchestratorOption'] = undefined;

/**
 * @member {module:model/ShardingOption} shardingOption
 */
AndroidInstrumentationTest.prototype['shardingOption'] = undefined;

/**
 * @member {module:model/FileReference} testApk
 */
AndroidInstrumentationTest.prototype['testApk'] = undefined;

/**
 * The java package for the test to be executed. The default value is determined by examining the application's manifest.
 * @member {String} testPackageId
 */
AndroidInstrumentationTest.prototype['testPackageId'] = undefined;

/**
 * The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
 * @member {String} testRunnerClass
 */
AndroidInstrumentationTest.prototype['testRunnerClass'] = undefined;

/**
 * Each target must be fully qualified with the package name or class name, in one of these formats: - \"package package_name\" - \"class package_name.class_name\" - \"class package_name.class_name#method_name\" If empty, all targets in the module will be run.
 * @member {Array.<String>} testTargets
 */
AndroidInstrumentationTest.prototype['testTargets'] = undefined;





/**
 * Allowed values for the <code>orchestratorOption</code> property.
 * @enum {String}
 * @readonly
 */
AndroidInstrumentationTest['OrchestratorOptionEnum'] = {

    /**
     * value: "ORCHESTRATOR_OPTION_UNSPECIFIED"
     * @const
     */
    "ORCHESTRATOR_OPTION_UNSPECIFIED": "ORCHESTRATOR_OPTION_UNSPECIFIED",

    /**
     * value: "USE_ORCHESTRATOR"
     * @const
     */
    "USE_ORCHESTRATOR": "USE_ORCHESTRATOR",

    /**
     * value: "DO_NOT_USE_ORCHESTRATOR"
     * @const
     */
    "DO_NOT_USE_ORCHESTRATOR": "DO_NOT_USE_ORCHESTRATOR"
};



export default AndroidInstrumentationTest;

