/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileReference from './FileReference';

/**
 * The RegularFile model module.
 * @module model/RegularFile
 * @version v1
 */
class RegularFile {
    /**
     * Constructs a new <code>RegularFile</code>.
     * A file or directory to install on the device before the test starts.
     * @alias module:model/RegularFile
     */
    constructor() { 
        
        RegularFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegularFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegularFile} obj Optional instance to populate.
     * @return {module:model/RegularFile} The populated <code>RegularFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegularFile();

            if (data.hasOwnProperty('content')) {
                obj['content'] = FileReference.constructFromObject(data['content']);
            }
            if (data.hasOwnProperty('devicePath')) {
                obj['devicePath'] = ApiClient.convertToType(data['devicePath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegularFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegularFile</code>.
     */
    static validateJSON(data) {
        // validate the optional field `content`
        if (data['content']) { // data not null
          FileReference.validateJSON(data['content']);
        }
        // ensure the json data is a string
        if (data['devicePath'] && !(typeof data['devicePath'] === 'string' || data['devicePath'] instanceof String)) {
            throw new Error("Expected the field `devicePath` to be a primitive type in the JSON string but got " + data['devicePath']);
        }

        return true;
    }


}



/**
 * @member {module:model/FileReference} content
 */
RegularFile.prototype['content'] = undefined;

/**
 * Required. Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.
 * @member {String} devicePath
 */
RegularFile.prototype['devicePath'] = undefined;






export default RegularFile;

