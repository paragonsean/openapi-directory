/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntentFilter from './IntentFilter';
import Metadata from './Metadata';
import Service from './Service';
import UsesFeature from './UsesFeature';

/**
 * The ApkManifest model module.
 * @module model/ApkManifest
 * @version v1
 */
class ApkManifest {
    /**
     * Constructs a new <code>ApkManifest</code>.
     * An Android app manifest. See http://developer.android.com/guide/topics/manifest/manifest-intro.html
     * @alias module:model/ApkManifest
     */
    constructor() { 
        
        ApkManifest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApkManifest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApkManifest} obj Optional instance to populate.
     * @return {module:model/ApkManifest} The populated <code>ApkManifest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApkManifest();

            if (data.hasOwnProperty('applicationLabel')) {
                obj['applicationLabel'] = ApiClient.convertToType(data['applicationLabel'], 'String');
            }
            if (data.hasOwnProperty('intentFilters')) {
                obj['intentFilters'] = ApiClient.convertToType(data['intentFilters'], [IntentFilter]);
            }
            if (data.hasOwnProperty('maxSdkVersion')) {
                obj['maxSdkVersion'] = ApiClient.convertToType(data['maxSdkVersion'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [Metadata]);
            }
            if (data.hasOwnProperty('minSdkVersion')) {
                obj['minSdkVersion'] = ApiClient.convertToType(data['minSdkVersion'], 'Number');
            }
            if (data.hasOwnProperty('packageName')) {
                obj['packageName'] = ApiClient.convertToType(data['packageName'], 'String');
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], [Service]);
            }
            if (data.hasOwnProperty('targetSdkVersion')) {
                obj['targetSdkVersion'] = ApiClient.convertToType(data['targetSdkVersion'], 'Number');
            }
            if (data.hasOwnProperty('usesFeature')) {
                obj['usesFeature'] = ApiClient.convertToType(data['usesFeature'], [UsesFeature]);
            }
            if (data.hasOwnProperty('usesPermission')) {
                obj['usesPermission'] = ApiClient.convertToType(data['usesPermission'], ['String']);
            }
            if (data.hasOwnProperty('versionCode')) {
                obj['versionCode'] = ApiClient.convertToType(data['versionCode'], 'String');
            }
            if (data.hasOwnProperty('versionName')) {
                obj['versionName'] = ApiClient.convertToType(data['versionName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApkManifest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApkManifest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['applicationLabel'] && !(typeof data['applicationLabel'] === 'string' || data['applicationLabel'] instanceof String)) {
            throw new Error("Expected the field `applicationLabel` to be a primitive type in the JSON string but got " + data['applicationLabel']);
        }
        if (data['intentFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['intentFilters'])) {
                throw new Error("Expected the field `intentFilters` to be an array in the JSON data but got " + data['intentFilters']);
            }
            // validate the optional field `intentFilters` (array)
            for (const item of data['intentFilters']) {
                IntentFilter.validateJSON(item);
            };
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                Metadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['packageName'] && !(typeof data['packageName'] === 'string' || data['packageName'] instanceof String)) {
            throw new Error("Expected the field `packageName` to be a primitive type in the JSON string but got " + data['packageName']);
        }
        if (data['services']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['services'])) {
                throw new Error("Expected the field `services` to be an array in the JSON data but got " + data['services']);
            }
            // validate the optional field `services` (array)
            for (const item of data['services']) {
                Service.validateJSON(item);
            };
        }
        if (data['usesFeature']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['usesFeature'])) {
                throw new Error("Expected the field `usesFeature` to be an array in the JSON data but got " + data['usesFeature']);
            }
            // validate the optional field `usesFeature` (array)
            for (const item of data['usesFeature']) {
                UsesFeature.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['usesPermission'])) {
            throw new Error("Expected the field `usesPermission` to be an array in the JSON data but got " + data['usesPermission']);
        }
        // ensure the json data is a string
        if (data['versionCode'] && !(typeof data['versionCode'] === 'string' || data['versionCode'] instanceof String)) {
            throw new Error("Expected the field `versionCode` to be a primitive type in the JSON string but got " + data['versionCode']);
        }
        // ensure the json data is a string
        if (data['versionName'] && !(typeof data['versionName'] === 'string' || data['versionName'] instanceof String)) {
            throw new Error("Expected the field `versionName` to be a primitive type in the JSON string but got " + data['versionName']);
        }

        return true;
    }


}



/**
 * User-readable name for the application.
 * @member {String} applicationLabel
 */
ApkManifest.prototype['applicationLabel'] = undefined;

/**
 * @member {Array.<module:model/IntentFilter>} intentFilters
 */
ApkManifest.prototype['intentFilters'] = undefined;

/**
 * Maximum API level on which the application is designed to run.
 * @member {Number} maxSdkVersion
 */
ApkManifest.prototype['maxSdkVersion'] = undefined;

/**
 * Meta-data tags defined in the manifest.
 * @member {Array.<module:model/Metadata>} metadata
 */
ApkManifest.prototype['metadata'] = undefined;

/**
 * Minimum API level required for the application to run.
 * @member {Number} minSdkVersion
 */
ApkManifest.prototype['minSdkVersion'] = undefined;

/**
 * Full Java-style package name for this application, e.g. \"com.example.foo\".
 * @member {String} packageName
 */
ApkManifest.prototype['packageName'] = undefined;

/**
 * Services contained in the tag.
 * @member {Array.<module:model/Service>} services
 */
ApkManifest.prototype['services'] = undefined;

/**
 * Specifies the API Level on which the application is designed to run.
 * @member {Number} targetSdkVersion
 */
ApkManifest.prototype['targetSdkVersion'] = undefined;

/**
 * Feature usage tags defined in the manifest.
 * @member {Array.<module:model/UsesFeature>} usesFeature
 */
ApkManifest.prototype['usesFeature'] = undefined;

/**
 * Permissions declared to be used by the application
 * @member {Array.<String>} usesPermission
 */
ApkManifest.prototype['usesPermission'] = undefined;

/**
 * Version number used internally by the app.
 * @member {String} versionCode
 */
ApkManifest.prototype['versionCode'] = undefined;

/**
 * Version number shown to users.
 * @member {String} versionName
 */
ApkManifest.prototype['versionName'] = undefined;






export default ApkManifest;

