/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileReference from './FileReference';

/**
 * The IosDeviceFile model module.
 * @module model/IosDeviceFile
 * @version v1
 */
class IosDeviceFile {
    /**
     * Constructs a new <code>IosDeviceFile</code>.
     * A file or directory to install on the device before the test starts.
     * @alias module:model/IosDeviceFile
     */
    constructor() { 
        
        IosDeviceFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IosDeviceFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IosDeviceFile} obj Optional instance to populate.
     * @return {module:model/IosDeviceFile} The populated <code>IosDeviceFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IosDeviceFile();

            if (data.hasOwnProperty('bundleId')) {
                obj['bundleId'] = ApiClient.convertToType(data['bundleId'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = FileReference.constructFromObject(data['content']);
            }
            if (data.hasOwnProperty('devicePath')) {
                obj['devicePath'] = ApiClient.convertToType(data['devicePath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IosDeviceFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IosDeviceFile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bundleId'] && !(typeof data['bundleId'] === 'string' || data['bundleId'] instanceof String)) {
            throw new Error("Expected the field `bundleId` to be a primitive type in the JSON string but got " + data['bundleId']);
        }
        // validate the optional field `content`
        if (data['content']) { // data not null
          FileReference.validateJSON(data['content']);
        }
        // ensure the json data is a string
        if (data['devicePath'] && !(typeof data['devicePath'] === 'string' || data['devicePath'] instanceof String)) {
            throw new Error("Expected the field `devicePath` to be a primitive type in the JSON string but got " + data['devicePath']);
        }

        return true;
    }


}



/**
 * The bundle id of the app where this file lives. iOS apps sandbox their own filesystem, so app files must specify which app installed on the device.
 * @member {String} bundleId
 */
IosDeviceFile.prototype['bundleId'] = undefined;

/**
 * @member {module:model/FileReference} content
 */
IosDeviceFile.prototype['content'] = undefined;

/**
 * Location of the file on the device, inside the app's sandboxed filesystem
 * @member {String} devicePath
 */
IosDeviceFile.prototype['devicePath'] = undefined;






export default IosDeviceFile;

