/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IosDevice model module.
 * @module model/IosDevice
 * @version v1
 */
class IosDevice {
    /**
     * Constructs a new <code>IosDevice</code>.
     * A single iOS device.
     * @alias module:model/IosDevice
     */
    constructor() { 
        
        IosDevice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IosDevice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IosDevice} obj Optional instance to populate.
     * @return {module:model/IosDevice} The populated <code>IosDevice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IosDevice();

            if (data.hasOwnProperty('iosModelId')) {
                obj['iosModelId'] = ApiClient.convertToType(data['iosModelId'], 'String');
            }
            if (data.hasOwnProperty('iosVersionId')) {
                obj['iosVersionId'] = ApiClient.convertToType(data['iosVersionId'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('orientation')) {
                obj['orientation'] = ApiClient.convertToType(data['orientation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IosDevice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IosDevice</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['iosModelId'] && !(typeof data['iosModelId'] === 'string' || data['iosModelId'] instanceof String)) {
            throw new Error("Expected the field `iosModelId` to be a primitive type in the JSON string but got " + data['iosModelId']);
        }
        // ensure the json data is a string
        if (data['iosVersionId'] && !(typeof data['iosVersionId'] === 'string' || data['iosVersionId'] instanceof String)) {
            throw new Error("Expected the field `iosVersionId` to be a primitive type in the JSON string but got " + data['iosVersionId']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['orientation'] && !(typeof data['orientation'] === 'string' || data['orientation'] instanceof String)) {
            throw new Error("Expected the field `orientation` to be a primitive type in the JSON string but got " + data['orientation']);
        }

        return true;
    }


}



/**
 * Required. The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
 * @member {String} iosModelId
 */
IosDevice.prototype['iosModelId'] = undefined;

/**
 * Required. The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
 * @member {String} iosVersionId
 */
IosDevice.prototype['iosVersionId'] = undefined;

/**
 * Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
 * @member {String} locale
 */
IosDevice.prototype['locale'] = undefined;

/**
 * Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
 * @member {String} orientation
 */
IosDevice.prototype['orientation'] = undefined;






export default IosDevice;

