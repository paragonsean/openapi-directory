/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppBundle from './AppBundle';
import FileReference from './FileReference';
import RoboDirective from './RoboDirective';
import RoboStartingIntent from './RoboStartingIntent';

/**
 * The AndroidRoboTest model module.
 * @module model/AndroidRoboTest
 * @version v1
 */
class AndroidRoboTest {
    /**
     * Constructs a new <code>AndroidRoboTest</code>.
     * A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes.
     * @alias module:model/AndroidRoboTest
     */
    constructor() { 
        
        AndroidRoboTest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AndroidRoboTest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AndroidRoboTest} obj Optional instance to populate.
     * @return {module:model/AndroidRoboTest} The populated <code>AndroidRoboTest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AndroidRoboTest();

            if (data.hasOwnProperty('appApk')) {
                obj['appApk'] = FileReference.constructFromObject(data['appApk']);
            }
            if (data.hasOwnProperty('appBundle')) {
                obj['appBundle'] = AppBundle.constructFromObject(data['appBundle']);
            }
            if (data.hasOwnProperty('appInitialActivity')) {
                obj['appInitialActivity'] = ApiClient.convertToType(data['appInitialActivity'], 'String');
            }
            if (data.hasOwnProperty('appPackageId')) {
                obj['appPackageId'] = ApiClient.convertToType(data['appPackageId'], 'String');
            }
            if (data.hasOwnProperty('maxDepth')) {
                obj['maxDepth'] = ApiClient.convertToType(data['maxDepth'], 'Number');
            }
            if (data.hasOwnProperty('maxSteps')) {
                obj['maxSteps'] = ApiClient.convertToType(data['maxSteps'], 'Number');
            }
            if (data.hasOwnProperty('roboDirectives')) {
                obj['roboDirectives'] = ApiClient.convertToType(data['roboDirectives'], [RoboDirective]);
            }
            if (data.hasOwnProperty('roboMode')) {
                obj['roboMode'] = ApiClient.convertToType(data['roboMode'], 'String');
            }
            if (data.hasOwnProperty('roboScript')) {
                obj['roboScript'] = FileReference.constructFromObject(data['roboScript']);
            }
            if (data.hasOwnProperty('startingIntents')) {
                obj['startingIntents'] = ApiClient.convertToType(data['startingIntents'], [RoboStartingIntent]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AndroidRoboTest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AndroidRoboTest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `appApk`
        if (data['appApk']) { // data not null
          FileReference.validateJSON(data['appApk']);
        }
        // validate the optional field `appBundle`
        if (data['appBundle']) { // data not null
          AppBundle.validateJSON(data['appBundle']);
        }
        // ensure the json data is a string
        if (data['appInitialActivity'] && !(typeof data['appInitialActivity'] === 'string' || data['appInitialActivity'] instanceof String)) {
            throw new Error("Expected the field `appInitialActivity` to be a primitive type in the JSON string but got " + data['appInitialActivity']);
        }
        // ensure the json data is a string
        if (data['appPackageId'] && !(typeof data['appPackageId'] === 'string' || data['appPackageId'] instanceof String)) {
            throw new Error("Expected the field `appPackageId` to be a primitive type in the JSON string but got " + data['appPackageId']);
        }
        if (data['roboDirectives']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['roboDirectives'])) {
                throw new Error("Expected the field `roboDirectives` to be an array in the JSON data but got " + data['roboDirectives']);
            }
            // validate the optional field `roboDirectives` (array)
            for (const item of data['roboDirectives']) {
                RoboDirective.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['roboMode'] && !(typeof data['roboMode'] === 'string' || data['roboMode'] instanceof String)) {
            throw new Error("Expected the field `roboMode` to be a primitive type in the JSON string but got " + data['roboMode']);
        }
        // validate the optional field `roboScript`
        if (data['roboScript']) { // data not null
          FileReference.validateJSON(data['roboScript']);
        }
        if (data['startingIntents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['startingIntents'])) {
                throw new Error("Expected the field `startingIntents` to be an array in the JSON data but got " + data['startingIntents']);
            }
            // validate the optional field `startingIntents` (array)
            for (const item of data['startingIntents']) {
                RoboStartingIntent.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/FileReference} appApk
 */
AndroidRoboTest.prototype['appApk'] = undefined;

/**
 * @member {module:model/AppBundle} appBundle
 */
AndroidRoboTest.prototype['appBundle'] = undefined;

/**
 * The initial activity that should be used to start the app.
 * @member {String} appInitialActivity
 */
AndroidRoboTest.prototype['appInitialActivity'] = undefined;

/**
 * The java package for the application under test. The default value is determined by examining the application's manifest.
 * @member {String} appPackageId
 */
AndroidRoboTest.prototype['appPackageId'] = undefined;

/**
 * The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.
 * @member {Number} maxDepth
 */
AndroidRoboTest.prototype['maxDepth'] = undefined;

/**
 * The max number of steps Robo can execute. Default is no limit.
 * @member {Number} maxSteps
 */
AndroidRoboTest.prototype['maxSteps'] = undefined;

/**
 * A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.
 * @member {Array.<module:model/RoboDirective>} roboDirectives
 */
AndroidRoboTest.prototype['roboDirectives'] = undefined;

/**
 * The mode in which Robo should run. Most clients should allow the server to populate this field automatically.
 * @member {module:model/AndroidRoboTest.RoboModeEnum} roboMode
 */
AndroidRoboTest.prototype['roboMode'] = undefined;

/**
 * @member {module:model/FileReference} roboScript
 */
AndroidRoboTest.prototype['roboScript'] = undefined;

/**
 * The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).
 * @member {Array.<module:model/RoboStartingIntent>} startingIntents
 */
AndroidRoboTest.prototype['startingIntents'] = undefined;





/**
 * Allowed values for the <code>roboMode</code> property.
 * @enum {String}
 * @readonly
 */
AndroidRoboTest['RoboModeEnum'] = {

    /**
     * value: "ROBO_MODE_UNSPECIFIED"
     * @const
     */
    "MODE_UNSPECIFIED": "ROBO_MODE_UNSPECIFIED",

    /**
     * value: "ROBO_VERSION_1"
     * @const
     */
    "VERSION_1": "ROBO_VERSION_1",

    /**
     * value: "ROBO_VERSION_2"
     * @const
     */
    "VERSION_2": "ROBO_VERSION_2"
};



export default AndroidRoboTest;

