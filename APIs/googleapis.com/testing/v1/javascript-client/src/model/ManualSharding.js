/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestTargetsForShard from './TestTargetsForShard';

/**
 * The ManualSharding model module.
 * @module model/ManualSharding
 * @version v1
 */
class ManualSharding {
    /**
     * Constructs a new <code>ManualSharding</code>.
     * Shards test cases into the specified groups of packages, classes, and/or methods. With manual sharding enabled, specifying test targets via environment_variables or in InstrumentationTest is invalid.
     * @alias module:model/ManualSharding
     */
    constructor() { 
        
        ManualSharding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManualSharding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManualSharding} obj Optional instance to populate.
     * @return {module:model/ManualSharding} The populated <code>ManualSharding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManualSharding();

            if (data.hasOwnProperty('testTargetsForShard')) {
                obj['testTargetsForShard'] = ApiClient.convertToType(data['testTargetsForShard'], [TestTargetsForShard]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManualSharding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManualSharding</code>.
     */
    static validateJSON(data) {
        if (data['testTargetsForShard']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testTargetsForShard'])) {
                throw new Error("Expected the field `testTargetsForShard` to be an array in the JSON data but got " + data['testTargetsForShard']);
            }
            // validate the optional field `testTargetsForShard` (array)
            for (const item of data['testTargetsForShard']) {
                TestTargetsForShard.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. Group of packages, classes, and/or test methods to be run for each manually-created shard. You must specify at least one shard if this field is present. When you select one or more physical devices, the number of repeated test_targets_for_shard must be <= 50. When you select one or more ARM virtual devices, it must be <= 200. When you select only x86 virtual devices, it must be <= 500.
 * @member {Array.<module:model/TestTargetsForShard>} testTargetsForShard
 */
ManualSharding.prototype['testTargetsForShard'] = undefined;






export default ManualSharding;

