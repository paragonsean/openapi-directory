/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import Apk from './Apk';
import DeviceFile from './DeviceFile';
import EnvironmentVariable from './EnvironmentVariable';
import SystraceSetup from './SystraceSetup';

/**
 * The TestSetup model module.
 * @module model/TestSetup
 * @version v1
 */
class TestSetup {
    /**
     * Constructs a new <code>TestSetup</code>.
     * A description of how to set up the Android device prior to running the test.
     * @alias module:model/TestSetup
     */
    constructor() { 
        
        TestSetup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestSetup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestSetup} obj Optional instance to populate.
     * @return {module:model/TestSetup} The populated <code>TestSetup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestSetup();

            if (data.hasOwnProperty('account')) {
                obj['account'] = Account.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('additionalApks')) {
                obj['additionalApks'] = ApiClient.convertToType(data['additionalApks'], [Apk]);
            }
            if (data.hasOwnProperty('directoriesToPull')) {
                obj['directoriesToPull'] = ApiClient.convertToType(data['directoriesToPull'], ['String']);
            }
            if (data.hasOwnProperty('dontAutograntPermissions')) {
                obj['dontAutograntPermissions'] = ApiClient.convertToType(data['dontAutograntPermissions'], 'Boolean');
            }
            if (data.hasOwnProperty('environmentVariables')) {
                obj['environmentVariables'] = ApiClient.convertToType(data['environmentVariables'], [EnvironmentVariable]);
            }
            if (data.hasOwnProperty('filesToPush')) {
                obj['filesToPush'] = ApiClient.convertToType(data['filesToPush'], [DeviceFile]);
            }
            if (data.hasOwnProperty('initialSetupApks')) {
                obj['initialSetupApks'] = ApiClient.convertToType(data['initialSetupApks'], [Apk]);
            }
            if (data.hasOwnProperty('networkProfile')) {
                obj['networkProfile'] = ApiClient.convertToType(data['networkProfile'], 'String');
            }
            if (data.hasOwnProperty('systrace')) {
                obj['systrace'] = SystraceSetup.constructFromObject(data['systrace']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestSetup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestSetup</code>.
     */
    static validateJSON(data) {
        // validate the optional field `account`
        if (data['account']) { // data not null
          Account.validateJSON(data['account']);
        }
        if (data['additionalApks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalApks'])) {
                throw new Error("Expected the field `additionalApks` to be an array in the JSON data but got " + data['additionalApks']);
            }
            // validate the optional field `additionalApks` (array)
            for (const item of data['additionalApks']) {
                Apk.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['directoriesToPull'])) {
            throw new Error("Expected the field `directoriesToPull` to be an array in the JSON data but got " + data['directoriesToPull']);
        }
        if (data['environmentVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentVariables'])) {
                throw new Error("Expected the field `environmentVariables` to be an array in the JSON data but got " + data['environmentVariables']);
            }
            // validate the optional field `environmentVariables` (array)
            for (const item of data['environmentVariables']) {
                EnvironmentVariable.validateJSON(item);
            };
        }
        if (data['filesToPush']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filesToPush'])) {
                throw new Error("Expected the field `filesToPush` to be an array in the JSON data but got " + data['filesToPush']);
            }
            // validate the optional field `filesToPush` (array)
            for (const item of data['filesToPush']) {
                DeviceFile.validateJSON(item);
            };
        }
        if (data['initialSetupApks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['initialSetupApks'])) {
                throw new Error("Expected the field `initialSetupApks` to be an array in the JSON data but got " + data['initialSetupApks']);
            }
            // validate the optional field `initialSetupApks` (array)
            for (const item of data['initialSetupApks']) {
                Apk.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['networkProfile'] && !(typeof data['networkProfile'] === 'string' || data['networkProfile'] instanceof String)) {
            throw new Error("Expected the field `networkProfile` to be a primitive type in the JSON string but got " + data['networkProfile']);
        }
        // validate the optional field `systrace`
        if (data['systrace']) { // data not null
          SystraceSetup.validateJSON(data['systrace']);
        }

        return true;
    }


}



/**
 * @member {module:model/Account} account
 */
TestSetup.prototype['account'] = undefined;

/**
 * APKs to install in addition to those being directly tested. These will be installed after the app under test. Currently capped at 100.
 * @member {Array.<module:model/Apk>} additionalApks
 */
TestSetup.prototype['additionalApks'] = undefined;

/**
 * List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
 * @member {Array.<String>} directoriesToPull
 */
TestSetup.prototype['directoriesToPull'] = undefined;

/**
 * Whether to prevent all runtime permissions to be granted at app install
 * @member {Boolean} dontAutograntPermissions
 */
TestSetup.prototype['dontAutograntPermissions'] = undefined;

/**
 * Environment variables to set for the test (only applicable for instrumentation tests).
 * @member {Array.<module:model/EnvironmentVariable>} environmentVariables
 */
TestSetup.prototype['environmentVariables'] = undefined;

/**
 * List of files to push to the device before starting the test.
 * @member {Array.<module:model/DeviceFile>} filesToPush
 */
TestSetup.prototype['filesToPush'] = undefined;

/**
 * Optional. Initial setup APKs to install before the app under test is installed. Currently capped at 100.
 * @member {Array.<module:model/Apk>} initialSetupApks
 */
TestSetup.prototype['initialSetupApks'] = undefined;

/**
 * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
 * @member {String} networkProfile
 */
TestSetup.prototype['networkProfile'] = undefined;

/**
 * @member {module:model/SystraceSetup} systrace
 */
TestSetup.prototype['systrace'] = undefined;






export default TestSetup;

