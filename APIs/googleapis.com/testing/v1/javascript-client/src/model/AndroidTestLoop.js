/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppBundle from './AppBundle';
import FileReference from './FileReference';

/**
 * The AndroidTestLoop model module.
 * @module model/AndroidTestLoop
 * @version v1
 */
class AndroidTestLoop {
    /**
     * Constructs a new <code>AndroidTestLoop</code>.
     * A test of an Android Application with a Test Loop. The intent \\ will be implicitly added, since Games is the only user of this api, for the time being.
     * @alias module:model/AndroidTestLoop
     */
    constructor() { 
        
        AndroidTestLoop.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AndroidTestLoop</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AndroidTestLoop} obj Optional instance to populate.
     * @return {module:model/AndroidTestLoop} The populated <code>AndroidTestLoop</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AndroidTestLoop();

            if (data.hasOwnProperty('appApk')) {
                obj['appApk'] = FileReference.constructFromObject(data['appApk']);
            }
            if (data.hasOwnProperty('appBundle')) {
                obj['appBundle'] = AppBundle.constructFromObject(data['appBundle']);
            }
            if (data.hasOwnProperty('appPackageId')) {
                obj['appPackageId'] = ApiClient.convertToType(data['appPackageId'], 'String');
            }
            if (data.hasOwnProperty('scenarioLabels')) {
                obj['scenarioLabels'] = ApiClient.convertToType(data['scenarioLabels'], ['String']);
            }
            if (data.hasOwnProperty('scenarios')) {
                obj['scenarios'] = ApiClient.convertToType(data['scenarios'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AndroidTestLoop</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AndroidTestLoop</code>.
     */
    static validateJSON(data) {
        // validate the optional field `appApk`
        if (data['appApk']) { // data not null
          FileReference.validateJSON(data['appApk']);
        }
        // validate the optional field `appBundle`
        if (data['appBundle']) { // data not null
          AppBundle.validateJSON(data['appBundle']);
        }
        // ensure the json data is a string
        if (data['appPackageId'] && !(typeof data['appPackageId'] === 'string' || data['appPackageId'] instanceof String)) {
            throw new Error("Expected the field `appPackageId` to be a primitive type in the JSON string but got " + data['appPackageId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scenarioLabels'])) {
            throw new Error("Expected the field `scenarioLabels` to be an array in the JSON data but got " + data['scenarioLabels']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scenarios'])) {
            throw new Error("Expected the field `scenarios` to be an array in the JSON data but got " + data['scenarios']);
        }

        return true;
    }


}



/**
 * @member {module:model/FileReference} appApk
 */
AndroidTestLoop.prototype['appApk'] = undefined;

/**
 * @member {module:model/AppBundle} appBundle
 */
AndroidTestLoop.prototype['appBundle'] = undefined;

/**
 * The java package for the application under test. The default is determined by examining the application's manifest.
 * @member {String} appPackageId
 */
AndroidTestLoop.prototype['appPackageId'] = undefined;

/**
 * The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.
 * @member {Array.<String>} scenarioLabels
 */
AndroidTestLoop.prototype['scenarioLabels'] = undefined;

/**
 * The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.
 * @member {Array.<Number>} scenarios
 */
AndroidTestLoop.prototype['scenarios'] = undefined;






export default AndroidTestLoop;

