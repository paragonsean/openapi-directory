/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PerIosVersionInfo from './PerIosVersionInfo';

/**
 * The IosModel model module.
 * @module model/IosModel
 * @version v1
 */
class IosModel {
    /**
     * Constructs a new <code>IosModel</code>.
     * A description of an iOS device tests may be run on.
     * @alias module:model/IosModel
     */
    constructor() { 
        
        IosModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IosModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IosModel} obj Optional instance to populate.
     * @return {module:model/IosModel} The populated <code>IosModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IosModel();

            if (data.hasOwnProperty('deviceCapabilities')) {
                obj['deviceCapabilities'] = ApiClient.convertToType(data['deviceCapabilities'], ['String']);
            }
            if (data.hasOwnProperty('formFactor')) {
                obj['formFactor'] = ApiClient.convertToType(data['formFactor'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('perVersionInfo')) {
                obj['perVersionInfo'] = ApiClient.convertToType(data['perVersionInfo'], [PerIosVersionInfo]);
            }
            if (data.hasOwnProperty('screenDensity')) {
                obj['screenDensity'] = ApiClient.convertToType(data['screenDensity'], 'Number');
            }
            if (data.hasOwnProperty('screenX')) {
                obj['screenX'] = ApiClient.convertToType(data['screenX'], 'Number');
            }
            if (data.hasOwnProperty('screenY')) {
                obj['screenY'] = ApiClient.convertToType(data['screenY'], 'Number');
            }
            if (data.hasOwnProperty('supportedVersionIds')) {
                obj['supportedVersionIds'] = ApiClient.convertToType(data['supportedVersionIds'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IosModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IosModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['deviceCapabilities'])) {
            throw new Error("Expected the field `deviceCapabilities` to be an array in the JSON data but got " + data['deviceCapabilities']);
        }
        // ensure the json data is a string
        if (data['formFactor'] && !(typeof data['formFactor'] === 'string' || data['formFactor'] instanceof String)) {
            throw new Error("Expected the field `formFactor` to be a primitive type in the JSON string but got " + data['formFactor']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['perVersionInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['perVersionInfo'])) {
                throw new Error("Expected the field `perVersionInfo` to be an array in the JSON data but got " + data['perVersionInfo']);
            }
            // validate the optional field `perVersionInfo` (array)
            for (const item of data['perVersionInfo']) {
                PerIosVersionInfo.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedVersionIds'])) {
            throw new Error("Expected the field `supportedVersionIds` to be an array in the JSON data but got " + data['supportedVersionIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * Device capabilities. Copied from https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html
 * @member {Array.<String>} deviceCapabilities
 */
IosModel.prototype['deviceCapabilities'] = undefined;

/**
 * Whether this device is a phone, tablet, wearable, etc.
 * @member {module:model/IosModel.FormFactorEnum} formFactor
 */
IosModel.prototype['formFactor'] = undefined;

/**
 * The unique opaque id for this model. Use this for invoking the TestExecutionService.
 * @member {String} id
 */
IosModel.prototype['id'] = undefined;

/**
 * The human-readable name for this device model. Examples: \"iPhone 4s\", \"iPad Mini 2\".
 * @member {String} name
 */
IosModel.prototype['name'] = undefined;

/**
 * Version-specific information of an iOS model.
 * @member {Array.<module:model/PerIosVersionInfo>} perVersionInfo
 */
IosModel.prototype['perVersionInfo'] = undefined;

/**
 * Screen density in DPI.
 * @member {Number} screenDensity
 */
IosModel.prototype['screenDensity'] = undefined;

/**
 * Screen size in the horizontal (X) dimension measured in pixels.
 * @member {Number} screenX
 */
IosModel.prototype['screenX'] = undefined;

/**
 * Screen size in the vertical (Y) dimension measured in pixels.
 * @member {Number} screenY
 */
IosModel.prototype['screenY'] = undefined;

/**
 * The set of iOS major software versions this device supports.
 * @member {Array.<String>} supportedVersionIds
 */
IosModel.prototype['supportedVersionIds'] = undefined;

/**
 * Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".
 * @member {Array.<String>} tags
 */
IosModel.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>formFactor</code> property.
 * @enum {String}
 * @readonly
 */
IosModel['FormFactorEnum'] = {

    /**
     * value: "DEVICE_FORM_FACTOR_UNSPECIFIED"
     * @const
     */
    "DEVICE_FORM_FACTOR_UNSPECIFIED": "DEVICE_FORM_FACTOR_UNSPECIFIED",

    /**
     * value: "PHONE"
     * @const
     */
    "PHONE": "PHONE",

    /**
     * value: "TABLET"
     * @const
     */
    "TABLET": "TABLET",

    /**
     * value: "WEARABLE"
     * @const
     */
    "WEARABLE": "WEARABLE"
};



export default IosModel;

