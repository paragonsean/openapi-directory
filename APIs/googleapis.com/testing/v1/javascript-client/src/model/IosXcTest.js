/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileReference from './FileReference';

/**
 * The IosXcTest model module.
 * @module model/IosXcTest
 * @version v1
 */
class IosXcTest {
    /**
     * Constructs a new <code>IosXcTest</code>.
     * A test of an iOS application that uses the XCTest framework. Xcode supports the option to \&quot;build for testing\&quot;, which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.
     * @alias module:model/IosXcTest
     */
    constructor() { 
        
        IosXcTest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IosXcTest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IosXcTest} obj Optional instance to populate.
     * @return {module:model/IosXcTest} The populated <code>IosXcTest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IosXcTest();

            if (data.hasOwnProperty('appBundleId')) {
                obj['appBundleId'] = ApiClient.convertToType(data['appBundleId'], 'String');
            }
            if (data.hasOwnProperty('testSpecialEntitlements')) {
                obj['testSpecialEntitlements'] = ApiClient.convertToType(data['testSpecialEntitlements'], 'Boolean');
            }
            if (data.hasOwnProperty('testsZip')) {
                obj['testsZip'] = FileReference.constructFromObject(data['testsZip']);
            }
            if (data.hasOwnProperty('xcodeVersion')) {
                obj['xcodeVersion'] = ApiClient.convertToType(data['xcodeVersion'], 'String');
            }
            if (data.hasOwnProperty('xctestrun')) {
                obj['xctestrun'] = FileReference.constructFromObject(data['xctestrun']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IosXcTest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IosXcTest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appBundleId'] && !(typeof data['appBundleId'] === 'string' || data['appBundleId'] instanceof String)) {
            throw new Error("Expected the field `appBundleId` to be a primitive type in the JSON string but got " + data['appBundleId']);
        }
        // validate the optional field `testsZip`
        if (data['testsZip']) { // data not null
          FileReference.validateJSON(data['testsZip']);
        }
        // ensure the json data is a string
        if (data['xcodeVersion'] && !(typeof data['xcodeVersion'] === 'string' || data['xcodeVersion'] instanceof String)) {
            throw new Error("Expected the field `xcodeVersion` to be a primitive type in the JSON string but got " + data['xcodeVersion']);
        }
        // validate the optional field `xctestrun`
        if (data['xctestrun']) { // data not null
          FileReference.validateJSON(data['xctestrun']);
        }

        return true;
    }


}



/**
 * Output only. The bundle id for the application under test.
 * @member {String} appBundleId
 */
IosXcTest.prototype['appBundleId'] = undefined;

/**
 * The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
 * @member {Boolean} testSpecialEntitlements
 */
IosXcTest.prototype['testSpecialEntitlements'] = undefined;

/**
 * @member {module:model/FileReference} testsZip
 */
IosXcTest.prototype['testsZip'] = undefined;

/**
 * The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
 * @member {String} xcodeVersion
 */
IosXcTest.prototype['xcodeVersion'] = undefined;

/**
 * @member {module:model/FileReference} xctestrun
 */
IosXcTest.prototype['xctestrun'] = undefined;






export default IosXcTest;

