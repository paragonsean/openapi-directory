/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestDetails model module.
 * @module model/TestDetails
 * @version v1
 */
class TestDetails {
    /**
     * Constructs a new <code>TestDetails</code>.
     * Additional details about the progress of the running test.
     * @alias module:model/TestDetails
     */
    constructor() { 
        
        TestDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestDetails} obj Optional instance to populate.
     * @return {module:model/TestDetails} The populated <code>TestDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestDetails();

            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('progressMessages')) {
                obj['progressMessages'] = ApiClient.convertToType(data['progressMessages'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['progressMessages'])) {
            throw new Error("Expected the field `progressMessages` to be an array in the JSON data but got " + data['progressMessages']);
        }

        return true;
    }


}



/**
 * Output only. If the TestState is ERROR, then this string will contain human-readable details about the error.
 * @member {String} errorMessage
 */
TestDetails.prototype['errorMessage'] = undefined;

/**
 * Output only. Human-readable, detailed descriptions of the test's progress. For example: \"Provisioning a device\", \"Starting Test\". During the course of execution new data may be appended to the end of progress_messages.
 * @member {Array.<String>} progressMessages
 */
TestDetails.prototype['progressMessages'] = undefined;






export default TestDetails;

