/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Distribution from './Distribution';
import ModelDate from './ModelDate';

/**
 * The AndroidVersion model module.
 * @module model/AndroidVersion
 * @version v1
 */
class AndroidVersion {
    /**
     * Constructs a new <code>AndroidVersion</code>.
     * A version of the Android OS.
     * @alias module:model/AndroidVersion
     */
    constructor() { 
        
        AndroidVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AndroidVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AndroidVersion} obj Optional instance to populate.
     * @return {module:model/AndroidVersion} The populated <code>AndroidVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AndroidVersion();

            if (data.hasOwnProperty('apiLevel')) {
                obj['apiLevel'] = ApiClient.convertToType(data['apiLevel'], 'Number');
            }
            if (data.hasOwnProperty('codeName')) {
                obj['codeName'] = ApiClient.convertToType(data['codeName'], 'String');
            }
            if (data.hasOwnProperty('distribution')) {
                obj['distribution'] = Distribution.constructFromObject(data['distribution']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('releaseDate')) {
                obj['releaseDate'] = ModelDate.constructFromObject(data['releaseDate']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('versionString')) {
                obj['versionString'] = ApiClient.convertToType(data['versionString'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AndroidVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AndroidVersion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['codeName'] && !(typeof data['codeName'] === 'string' || data['codeName'] instanceof String)) {
            throw new Error("Expected the field `codeName` to be a primitive type in the JSON string but got " + data['codeName']);
        }
        // validate the optional field `distribution`
        if (data['distribution']) { // data not null
          Distribution.validateJSON(data['distribution']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `releaseDate`
        if (data['releaseDate']) { // data not null
          ModelDate.validateJSON(data['releaseDate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['versionString'] && !(typeof data['versionString'] === 'string' || data['versionString'] instanceof String)) {
            throw new Error("Expected the field `versionString` to be a primitive type in the JSON string but got " + data['versionString']);
        }

        return true;
    }


}



/**
 * The API level for this Android version. Examples: 18, 19.
 * @member {Number} apiLevel
 */
AndroidVersion.prototype['apiLevel'] = undefined;

/**
 * The code name for this Android version. Examples: \"JellyBean\", \"KitKat\".
 * @member {String} codeName
 */
AndroidVersion.prototype['codeName'] = undefined;

/**
 * @member {module:model/Distribution} distribution
 */
AndroidVersion.prototype['distribution'] = undefined;

/**
 * An opaque id for this Android version. Use this id to invoke the TestExecutionService.
 * @member {String} id
 */
AndroidVersion.prototype['id'] = undefined;

/**
 * @member {module:model/ModelDate} releaseDate
 */
AndroidVersion.prototype['releaseDate'] = undefined;

/**
 * Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".
 * @member {Array.<String>} tags
 */
AndroidVersion.prototype['tags'] = undefined;

/**
 * A string representing this version of the Android OS. Examples: \"4.3\", \"4.4\".
 * @member {String} versionString
 */
AndroidVersion.prototype['versionString'] = undefined;






export default AndroidVersion;

