/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClientInfo from './ClientInfo';
import EnvironmentMatrix from './EnvironmentMatrix';
import MatrixErrorDetail from './MatrixErrorDetail';
import ResultStorage from './ResultStorage';
import TestExecution from './TestExecution';
import TestSpecification from './TestSpecification';

/**
 * The TestMatrix model module.
 * @module model/TestMatrix
 * @version v1
 */
class TestMatrix {
    /**
     * Constructs a new <code>TestMatrix</code>.
     * TestMatrix captures all details about a test. It contains the environment configuration, test specification, test executions and overall state and outcome.
     * @alias module:model/TestMatrix
     */
    constructor() { 
        
        TestMatrix.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestMatrix</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestMatrix} obj Optional instance to populate.
     * @return {module:model/TestMatrix} The populated <code>TestMatrix</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestMatrix();

            if (data.hasOwnProperty('clientInfo')) {
                obj['clientInfo'] = ClientInfo.constructFromObject(data['clientInfo']);
            }
            if (data.hasOwnProperty('environmentMatrix')) {
                obj['environmentMatrix'] = EnvironmentMatrix.constructFromObject(data['environmentMatrix']);
            }
            if (data.hasOwnProperty('extendedInvalidMatrixDetails')) {
                obj['extendedInvalidMatrixDetails'] = ApiClient.convertToType(data['extendedInvalidMatrixDetails'], [MatrixErrorDetail]);
            }
            if (data.hasOwnProperty('failFast')) {
                obj['failFast'] = ApiClient.convertToType(data['failFast'], 'Boolean');
            }
            if (data.hasOwnProperty('flakyTestAttempts')) {
                obj['flakyTestAttempts'] = ApiClient.convertToType(data['flakyTestAttempts'], 'Number');
            }
            if (data.hasOwnProperty('invalidMatrixDetails')) {
                obj['invalidMatrixDetails'] = ApiClient.convertToType(data['invalidMatrixDetails'], 'String');
            }
            if (data.hasOwnProperty('outcomeSummary')) {
                obj['outcomeSummary'] = ApiClient.convertToType(data['outcomeSummary'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('resultStorage')) {
                obj['resultStorage'] = ResultStorage.constructFromObject(data['resultStorage']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('testExecutions')) {
                obj['testExecutions'] = ApiClient.convertToType(data['testExecutions'], [TestExecution]);
            }
            if (data.hasOwnProperty('testMatrixId')) {
                obj['testMatrixId'] = ApiClient.convertToType(data['testMatrixId'], 'String');
            }
            if (data.hasOwnProperty('testSpecification')) {
                obj['testSpecification'] = TestSpecification.constructFromObject(data['testSpecification']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestMatrix</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestMatrix</code>.
     */
    static validateJSON(data) {
        // validate the optional field `clientInfo`
        if (data['clientInfo']) { // data not null
          ClientInfo.validateJSON(data['clientInfo']);
        }
        // validate the optional field `environmentMatrix`
        if (data['environmentMatrix']) { // data not null
          EnvironmentMatrix.validateJSON(data['environmentMatrix']);
        }
        if (data['extendedInvalidMatrixDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['extendedInvalidMatrixDetails'])) {
                throw new Error("Expected the field `extendedInvalidMatrixDetails` to be an array in the JSON data but got " + data['extendedInvalidMatrixDetails']);
            }
            // validate the optional field `extendedInvalidMatrixDetails` (array)
            for (const item of data['extendedInvalidMatrixDetails']) {
                MatrixErrorDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['invalidMatrixDetails'] && !(typeof data['invalidMatrixDetails'] === 'string' || data['invalidMatrixDetails'] instanceof String)) {
            throw new Error("Expected the field `invalidMatrixDetails` to be a primitive type in the JSON string but got " + data['invalidMatrixDetails']);
        }
        // ensure the json data is a string
        if (data['outcomeSummary'] && !(typeof data['outcomeSummary'] === 'string' || data['outcomeSummary'] instanceof String)) {
            throw new Error("Expected the field `outcomeSummary` to be a primitive type in the JSON string but got " + data['outcomeSummary']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // validate the optional field `resultStorage`
        if (data['resultStorage']) { // data not null
          ResultStorage.validateJSON(data['resultStorage']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['testExecutions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testExecutions'])) {
                throw new Error("Expected the field `testExecutions` to be an array in the JSON data but got " + data['testExecutions']);
            }
            // validate the optional field `testExecutions` (array)
            for (const item of data['testExecutions']) {
                TestExecution.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['testMatrixId'] && !(typeof data['testMatrixId'] === 'string' || data['testMatrixId'] instanceof String)) {
            throw new Error("Expected the field `testMatrixId` to be a primitive type in the JSON string but got " + data['testMatrixId']);
        }
        // validate the optional field `testSpecification`
        if (data['testSpecification']) { // data not null
          TestSpecification.validateJSON(data['testSpecification']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }

        return true;
    }


}



/**
 * @member {module:model/ClientInfo} clientInfo
 */
TestMatrix.prototype['clientInfo'] = undefined;

/**
 * @member {module:model/EnvironmentMatrix} environmentMatrix
 */
TestMatrix.prototype['environmentMatrix'] = undefined;

/**
 * Output only. Details about why a matrix was deemed invalid. If multiple checks can be safely performed, they will be reported but no assumptions should be made about the length of this list.
 * @member {Array.<module:model/MatrixErrorDetail>} extendedInvalidMatrixDetails
 */
TestMatrix.prototype['extendedInvalidMatrixDetails'] = undefined;

/**
 * If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
 * @member {Boolean} failFast
 */
TestMatrix.prototype['failFast'] = undefined;

/**
 * The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
 * @member {Number} flakyTestAttempts
 */
TestMatrix.prototype['flakyTestAttempts'] = undefined;

/**
 * Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
 * @member {module:model/TestMatrix.InvalidMatrixDetailsEnum} invalidMatrixDetails
 */
TestMatrix.prototype['invalidMatrixDetails'] = undefined;

/**
 * Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
 * @member {module:model/TestMatrix.OutcomeSummaryEnum} outcomeSummary
 */
TestMatrix.prototype['outcomeSummary'] = undefined;

/**
 * The cloud project that owns the test matrix.
 * @member {String} projectId
 */
TestMatrix.prototype['projectId'] = undefined;

/**
 * @member {module:model/ResultStorage} resultStorage
 */
TestMatrix.prototype['resultStorage'] = undefined;

/**
 * Output only. Indicates the current progress of the test matrix.
 * @member {module:model/TestMatrix.StateEnum} state
 */
TestMatrix.prototype['state'] = undefined;

/**
 * Output only. The list of test executions that the service creates for this matrix.
 * @member {Array.<module:model/TestExecution>} testExecutions
 */
TestMatrix.prototype['testExecutions'] = undefined;

/**
 * Output only. Unique id set by the service.
 * @member {String} testMatrixId
 */
TestMatrix.prototype['testMatrixId'] = undefined;

/**
 * @member {module:model/TestSpecification} testSpecification
 */
TestMatrix.prototype['testSpecification'] = undefined;

/**
 * Output only. The time this test matrix was initially created.
 * @member {String} timestamp
 */
TestMatrix.prototype['timestamp'] = undefined;





/**
 * Allowed values for the <code>invalidMatrixDetails</code> property.
 * @enum {String}
 * @readonly
 */
TestMatrix['InvalidMatrixDetailsEnum'] = {

    /**
     * value: "INVALID_MATRIX_DETAILS_UNSPECIFIED"
     * @const
     */
    "INVALID_MATRIX_DETAILS_UNSPECIFIED": "INVALID_MATRIX_DETAILS_UNSPECIFIED",

    /**
     * value: "DETAILS_UNAVAILABLE"
     * @const
     */
    "DETAILS_UNAVAILABLE": "DETAILS_UNAVAILABLE",

    /**
     * value: "MALFORMED_APK"
     * @const
     */
    "MALFORMED_APK": "MALFORMED_APK",

    /**
     * value: "MALFORMED_TEST_APK"
     * @const
     */
    "MALFORMED_TEST_APK": "MALFORMED_TEST_APK",

    /**
     * value: "NO_MANIFEST"
     * @const
     */
    "NO_MANIFEST": "NO_MANIFEST",

    /**
     * value: "NO_PACKAGE_NAME"
     * @const
     */
    "NO_PACKAGE_NAME": "NO_PACKAGE_NAME",

    /**
     * value: "INVALID_PACKAGE_NAME"
     * @const
     */
    "INVALID_PACKAGE_NAME": "INVALID_PACKAGE_NAME",

    /**
     * value: "TEST_SAME_AS_APP"
     * @const
     */
    "TEST_SAME_AS_APP": "TEST_SAME_AS_APP",

    /**
     * value: "NO_INSTRUMENTATION"
     * @const
     */
    "NO_INSTRUMENTATION": "NO_INSTRUMENTATION",

    /**
     * value: "NO_SIGNATURE"
     * @const
     */
    "NO_SIGNATURE": "NO_SIGNATURE",

    /**
     * value: "INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE"
     * @const
     */
    "INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE": "INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE",

    /**
     * value: "NO_TEST_RUNNER_CLASS"
     * @const
     */
    "NO_TEST_RUNNER_CLASS": "NO_TEST_RUNNER_CLASS",

    /**
     * value: "NO_LAUNCHER_ACTIVITY"
     * @const
     */
    "NO_LAUNCHER_ACTIVITY": "NO_LAUNCHER_ACTIVITY",

    /**
     * value: "FORBIDDEN_PERMISSIONS"
     * @const
     */
    "FORBIDDEN_PERMISSIONS": "FORBIDDEN_PERMISSIONS",

    /**
     * value: "INVALID_ROBO_DIRECTIVES"
     * @const
     */
    "INVALID_ROBO_DIRECTIVES": "INVALID_ROBO_DIRECTIVES",

    /**
     * value: "INVALID_RESOURCE_NAME"
     * @const
     */
    "INVALID_RESOURCE_NAME": "INVALID_RESOURCE_NAME",

    /**
     * value: "INVALID_DIRECTIVE_ACTION"
     * @const
     */
    "INVALID_DIRECTIVE_ACTION": "INVALID_DIRECTIVE_ACTION",

    /**
     * value: "TEST_LOOP_INTENT_FILTER_NOT_FOUND"
     * @const
     */
    "TEST_LOOP_INTENT_FILTER_NOT_FOUND": "TEST_LOOP_INTENT_FILTER_NOT_FOUND",

    /**
     * value: "SCENARIO_LABEL_NOT_DECLARED"
     * @const
     */
    "SCENARIO_LABEL_NOT_DECLARED": "SCENARIO_LABEL_NOT_DECLARED",

    /**
     * value: "SCENARIO_LABEL_MALFORMED"
     * @const
     */
    "SCENARIO_LABEL_MALFORMED": "SCENARIO_LABEL_MALFORMED",

    /**
     * value: "SCENARIO_NOT_DECLARED"
     * @const
     */
    "SCENARIO_NOT_DECLARED": "SCENARIO_NOT_DECLARED",

    /**
     * value: "DEVICE_ADMIN_RECEIVER"
     * @const
     */
    "DEVICE_ADMIN_RECEIVER": "DEVICE_ADMIN_RECEIVER",

    /**
     * value: "MALFORMED_XC_TEST_ZIP"
     * @const
     */
    "MALFORMED_XC_TEST_ZIP": "MALFORMED_XC_TEST_ZIP",

    /**
     * value: "BUILT_FOR_IOS_SIMULATOR"
     * @const
     */
    "BUILT_FOR_IOS_SIMULATOR": "BUILT_FOR_IOS_SIMULATOR",

    /**
     * value: "NO_TESTS_IN_XC_TEST_ZIP"
     * @const
     */
    "NO_TESTS_IN_XC_TEST_ZIP": "NO_TESTS_IN_XC_TEST_ZIP",

    /**
     * value: "USE_DESTINATION_ARTIFACTS"
     * @const
     */
    "USE_DESTINATION_ARTIFACTS": "USE_DESTINATION_ARTIFACTS",

    /**
     * value: "TEST_NOT_APP_HOSTED"
     * @const
     */
    "TEST_NOT_APP_HOSTED": "TEST_NOT_APP_HOSTED",

    /**
     * value: "PLIST_CANNOT_BE_PARSED"
     * @const
     */
    "PLIST_CANNOT_BE_PARSED": "PLIST_CANNOT_BE_PARSED",

    /**
     * value: "TEST_ONLY_APK"
     * @const
     */
    "TEST_ONLY_APK": "TEST_ONLY_APK",

    /**
     * value: "MALFORMED_IPA"
     * @const
     */
    "MALFORMED_IPA": "MALFORMED_IPA",

    /**
     * value: "MISSING_URL_SCHEME"
     * @const
     */
    "MISSING_URL_SCHEME": "MISSING_URL_SCHEME",

    /**
     * value: "MALFORMED_APP_BUNDLE"
     * @const
     */
    "MALFORMED_APP_BUNDLE": "MALFORMED_APP_BUNDLE",

    /**
     * value: "NO_CODE_APK"
     * @const
     */
    "NO_CODE_APK": "NO_CODE_APK",

    /**
     * value: "INVALID_INPUT_APK"
     * @const
     */
    "INVALID_INPUT_APK": "INVALID_INPUT_APK",

    /**
     * value: "INVALID_APK_PREVIEW_SDK"
     * @const
     */
    "INVALID_APK_PREVIEW_SDK": "INVALID_APK_PREVIEW_SDK",

    /**
     * value: "MATRIX_TOO_LARGE"
     * @const
     */
    "MATRIX_TOO_LARGE": "MATRIX_TOO_LARGE",

    /**
     * value: "TEST_QUOTA_EXCEEDED"
     * @const
     */
    "TEST_QUOTA_EXCEEDED": "TEST_QUOTA_EXCEEDED",

    /**
     * value: "SERVICE_NOT_ACTIVATED"
     * @const
     */
    "SERVICE_NOT_ACTIVATED": "SERVICE_NOT_ACTIVATED",

    /**
     * value: "UNKNOWN_PERMISSION_ERROR"
     * @const
     */
    "UNKNOWN_PERMISSION_ERROR": "UNKNOWN_PERMISSION_ERROR"
};


/**
 * Allowed values for the <code>outcomeSummary</code> property.
 * @enum {String}
 * @readonly
 */
TestMatrix['OutcomeSummaryEnum'] = {

    /**
     * value: "OUTCOME_SUMMARY_UNSPECIFIED"
     * @const
     */
    "OUTCOME_SUMMARY_UNSPECIFIED": "OUTCOME_SUMMARY_UNSPECIFIED",

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "FAILURE"
     * @const
     */
    "FAILURE": "FAILURE",

    /**
     * value: "INCONCLUSIVE"
     * @const
     */
    "INCONCLUSIVE": "INCONCLUSIVE",

    /**
     * value: "SKIPPED"
     * @const
     */
    "SKIPPED": "SKIPPED"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
TestMatrix['StateEnum'] = {

    /**
     * value: "TEST_STATE_UNSPECIFIED"
     * @const
     */
    "TEST_STATE_UNSPECIFIED": "TEST_STATE_UNSPECIFIED",

    /**
     * value: "VALIDATING"
     * @const
     */
    "VALIDATING": "VALIDATING",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "FINISHED"
     * @const
     */
    "FINISHED": "FINISHED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "UNSUPPORTED_ENVIRONMENT"
     * @const
     */
    "UNSUPPORTED_ENVIRONMENT": "UNSUPPORTED_ENVIRONMENT",

    /**
     * value: "INCOMPATIBLE_ENVIRONMENT"
     * @const
     */
    "INCOMPATIBLE_ENVIRONMENT": "INCOMPATIBLE_ENVIRONMENT",

    /**
     * value: "INCOMPATIBLE_ARCHITECTURE"
     * @const
     */
    "INCOMPATIBLE_ARCHITECTURE": "INCOMPATIBLE_ARCHITECTURE",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID"
};



export default TestMatrix;

