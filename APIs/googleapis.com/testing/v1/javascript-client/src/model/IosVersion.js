/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IosVersion model module.
 * @module model/IosVersion
 * @version v1
 */
class IosVersion {
    /**
     * Constructs a new <code>IosVersion</code>.
     * An iOS version.
     * @alias module:model/IosVersion
     */
    constructor() { 
        
        IosVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IosVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IosVersion} obj Optional instance to populate.
     * @return {module:model/IosVersion} The populated <code>IosVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IosVersion();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('majorVersion')) {
                obj['majorVersion'] = ApiClient.convertToType(data['majorVersion'], 'Number');
            }
            if (data.hasOwnProperty('minorVersion')) {
                obj['minorVersion'] = ApiClient.convertToType(data['minorVersion'], 'Number');
            }
            if (data.hasOwnProperty('supportedXcodeVersionIds')) {
                obj['supportedXcodeVersionIds'] = ApiClient.convertToType(data['supportedXcodeVersionIds'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IosVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IosVersion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedXcodeVersionIds'])) {
            throw new Error("Expected the field `supportedXcodeVersionIds` to be an array in the JSON data but got " + data['supportedXcodeVersionIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * An opaque id for this iOS version. Use this id to invoke the TestExecutionService.
 * @member {String} id
 */
IosVersion.prototype['id'] = undefined;

/**
 * An integer representing the major iOS version. Examples: \"8\", \"9\".
 * @member {Number} majorVersion
 */
IosVersion.prototype['majorVersion'] = undefined;

/**
 * An integer representing the minor iOS version. Examples: \"1\", \"2\".
 * @member {Number} minorVersion
 */
IosVersion.prototype['minorVersion'] = undefined;

/**
 * The available Xcode versions for this version.
 * @member {Array.<String>} supportedXcodeVersionIds
 */
IosVersion.prototype['supportedXcodeVersionIds'] = undefined;

/**
 * Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".
 * @member {Array.<String>} tags
 */
IosVersion.prototype['tags'] = undefined;






export default IosVersion;

