/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDate from './ModelDate';

/**
 * The DeviceIpBlock model module.
 * @module model/DeviceIpBlock
 * @version v1
 */
class DeviceIpBlock {
    /**
     * Constructs a new <code>DeviceIpBlock</code>.
     * A single device IP block
     * @alias module:model/DeviceIpBlock
     */
    constructor() { 
        
        DeviceIpBlock.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceIpBlock</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceIpBlock} obj Optional instance to populate.
     * @return {module:model/DeviceIpBlock} The populated <code>DeviceIpBlock</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceIpBlock();

            if (data.hasOwnProperty('addedDate')) {
                obj['addedDate'] = ModelDate.constructFromObject(data['addedDate']);
            }
            if (data.hasOwnProperty('block')) {
                obj['block'] = ApiClient.convertToType(data['block'], 'String');
            }
            if (data.hasOwnProperty('form')) {
                obj['form'] = ApiClient.convertToType(data['form'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceIpBlock</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceIpBlock</code>.
     */
    static validateJSON(data) {
        // validate the optional field `addedDate`
        if (data['addedDate']) { // data not null
          ModelDate.validateJSON(data['addedDate']);
        }
        // ensure the json data is a string
        if (data['block'] && !(typeof data['block'] === 'string' || data['block'] instanceof String)) {
            throw new Error("Expected the field `block` to be a primitive type in the JSON string but got " + data['block']);
        }
        // ensure the json data is a string
        if (data['form'] && !(typeof data['form'] === 'string' || data['form'] instanceof String)) {
            throw new Error("Expected the field `form` to be a primitive type in the JSON string but got " + data['form']);
        }

        return true;
    }


}



/**
 * @member {module:model/ModelDate} addedDate
 */
DeviceIpBlock.prototype['addedDate'] = undefined;

/**
 * An IP address block in CIDR notation eg: 34.68.194.64/29
 * @member {String} block
 */
DeviceIpBlock.prototype['block'] = undefined;

/**
 * Whether this block is used by physical or virtual devices
 * @member {module:model/DeviceIpBlock.FormEnum} form
 */
DeviceIpBlock.prototype['form'] = undefined;





/**
 * Allowed values for the <code>form</code> property.
 * @enum {String}
 * @readonly
 */
DeviceIpBlock['FormEnum'] = {

    /**
     * value: "DEVICE_FORM_UNSPECIFIED"
     * @const
     */
    "DEVICE_FORM_UNSPECIFIED": "DEVICE_FORM_UNSPECIFIED",

    /**
     * value: "VIRTUAL"
     * @const
     */
    "VIRTUAL": "VIRTUAL",

    /**
     * value: "PHYSICAL"
     * @const
     */
    "PHYSICAL": "PHYSICAL",

    /**
     * value: "EMULATOR"
     * @const
     */
    "EMULATOR": "EMULATOR"
};



export default DeviceIpBlock;

