/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SessionStateEvent model module.
 * @module model/SessionStateEvent
 * @version v1
 */
class SessionStateEvent {
    /**
     * Constructs a new <code>SessionStateEvent</code>.
     * A message encapsulating a series of Session states and the time that the DeviceSession first entered those states.
     * @alias module:model/SessionStateEvent
     */
    constructor() { 
        
        SessionStateEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SessionStateEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SessionStateEvent} obj Optional instance to populate.
     * @return {module:model/SessionStateEvent} The populated <code>SessionStateEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SessionStateEvent();

            if (data.hasOwnProperty('eventTime')) {
                obj['eventTime'] = ApiClient.convertToType(data['eventTime'], 'String');
            }
            if (data.hasOwnProperty('sessionState')) {
                obj['sessionState'] = ApiClient.convertToType(data['sessionState'], 'String');
            }
            if (data.hasOwnProperty('stateMessage')) {
                obj['stateMessage'] = ApiClient.convertToType(data['stateMessage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SessionStateEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SessionStateEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['eventTime'] && !(typeof data['eventTime'] === 'string' || data['eventTime'] instanceof String)) {
            throw new Error("Expected the field `eventTime` to be a primitive type in the JSON string but got " + data['eventTime']);
        }
        // ensure the json data is a string
        if (data['sessionState'] && !(typeof data['sessionState'] === 'string' || data['sessionState'] instanceof String)) {
            throw new Error("Expected the field `sessionState` to be a primitive type in the JSON string but got " + data['sessionState']);
        }
        // ensure the json data is a string
        if (data['stateMessage'] && !(typeof data['stateMessage'] === 'string' || data['stateMessage'] instanceof String)) {
            throw new Error("Expected the field `stateMessage` to be a primitive type in the JSON string but got " + data['stateMessage']);
        }

        return true;
    }


}



/**
 * Output only. The time that the session_state first encountered that state.
 * @member {String} eventTime
 */
SessionStateEvent.prototype['eventTime'] = undefined;

/**
 * Output only. The session_state tracked by this event
 * @member {module:model/SessionStateEvent.SessionStateEnum} sessionState
 */
SessionStateEvent.prototype['sessionState'] = undefined;

/**
 * Output only. A human-readable message to explain the state.
 * @member {String} stateMessage
 */
SessionStateEvent.prototype['stateMessage'] = undefined;





/**
 * Allowed values for the <code>sessionState</code> property.
 * @enum {String}
 * @readonly
 */
SessionStateEvent['SessionStateEnum'] = {

    /**
     * value: "SESSION_STATE_UNSPECIFIED"
     * @const
     */
    "SESSION_STATE_UNSPECIFIED": "SESSION_STATE_UNSPECIFIED",

    /**
     * value: "REQUESTED"
     * @const
     */
    "REQUESTED": "REQUESTED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED",

    /**
     * value: "FINISHED"
     * @const
     */
    "FINISHED": "FINISHED",

    /**
     * value: "UNAVAILABLE"
     * @const
     */
    "UNAVAILABLE": "UNAVAILABLE",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default SessionStateEvent;

