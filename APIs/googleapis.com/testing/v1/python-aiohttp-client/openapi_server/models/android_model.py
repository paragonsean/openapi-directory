# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.per_android_version_info import PerAndroidVersionInfo
from openapi_server import util


class AndroidModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: str=None, codename: str=None, form: str=None, form_factor: str=None, id: str=None, low_fps_video_recording: bool=None, manufacturer: str=None, name: str=None, per_version_info: List[PerAndroidVersionInfo]=None, screen_density: int=None, screen_x: int=None, screen_y: int=None, supported_abis: List[str]=None, supported_version_ids: List[str]=None, tags: List[str]=None, thumbnail_url: str=None):
        """AndroidModel - a model defined in OpenAPI

        :param brand: The brand of this AndroidModel.
        :param codename: The codename of this AndroidModel.
        :param form: The form of this AndroidModel.
        :param form_factor: The form_factor of this AndroidModel.
        :param id: The id of this AndroidModel.
        :param low_fps_video_recording: The low_fps_video_recording of this AndroidModel.
        :param manufacturer: The manufacturer of this AndroidModel.
        :param name: The name of this AndroidModel.
        :param per_version_info: The per_version_info of this AndroidModel.
        :param screen_density: The screen_density of this AndroidModel.
        :param screen_x: The screen_x of this AndroidModel.
        :param screen_y: The screen_y of this AndroidModel.
        :param supported_abis: The supported_abis of this AndroidModel.
        :param supported_version_ids: The supported_version_ids of this AndroidModel.
        :param tags: The tags of this AndroidModel.
        :param thumbnail_url: The thumbnail_url of this AndroidModel.
        """
        self.openapi_types = {
            'brand': str,
            'codename': str,
            'form': str,
            'form_factor': str,
            'id': str,
            'low_fps_video_recording': bool,
            'manufacturer': str,
            'name': str,
            'per_version_info': List[PerAndroidVersionInfo],
            'screen_density': int,
            'screen_x': int,
            'screen_y': int,
            'supported_abis': List[str],
            'supported_version_ids': List[str],
            'tags': List[str],
            'thumbnail_url': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'codename': 'codename',
            'form': 'form',
            'form_factor': 'formFactor',
            'id': 'id',
            'low_fps_video_recording': 'lowFpsVideoRecording',
            'manufacturer': 'manufacturer',
            'name': 'name',
            'per_version_info': 'perVersionInfo',
            'screen_density': 'screenDensity',
            'screen_x': 'screenX',
            'screen_y': 'screenY',
            'supported_abis': 'supportedAbis',
            'supported_version_ids': 'supportedVersionIds',
            'tags': 'tags',
            'thumbnail_url': 'thumbnailUrl'
        }

        self._brand = brand
        self._codename = codename
        self._form = form
        self._form_factor = form_factor
        self._id = id
        self._low_fps_video_recording = low_fps_video_recording
        self._manufacturer = manufacturer
        self._name = name
        self._per_version_info = per_version_info
        self._screen_density = screen_density
        self._screen_x = screen_x
        self._screen_y = screen_y
        self._supported_abis = supported_abis
        self._supported_version_ids = supported_version_ids
        self._tags = tags
        self._thumbnail_url = thumbnail_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AndroidModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AndroidModel of this AndroidModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this AndroidModel.

        The company that this device is branded with. Example: \"Google\", \"Samsung\".

        :return: The brand of this AndroidModel.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this AndroidModel.

        The company that this device is branded with. Example: \"Google\", \"Samsung\".

        :param brand: The brand of this AndroidModel.
        :type brand: str
        """

        self._brand = brand

    @property
    def codename(self):
        """Gets the codename of this AndroidModel.

        The name of the industrial design. This corresponds to android.os.Build.DEVICE.

        :return: The codename of this AndroidModel.
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename):
        """Sets the codename of this AndroidModel.

        The name of the industrial design. This corresponds to android.os.Build.DEVICE.

        :param codename: The codename of this AndroidModel.
        :type codename: str
        """

        self._codename = codename

    @property
    def form(self):
        """Gets the form of this AndroidModel.

        Whether this device is virtual or physical.

        :return: The form of this AndroidModel.
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this AndroidModel.

        Whether this device is virtual or physical.

        :param form: The form of this AndroidModel.
        :type form: str
        """
        allowed_values = ["DEVICE_FORM_UNSPECIFIED", "VIRTUAL", "PHYSICAL", "EMULATOR"]  # noqa: E501
        if form not in allowed_values:
            raise ValueError(
                "Invalid value for `form` ({0}), must be one of {1}"
                .format(form, allowed_values)
            )

        self._form = form

    @property
    def form_factor(self):
        """Gets the form_factor of this AndroidModel.

        Whether this device is a phone, tablet, wearable, etc.

        :return: The form_factor of this AndroidModel.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this AndroidModel.

        Whether this device is a phone, tablet, wearable, etc.

        :param form_factor: The form_factor of this AndroidModel.
        :type form_factor: str
        """
        allowed_values = ["DEVICE_FORM_FACTOR_UNSPECIFIED", "PHONE", "TABLET", "WEARABLE"]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    @property
    def id(self):
        """Gets the id of this AndroidModel.

        The unique opaque id for this model. Use this for invoking the TestExecutionService.

        :return: The id of this AndroidModel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AndroidModel.

        The unique opaque id for this model. Use this for invoking the TestExecutionService.

        :param id: The id of this AndroidModel.
        :type id: str
        """

        self._id = id

    @property
    def low_fps_video_recording(self):
        """Gets the low_fps_video_recording of this AndroidModel.

        True if and only if tests with this model are recorded by stitching together screenshots. See use_low_spec_video_recording in device config.

        :return: The low_fps_video_recording of this AndroidModel.
        :rtype: bool
        """
        return self._low_fps_video_recording

    @low_fps_video_recording.setter
    def low_fps_video_recording(self, low_fps_video_recording):
        """Sets the low_fps_video_recording of this AndroidModel.

        True if and only if tests with this model are recorded by stitching together screenshots. See use_low_spec_video_recording in device config.

        :param low_fps_video_recording: The low_fps_video_recording of this AndroidModel.
        :type low_fps_video_recording: bool
        """

        self._low_fps_video_recording = low_fps_video_recording

    @property
    def manufacturer(self):
        """Gets the manufacturer of this AndroidModel.

        The manufacturer of this device.

        :return: The manufacturer of this AndroidModel.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this AndroidModel.

        The manufacturer of this device.

        :param manufacturer: The manufacturer of this AndroidModel.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def name(self):
        """Gets the name of this AndroidModel.

        The human-readable marketing name for this device model. Examples: \"Nexus 5\", \"Galaxy S5\".

        :return: The name of this AndroidModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AndroidModel.

        The human-readable marketing name for this device model. Examples: \"Nexus 5\", \"Galaxy S5\".

        :param name: The name of this AndroidModel.
        :type name: str
        """

        self._name = name

    @property
    def per_version_info(self):
        """Gets the per_version_info of this AndroidModel.

        Version-specific information of an Android model.

        :return: The per_version_info of this AndroidModel.
        :rtype: List[PerAndroidVersionInfo]
        """
        return self._per_version_info

    @per_version_info.setter
    def per_version_info(self, per_version_info):
        """Sets the per_version_info of this AndroidModel.

        Version-specific information of an Android model.

        :param per_version_info: The per_version_info of this AndroidModel.
        :type per_version_info: List[PerAndroidVersionInfo]
        """

        self._per_version_info = per_version_info

    @property
    def screen_density(self):
        """Gets the screen_density of this AndroidModel.

        Screen density in DPI. This corresponds to ro.sf.lcd_density

        :return: The screen_density of this AndroidModel.
        :rtype: int
        """
        return self._screen_density

    @screen_density.setter
    def screen_density(self, screen_density):
        """Sets the screen_density of this AndroidModel.

        Screen density in DPI. This corresponds to ro.sf.lcd_density

        :param screen_density: The screen_density of this AndroidModel.
        :type screen_density: int
        """

        self._screen_density = screen_density

    @property
    def screen_x(self):
        """Gets the screen_x of this AndroidModel.

        Screen size in the horizontal (X) dimension measured in pixels.

        :return: The screen_x of this AndroidModel.
        :rtype: int
        """
        return self._screen_x

    @screen_x.setter
    def screen_x(self, screen_x):
        """Sets the screen_x of this AndroidModel.

        Screen size in the horizontal (X) dimension measured in pixels.

        :param screen_x: The screen_x of this AndroidModel.
        :type screen_x: int
        """

        self._screen_x = screen_x

    @property
    def screen_y(self):
        """Gets the screen_y of this AndroidModel.

        Screen size in the vertical (Y) dimension measured in pixels.

        :return: The screen_y of this AndroidModel.
        :rtype: int
        """
        return self._screen_y

    @screen_y.setter
    def screen_y(self, screen_y):
        """Sets the screen_y of this AndroidModel.

        Screen size in the vertical (Y) dimension measured in pixels.

        :param screen_y: The screen_y of this AndroidModel.
        :type screen_y: int
        """

        self._screen_y = screen_y

    @property
    def supported_abis(self):
        """Gets the supported_abis of this AndroidModel.

        The list of supported ABIs for this device. This corresponds to either android.os.Build.SUPPORTED_ABIS (for API level 21 and above) or android.os.Build.CPU_ABI/CPU_ABI2. The most preferred ABI is the first element in the list. Elements are optionally prefixed by \"version_id:\" (where version_id is the id of an AndroidVersion), denoting an ABI that is supported only on a particular version.

        :return: The supported_abis of this AndroidModel.
        :rtype: List[str]
        """
        return self._supported_abis

    @supported_abis.setter
    def supported_abis(self, supported_abis):
        """Sets the supported_abis of this AndroidModel.

        The list of supported ABIs for this device. This corresponds to either android.os.Build.SUPPORTED_ABIS (for API level 21 and above) or android.os.Build.CPU_ABI/CPU_ABI2. The most preferred ABI is the first element in the list. Elements are optionally prefixed by \"version_id:\" (where version_id is the id of an AndroidVersion), denoting an ABI that is supported only on a particular version.

        :param supported_abis: The supported_abis of this AndroidModel.
        :type supported_abis: List[str]
        """

        self._supported_abis = supported_abis

    @property
    def supported_version_ids(self):
        """Gets the supported_version_ids of this AndroidModel.

        The set of Android versions this device supports.

        :return: The supported_version_ids of this AndroidModel.
        :rtype: List[str]
        """
        return self._supported_version_ids

    @supported_version_ids.setter
    def supported_version_ids(self, supported_version_ids):
        """Sets the supported_version_ids of this AndroidModel.

        The set of Android versions this device supports.

        :param supported_version_ids: The supported_version_ids of this AndroidModel.
        :type supported_version_ids: List[str]
        """

        self._supported_version_ids = supported_version_ids

    @property
    def tags(self):
        """Gets the tags of this AndroidModel.

        Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".

        :return: The tags of this AndroidModel.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AndroidModel.

        Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".

        :param tags: The tags of this AndroidModel.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this AndroidModel.

        URL of a thumbnail image (photo) of the device.

        :return: The thumbnail_url of this AndroidModel.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this AndroidModel.

        URL of a thumbnail image (photo) of the device.

        :param thumbnail_url: The thumbnail_url of this AndroidModel.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url
