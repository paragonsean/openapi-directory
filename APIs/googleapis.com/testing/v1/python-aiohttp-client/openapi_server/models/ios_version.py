# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IosVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, major_version: int=None, minor_version: int=None, supported_xcode_version_ids: List[str]=None, tags: List[str]=None):
        """IosVersion - a model defined in OpenAPI

        :param id: The id of this IosVersion.
        :param major_version: The major_version of this IosVersion.
        :param minor_version: The minor_version of this IosVersion.
        :param supported_xcode_version_ids: The supported_xcode_version_ids of this IosVersion.
        :param tags: The tags of this IosVersion.
        """
        self.openapi_types = {
            'id': str,
            'major_version': int,
            'minor_version': int,
            'supported_xcode_version_ids': List[str],
            'tags': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'major_version': 'majorVersion',
            'minor_version': 'minorVersion',
            'supported_xcode_version_ids': 'supportedXcodeVersionIds',
            'tags': 'tags'
        }

        self._id = id
        self._major_version = major_version
        self._minor_version = minor_version
        self._supported_xcode_version_ids = supported_xcode_version_ids
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IosVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IosVersion of this IosVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this IosVersion.

        An opaque id for this iOS version. Use this id to invoke the TestExecutionService.

        :return: The id of this IosVersion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IosVersion.

        An opaque id for this iOS version. Use this id to invoke the TestExecutionService.

        :param id: The id of this IosVersion.
        :type id: str
        """

        self._id = id

    @property
    def major_version(self):
        """Gets the major_version of this IosVersion.

        An integer representing the major iOS version. Examples: \"8\", \"9\".

        :return: The major_version of this IosVersion.
        :rtype: int
        """
        return self._major_version

    @major_version.setter
    def major_version(self, major_version):
        """Sets the major_version of this IosVersion.

        An integer representing the major iOS version. Examples: \"8\", \"9\".

        :param major_version: The major_version of this IosVersion.
        :type major_version: int
        """

        self._major_version = major_version

    @property
    def minor_version(self):
        """Gets the minor_version of this IosVersion.

        An integer representing the minor iOS version. Examples: \"1\", \"2\".

        :return: The minor_version of this IosVersion.
        :rtype: int
        """
        return self._minor_version

    @minor_version.setter
    def minor_version(self, minor_version):
        """Sets the minor_version of this IosVersion.

        An integer representing the minor iOS version. Examples: \"1\", \"2\".

        :param minor_version: The minor_version of this IosVersion.
        :type minor_version: int
        """

        self._minor_version = minor_version

    @property
    def supported_xcode_version_ids(self):
        """Gets the supported_xcode_version_ids of this IosVersion.

        The available Xcode versions for this version.

        :return: The supported_xcode_version_ids of this IosVersion.
        :rtype: List[str]
        """
        return self._supported_xcode_version_ids

    @supported_xcode_version_ids.setter
    def supported_xcode_version_ids(self, supported_xcode_version_ids):
        """Sets the supported_xcode_version_ids of this IosVersion.

        The available Xcode versions for this version.

        :param supported_xcode_version_ids: The supported_xcode_version_ids of this IosVersion.
        :type supported_xcode_version_ids: List[str]
        """

        self._supported_xcode_version_ids = supported_xcode_version_ids

    @property
    def tags(self):
        """Gets the tags of this IosVersion.

        Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".

        :return: The tags of this IosVersion.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IosVersion.

        Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".

        :param tags: The tags of this IosVersion.
        :type tags: List[str]
        """

        self._tags = tags
