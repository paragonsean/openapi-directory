# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_bundle import AppBundle
from openapi_server.models.file_reference import FileReference
from openapi_server import util


class AndroidTestLoop(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_apk: FileReference=None, app_bundle: AppBundle=None, app_package_id: str=None, scenario_labels: List[str]=None, scenarios: List[int]=None):
        """AndroidTestLoop - a model defined in OpenAPI

        :param app_apk: The app_apk of this AndroidTestLoop.
        :param app_bundle: The app_bundle of this AndroidTestLoop.
        :param app_package_id: The app_package_id of this AndroidTestLoop.
        :param scenario_labels: The scenario_labels of this AndroidTestLoop.
        :param scenarios: The scenarios of this AndroidTestLoop.
        """
        self.openapi_types = {
            'app_apk': FileReference,
            'app_bundle': AppBundle,
            'app_package_id': str,
            'scenario_labels': List[str],
            'scenarios': List[int]
        }

        self.attribute_map = {
            'app_apk': 'appApk',
            'app_bundle': 'appBundle',
            'app_package_id': 'appPackageId',
            'scenario_labels': 'scenarioLabels',
            'scenarios': 'scenarios'
        }

        self._app_apk = app_apk
        self._app_bundle = app_bundle
        self._app_package_id = app_package_id
        self._scenario_labels = scenario_labels
        self._scenarios = scenarios

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AndroidTestLoop':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AndroidTestLoop of this AndroidTestLoop.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_apk(self):
        """Gets the app_apk of this AndroidTestLoop.


        :return: The app_apk of this AndroidTestLoop.
        :rtype: FileReference
        """
        return self._app_apk

    @app_apk.setter
    def app_apk(self, app_apk):
        """Sets the app_apk of this AndroidTestLoop.


        :param app_apk: The app_apk of this AndroidTestLoop.
        :type app_apk: FileReference
        """

        self._app_apk = app_apk

    @property
    def app_bundle(self):
        """Gets the app_bundle of this AndroidTestLoop.


        :return: The app_bundle of this AndroidTestLoop.
        :rtype: AppBundle
        """
        return self._app_bundle

    @app_bundle.setter
    def app_bundle(self, app_bundle):
        """Sets the app_bundle of this AndroidTestLoop.


        :param app_bundle: The app_bundle of this AndroidTestLoop.
        :type app_bundle: AppBundle
        """

        self._app_bundle = app_bundle

    @property
    def app_package_id(self):
        """Gets the app_package_id of this AndroidTestLoop.

        The java package for the application under test. The default is determined by examining the application's manifest.

        :return: The app_package_id of this AndroidTestLoop.
        :rtype: str
        """
        return self._app_package_id

    @app_package_id.setter
    def app_package_id(self, app_package_id):
        """Sets the app_package_id of this AndroidTestLoop.

        The java package for the application under test. The default is determined by examining the application's manifest.

        :param app_package_id: The app_package_id of this AndroidTestLoop.
        :type app_package_id: str
        """

        self._app_package_id = app_package_id

    @property
    def scenario_labels(self):
        """Gets the scenario_labels of this AndroidTestLoop.

        The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.

        :return: The scenario_labels of this AndroidTestLoop.
        :rtype: List[str]
        """
        return self._scenario_labels

    @scenario_labels.setter
    def scenario_labels(self, scenario_labels):
        """Sets the scenario_labels of this AndroidTestLoop.

        The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.

        :param scenario_labels: The scenario_labels of this AndroidTestLoop.
        :type scenario_labels: List[str]
        """

        self._scenario_labels = scenario_labels

    @property
    def scenarios(self):
        """Gets the scenarios of this AndroidTestLoop.

        The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.

        :return: The scenarios of this AndroidTestLoop.
        :rtype: List[int]
        """
        return self._scenarios

    @scenarios.setter
    def scenarios(self, scenarios):
        """Sets the scenarios of this AndroidTestLoop.

        The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.

        :param scenarios: The scenarios of this AndroidTestLoop.
        :type scenarios: List[int]
        """

        self._scenarios = scenarios
