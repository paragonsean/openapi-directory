# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.client_info import ClientInfo
from openapi_server.models.environment_matrix import EnvironmentMatrix
from openapi_server.models.matrix_error_detail import MatrixErrorDetail
from openapi_server.models.result_storage import ResultStorage
from openapi_server.models.test_execution import TestExecution
from openapi_server.models.test_specification import TestSpecification
from openapi_server import util


class TestMatrix(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_info: ClientInfo=None, environment_matrix: EnvironmentMatrix=None, extended_invalid_matrix_details: List[MatrixErrorDetail]=None, fail_fast: bool=None, flaky_test_attempts: int=None, invalid_matrix_details: str=None, outcome_summary: str=None, project_id: str=None, result_storage: ResultStorage=None, state: str=None, test_executions: List[TestExecution]=None, test_matrix_id: str=None, test_specification: TestSpecification=None, timestamp: str=None):
        """TestMatrix - a model defined in OpenAPI

        :param client_info: The client_info of this TestMatrix.
        :param environment_matrix: The environment_matrix of this TestMatrix.
        :param extended_invalid_matrix_details: The extended_invalid_matrix_details of this TestMatrix.
        :param fail_fast: The fail_fast of this TestMatrix.
        :param flaky_test_attempts: The flaky_test_attempts of this TestMatrix.
        :param invalid_matrix_details: The invalid_matrix_details of this TestMatrix.
        :param outcome_summary: The outcome_summary of this TestMatrix.
        :param project_id: The project_id of this TestMatrix.
        :param result_storage: The result_storage of this TestMatrix.
        :param state: The state of this TestMatrix.
        :param test_executions: The test_executions of this TestMatrix.
        :param test_matrix_id: The test_matrix_id of this TestMatrix.
        :param test_specification: The test_specification of this TestMatrix.
        :param timestamp: The timestamp of this TestMatrix.
        """
        self.openapi_types = {
            'client_info': ClientInfo,
            'environment_matrix': EnvironmentMatrix,
            'extended_invalid_matrix_details': List[MatrixErrorDetail],
            'fail_fast': bool,
            'flaky_test_attempts': int,
            'invalid_matrix_details': str,
            'outcome_summary': str,
            'project_id': str,
            'result_storage': ResultStorage,
            'state': str,
            'test_executions': List[TestExecution],
            'test_matrix_id': str,
            'test_specification': TestSpecification,
            'timestamp': str
        }

        self.attribute_map = {
            'client_info': 'clientInfo',
            'environment_matrix': 'environmentMatrix',
            'extended_invalid_matrix_details': 'extendedInvalidMatrixDetails',
            'fail_fast': 'failFast',
            'flaky_test_attempts': 'flakyTestAttempts',
            'invalid_matrix_details': 'invalidMatrixDetails',
            'outcome_summary': 'outcomeSummary',
            'project_id': 'projectId',
            'result_storage': 'resultStorage',
            'state': 'state',
            'test_executions': 'testExecutions',
            'test_matrix_id': 'testMatrixId',
            'test_specification': 'testSpecification',
            'timestamp': 'timestamp'
        }

        self._client_info = client_info
        self._environment_matrix = environment_matrix
        self._extended_invalid_matrix_details = extended_invalid_matrix_details
        self._fail_fast = fail_fast
        self._flaky_test_attempts = flaky_test_attempts
        self._invalid_matrix_details = invalid_matrix_details
        self._outcome_summary = outcome_summary
        self._project_id = project_id
        self._result_storage = result_storage
        self._state = state
        self._test_executions = test_executions
        self._test_matrix_id = test_matrix_id
        self._test_specification = test_specification
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestMatrix':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestMatrix of this TestMatrix.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_info(self):
        """Gets the client_info of this TestMatrix.


        :return: The client_info of this TestMatrix.
        :rtype: ClientInfo
        """
        return self._client_info

    @client_info.setter
    def client_info(self, client_info):
        """Sets the client_info of this TestMatrix.


        :param client_info: The client_info of this TestMatrix.
        :type client_info: ClientInfo
        """

        self._client_info = client_info

    @property
    def environment_matrix(self):
        """Gets the environment_matrix of this TestMatrix.


        :return: The environment_matrix of this TestMatrix.
        :rtype: EnvironmentMatrix
        """
        return self._environment_matrix

    @environment_matrix.setter
    def environment_matrix(self, environment_matrix):
        """Sets the environment_matrix of this TestMatrix.


        :param environment_matrix: The environment_matrix of this TestMatrix.
        :type environment_matrix: EnvironmentMatrix
        """

        self._environment_matrix = environment_matrix

    @property
    def extended_invalid_matrix_details(self):
        """Gets the extended_invalid_matrix_details of this TestMatrix.

        Output only. Details about why a matrix was deemed invalid. If multiple checks can be safely performed, they will be reported but no assumptions should be made about the length of this list.

        :return: The extended_invalid_matrix_details of this TestMatrix.
        :rtype: List[MatrixErrorDetail]
        """
        return self._extended_invalid_matrix_details

    @extended_invalid_matrix_details.setter
    def extended_invalid_matrix_details(self, extended_invalid_matrix_details):
        """Sets the extended_invalid_matrix_details of this TestMatrix.

        Output only. Details about why a matrix was deemed invalid. If multiple checks can be safely performed, they will be reported but no assumptions should be made about the length of this list.

        :param extended_invalid_matrix_details: The extended_invalid_matrix_details of this TestMatrix.
        :type extended_invalid_matrix_details: List[MatrixErrorDetail]
        """

        self._extended_invalid_matrix_details = extended_invalid_matrix_details

    @property
    def fail_fast(self):
        """Gets the fail_fast of this TestMatrix.

        If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.

        :return: The fail_fast of this TestMatrix.
        :rtype: bool
        """
        return self._fail_fast

    @fail_fast.setter
    def fail_fast(self, fail_fast):
        """Sets the fail_fast of this TestMatrix.

        If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.

        :param fail_fast: The fail_fast of this TestMatrix.
        :type fail_fast: bool
        """

        self._fail_fast = fail_fast

    @property
    def flaky_test_attempts(self):
        """Gets the flaky_test_attempts of this TestMatrix.

        The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.

        :return: The flaky_test_attempts of this TestMatrix.
        :rtype: int
        """
        return self._flaky_test_attempts

    @flaky_test_attempts.setter
    def flaky_test_attempts(self, flaky_test_attempts):
        """Sets the flaky_test_attempts of this TestMatrix.

        The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.

        :param flaky_test_attempts: The flaky_test_attempts of this TestMatrix.
        :type flaky_test_attempts: int
        """

        self._flaky_test_attempts = flaky_test_attempts

    @property
    def invalid_matrix_details(self):
        """Gets the invalid_matrix_details of this TestMatrix.

        Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.

        :return: The invalid_matrix_details of this TestMatrix.
        :rtype: str
        """
        return self._invalid_matrix_details

    @invalid_matrix_details.setter
    def invalid_matrix_details(self, invalid_matrix_details):
        """Sets the invalid_matrix_details of this TestMatrix.

        Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.

        :param invalid_matrix_details: The invalid_matrix_details of this TestMatrix.
        :type invalid_matrix_details: str
        """
        allowed_values = ["INVALID_MATRIX_DETAILS_UNSPECIFIED", "DETAILS_UNAVAILABLE", "MALFORMED_APK", "MALFORMED_TEST_APK", "NO_MANIFEST", "NO_PACKAGE_NAME", "INVALID_PACKAGE_NAME", "TEST_SAME_AS_APP", "NO_INSTRUMENTATION", "NO_SIGNATURE", "INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE", "NO_TEST_RUNNER_CLASS", "NO_LAUNCHER_ACTIVITY", "FORBIDDEN_PERMISSIONS", "INVALID_ROBO_DIRECTIVES", "INVALID_RESOURCE_NAME", "INVALID_DIRECTIVE_ACTION", "TEST_LOOP_INTENT_FILTER_NOT_FOUND", "SCENARIO_LABEL_NOT_DECLARED", "SCENARIO_LABEL_MALFORMED", "SCENARIO_NOT_DECLARED", "DEVICE_ADMIN_RECEIVER", "MALFORMED_XC_TEST_ZIP", "BUILT_FOR_IOS_SIMULATOR", "NO_TESTS_IN_XC_TEST_ZIP", "USE_DESTINATION_ARTIFACTS", "TEST_NOT_APP_HOSTED", "PLIST_CANNOT_BE_PARSED", "TEST_ONLY_APK", "MALFORMED_IPA", "MISSING_URL_SCHEME", "MALFORMED_APP_BUNDLE", "NO_CODE_APK", "INVALID_INPUT_APK", "INVALID_APK_PREVIEW_SDK", "MATRIX_TOO_LARGE", "TEST_QUOTA_EXCEEDED", "SERVICE_NOT_ACTIVATED", "UNKNOWN_PERMISSION_ERROR"]  # noqa: E501
        if invalid_matrix_details not in allowed_values:
            raise ValueError(
                "Invalid value for `invalid_matrix_details` ({0}), must be one of {1}"
                .format(invalid_matrix_details, allowed_values)
            )

        self._invalid_matrix_details = invalid_matrix_details

    @property
    def outcome_summary(self):
        """Gets the outcome_summary of this TestMatrix.

        Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.

        :return: The outcome_summary of this TestMatrix.
        :rtype: str
        """
        return self._outcome_summary

    @outcome_summary.setter
    def outcome_summary(self, outcome_summary):
        """Sets the outcome_summary of this TestMatrix.

        Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.

        :param outcome_summary: The outcome_summary of this TestMatrix.
        :type outcome_summary: str
        """
        allowed_values = ["OUTCOME_SUMMARY_UNSPECIFIED", "SUCCESS", "FAILURE", "INCONCLUSIVE", "SKIPPED"]  # noqa: E501
        if outcome_summary not in allowed_values:
            raise ValueError(
                "Invalid value for `outcome_summary` ({0}), must be one of {1}"
                .format(outcome_summary, allowed_values)
            )

        self._outcome_summary = outcome_summary

    @property
    def project_id(self):
        """Gets the project_id of this TestMatrix.

        The cloud project that owns the test matrix.

        :return: The project_id of this TestMatrix.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TestMatrix.

        The cloud project that owns the test matrix.

        :param project_id: The project_id of this TestMatrix.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def result_storage(self):
        """Gets the result_storage of this TestMatrix.


        :return: The result_storage of this TestMatrix.
        :rtype: ResultStorage
        """
        return self._result_storage

    @result_storage.setter
    def result_storage(self, result_storage):
        """Sets the result_storage of this TestMatrix.


        :param result_storage: The result_storage of this TestMatrix.
        :type result_storage: ResultStorage
        """

        self._result_storage = result_storage

    @property
    def state(self):
        """Gets the state of this TestMatrix.

        Output only. Indicates the current progress of the test matrix.

        :return: The state of this TestMatrix.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TestMatrix.

        Output only. Indicates the current progress of the test matrix.

        :param state: The state of this TestMatrix.
        :type state: str
        """
        allowed_values = ["TEST_STATE_UNSPECIFIED", "VALIDATING", "PENDING", "RUNNING", "FINISHED", "ERROR", "UNSUPPORTED_ENVIRONMENT", "INCOMPATIBLE_ENVIRONMENT", "INCOMPATIBLE_ARCHITECTURE", "CANCELLED", "INVALID"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def test_executions(self):
        """Gets the test_executions of this TestMatrix.

        Output only. The list of test executions that the service creates for this matrix.

        :return: The test_executions of this TestMatrix.
        :rtype: List[TestExecution]
        """
        return self._test_executions

    @test_executions.setter
    def test_executions(self, test_executions):
        """Sets the test_executions of this TestMatrix.

        Output only. The list of test executions that the service creates for this matrix.

        :param test_executions: The test_executions of this TestMatrix.
        :type test_executions: List[TestExecution]
        """

        self._test_executions = test_executions

    @property
    def test_matrix_id(self):
        """Gets the test_matrix_id of this TestMatrix.

        Output only. Unique id set by the service.

        :return: The test_matrix_id of this TestMatrix.
        :rtype: str
        """
        return self._test_matrix_id

    @test_matrix_id.setter
    def test_matrix_id(self, test_matrix_id):
        """Sets the test_matrix_id of this TestMatrix.

        Output only. Unique id set by the service.

        :param test_matrix_id: The test_matrix_id of this TestMatrix.
        :type test_matrix_id: str
        """

        self._test_matrix_id = test_matrix_id

    @property
    def test_specification(self):
        """Gets the test_specification of this TestMatrix.


        :return: The test_specification of this TestMatrix.
        :rtype: TestSpecification
        """
        return self._test_specification

    @test_specification.setter
    def test_specification(self, test_specification):
        """Sets the test_specification of this TestMatrix.


        :param test_specification: The test_specification of this TestMatrix.
        :type test_specification: TestSpecification
        """

        self._test_specification = test_specification

    @property
    def timestamp(self):
        """Gets the timestamp of this TestMatrix.

        Output only. The time this test matrix was initially created.

        :return: The timestamp of this TestMatrix.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TestMatrix.

        Output only. The time this test matrix was initially created.

        :param timestamp: The timestamp of this TestMatrix.
        :type timestamp: str
        """

        self._timestamp = timestamp
