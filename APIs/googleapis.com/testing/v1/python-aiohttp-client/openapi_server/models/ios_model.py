# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.per_ios_version_info import PerIosVersionInfo
from openapi_server import util


class IosModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_capabilities: List[str]=None, form_factor: str=None, id: str=None, name: str=None, per_version_info: List[PerIosVersionInfo]=None, screen_density: int=None, screen_x: int=None, screen_y: int=None, supported_version_ids: List[str]=None, tags: List[str]=None):
        """IosModel - a model defined in OpenAPI

        :param device_capabilities: The device_capabilities of this IosModel.
        :param form_factor: The form_factor of this IosModel.
        :param id: The id of this IosModel.
        :param name: The name of this IosModel.
        :param per_version_info: The per_version_info of this IosModel.
        :param screen_density: The screen_density of this IosModel.
        :param screen_x: The screen_x of this IosModel.
        :param screen_y: The screen_y of this IosModel.
        :param supported_version_ids: The supported_version_ids of this IosModel.
        :param tags: The tags of this IosModel.
        """
        self.openapi_types = {
            'device_capabilities': List[str],
            'form_factor': str,
            'id': str,
            'name': str,
            'per_version_info': List[PerIosVersionInfo],
            'screen_density': int,
            'screen_x': int,
            'screen_y': int,
            'supported_version_ids': List[str],
            'tags': List[str]
        }

        self.attribute_map = {
            'device_capabilities': 'deviceCapabilities',
            'form_factor': 'formFactor',
            'id': 'id',
            'name': 'name',
            'per_version_info': 'perVersionInfo',
            'screen_density': 'screenDensity',
            'screen_x': 'screenX',
            'screen_y': 'screenY',
            'supported_version_ids': 'supportedVersionIds',
            'tags': 'tags'
        }

        self._device_capabilities = device_capabilities
        self._form_factor = form_factor
        self._id = id
        self._name = name
        self._per_version_info = per_version_info
        self._screen_density = screen_density
        self._screen_x = screen_x
        self._screen_y = screen_y
        self._supported_version_ids = supported_version_ids
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IosModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IosModel of this IosModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_capabilities(self):
        """Gets the device_capabilities of this IosModel.

        Device capabilities. Copied from https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html

        :return: The device_capabilities of this IosModel.
        :rtype: List[str]
        """
        return self._device_capabilities

    @device_capabilities.setter
    def device_capabilities(self, device_capabilities):
        """Sets the device_capabilities of this IosModel.

        Device capabilities. Copied from https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html

        :param device_capabilities: The device_capabilities of this IosModel.
        :type device_capabilities: List[str]
        """

        self._device_capabilities = device_capabilities

    @property
    def form_factor(self):
        """Gets the form_factor of this IosModel.

        Whether this device is a phone, tablet, wearable, etc.

        :return: The form_factor of this IosModel.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this IosModel.

        Whether this device is a phone, tablet, wearable, etc.

        :param form_factor: The form_factor of this IosModel.
        :type form_factor: str
        """
        allowed_values = ["DEVICE_FORM_FACTOR_UNSPECIFIED", "PHONE", "TABLET", "WEARABLE"]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    @property
    def id(self):
        """Gets the id of this IosModel.

        The unique opaque id for this model. Use this for invoking the TestExecutionService.

        :return: The id of this IosModel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IosModel.

        The unique opaque id for this model. Use this for invoking the TestExecutionService.

        :param id: The id of this IosModel.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IosModel.

        The human-readable name for this device model. Examples: \"iPhone 4s\", \"iPad Mini 2\".

        :return: The name of this IosModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IosModel.

        The human-readable name for this device model. Examples: \"iPhone 4s\", \"iPad Mini 2\".

        :param name: The name of this IosModel.
        :type name: str
        """

        self._name = name

    @property
    def per_version_info(self):
        """Gets the per_version_info of this IosModel.

        Version-specific information of an iOS model.

        :return: The per_version_info of this IosModel.
        :rtype: List[PerIosVersionInfo]
        """
        return self._per_version_info

    @per_version_info.setter
    def per_version_info(self, per_version_info):
        """Sets the per_version_info of this IosModel.

        Version-specific information of an iOS model.

        :param per_version_info: The per_version_info of this IosModel.
        :type per_version_info: List[PerIosVersionInfo]
        """

        self._per_version_info = per_version_info

    @property
    def screen_density(self):
        """Gets the screen_density of this IosModel.

        Screen density in DPI.

        :return: The screen_density of this IosModel.
        :rtype: int
        """
        return self._screen_density

    @screen_density.setter
    def screen_density(self, screen_density):
        """Sets the screen_density of this IosModel.

        Screen density in DPI.

        :param screen_density: The screen_density of this IosModel.
        :type screen_density: int
        """

        self._screen_density = screen_density

    @property
    def screen_x(self):
        """Gets the screen_x of this IosModel.

        Screen size in the horizontal (X) dimension measured in pixels.

        :return: The screen_x of this IosModel.
        :rtype: int
        """
        return self._screen_x

    @screen_x.setter
    def screen_x(self, screen_x):
        """Sets the screen_x of this IosModel.

        Screen size in the horizontal (X) dimension measured in pixels.

        :param screen_x: The screen_x of this IosModel.
        :type screen_x: int
        """

        self._screen_x = screen_x

    @property
    def screen_y(self):
        """Gets the screen_y of this IosModel.

        Screen size in the vertical (Y) dimension measured in pixels.

        :return: The screen_y of this IosModel.
        :rtype: int
        """
        return self._screen_y

    @screen_y.setter
    def screen_y(self, screen_y):
        """Sets the screen_y of this IosModel.

        Screen size in the vertical (Y) dimension measured in pixels.

        :param screen_y: The screen_y of this IosModel.
        :type screen_y: int
        """

        self._screen_y = screen_y

    @property
    def supported_version_ids(self):
        """Gets the supported_version_ids of this IosModel.

        The set of iOS major software versions this device supports.

        :return: The supported_version_ids of this IosModel.
        :rtype: List[str]
        """
        return self._supported_version_ids

    @supported_version_ids.setter
    def supported_version_ids(self, supported_version_ids):
        """Sets the supported_version_ids of this IosModel.

        The set of iOS major software versions this device supports.

        :param supported_version_ids: The supported_version_ids of this IosModel.
        :type supported_version_ids: List[str]
        """

        self._supported_version_ids = supported_version_ids

    @property
    def tags(self):
        """Gets the tags of this IosModel.

        Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".

        :return: The tags of this IosModel.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IosModel.

        Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".

        :param tags: The tags of this IosModel.
        :type tags: List[str]
        """

        self._tags = tags
