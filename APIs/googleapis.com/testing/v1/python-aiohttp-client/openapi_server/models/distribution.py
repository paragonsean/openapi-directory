# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Distribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, market_share: float=None, measurement_time: str=None):
        """Distribution - a model defined in OpenAPI

        :param market_share: The market_share of this Distribution.
        :param measurement_time: The measurement_time of this Distribution.
        """
        self.openapi_types = {
            'market_share': float,
            'measurement_time': str
        }

        self.attribute_map = {
            'market_share': 'marketShare',
            'measurement_time': 'measurementTime'
        }

        self._market_share = market_share
        self._measurement_time = measurement_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Distribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Distribution of this Distribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def market_share(self):
        """Gets the market_share of this Distribution.

        Output only. The estimated fraction (0-1) of the total market with this configuration.

        :return: The market_share of this Distribution.
        :rtype: float
        """
        return self._market_share

    @market_share.setter
    def market_share(self, market_share):
        """Sets the market_share of this Distribution.

        Output only. The estimated fraction (0-1) of the total market with this configuration.

        :param market_share: The market_share of this Distribution.
        :type market_share: float
        """

        self._market_share = market_share

    @property
    def measurement_time(self):
        """Gets the measurement_time of this Distribution.

        Output only. The time this distribution was measured.

        :return: The measurement_time of this Distribution.
        :rtype: str
        """
        return self._measurement_time

    @measurement_time.setter
    def measurement_time(self, measurement_time):
        """Sets the measurement_time of this Distribution.

        Output only. The time this distribution was measured.

        :param measurement_time: The measurement_time of this Distribution.
        :type measurement_time: str
        """

        self._measurement_time = measurement_time
