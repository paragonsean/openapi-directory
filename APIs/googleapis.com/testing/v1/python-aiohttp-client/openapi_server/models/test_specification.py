# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.android_instrumentation_test import AndroidInstrumentationTest
from openapi_server.models.android_robo_test import AndroidRoboTest
from openapi_server.models.android_test_loop import AndroidTestLoop
from openapi_server.models.ios_robo_test import IosRoboTest
from openapi_server.models.ios_test_loop import IosTestLoop
from openapi_server.models.ios_test_setup import IosTestSetup
from openapi_server.models.ios_xc_test import IosXcTest
from openapi_server.models.test_setup import TestSetup
from openapi_server import util


class TestSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android_instrumentation_test: AndroidInstrumentationTest=None, android_robo_test: AndroidRoboTest=None, android_test_loop: AndroidTestLoop=None, disable_performance_metrics: bool=None, disable_video_recording: bool=None, ios_robo_test: IosRoboTest=None, ios_test_loop: IosTestLoop=None, ios_test_setup: IosTestSetup=None, ios_xc_test: IosXcTest=None, test_setup: TestSetup=None, test_timeout: str=None):
        """TestSpecification - a model defined in OpenAPI

        :param android_instrumentation_test: The android_instrumentation_test of this TestSpecification.
        :param android_robo_test: The android_robo_test of this TestSpecification.
        :param android_test_loop: The android_test_loop of this TestSpecification.
        :param disable_performance_metrics: The disable_performance_metrics of this TestSpecification.
        :param disable_video_recording: The disable_video_recording of this TestSpecification.
        :param ios_robo_test: The ios_robo_test of this TestSpecification.
        :param ios_test_loop: The ios_test_loop of this TestSpecification.
        :param ios_test_setup: The ios_test_setup of this TestSpecification.
        :param ios_xc_test: The ios_xc_test of this TestSpecification.
        :param test_setup: The test_setup of this TestSpecification.
        :param test_timeout: The test_timeout of this TestSpecification.
        """
        self.openapi_types = {
            'android_instrumentation_test': AndroidInstrumentationTest,
            'android_robo_test': AndroidRoboTest,
            'android_test_loop': AndroidTestLoop,
            'disable_performance_metrics': bool,
            'disable_video_recording': bool,
            'ios_robo_test': IosRoboTest,
            'ios_test_loop': IosTestLoop,
            'ios_test_setup': IosTestSetup,
            'ios_xc_test': IosXcTest,
            'test_setup': TestSetup,
            'test_timeout': str
        }

        self.attribute_map = {
            'android_instrumentation_test': 'androidInstrumentationTest',
            'android_robo_test': 'androidRoboTest',
            'android_test_loop': 'androidTestLoop',
            'disable_performance_metrics': 'disablePerformanceMetrics',
            'disable_video_recording': 'disableVideoRecording',
            'ios_robo_test': 'iosRoboTest',
            'ios_test_loop': 'iosTestLoop',
            'ios_test_setup': 'iosTestSetup',
            'ios_xc_test': 'iosXcTest',
            'test_setup': 'testSetup',
            'test_timeout': 'testTimeout'
        }

        self._android_instrumentation_test = android_instrumentation_test
        self._android_robo_test = android_robo_test
        self._android_test_loop = android_test_loop
        self._disable_performance_metrics = disable_performance_metrics
        self._disable_video_recording = disable_video_recording
        self._ios_robo_test = ios_robo_test
        self._ios_test_loop = ios_test_loop
        self._ios_test_setup = ios_test_setup
        self._ios_xc_test = ios_xc_test
        self._test_setup = test_setup
        self._test_timeout = test_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestSpecification of this TestSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android_instrumentation_test(self):
        """Gets the android_instrumentation_test of this TestSpecification.


        :return: The android_instrumentation_test of this TestSpecification.
        :rtype: AndroidInstrumentationTest
        """
        return self._android_instrumentation_test

    @android_instrumentation_test.setter
    def android_instrumentation_test(self, android_instrumentation_test):
        """Sets the android_instrumentation_test of this TestSpecification.


        :param android_instrumentation_test: The android_instrumentation_test of this TestSpecification.
        :type android_instrumentation_test: AndroidInstrumentationTest
        """

        self._android_instrumentation_test = android_instrumentation_test

    @property
    def android_robo_test(self):
        """Gets the android_robo_test of this TestSpecification.


        :return: The android_robo_test of this TestSpecification.
        :rtype: AndroidRoboTest
        """
        return self._android_robo_test

    @android_robo_test.setter
    def android_robo_test(self, android_robo_test):
        """Sets the android_robo_test of this TestSpecification.


        :param android_robo_test: The android_robo_test of this TestSpecification.
        :type android_robo_test: AndroidRoboTest
        """

        self._android_robo_test = android_robo_test

    @property
    def android_test_loop(self):
        """Gets the android_test_loop of this TestSpecification.


        :return: The android_test_loop of this TestSpecification.
        :rtype: AndroidTestLoop
        """
        return self._android_test_loop

    @android_test_loop.setter
    def android_test_loop(self, android_test_loop):
        """Sets the android_test_loop of this TestSpecification.


        :param android_test_loop: The android_test_loop of this TestSpecification.
        :type android_test_loop: AndroidTestLoop
        """

        self._android_test_loop = android_test_loop

    @property
    def disable_performance_metrics(self):
        """Gets the disable_performance_metrics of this TestSpecification.

        Disables performance metrics recording. May reduce test latency.

        :return: The disable_performance_metrics of this TestSpecification.
        :rtype: bool
        """
        return self._disable_performance_metrics

    @disable_performance_metrics.setter
    def disable_performance_metrics(self, disable_performance_metrics):
        """Sets the disable_performance_metrics of this TestSpecification.

        Disables performance metrics recording. May reduce test latency.

        :param disable_performance_metrics: The disable_performance_metrics of this TestSpecification.
        :type disable_performance_metrics: bool
        """

        self._disable_performance_metrics = disable_performance_metrics

    @property
    def disable_video_recording(self):
        """Gets the disable_video_recording of this TestSpecification.

        Disables video recording. May reduce test latency.

        :return: The disable_video_recording of this TestSpecification.
        :rtype: bool
        """
        return self._disable_video_recording

    @disable_video_recording.setter
    def disable_video_recording(self, disable_video_recording):
        """Sets the disable_video_recording of this TestSpecification.

        Disables video recording. May reduce test latency.

        :param disable_video_recording: The disable_video_recording of this TestSpecification.
        :type disable_video_recording: bool
        """

        self._disable_video_recording = disable_video_recording

    @property
    def ios_robo_test(self):
        """Gets the ios_robo_test of this TestSpecification.


        :return: The ios_robo_test of this TestSpecification.
        :rtype: IosRoboTest
        """
        return self._ios_robo_test

    @ios_robo_test.setter
    def ios_robo_test(self, ios_robo_test):
        """Sets the ios_robo_test of this TestSpecification.


        :param ios_robo_test: The ios_robo_test of this TestSpecification.
        :type ios_robo_test: IosRoboTest
        """

        self._ios_robo_test = ios_robo_test

    @property
    def ios_test_loop(self):
        """Gets the ios_test_loop of this TestSpecification.


        :return: The ios_test_loop of this TestSpecification.
        :rtype: IosTestLoop
        """
        return self._ios_test_loop

    @ios_test_loop.setter
    def ios_test_loop(self, ios_test_loop):
        """Sets the ios_test_loop of this TestSpecification.


        :param ios_test_loop: The ios_test_loop of this TestSpecification.
        :type ios_test_loop: IosTestLoop
        """

        self._ios_test_loop = ios_test_loop

    @property
    def ios_test_setup(self):
        """Gets the ios_test_setup of this TestSpecification.


        :return: The ios_test_setup of this TestSpecification.
        :rtype: IosTestSetup
        """
        return self._ios_test_setup

    @ios_test_setup.setter
    def ios_test_setup(self, ios_test_setup):
        """Sets the ios_test_setup of this TestSpecification.


        :param ios_test_setup: The ios_test_setup of this TestSpecification.
        :type ios_test_setup: IosTestSetup
        """

        self._ios_test_setup = ios_test_setup

    @property
    def ios_xc_test(self):
        """Gets the ios_xc_test of this TestSpecification.


        :return: The ios_xc_test of this TestSpecification.
        :rtype: IosXcTest
        """
        return self._ios_xc_test

    @ios_xc_test.setter
    def ios_xc_test(self, ios_xc_test):
        """Sets the ios_xc_test of this TestSpecification.


        :param ios_xc_test: The ios_xc_test of this TestSpecification.
        :type ios_xc_test: IosXcTest
        """

        self._ios_xc_test = ios_xc_test

    @property
    def test_setup(self):
        """Gets the test_setup of this TestSpecification.


        :return: The test_setup of this TestSpecification.
        :rtype: TestSetup
        """
        return self._test_setup

    @test_setup.setter
    def test_setup(self, test_setup):
        """Sets the test_setup of this TestSpecification.


        :param test_setup: The test_setup of this TestSpecification.
        :type test_setup: TestSetup
        """

        self._test_setup = test_setup

    @property
    def test_timeout(self):
        """Gets the test_timeout of this TestSpecification.

        Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.

        :return: The test_timeout of this TestSpecification.
        :rtype: str
        """
        return self._test_timeout

    @test_timeout.setter
    def test_timeout(self, test_timeout):
        """Sets the test_timeout of this TestSpecification.

        Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.

        :param test_timeout: The test_timeout of this TestSpecification.
        :type test_timeout: str
        """

        self._test_timeout = test_timeout
