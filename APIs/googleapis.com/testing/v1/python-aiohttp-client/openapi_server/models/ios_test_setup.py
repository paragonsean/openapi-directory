# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_reference import FileReference
from openapi_server.models.ios_device_file import IosDeviceFile
from openapi_server import util


class IosTestSetup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_ipas: List[FileReference]=None, network_profile: str=None, pull_directories: List[IosDeviceFile]=None, push_files: List[IosDeviceFile]=None):
        """IosTestSetup - a model defined in OpenAPI

        :param additional_ipas: The additional_ipas of this IosTestSetup.
        :param network_profile: The network_profile of this IosTestSetup.
        :param pull_directories: The pull_directories of this IosTestSetup.
        :param push_files: The push_files of this IosTestSetup.
        """
        self.openapi_types = {
            'additional_ipas': List[FileReference],
            'network_profile': str,
            'pull_directories': List[IosDeviceFile],
            'push_files': List[IosDeviceFile]
        }

        self.attribute_map = {
            'additional_ipas': 'additionalIpas',
            'network_profile': 'networkProfile',
            'pull_directories': 'pullDirectories',
            'push_files': 'pushFiles'
        }

        self._additional_ipas = additional_ipas
        self._network_profile = network_profile
        self._pull_directories = pull_directories
        self._push_files = push_files

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IosTestSetup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IosTestSetup of this IosTestSetup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_ipas(self):
        """Gets the additional_ipas of this IosTestSetup.

        iOS apps to install in addition to those being directly tested.

        :return: The additional_ipas of this IosTestSetup.
        :rtype: List[FileReference]
        """
        return self._additional_ipas

    @additional_ipas.setter
    def additional_ipas(self, additional_ipas):
        """Sets the additional_ipas of this IosTestSetup.

        iOS apps to install in addition to those being directly tested.

        :param additional_ipas: The additional_ipas of this IosTestSetup.
        :type additional_ipas: List[FileReference]
        """

        self._additional_ipas = additional_ipas

    @property
    def network_profile(self):
        """Gets the network_profile of this IosTestSetup.

        The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.

        :return: The network_profile of this IosTestSetup.
        :rtype: str
        """
        return self._network_profile

    @network_profile.setter
    def network_profile(self, network_profile):
        """Sets the network_profile of this IosTestSetup.

        The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.

        :param network_profile: The network_profile of this IosTestSetup.
        :type network_profile: str
        """

        self._network_profile = network_profile

    @property
    def pull_directories(self):
        """Gets the pull_directories of this IosTestSetup.

        List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (such as /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (such as /Documents) by specifying the bundle ID.

        :return: The pull_directories of this IosTestSetup.
        :rtype: List[IosDeviceFile]
        """
        return self._pull_directories

    @pull_directories.setter
    def pull_directories(self, pull_directories):
        """Sets the pull_directories of this IosTestSetup.

        List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (such as /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (such as /Documents) by specifying the bundle ID.

        :param pull_directories: The pull_directories of this IosTestSetup.
        :type pull_directories: List[IosDeviceFile]
        """

        self._pull_directories = pull_directories

    @property
    def push_files(self):
        """Gets the push_files of this IosTestSetup.

        List of files to push to the device before starting the test.

        :return: The push_files of this IosTestSetup.
        :rtype: List[IosDeviceFile]
        """
        return self._push_files

    @push_files.setter
    def push_files(self, push_files):
        """Sets the push_files of this IosTestSetup.

        List of files to push to the device before starting the test.

        :param push_files: The push_files of this IosTestSetup.
        :type push_files: List[IosDeviceFile]
        """

        self._push_files = push_files
