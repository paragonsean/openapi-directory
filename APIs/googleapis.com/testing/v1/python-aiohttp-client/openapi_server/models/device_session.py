# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.android_device import AndroidDevice
from openapi_server.models.session_state_event import SessionStateEvent
from openapi_server import util


class DeviceSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_start_time: str=None, android_device: AndroidDevice=None, create_time: str=None, display_name: str=None, expire_time: str=None, inactivity_timeout: str=None, name: str=None, state: str=None, state_histories: List[SessionStateEvent]=None, ttl: str=None):
        """DeviceSession - a model defined in OpenAPI

        :param active_start_time: The active_start_time of this DeviceSession.
        :param android_device: The android_device of this DeviceSession.
        :param create_time: The create_time of this DeviceSession.
        :param display_name: The display_name of this DeviceSession.
        :param expire_time: The expire_time of this DeviceSession.
        :param inactivity_timeout: The inactivity_timeout of this DeviceSession.
        :param name: The name of this DeviceSession.
        :param state: The state of this DeviceSession.
        :param state_histories: The state_histories of this DeviceSession.
        :param ttl: The ttl of this DeviceSession.
        """
        self.openapi_types = {
            'active_start_time': str,
            'android_device': AndroidDevice,
            'create_time': str,
            'display_name': str,
            'expire_time': str,
            'inactivity_timeout': str,
            'name': str,
            'state': str,
            'state_histories': List[SessionStateEvent],
            'ttl': str
        }

        self.attribute_map = {
            'active_start_time': 'activeStartTime',
            'android_device': 'androidDevice',
            'create_time': 'createTime',
            'display_name': 'displayName',
            'expire_time': 'expireTime',
            'inactivity_timeout': 'inactivityTimeout',
            'name': 'name',
            'state': 'state',
            'state_histories': 'stateHistories',
            'ttl': 'ttl'
        }

        self._active_start_time = active_start_time
        self._android_device = android_device
        self._create_time = create_time
        self._display_name = display_name
        self._expire_time = expire_time
        self._inactivity_timeout = inactivity_timeout
        self._name = name
        self._state = state
        self._state_histories = state_histories
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceSession of this DeviceSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_start_time(self):
        """Gets the active_start_time of this DeviceSession.

        Output only. The timestamp that the session first became ACTIVE.

        :return: The active_start_time of this DeviceSession.
        :rtype: str
        """
        return self._active_start_time

    @active_start_time.setter
    def active_start_time(self, active_start_time):
        """Sets the active_start_time of this DeviceSession.

        Output only. The timestamp that the session first became ACTIVE.

        :param active_start_time: The active_start_time of this DeviceSession.
        :type active_start_time: str
        """

        self._active_start_time = active_start_time

    @property
    def android_device(self):
        """Gets the android_device of this DeviceSession.


        :return: The android_device of this DeviceSession.
        :rtype: AndroidDevice
        """
        return self._android_device

    @android_device.setter
    def android_device(self, android_device):
        """Sets the android_device of this DeviceSession.


        :param android_device: The android_device of this DeviceSession.
        :type android_device: AndroidDevice
        """

        self._android_device = android_device

    @property
    def create_time(self):
        """Gets the create_time of this DeviceSession.

        Output only. The time that the Session was created.

        :return: The create_time of this DeviceSession.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DeviceSession.

        Output only. The time that the Session was created.

        :param create_time: The create_time of this DeviceSession.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this DeviceSession.

        Output only. The title of the DeviceSession to be presented in the UI.

        :return: The display_name of this DeviceSession.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DeviceSession.

        Output only. The title of the DeviceSession to be presented in the UI.

        :param display_name: The display_name of this DeviceSession.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def expire_time(self):
        """Gets the expire_time of this DeviceSession.

        Optional. If the device is still in use at this time, any connections will be ended and the SessionState will transition from ACTIVE to FINISHED.

        :return: The expire_time of this DeviceSession.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this DeviceSession.

        Optional. If the device is still in use at this time, any connections will be ended and the SessionState will transition from ACTIVE to FINISHED.

        :param expire_time: The expire_time of this DeviceSession.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def inactivity_timeout(self):
        """Gets the inactivity_timeout of this DeviceSession.

        Output only. The interval of time that this device must be interacted with before it transitions from ACTIVE to TIMEOUT_INACTIVITY.

        :return: The inactivity_timeout of this DeviceSession.
        :rtype: str
        """
        return self._inactivity_timeout

    @inactivity_timeout.setter
    def inactivity_timeout(self, inactivity_timeout):
        """Sets the inactivity_timeout of this DeviceSession.

        Output only. The interval of time that this device must be interacted with before it transitions from ACTIVE to TIMEOUT_INACTIVITY.

        :param inactivity_timeout: The inactivity_timeout of this DeviceSession.
        :type inactivity_timeout: str
        """

        self._inactivity_timeout = inactivity_timeout

    @property
    def name(self):
        """Gets the name of this DeviceSession.

        Optional. Name of the DeviceSession, e.g. \"projects/{project_id}/deviceSessions/{session_id}\"

        :return: The name of this DeviceSession.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceSession.

        Optional. Name of the DeviceSession, e.g. \"projects/{project_id}/deviceSessions/{session_id}\"

        :param name: The name of this DeviceSession.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this DeviceSession.

        Output only. Current state of the DeviceSession.

        :return: The state of this DeviceSession.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DeviceSession.

        Output only. Current state of the DeviceSession.

        :param state: The state of this DeviceSession.
        :type state: str
        """
        allowed_values = ["SESSION_STATE_UNSPECIFIED", "REQUESTED", "PENDING", "ACTIVE", "EXPIRED", "FINISHED", "UNAVAILABLE", "ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_histories(self):
        """Gets the state_histories of this DeviceSession.

        Output only. The historical state transitions of the session_state message including the current session state.

        :return: The state_histories of this DeviceSession.
        :rtype: List[SessionStateEvent]
        """
        return self._state_histories

    @state_histories.setter
    def state_histories(self, state_histories):
        """Sets the state_histories of this DeviceSession.

        Output only. The historical state transitions of the session_state message including the current session state.

        :param state_histories: The state_histories of this DeviceSession.
        :type state_histories: List[SessionStateEvent]
        """

        self._state_histories = state_histories

    @property
    def ttl(self):
        """Gets the ttl of this DeviceSession.

        Optional. The amount of time that a device will be initially allocated for. This can eventually be extended with the UpdateDeviceSession RPC. Default: 30 minutes.

        :return: The ttl of this DeviceSession.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this DeviceSession.

        Optional. The amount of time that a device will be initially allocated for. This can eventually be extended with the UpdateDeviceSession RPC. Default: 30 minutes.

        :param ttl: The ttl of this DeviceSession.
        :type ttl: str
        """

        self._ttl = ttl
