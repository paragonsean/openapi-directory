# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.android_device import AndroidDevice
from openapi_server.models.ios_device import IosDevice
from openapi_server import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android_device: AndroidDevice=None, ios_device: IosDevice=None):
        """Environment - a model defined in OpenAPI

        :param android_device: The android_device of this Environment.
        :param ios_device: The ios_device of this Environment.
        """
        self.openapi_types = {
            'android_device': AndroidDevice,
            'ios_device': IosDevice
        }

        self.attribute_map = {
            'android_device': 'androidDevice',
            'ios_device': 'iosDevice'
        }

        self._android_device = android_device
        self._ios_device = ios_device

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment of this Environment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android_device(self):
        """Gets the android_device of this Environment.


        :return: The android_device of this Environment.
        :rtype: AndroidDevice
        """
        return self._android_device

    @android_device.setter
    def android_device(self, android_device):
        """Sets the android_device of this Environment.


        :param android_device: The android_device of this Environment.
        :type android_device: AndroidDevice
        """

        self._android_device = android_device

    @property
    def ios_device(self):
        """Gets the ios_device of this Environment.


        :return: The ios_device of this Environment.
        :rtype: IosDevice
        """
        return self._ios_device

    @ios_device.setter
    def ios_device(self, ios_device):
        """Sets the ios_device of this Environment.


        :param ios_device: The ios_device of this Environment.
        :type ios_device: IosDevice
        """

        self._ios_device = ios_device
