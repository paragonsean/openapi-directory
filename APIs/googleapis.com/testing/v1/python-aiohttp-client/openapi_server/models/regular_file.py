# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_reference import FileReference
from openapi_server import util


class RegularFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: FileReference=None, device_path: str=None):
        """RegularFile - a model defined in OpenAPI

        :param content: The content of this RegularFile.
        :param device_path: The device_path of this RegularFile.
        """
        self.openapi_types = {
            'content': FileReference,
            'device_path': str
        }

        self.attribute_map = {
            'content': 'content',
            'device_path': 'devicePath'
        }

        self._content = content
        self._device_path = device_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegularFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegularFile of this RegularFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this RegularFile.


        :return: The content of this RegularFile.
        :rtype: FileReference
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this RegularFile.


        :param content: The content of this RegularFile.
        :type content: FileReference
        """

        self._content = content

    @property
    def device_path(self):
        """Gets the device_path of this RegularFile.

        Required. Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.

        :return: The device_path of this RegularFile.
        :rtype: str
        """
        return self._device_path

    @device_path.setter
    def device_path(self, device_path):
        """Sets the device_path of this RegularFile.

        Required. Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.

        :param device_path: The device_path of this RegularFile.
        :type device_path: str
        """

        self._device_path = device_path
