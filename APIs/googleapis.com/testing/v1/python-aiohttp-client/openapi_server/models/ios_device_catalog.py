# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ios_model import IosModel
from openapi_server.models.ios_runtime_configuration import IosRuntimeConfiguration
from openapi_server.models.ios_version import IosVersion
from openapi_server.models.xcode_version import XcodeVersion
from openapi_server import util


class IosDeviceCatalog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, models: List[IosModel]=None, runtime_configuration: IosRuntimeConfiguration=None, versions: List[IosVersion]=None, xcode_versions: List[XcodeVersion]=None):
        """IosDeviceCatalog - a model defined in OpenAPI

        :param models: The models of this IosDeviceCatalog.
        :param runtime_configuration: The runtime_configuration of this IosDeviceCatalog.
        :param versions: The versions of this IosDeviceCatalog.
        :param xcode_versions: The xcode_versions of this IosDeviceCatalog.
        """
        self.openapi_types = {
            'models': List[IosModel],
            'runtime_configuration': IosRuntimeConfiguration,
            'versions': List[IosVersion],
            'xcode_versions': List[XcodeVersion]
        }

        self.attribute_map = {
            'models': 'models',
            'runtime_configuration': 'runtimeConfiguration',
            'versions': 'versions',
            'xcode_versions': 'xcodeVersions'
        }

        self._models = models
        self._runtime_configuration = runtime_configuration
        self._versions = versions
        self._xcode_versions = xcode_versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IosDeviceCatalog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IosDeviceCatalog of this IosDeviceCatalog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def models(self):
        """Gets the models of this IosDeviceCatalog.

        The set of supported iOS device models.

        :return: The models of this IosDeviceCatalog.
        :rtype: List[IosModel]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this IosDeviceCatalog.

        The set of supported iOS device models.

        :param models: The models of this IosDeviceCatalog.
        :type models: List[IosModel]
        """

        self._models = models

    @property
    def runtime_configuration(self):
        """Gets the runtime_configuration of this IosDeviceCatalog.


        :return: The runtime_configuration of this IosDeviceCatalog.
        :rtype: IosRuntimeConfiguration
        """
        return self._runtime_configuration

    @runtime_configuration.setter
    def runtime_configuration(self, runtime_configuration):
        """Sets the runtime_configuration of this IosDeviceCatalog.


        :param runtime_configuration: The runtime_configuration of this IosDeviceCatalog.
        :type runtime_configuration: IosRuntimeConfiguration
        """

        self._runtime_configuration = runtime_configuration

    @property
    def versions(self):
        """Gets the versions of this IosDeviceCatalog.

        The set of supported iOS software versions.

        :return: The versions of this IosDeviceCatalog.
        :rtype: List[IosVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this IosDeviceCatalog.

        The set of supported iOS software versions.

        :param versions: The versions of this IosDeviceCatalog.
        :type versions: List[IosVersion]
        """

        self._versions = versions

    @property
    def xcode_versions(self):
        """Gets the xcode_versions of this IosDeviceCatalog.

        The set of supported Xcode versions.

        :return: The xcode_versions of this IosDeviceCatalog.
        :rtype: List[XcodeVersion]
        """
        return self._xcode_versions

    @xcode_versions.setter
    def xcode_versions(self, xcode_versions):
        """Sets the xcode_versions of this IosDeviceCatalog.

        The set of supported Xcode versions.

        :param xcode_versions: The xcode_versions of this IosDeviceCatalog.
        :type xcode_versions: List[XcodeVersion]
        """

        self._xcode_versions = xcode_versions
