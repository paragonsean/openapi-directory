# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_bundle import AppBundle
from openapi_server.models.file_reference import FileReference
from openapi_server.models.robo_directive import RoboDirective
from openapi_server.models.robo_starting_intent import RoboStartingIntent
from openapi_server import util


class AndroidRoboTest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_apk: FileReference=None, app_bundle: AppBundle=None, app_initial_activity: str=None, app_package_id: str=None, max_depth: int=None, max_steps: int=None, robo_directives: List[RoboDirective]=None, robo_mode: str=None, robo_script: FileReference=None, starting_intents: List[RoboStartingIntent]=None):
        """AndroidRoboTest - a model defined in OpenAPI

        :param app_apk: The app_apk of this AndroidRoboTest.
        :param app_bundle: The app_bundle of this AndroidRoboTest.
        :param app_initial_activity: The app_initial_activity of this AndroidRoboTest.
        :param app_package_id: The app_package_id of this AndroidRoboTest.
        :param max_depth: The max_depth of this AndroidRoboTest.
        :param max_steps: The max_steps of this AndroidRoboTest.
        :param robo_directives: The robo_directives of this AndroidRoboTest.
        :param robo_mode: The robo_mode of this AndroidRoboTest.
        :param robo_script: The robo_script of this AndroidRoboTest.
        :param starting_intents: The starting_intents of this AndroidRoboTest.
        """
        self.openapi_types = {
            'app_apk': FileReference,
            'app_bundle': AppBundle,
            'app_initial_activity': str,
            'app_package_id': str,
            'max_depth': int,
            'max_steps': int,
            'robo_directives': List[RoboDirective],
            'robo_mode': str,
            'robo_script': FileReference,
            'starting_intents': List[RoboStartingIntent]
        }

        self.attribute_map = {
            'app_apk': 'appApk',
            'app_bundle': 'appBundle',
            'app_initial_activity': 'appInitialActivity',
            'app_package_id': 'appPackageId',
            'max_depth': 'maxDepth',
            'max_steps': 'maxSteps',
            'robo_directives': 'roboDirectives',
            'robo_mode': 'roboMode',
            'robo_script': 'roboScript',
            'starting_intents': 'startingIntents'
        }

        self._app_apk = app_apk
        self._app_bundle = app_bundle
        self._app_initial_activity = app_initial_activity
        self._app_package_id = app_package_id
        self._max_depth = max_depth
        self._max_steps = max_steps
        self._robo_directives = robo_directives
        self._robo_mode = robo_mode
        self._robo_script = robo_script
        self._starting_intents = starting_intents

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AndroidRoboTest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AndroidRoboTest of this AndroidRoboTest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_apk(self):
        """Gets the app_apk of this AndroidRoboTest.


        :return: The app_apk of this AndroidRoboTest.
        :rtype: FileReference
        """
        return self._app_apk

    @app_apk.setter
    def app_apk(self, app_apk):
        """Sets the app_apk of this AndroidRoboTest.


        :param app_apk: The app_apk of this AndroidRoboTest.
        :type app_apk: FileReference
        """

        self._app_apk = app_apk

    @property
    def app_bundle(self):
        """Gets the app_bundle of this AndroidRoboTest.


        :return: The app_bundle of this AndroidRoboTest.
        :rtype: AppBundle
        """
        return self._app_bundle

    @app_bundle.setter
    def app_bundle(self, app_bundle):
        """Sets the app_bundle of this AndroidRoboTest.


        :param app_bundle: The app_bundle of this AndroidRoboTest.
        :type app_bundle: AppBundle
        """

        self._app_bundle = app_bundle

    @property
    def app_initial_activity(self):
        """Gets the app_initial_activity of this AndroidRoboTest.

        The initial activity that should be used to start the app.

        :return: The app_initial_activity of this AndroidRoboTest.
        :rtype: str
        """
        return self._app_initial_activity

    @app_initial_activity.setter
    def app_initial_activity(self, app_initial_activity):
        """Sets the app_initial_activity of this AndroidRoboTest.

        The initial activity that should be used to start the app.

        :param app_initial_activity: The app_initial_activity of this AndroidRoboTest.
        :type app_initial_activity: str
        """

        self._app_initial_activity = app_initial_activity

    @property
    def app_package_id(self):
        """Gets the app_package_id of this AndroidRoboTest.

        The java package for the application under test. The default value is determined by examining the application's manifest.

        :return: The app_package_id of this AndroidRoboTest.
        :rtype: str
        """
        return self._app_package_id

    @app_package_id.setter
    def app_package_id(self, app_package_id):
        """Sets the app_package_id of this AndroidRoboTest.

        The java package for the application under test. The default value is determined by examining the application's manifest.

        :param app_package_id: The app_package_id of this AndroidRoboTest.
        :type app_package_id: str
        """

        self._app_package_id = app_package_id

    @property
    def max_depth(self):
        """Gets the max_depth of this AndroidRoboTest.

        The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.

        :return: The max_depth of this AndroidRoboTest.
        :rtype: int
        """
        return self._max_depth

    @max_depth.setter
    def max_depth(self, max_depth):
        """Sets the max_depth of this AndroidRoboTest.

        The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.

        :param max_depth: The max_depth of this AndroidRoboTest.
        :type max_depth: int
        """

        self._max_depth = max_depth

    @property
    def max_steps(self):
        """Gets the max_steps of this AndroidRoboTest.

        The max number of steps Robo can execute. Default is no limit.

        :return: The max_steps of this AndroidRoboTest.
        :rtype: int
        """
        return self._max_steps

    @max_steps.setter
    def max_steps(self, max_steps):
        """Sets the max_steps of this AndroidRoboTest.

        The max number of steps Robo can execute. Default is no limit.

        :param max_steps: The max_steps of this AndroidRoboTest.
        :type max_steps: int
        """

        self._max_steps = max_steps

    @property
    def robo_directives(self):
        """Gets the robo_directives of this AndroidRoboTest.

        A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.

        :return: The robo_directives of this AndroidRoboTest.
        :rtype: List[RoboDirective]
        """
        return self._robo_directives

    @robo_directives.setter
    def robo_directives(self, robo_directives):
        """Sets the robo_directives of this AndroidRoboTest.

        A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.

        :param robo_directives: The robo_directives of this AndroidRoboTest.
        :type robo_directives: List[RoboDirective]
        """

        self._robo_directives = robo_directives

    @property
    def robo_mode(self):
        """Gets the robo_mode of this AndroidRoboTest.

        The mode in which Robo should run. Most clients should allow the server to populate this field automatically.

        :return: The robo_mode of this AndroidRoboTest.
        :rtype: str
        """
        return self._robo_mode

    @robo_mode.setter
    def robo_mode(self, robo_mode):
        """Sets the robo_mode of this AndroidRoboTest.

        The mode in which Robo should run. Most clients should allow the server to populate this field automatically.

        :param robo_mode: The robo_mode of this AndroidRoboTest.
        :type robo_mode: str
        """
        allowed_values = ["ROBO_MODE_UNSPECIFIED", "ROBO_VERSION_1", "ROBO_VERSION_2"]  # noqa: E501
        if robo_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `robo_mode` ({0}), must be one of {1}"
                .format(robo_mode, allowed_values)
            )

        self._robo_mode = robo_mode

    @property
    def robo_script(self):
        """Gets the robo_script of this AndroidRoboTest.


        :return: The robo_script of this AndroidRoboTest.
        :rtype: FileReference
        """
        return self._robo_script

    @robo_script.setter
    def robo_script(self, robo_script):
        """Sets the robo_script of this AndroidRoboTest.


        :param robo_script: The robo_script of this AndroidRoboTest.
        :type robo_script: FileReference
        """

        self._robo_script = robo_script

    @property
    def starting_intents(self):
        """Gets the starting_intents of this AndroidRoboTest.

        The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).

        :return: The starting_intents of this AndroidRoboTest.
        :rtype: List[RoboStartingIntent]
        """
        return self._starting_intents

    @starting_intents.setter
    def starting_intents(self, starting_intents):
        """Sets the starting_intents of this AndroidRoboTest.

        The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).

        :param starting_intents: The starting_intents of this AndroidRoboTest.
        :type starting_intents: List[RoboStartingIntent]
        """

        self._starting_intents = starting_intents
