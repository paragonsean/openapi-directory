# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoboDirective(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, input_text: str=None, resource_name: str=None):
        """RoboDirective - a model defined in OpenAPI

        :param action_type: The action_type of this RoboDirective.
        :param input_text: The input_text of this RoboDirective.
        :param resource_name: The resource_name of this RoboDirective.
        """
        self.openapi_types = {
            'action_type': str,
            'input_text': str,
            'resource_name': str
        }

        self.attribute_map = {
            'action_type': 'actionType',
            'input_text': 'inputText',
            'resource_name': 'resourceName'
        }

        self._action_type = action_type
        self._input_text = input_text
        self._resource_name = resource_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoboDirective':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoboDirective of this RoboDirective.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this RoboDirective.

        Required. The type of action that Robo should perform on the specified element.

        :return: The action_type of this RoboDirective.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this RoboDirective.

        Required. The type of action that Robo should perform on the specified element.

        :param action_type: The action_type of this RoboDirective.
        :type action_type: str
        """
        allowed_values = ["ACTION_TYPE_UNSPECIFIED", "SINGLE_CLICK", "ENTER_TEXT", "IGNORE"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def input_text(self):
        """Gets the input_text of this RoboDirective.

        The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.

        :return: The input_text of this RoboDirective.
        :rtype: str
        """
        return self._input_text

    @input_text.setter
    def input_text(self, input_text):
        """Sets the input_text of this RoboDirective.

        The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.

        :param input_text: The input_text of this RoboDirective.
        :type input_text: str
        """

        self._input_text = input_text

    @property
    def resource_name(self):
        """Gets the resource_name of this RoboDirective.

        Required. The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the \"foo\" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html

        :return: The resource_name of this RoboDirective.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this RoboDirective.

        Required. The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the \"foo\" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html

        :param resource_name: The resource_name of this RoboDirective.
        :type resource_name: str
        """

        self._resource_name = resource_name
