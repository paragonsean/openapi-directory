# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_bundle import AppBundle
from openapi_server.models.file_reference import FileReference
from openapi_server.models.sharding_option import ShardingOption
from openapi_server import util


class AndroidInstrumentationTest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_apk: FileReference=None, app_bundle: AppBundle=None, app_package_id: str=None, orchestrator_option: str=None, sharding_option: ShardingOption=None, test_apk: FileReference=None, test_package_id: str=None, test_runner_class: str=None, test_targets: List[str]=None):
        """AndroidInstrumentationTest - a model defined in OpenAPI

        :param app_apk: The app_apk of this AndroidInstrumentationTest.
        :param app_bundle: The app_bundle of this AndroidInstrumentationTest.
        :param app_package_id: The app_package_id of this AndroidInstrumentationTest.
        :param orchestrator_option: The orchestrator_option of this AndroidInstrumentationTest.
        :param sharding_option: The sharding_option of this AndroidInstrumentationTest.
        :param test_apk: The test_apk of this AndroidInstrumentationTest.
        :param test_package_id: The test_package_id of this AndroidInstrumentationTest.
        :param test_runner_class: The test_runner_class of this AndroidInstrumentationTest.
        :param test_targets: The test_targets of this AndroidInstrumentationTest.
        """
        self.openapi_types = {
            'app_apk': FileReference,
            'app_bundle': AppBundle,
            'app_package_id': str,
            'orchestrator_option': str,
            'sharding_option': ShardingOption,
            'test_apk': FileReference,
            'test_package_id': str,
            'test_runner_class': str,
            'test_targets': List[str]
        }

        self.attribute_map = {
            'app_apk': 'appApk',
            'app_bundle': 'appBundle',
            'app_package_id': 'appPackageId',
            'orchestrator_option': 'orchestratorOption',
            'sharding_option': 'shardingOption',
            'test_apk': 'testApk',
            'test_package_id': 'testPackageId',
            'test_runner_class': 'testRunnerClass',
            'test_targets': 'testTargets'
        }

        self._app_apk = app_apk
        self._app_bundle = app_bundle
        self._app_package_id = app_package_id
        self._orchestrator_option = orchestrator_option
        self._sharding_option = sharding_option
        self._test_apk = test_apk
        self._test_package_id = test_package_id
        self._test_runner_class = test_runner_class
        self._test_targets = test_targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AndroidInstrumentationTest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AndroidInstrumentationTest of this AndroidInstrumentationTest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_apk(self):
        """Gets the app_apk of this AndroidInstrumentationTest.


        :return: The app_apk of this AndroidInstrumentationTest.
        :rtype: FileReference
        """
        return self._app_apk

    @app_apk.setter
    def app_apk(self, app_apk):
        """Sets the app_apk of this AndroidInstrumentationTest.


        :param app_apk: The app_apk of this AndroidInstrumentationTest.
        :type app_apk: FileReference
        """

        self._app_apk = app_apk

    @property
    def app_bundle(self):
        """Gets the app_bundle of this AndroidInstrumentationTest.


        :return: The app_bundle of this AndroidInstrumentationTest.
        :rtype: AppBundle
        """
        return self._app_bundle

    @app_bundle.setter
    def app_bundle(self, app_bundle):
        """Sets the app_bundle of this AndroidInstrumentationTest.


        :param app_bundle: The app_bundle of this AndroidInstrumentationTest.
        :type app_bundle: AppBundle
        """

        self._app_bundle = app_bundle

    @property
    def app_package_id(self):
        """Gets the app_package_id of this AndroidInstrumentationTest.

        The java package for the application under test. The default value is determined by examining the application's manifest.

        :return: The app_package_id of this AndroidInstrumentationTest.
        :rtype: str
        """
        return self._app_package_id

    @app_package_id.setter
    def app_package_id(self, app_package_id):
        """Sets the app_package_id of this AndroidInstrumentationTest.

        The java package for the application under test. The default value is determined by examining the application's manifest.

        :param app_package_id: The app_package_id of this AndroidInstrumentationTest.
        :type app_package_id: str
        """

        self._app_package_id = app_package_id

    @property
    def orchestrator_option(self):
        """Gets the orchestrator_option of this AndroidInstrumentationTest.

        The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.

        :return: The orchestrator_option of this AndroidInstrumentationTest.
        :rtype: str
        """
        return self._orchestrator_option

    @orchestrator_option.setter
    def orchestrator_option(self, orchestrator_option):
        """Sets the orchestrator_option of this AndroidInstrumentationTest.

        The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.

        :param orchestrator_option: The orchestrator_option of this AndroidInstrumentationTest.
        :type orchestrator_option: str
        """
        allowed_values = ["ORCHESTRATOR_OPTION_UNSPECIFIED", "USE_ORCHESTRATOR", "DO_NOT_USE_ORCHESTRATOR"]  # noqa: E501
        if orchestrator_option not in allowed_values:
            raise ValueError(
                "Invalid value for `orchestrator_option` ({0}), must be one of {1}"
                .format(orchestrator_option, allowed_values)
            )

        self._orchestrator_option = orchestrator_option

    @property
    def sharding_option(self):
        """Gets the sharding_option of this AndroidInstrumentationTest.


        :return: The sharding_option of this AndroidInstrumentationTest.
        :rtype: ShardingOption
        """
        return self._sharding_option

    @sharding_option.setter
    def sharding_option(self, sharding_option):
        """Sets the sharding_option of this AndroidInstrumentationTest.


        :param sharding_option: The sharding_option of this AndroidInstrumentationTest.
        :type sharding_option: ShardingOption
        """

        self._sharding_option = sharding_option

    @property
    def test_apk(self):
        """Gets the test_apk of this AndroidInstrumentationTest.


        :return: The test_apk of this AndroidInstrumentationTest.
        :rtype: FileReference
        """
        return self._test_apk

    @test_apk.setter
    def test_apk(self, test_apk):
        """Sets the test_apk of this AndroidInstrumentationTest.


        :param test_apk: The test_apk of this AndroidInstrumentationTest.
        :type test_apk: FileReference
        """

        self._test_apk = test_apk

    @property
    def test_package_id(self):
        """Gets the test_package_id of this AndroidInstrumentationTest.

        The java package for the test to be executed. The default value is determined by examining the application's manifest.

        :return: The test_package_id of this AndroidInstrumentationTest.
        :rtype: str
        """
        return self._test_package_id

    @test_package_id.setter
    def test_package_id(self, test_package_id):
        """Sets the test_package_id of this AndroidInstrumentationTest.

        The java package for the test to be executed. The default value is determined by examining the application's manifest.

        :param test_package_id: The test_package_id of this AndroidInstrumentationTest.
        :type test_package_id: str
        """

        self._test_package_id = test_package_id

    @property
    def test_runner_class(self):
        """Gets the test_runner_class of this AndroidInstrumentationTest.

        The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.

        :return: The test_runner_class of this AndroidInstrumentationTest.
        :rtype: str
        """
        return self._test_runner_class

    @test_runner_class.setter
    def test_runner_class(self, test_runner_class):
        """Sets the test_runner_class of this AndroidInstrumentationTest.

        The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.

        :param test_runner_class: The test_runner_class of this AndroidInstrumentationTest.
        :type test_runner_class: str
        """

        self._test_runner_class = test_runner_class

    @property
    def test_targets(self):
        """Gets the test_targets of this AndroidInstrumentationTest.

        Each target must be fully qualified with the package name or class name, in one of these formats: - \"package package_name\" - \"class package_name.class_name\" - \"class package_name.class_name#method_name\" If empty, all targets in the module will be run.

        :return: The test_targets of this AndroidInstrumentationTest.
        :rtype: List[str]
        """
        return self._test_targets

    @test_targets.setter
    def test_targets(self, test_targets):
        """Sets the test_targets of this AndroidInstrumentationTest.

        Each target must be fully qualified with the package name or class name, in one of these formats: - \"package package_name\" - \"class package_name.class_name\" - \"class package_name.class_name#method_name\" If empty, all targets in the module will be run.

        :param test_targets: The test_targets of this AndroidInstrumentationTest.
        :type test_targets: List[str]
        """

        self._test_targets = test_targets
