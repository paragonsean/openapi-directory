# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class DeviceIpBlock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_date: ModelDate=None, block: str=None, form: str=None):
        """DeviceIpBlock - a model defined in OpenAPI

        :param added_date: The added_date of this DeviceIpBlock.
        :param block: The block of this DeviceIpBlock.
        :param form: The form of this DeviceIpBlock.
        """
        self.openapi_types = {
            'added_date': ModelDate,
            'block': str,
            'form': str
        }

        self.attribute_map = {
            'added_date': 'addedDate',
            'block': 'block',
            'form': 'form'
        }

        self._added_date = added_date
        self._block = block
        self._form = form

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceIpBlock':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceIpBlock of this DeviceIpBlock.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_date(self):
        """Gets the added_date of this DeviceIpBlock.


        :return: The added_date of this DeviceIpBlock.
        :rtype: ModelDate
        """
        return self._added_date

    @added_date.setter
    def added_date(self, added_date):
        """Sets the added_date of this DeviceIpBlock.


        :param added_date: The added_date of this DeviceIpBlock.
        :type added_date: ModelDate
        """

        self._added_date = added_date

    @property
    def block(self):
        """Gets the block of this DeviceIpBlock.

        An IP address block in CIDR notation eg: 34.68.194.64/29

        :return: The block of this DeviceIpBlock.
        :rtype: str
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this DeviceIpBlock.

        An IP address block in CIDR notation eg: 34.68.194.64/29

        :param block: The block of this DeviceIpBlock.
        :type block: str
        """

        self._block = block

    @property
    def form(self):
        """Gets the form of this DeviceIpBlock.

        Whether this block is used by physical or virtual devices

        :return: The form of this DeviceIpBlock.
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this DeviceIpBlock.

        Whether this block is used by physical or virtual devices

        :param form: The form of this DeviceIpBlock.
        :type form: str
        """
        allowed_values = ["DEVICE_FORM_UNSPECIFIED", "VIRTUAL", "PHYSICAL", "EMULATOR"]  # noqa: E501
        if form not in allowed_values:
            raise ValueError(
                "Invalid value for `form` ({0}), must be one of {1}"
                .format(form, allowed_values)
            )

        self._form = form
