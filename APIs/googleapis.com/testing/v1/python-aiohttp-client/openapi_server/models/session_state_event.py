# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionStateEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_time: str=None, session_state: str=None, state_message: str=None):
        """SessionStateEvent - a model defined in OpenAPI

        :param event_time: The event_time of this SessionStateEvent.
        :param session_state: The session_state of this SessionStateEvent.
        :param state_message: The state_message of this SessionStateEvent.
        """
        self.openapi_types = {
            'event_time': str,
            'session_state': str,
            'state_message': str
        }

        self.attribute_map = {
            'event_time': 'eventTime',
            'session_state': 'sessionState',
            'state_message': 'stateMessage'
        }

        self._event_time = event_time
        self._session_state = session_state
        self._state_message = state_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionStateEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionStateEvent of this SessionStateEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_time(self):
        """Gets the event_time of this SessionStateEvent.

        Output only. The time that the session_state first encountered that state.

        :return: The event_time of this SessionStateEvent.
        :rtype: str
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this SessionStateEvent.

        Output only. The time that the session_state first encountered that state.

        :param event_time: The event_time of this SessionStateEvent.
        :type event_time: str
        """

        self._event_time = event_time

    @property
    def session_state(self):
        """Gets the session_state of this SessionStateEvent.

        Output only. The session_state tracked by this event

        :return: The session_state of this SessionStateEvent.
        :rtype: str
        """
        return self._session_state

    @session_state.setter
    def session_state(self, session_state):
        """Sets the session_state of this SessionStateEvent.

        Output only. The session_state tracked by this event

        :param session_state: The session_state of this SessionStateEvent.
        :type session_state: str
        """
        allowed_values = ["SESSION_STATE_UNSPECIFIED", "REQUESTED", "PENDING", "ACTIVE", "EXPIRED", "FINISHED", "UNAVAILABLE", "ERROR"]  # noqa: E501
        if session_state not in allowed_values:
            raise ValueError(
                "Invalid value for `session_state` ({0}), must be one of {1}"
                .format(session_state, allowed_values)
            )

        self._session_state = session_state

    @property
    def state_message(self):
        """Gets the state_message of this SessionStateEvent.

        Output only. A human-readable message to explain the state.

        :return: The state_message of this SessionStateEvent.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this SessionStateEvent.

        Output only. A human-readable message to explain the state.

        :param state_message: The state_message of this SessionStateEvent.
        :type state_message: str
        """

        self._state_message = state_message
