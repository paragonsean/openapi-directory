# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.apk import Apk
from openapi_server.models.device_file import DeviceFile
from openapi_server.models.environment_variable import EnvironmentVariable
from openapi_server.models.systrace_setup import SystraceSetup
from openapi_server import util


class TestSetup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: Account=None, additional_apks: List[Apk]=None, directories_to_pull: List[str]=None, dont_autogrant_permissions: bool=None, environment_variables: List[EnvironmentVariable]=None, files_to_push: List[DeviceFile]=None, initial_setup_apks: List[Apk]=None, network_profile: str=None, systrace: SystraceSetup=None):
        """TestSetup - a model defined in OpenAPI

        :param account: The account of this TestSetup.
        :param additional_apks: The additional_apks of this TestSetup.
        :param directories_to_pull: The directories_to_pull of this TestSetup.
        :param dont_autogrant_permissions: The dont_autogrant_permissions of this TestSetup.
        :param environment_variables: The environment_variables of this TestSetup.
        :param files_to_push: The files_to_push of this TestSetup.
        :param initial_setup_apks: The initial_setup_apks of this TestSetup.
        :param network_profile: The network_profile of this TestSetup.
        :param systrace: The systrace of this TestSetup.
        """
        self.openapi_types = {
            'account': Account,
            'additional_apks': List[Apk],
            'directories_to_pull': List[str],
            'dont_autogrant_permissions': bool,
            'environment_variables': List[EnvironmentVariable],
            'files_to_push': List[DeviceFile],
            'initial_setup_apks': List[Apk],
            'network_profile': str,
            'systrace': SystraceSetup
        }

        self.attribute_map = {
            'account': 'account',
            'additional_apks': 'additionalApks',
            'directories_to_pull': 'directoriesToPull',
            'dont_autogrant_permissions': 'dontAutograntPermissions',
            'environment_variables': 'environmentVariables',
            'files_to_push': 'filesToPush',
            'initial_setup_apks': 'initialSetupApks',
            'network_profile': 'networkProfile',
            'systrace': 'systrace'
        }

        self._account = account
        self._additional_apks = additional_apks
        self._directories_to_pull = directories_to_pull
        self._dont_autogrant_permissions = dont_autogrant_permissions
        self._environment_variables = environment_variables
        self._files_to_push = files_to_push
        self._initial_setup_apks = initial_setup_apks
        self._network_profile = network_profile
        self._systrace = systrace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestSetup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestSetup of this TestSetup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this TestSetup.


        :return: The account of this TestSetup.
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this TestSetup.


        :param account: The account of this TestSetup.
        :type account: Account
        """

        self._account = account

    @property
    def additional_apks(self):
        """Gets the additional_apks of this TestSetup.

        APKs to install in addition to those being directly tested. These will be installed after the app under test. Currently capped at 100.

        :return: The additional_apks of this TestSetup.
        :rtype: List[Apk]
        """
        return self._additional_apks

    @additional_apks.setter
    def additional_apks(self, additional_apks):
        """Sets the additional_apks of this TestSetup.

        APKs to install in addition to those being directly tested. These will be installed after the app under test. Currently capped at 100.

        :param additional_apks: The additional_apks of this TestSetup.
        :type additional_apks: List[Apk]
        """

        self._additional_apks = additional_apks

    @property
    def directories_to_pull(self):
        """Gets the directories_to_pull of this TestSetup.

        List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.

        :return: The directories_to_pull of this TestSetup.
        :rtype: List[str]
        """
        return self._directories_to_pull

    @directories_to_pull.setter
    def directories_to_pull(self, directories_to_pull):
        """Sets the directories_to_pull of this TestSetup.

        List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.

        :param directories_to_pull: The directories_to_pull of this TestSetup.
        :type directories_to_pull: List[str]
        """

        self._directories_to_pull = directories_to_pull

    @property
    def dont_autogrant_permissions(self):
        """Gets the dont_autogrant_permissions of this TestSetup.

        Whether to prevent all runtime permissions to be granted at app install

        :return: The dont_autogrant_permissions of this TestSetup.
        :rtype: bool
        """
        return self._dont_autogrant_permissions

    @dont_autogrant_permissions.setter
    def dont_autogrant_permissions(self, dont_autogrant_permissions):
        """Sets the dont_autogrant_permissions of this TestSetup.

        Whether to prevent all runtime permissions to be granted at app install

        :param dont_autogrant_permissions: The dont_autogrant_permissions of this TestSetup.
        :type dont_autogrant_permissions: bool
        """

        self._dont_autogrant_permissions = dont_autogrant_permissions

    @property
    def environment_variables(self):
        """Gets the environment_variables of this TestSetup.

        Environment variables to set for the test (only applicable for instrumentation tests).

        :return: The environment_variables of this TestSetup.
        :rtype: List[EnvironmentVariable]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this TestSetup.

        Environment variables to set for the test (only applicable for instrumentation tests).

        :param environment_variables: The environment_variables of this TestSetup.
        :type environment_variables: List[EnvironmentVariable]
        """

        self._environment_variables = environment_variables

    @property
    def files_to_push(self):
        """Gets the files_to_push of this TestSetup.

        List of files to push to the device before starting the test.

        :return: The files_to_push of this TestSetup.
        :rtype: List[DeviceFile]
        """
        return self._files_to_push

    @files_to_push.setter
    def files_to_push(self, files_to_push):
        """Sets the files_to_push of this TestSetup.

        List of files to push to the device before starting the test.

        :param files_to_push: The files_to_push of this TestSetup.
        :type files_to_push: List[DeviceFile]
        """

        self._files_to_push = files_to_push

    @property
    def initial_setup_apks(self):
        """Gets the initial_setup_apks of this TestSetup.

        Optional. Initial setup APKs to install before the app under test is installed. Currently capped at 100.

        :return: The initial_setup_apks of this TestSetup.
        :rtype: List[Apk]
        """
        return self._initial_setup_apks

    @initial_setup_apks.setter
    def initial_setup_apks(self, initial_setup_apks):
        """Sets the initial_setup_apks of this TestSetup.

        Optional. Initial setup APKs to install before the app under test is installed. Currently capped at 100.

        :param initial_setup_apks: The initial_setup_apks of this TestSetup.
        :type initial_setup_apks: List[Apk]
        """

        self._initial_setup_apks = initial_setup_apks

    @property
    def network_profile(self):
        """Gets the network_profile of this TestSetup.

        The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.

        :return: The network_profile of this TestSetup.
        :rtype: str
        """
        return self._network_profile

    @network_profile.setter
    def network_profile(self, network_profile):
        """Sets the network_profile of this TestSetup.

        The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.

        :param network_profile: The network_profile of this TestSetup.
        :type network_profile: str
        """

        self._network_profile = network_profile

    @property
    def systrace(self):
        """Gets the systrace of this TestSetup.


        :return: The systrace of this TestSetup.
        :rtype: SystraceSetup
        """
        return self._systrace

    @systrace.setter
    def systrace(self, systrace):
        """Sets the systrace of this TestSetup.


        :param systrace: The systrace of this TestSetup.
        :type systrace: SystraceSetup
        """

        self._systrace = systrace
