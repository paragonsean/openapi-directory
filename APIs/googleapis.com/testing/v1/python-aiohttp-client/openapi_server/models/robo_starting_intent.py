# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_activity_intent import StartActivityIntent
from openapi_server import util


class RoboStartingIntent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, launcher_activity: object=None, no_activity: object=None, start_activity: StartActivityIntent=None, timeout: str=None):
        """RoboStartingIntent - a model defined in OpenAPI

        :param launcher_activity: The launcher_activity of this RoboStartingIntent.
        :param no_activity: The no_activity of this RoboStartingIntent.
        :param start_activity: The start_activity of this RoboStartingIntent.
        :param timeout: The timeout of this RoboStartingIntent.
        """
        self.openapi_types = {
            'launcher_activity': object,
            'no_activity': object,
            'start_activity': StartActivityIntent,
            'timeout': str
        }

        self.attribute_map = {
            'launcher_activity': 'launcherActivity',
            'no_activity': 'noActivity',
            'start_activity': 'startActivity',
            'timeout': 'timeout'
        }

        self._launcher_activity = launcher_activity
        self._no_activity = no_activity
        self._start_activity = start_activity
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoboStartingIntent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoboStartingIntent of this RoboStartingIntent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def launcher_activity(self):
        """Gets the launcher_activity of this RoboStartingIntent.

        Specifies an intent that starts the main launcher activity.

        :return: The launcher_activity of this RoboStartingIntent.
        :rtype: object
        """
        return self._launcher_activity

    @launcher_activity.setter
    def launcher_activity(self, launcher_activity):
        """Sets the launcher_activity of this RoboStartingIntent.

        Specifies an intent that starts the main launcher activity.

        :param launcher_activity: The launcher_activity of this RoboStartingIntent.
        :type launcher_activity: object
        """

        self._launcher_activity = launcher_activity

    @property
    def no_activity(self):
        """Gets the no_activity of this RoboStartingIntent.

        Skips the starting activity

        :return: The no_activity of this RoboStartingIntent.
        :rtype: object
        """
        return self._no_activity

    @no_activity.setter
    def no_activity(self, no_activity):
        """Sets the no_activity of this RoboStartingIntent.

        Skips the starting activity

        :param no_activity: The no_activity of this RoboStartingIntent.
        :type no_activity: object
        """

        self._no_activity = no_activity

    @property
    def start_activity(self):
        """Gets the start_activity of this RoboStartingIntent.


        :return: The start_activity of this RoboStartingIntent.
        :rtype: StartActivityIntent
        """
        return self._start_activity

    @start_activity.setter
    def start_activity(self, start_activity):
        """Sets the start_activity of this RoboStartingIntent.


        :param start_activity: The start_activity of this RoboStartingIntent.
        :type start_activity: StartActivityIntent
        """

        self._start_activity = start_activity

    @property
    def timeout(self):
        """Gets the timeout of this RoboStartingIntent.

        Timeout in seconds for each intent.

        :return: The timeout of this RoboStartingIntent.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this RoboStartingIntent.

        Timeout in seconds for each intent.

        :param timeout: The timeout of this RoboStartingIntent.
        :type timeout: str
        """

        self._timeout = timeout
