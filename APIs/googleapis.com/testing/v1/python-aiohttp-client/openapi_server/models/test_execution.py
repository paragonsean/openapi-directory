# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment import Environment
from openapi_server.models.shard import Shard
from openapi_server.models.test_details import TestDetails
from openapi_server.models.test_specification import TestSpecification
from openapi_server.models.tool_results_step import ToolResultsStep
from openapi_server import util


class TestExecution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment: Environment=None, id: str=None, matrix_id: str=None, project_id: str=None, shard: Shard=None, state: str=None, test_details: TestDetails=None, test_specification: TestSpecification=None, timestamp: str=None, tool_results_step: ToolResultsStep=None):
        """TestExecution - a model defined in OpenAPI

        :param environment: The environment of this TestExecution.
        :param id: The id of this TestExecution.
        :param matrix_id: The matrix_id of this TestExecution.
        :param project_id: The project_id of this TestExecution.
        :param shard: The shard of this TestExecution.
        :param state: The state of this TestExecution.
        :param test_details: The test_details of this TestExecution.
        :param test_specification: The test_specification of this TestExecution.
        :param timestamp: The timestamp of this TestExecution.
        :param tool_results_step: The tool_results_step of this TestExecution.
        """
        self.openapi_types = {
            'environment': Environment,
            'id': str,
            'matrix_id': str,
            'project_id': str,
            'shard': Shard,
            'state': str,
            'test_details': TestDetails,
            'test_specification': TestSpecification,
            'timestamp': str,
            'tool_results_step': ToolResultsStep
        }

        self.attribute_map = {
            'environment': 'environment',
            'id': 'id',
            'matrix_id': 'matrixId',
            'project_id': 'projectId',
            'shard': 'shard',
            'state': 'state',
            'test_details': 'testDetails',
            'test_specification': 'testSpecification',
            'timestamp': 'timestamp',
            'tool_results_step': 'toolResultsStep'
        }

        self._environment = environment
        self._id = id
        self._matrix_id = matrix_id
        self._project_id = project_id
        self._shard = shard
        self._state = state
        self._test_details = test_details
        self._test_specification = test_specification
        self._timestamp = timestamp
        self._tool_results_step = tool_results_step

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestExecution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestExecution of this TestExecution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment(self):
        """Gets the environment of this TestExecution.


        :return: The environment of this TestExecution.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this TestExecution.


        :param environment: The environment of this TestExecution.
        :type environment: Environment
        """

        self._environment = environment

    @property
    def id(self):
        """Gets the id of this TestExecution.

        Output only. Unique id set by the service.

        :return: The id of this TestExecution.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestExecution.

        Output only. Unique id set by the service.

        :param id: The id of this TestExecution.
        :type id: str
        """

        self._id = id

    @property
    def matrix_id(self):
        """Gets the matrix_id of this TestExecution.

        Output only. Id of the containing TestMatrix.

        :return: The matrix_id of this TestExecution.
        :rtype: str
        """
        return self._matrix_id

    @matrix_id.setter
    def matrix_id(self, matrix_id):
        """Sets the matrix_id of this TestExecution.

        Output only. Id of the containing TestMatrix.

        :param matrix_id: The matrix_id of this TestExecution.
        :type matrix_id: str
        """

        self._matrix_id = matrix_id

    @property
    def project_id(self):
        """Gets the project_id of this TestExecution.

        Output only. The cloud project that owns the test execution.

        :return: The project_id of this TestExecution.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TestExecution.

        Output only. The cloud project that owns the test execution.

        :param project_id: The project_id of this TestExecution.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def shard(self):
        """Gets the shard of this TestExecution.


        :return: The shard of this TestExecution.
        :rtype: Shard
        """
        return self._shard

    @shard.setter
    def shard(self, shard):
        """Sets the shard of this TestExecution.


        :param shard: The shard of this TestExecution.
        :type shard: Shard
        """

        self._shard = shard

    @property
    def state(self):
        """Gets the state of this TestExecution.

        Output only. Indicates the current progress of the test execution (e.g., FINISHED).

        :return: The state of this TestExecution.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TestExecution.

        Output only. Indicates the current progress of the test execution (e.g., FINISHED).

        :param state: The state of this TestExecution.
        :type state: str
        """
        allowed_values = ["TEST_STATE_UNSPECIFIED", "VALIDATING", "PENDING", "RUNNING", "FINISHED", "ERROR", "UNSUPPORTED_ENVIRONMENT", "INCOMPATIBLE_ENVIRONMENT", "INCOMPATIBLE_ARCHITECTURE", "CANCELLED", "INVALID"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def test_details(self):
        """Gets the test_details of this TestExecution.


        :return: The test_details of this TestExecution.
        :rtype: TestDetails
        """
        return self._test_details

    @test_details.setter
    def test_details(self, test_details):
        """Sets the test_details of this TestExecution.


        :param test_details: The test_details of this TestExecution.
        :type test_details: TestDetails
        """

        self._test_details = test_details

    @property
    def test_specification(self):
        """Gets the test_specification of this TestExecution.


        :return: The test_specification of this TestExecution.
        :rtype: TestSpecification
        """
        return self._test_specification

    @test_specification.setter
    def test_specification(self, test_specification):
        """Sets the test_specification of this TestExecution.


        :param test_specification: The test_specification of this TestExecution.
        :type test_specification: TestSpecification
        """

        self._test_specification = test_specification

    @property
    def timestamp(self):
        """Gets the timestamp of this TestExecution.

        Output only. The time this test execution was initially created.

        :return: The timestamp of this TestExecution.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TestExecution.

        Output only. The time this test execution was initially created.

        :param timestamp: The timestamp of this TestExecution.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def tool_results_step(self):
        """Gets the tool_results_step of this TestExecution.


        :return: The tool_results_step of this TestExecution.
        :rtype: ToolResultsStep
        """
        return self._tool_results_step

    @tool_results_step.setter
    def tool_results_step(self, tool_results_step):
        """Sets the tool_results_step of this TestExecution.


        :param tool_results_step: The tool_results_step of this TestExecution.
        :type tool_results_step: ToolResultsStep
        """

        self._tool_results_step = tool_results_step
