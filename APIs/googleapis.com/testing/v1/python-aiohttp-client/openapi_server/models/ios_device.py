# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IosDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ios_model_id: str=None, ios_version_id: str=None, locale: str=None, orientation: str=None):
        """IosDevice - a model defined in OpenAPI

        :param ios_model_id: The ios_model_id of this IosDevice.
        :param ios_version_id: The ios_version_id of this IosDevice.
        :param locale: The locale of this IosDevice.
        :param orientation: The orientation of this IosDevice.
        """
        self.openapi_types = {
            'ios_model_id': str,
            'ios_version_id': str,
            'locale': str,
            'orientation': str
        }

        self.attribute_map = {
            'ios_model_id': 'iosModelId',
            'ios_version_id': 'iosVersionId',
            'locale': 'locale',
            'orientation': 'orientation'
        }

        self._ios_model_id = ios_model_id
        self._ios_version_id = ios_version_id
        self._locale = locale
        self._orientation = orientation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IosDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IosDevice of this IosDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ios_model_id(self):
        """Gets the ios_model_id of this IosDevice.

        Required. The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.

        :return: The ios_model_id of this IosDevice.
        :rtype: str
        """
        return self._ios_model_id

    @ios_model_id.setter
    def ios_model_id(self, ios_model_id):
        """Sets the ios_model_id of this IosDevice.

        Required. The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.

        :param ios_model_id: The ios_model_id of this IosDevice.
        :type ios_model_id: str
        """

        self._ios_model_id = ios_model_id

    @property
    def ios_version_id(self):
        """Gets the ios_version_id of this IosDevice.

        Required. The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.

        :return: The ios_version_id of this IosDevice.
        :rtype: str
        """
        return self._ios_version_id

    @ios_version_id.setter
    def ios_version_id(self, ios_version_id):
        """Sets the ios_version_id of this IosDevice.

        Required. The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.

        :param ios_version_id: The ios_version_id of this IosDevice.
        :type ios_version_id: str
        """

        self._ios_version_id = ios_version_id

    @property
    def locale(self):
        """Gets the locale of this IosDevice.

        Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.

        :return: The locale of this IosDevice.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this IosDevice.

        Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.

        :param locale: The locale of this IosDevice.
        :type locale: str
        """

        self._locale = locale

    @property
    def orientation(self):
        """Gets the orientation of this IosDevice.

        Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.

        :return: The orientation of this IosDevice.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this IosDevice.

        Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.

        :param orientation: The orientation of this IosDevice.
        :type orientation: str
        """

        self._orientation = orientation
