# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.manual_sharding import ManualSharding
from openapi_server.models.smart_sharding import SmartSharding
from openapi_server.models.uniform_sharding import UniformSharding
from openapi_server import util


class ShardingOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, manual_sharding: ManualSharding=None, smart_sharding: SmartSharding=None, uniform_sharding: UniformSharding=None):
        """ShardingOption - a model defined in OpenAPI

        :param manual_sharding: The manual_sharding of this ShardingOption.
        :param smart_sharding: The smart_sharding of this ShardingOption.
        :param uniform_sharding: The uniform_sharding of this ShardingOption.
        """
        self.openapi_types = {
            'manual_sharding': ManualSharding,
            'smart_sharding': SmartSharding,
            'uniform_sharding': UniformSharding
        }

        self.attribute_map = {
            'manual_sharding': 'manualSharding',
            'smart_sharding': 'smartSharding',
            'uniform_sharding': 'uniformSharding'
        }

        self._manual_sharding = manual_sharding
        self._smart_sharding = smart_sharding
        self._uniform_sharding = uniform_sharding

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShardingOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShardingOption of this ShardingOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def manual_sharding(self):
        """Gets the manual_sharding of this ShardingOption.


        :return: The manual_sharding of this ShardingOption.
        :rtype: ManualSharding
        """
        return self._manual_sharding

    @manual_sharding.setter
    def manual_sharding(self, manual_sharding):
        """Sets the manual_sharding of this ShardingOption.


        :param manual_sharding: The manual_sharding of this ShardingOption.
        :type manual_sharding: ManualSharding
        """

        self._manual_sharding = manual_sharding

    @property
    def smart_sharding(self):
        """Gets the smart_sharding of this ShardingOption.


        :return: The smart_sharding of this ShardingOption.
        :rtype: SmartSharding
        """
        return self._smart_sharding

    @smart_sharding.setter
    def smart_sharding(self, smart_sharding):
        """Sets the smart_sharding of this ShardingOption.


        :param smart_sharding: The smart_sharding of this ShardingOption.
        :type smart_sharding: SmartSharding
        """

        self._smart_sharding = smart_sharding

    @property
    def uniform_sharding(self):
        """Gets the uniform_sharding of this ShardingOption.


        :return: The uniform_sharding of this ShardingOption.
        :rtype: UniformSharding
        """
        return self._uniform_sharding

    @uniform_sharding.setter
    def uniform_sharding(self, uniform_sharding):
        """Sets the uniform_sharding of this ShardingOption.


        :param uniform_sharding: The uniform_sharding of this ShardingOption.
        :type uniform_sharding: UniformSharding
        """

        self._uniform_sharding = uniform_sharding
