# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CancelTestMatrixResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, test_state: str=None):
        """CancelTestMatrixResponse - a model defined in OpenAPI

        :param test_state: The test_state of this CancelTestMatrixResponse.
        """
        self.openapi_types = {
            'test_state': str
        }

        self.attribute_map = {
            'test_state': 'testState'
        }

        self._test_state = test_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelTestMatrixResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelTestMatrixResponse of this CancelTestMatrixResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def test_state(self):
        """Gets the test_state of this CancelTestMatrixResponse.

        The current rolled-up state of the test matrix. If this state is already final, then the cancelation request will have no effect.

        :return: The test_state of this CancelTestMatrixResponse.
        :rtype: str
        """
        return self._test_state

    @test_state.setter
    def test_state(self, test_state):
        """Sets the test_state of this CancelTestMatrixResponse.

        The current rolled-up state of the test matrix. If this state is already final, then the cancelation request will have no effect.

        :param test_state: The test_state of this CancelTestMatrixResponse.
        :type test_state: str
        """
        allowed_values = ["TEST_STATE_UNSPECIFIED", "VALIDATING", "PENDING", "RUNNING", "FINISHED", "ERROR", "UNSUPPORTED_ENVIRONMENT", "INCOMPATIBLE_ENVIRONMENT", "INCOMPATIBLE_ARCHITECTURE", "CANCELLED", "INVALID"]  # noqa: E501
        if test_state not in allowed_values:
            raise ValueError(
                "Invalid value for `test_state` ({0}), must be one of {1}"
                .format(test_state, allowed_values)
            )

        self._test_state = test_state
