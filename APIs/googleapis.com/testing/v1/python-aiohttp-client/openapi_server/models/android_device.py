# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AndroidDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android_model_id: str=None, android_version_id: str=None, locale: str=None, orientation: str=None):
        """AndroidDevice - a model defined in OpenAPI

        :param android_model_id: The android_model_id of this AndroidDevice.
        :param android_version_id: The android_version_id of this AndroidDevice.
        :param locale: The locale of this AndroidDevice.
        :param orientation: The orientation of this AndroidDevice.
        """
        self.openapi_types = {
            'android_model_id': str,
            'android_version_id': str,
            'locale': str,
            'orientation': str
        }

        self.attribute_map = {
            'android_model_id': 'androidModelId',
            'android_version_id': 'androidVersionId',
            'locale': 'locale',
            'orientation': 'orientation'
        }

        self._android_model_id = android_model_id
        self._android_version_id = android_version_id
        self._locale = locale
        self._orientation = orientation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AndroidDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AndroidDevice of this AndroidDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android_model_id(self):
        """Gets the android_model_id of this AndroidDevice.

        Required. The id of the Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.

        :return: The android_model_id of this AndroidDevice.
        :rtype: str
        """
        return self._android_model_id

    @android_model_id.setter
    def android_model_id(self, android_model_id):
        """Sets the android_model_id of this AndroidDevice.

        Required. The id of the Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.

        :param android_model_id: The android_model_id of this AndroidDevice.
        :type android_model_id: str
        """

        self._android_model_id = android_model_id

    @property
    def android_version_id(self):
        """Gets the android_version_id of this AndroidDevice.

        Required. The id of the Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.

        :return: The android_version_id of this AndroidDevice.
        :rtype: str
        """
        return self._android_version_id

    @android_version_id.setter
    def android_version_id(self, android_version_id):
        """Sets the android_version_id of this AndroidDevice.

        Required. The id of the Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.

        :param android_version_id: The android_version_id of this AndroidDevice.
        :type android_version_id: str
        """

        self._android_version_id = android_version_id

    @property
    def locale(self):
        """Gets the locale of this AndroidDevice.

        Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.

        :return: The locale of this AndroidDevice.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this AndroidDevice.

        Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.

        :param locale: The locale of this AndroidDevice.
        :type locale: str
        """

        self._locale = locale

    @property
    def orientation(self):
        """Gets the orientation of this AndroidDevice.

        Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.

        :return: The orientation of this AndroidDevice.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this AndroidDevice.

        Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.

        :param orientation: The orientation of this AndroidDevice.
        :type orientation: str
        """

        self._orientation = orientation
