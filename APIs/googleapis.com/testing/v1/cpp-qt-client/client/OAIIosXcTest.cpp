/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIosXcTest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIosXcTest::OAIIosXcTest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIosXcTest::OAIIosXcTest() {
    this->initializeModel();
}

OAIIosXcTest::~OAIIosXcTest() {}

void OAIIosXcTest::initializeModel() {

    m_app_bundle_id_isSet = false;
    m_app_bundle_id_isValid = false;

    m_test_special_entitlements_isSet = false;
    m_test_special_entitlements_isValid = false;

    m_tests_zip_isSet = false;
    m_tests_zip_isValid = false;

    m_xcode_version_isSet = false;
    m_xcode_version_isValid = false;

    m_xctestrun_isSet = false;
    m_xctestrun_isValid = false;
}

void OAIIosXcTest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIosXcTest::fromJsonObject(QJsonObject json) {

    m_app_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_app_bundle_id, json[QString("appBundleId")]);
    m_app_bundle_id_isSet = !json[QString("appBundleId")].isNull() && m_app_bundle_id_isValid;

    m_test_special_entitlements_isValid = ::OpenAPI::fromJsonValue(m_test_special_entitlements, json[QString("testSpecialEntitlements")]);
    m_test_special_entitlements_isSet = !json[QString("testSpecialEntitlements")].isNull() && m_test_special_entitlements_isValid;

    m_tests_zip_isValid = ::OpenAPI::fromJsonValue(m_tests_zip, json[QString("testsZip")]);
    m_tests_zip_isSet = !json[QString("testsZip")].isNull() && m_tests_zip_isValid;

    m_xcode_version_isValid = ::OpenAPI::fromJsonValue(m_xcode_version, json[QString("xcodeVersion")]);
    m_xcode_version_isSet = !json[QString("xcodeVersion")].isNull() && m_xcode_version_isValid;

    m_xctestrun_isValid = ::OpenAPI::fromJsonValue(m_xctestrun, json[QString("xctestrun")]);
    m_xctestrun_isSet = !json[QString("xctestrun")].isNull() && m_xctestrun_isValid;
}

QString OAIIosXcTest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIosXcTest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_bundle_id_isSet) {
        obj.insert(QString("appBundleId"), ::OpenAPI::toJsonValue(m_app_bundle_id));
    }
    if (m_test_special_entitlements_isSet) {
        obj.insert(QString("testSpecialEntitlements"), ::OpenAPI::toJsonValue(m_test_special_entitlements));
    }
    if (m_tests_zip.isSet()) {
        obj.insert(QString("testsZip"), ::OpenAPI::toJsonValue(m_tests_zip));
    }
    if (m_xcode_version_isSet) {
        obj.insert(QString("xcodeVersion"), ::OpenAPI::toJsonValue(m_xcode_version));
    }
    if (m_xctestrun.isSet()) {
        obj.insert(QString("xctestrun"), ::OpenAPI::toJsonValue(m_xctestrun));
    }
    return obj;
}

QString OAIIosXcTest::getAppBundleId() const {
    return m_app_bundle_id;
}
void OAIIosXcTest::setAppBundleId(const QString &app_bundle_id) {
    m_app_bundle_id = app_bundle_id;
    m_app_bundle_id_isSet = true;
}

bool OAIIosXcTest::is_app_bundle_id_Set() const{
    return m_app_bundle_id_isSet;
}

bool OAIIosXcTest::is_app_bundle_id_Valid() const{
    return m_app_bundle_id_isValid;
}

bool OAIIosXcTest::isTestSpecialEntitlements() const {
    return m_test_special_entitlements;
}
void OAIIosXcTest::setTestSpecialEntitlements(const bool &test_special_entitlements) {
    m_test_special_entitlements = test_special_entitlements;
    m_test_special_entitlements_isSet = true;
}

bool OAIIosXcTest::is_test_special_entitlements_Set() const{
    return m_test_special_entitlements_isSet;
}

bool OAIIosXcTest::is_test_special_entitlements_Valid() const{
    return m_test_special_entitlements_isValid;
}

OAIFileReference OAIIosXcTest::getTestsZip() const {
    return m_tests_zip;
}
void OAIIosXcTest::setTestsZip(const OAIFileReference &tests_zip) {
    m_tests_zip = tests_zip;
    m_tests_zip_isSet = true;
}

bool OAIIosXcTest::is_tests_zip_Set() const{
    return m_tests_zip_isSet;
}

bool OAIIosXcTest::is_tests_zip_Valid() const{
    return m_tests_zip_isValid;
}

QString OAIIosXcTest::getXcodeVersion() const {
    return m_xcode_version;
}
void OAIIosXcTest::setXcodeVersion(const QString &xcode_version) {
    m_xcode_version = xcode_version;
    m_xcode_version_isSet = true;
}

bool OAIIosXcTest::is_xcode_version_Set() const{
    return m_xcode_version_isSet;
}

bool OAIIosXcTest::is_xcode_version_Valid() const{
    return m_xcode_version_isValid;
}

OAIFileReference OAIIosXcTest::getXctestrun() const {
    return m_xctestrun;
}
void OAIIosXcTest::setXctestrun(const OAIFileReference &xctestrun) {
    m_xctestrun = xctestrun;
    m_xctestrun_isSet = true;
}

bool OAIIosXcTest::is_xctestrun_Set() const{
    return m_xctestrun_isSet;
}

bool OAIIosXcTest::is_xctestrun_Valid() const{
    return m_xctestrun_isValid;
}

bool OAIIosXcTest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_special_entitlements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tests_zip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xcode_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xctestrun.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIosXcTest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
