/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIToolResultsExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIToolResultsExecution::OAIToolResultsExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIToolResultsExecution::OAIToolResultsExecution() {
    this->initializeModel();
}

OAIToolResultsExecution::~OAIToolResultsExecution() {}

void OAIToolResultsExecution::initializeModel() {

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_history_id_isSet = false;
    m_history_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;
}

void OAIToolResultsExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIToolResultsExecution::fromJsonObject(QJsonObject json) {

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("executionId")]);
    m_execution_id_isSet = !json[QString("executionId")].isNull() && m_execution_id_isValid;

    m_history_id_isValid = ::OpenAPI::fromJsonValue(m_history_id, json[QString("historyId")]);
    m_history_id_isSet = !json[QString("historyId")].isNull() && m_history_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;
}

QString OAIToolResultsExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIToolResultsExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_id_isSet) {
        obj.insert(QString("executionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_history_id_isSet) {
        obj.insert(QString("historyId"), ::OpenAPI::toJsonValue(m_history_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    return obj;
}

QString OAIToolResultsExecution::getExecutionId() const {
    return m_execution_id;
}
void OAIToolResultsExecution::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIToolResultsExecution::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIToolResultsExecution::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

QString OAIToolResultsExecution::getHistoryId() const {
    return m_history_id;
}
void OAIToolResultsExecution::setHistoryId(const QString &history_id) {
    m_history_id = history_id;
    m_history_id_isSet = true;
}

bool OAIToolResultsExecution::is_history_id_Set() const{
    return m_history_id_isSet;
}

bool OAIToolResultsExecution::is_history_id_Valid() const{
    return m_history_id_isValid;
}

QString OAIToolResultsExecution::getProjectId() const {
    return m_project_id;
}
void OAIToolResultsExecution::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIToolResultsExecution::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIToolResultsExecution::is_project_id_Valid() const{
    return m_project_id_isValid;
}

bool OAIToolResultsExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIToolResultsExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
