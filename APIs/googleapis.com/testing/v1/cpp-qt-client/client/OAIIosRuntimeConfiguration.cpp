/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIosRuntimeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIosRuntimeConfiguration::OAIIosRuntimeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIosRuntimeConfiguration::OAIIosRuntimeConfiguration() {
    this->initializeModel();
}

OAIIosRuntimeConfiguration::~OAIIosRuntimeConfiguration() {}

void OAIIosRuntimeConfiguration::initializeModel() {

    m_locales_isSet = false;
    m_locales_isValid = false;

    m_orientations_isSet = false;
    m_orientations_isValid = false;
}

void OAIIosRuntimeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIosRuntimeConfiguration::fromJsonObject(QJsonObject json) {

    m_locales_isValid = ::OpenAPI::fromJsonValue(m_locales, json[QString("locales")]);
    m_locales_isSet = !json[QString("locales")].isNull() && m_locales_isValid;

    m_orientations_isValid = ::OpenAPI::fromJsonValue(m_orientations, json[QString("orientations")]);
    m_orientations_isSet = !json[QString("orientations")].isNull() && m_orientations_isValid;
}

QString OAIIosRuntimeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIosRuntimeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_locales.size() > 0) {
        obj.insert(QString("locales"), ::OpenAPI::toJsonValue(m_locales));
    }
    if (m_orientations.size() > 0) {
        obj.insert(QString("orientations"), ::OpenAPI::toJsonValue(m_orientations));
    }
    return obj;
}

QList<OAILocale> OAIIosRuntimeConfiguration::getLocales() const {
    return m_locales;
}
void OAIIosRuntimeConfiguration::setLocales(const QList<OAILocale> &locales) {
    m_locales = locales;
    m_locales_isSet = true;
}

bool OAIIosRuntimeConfiguration::is_locales_Set() const{
    return m_locales_isSet;
}

bool OAIIosRuntimeConfiguration::is_locales_Valid() const{
    return m_locales_isValid;
}

QList<OAIOrientation> OAIIosRuntimeConfiguration::getOrientations() const {
    return m_orientations;
}
void OAIIosRuntimeConfiguration::setOrientations(const QList<OAIOrientation> &orientations) {
    m_orientations = orientations;
    m_orientations_isSet = true;
}

bool OAIIosRuntimeConfiguration::is_orientations_Set() const{
    return m_orientations_isSet;
}

bool OAIIosRuntimeConfiguration::is_orientations_Valid() const{
    return m_orientations_isValid;
}

bool OAIIosRuntimeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locales.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIosRuntimeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
