/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAndroidTestLoop.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAndroidTestLoop::OAIAndroidTestLoop(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAndroidTestLoop::OAIAndroidTestLoop() {
    this->initializeModel();
}

OAIAndroidTestLoop::~OAIAndroidTestLoop() {}

void OAIAndroidTestLoop::initializeModel() {

    m_app_apk_isSet = false;
    m_app_apk_isValid = false;

    m_app_bundle_isSet = false;
    m_app_bundle_isValid = false;

    m_app_package_id_isSet = false;
    m_app_package_id_isValid = false;

    m_scenario_labels_isSet = false;
    m_scenario_labels_isValid = false;

    m_scenarios_isSet = false;
    m_scenarios_isValid = false;
}

void OAIAndroidTestLoop::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAndroidTestLoop::fromJsonObject(QJsonObject json) {

    m_app_apk_isValid = ::OpenAPI::fromJsonValue(m_app_apk, json[QString("appApk")]);
    m_app_apk_isSet = !json[QString("appApk")].isNull() && m_app_apk_isValid;

    m_app_bundle_isValid = ::OpenAPI::fromJsonValue(m_app_bundle, json[QString("appBundle")]);
    m_app_bundle_isSet = !json[QString("appBundle")].isNull() && m_app_bundle_isValid;

    m_app_package_id_isValid = ::OpenAPI::fromJsonValue(m_app_package_id, json[QString("appPackageId")]);
    m_app_package_id_isSet = !json[QString("appPackageId")].isNull() && m_app_package_id_isValid;

    m_scenario_labels_isValid = ::OpenAPI::fromJsonValue(m_scenario_labels, json[QString("scenarioLabels")]);
    m_scenario_labels_isSet = !json[QString("scenarioLabels")].isNull() && m_scenario_labels_isValid;

    m_scenarios_isValid = ::OpenAPI::fromJsonValue(m_scenarios, json[QString("scenarios")]);
    m_scenarios_isSet = !json[QString("scenarios")].isNull() && m_scenarios_isValid;
}

QString OAIAndroidTestLoop::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAndroidTestLoop::asJsonObject() const {
    QJsonObject obj;
    if (m_app_apk.isSet()) {
        obj.insert(QString("appApk"), ::OpenAPI::toJsonValue(m_app_apk));
    }
    if (m_app_bundle.isSet()) {
        obj.insert(QString("appBundle"), ::OpenAPI::toJsonValue(m_app_bundle));
    }
    if (m_app_package_id_isSet) {
        obj.insert(QString("appPackageId"), ::OpenAPI::toJsonValue(m_app_package_id));
    }
    if (m_scenario_labels.size() > 0) {
        obj.insert(QString("scenarioLabels"), ::OpenAPI::toJsonValue(m_scenario_labels));
    }
    if (m_scenarios.size() > 0) {
        obj.insert(QString("scenarios"), ::OpenAPI::toJsonValue(m_scenarios));
    }
    return obj;
}

OAIFileReference OAIAndroidTestLoop::getAppApk() const {
    return m_app_apk;
}
void OAIAndroidTestLoop::setAppApk(const OAIFileReference &app_apk) {
    m_app_apk = app_apk;
    m_app_apk_isSet = true;
}

bool OAIAndroidTestLoop::is_app_apk_Set() const{
    return m_app_apk_isSet;
}

bool OAIAndroidTestLoop::is_app_apk_Valid() const{
    return m_app_apk_isValid;
}

OAIAppBundle OAIAndroidTestLoop::getAppBundle() const {
    return m_app_bundle;
}
void OAIAndroidTestLoop::setAppBundle(const OAIAppBundle &app_bundle) {
    m_app_bundle = app_bundle;
    m_app_bundle_isSet = true;
}

bool OAIAndroidTestLoop::is_app_bundle_Set() const{
    return m_app_bundle_isSet;
}

bool OAIAndroidTestLoop::is_app_bundle_Valid() const{
    return m_app_bundle_isValid;
}

QString OAIAndroidTestLoop::getAppPackageId() const {
    return m_app_package_id;
}
void OAIAndroidTestLoop::setAppPackageId(const QString &app_package_id) {
    m_app_package_id = app_package_id;
    m_app_package_id_isSet = true;
}

bool OAIAndroidTestLoop::is_app_package_id_Set() const{
    return m_app_package_id_isSet;
}

bool OAIAndroidTestLoop::is_app_package_id_Valid() const{
    return m_app_package_id_isValid;
}

QList<QString> OAIAndroidTestLoop::getScenarioLabels() const {
    return m_scenario_labels;
}
void OAIAndroidTestLoop::setScenarioLabels(const QList<QString> &scenario_labels) {
    m_scenario_labels = scenario_labels;
    m_scenario_labels_isSet = true;
}

bool OAIAndroidTestLoop::is_scenario_labels_Set() const{
    return m_scenario_labels_isSet;
}

bool OAIAndroidTestLoop::is_scenario_labels_Valid() const{
    return m_scenario_labels_isValid;
}

QList<qint32> OAIAndroidTestLoop::getScenarios() const {
    return m_scenarios;
}
void OAIAndroidTestLoop::setScenarios(const QList<qint32> &scenarios) {
    m_scenarios = scenarios;
    m_scenarios_isSet = true;
}

bool OAIAndroidTestLoop::is_scenarios_Set() const{
    return m_scenarios_isSet;
}

bool OAIAndroidTestLoop::is_scenarios_Valid() const{
    return m_scenarios_isValid;
}

bool OAIAndroidTestLoop::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_apk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_bundle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenario_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenarios.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAndroidTestLoop::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
