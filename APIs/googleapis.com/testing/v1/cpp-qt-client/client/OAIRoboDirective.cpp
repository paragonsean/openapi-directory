/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoboDirective.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoboDirective::OAIRoboDirective(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoboDirective::OAIRoboDirective() {
    this->initializeModel();
}

OAIRoboDirective::~OAIRoboDirective() {}

void OAIRoboDirective::initializeModel() {

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_input_text_isSet = false;
    m_input_text_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIRoboDirective::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoboDirective::fromJsonObject(QJsonObject json) {

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("actionType")]);
    m_action_type_isSet = !json[QString("actionType")].isNull() && m_action_type_isValid;

    m_input_text_isValid = ::OpenAPI::fromJsonValue(m_input_text, json[QString("inputText")]);
    m_input_text_isSet = !json[QString("inputText")].isNull() && m_input_text_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;
}

QString OAIRoboDirective::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoboDirective::asJsonObject() const {
    QJsonObject obj;
    if (m_action_type_isSet) {
        obj.insert(QString("actionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_input_text_isSet) {
        obj.insert(QString("inputText"), ::OpenAPI::toJsonValue(m_input_text));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAIRoboDirective::getActionType() const {
    return m_action_type;
}
void OAIRoboDirective::setActionType(const QString &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIRoboDirective::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIRoboDirective::is_action_type_Valid() const{
    return m_action_type_isValid;
}

QString OAIRoboDirective::getInputText() const {
    return m_input_text;
}
void OAIRoboDirective::setInputText(const QString &input_text) {
    m_input_text = input_text;
    m_input_text_isSet = true;
}

bool OAIRoboDirective::is_input_text_Set() const{
    return m_input_text_isSet;
}

bool OAIRoboDirective::is_input_text_Valid() const{
    return m_input_text_isValid;
}

QString OAIRoboDirective::getResourceName() const {
    return m_resource_name;
}
void OAIRoboDirective::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIRoboDirective::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIRoboDirective::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIRoboDirective::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoboDirective::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
