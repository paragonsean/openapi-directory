/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResultStorage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResultStorage::OAIResultStorage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResultStorage::OAIResultStorage() {
    this->initializeModel();
}

OAIResultStorage::~OAIResultStorage() {}

void OAIResultStorage::initializeModel() {

    m_google_cloud_storage_isSet = false;
    m_google_cloud_storage_isValid = false;

    m_results_url_isSet = false;
    m_results_url_isValid = false;

    m_tool_results_execution_isSet = false;
    m_tool_results_execution_isValid = false;

    m_tool_results_history_isSet = false;
    m_tool_results_history_isValid = false;
}

void OAIResultStorage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResultStorage::fromJsonObject(QJsonObject json) {

    m_google_cloud_storage_isValid = ::OpenAPI::fromJsonValue(m_google_cloud_storage, json[QString("googleCloudStorage")]);
    m_google_cloud_storage_isSet = !json[QString("googleCloudStorage")].isNull() && m_google_cloud_storage_isValid;

    m_results_url_isValid = ::OpenAPI::fromJsonValue(m_results_url, json[QString("resultsUrl")]);
    m_results_url_isSet = !json[QString("resultsUrl")].isNull() && m_results_url_isValid;

    m_tool_results_execution_isValid = ::OpenAPI::fromJsonValue(m_tool_results_execution, json[QString("toolResultsExecution")]);
    m_tool_results_execution_isSet = !json[QString("toolResultsExecution")].isNull() && m_tool_results_execution_isValid;

    m_tool_results_history_isValid = ::OpenAPI::fromJsonValue(m_tool_results_history, json[QString("toolResultsHistory")]);
    m_tool_results_history_isSet = !json[QString("toolResultsHistory")].isNull() && m_tool_results_history_isValid;
}

QString OAIResultStorage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResultStorage::asJsonObject() const {
    QJsonObject obj;
    if (m_google_cloud_storage.isSet()) {
        obj.insert(QString("googleCloudStorage"), ::OpenAPI::toJsonValue(m_google_cloud_storage));
    }
    if (m_results_url_isSet) {
        obj.insert(QString("resultsUrl"), ::OpenAPI::toJsonValue(m_results_url));
    }
    if (m_tool_results_execution.isSet()) {
        obj.insert(QString("toolResultsExecution"), ::OpenAPI::toJsonValue(m_tool_results_execution));
    }
    if (m_tool_results_history.isSet()) {
        obj.insert(QString("toolResultsHistory"), ::OpenAPI::toJsonValue(m_tool_results_history));
    }
    return obj;
}

OAIGoogleCloudStorage OAIResultStorage::getGoogleCloudStorage() const {
    return m_google_cloud_storage;
}
void OAIResultStorage::setGoogleCloudStorage(const OAIGoogleCloudStorage &google_cloud_storage) {
    m_google_cloud_storage = google_cloud_storage;
    m_google_cloud_storage_isSet = true;
}

bool OAIResultStorage::is_google_cloud_storage_Set() const{
    return m_google_cloud_storage_isSet;
}

bool OAIResultStorage::is_google_cloud_storage_Valid() const{
    return m_google_cloud_storage_isValid;
}

QString OAIResultStorage::getResultsUrl() const {
    return m_results_url;
}
void OAIResultStorage::setResultsUrl(const QString &results_url) {
    m_results_url = results_url;
    m_results_url_isSet = true;
}

bool OAIResultStorage::is_results_url_Set() const{
    return m_results_url_isSet;
}

bool OAIResultStorage::is_results_url_Valid() const{
    return m_results_url_isValid;
}

OAIToolResultsExecution OAIResultStorage::getToolResultsExecution() const {
    return m_tool_results_execution;
}
void OAIResultStorage::setToolResultsExecution(const OAIToolResultsExecution &tool_results_execution) {
    m_tool_results_execution = tool_results_execution;
    m_tool_results_execution_isSet = true;
}

bool OAIResultStorage::is_tool_results_execution_Set() const{
    return m_tool_results_execution_isSet;
}

bool OAIResultStorage::is_tool_results_execution_Valid() const{
    return m_tool_results_execution_isValid;
}

OAIToolResultsHistory OAIResultStorage::getToolResultsHistory() const {
    return m_tool_results_history;
}
void OAIResultStorage::setToolResultsHistory(const OAIToolResultsHistory &tool_results_history) {
    m_tool_results_history = tool_results_history;
    m_tool_results_history_isSet = true;
}

bool OAIResultStorage::is_tool_results_history_Set() const{
    return m_tool_results_history_isSet;
}

bool OAIResultStorage::is_tool_results_history_Valid() const{
    return m_tool_results_history_isValid;
}

bool OAIResultStorage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_google_cloud_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_results_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_results_history.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResultStorage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
