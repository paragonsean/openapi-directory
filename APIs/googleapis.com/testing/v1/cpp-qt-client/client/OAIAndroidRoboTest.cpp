/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAndroidRoboTest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAndroidRoboTest::OAIAndroidRoboTest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAndroidRoboTest::OAIAndroidRoboTest() {
    this->initializeModel();
}

OAIAndroidRoboTest::~OAIAndroidRoboTest() {}

void OAIAndroidRoboTest::initializeModel() {

    m_app_apk_isSet = false;
    m_app_apk_isValid = false;

    m_app_bundle_isSet = false;
    m_app_bundle_isValid = false;

    m_app_initial_activity_isSet = false;
    m_app_initial_activity_isValid = false;

    m_app_package_id_isSet = false;
    m_app_package_id_isValid = false;

    m_max_depth_isSet = false;
    m_max_depth_isValid = false;

    m_max_steps_isSet = false;
    m_max_steps_isValid = false;

    m_robo_directives_isSet = false;
    m_robo_directives_isValid = false;

    m_robo_mode_isSet = false;
    m_robo_mode_isValid = false;

    m_robo_script_isSet = false;
    m_robo_script_isValid = false;

    m_starting_intents_isSet = false;
    m_starting_intents_isValid = false;
}

void OAIAndroidRoboTest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAndroidRoboTest::fromJsonObject(QJsonObject json) {

    m_app_apk_isValid = ::OpenAPI::fromJsonValue(m_app_apk, json[QString("appApk")]);
    m_app_apk_isSet = !json[QString("appApk")].isNull() && m_app_apk_isValid;

    m_app_bundle_isValid = ::OpenAPI::fromJsonValue(m_app_bundle, json[QString("appBundle")]);
    m_app_bundle_isSet = !json[QString("appBundle")].isNull() && m_app_bundle_isValid;

    m_app_initial_activity_isValid = ::OpenAPI::fromJsonValue(m_app_initial_activity, json[QString("appInitialActivity")]);
    m_app_initial_activity_isSet = !json[QString("appInitialActivity")].isNull() && m_app_initial_activity_isValid;

    m_app_package_id_isValid = ::OpenAPI::fromJsonValue(m_app_package_id, json[QString("appPackageId")]);
    m_app_package_id_isSet = !json[QString("appPackageId")].isNull() && m_app_package_id_isValid;

    m_max_depth_isValid = ::OpenAPI::fromJsonValue(m_max_depth, json[QString("maxDepth")]);
    m_max_depth_isSet = !json[QString("maxDepth")].isNull() && m_max_depth_isValid;

    m_max_steps_isValid = ::OpenAPI::fromJsonValue(m_max_steps, json[QString("maxSteps")]);
    m_max_steps_isSet = !json[QString("maxSteps")].isNull() && m_max_steps_isValid;

    m_robo_directives_isValid = ::OpenAPI::fromJsonValue(m_robo_directives, json[QString("roboDirectives")]);
    m_robo_directives_isSet = !json[QString("roboDirectives")].isNull() && m_robo_directives_isValid;

    m_robo_mode_isValid = ::OpenAPI::fromJsonValue(m_robo_mode, json[QString("roboMode")]);
    m_robo_mode_isSet = !json[QString("roboMode")].isNull() && m_robo_mode_isValid;

    m_robo_script_isValid = ::OpenAPI::fromJsonValue(m_robo_script, json[QString("roboScript")]);
    m_robo_script_isSet = !json[QString("roboScript")].isNull() && m_robo_script_isValid;

    m_starting_intents_isValid = ::OpenAPI::fromJsonValue(m_starting_intents, json[QString("startingIntents")]);
    m_starting_intents_isSet = !json[QString("startingIntents")].isNull() && m_starting_intents_isValid;
}

QString OAIAndroidRoboTest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAndroidRoboTest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_apk.isSet()) {
        obj.insert(QString("appApk"), ::OpenAPI::toJsonValue(m_app_apk));
    }
    if (m_app_bundle.isSet()) {
        obj.insert(QString("appBundle"), ::OpenAPI::toJsonValue(m_app_bundle));
    }
    if (m_app_initial_activity_isSet) {
        obj.insert(QString("appInitialActivity"), ::OpenAPI::toJsonValue(m_app_initial_activity));
    }
    if (m_app_package_id_isSet) {
        obj.insert(QString("appPackageId"), ::OpenAPI::toJsonValue(m_app_package_id));
    }
    if (m_max_depth_isSet) {
        obj.insert(QString("maxDepth"), ::OpenAPI::toJsonValue(m_max_depth));
    }
    if (m_max_steps_isSet) {
        obj.insert(QString("maxSteps"), ::OpenAPI::toJsonValue(m_max_steps));
    }
    if (m_robo_directives.size() > 0) {
        obj.insert(QString("roboDirectives"), ::OpenAPI::toJsonValue(m_robo_directives));
    }
    if (m_robo_mode_isSet) {
        obj.insert(QString("roboMode"), ::OpenAPI::toJsonValue(m_robo_mode));
    }
    if (m_robo_script.isSet()) {
        obj.insert(QString("roboScript"), ::OpenAPI::toJsonValue(m_robo_script));
    }
    if (m_starting_intents.size() > 0) {
        obj.insert(QString("startingIntents"), ::OpenAPI::toJsonValue(m_starting_intents));
    }
    return obj;
}

OAIFileReference OAIAndroidRoboTest::getAppApk() const {
    return m_app_apk;
}
void OAIAndroidRoboTest::setAppApk(const OAIFileReference &app_apk) {
    m_app_apk = app_apk;
    m_app_apk_isSet = true;
}

bool OAIAndroidRoboTest::is_app_apk_Set() const{
    return m_app_apk_isSet;
}

bool OAIAndroidRoboTest::is_app_apk_Valid() const{
    return m_app_apk_isValid;
}

OAIAppBundle OAIAndroidRoboTest::getAppBundle() const {
    return m_app_bundle;
}
void OAIAndroidRoboTest::setAppBundle(const OAIAppBundle &app_bundle) {
    m_app_bundle = app_bundle;
    m_app_bundle_isSet = true;
}

bool OAIAndroidRoboTest::is_app_bundle_Set() const{
    return m_app_bundle_isSet;
}

bool OAIAndroidRoboTest::is_app_bundle_Valid() const{
    return m_app_bundle_isValid;
}

QString OAIAndroidRoboTest::getAppInitialActivity() const {
    return m_app_initial_activity;
}
void OAIAndroidRoboTest::setAppInitialActivity(const QString &app_initial_activity) {
    m_app_initial_activity = app_initial_activity;
    m_app_initial_activity_isSet = true;
}

bool OAIAndroidRoboTest::is_app_initial_activity_Set() const{
    return m_app_initial_activity_isSet;
}

bool OAIAndroidRoboTest::is_app_initial_activity_Valid() const{
    return m_app_initial_activity_isValid;
}

QString OAIAndroidRoboTest::getAppPackageId() const {
    return m_app_package_id;
}
void OAIAndroidRoboTest::setAppPackageId(const QString &app_package_id) {
    m_app_package_id = app_package_id;
    m_app_package_id_isSet = true;
}

bool OAIAndroidRoboTest::is_app_package_id_Set() const{
    return m_app_package_id_isSet;
}

bool OAIAndroidRoboTest::is_app_package_id_Valid() const{
    return m_app_package_id_isValid;
}

qint32 OAIAndroidRoboTest::getMaxDepth() const {
    return m_max_depth;
}
void OAIAndroidRoboTest::setMaxDepth(const qint32 &max_depth) {
    m_max_depth = max_depth;
    m_max_depth_isSet = true;
}

bool OAIAndroidRoboTest::is_max_depth_Set() const{
    return m_max_depth_isSet;
}

bool OAIAndroidRoboTest::is_max_depth_Valid() const{
    return m_max_depth_isValid;
}

qint32 OAIAndroidRoboTest::getMaxSteps() const {
    return m_max_steps;
}
void OAIAndroidRoboTest::setMaxSteps(const qint32 &max_steps) {
    m_max_steps = max_steps;
    m_max_steps_isSet = true;
}

bool OAIAndroidRoboTest::is_max_steps_Set() const{
    return m_max_steps_isSet;
}

bool OAIAndroidRoboTest::is_max_steps_Valid() const{
    return m_max_steps_isValid;
}

QList<OAIRoboDirective> OAIAndroidRoboTest::getRoboDirectives() const {
    return m_robo_directives;
}
void OAIAndroidRoboTest::setRoboDirectives(const QList<OAIRoboDirective> &robo_directives) {
    m_robo_directives = robo_directives;
    m_robo_directives_isSet = true;
}

bool OAIAndroidRoboTest::is_robo_directives_Set() const{
    return m_robo_directives_isSet;
}

bool OAIAndroidRoboTest::is_robo_directives_Valid() const{
    return m_robo_directives_isValid;
}

QString OAIAndroidRoboTest::getRoboMode() const {
    return m_robo_mode;
}
void OAIAndroidRoboTest::setRoboMode(const QString &robo_mode) {
    m_robo_mode = robo_mode;
    m_robo_mode_isSet = true;
}

bool OAIAndroidRoboTest::is_robo_mode_Set() const{
    return m_robo_mode_isSet;
}

bool OAIAndroidRoboTest::is_robo_mode_Valid() const{
    return m_robo_mode_isValid;
}

OAIFileReference OAIAndroidRoboTest::getRoboScript() const {
    return m_robo_script;
}
void OAIAndroidRoboTest::setRoboScript(const OAIFileReference &robo_script) {
    m_robo_script = robo_script;
    m_robo_script_isSet = true;
}

bool OAIAndroidRoboTest::is_robo_script_Set() const{
    return m_robo_script_isSet;
}

bool OAIAndroidRoboTest::is_robo_script_Valid() const{
    return m_robo_script_isValid;
}

QList<OAIRoboStartingIntent> OAIAndroidRoboTest::getStartingIntents() const {
    return m_starting_intents;
}
void OAIAndroidRoboTest::setStartingIntents(const QList<OAIRoboStartingIntent> &starting_intents) {
    m_starting_intents = starting_intents;
    m_starting_intents_isSet = true;
}

bool OAIAndroidRoboTest::is_starting_intents_Set() const{
    return m_starting_intents_isSet;
}

bool OAIAndroidRoboTest::is_starting_intents_Valid() const{
    return m_starting_intents_isValid;
}

bool OAIAndroidRoboTest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_apk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_bundle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_initial_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_steps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robo_directives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_robo_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robo_script.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_intents.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAndroidRoboTest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
