/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceSession::OAIDeviceSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceSession::OAIDeviceSession() {
    this->initializeModel();
}

OAIDeviceSession::~OAIDeviceSession() {}

void OAIDeviceSession::initializeModel() {

    m_active_start_time_isSet = false;
    m_active_start_time_isValid = false;

    m_android_device_isSet = false;
    m_android_device_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_inactivity_timeout_isSet = false;
    m_inactivity_timeout_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_histories_isSet = false;
    m_state_histories_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIDeviceSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceSession::fromJsonObject(QJsonObject json) {

    m_active_start_time_isValid = ::OpenAPI::fromJsonValue(m_active_start_time, json[QString("activeStartTime")]);
    m_active_start_time_isSet = !json[QString("activeStartTime")].isNull() && m_active_start_time_isValid;

    m_android_device_isValid = ::OpenAPI::fromJsonValue(m_android_device, json[QString("androidDevice")]);
    m_android_device_isSet = !json[QString("androidDevice")].isNull() && m_android_device_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_inactivity_timeout_isValid = ::OpenAPI::fromJsonValue(m_inactivity_timeout, json[QString("inactivityTimeout")]);
    m_inactivity_timeout_isSet = !json[QString("inactivityTimeout")].isNull() && m_inactivity_timeout_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_histories_isValid = ::OpenAPI::fromJsonValue(m_state_histories, json[QString("stateHistories")]);
    m_state_histories_isSet = !json[QString("stateHistories")].isNull() && m_state_histories_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIDeviceSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceSession::asJsonObject() const {
    QJsonObject obj;
    if (m_active_start_time_isSet) {
        obj.insert(QString("activeStartTime"), ::OpenAPI::toJsonValue(m_active_start_time));
    }
    if (m_android_device.isSet()) {
        obj.insert(QString("androidDevice"), ::OpenAPI::toJsonValue(m_android_device));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_inactivity_timeout_isSet) {
        obj.insert(QString("inactivityTimeout"), ::OpenAPI::toJsonValue(m_inactivity_timeout));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_histories.size() > 0) {
        obj.insert(QString("stateHistories"), ::OpenAPI::toJsonValue(m_state_histories));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QString OAIDeviceSession::getActiveStartTime() const {
    return m_active_start_time;
}
void OAIDeviceSession::setActiveStartTime(const QString &active_start_time) {
    m_active_start_time = active_start_time;
    m_active_start_time_isSet = true;
}

bool OAIDeviceSession::is_active_start_time_Set() const{
    return m_active_start_time_isSet;
}

bool OAIDeviceSession::is_active_start_time_Valid() const{
    return m_active_start_time_isValid;
}

OAIAndroidDevice OAIDeviceSession::getAndroidDevice() const {
    return m_android_device;
}
void OAIDeviceSession::setAndroidDevice(const OAIAndroidDevice &android_device) {
    m_android_device = android_device;
    m_android_device_isSet = true;
}

bool OAIDeviceSession::is_android_device_Set() const{
    return m_android_device_isSet;
}

bool OAIDeviceSession::is_android_device_Valid() const{
    return m_android_device_isValid;
}

QString OAIDeviceSession::getCreateTime() const {
    return m_create_time;
}
void OAIDeviceSession::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDeviceSession::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDeviceSession::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIDeviceSession::getDisplayName() const {
    return m_display_name;
}
void OAIDeviceSession::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDeviceSession::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDeviceSession::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDeviceSession::getExpireTime() const {
    return m_expire_time;
}
void OAIDeviceSession::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIDeviceSession::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIDeviceSession::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIDeviceSession::getInactivityTimeout() const {
    return m_inactivity_timeout;
}
void OAIDeviceSession::setInactivityTimeout(const QString &inactivity_timeout) {
    m_inactivity_timeout = inactivity_timeout;
    m_inactivity_timeout_isSet = true;
}

bool OAIDeviceSession::is_inactivity_timeout_Set() const{
    return m_inactivity_timeout_isSet;
}

bool OAIDeviceSession::is_inactivity_timeout_Valid() const{
    return m_inactivity_timeout_isValid;
}

QString OAIDeviceSession::getName() const {
    return m_name;
}
void OAIDeviceSession::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeviceSession::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeviceSession::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeviceSession::getState() const {
    return m_state;
}
void OAIDeviceSession::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDeviceSession::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDeviceSession::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAISessionStateEvent> OAIDeviceSession::getStateHistories() const {
    return m_state_histories;
}
void OAIDeviceSession::setStateHistories(const QList<OAISessionStateEvent> &state_histories) {
    m_state_histories = state_histories;
    m_state_histories_isSet = true;
}

bool OAIDeviceSession::is_state_histories_Set() const{
    return m_state_histories_isSet;
}

bool OAIDeviceSession::is_state_histories_Valid() const{
    return m_state_histories_isValid;
}

QString OAIDeviceSession::getTtl() const {
    return m_ttl;
}
void OAIDeviceSession::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIDeviceSession::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIDeviceSession::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIDeviceSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactivity_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_histories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
