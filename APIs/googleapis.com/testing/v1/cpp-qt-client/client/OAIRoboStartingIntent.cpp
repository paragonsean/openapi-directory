/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoboStartingIntent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoboStartingIntent::OAIRoboStartingIntent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoboStartingIntent::OAIRoboStartingIntent() {
    this->initializeModel();
}

OAIRoboStartingIntent::~OAIRoboStartingIntent() {}

void OAIRoboStartingIntent::initializeModel() {

    m_launcher_activity_isSet = false;
    m_launcher_activity_isValid = false;

    m_no_activity_isSet = false;
    m_no_activity_isValid = false;

    m_start_activity_isSet = false;
    m_start_activity_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIRoboStartingIntent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoboStartingIntent::fromJsonObject(QJsonObject json) {

    m_launcher_activity_isValid = ::OpenAPI::fromJsonValue(m_launcher_activity, json[QString("launcherActivity")]);
    m_launcher_activity_isSet = !json[QString("launcherActivity")].isNull() && m_launcher_activity_isValid;

    m_no_activity_isValid = ::OpenAPI::fromJsonValue(m_no_activity, json[QString("noActivity")]);
    m_no_activity_isSet = !json[QString("noActivity")].isNull() && m_no_activity_isValid;

    m_start_activity_isValid = ::OpenAPI::fromJsonValue(m_start_activity, json[QString("startActivity")]);
    m_start_activity_isSet = !json[QString("startActivity")].isNull() && m_start_activity_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIRoboStartingIntent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoboStartingIntent::asJsonObject() const {
    QJsonObject obj;
    if (m_launcher_activity_isSet) {
        obj.insert(QString("launcherActivity"), ::OpenAPI::toJsonValue(m_launcher_activity));
    }
    if (m_no_activity_isSet) {
        obj.insert(QString("noActivity"), ::OpenAPI::toJsonValue(m_no_activity));
    }
    if (m_start_activity.isSet()) {
        obj.insert(QString("startActivity"), ::OpenAPI::toJsonValue(m_start_activity));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

OAIObject OAIRoboStartingIntent::getLauncherActivity() const {
    return m_launcher_activity;
}
void OAIRoboStartingIntent::setLauncherActivity(const OAIObject &launcher_activity) {
    m_launcher_activity = launcher_activity;
    m_launcher_activity_isSet = true;
}

bool OAIRoboStartingIntent::is_launcher_activity_Set() const{
    return m_launcher_activity_isSet;
}

bool OAIRoboStartingIntent::is_launcher_activity_Valid() const{
    return m_launcher_activity_isValid;
}

OAIObject OAIRoboStartingIntent::getNoActivity() const {
    return m_no_activity;
}
void OAIRoboStartingIntent::setNoActivity(const OAIObject &no_activity) {
    m_no_activity = no_activity;
    m_no_activity_isSet = true;
}

bool OAIRoboStartingIntent::is_no_activity_Set() const{
    return m_no_activity_isSet;
}

bool OAIRoboStartingIntent::is_no_activity_Valid() const{
    return m_no_activity_isValid;
}

OAIStartActivityIntent OAIRoboStartingIntent::getStartActivity() const {
    return m_start_activity;
}
void OAIRoboStartingIntent::setStartActivity(const OAIStartActivityIntent &start_activity) {
    m_start_activity = start_activity;
    m_start_activity_isSet = true;
}

bool OAIRoboStartingIntent::is_start_activity_Set() const{
    return m_start_activity_isSet;
}

bool OAIRoboStartingIntent::is_start_activity_Valid() const{
    return m_start_activity_isValid;
}

QString OAIRoboStartingIntent::getTimeout() const {
    return m_timeout;
}
void OAIRoboStartingIntent::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIRoboStartingIntent::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIRoboStartingIntent::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIRoboStartingIntent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_launcher_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoboStartingIntent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
