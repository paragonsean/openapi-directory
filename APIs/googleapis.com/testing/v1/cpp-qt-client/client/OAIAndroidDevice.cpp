/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAndroidDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAndroidDevice::OAIAndroidDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAndroidDevice::OAIAndroidDevice() {
    this->initializeModel();
}

OAIAndroidDevice::~OAIAndroidDevice() {}

void OAIAndroidDevice::initializeModel() {

    m_android_model_id_isSet = false;
    m_android_model_id_isValid = false;

    m_android_version_id_isSet = false;
    m_android_version_id_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;
}

void OAIAndroidDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAndroidDevice::fromJsonObject(QJsonObject json) {

    m_android_model_id_isValid = ::OpenAPI::fromJsonValue(m_android_model_id, json[QString("androidModelId")]);
    m_android_model_id_isSet = !json[QString("androidModelId")].isNull() && m_android_model_id_isValid;

    m_android_version_id_isValid = ::OpenAPI::fromJsonValue(m_android_version_id, json[QString("androidVersionId")]);
    m_android_version_id_isSet = !json[QString("androidVersionId")].isNull() && m_android_version_id_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;
}

QString OAIAndroidDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAndroidDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_android_model_id_isSet) {
        obj.insert(QString("androidModelId"), ::OpenAPI::toJsonValue(m_android_model_id));
    }
    if (m_android_version_id_isSet) {
        obj.insert(QString("androidVersionId"), ::OpenAPI::toJsonValue(m_android_version_id));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    return obj;
}

QString OAIAndroidDevice::getAndroidModelId() const {
    return m_android_model_id;
}
void OAIAndroidDevice::setAndroidModelId(const QString &android_model_id) {
    m_android_model_id = android_model_id;
    m_android_model_id_isSet = true;
}

bool OAIAndroidDevice::is_android_model_id_Set() const{
    return m_android_model_id_isSet;
}

bool OAIAndroidDevice::is_android_model_id_Valid() const{
    return m_android_model_id_isValid;
}

QString OAIAndroidDevice::getAndroidVersionId() const {
    return m_android_version_id;
}
void OAIAndroidDevice::setAndroidVersionId(const QString &android_version_id) {
    m_android_version_id = android_version_id;
    m_android_version_id_isSet = true;
}

bool OAIAndroidDevice::is_android_version_id_Set() const{
    return m_android_version_id_isSet;
}

bool OAIAndroidDevice::is_android_version_id_Valid() const{
    return m_android_version_id_isValid;
}

QString OAIAndroidDevice::getLocale() const {
    return m_locale;
}
void OAIAndroidDevice::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIAndroidDevice::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIAndroidDevice::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIAndroidDevice::getOrientation() const {
    return m_orientation;
}
void OAIAndroidDevice::setOrientation(const QString &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAIAndroidDevice::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAIAndroidDevice::is_orientation_Valid() const{
    return m_orientation_isValid;
}

bool OAIAndroidDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAndroidDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
