/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestExecution::OAITestExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestExecution::OAITestExecution() {
    this->initializeModel();
}

OAITestExecution::~OAITestExecution() {}

void OAITestExecution::initializeModel() {

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_matrix_id_isSet = false;
    m_matrix_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_shard_isSet = false;
    m_shard_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_test_details_isSet = false;
    m_test_details_isValid = false;

    m_test_specification_isSet = false;
    m_test_specification_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_tool_results_step_isSet = false;
    m_tool_results_step_isValid = false;
}

void OAITestExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestExecution::fromJsonObject(QJsonObject json) {

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_matrix_id_isValid = ::OpenAPI::fromJsonValue(m_matrix_id, json[QString("matrixId")]);
    m_matrix_id_isSet = !json[QString("matrixId")].isNull() && m_matrix_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_shard_isValid = ::OpenAPI::fromJsonValue(m_shard, json[QString("shard")]);
    m_shard_isSet = !json[QString("shard")].isNull() && m_shard_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_test_details_isValid = ::OpenAPI::fromJsonValue(m_test_details, json[QString("testDetails")]);
    m_test_details_isSet = !json[QString("testDetails")].isNull() && m_test_details_isValid;

    m_test_specification_isValid = ::OpenAPI::fromJsonValue(m_test_specification, json[QString("testSpecification")]);
    m_test_specification_isSet = !json[QString("testSpecification")].isNull() && m_test_specification_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_tool_results_step_isValid = ::OpenAPI::fromJsonValue(m_tool_results_step, json[QString("toolResultsStep")]);
    m_tool_results_step_isSet = !json[QString("toolResultsStep")].isNull() && m_tool_results_step_isValid;
}

QString OAITestExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_matrix_id_isSet) {
        obj.insert(QString("matrixId"), ::OpenAPI::toJsonValue(m_matrix_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_shard.isSet()) {
        obj.insert(QString("shard"), ::OpenAPI::toJsonValue(m_shard));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_test_details.isSet()) {
        obj.insert(QString("testDetails"), ::OpenAPI::toJsonValue(m_test_details));
    }
    if (m_test_specification.isSet()) {
        obj.insert(QString("testSpecification"), ::OpenAPI::toJsonValue(m_test_specification));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_tool_results_step.isSet()) {
        obj.insert(QString("toolResultsStep"), ::OpenAPI::toJsonValue(m_tool_results_step));
    }
    return obj;
}

OAIEnvironment OAITestExecution::getEnvironment() const {
    return m_environment;
}
void OAITestExecution::setEnvironment(const OAIEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAITestExecution::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAITestExecution::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAITestExecution::getId() const {
    return m_id;
}
void OAITestExecution::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITestExecution::is_id_Set() const{
    return m_id_isSet;
}

bool OAITestExecution::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITestExecution::getMatrixId() const {
    return m_matrix_id;
}
void OAITestExecution::setMatrixId(const QString &matrix_id) {
    m_matrix_id = matrix_id;
    m_matrix_id_isSet = true;
}

bool OAITestExecution::is_matrix_id_Set() const{
    return m_matrix_id_isSet;
}

bool OAITestExecution::is_matrix_id_Valid() const{
    return m_matrix_id_isValid;
}

QString OAITestExecution::getProjectId() const {
    return m_project_id;
}
void OAITestExecution::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAITestExecution::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAITestExecution::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAIShard OAITestExecution::getShard() const {
    return m_shard;
}
void OAITestExecution::setShard(const OAIShard &shard) {
    m_shard = shard;
    m_shard_isSet = true;
}

bool OAITestExecution::is_shard_Set() const{
    return m_shard_isSet;
}

bool OAITestExecution::is_shard_Valid() const{
    return m_shard_isValid;
}

QString OAITestExecution::getState() const {
    return m_state;
}
void OAITestExecution::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITestExecution::is_state_Set() const{
    return m_state_isSet;
}

bool OAITestExecution::is_state_Valid() const{
    return m_state_isValid;
}

OAITestDetails OAITestExecution::getTestDetails() const {
    return m_test_details;
}
void OAITestExecution::setTestDetails(const OAITestDetails &test_details) {
    m_test_details = test_details;
    m_test_details_isSet = true;
}

bool OAITestExecution::is_test_details_Set() const{
    return m_test_details_isSet;
}

bool OAITestExecution::is_test_details_Valid() const{
    return m_test_details_isValid;
}

OAITestSpecification OAITestExecution::getTestSpecification() const {
    return m_test_specification;
}
void OAITestExecution::setTestSpecification(const OAITestSpecification &test_specification) {
    m_test_specification = test_specification;
    m_test_specification_isSet = true;
}

bool OAITestExecution::is_test_specification_Set() const{
    return m_test_specification_isSet;
}

bool OAITestExecution::is_test_specification_Valid() const{
    return m_test_specification_isValid;
}

QString OAITestExecution::getTimestamp() const {
    return m_timestamp;
}
void OAITestExecution::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAITestExecution::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAITestExecution::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIToolResultsStep OAITestExecution::getToolResultsStep() const {
    return m_tool_results_step;
}
void OAITestExecution::setToolResultsStep(const OAIToolResultsStep &tool_results_step) {
    m_tool_results_step = tool_results_step;
    m_tool_results_step_isSet = true;
}

bool OAITestExecution::is_tool_results_step_Set() const{
    return m_tool_results_step_isSet;
}

bool OAITestExecution::is_tool_results_step_Valid() const{
    return m_tool_results_step_isValid;
}

bool OAITestExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matrix_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_results_step.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
