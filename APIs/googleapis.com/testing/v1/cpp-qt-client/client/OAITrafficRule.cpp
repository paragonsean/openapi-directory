/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficRule::OAITrafficRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficRule::OAITrafficRule() {
    this->initializeModel();
}

OAITrafficRule::~OAITrafficRule() {}

void OAITrafficRule::initializeModel() {

    m_bandwidth_isSet = false;
    m_bandwidth_isValid = false;

    m_burst_isSet = false;
    m_burst_isValid = false;

    m_delay_isSet = false;
    m_delay_isValid = false;

    m_packet_duplication_ratio_isSet = false;
    m_packet_duplication_ratio_isValid = false;

    m_packet_loss_ratio_isSet = false;
    m_packet_loss_ratio_isValid = false;
}

void OAITrafficRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficRule::fromJsonObject(QJsonObject json) {

    m_bandwidth_isValid = ::OpenAPI::fromJsonValue(m_bandwidth, json[QString("bandwidth")]);
    m_bandwidth_isSet = !json[QString("bandwidth")].isNull() && m_bandwidth_isValid;

    m_burst_isValid = ::OpenAPI::fromJsonValue(m_burst, json[QString("burst")]);
    m_burst_isSet = !json[QString("burst")].isNull() && m_burst_isValid;

    m_delay_isValid = ::OpenAPI::fromJsonValue(m_delay, json[QString("delay")]);
    m_delay_isSet = !json[QString("delay")].isNull() && m_delay_isValid;

    m_packet_duplication_ratio_isValid = ::OpenAPI::fromJsonValue(m_packet_duplication_ratio, json[QString("packetDuplicationRatio")]);
    m_packet_duplication_ratio_isSet = !json[QString("packetDuplicationRatio")].isNull() && m_packet_duplication_ratio_isValid;

    m_packet_loss_ratio_isValid = ::OpenAPI::fromJsonValue(m_packet_loss_ratio, json[QString("packetLossRatio")]);
    m_packet_loss_ratio_isSet = !json[QString("packetLossRatio")].isNull() && m_packet_loss_ratio_isValid;
}

QString OAITrafficRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficRule::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_isSet) {
        obj.insert(QString("bandwidth"), ::OpenAPI::toJsonValue(m_bandwidth));
    }
    if (m_burst_isSet) {
        obj.insert(QString("burst"), ::OpenAPI::toJsonValue(m_burst));
    }
    if (m_delay_isSet) {
        obj.insert(QString("delay"), ::OpenAPI::toJsonValue(m_delay));
    }
    if (m_packet_duplication_ratio_isSet) {
        obj.insert(QString("packetDuplicationRatio"), ::OpenAPI::toJsonValue(m_packet_duplication_ratio));
    }
    if (m_packet_loss_ratio_isSet) {
        obj.insert(QString("packetLossRatio"), ::OpenAPI::toJsonValue(m_packet_loss_ratio));
    }
    return obj;
}

float OAITrafficRule::getBandwidth() const {
    return m_bandwidth;
}
void OAITrafficRule::setBandwidth(const float &bandwidth) {
    m_bandwidth = bandwidth;
    m_bandwidth_isSet = true;
}

bool OAITrafficRule::is_bandwidth_Set() const{
    return m_bandwidth_isSet;
}

bool OAITrafficRule::is_bandwidth_Valid() const{
    return m_bandwidth_isValid;
}

float OAITrafficRule::getBurst() const {
    return m_burst;
}
void OAITrafficRule::setBurst(const float &burst) {
    m_burst = burst;
    m_burst_isSet = true;
}

bool OAITrafficRule::is_burst_Set() const{
    return m_burst_isSet;
}

bool OAITrafficRule::is_burst_Valid() const{
    return m_burst_isValid;
}

QString OAITrafficRule::getDelay() const {
    return m_delay;
}
void OAITrafficRule::setDelay(const QString &delay) {
    m_delay = delay;
    m_delay_isSet = true;
}

bool OAITrafficRule::is_delay_Set() const{
    return m_delay_isSet;
}

bool OAITrafficRule::is_delay_Valid() const{
    return m_delay_isValid;
}

float OAITrafficRule::getPacketDuplicationRatio() const {
    return m_packet_duplication_ratio;
}
void OAITrafficRule::setPacketDuplicationRatio(const float &packet_duplication_ratio) {
    m_packet_duplication_ratio = packet_duplication_ratio;
    m_packet_duplication_ratio_isSet = true;
}

bool OAITrafficRule::is_packet_duplication_ratio_Set() const{
    return m_packet_duplication_ratio_isSet;
}

bool OAITrafficRule::is_packet_duplication_ratio_Valid() const{
    return m_packet_duplication_ratio_isValid;
}

float OAITrafficRule::getPacketLossRatio() const {
    return m_packet_loss_ratio;
}
void OAITrafficRule::setPacketLossRatio(const float &packet_loss_ratio) {
    m_packet_loss_ratio = packet_loss_ratio;
    m_packet_loss_ratio_isSet = true;
}

bool OAITrafficRule::is_packet_loss_ratio_Set() const{
    return m_packet_loss_ratio_isSet;
}

bool OAITrafficRule::is_packet_loss_ratio_Valid() const{
    return m_packet_loss_ratio_isValid;
}

bool OAITrafficRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_burst_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packet_duplication_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packet_loss_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
