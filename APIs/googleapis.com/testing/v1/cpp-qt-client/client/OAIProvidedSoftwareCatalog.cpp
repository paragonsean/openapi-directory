/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvidedSoftwareCatalog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvidedSoftwareCatalog::OAIProvidedSoftwareCatalog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvidedSoftwareCatalog::OAIProvidedSoftwareCatalog() {
    this->initializeModel();
}

OAIProvidedSoftwareCatalog::~OAIProvidedSoftwareCatalog() {}

void OAIProvidedSoftwareCatalog::initializeModel() {

    m_androidx_orchestrator_version_isSet = false;
    m_androidx_orchestrator_version_isValid = false;

    m_orchestrator_version_isSet = false;
    m_orchestrator_version_isValid = false;
}

void OAIProvidedSoftwareCatalog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvidedSoftwareCatalog::fromJsonObject(QJsonObject json) {

    m_androidx_orchestrator_version_isValid = ::OpenAPI::fromJsonValue(m_androidx_orchestrator_version, json[QString("androidxOrchestratorVersion")]);
    m_androidx_orchestrator_version_isSet = !json[QString("androidxOrchestratorVersion")].isNull() && m_androidx_orchestrator_version_isValid;

    m_orchestrator_version_isValid = ::OpenAPI::fromJsonValue(m_orchestrator_version, json[QString("orchestratorVersion")]);
    m_orchestrator_version_isSet = !json[QString("orchestratorVersion")].isNull() && m_orchestrator_version_isValid;
}

QString OAIProvidedSoftwareCatalog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvidedSoftwareCatalog::asJsonObject() const {
    QJsonObject obj;
    if (m_androidx_orchestrator_version_isSet) {
        obj.insert(QString("androidxOrchestratorVersion"), ::OpenAPI::toJsonValue(m_androidx_orchestrator_version));
    }
    if (m_orchestrator_version_isSet) {
        obj.insert(QString("orchestratorVersion"), ::OpenAPI::toJsonValue(m_orchestrator_version));
    }
    return obj;
}

QString OAIProvidedSoftwareCatalog::getAndroidxOrchestratorVersion() const {
    return m_androidx_orchestrator_version;
}
void OAIProvidedSoftwareCatalog::setAndroidxOrchestratorVersion(const QString &androidx_orchestrator_version) {
    m_androidx_orchestrator_version = androidx_orchestrator_version;
    m_androidx_orchestrator_version_isSet = true;
}

bool OAIProvidedSoftwareCatalog::is_androidx_orchestrator_version_Set() const{
    return m_androidx_orchestrator_version_isSet;
}

bool OAIProvidedSoftwareCatalog::is_androidx_orchestrator_version_Valid() const{
    return m_androidx_orchestrator_version_isValid;
}

QString OAIProvidedSoftwareCatalog::getOrchestratorVersion() const {
    return m_orchestrator_version;
}
void OAIProvidedSoftwareCatalog::setOrchestratorVersion(const QString &orchestrator_version) {
    m_orchestrator_version = orchestrator_version;
    m_orchestrator_version_isSet = true;
}

bool OAIProvidedSoftwareCatalog::is_orchestrator_version_Set() const{
    return m_orchestrator_version_isSet;
}

bool OAIProvidedSoftwareCatalog::is_orchestrator_version_Valid() const{
    return m_orchestrator_version_isValid;
}

bool OAIProvidedSoftwareCatalog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_androidx_orchestrator_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orchestrator_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvidedSoftwareCatalog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
