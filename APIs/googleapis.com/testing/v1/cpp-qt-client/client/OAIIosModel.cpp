/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIosModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIosModel::OAIIosModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIosModel::OAIIosModel() {
    this->initializeModel();
}

OAIIosModel::~OAIIosModel() {}

void OAIIosModel::initializeModel() {

    m_device_capabilities_isSet = false;
    m_device_capabilities_isValid = false;

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_per_version_info_isSet = false;
    m_per_version_info_isValid = false;

    m_screen_density_isSet = false;
    m_screen_density_isValid = false;

    m_screen_x_isSet = false;
    m_screen_x_isValid = false;

    m_screen_y_isSet = false;
    m_screen_y_isValid = false;

    m_supported_version_ids_isSet = false;
    m_supported_version_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIIosModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIosModel::fromJsonObject(QJsonObject json) {

    m_device_capabilities_isValid = ::OpenAPI::fromJsonValue(m_device_capabilities, json[QString("deviceCapabilities")]);
    m_device_capabilities_isSet = !json[QString("deviceCapabilities")].isNull() && m_device_capabilities_isValid;

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_per_version_info_isValid = ::OpenAPI::fromJsonValue(m_per_version_info, json[QString("perVersionInfo")]);
    m_per_version_info_isSet = !json[QString("perVersionInfo")].isNull() && m_per_version_info_isValid;

    m_screen_density_isValid = ::OpenAPI::fromJsonValue(m_screen_density, json[QString("screenDensity")]);
    m_screen_density_isSet = !json[QString("screenDensity")].isNull() && m_screen_density_isValid;

    m_screen_x_isValid = ::OpenAPI::fromJsonValue(m_screen_x, json[QString("screenX")]);
    m_screen_x_isSet = !json[QString("screenX")].isNull() && m_screen_x_isValid;

    m_screen_y_isValid = ::OpenAPI::fromJsonValue(m_screen_y, json[QString("screenY")]);
    m_screen_y_isSet = !json[QString("screenY")].isNull() && m_screen_y_isValid;

    m_supported_version_ids_isValid = ::OpenAPI::fromJsonValue(m_supported_version_ids, json[QString("supportedVersionIds")]);
    m_supported_version_ids_isSet = !json[QString("supportedVersionIds")].isNull() && m_supported_version_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIIosModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIosModel::asJsonObject() const {
    QJsonObject obj;
    if (m_device_capabilities.size() > 0) {
        obj.insert(QString("deviceCapabilities"), ::OpenAPI::toJsonValue(m_device_capabilities));
    }
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_per_version_info.size() > 0) {
        obj.insert(QString("perVersionInfo"), ::OpenAPI::toJsonValue(m_per_version_info));
    }
    if (m_screen_density_isSet) {
        obj.insert(QString("screenDensity"), ::OpenAPI::toJsonValue(m_screen_density));
    }
    if (m_screen_x_isSet) {
        obj.insert(QString("screenX"), ::OpenAPI::toJsonValue(m_screen_x));
    }
    if (m_screen_y_isSet) {
        obj.insert(QString("screenY"), ::OpenAPI::toJsonValue(m_screen_y));
    }
    if (m_supported_version_ids.size() > 0) {
        obj.insert(QString("supportedVersionIds"), ::OpenAPI::toJsonValue(m_supported_version_ids));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<QString> OAIIosModel::getDeviceCapabilities() const {
    return m_device_capabilities;
}
void OAIIosModel::setDeviceCapabilities(const QList<QString> &device_capabilities) {
    m_device_capabilities = device_capabilities;
    m_device_capabilities_isSet = true;
}

bool OAIIosModel::is_device_capabilities_Set() const{
    return m_device_capabilities_isSet;
}

bool OAIIosModel::is_device_capabilities_Valid() const{
    return m_device_capabilities_isValid;
}

QString OAIIosModel::getFormFactor() const {
    return m_form_factor;
}
void OAIIosModel::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAIIosModel::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAIIosModel::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QString OAIIosModel::getId() const {
    return m_id;
}
void OAIIosModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIosModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIosModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIosModel::getName() const {
    return m_name;
}
void OAIIosModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIosModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIosModel::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPerIosVersionInfo> OAIIosModel::getPerVersionInfo() const {
    return m_per_version_info;
}
void OAIIosModel::setPerVersionInfo(const QList<OAIPerIosVersionInfo> &per_version_info) {
    m_per_version_info = per_version_info;
    m_per_version_info_isSet = true;
}

bool OAIIosModel::is_per_version_info_Set() const{
    return m_per_version_info_isSet;
}

bool OAIIosModel::is_per_version_info_Valid() const{
    return m_per_version_info_isValid;
}

qint32 OAIIosModel::getScreenDensity() const {
    return m_screen_density;
}
void OAIIosModel::setScreenDensity(const qint32 &screen_density) {
    m_screen_density = screen_density;
    m_screen_density_isSet = true;
}

bool OAIIosModel::is_screen_density_Set() const{
    return m_screen_density_isSet;
}

bool OAIIosModel::is_screen_density_Valid() const{
    return m_screen_density_isValid;
}

qint32 OAIIosModel::getScreenX() const {
    return m_screen_x;
}
void OAIIosModel::setScreenX(const qint32 &screen_x) {
    m_screen_x = screen_x;
    m_screen_x_isSet = true;
}

bool OAIIosModel::is_screen_x_Set() const{
    return m_screen_x_isSet;
}

bool OAIIosModel::is_screen_x_Valid() const{
    return m_screen_x_isValid;
}

qint32 OAIIosModel::getScreenY() const {
    return m_screen_y;
}
void OAIIosModel::setScreenY(const qint32 &screen_y) {
    m_screen_y = screen_y;
    m_screen_y_isSet = true;
}

bool OAIIosModel::is_screen_y_Set() const{
    return m_screen_y_isSet;
}

bool OAIIosModel::is_screen_y_Valid() const{
    return m_screen_y_isValid;
}

QList<QString> OAIIosModel::getSupportedVersionIds() const {
    return m_supported_version_ids;
}
void OAIIosModel::setSupportedVersionIds(const QList<QString> &supported_version_ids) {
    m_supported_version_ids = supported_version_ids;
    m_supported_version_ids_isSet = true;
}

bool OAIIosModel::is_supported_version_ids_Set() const{
    return m_supported_version_ids_isSet;
}

bool OAIIosModel::is_supported_version_ids_Valid() const{
    return m_supported_version_ids_isValid;
}

QList<QString> OAIIosModel::getTags() const {
    return m_tags;
}
void OAIIosModel::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIIosModel::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIIosModel::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIIosModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_version_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_density_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_version_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIosModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
