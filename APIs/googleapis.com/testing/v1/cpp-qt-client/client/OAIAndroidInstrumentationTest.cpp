/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAndroidInstrumentationTest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAndroidInstrumentationTest::OAIAndroidInstrumentationTest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAndroidInstrumentationTest::OAIAndroidInstrumentationTest() {
    this->initializeModel();
}

OAIAndroidInstrumentationTest::~OAIAndroidInstrumentationTest() {}

void OAIAndroidInstrumentationTest::initializeModel() {

    m_app_apk_isSet = false;
    m_app_apk_isValid = false;

    m_app_bundle_isSet = false;
    m_app_bundle_isValid = false;

    m_app_package_id_isSet = false;
    m_app_package_id_isValid = false;

    m_orchestrator_option_isSet = false;
    m_orchestrator_option_isValid = false;

    m_sharding_option_isSet = false;
    m_sharding_option_isValid = false;

    m_test_apk_isSet = false;
    m_test_apk_isValid = false;

    m_test_package_id_isSet = false;
    m_test_package_id_isValid = false;

    m_test_runner_class_isSet = false;
    m_test_runner_class_isValid = false;

    m_test_targets_isSet = false;
    m_test_targets_isValid = false;
}

void OAIAndroidInstrumentationTest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAndroidInstrumentationTest::fromJsonObject(QJsonObject json) {

    m_app_apk_isValid = ::OpenAPI::fromJsonValue(m_app_apk, json[QString("appApk")]);
    m_app_apk_isSet = !json[QString("appApk")].isNull() && m_app_apk_isValid;

    m_app_bundle_isValid = ::OpenAPI::fromJsonValue(m_app_bundle, json[QString("appBundle")]);
    m_app_bundle_isSet = !json[QString("appBundle")].isNull() && m_app_bundle_isValid;

    m_app_package_id_isValid = ::OpenAPI::fromJsonValue(m_app_package_id, json[QString("appPackageId")]);
    m_app_package_id_isSet = !json[QString("appPackageId")].isNull() && m_app_package_id_isValid;

    m_orchestrator_option_isValid = ::OpenAPI::fromJsonValue(m_orchestrator_option, json[QString("orchestratorOption")]);
    m_orchestrator_option_isSet = !json[QString("orchestratorOption")].isNull() && m_orchestrator_option_isValid;

    m_sharding_option_isValid = ::OpenAPI::fromJsonValue(m_sharding_option, json[QString("shardingOption")]);
    m_sharding_option_isSet = !json[QString("shardingOption")].isNull() && m_sharding_option_isValid;

    m_test_apk_isValid = ::OpenAPI::fromJsonValue(m_test_apk, json[QString("testApk")]);
    m_test_apk_isSet = !json[QString("testApk")].isNull() && m_test_apk_isValid;

    m_test_package_id_isValid = ::OpenAPI::fromJsonValue(m_test_package_id, json[QString("testPackageId")]);
    m_test_package_id_isSet = !json[QString("testPackageId")].isNull() && m_test_package_id_isValid;

    m_test_runner_class_isValid = ::OpenAPI::fromJsonValue(m_test_runner_class, json[QString("testRunnerClass")]);
    m_test_runner_class_isSet = !json[QString("testRunnerClass")].isNull() && m_test_runner_class_isValid;

    m_test_targets_isValid = ::OpenAPI::fromJsonValue(m_test_targets, json[QString("testTargets")]);
    m_test_targets_isSet = !json[QString("testTargets")].isNull() && m_test_targets_isValid;
}

QString OAIAndroidInstrumentationTest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAndroidInstrumentationTest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_apk.isSet()) {
        obj.insert(QString("appApk"), ::OpenAPI::toJsonValue(m_app_apk));
    }
    if (m_app_bundle.isSet()) {
        obj.insert(QString("appBundle"), ::OpenAPI::toJsonValue(m_app_bundle));
    }
    if (m_app_package_id_isSet) {
        obj.insert(QString("appPackageId"), ::OpenAPI::toJsonValue(m_app_package_id));
    }
    if (m_orchestrator_option_isSet) {
        obj.insert(QString("orchestratorOption"), ::OpenAPI::toJsonValue(m_orchestrator_option));
    }
    if (m_sharding_option.isSet()) {
        obj.insert(QString("shardingOption"), ::OpenAPI::toJsonValue(m_sharding_option));
    }
    if (m_test_apk.isSet()) {
        obj.insert(QString("testApk"), ::OpenAPI::toJsonValue(m_test_apk));
    }
    if (m_test_package_id_isSet) {
        obj.insert(QString("testPackageId"), ::OpenAPI::toJsonValue(m_test_package_id));
    }
    if (m_test_runner_class_isSet) {
        obj.insert(QString("testRunnerClass"), ::OpenAPI::toJsonValue(m_test_runner_class));
    }
    if (m_test_targets.size() > 0) {
        obj.insert(QString("testTargets"), ::OpenAPI::toJsonValue(m_test_targets));
    }
    return obj;
}

OAIFileReference OAIAndroidInstrumentationTest::getAppApk() const {
    return m_app_apk;
}
void OAIAndroidInstrumentationTest::setAppApk(const OAIFileReference &app_apk) {
    m_app_apk = app_apk;
    m_app_apk_isSet = true;
}

bool OAIAndroidInstrumentationTest::is_app_apk_Set() const{
    return m_app_apk_isSet;
}

bool OAIAndroidInstrumentationTest::is_app_apk_Valid() const{
    return m_app_apk_isValid;
}

OAIAppBundle OAIAndroidInstrumentationTest::getAppBundle() const {
    return m_app_bundle;
}
void OAIAndroidInstrumentationTest::setAppBundle(const OAIAppBundle &app_bundle) {
    m_app_bundle = app_bundle;
    m_app_bundle_isSet = true;
}

bool OAIAndroidInstrumentationTest::is_app_bundle_Set() const{
    return m_app_bundle_isSet;
}

bool OAIAndroidInstrumentationTest::is_app_bundle_Valid() const{
    return m_app_bundle_isValid;
}

QString OAIAndroidInstrumentationTest::getAppPackageId() const {
    return m_app_package_id;
}
void OAIAndroidInstrumentationTest::setAppPackageId(const QString &app_package_id) {
    m_app_package_id = app_package_id;
    m_app_package_id_isSet = true;
}

bool OAIAndroidInstrumentationTest::is_app_package_id_Set() const{
    return m_app_package_id_isSet;
}

bool OAIAndroidInstrumentationTest::is_app_package_id_Valid() const{
    return m_app_package_id_isValid;
}

QString OAIAndroidInstrumentationTest::getOrchestratorOption() const {
    return m_orchestrator_option;
}
void OAIAndroidInstrumentationTest::setOrchestratorOption(const QString &orchestrator_option) {
    m_orchestrator_option = orchestrator_option;
    m_orchestrator_option_isSet = true;
}

bool OAIAndroidInstrumentationTest::is_orchestrator_option_Set() const{
    return m_orchestrator_option_isSet;
}

bool OAIAndroidInstrumentationTest::is_orchestrator_option_Valid() const{
    return m_orchestrator_option_isValid;
}

OAIShardingOption OAIAndroidInstrumentationTest::getShardingOption() const {
    return m_sharding_option;
}
void OAIAndroidInstrumentationTest::setShardingOption(const OAIShardingOption &sharding_option) {
    m_sharding_option = sharding_option;
    m_sharding_option_isSet = true;
}

bool OAIAndroidInstrumentationTest::is_sharding_option_Set() const{
    return m_sharding_option_isSet;
}

bool OAIAndroidInstrumentationTest::is_sharding_option_Valid() const{
    return m_sharding_option_isValid;
}

OAIFileReference OAIAndroidInstrumentationTest::getTestApk() const {
    return m_test_apk;
}
void OAIAndroidInstrumentationTest::setTestApk(const OAIFileReference &test_apk) {
    m_test_apk = test_apk;
    m_test_apk_isSet = true;
}

bool OAIAndroidInstrumentationTest::is_test_apk_Set() const{
    return m_test_apk_isSet;
}

bool OAIAndroidInstrumentationTest::is_test_apk_Valid() const{
    return m_test_apk_isValid;
}

QString OAIAndroidInstrumentationTest::getTestPackageId() const {
    return m_test_package_id;
}
void OAIAndroidInstrumentationTest::setTestPackageId(const QString &test_package_id) {
    m_test_package_id = test_package_id;
    m_test_package_id_isSet = true;
}

bool OAIAndroidInstrumentationTest::is_test_package_id_Set() const{
    return m_test_package_id_isSet;
}

bool OAIAndroidInstrumentationTest::is_test_package_id_Valid() const{
    return m_test_package_id_isValid;
}

QString OAIAndroidInstrumentationTest::getTestRunnerClass() const {
    return m_test_runner_class;
}
void OAIAndroidInstrumentationTest::setTestRunnerClass(const QString &test_runner_class) {
    m_test_runner_class = test_runner_class;
    m_test_runner_class_isSet = true;
}

bool OAIAndroidInstrumentationTest::is_test_runner_class_Set() const{
    return m_test_runner_class_isSet;
}

bool OAIAndroidInstrumentationTest::is_test_runner_class_Valid() const{
    return m_test_runner_class_isValid;
}

QList<QString> OAIAndroidInstrumentationTest::getTestTargets() const {
    return m_test_targets;
}
void OAIAndroidInstrumentationTest::setTestTargets(const QList<QString> &test_targets) {
    m_test_targets = test_targets;
    m_test_targets_isSet = true;
}

bool OAIAndroidInstrumentationTest::is_test_targets_Set() const{
    return m_test_targets_isSet;
}

bool OAIAndroidInstrumentationTest::is_test_targets_Valid() const{
    return m_test_targets_isValid;
}

bool OAIAndroidInstrumentationTest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_apk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_bundle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orchestrator_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharding_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_apk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_runner_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAndroidInstrumentationTest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
