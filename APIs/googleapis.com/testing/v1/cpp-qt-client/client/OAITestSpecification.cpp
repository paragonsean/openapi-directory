/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestSpecification::OAITestSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestSpecification::OAITestSpecification() {
    this->initializeModel();
}

OAITestSpecification::~OAITestSpecification() {}

void OAITestSpecification::initializeModel() {

    m_android_instrumentation_test_isSet = false;
    m_android_instrumentation_test_isValid = false;

    m_android_robo_test_isSet = false;
    m_android_robo_test_isValid = false;

    m_android_test_loop_isSet = false;
    m_android_test_loop_isValid = false;

    m_disable_performance_metrics_isSet = false;
    m_disable_performance_metrics_isValid = false;

    m_disable_video_recording_isSet = false;
    m_disable_video_recording_isValid = false;

    m_ios_robo_test_isSet = false;
    m_ios_robo_test_isValid = false;

    m_ios_test_loop_isSet = false;
    m_ios_test_loop_isValid = false;

    m_ios_test_setup_isSet = false;
    m_ios_test_setup_isValid = false;

    m_ios_xc_test_isSet = false;
    m_ios_xc_test_isValid = false;

    m_test_setup_isSet = false;
    m_test_setup_isValid = false;

    m_test_timeout_isSet = false;
    m_test_timeout_isValid = false;
}

void OAITestSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestSpecification::fromJsonObject(QJsonObject json) {

    m_android_instrumentation_test_isValid = ::OpenAPI::fromJsonValue(m_android_instrumentation_test, json[QString("androidInstrumentationTest")]);
    m_android_instrumentation_test_isSet = !json[QString("androidInstrumentationTest")].isNull() && m_android_instrumentation_test_isValid;

    m_android_robo_test_isValid = ::OpenAPI::fromJsonValue(m_android_robo_test, json[QString("androidRoboTest")]);
    m_android_robo_test_isSet = !json[QString("androidRoboTest")].isNull() && m_android_robo_test_isValid;

    m_android_test_loop_isValid = ::OpenAPI::fromJsonValue(m_android_test_loop, json[QString("androidTestLoop")]);
    m_android_test_loop_isSet = !json[QString("androidTestLoop")].isNull() && m_android_test_loop_isValid;

    m_disable_performance_metrics_isValid = ::OpenAPI::fromJsonValue(m_disable_performance_metrics, json[QString("disablePerformanceMetrics")]);
    m_disable_performance_metrics_isSet = !json[QString("disablePerformanceMetrics")].isNull() && m_disable_performance_metrics_isValid;

    m_disable_video_recording_isValid = ::OpenAPI::fromJsonValue(m_disable_video_recording, json[QString("disableVideoRecording")]);
    m_disable_video_recording_isSet = !json[QString("disableVideoRecording")].isNull() && m_disable_video_recording_isValid;

    m_ios_robo_test_isValid = ::OpenAPI::fromJsonValue(m_ios_robo_test, json[QString("iosRoboTest")]);
    m_ios_robo_test_isSet = !json[QString("iosRoboTest")].isNull() && m_ios_robo_test_isValid;

    m_ios_test_loop_isValid = ::OpenAPI::fromJsonValue(m_ios_test_loop, json[QString("iosTestLoop")]);
    m_ios_test_loop_isSet = !json[QString("iosTestLoop")].isNull() && m_ios_test_loop_isValid;

    m_ios_test_setup_isValid = ::OpenAPI::fromJsonValue(m_ios_test_setup, json[QString("iosTestSetup")]);
    m_ios_test_setup_isSet = !json[QString("iosTestSetup")].isNull() && m_ios_test_setup_isValid;

    m_ios_xc_test_isValid = ::OpenAPI::fromJsonValue(m_ios_xc_test, json[QString("iosXcTest")]);
    m_ios_xc_test_isSet = !json[QString("iosXcTest")].isNull() && m_ios_xc_test_isValid;

    m_test_setup_isValid = ::OpenAPI::fromJsonValue(m_test_setup, json[QString("testSetup")]);
    m_test_setup_isSet = !json[QString("testSetup")].isNull() && m_test_setup_isValid;

    m_test_timeout_isValid = ::OpenAPI::fromJsonValue(m_test_timeout, json[QString("testTimeout")]);
    m_test_timeout_isSet = !json[QString("testTimeout")].isNull() && m_test_timeout_isValid;
}

QString OAITestSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_android_instrumentation_test.isSet()) {
        obj.insert(QString("androidInstrumentationTest"), ::OpenAPI::toJsonValue(m_android_instrumentation_test));
    }
    if (m_android_robo_test.isSet()) {
        obj.insert(QString("androidRoboTest"), ::OpenAPI::toJsonValue(m_android_robo_test));
    }
    if (m_android_test_loop.isSet()) {
        obj.insert(QString("androidTestLoop"), ::OpenAPI::toJsonValue(m_android_test_loop));
    }
    if (m_disable_performance_metrics_isSet) {
        obj.insert(QString("disablePerformanceMetrics"), ::OpenAPI::toJsonValue(m_disable_performance_metrics));
    }
    if (m_disable_video_recording_isSet) {
        obj.insert(QString("disableVideoRecording"), ::OpenAPI::toJsonValue(m_disable_video_recording));
    }
    if (m_ios_robo_test.isSet()) {
        obj.insert(QString("iosRoboTest"), ::OpenAPI::toJsonValue(m_ios_robo_test));
    }
    if (m_ios_test_loop.isSet()) {
        obj.insert(QString("iosTestLoop"), ::OpenAPI::toJsonValue(m_ios_test_loop));
    }
    if (m_ios_test_setup.isSet()) {
        obj.insert(QString("iosTestSetup"), ::OpenAPI::toJsonValue(m_ios_test_setup));
    }
    if (m_ios_xc_test.isSet()) {
        obj.insert(QString("iosXcTest"), ::OpenAPI::toJsonValue(m_ios_xc_test));
    }
    if (m_test_setup.isSet()) {
        obj.insert(QString("testSetup"), ::OpenAPI::toJsonValue(m_test_setup));
    }
    if (m_test_timeout_isSet) {
        obj.insert(QString("testTimeout"), ::OpenAPI::toJsonValue(m_test_timeout));
    }
    return obj;
}

OAIAndroidInstrumentationTest OAITestSpecification::getAndroidInstrumentationTest() const {
    return m_android_instrumentation_test;
}
void OAITestSpecification::setAndroidInstrumentationTest(const OAIAndroidInstrumentationTest &android_instrumentation_test) {
    m_android_instrumentation_test = android_instrumentation_test;
    m_android_instrumentation_test_isSet = true;
}

bool OAITestSpecification::is_android_instrumentation_test_Set() const{
    return m_android_instrumentation_test_isSet;
}

bool OAITestSpecification::is_android_instrumentation_test_Valid() const{
    return m_android_instrumentation_test_isValid;
}

OAIAndroidRoboTest OAITestSpecification::getAndroidRoboTest() const {
    return m_android_robo_test;
}
void OAITestSpecification::setAndroidRoboTest(const OAIAndroidRoboTest &android_robo_test) {
    m_android_robo_test = android_robo_test;
    m_android_robo_test_isSet = true;
}

bool OAITestSpecification::is_android_robo_test_Set() const{
    return m_android_robo_test_isSet;
}

bool OAITestSpecification::is_android_robo_test_Valid() const{
    return m_android_robo_test_isValid;
}

OAIAndroidTestLoop OAITestSpecification::getAndroidTestLoop() const {
    return m_android_test_loop;
}
void OAITestSpecification::setAndroidTestLoop(const OAIAndroidTestLoop &android_test_loop) {
    m_android_test_loop = android_test_loop;
    m_android_test_loop_isSet = true;
}

bool OAITestSpecification::is_android_test_loop_Set() const{
    return m_android_test_loop_isSet;
}

bool OAITestSpecification::is_android_test_loop_Valid() const{
    return m_android_test_loop_isValid;
}

bool OAITestSpecification::isDisablePerformanceMetrics() const {
    return m_disable_performance_metrics;
}
void OAITestSpecification::setDisablePerformanceMetrics(const bool &disable_performance_metrics) {
    m_disable_performance_metrics = disable_performance_metrics;
    m_disable_performance_metrics_isSet = true;
}

bool OAITestSpecification::is_disable_performance_metrics_Set() const{
    return m_disable_performance_metrics_isSet;
}

bool OAITestSpecification::is_disable_performance_metrics_Valid() const{
    return m_disable_performance_metrics_isValid;
}

bool OAITestSpecification::isDisableVideoRecording() const {
    return m_disable_video_recording;
}
void OAITestSpecification::setDisableVideoRecording(const bool &disable_video_recording) {
    m_disable_video_recording = disable_video_recording;
    m_disable_video_recording_isSet = true;
}

bool OAITestSpecification::is_disable_video_recording_Set() const{
    return m_disable_video_recording_isSet;
}

bool OAITestSpecification::is_disable_video_recording_Valid() const{
    return m_disable_video_recording_isValid;
}

OAIIosRoboTest OAITestSpecification::getIosRoboTest() const {
    return m_ios_robo_test;
}
void OAITestSpecification::setIosRoboTest(const OAIIosRoboTest &ios_robo_test) {
    m_ios_robo_test = ios_robo_test;
    m_ios_robo_test_isSet = true;
}

bool OAITestSpecification::is_ios_robo_test_Set() const{
    return m_ios_robo_test_isSet;
}

bool OAITestSpecification::is_ios_robo_test_Valid() const{
    return m_ios_robo_test_isValid;
}

OAIIosTestLoop OAITestSpecification::getIosTestLoop() const {
    return m_ios_test_loop;
}
void OAITestSpecification::setIosTestLoop(const OAIIosTestLoop &ios_test_loop) {
    m_ios_test_loop = ios_test_loop;
    m_ios_test_loop_isSet = true;
}

bool OAITestSpecification::is_ios_test_loop_Set() const{
    return m_ios_test_loop_isSet;
}

bool OAITestSpecification::is_ios_test_loop_Valid() const{
    return m_ios_test_loop_isValid;
}

OAIIosTestSetup OAITestSpecification::getIosTestSetup() const {
    return m_ios_test_setup;
}
void OAITestSpecification::setIosTestSetup(const OAIIosTestSetup &ios_test_setup) {
    m_ios_test_setup = ios_test_setup;
    m_ios_test_setup_isSet = true;
}

bool OAITestSpecification::is_ios_test_setup_Set() const{
    return m_ios_test_setup_isSet;
}

bool OAITestSpecification::is_ios_test_setup_Valid() const{
    return m_ios_test_setup_isValid;
}

OAIIosXcTest OAITestSpecification::getIosXcTest() const {
    return m_ios_xc_test;
}
void OAITestSpecification::setIosXcTest(const OAIIosXcTest &ios_xc_test) {
    m_ios_xc_test = ios_xc_test;
    m_ios_xc_test_isSet = true;
}

bool OAITestSpecification::is_ios_xc_test_Set() const{
    return m_ios_xc_test_isSet;
}

bool OAITestSpecification::is_ios_xc_test_Valid() const{
    return m_ios_xc_test_isValid;
}

OAITestSetup OAITestSpecification::getTestSetup() const {
    return m_test_setup;
}
void OAITestSpecification::setTestSetup(const OAITestSetup &test_setup) {
    m_test_setup = test_setup;
    m_test_setup_isSet = true;
}

bool OAITestSpecification::is_test_setup_Set() const{
    return m_test_setup_isSet;
}

bool OAITestSpecification::is_test_setup_Valid() const{
    return m_test_setup_isValid;
}

QString OAITestSpecification::getTestTimeout() const {
    return m_test_timeout;
}
void OAITestSpecification::setTestTimeout(const QString &test_timeout) {
    m_test_timeout = test_timeout;
    m_test_timeout_isSet = true;
}

bool OAITestSpecification::is_test_timeout_Set() const{
    return m_test_timeout_isSet;
}

bool OAITestSpecification::is_test_timeout_Valid() const{
    return m_test_timeout_isValid;
}

bool OAITestSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android_instrumentation_test.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_robo_test.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_test_loop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_performance_metrics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_video_recording_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_robo_test.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_test_loop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_test_setup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_xc_test.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_setup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
