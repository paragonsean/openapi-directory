/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestSetup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestSetup::OAITestSetup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestSetup::OAITestSetup() {
    this->initializeModel();
}

OAITestSetup::~OAITestSetup() {}

void OAITestSetup::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_additional_apks_isSet = false;
    m_additional_apks_isValid = false;

    m_directories_to_pull_isSet = false;
    m_directories_to_pull_isValid = false;

    m_dont_autogrant_permissions_isSet = false;
    m_dont_autogrant_permissions_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_files_to_push_isSet = false;
    m_files_to_push_isValid = false;

    m_initial_setup_apks_isSet = false;
    m_initial_setup_apks_isValid = false;

    m_network_profile_isSet = false;
    m_network_profile_isValid = false;

    m_systrace_isSet = false;
    m_systrace_isValid = false;
}

void OAITestSetup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestSetup::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_additional_apks_isValid = ::OpenAPI::fromJsonValue(m_additional_apks, json[QString("additionalApks")]);
    m_additional_apks_isSet = !json[QString("additionalApks")].isNull() && m_additional_apks_isValid;

    m_directories_to_pull_isValid = ::OpenAPI::fromJsonValue(m_directories_to_pull, json[QString("directoriesToPull")]);
    m_directories_to_pull_isSet = !json[QString("directoriesToPull")].isNull() && m_directories_to_pull_isValid;

    m_dont_autogrant_permissions_isValid = ::OpenAPI::fromJsonValue(m_dont_autogrant_permissions, json[QString("dontAutograntPermissions")]);
    m_dont_autogrant_permissions_isSet = !json[QString("dontAutograntPermissions")].isNull() && m_dont_autogrant_permissions_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_files_to_push_isValid = ::OpenAPI::fromJsonValue(m_files_to_push, json[QString("filesToPush")]);
    m_files_to_push_isSet = !json[QString("filesToPush")].isNull() && m_files_to_push_isValid;

    m_initial_setup_apks_isValid = ::OpenAPI::fromJsonValue(m_initial_setup_apks, json[QString("initialSetupApks")]);
    m_initial_setup_apks_isSet = !json[QString("initialSetupApks")].isNull() && m_initial_setup_apks_isValid;

    m_network_profile_isValid = ::OpenAPI::fromJsonValue(m_network_profile, json[QString("networkProfile")]);
    m_network_profile_isSet = !json[QString("networkProfile")].isNull() && m_network_profile_isValid;

    m_systrace_isValid = ::OpenAPI::fromJsonValue(m_systrace, json[QString("systrace")]);
    m_systrace_isSet = !json[QString("systrace")].isNull() && m_systrace_isValid;
}

QString OAITestSetup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestSetup::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_additional_apks.size() > 0) {
        obj.insert(QString("additionalApks"), ::OpenAPI::toJsonValue(m_additional_apks));
    }
    if (m_directories_to_pull.size() > 0) {
        obj.insert(QString("directoriesToPull"), ::OpenAPI::toJsonValue(m_directories_to_pull));
    }
    if (m_dont_autogrant_permissions_isSet) {
        obj.insert(QString("dontAutograntPermissions"), ::OpenAPI::toJsonValue(m_dont_autogrant_permissions));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_files_to_push.size() > 0) {
        obj.insert(QString("filesToPush"), ::OpenAPI::toJsonValue(m_files_to_push));
    }
    if (m_initial_setup_apks.size() > 0) {
        obj.insert(QString("initialSetupApks"), ::OpenAPI::toJsonValue(m_initial_setup_apks));
    }
    if (m_network_profile_isSet) {
        obj.insert(QString("networkProfile"), ::OpenAPI::toJsonValue(m_network_profile));
    }
    if (m_systrace.isSet()) {
        obj.insert(QString("systrace"), ::OpenAPI::toJsonValue(m_systrace));
    }
    return obj;
}

OAIAccount OAITestSetup::getAccount() const {
    return m_account;
}
void OAITestSetup::setAccount(const OAIAccount &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAITestSetup::is_account_Set() const{
    return m_account_isSet;
}

bool OAITestSetup::is_account_Valid() const{
    return m_account_isValid;
}

QList<OAIApk> OAITestSetup::getAdditionalApks() const {
    return m_additional_apks;
}
void OAITestSetup::setAdditionalApks(const QList<OAIApk> &additional_apks) {
    m_additional_apks = additional_apks;
    m_additional_apks_isSet = true;
}

bool OAITestSetup::is_additional_apks_Set() const{
    return m_additional_apks_isSet;
}

bool OAITestSetup::is_additional_apks_Valid() const{
    return m_additional_apks_isValid;
}

QList<QString> OAITestSetup::getDirectoriesToPull() const {
    return m_directories_to_pull;
}
void OAITestSetup::setDirectoriesToPull(const QList<QString> &directories_to_pull) {
    m_directories_to_pull = directories_to_pull;
    m_directories_to_pull_isSet = true;
}

bool OAITestSetup::is_directories_to_pull_Set() const{
    return m_directories_to_pull_isSet;
}

bool OAITestSetup::is_directories_to_pull_Valid() const{
    return m_directories_to_pull_isValid;
}

bool OAITestSetup::isDontAutograntPermissions() const {
    return m_dont_autogrant_permissions;
}
void OAITestSetup::setDontAutograntPermissions(const bool &dont_autogrant_permissions) {
    m_dont_autogrant_permissions = dont_autogrant_permissions;
    m_dont_autogrant_permissions_isSet = true;
}

bool OAITestSetup::is_dont_autogrant_permissions_Set() const{
    return m_dont_autogrant_permissions_isSet;
}

bool OAITestSetup::is_dont_autogrant_permissions_Valid() const{
    return m_dont_autogrant_permissions_isValid;
}

QList<OAIEnvironmentVariable> OAITestSetup::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAITestSetup::setEnvironmentVariables(const QList<OAIEnvironmentVariable> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAITestSetup::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAITestSetup::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QList<OAIDeviceFile> OAITestSetup::getFilesToPush() const {
    return m_files_to_push;
}
void OAITestSetup::setFilesToPush(const QList<OAIDeviceFile> &files_to_push) {
    m_files_to_push = files_to_push;
    m_files_to_push_isSet = true;
}

bool OAITestSetup::is_files_to_push_Set() const{
    return m_files_to_push_isSet;
}

bool OAITestSetup::is_files_to_push_Valid() const{
    return m_files_to_push_isValid;
}

QList<OAIApk> OAITestSetup::getInitialSetupApks() const {
    return m_initial_setup_apks;
}
void OAITestSetup::setInitialSetupApks(const QList<OAIApk> &initial_setup_apks) {
    m_initial_setup_apks = initial_setup_apks;
    m_initial_setup_apks_isSet = true;
}

bool OAITestSetup::is_initial_setup_apks_Set() const{
    return m_initial_setup_apks_isSet;
}

bool OAITestSetup::is_initial_setup_apks_Valid() const{
    return m_initial_setup_apks_isValid;
}

QString OAITestSetup::getNetworkProfile() const {
    return m_network_profile;
}
void OAITestSetup::setNetworkProfile(const QString &network_profile) {
    m_network_profile = network_profile;
    m_network_profile_isSet = true;
}

bool OAITestSetup::is_network_profile_Set() const{
    return m_network_profile_isSet;
}

bool OAITestSetup::is_network_profile_Valid() const{
    return m_network_profile_isValid;
}

OAISystraceSetup OAITestSetup::getSystrace() const {
    return m_systrace;
}
void OAITestSetup::setSystrace(const OAISystraceSetup &systrace) {
    m_systrace = systrace;
    m_systrace_isSet = true;
}

bool OAITestSetup::is_systrace_Set() const{
    return m_systrace_isSet;
}

bool OAITestSetup::is_systrace_Valid() const{
    return m_systrace_isValid;
}

bool OAITestSetup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_apks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_directories_to_pull.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_autogrant_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_to_push.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_setup_apks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_systrace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestSetup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
