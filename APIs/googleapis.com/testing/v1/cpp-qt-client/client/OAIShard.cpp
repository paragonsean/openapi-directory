/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShard::OAIShard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShard::OAIShard() {
    this->initializeModel();
}

OAIShard::~OAIShard() {}

void OAIShard::initializeModel() {

    m_estimated_shard_duration_isSet = false;
    m_estimated_shard_duration_isValid = false;

    m_num_shards_isSet = false;
    m_num_shards_isValid = false;

    m_shard_index_isSet = false;
    m_shard_index_isValid = false;

    m_test_targets_for_shard_isSet = false;
    m_test_targets_for_shard_isValid = false;
}

void OAIShard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShard::fromJsonObject(QJsonObject json) {

    m_estimated_shard_duration_isValid = ::OpenAPI::fromJsonValue(m_estimated_shard_duration, json[QString("estimatedShardDuration")]);
    m_estimated_shard_duration_isSet = !json[QString("estimatedShardDuration")].isNull() && m_estimated_shard_duration_isValid;

    m_num_shards_isValid = ::OpenAPI::fromJsonValue(m_num_shards, json[QString("numShards")]);
    m_num_shards_isSet = !json[QString("numShards")].isNull() && m_num_shards_isValid;

    m_shard_index_isValid = ::OpenAPI::fromJsonValue(m_shard_index, json[QString("shardIndex")]);
    m_shard_index_isSet = !json[QString("shardIndex")].isNull() && m_shard_index_isValid;

    m_test_targets_for_shard_isValid = ::OpenAPI::fromJsonValue(m_test_targets_for_shard, json[QString("testTargetsForShard")]);
    m_test_targets_for_shard_isSet = !json[QString("testTargetsForShard")].isNull() && m_test_targets_for_shard_isValid;
}

QString OAIShard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShard::asJsonObject() const {
    QJsonObject obj;
    if (m_estimated_shard_duration_isSet) {
        obj.insert(QString("estimatedShardDuration"), ::OpenAPI::toJsonValue(m_estimated_shard_duration));
    }
    if (m_num_shards_isSet) {
        obj.insert(QString("numShards"), ::OpenAPI::toJsonValue(m_num_shards));
    }
    if (m_shard_index_isSet) {
        obj.insert(QString("shardIndex"), ::OpenAPI::toJsonValue(m_shard_index));
    }
    if (m_test_targets_for_shard.isSet()) {
        obj.insert(QString("testTargetsForShard"), ::OpenAPI::toJsonValue(m_test_targets_for_shard));
    }
    return obj;
}

QString OAIShard::getEstimatedShardDuration() const {
    return m_estimated_shard_duration;
}
void OAIShard::setEstimatedShardDuration(const QString &estimated_shard_duration) {
    m_estimated_shard_duration = estimated_shard_duration;
    m_estimated_shard_duration_isSet = true;
}

bool OAIShard::is_estimated_shard_duration_Set() const{
    return m_estimated_shard_duration_isSet;
}

bool OAIShard::is_estimated_shard_duration_Valid() const{
    return m_estimated_shard_duration_isValid;
}

qint32 OAIShard::getNumShards() const {
    return m_num_shards;
}
void OAIShard::setNumShards(const qint32 &num_shards) {
    m_num_shards = num_shards;
    m_num_shards_isSet = true;
}

bool OAIShard::is_num_shards_Set() const{
    return m_num_shards_isSet;
}

bool OAIShard::is_num_shards_Valid() const{
    return m_num_shards_isValid;
}

qint32 OAIShard::getShardIndex() const {
    return m_shard_index;
}
void OAIShard::setShardIndex(const qint32 &shard_index) {
    m_shard_index = shard_index;
    m_shard_index_isSet = true;
}

bool OAIShard::is_shard_index_Set() const{
    return m_shard_index_isSet;
}

bool OAIShard::is_shard_index_Valid() const{
    return m_shard_index_isValid;
}

OAITestTargetsForShard OAIShard::getTestTargetsForShard() const {
    return m_test_targets_for_shard;
}
void OAIShard::setTestTargetsForShard(const OAITestTargetsForShard &test_targets_for_shard) {
    m_test_targets_for_shard = test_targets_for_shard;
    m_test_targets_for_shard_isSet = true;
}

bool OAIShard::is_test_targets_for_shard_Set() const{
    return m_test_targets_for_shard_isSet;
}

bool OAIShard::is_test_targets_for_shard_Valid() const{
    return m_test_targets_for_shard_isValid;
}

bool OAIShard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estimated_shard_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_shards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_targets_for_shard.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
