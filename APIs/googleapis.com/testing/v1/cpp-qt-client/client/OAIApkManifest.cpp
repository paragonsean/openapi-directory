/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApkManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApkManifest::OAIApkManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApkManifest::OAIApkManifest() {
    this->initializeModel();
}

OAIApkManifest::~OAIApkManifest() {}

void OAIApkManifest::initializeModel() {

    m_application_label_isSet = false;
    m_application_label_isValid = false;

    m_intent_filters_isSet = false;
    m_intent_filters_isValid = false;

    m_max_sdk_version_isSet = false;
    m_max_sdk_version_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_min_sdk_version_isSet = false;
    m_min_sdk_version_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_target_sdk_version_isSet = false;
    m_target_sdk_version_isValid = false;

    m_uses_feature_isSet = false;
    m_uses_feature_isValid = false;

    m_uses_permission_isSet = false;
    m_uses_permission_isValid = false;

    m_version_code_isSet = false;
    m_version_code_isValid = false;

    m_version_name_isSet = false;
    m_version_name_isValid = false;
}

void OAIApkManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApkManifest::fromJsonObject(QJsonObject json) {

    m_application_label_isValid = ::OpenAPI::fromJsonValue(m_application_label, json[QString("applicationLabel")]);
    m_application_label_isSet = !json[QString("applicationLabel")].isNull() && m_application_label_isValid;

    m_intent_filters_isValid = ::OpenAPI::fromJsonValue(m_intent_filters, json[QString("intentFilters")]);
    m_intent_filters_isSet = !json[QString("intentFilters")].isNull() && m_intent_filters_isValid;

    m_max_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_max_sdk_version, json[QString("maxSdkVersion")]);
    m_max_sdk_version_isSet = !json[QString("maxSdkVersion")].isNull() && m_max_sdk_version_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_min_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_min_sdk_version, json[QString("minSdkVersion")]);
    m_min_sdk_version_isSet = !json[QString("minSdkVersion")].isNull() && m_min_sdk_version_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_target_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_target_sdk_version, json[QString("targetSdkVersion")]);
    m_target_sdk_version_isSet = !json[QString("targetSdkVersion")].isNull() && m_target_sdk_version_isValid;

    m_uses_feature_isValid = ::OpenAPI::fromJsonValue(m_uses_feature, json[QString("usesFeature")]);
    m_uses_feature_isSet = !json[QString("usesFeature")].isNull() && m_uses_feature_isValid;

    m_uses_permission_isValid = ::OpenAPI::fromJsonValue(m_uses_permission, json[QString("usesPermission")]);
    m_uses_permission_isSet = !json[QString("usesPermission")].isNull() && m_uses_permission_isValid;

    m_version_code_isValid = ::OpenAPI::fromJsonValue(m_version_code, json[QString("versionCode")]);
    m_version_code_isSet = !json[QString("versionCode")].isNull() && m_version_code_isValid;

    m_version_name_isValid = ::OpenAPI::fromJsonValue(m_version_name, json[QString("versionName")]);
    m_version_name_isSet = !json[QString("versionName")].isNull() && m_version_name_isValid;
}

QString OAIApkManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApkManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_label_isSet) {
        obj.insert(QString("applicationLabel"), ::OpenAPI::toJsonValue(m_application_label));
    }
    if (m_intent_filters.size() > 0) {
        obj.insert(QString("intentFilters"), ::OpenAPI::toJsonValue(m_intent_filters));
    }
    if (m_max_sdk_version_isSet) {
        obj.insert(QString("maxSdkVersion"), ::OpenAPI::toJsonValue(m_max_sdk_version));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_min_sdk_version_isSet) {
        obj.insert(QString("minSdkVersion"), ::OpenAPI::toJsonValue(m_min_sdk_version));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_target_sdk_version_isSet) {
        obj.insert(QString("targetSdkVersion"), ::OpenAPI::toJsonValue(m_target_sdk_version));
    }
    if (m_uses_feature.size() > 0) {
        obj.insert(QString("usesFeature"), ::OpenAPI::toJsonValue(m_uses_feature));
    }
    if (m_uses_permission.size() > 0) {
        obj.insert(QString("usesPermission"), ::OpenAPI::toJsonValue(m_uses_permission));
    }
    if (m_version_code_isSet) {
        obj.insert(QString("versionCode"), ::OpenAPI::toJsonValue(m_version_code));
    }
    if (m_version_name_isSet) {
        obj.insert(QString("versionName"), ::OpenAPI::toJsonValue(m_version_name));
    }
    return obj;
}

QString OAIApkManifest::getApplicationLabel() const {
    return m_application_label;
}
void OAIApkManifest::setApplicationLabel(const QString &application_label) {
    m_application_label = application_label;
    m_application_label_isSet = true;
}

bool OAIApkManifest::is_application_label_Set() const{
    return m_application_label_isSet;
}

bool OAIApkManifest::is_application_label_Valid() const{
    return m_application_label_isValid;
}

QList<OAIIntentFilter> OAIApkManifest::getIntentFilters() const {
    return m_intent_filters;
}
void OAIApkManifest::setIntentFilters(const QList<OAIIntentFilter> &intent_filters) {
    m_intent_filters = intent_filters;
    m_intent_filters_isSet = true;
}

bool OAIApkManifest::is_intent_filters_Set() const{
    return m_intent_filters_isSet;
}

bool OAIApkManifest::is_intent_filters_Valid() const{
    return m_intent_filters_isValid;
}

qint32 OAIApkManifest::getMaxSdkVersion() const {
    return m_max_sdk_version;
}
void OAIApkManifest::setMaxSdkVersion(const qint32 &max_sdk_version) {
    m_max_sdk_version = max_sdk_version;
    m_max_sdk_version_isSet = true;
}

bool OAIApkManifest::is_max_sdk_version_Set() const{
    return m_max_sdk_version_isSet;
}

bool OAIApkManifest::is_max_sdk_version_Valid() const{
    return m_max_sdk_version_isValid;
}

QList<OAIMetadata> OAIApkManifest::getMetadata() const {
    return m_metadata;
}
void OAIApkManifest::setMetadata(const QList<OAIMetadata> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIApkManifest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIApkManifest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAIApkManifest::getMinSdkVersion() const {
    return m_min_sdk_version;
}
void OAIApkManifest::setMinSdkVersion(const qint32 &min_sdk_version) {
    m_min_sdk_version = min_sdk_version;
    m_min_sdk_version_isSet = true;
}

bool OAIApkManifest::is_min_sdk_version_Set() const{
    return m_min_sdk_version_isSet;
}

bool OAIApkManifest::is_min_sdk_version_Valid() const{
    return m_min_sdk_version_isValid;
}

QString OAIApkManifest::getPackageName() const {
    return m_package_name;
}
void OAIApkManifest::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIApkManifest::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIApkManifest::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QList<OAIService> OAIApkManifest::getServices() const {
    return m_services;
}
void OAIApkManifest::setServices(const QList<OAIService> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIApkManifest::is_services_Set() const{
    return m_services_isSet;
}

bool OAIApkManifest::is_services_Valid() const{
    return m_services_isValid;
}

qint32 OAIApkManifest::getTargetSdkVersion() const {
    return m_target_sdk_version;
}
void OAIApkManifest::setTargetSdkVersion(const qint32 &target_sdk_version) {
    m_target_sdk_version = target_sdk_version;
    m_target_sdk_version_isSet = true;
}

bool OAIApkManifest::is_target_sdk_version_Set() const{
    return m_target_sdk_version_isSet;
}

bool OAIApkManifest::is_target_sdk_version_Valid() const{
    return m_target_sdk_version_isValid;
}

QList<OAIUsesFeature> OAIApkManifest::getUsesFeature() const {
    return m_uses_feature;
}
void OAIApkManifest::setUsesFeature(const QList<OAIUsesFeature> &uses_feature) {
    m_uses_feature = uses_feature;
    m_uses_feature_isSet = true;
}

bool OAIApkManifest::is_uses_feature_Set() const{
    return m_uses_feature_isSet;
}

bool OAIApkManifest::is_uses_feature_Valid() const{
    return m_uses_feature_isValid;
}

QList<QString> OAIApkManifest::getUsesPermission() const {
    return m_uses_permission;
}
void OAIApkManifest::setUsesPermission(const QList<QString> &uses_permission) {
    m_uses_permission = uses_permission;
    m_uses_permission_isSet = true;
}

bool OAIApkManifest::is_uses_permission_Set() const{
    return m_uses_permission_isSet;
}

bool OAIApkManifest::is_uses_permission_Valid() const{
    return m_uses_permission_isValid;
}

QString OAIApkManifest::getVersionCode() const {
    return m_version_code;
}
void OAIApkManifest::setVersionCode(const QString &version_code) {
    m_version_code = version_code;
    m_version_code_isSet = true;
}

bool OAIApkManifest::is_version_code_Set() const{
    return m_version_code_isSet;
}

bool OAIApkManifest::is_version_code_Valid() const{
    return m_version_code_isValid;
}

QString OAIApkManifest::getVersionName() const {
    return m_version_name;
}
void OAIApkManifest::setVersionName(const QString &version_name) {
    m_version_name = version_name;
    m_version_name_isSet = true;
}

bool OAIApkManifest::is_version_name_Set() const{
    return m_version_name_isSet;
}

bool OAIApkManifest::is_version_name_Valid() const{
    return m_version_name_isValid;
}

bool OAIApkManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_feature.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_permission.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApkManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
