/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShardingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShardingOption::OAIShardingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShardingOption::OAIShardingOption() {
    this->initializeModel();
}

OAIShardingOption::~OAIShardingOption() {}

void OAIShardingOption::initializeModel() {

    m_manual_sharding_isSet = false;
    m_manual_sharding_isValid = false;

    m_smart_sharding_isSet = false;
    m_smart_sharding_isValid = false;

    m_uniform_sharding_isSet = false;
    m_uniform_sharding_isValid = false;
}

void OAIShardingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShardingOption::fromJsonObject(QJsonObject json) {

    m_manual_sharding_isValid = ::OpenAPI::fromJsonValue(m_manual_sharding, json[QString("manualSharding")]);
    m_manual_sharding_isSet = !json[QString("manualSharding")].isNull() && m_manual_sharding_isValid;

    m_smart_sharding_isValid = ::OpenAPI::fromJsonValue(m_smart_sharding, json[QString("smartSharding")]);
    m_smart_sharding_isSet = !json[QString("smartSharding")].isNull() && m_smart_sharding_isValid;

    m_uniform_sharding_isValid = ::OpenAPI::fromJsonValue(m_uniform_sharding, json[QString("uniformSharding")]);
    m_uniform_sharding_isSet = !json[QString("uniformSharding")].isNull() && m_uniform_sharding_isValid;
}

QString OAIShardingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShardingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_manual_sharding.isSet()) {
        obj.insert(QString("manualSharding"), ::OpenAPI::toJsonValue(m_manual_sharding));
    }
    if (m_smart_sharding.isSet()) {
        obj.insert(QString("smartSharding"), ::OpenAPI::toJsonValue(m_smart_sharding));
    }
    if (m_uniform_sharding.isSet()) {
        obj.insert(QString("uniformSharding"), ::OpenAPI::toJsonValue(m_uniform_sharding));
    }
    return obj;
}

OAIManualSharding OAIShardingOption::getManualSharding() const {
    return m_manual_sharding;
}
void OAIShardingOption::setManualSharding(const OAIManualSharding &manual_sharding) {
    m_manual_sharding = manual_sharding;
    m_manual_sharding_isSet = true;
}

bool OAIShardingOption::is_manual_sharding_Set() const{
    return m_manual_sharding_isSet;
}

bool OAIShardingOption::is_manual_sharding_Valid() const{
    return m_manual_sharding_isValid;
}

OAISmartSharding OAIShardingOption::getSmartSharding() const {
    return m_smart_sharding;
}
void OAIShardingOption::setSmartSharding(const OAISmartSharding &smart_sharding) {
    m_smart_sharding = smart_sharding;
    m_smart_sharding_isSet = true;
}

bool OAIShardingOption::is_smart_sharding_Set() const{
    return m_smart_sharding_isSet;
}

bool OAIShardingOption::is_smart_sharding_Valid() const{
    return m_smart_sharding_isValid;
}

OAIUniformSharding OAIShardingOption::getUniformSharding() const {
    return m_uniform_sharding;
}
void OAIShardingOption::setUniformSharding(const OAIUniformSharding &uniform_sharding) {
    m_uniform_sharding = uniform_sharding;
    m_uniform_sharding_isSet = true;
}

bool OAIShardingOption::is_uniform_sharding_Set() const{
    return m_uniform_sharding_isSet;
}

bool OAIShardingOption::is_uniform_sharding_Valid() const{
    return m_uniform_sharding_isValid;
}

bool OAIShardingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_manual_sharding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_sharding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uniform_sharding.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShardingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
