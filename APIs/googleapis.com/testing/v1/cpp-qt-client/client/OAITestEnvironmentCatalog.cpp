/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestEnvironmentCatalog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestEnvironmentCatalog::OAITestEnvironmentCatalog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestEnvironmentCatalog::OAITestEnvironmentCatalog() {
    this->initializeModel();
}

OAITestEnvironmentCatalog::~OAITestEnvironmentCatalog() {}

void OAITestEnvironmentCatalog::initializeModel() {

    m_android_device_catalog_isSet = false;
    m_android_device_catalog_isValid = false;

    m_device_ip_block_catalog_isSet = false;
    m_device_ip_block_catalog_isValid = false;

    m_ios_device_catalog_isSet = false;
    m_ios_device_catalog_isValid = false;

    m_network_configuration_catalog_isSet = false;
    m_network_configuration_catalog_isValid = false;

    m_software_catalog_isSet = false;
    m_software_catalog_isValid = false;
}

void OAITestEnvironmentCatalog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestEnvironmentCatalog::fromJsonObject(QJsonObject json) {

    m_android_device_catalog_isValid = ::OpenAPI::fromJsonValue(m_android_device_catalog, json[QString("androidDeviceCatalog")]);
    m_android_device_catalog_isSet = !json[QString("androidDeviceCatalog")].isNull() && m_android_device_catalog_isValid;

    m_device_ip_block_catalog_isValid = ::OpenAPI::fromJsonValue(m_device_ip_block_catalog, json[QString("deviceIpBlockCatalog")]);
    m_device_ip_block_catalog_isSet = !json[QString("deviceIpBlockCatalog")].isNull() && m_device_ip_block_catalog_isValid;

    m_ios_device_catalog_isValid = ::OpenAPI::fromJsonValue(m_ios_device_catalog, json[QString("iosDeviceCatalog")]);
    m_ios_device_catalog_isSet = !json[QString("iosDeviceCatalog")].isNull() && m_ios_device_catalog_isValid;

    m_network_configuration_catalog_isValid = ::OpenAPI::fromJsonValue(m_network_configuration_catalog, json[QString("networkConfigurationCatalog")]);
    m_network_configuration_catalog_isSet = !json[QString("networkConfigurationCatalog")].isNull() && m_network_configuration_catalog_isValid;

    m_software_catalog_isValid = ::OpenAPI::fromJsonValue(m_software_catalog, json[QString("softwareCatalog")]);
    m_software_catalog_isSet = !json[QString("softwareCatalog")].isNull() && m_software_catalog_isValid;
}

QString OAITestEnvironmentCatalog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestEnvironmentCatalog::asJsonObject() const {
    QJsonObject obj;
    if (m_android_device_catalog.isSet()) {
        obj.insert(QString("androidDeviceCatalog"), ::OpenAPI::toJsonValue(m_android_device_catalog));
    }
    if (m_device_ip_block_catalog.isSet()) {
        obj.insert(QString("deviceIpBlockCatalog"), ::OpenAPI::toJsonValue(m_device_ip_block_catalog));
    }
    if (m_ios_device_catalog.isSet()) {
        obj.insert(QString("iosDeviceCatalog"), ::OpenAPI::toJsonValue(m_ios_device_catalog));
    }
    if (m_network_configuration_catalog.isSet()) {
        obj.insert(QString("networkConfigurationCatalog"), ::OpenAPI::toJsonValue(m_network_configuration_catalog));
    }
    if (m_software_catalog.isSet()) {
        obj.insert(QString("softwareCatalog"), ::OpenAPI::toJsonValue(m_software_catalog));
    }
    return obj;
}

OAIAndroidDeviceCatalog OAITestEnvironmentCatalog::getAndroidDeviceCatalog() const {
    return m_android_device_catalog;
}
void OAITestEnvironmentCatalog::setAndroidDeviceCatalog(const OAIAndroidDeviceCatalog &android_device_catalog) {
    m_android_device_catalog = android_device_catalog;
    m_android_device_catalog_isSet = true;
}

bool OAITestEnvironmentCatalog::is_android_device_catalog_Set() const{
    return m_android_device_catalog_isSet;
}

bool OAITestEnvironmentCatalog::is_android_device_catalog_Valid() const{
    return m_android_device_catalog_isValid;
}

OAIDeviceIpBlockCatalog OAITestEnvironmentCatalog::getDeviceIpBlockCatalog() const {
    return m_device_ip_block_catalog;
}
void OAITestEnvironmentCatalog::setDeviceIpBlockCatalog(const OAIDeviceIpBlockCatalog &device_ip_block_catalog) {
    m_device_ip_block_catalog = device_ip_block_catalog;
    m_device_ip_block_catalog_isSet = true;
}

bool OAITestEnvironmentCatalog::is_device_ip_block_catalog_Set() const{
    return m_device_ip_block_catalog_isSet;
}

bool OAITestEnvironmentCatalog::is_device_ip_block_catalog_Valid() const{
    return m_device_ip_block_catalog_isValid;
}

OAIIosDeviceCatalog OAITestEnvironmentCatalog::getIosDeviceCatalog() const {
    return m_ios_device_catalog;
}
void OAITestEnvironmentCatalog::setIosDeviceCatalog(const OAIIosDeviceCatalog &ios_device_catalog) {
    m_ios_device_catalog = ios_device_catalog;
    m_ios_device_catalog_isSet = true;
}

bool OAITestEnvironmentCatalog::is_ios_device_catalog_Set() const{
    return m_ios_device_catalog_isSet;
}

bool OAITestEnvironmentCatalog::is_ios_device_catalog_Valid() const{
    return m_ios_device_catalog_isValid;
}

OAINetworkConfigurationCatalog OAITestEnvironmentCatalog::getNetworkConfigurationCatalog() const {
    return m_network_configuration_catalog;
}
void OAITestEnvironmentCatalog::setNetworkConfigurationCatalog(const OAINetworkConfigurationCatalog &network_configuration_catalog) {
    m_network_configuration_catalog = network_configuration_catalog;
    m_network_configuration_catalog_isSet = true;
}

bool OAITestEnvironmentCatalog::is_network_configuration_catalog_Set() const{
    return m_network_configuration_catalog_isSet;
}

bool OAITestEnvironmentCatalog::is_network_configuration_catalog_Valid() const{
    return m_network_configuration_catalog_isValid;
}

OAIProvidedSoftwareCatalog OAITestEnvironmentCatalog::getSoftwareCatalog() const {
    return m_software_catalog;
}
void OAITestEnvironmentCatalog::setSoftwareCatalog(const OAIProvidedSoftwareCatalog &software_catalog) {
    m_software_catalog = software_catalog;
    m_software_catalog_isSet = true;
}

bool OAITestEnvironmentCatalog::is_software_catalog_Set() const{
    return m_software_catalog_isSet;
}

bool OAITestEnvironmentCatalog::is_software_catalog_Valid() const{
    return m_software_catalog_isValid;
}

bool OAITestEnvironmentCatalog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android_device_catalog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_ip_block_catalog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_device_catalog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration_catalog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_catalog.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestEnvironmentCatalog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
