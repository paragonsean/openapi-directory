/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestMatrix.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestMatrix::OAITestMatrix(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestMatrix::OAITestMatrix() {
    this->initializeModel();
}

OAITestMatrix::~OAITestMatrix() {}

void OAITestMatrix::initializeModel() {

    m_client_info_isSet = false;
    m_client_info_isValid = false;

    m_environment_matrix_isSet = false;
    m_environment_matrix_isValid = false;

    m_extended_invalid_matrix_details_isSet = false;
    m_extended_invalid_matrix_details_isValid = false;

    m_fail_fast_isSet = false;
    m_fail_fast_isValid = false;

    m_flaky_test_attempts_isSet = false;
    m_flaky_test_attempts_isValid = false;

    m_invalid_matrix_details_isSet = false;
    m_invalid_matrix_details_isValid = false;

    m_outcome_summary_isSet = false;
    m_outcome_summary_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_result_storage_isSet = false;
    m_result_storage_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_test_executions_isSet = false;
    m_test_executions_isValid = false;

    m_test_matrix_id_isSet = false;
    m_test_matrix_id_isValid = false;

    m_test_specification_isSet = false;
    m_test_specification_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAITestMatrix::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestMatrix::fromJsonObject(QJsonObject json) {

    m_client_info_isValid = ::OpenAPI::fromJsonValue(m_client_info, json[QString("clientInfo")]);
    m_client_info_isSet = !json[QString("clientInfo")].isNull() && m_client_info_isValid;

    m_environment_matrix_isValid = ::OpenAPI::fromJsonValue(m_environment_matrix, json[QString("environmentMatrix")]);
    m_environment_matrix_isSet = !json[QString("environmentMatrix")].isNull() && m_environment_matrix_isValid;

    m_extended_invalid_matrix_details_isValid = ::OpenAPI::fromJsonValue(m_extended_invalid_matrix_details, json[QString("extendedInvalidMatrixDetails")]);
    m_extended_invalid_matrix_details_isSet = !json[QString("extendedInvalidMatrixDetails")].isNull() && m_extended_invalid_matrix_details_isValid;

    m_fail_fast_isValid = ::OpenAPI::fromJsonValue(m_fail_fast, json[QString("failFast")]);
    m_fail_fast_isSet = !json[QString("failFast")].isNull() && m_fail_fast_isValid;

    m_flaky_test_attempts_isValid = ::OpenAPI::fromJsonValue(m_flaky_test_attempts, json[QString("flakyTestAttempts")]);
    m_flaky_test_attempts_isSet = !json[QString("flakyTestAttempts")].isNull() && m_flaky_test_attempts_isValid;

    m_invalid_matrix_details_isValid = ::OpenAPI::fromJsonValue(m_invalid_matrix_details, json[QString("invalidMatrixDetails")]);
    m_invalid_matrix_details_isSet = !json[QString("invalidMatrixDetails")].isNull() && m_invalid_matrix_details_isValid;

    m_outcome_summary_isValid = ::OpenAPI::fromJsonValue(m_outcome_summary, json[QString("outcomeSummary")]);
    m_outcome_summary_isSet = !json[QString("outcomeSummary")].isNull() && m_outcome_summary_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_result_storage_isValid = ::OpenAPI::fromJsonValue(m_result_storage, json[QString("resultStorage")]);
    m_result_storage_isSet = !json[QString("resultStorage")].isNull() && m_result_storage_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_test_executions_isValid = ::OpenAPI::fromJsonValue(m_test_executions, json[QString("testExecutions")]);
    m_test_executions_isSet = !json[QString("testExecutions")].isNull() && m_test_executions_isValid;

    m_test_matrix_id_isValid = ::OpenAPI::fromJsonValue(m_test_matrix_id, json[QString("testMatrixId")]);
    m_test_matrix_id_isSet = !json[QString("testMatrixId")].isNull() && m_test_matrix_id_isValid;

    m_test_specification_isValid = ::OpenAPI::fromJsonValue(m_test_specification, json[QString("testSpecification")]);
    m_test_specification_isSet = !json[QString("testSpecification")].isNull() && m_test_specification_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAITestMatrix::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestMatrix::asJsonObject() const {
    QJsonObject obj;
    if (m_client_info.isSet()) {
        obj.insert(QString("clientInfo"), ::OpenAPI::toJsonValue(m_client_info));
    }
    if (m_environment_matrix.isSet()) {
        obj.insert(QString("environmentMatrix"), ::OpenAPI::toJsonValue(m_environment_matrix));
    }
    if (m_extended_invalid_matrix_details.size() > 0) {
        obj.insert(QString("extendedInvalidMatrixDetails"), ::OpenAPI::toJsonValue(m_extended_invalid_matrix_details));
    }
    if (m_fail_fast_isSet) {
        obj.insert(QString("failFast"), ::OpenAPI::toJsonValue(m_fail_fast));
    }
    if (m_flaky_test_attempts_isSet) {
        obj.insert(QString("flakyTestAttempts"), ::OpenAPI::toJsonValue(m_flaky_test_attempts));
    }
    if (m_invalid_matrix_details_isSet) {
        obj.insert(QString("invalidMatrixDetails"), ::OpenAPI::toJsonValue(m_invalid_matrix_details));
    }
    if (m_outcome_summary_isSet) {
        obj.insert(QString("outcomeSummary"), ::OpenAPI::toJsonValue(m_outcome_summary));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_result_storage.isSet()) {
        obj.insert(QString("resultStorage"), ::OpenAPI::toJsonValue(m_result_storage));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_test_executions.size() > 0) {
        obj.insert(QString("testExecutions"), ::OpenAPI::toJsonValue(m_test_executions));
    }
    if (m_test_matrix_id_isSet) {
        obj.insert(QString("testMatrixId"), ::OpenAPI::toJsonValue(m_test_matrix_id));
    }
    if (m_test_specification.isSet()) {
        obj.insert(QString("testSpecification"), ::OpenAPI::toJsonValue(m_test_specification));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIClientInfo OAITestMatrix::getClientInfo() const {
    return m_client_info;
}
void OAITestMatrix::setClientInfo(const OAIClientInfo &client_info) {
    m_client_info = client_info;
    m_client_info_isSet = true;
}

bool OAITestMatrix::is_client_info_Set() const{
    return m_client_info_isSet;
}

bool OAITestMatrix::is_client_info_Valid() const{
    return m_client_info_isValid;
}

OAIEnvironmentMatrix OAITestMatrix::getEnvironmentMatrix() const {
    return m_environment_matrix;
}
void OAITestMatrix::setEnvironmentMatrix(const OAIEnvironmentMatrix &environment_matrix) {
    m_environment_matrix = environment_matrix;
    m_environment_matrix_isSet = true;
}

bool OAITestMatrix::is_environment_matrix_Set() const{
    return m_environment_matrix_isSet;
}

bool OAITestMatrix::is_environment_matrix_Valid() const{
    return m_environment_matrix_isValid;
}

QList<OAIMatrixErrorDetail> OAITestMatrix::getExtendedInvalidMatrixDetails() const {
    return m_extended_invalid_matrix_details;
}
void OAITestMatrix::setExtendedInvalidMatrixDetails(const QList<OAIMatrixErrorDetail> &extended_invalid_matrix_details) {
    m_extended_invalid_matrix_details = extended_invalid_matrix_details;
    m_extended_invalid_matrix_details_isSet = true;
}

bool OAITestMatrix::is_extended_invalid_matrix_details_Set() const{
    return m_extended_invalid_matrix_details_isSet;
}

bool OAITestMatrix::is_extended_invalid_matrix_details_Valid() const{
    return m_extended_invalid_matrix_details_isValid;
}

bool OAITestMatrix::isFailFast() const {
    return m_fail_fast;
}
void OAITestMatrix::setFailFast(const bool &fail_fast) {
    m_fail_fast = fail_fast;
    m_fail_fast_isSet = true;
}

bool OAITestMatrix::is_fail_fast_Set() const{
    return m_fail_fast_isSet;
}

bool OAITestMatrix::is_fail_fast_Valid() const{
    return m_fail_fast_isValid;
}

qint32 OAITestMatrix::getFlakyTestAttempts() const {
    return m_flaky_test_attempts;
}
void OAITestMatrix::setFlakyTestAttempts(const qint32 &flaky_test_attempts) {
    m_flaky_test_attempts = flaky_test_attempts;
    m_flaky_test_attempts_isSet = true;
}

bool OAITestMatrix::is_flaky_test_attempts_Set() const{
    return m_flaky_test_attempts_isSet;
}

bool OAITestMatrix::is_flaky_test_attempts_Valid() const{
    return m_flaky_test_attempts_isValid;
}

QString OAITestMatrix::getInvalidMatrixDetails() const {
    return m_invalid_matrix_details;
}
void OAITestMatrix::setInvalidMatrixDetails(const QString &invalid_matrix_details) {
    m_invalid_matrix_details = invalid_matrix_details;
    m_invalid_matrix_details_isSet = true;
}

bool OAITestMatrix::is_invalid_matrix_details_Set() const{
    return m_invalid_matrix_details_isSet;
}

bool OAITestMatrix::is_invalid_matrix_details_Valid() const{
    return m_invalid_matrix_details_isValid;
}

QString OAITestMatrix::getOutcomeSummary() const {
    return m_outcome_summary;
}
void OAITestMatrix::setOutcomeSummary(const QString &outcome_summary) {
    m_outcome_summary = outcome_summary;
    m_outcome_summary_isSet = true;
}

bool OAITestMatrix::is_outcome_summary_Set() const{
    return m_outcome_summary_isSet;
}

bool OAITestMatrix::is_outcome_summary_Valid() const{
    return m_outcome_summary_isValid;
}

QString OAITestMatrix::getProjectId() const {
    return m_project_id;
}
void OAITestMatrix::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAITestMatrix::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAITestMatrix::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAIResultStorage OAITestMatrix::getResultStorage() const {
    return m_result_storage;
}
void OAITestMatrix::setResultStorage(const OAIResultStorage &result_storage) {
    m_result_storage = result_storage;
    m_result_storage_isSet = true;
}

bool OAITestMatrix::is_result_storage_Set() const{
    return m_result_storage_isSet;
}

bool OAITestMatrix::is_result_storage_Valid() const{
    return m_result_storage_isValid;
}

QString OAITestMatrix::getState() const {
    return m_state;
}
void OAITestMatrix::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITestMatrix::is_state_Set() const{
    return m_state_isSet;
}

bool OAITestMatrix::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAITestExecution> OAITestMatrix::getTestExecutions() const {
    return m_test_executions;
}
void OAITestMatrix::setTestExecutions(const QList<OAITestExecution> &test_executions) {
    m_test_executions = test_executions;
    m_test_executions_isSet = true;
}

bool OAITestMatrix::is_test_executions_Set() const{
    return m_test_executions_isSet;
}

bool OAITestMatrix::is_test_executions_Valid() const{
    return m_test_executions_isValid;
}

QString OAITestMatrix::getTestMatrixId() const {
    return m_test_matrix_id;
}
void OAITestMatrix::setTestMatrixId(const QString &test_matrix_id) {
    m_test_matrix_id = test_matrix_id;
    m_test_matrix_id_isSet = true;
}

bool OAITestMatrix::is_test_matrix_id_Set() const{
    return m_test_matrix_id_isSet;
}

bool OAITestMatrix::is_test_matrix_id_Valid() const{
    return m_test_matrix_id_isValid;
}

OAITestSpecification OAITestMatrix::getTestSpecification() const {
    return m_test_specification;
}
void OAITestMatrix::setTestSpecification(const OAITestSpecification &test_specification) {
    m_test_specification = test_specification;
    m_test_specification_isSet = true;
}

bool OAITestMatrix::is_test_specification_Set() const{
    return m_test_specification_isSet;
}

bool OAITestMatrix::is_test_specification_Valid() const{
    return m_test_specification_isValid;
}

QString OAITestMatrix::getTimestamp() const {
    return m_timestamp;
}
void OAITestMatrix::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAITestMatrix::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAITestMatrix::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAITestMatrix::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_matrix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_invalid_matrix_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fail_fast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flaky_test_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_matrix_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outcome_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_executions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_matrix_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestMatrix::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
