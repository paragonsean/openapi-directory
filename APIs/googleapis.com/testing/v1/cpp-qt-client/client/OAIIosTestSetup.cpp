/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIosTestSetup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIosTestSetup::OAIIosTestSetup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIosTestSetup::OAIIosTestSetup() {
    this->initializeModel();
}

OAIIosTestSetup::~OAIIosTestSetup() {}

void OAIIosTestSetup::initializeModel() {

    m_additional_ipas_isSet = false;
    m_additional_ipas_isValid = false;

    m_network_profile_isSet = false;
    m_network_profile_isValid = false;

    m_pull_directories_isSet = false;
    m_pull_directories_isValid = false;

    m_push_files_isSet = false;
    m_push_files_isValid = false;
}

void OAIIosTestSetup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIosTestSetup::fromJsonObject(QJsonObject json) {

    m_additional_ipas_isValid = ::OpenAPI::fromJsonValue(m_additional_ipas, json[QString("additionalIpas")]);
    m_additional_ipas_isSet = !json[QString("additionalIpas")].isNull() && m_additional_ipas_isValid;

    m_network_profile_isValid = ::OpenAPI::fromJsonValue(m_network_profile, json[QString("networkProfile")]);
    m_network_profile_isSet = !json[QString("networkProfile")].isNull() && m_network_profile_isValid;

    m_pull_directories_isValid = ::OpenAPI::fromJsonValue(m_pull_directories, json[QString("pullDirectories")]);
    m_pull_directories_isSet = !json[QString("pullDirectories")].isNull() && m_pull_directories_isValid;

    m_push_files_isValid = ::OpenAPI::fromJsonValue(m_push_files, json[QString("pushFiles")]);
    m_push_files_isSet = !json[QString("pushFiles")].isNull() && m_push_files_isValid;
}

QString OAIIosTestSetup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIosTestSetup::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_ipas.size() > 0) {
        obj.insert(QString("additionalIpas"), ::OpenAPI::toJsonValue(m_additional_ipas));
    }
    if (m_network_profile_isSet) {
        obj.insert(QString("networkProfile"), ::OpenAPI::toJsonValue(m_network_profile));
    }
    if (m_pull_directories.size() > 0) {
        obj.insert(QString("pullDirectories"), ::OpenAPI::toJsonValue(m_pull_directories));
    }
    if (m_push_files.size() > 0) {
        obj.insert(QString("pushFiles"), ::OpenAPI::toJsonValue(m_push_files));
    }
    return obj;
}

QList<OAIFileReference> OAIIosTestSetup::getAdditionalIpas() const {
    return m_additional_ipas;
}
void OAIIosTestSetup::setAdditionalIpas(const QList<OAIFileReference> &additional_ipas) {
    m_additional_ipas = additional_ipas;
    m_additional_ipas_isSet = true;
}

bool OAIIosTestSetup::is_additional_ipas_Set() const{
    return m_additional_ipas_isSet;
}

bool OAIIosTestSetup::is_additional_ipas_Valid() const{
    return m_additional_ipas_isValid;
}

QString OAIIosTestSetup::getNetworkProfile() const {
    return m_network_profile;
}
void OAIIosTestSetup::setNetworkProfile(const QString &network_profile) {
    m_network_profile = network_profile;
    m_network_profile_isSet = true;
}

bool OAIIosTestSetup::is_network_profile_Set() const{
    return m_network_profile_isSet;
}

bool OAIIosTestSetup::is_network_profile_Valid() const{
    return m_network_profile_isValid;
}

QList<OAIIosDeviceFile> OAIIosTestSetup::getPullDirectories() const {
    return m_pull_directories;
}
void OAIIosTestSetup::setPullDirectories(const QList<OAIIosDeviceFile> &pull_directories) {
    m_pull_directories = pull_directories;
    m_pull_directories_isSet = true;
}

bool OAIIosTestSetup::is_pull_directories_Set() const{
    return m_pull_directories_isSet;
}

bool OAIIosTestSetup::is_pull_directories_Valid() const{
    return m_pull_directories_isValid;
}

QList<OAIIosDeviceFile> OAIIosTestSetup::getPushFiles() const {
    return m_push_files;
}
void OAIIosTestSetup::setPushFiles(const QList<OAIIosDeviceFile> &push_files) {
    m_push_files = push_files;
    m_push_files_isSet = true;
}

bool OAIIosTestSetup::is_push_files_Set() const{
    return m_push_files_isSet;
}

bool OAIIosTestSetup::is_push_files_Valid() const{
    return m_push_files_isValid;
}

bool OAIIosTestSetup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_ipas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_directories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIosTestSetup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
