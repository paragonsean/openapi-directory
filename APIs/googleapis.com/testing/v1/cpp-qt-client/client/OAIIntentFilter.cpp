/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntentFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntentFilter::OAIIntentFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntentFilter::OAIIntentFilter() {
    this->initializeModel();
}

OAIIntentFilter::~OAIIntentFilter() {}

void OAIIntentFilter::initializeModel() {

    m_action_names_isSet = false;
    m_action_names_isValid = false;

    m_category_names_isSet = false;
    m_category_names_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;
}

void OAIIntentFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntentFilter::fromJsonObject(QJsonObject json) {

    m_action_names_isValid = ::OpenAPI::fromJsonValue(m_action_names, json[QString("actionNames")]);
    m_action_names_isSet = !json[QString("actionNames")].isNull() && m_action_names_isValid;

    m_category_names_isValid = ::OpenAPI::fromJsonValue(m_category_names, json[QString("categoryNames")]);
    m_category_names_isSet = !json[QString("categoryNames")].isNull() && m_category_names_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;
}

QString OAIIntentFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntentFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_action_names.size() > 0) {
        obj.insert(QString("actionNames"), ::OpenAPI::toJsonValue(m_action_names));
    }
    if (m_category_names.size() > 0) {
        obj.insert(QString("categoryNames"), ::OpenAPI::toJsonValue(m_category_names));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    return obj;
}

QList<QString> OAIIntentFilter::getActionNames() const {
    return m_action_names;
}
void OAIIntentFilter::setActionNames(const QList<QString> &action_names) {
    m_action_names = action_names;
    m_action_names_isSet = true;
}

bool OAIIntentFilter::is_action_names_Set() const{
    return m_action_names_isSet;
}

bool OAIIntentFilter::is_action_names_Valid() const{
    return m_action_names_isValid;
}

QList<QString> OAIIntentFilter::getCategoryNames() const {
    return m_category_names;
}
void OAIIntentFilter::setCategoryNames(const QList<QString> &category_names) {
    m_category_names = category_names;
    m_category_names_isSet = true;
}

bool OAIIntentFilter::is_category_names_Set() const{
    return m_category_names_isSet;
}

bool OAIIntentFilter::is_category_names_Valid() const{
    return m_category_names_isValid;
}

QString OAIIntentFilter::getMimeType() const {
    return m_mime_type;
}
void OAIIntentFilter::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIIntentFilter::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIIntentFilter::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAIIntentFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntentFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
