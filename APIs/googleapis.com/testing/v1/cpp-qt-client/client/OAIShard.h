/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIShard.h
 *
 * Output only. Details about the shard.
 */

#ifndef OAIShard_H
#define OAIShard_H

#include <QJsonObject>

#include "OAITestTargetsForShard.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITestTargetsForShard;

class OAIShard : public OAIObject {
public:
    OAIShard();
    OAIShard(QString json);
    ~OAIShard() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEstimatedShardDuration() const;
    void setEstimatedShardDuration(const QString &estimated_shard_duration);
    bool is_estimated_shard_duration_Set() const;
    bool is_estimated_shard_duration_Valid() const;

    qint32 getNumShards() const;
    void setNumShards(const qint32 &num_shards);
    bool is_num_shards_Set() const;
    bool is_num_shards_Valid() const;

    qint32 getShardIndex() const;
    void setShardIndex(const qint32 &shard_index);
    bool is_shard_index_Set() const;
    bool is_shard_index_Valid() const;

    OAITestTargetsForShard getTestTargetsForShard() const;
    void setTestTargetsForShard(const OAITestTargetsForShard &test_targets_for_shard);
    bool is_test_targets_for_shard_Set() const;
    bool is_test_targets_for_shard_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_estimated_shard_duration;
    bool m_estimated_shard_duration_isSet;
    bool m_estimated_shard_duration_isValid;

    qint32 m_num_shards;
    bool m_num_shards_isSet;
    bool m_num_shards_isValid;

    qint32 m_shard_index;
    bool m_shard_index_isSet;
    bool m_shard_index_isValid;

    OAITestTargetsForShard m_test_targets_for_shard;
    bool m_test_targets_for_shard_isSet;
    bool m_test_targets_for_shard_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIShard)

#endif // OAIShard_H
