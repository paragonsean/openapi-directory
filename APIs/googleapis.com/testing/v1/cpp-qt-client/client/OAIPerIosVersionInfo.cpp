/**
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerIosVersionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerIosVersionInfo::OAIPerIosVersionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerIosVersionInfo::OAIPerIosVersionInfo() {
    this->initializeModel();
}

OAIPerIosVersionInfo::~OAIPerIosVersionInfo() {}

void OAIPerIosVersionInfo::initializeModel() {

    m_device_capacity_isSet = false;
    m_device_capacity_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIPerIosVersionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerIosVersionInfo::fromJsonObject(QJsonObject json) {

    m_device_capacity_isValid = ::OpenAPI::fromJsonValue(m_device_capacity, json[QString("deviceCapacity")]);
    m_device_capacity_isSet = !json[QString("deviceCapacity")].isNull() && m_device_capacity_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;
}

QString OAIPerIosVersionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerIosVersionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_device_capacity_isSet) {
        obj.insert(QString("deviceCapacity"), ::OpenAPI::toJsonValue(m_device_capacity));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAIPerIosVersionInfo::getDeviceCapacity() const {
    return m_device_capacity;
}
void OAIPerIosVersionInfo::setDeviceCapacity(const QString &device_capacity) {
    m_device_capacity = device_capacity;
    m_device_capacity_isSet = true;
}

bool OAIPerIosVersionInfo::is_device_capacity_Set() const{
    return m_device_capacity_isSet;
}

bool OAIPerIosVersionInfo::is_device_capacity_Valid() const{
    return m_device_capacity_isValid;
}

QString OAIPerIosVersionInfo::getVersionId() const {
    return m_version_id;
}
void OAIPerIosVersionInfo::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIPerIosVersionInfo::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIPerIosVersionInfo::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIPerIosVersionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerIosVersionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
