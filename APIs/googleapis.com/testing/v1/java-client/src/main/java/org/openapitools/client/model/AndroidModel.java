/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PerAndroidVersionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of an Android device tests may be run on.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AndroidModel {
  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_CODENAME = "codename";
  @SerializedName(SERIALIZED_NAME_CODENAME)
  private String codename;

  /**
   * Whether this device is virtual or physical.
   */
  @JsonAdapter(FormEnum.Adapter.class)
  public enum FormEnum {
    DEVICE_FORM_UNSPECIFIED("DEVICE_FORM_UNSPECIFIED"),
    
    VIRTUAL("VIRTUAL"),
    
    PHYSICAL("PHYSICAL"),
    
    EMULATOR("EMULATOR");

    private String value;

    FormEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormEnum fromValue(String value) {
      for (FormEnum b : FormEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORM = "form";
  @SerializedName(SERIALIZED_NAME_FORM)
  private FormEnum form;

  /**
   * Whether this device is a phone, tablet, wearable, etc.
   */
  @JsonAdapter(FormFactorEnum.Adapter.class)
  public enum FormFactorEnum {
    DEVICE_FORM_FACTOR_UNSPECIFIED("DEVICE_FORM_FACTOR_UNSPECIFIED"),
    
    PHONE("PHONE"),
    
    TABLET("TABLET"),
    
    WEARABLE("WEARABLE");

    private String value;

    FormFactorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormFactorEnum fromValue(String value) {
      for (FormFactorEnum b : FormFactorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormFactorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormFactorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormFactorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormFactorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormFactorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORM_FACTOR = "formFactor";
  @SerializedName(SERIALIZED_NAME_FORM_FACTOR)
  private FormFactorEnum formFactor;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOW_FPS_VIDEO_RECORDING = "lowFpsVideoRecording";
  @SerializedName(SERIALIZED_NAME_LOW_FPS_VIDEO_RECORDING)
  private Boolean lowFpsVideoRecording;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PER_VERSION_INFO = "perVersionInfo";
  @SerializedName(SERIALIZED_NAME_PER_VERSION_INFO)
  private List<PerAndroidVersionInfo> perVersionInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCREEN_DENSITY = "screenDensity";
  @SerializedName(SERIALIZED_NAME_SCREEN_DENSITY)
  private Integer screenDensity;

  public static final String SERIALIZED_NAME_SCREEN_X = "screenX";
  @SerializedName(SERIALIZED_NAME_SCREEN_X)
  private Integer screenX;

  public static final String SERIALIZED_NAME_SCREEN_Y = "screenY";
  @SerializedName(SERIALIZED_NAME_SCREEN_Y)
  private Integer screenY;

  public static final String SERIALIZED_NAME_SUPPORTED_ABIS = "supportedAbis";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_ABIS)
  private List<String> supportedAbis = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_VERSION_IDS = "supportedVersionIds";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_VERSION_IDS)
  private List<String> supportedVersionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_THUMBNAIL_URL = "thumbnailUrl";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URL)
  private String thumbnailUrl;

  public AndroidModel() {
  }

  public AndroidModel brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * The company that this device is branded with. Example: \&quot;Google\&quot;, \&quot;Samsung\&quot;.
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public AndroidModel codename(String codename) {
    this.codename = codename;
    return this;
  }

  /**
   * The name of the industrial design. This corresponds to android.os.Build.DEVICE.
   * @return codename
   */
  @javax.annotation.Nullable
  public String getCodename() {
    return codename;
  }

  public void setCodename(String codename) {
    this.codename = codename;
  }


  public AndroidModel form(FormEnum form) {
    this.form = form;
    return this;
  }

  /**
   * Whether this device is virtual or physical.
   * @return form
   */
  @javax.annotation.Nullable
  public FormEnum getForm() {
    return form;
  }

  public void setForm(FormEnum form) {
    this.form = form;
  }


  public AndroidModel formFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
    return this;
  }

  /**
   * Whether this device is a phone, tablet, wearable, etc.
   * @return formFactor
   */
  @javax.annotation.Nullable
  public FormFactorEnum getFormFactor() {
    return formFactor;
  }

  public void setFormFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
  }


  public AndroidModel id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique opaque id for this model. Use this for invoking the TestExecutionService.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AndroidModel lowFpsVideoRecording(Boolean lowFpsVideoRecording) {
    this.lowFpsVideoRecording = lowFpsVideoRecording;
    return this;
  }

  /**
   * True if and only if tests with this model are recorded by stitching together screenshots. See use_low_spec_video_recording in device config.
   * @return lowFpsVideoRecording
   */
  @javax.annotation.Nullable
  public Boolean getLowFpsVideoRecording() {
    return lowFpsVideoRecording;
  }

  public void setLowFpsVideoRecording(Boolean lowFpsVideoRecording) {
    this.lowFpsVideoRecording = lowFpsVideoRecording;
  }


  public AndroidModel manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * The manufacturer of this device.
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public AndroidModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The human-readable marketing name for this device model. Examples: \&quot;Nexus 5\&quot;, \&quot;Galaxy S5\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AndroidModel perVersionInfo(List<PerAndroidVersionInfo> perVersionInfo) {
    this.perVersionInfo = perVersionInfo;
    return this;
  }

  public AndroidModel addPerVersionInfoItem(PerAndroidVersionInfo perVersionInfoItem) {
    if (this.perVersionInfo == null) {
      this.perVersionInfo = new ArrayList<>();
    }
    this.perVersionInfo.add(perVersionInfoItem);
    return this;
  }

  /**
   * Version-specific information of an Android model.
   * @return perVersionInfo
   */
  @javax.annotation.Nullable
  public List<PerAndroidVersionInfo> getPerVersionInfo() {
    return perVersionInfo;
  }

  public void setPerVersionInfo(List<PerAndroidVersionInfo> perVersionInfo) {
    this.perVersionInfo = perVersionInfo;
  }


  public AndroidModel screenDensity(Integer screenDensity) {
    this.screenDensity = screenDensity;
    return this;
  }

  /**
   * Screen density in DPI. This corresponds to ro.sf.lcd_density
   * @return screenDensity
   */
  @javax.annotation.Nullable
  public Integer getScreenDensity() {
    return screenDensity;
  }

  public void setScreenDensity(Integer screenDensity) {
    this.screenDensity = screenDensity;
  }


  public AndroidModel screenX(Integer screenX) {
    this.screenX = screenX;
    return this;
  }

  /**
   * Screen size in the horizontal (X) dimension measured in pixels.
   * @return screenX
   */
  @javax.annotation.Nullable
  public Integer getScreenX() {
    return screenX;
  }

  public void setScreenX(Integer screenX) {
    this.screenX = screenX;
  }


  public AndroidModel screenY(Integer screenY) {
    this.screenY = screenY;
    return this;
  }

  /**
   * Screen size in the vertical (Y) dimension measured in pixels.
   * @return screenY
   */
  @javax.annotation.Nullable
  public Integer getScreenY() {
    return screenY;
  }

  public void setScreenY(Integer screenY) {
    this.screenY = screenY;
  }


  public AndroidModel supportedAbis(List<String> supportedAbis) {
    this.supportedAbis = supportedAbis;
    return this;
  }

  public AndroidModel addSupportedAbisItem(String supportedAbisItem) {
    if (this.supportedAbis == null) {
      this.supportedAbis = new ArrayList<>();
    }
    this.supportedAbis.add(supportedAbisItem);
    return this;
  }

  /**
   * The list of supported ABIs for this device. This corresponds to either android.os.Build.SUPPORTED_ABIS (for API level 21 and above) or android.os.Build.CPU_ABI/CPU_ABI2. The most preferred ABI is the first element in the list. Elements are optionally prefixed by \&quot;version_id:\&quot; (where version_id is the id of an AndroidVersion), denoting an ABI that is supported only on a particular version.
   * @return supportedAbis
   */
  @javax.annotation.Nullable
  public List<String> getSupportedAbis() {
    return supportedAbis;
  }

  public void setSupportedAbis(List<String> supportedAbis) {
    this.supportedAbis = supportedAbis;
  }


  public AndroidModel supportedVersionIds(List<String> supportedVersionIds) {
    this.supportedVersionIds = supportedVersionIds;
    return this;
  }

  public AndroidModel addSupportedVersionIdsItem(String supportedVersionIdsItem) {
    if (this.supportedVersionIds == null) {
      this.supportedVersionIds = new ArrayList<>();
    }
    this.supportedVersionIds.add(supportedVersionIdsItem);
    return this;
  }

  /**
   * The set of Android versions this device supports.
   * @return supportedVersionIds
   */
  @javax.annotation.Nullable
  public List<String> getSupportedVersionIds() {
    return supportedVersionIds;
  }

  public void setSupportedVersionIds(List<String> supportedVersionIds) {
    this.supportedVersionIds = supportedVersionIds;
  }


  public AndroidModel tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public AndroidModel addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags for this dimension. Examples: \&quot;default\&quot;, \&quot;preview\&quot;, \&quot;deprecated\&quot;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public AndroidModel thumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
    return this;
  }

  /**
   * URL of a thumbnail image (photo) of the device.
   * @return thumbnailUrl
   */
  @javax.annotation.Nullable
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }

  public void setThumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AndroidModel androidModel = (AndroidModel) o;
    return Objects.equals(this.brand, androidModel.brand) &&
        Objects.equals(this.codename, androidModel.codename) &&
        Objects.equals(this.form, androidModel.form) &&
        Objects.equals(this.formFactor, androidModel.formFactor) &&
        Objects.equals(this.id, androidModel.id) &&
        Objects.equals(this.lowFpsVideoRecording, androidModel.lowFpsVideoRecording) &&
        Objects.equals(this.manufacturer, androidModel.manufacturer) &&
        Objects.equals(this.name, androidModel.name) &&
        Objects.equals(this.perVersionInfo, androidModel.perVersionInfo) &&
        Objects.equals(this.screenDensity, androidModel.screenDensity) &&
        Objects.equals(this.screenX, androidModel.screenX) &&
        Objects.equals(this.screenY, androidModel.screenY) &&
        Objects.equals(this.supportedAbis, androidModel.supportedAbis) &&
        Objects.equals(this.supportedVersionIds, androidModel.supportedVersionIds) &&
        Objects.equals(this.tags, androidModel.tags) &&
        Objects.equals(this.thumbnailUrl, androidModel.thumbnailUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, codename, form, formFactor, id, lowFpsVideoRecording, manufacturer, name, perVersionInfo, screenDensity, screenX, screenY, supportedAbis, supportedVersionIds, tags, thumbnailUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AndroidModel {\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    codename: ").append(toIndentedString(codename)).append("\n");
    sb.append("    form: ").append(toIndentedString(form)).append("\n");
    sb.append("    formFactor: ").append(toIndentedString(formFactor)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lowFpsVideoRecording: ").append(toIndentedString(lowFpsVideoRecording)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    perVersionInfo: ").append(toIndentedString(perVersionInfo)).append("\n");
    sb.append("    screenDensity: ").append(toIndentedString(screenDensity)).append("\n");
    sb.append("    screenX: ").append(toIndentedString(screenX)).append("\n");
    sb.append("    screenY: ").append(toIndentedString(screenY)).append("\n");
    sb.append("    supportedAbis: ").append(toIndentedString(supportedAbis)).append("\n");
    sb.append("    supportedVersionIds: ").append(toIndentedString(supportedVersionIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand");
    openapiFields.add("codename");
    openapiFields.add("form");
    openapiFields.add("formFactor");
    openapiFields.add("id");
    openapiFields.add("lowFpsVideoRecording");
    openapiFields.add("manufacturer");
    openapiFields.add("name");
    openapiFields.add("perVersionInfo");
    openapiFields.add("screenDensity");
    openapiFields.add("screenX");
    openapiFields.add("screenY");
    openapiFields.add("supportedAbis");
    openapiFields.add("supportedVersionIds");
    openapiFields.add("tags");
    openapiFields.add("thumbnailUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AndroidModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AndroidModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AndroidModel is not found in the empty JSON string", AndroidModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AndroidModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AndroidModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("codename") != null && !jsonObj.get("codename").isJsonNull()) && !jsonObj.get("codename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codename").toString()));
      }
      if ((jsonObj.get("form") != null && !jsonObj.get("form").isJsonNull()) && !jsonObj.get("form").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form").toString()));
      }
      // validate the optional field `form`
      if (jsonObj.get("form") != null && !jsonObj.get("form").isJsonNull()) {
        FormEnum.validateJsonElement(jsonObj.get("form"));
      }
      if ((jsonObj.get("formFactor") != null && !jsonObj.get("formFactor").isJsonNull()) && !jsonObj.get("formFactor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formFactor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formFactor").toString()));
      }
      // validate the optional field `formFactor`
      if (jsonObj.get("formFactor") != null && !jsonObj.get("formFactor").isJsonNull()) {
        FormFactorEnum.validateJsonElement(jsonObj.get("formFactor"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("perVersionInfo") != null && !jsonObj.get("perVersionInfo").isJsonNull()) {
        JsonArray jsonArrayperVersionInfo = jsonObj.getAsJsonArray("perVersionInfo");
        if (jsonArrayperVersionInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("perVersionInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `perVersionInfo` to be an array in the JSON string but got `%s`", jsonObj.get("perVersionInfo").toString()));
          }

          // validate the optional field `perVersionInfo` (array)
          for (int i = 0; i < jsonArrayperVersionInfo.size(); i++) {
            PerAndroidVersionInfo.validateJsonElement(jsonArrayperVersionInfo.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedAbis") != null && !jsonObj.get("supportedAbis").isJsonNull() && !jsonObj.get("supportedAbis").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedAbis` to be an array in the JSON string but got `%s`", jsonObj.get("supportedAbis").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedVersionIds") != null && !jsonObj.get("supportedVersionIds").isJsonNull() && !jsonObj.get("supportedVersionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedVersionIds` to be an array in the JSON string but got `%s`", jsonObj.get("supportedVersionIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("thumbnailUrl") != null && !jsonObj.get("thumbnailUrl").isJsonNull()) && !jsonObj.get("thumbnailUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AndroidModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AndroidModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AndroidModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AndroidModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AndroidModel>() {
           @Override
           public void write(JsonWriter out, AndroidModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AndroidModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AndroidModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AndroidModel
   * @throws IOException if the JSON string is invalid with respect to AndroidModel
   */
  public static AndroidModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AndroidModel.class);
  }

  /**
   * Convert an instance of AndroidModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

