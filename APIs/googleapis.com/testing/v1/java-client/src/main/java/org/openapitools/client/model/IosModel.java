/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PerIosVersionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of an iOS device tests may be run on.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IosModel {
  public static final String SERIALIZED_NAME_DEVICE_CAPABILITIES = "deviceCapabilities";
  @SerializedName(SERIALIZED_NAME_DEVICE_CAPABILITIES)
  private List<String> deviceCapabilities = new ArrayList<>();

  /**
   * Whether this device is a phone, tablet, wearable, etc.
   */
  @JsonAdapter(FormFactorEnum.Adapter.class)
  public enum FormFactorEnum {
    DEVICE_FORM_FACTOR_UNSPECIFIED("DEVICE_FORM_FACTOR_UNSPECIFIED"),
    
    PHONE("PHONE"),
    
    TABLET("TABLET"),
    
    WEARABLE("WEARABLE");

    private String value;

    FormFactorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormFactorEnum fromValue(String value) {
      for (FormFactorEnum b : FormFactorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormFactorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormFactorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormFactorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormFactorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormFactorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORM_FACTOR = "formFactor";
  @SerializedName(SERIALIZED_NAME_FORM_FACTOR)
  private FormFactorEnum formFactor;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PER_VERSION_INFO = "perVersionInfo";
  @SerializedName(SERIALIZED_NAME_PER_VERSION_INFO)
  private List<PerIosVersionInfo> perVersionInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCREEN_DENSITY = "screenDensity";
  @SerializedName(SERIALIZED_NAME_SCREEN_DENSITY)
  private Integer screenDensity;

  public static final String SERIALIZED_NAME_SCREEN_X = "screenX";
  @SerializedName(SERIALIZED_NAME_SCREEN_X)
  private Integer screenX;

  public static final String SERIALIZED_NAME_SCREEN_Y = "screenY";
  @SerializedName(SERIALIZED_NAME_SCREEN_Y)
  private Integer screenY;

  public static final String SERIALIZED_NAME_SUPPORTED_VERSION_IDS = "supportedVersionIds";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_VERSION_IDS)
  private List<String> supportedVersionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public IosModel() {
  }

  public IosModel deviceCapabilities(List<String> deviceCapabilities) {
    this.deviceCapabilities = deviceCapabilities;
    return this;
  }

  public IosModel addDeviceCapabilitiesItem(String deviceCapabilitiesItem) {
    if (this.deviceCapabilities == null) {
      this.deviceCapabilities = new ArrayList<>();
    }
    this.deviceCapabilities.add(deviceCapabilitiesItem);
    return this;
  }

  /**
   * Device capabilities. Copied from https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html
   * @return deviceCapabilities
   */
  @javax.annotation.Nullable
  public List<String> getDeviceCapabilities() {
    return deviceCapabilities;
  }

  public void setDeviceCapabilities(List<String> deviceCapabilities) {
    this.deviceCapabilities = deviceCapabilities;
  }


  public IosModel formFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
    return this;
  }

  /**
   * Whether this device is a phone, tablet, wearable, etc.
   * @return formFactor
   */
  @javax.annotation.Nullable
  public FormFactorEnum getFormFactor() {
    return formFactor;
  }

  public void setFormFactor(FormFactorEnum formFactor) {
    this.formFactor = formFactor;
  }


  public IosModel id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique opaque id for this model. Use this for invoking the TestExecutionService.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public IosModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The human-readable name for this device model. Examples: \&quot;iPhone 4s\&quot;, \&quot;iPad Mini 2\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public IosModel perVersionInfo(List<PerIosVersionInfo> perVersionInfo) {
    this.perVersionInfo = perVersionInfo;
    return this;
  }

  public IosModel addPerVersionInfoItem(PerIosVersionInfo perVersionInfoItem) {
    if (this.perVersionInfo == null) {
      this.perVersionInfo = new ArrayList<>();
    }
    this.perVersionInfo.add(perVersionInfoItem);
    return this;
  }

  /**
   * Version-specific information of an iOS model.
   * @return perVersionInfo
   */
  @javax.annotation.Nullable
  public List<PerIosVersionInfo> getPerVersionInfo() {
    return perVersionInfo;
  }

  public void setPerVersionInfo(List<PerIosVersionInfo> perVersionInfo) {
    this.perVersionInfo = perVersionInfo;
  }


  public IosModel screenDensity(Integer screenDensity) {
    this.screenDensity = screenDensity;
    return this;
  }

  /**
   * Screen density in DPI.
   * @return screenDensity
   */
  @javax.annotation.Nullable
  public Integer getScreenDensity() {
    return screenDensity;
  }

  public void setScreenDensity(Integer screenDensity) {
    this.screenDensity = screenDensity;
  }


  public IosModel screenX(Integer screenX) {
    this.screenX = screenX;
    return this;
  }

  /**
   * Screen size in the horizontal (X) dimension measured in pixels.
   * @return screenX
   */
  @javax.annotation.Nullable
  public Integer getScreenX() {
    return screenX;
  }

  public void setScreenX(Integer screenX) {
    this.screenX = screenX;
  }


  public IosModel screenY(Integer screenY) {
    this.screenY = screenY;
    return this;
  }

  /**
   * Screen size in the vertical (Y) dimension measured in pixels.
   * @return screenY
   */
  @javax.annotation.Nullable
  public Integer getScreenY() {
    return screenY;
  }

  public void setScreenY(Integer screenY) {
    this.screenY = screenY;
  }


  public IosModel supportedVersionIds(List<String> supportedVersionIds) {
    this.supportedVersionIds = supportedVersionIds;
    return this;
  }

  public IosModel addSupportedVersionIdsItem(String supportedVersionIdsItem) {
    if (this.supportedVersionIds == null) {
      this.supportedVersionIds = new ArrayList<>();
    }
    this.supportedVersionIds.add(supportedVersionIdsItem);
    return this;
  }

  /**
   * The set of iOS major software versions this device supports.
   * @return supportedVersionIds
   */
  @javax.annotation.Nullable
  public List<String> getSupportedVersionIds() {
    return supportedVersionIds;
  }

  public void setSupportedVersionIds(List<String> supportedVersionIds) {
    this.supportedVersionIds = supportedVersionIds;
  }


  public IosModel tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public IosModel addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags for this dimension. Examples: \&quot;default\&quot;, \&quot;preview\&quot;, \&quot;deprecated\&quot;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IosModel iosModel = (IosModel) o;
    return Objects.equals(this.deviceCapabilities, iosModel.deviceCapabilities) &&
        Objects.equals(this.formFactor, iosModel.formFactor) &&
        Objects.equals(this.id, iosModel.id) &&
        Objects.equals(this.name, iosModel.name) &&
        Objects.equals(this.perVersionInfo, iosModel.perVersionInfo) &&
        Objects.equals(this.screenDensity, iosModel.screenDensity) &&
        Objects.equals(this.screenX, iosModel.screenX) &&
        Objects.equals(this.screenY, iosModel.screenY) &&
        Objects.equals(this.supportedVersionIds, iosModel.supportedVersionIds) &&
        Objects.equals(this.tags, iosModel.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceCapabilities, formFactor, id, name, perVersionInfo, screenDensity, screenX, screenY, supportedVersionIds, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IosModel {\n");
    sb.append("    deviceCapabilities: ").append(toIndentedString(deviceCapabilities)).append("\n");
    sb.append("    formFactor: ").append(toIndentedString(formFactor)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    perVersionInfo: ").append(toIndentedString(perVersionInfo)).append("\n");
    sb.append("    screenDensity: ").append(toIndentedString(screenDensity)).append("\n");
    sb.append("    screenX: ").append(toIndentedString(screenX)).append("\n");
    sb.append("    screenY: ").append(toIndentedString(screenY)).append("\n");
    sb.append("    supportedVersionIds: ").append(toIndentedString(supportedVersionIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceCapabilities");
    openapiFields.add("formFactor");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("perVersionInfo");
    openapiFields.add("screenDensity");
    openapiFields.add("screenX");
    openapiFields.add("screenY");
    openapiFields.add("supportedVersionIds");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IosModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IosModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IosModel is not found in the empty JSON string", IosModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IosModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IosModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("deviceCapabilities") != null && !jsonObj.get("deviceCapabilities").isJsonNull() && !jsonObj.get("deviceCapabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceCapabilities` to be an array in the JSON string but got `%s`", jsonObj.get("deviceCapabilities").toString()));
      }
      if ((jsonObj.get("formFactor") != null && !jsonObj.get("formFactor").isJsonNull()) && !jsonObj.get("formFactor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formFactor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formFactor").toString()));
      }
      // validate the optional field `formFactor`
      if (jsonObj.get("formFactor") != null && !jsonObj.get("formFactor").isJsonNull()) {
        FormFactorEnum.validateJsonElement(jsonObj.get("formFactor"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("perVersionInfo") != null && !jsonObj.get("perVersionInfo").isJsonNull()) {
        JsonArray jsonArrayperVersionInfo = jsonObj.getAsJsonArray("perVersionInfo");
        if (jsonArrayperVersionInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("perVersionInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `perVersionInfo` to be an array in the JSON string but got `%s`", jsonObj.get("perVersionInfo").toString()));
          }

          // validate the optional field `perVersionInfo` (array)
          for (int i = 0; i < jsonArrayperVersionInfo.size(); i++) {
            PerIosVersionInfo.validateJsonElement(jsonArrayperVersionInfo.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedVersionIds") != null && !jsonObj.get("supportedVersionIds").isJsonNull() && !jsonObj.get("supportedVersionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedVersionIds` to be an array in the JSON string but got `%s`", jsonObj.get("supportedVersionIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IosModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IosModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IosModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IosModel.class));

       return (TypeAdapter<T>) new TypeAdapter<IosModel>() {
           @Override
           public void write(JsonWriter out, IosModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IosModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IosModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IosModel
   * @throws IOException if the JSON string is invalid with respect to IosModel
   */
  public static IosModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IosModel.class);
  }

  /**
   * Convert an instance of IosModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

