/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of Android device configuration permutations is defined by the the cross-product of the given axes. Internally, the given AndroidMatrix will be expanded into a set of AndroidDevices. Only supported permutations will be instantiated. Invalid permutations (e.g., incompatible models/versions) are ignored.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AndroidMatrix {
  public static final String SERIALIZED_NAME_ANDROID_MODEL_IDS = "androidModelIds";
  @SerializedName(SERIALIZED_NAME_ANDROID_MODEL_IDS)
  private List<String> androidModelIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANDROID_VERSION_IDS = "androidVersionIds";
  @SerializedName(SERIALIZED_NAME_ANDROID_VERSION_IDS)
  private List<String> androidVersionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCALES = "locales";
  @SerializedName(SERIALIZED_NAME_LOCALES)
  private List<String> locales = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIENTATIONS = "orientations";
  @SerializedName(SERIALIZED_NAME_ORIENTATIONS)
  private List<String> orientations = new ArrayList<>();

  public AndroidMatrix() {
  }

  public AndroidMatrix androidModelIds(List<String> androidModelIds) {
    this.androidModelIds = androidModelIds;
    return this;
  }

  public AndroidMatrix addAndroidModelIdsItem(String androidModelIdsItem) {
    if (this.androidModelIds == null) {
      this.androidModelIds = new ArrayList<>();
    }
    this.androidModelIds.add(androidModelIdsItem);
    return this;
  }

  /**
   * Required. The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
   * @return androidModelIds
   */
  @javax.annotation.Nullable
  public List<String> getAndroidModelIds() {
    return androidModelIds;
  }

  public void setAndroidModelIds(List<String> androidModelIds) {
    this.androidModelIds = androidModelIds;
  }


  public AndroidMatrix androidVersionIds(List<String> androidVersionIds) {
    this.androidVersionIds = androidVersionIds;
    return this;
  }

  public AndroidMatrix addAndroidVersionIdsItem(String androidVersionIdsItem) {
    if (this.androidVersionIds == null) {
      this.androidVersionIds = new ArrayList<>();
    }
    this.androidVersionIds.add(androidVersionIdsItem);
    return this;
  }

  /**
   * Required. The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
   * @return androidVersionIds
   */
  @javax.annotation.Nullable
  public List<String> getAndroidVersionIds() {
    return androidVersionIds;
  }

  public void setAndroidVersionIds(List<String> androidVersionIds) {
    this.androidVersionIds = androidVersionIds;
  }


  public AndroidMatrix locales(List<String> locales) {
    this.locales = locales;
    return this;
  }

  public AndroidMatrix addLocalesItem(String localesItem) {
    if (this.locales == null) {
      this.locales = new ArrayList<>();
    }
    this.locales.add(localesItem);
    return this;
  }

  /**
   * Required. The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
   * @return locales
   */
  @javax.annotation.Nullable
  public List<String> getLocales() {
    return locales;
  }

  public void setLocales(List<String> locales) {
    this.locales = locales;
  }


  public AndroidMatrix orientations(List<String> orientations) {
    this.orientations = orientations;
    return this;
  }

  public AndroidMatrix addOrientationsItem(String orientationsItem) {
    if (this.orientations == null) {
      this.orientations = new ArrayList<>();
    }
    this.orientations.add(orientationsItem);
    return this;
  }

  /**
   * Required. The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
   * @return orientations
   */
  @javax.annotation.Nullable
  public List<String> getOrientations() {
    return orientations;
  }

  public void setOrientations(List<String> orientations) {
    this.orientations = orientations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AndroidMatrix androidMatrix = (AndroidMatrix) o;
    return Objects.equals(this.androidModelIds, androidMatrix.androidModelIds) &&
        Objects.equals(this.androidVersionIds, androidMatrix.androidVersionIds) &&
        Objects.equals(this.locales, androidMatrix.locales) &&
        Objects.equals(this.orientations, androidMatrix.orientations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidModelIds, androidVersionIds, locales, orientations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AndroidMatrix {\n");
    sb.append("    androidModelIds: ").append(toIndentedString(androidModelIds)).append("\n");
    sb.append("    androidVersionIds: ").append(toIndentedString(androidVersionIds)).append("\n");
    sb.append("    locales: ").append(toIndentedString(locales)).append("\n");
    sb.append("    orientations: ").append(toIndentedString(orientations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("androidModelIds");
    openapiFields.add("androidVersionIds");
    openapiFields.add("locales");
    openapiFields.add("orientations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AndroidMatrix
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AndroidMatrix.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AndroidMatrix is not found in the empty JSON string", AndroidMatrix.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AndroidMatrix.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AndroidMatrix` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("androidModelIds") != null && !jsonObj.get("androidModelIds").isJsonNull() && !jsonObj.get("androidModelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `androidModelIds` to be an array in the JSON string but got `%s`", jsonObj.get("androidModelIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("androidVersionIds") != null && !jsonObj.get("androidVersionIds").isJsonNull() && !jsonObj.get("androidVersionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `androidVersionIds` to be an array in the JSON string but got `%s`", jsonObj.get("androidVersionIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locales") != null && !jsonObj.get("locales").isJsonNull() && !jsonObj.get("locales").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locales` to be an array in the JSON string but got `%s`", jsonObj.get("locales").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("orientations") != null && !jsonObj.get("orientations").isJsonNull() && !jsonObj.get("orientations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orientations` to be an array in the JSON string but got `%s`", jsonObj.get("orientations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AndroidMatrix.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AndroidMatrix' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AndroidMatrix> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AndroidMatrix.class));

       return (TypeAdapter<T>) new TypeAdapter<AndroidMatrix>() {
           @Override
           public void write(JsonWriter out, AndroidMatrix value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AndroidMatrix read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AndroidMatrix given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AndroidMatrix
   * @throws IOException if the JSON string is invalid with respect to AndroidMatrix
   */
  public static AndroidMatrix fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AndroidMatrix.class);
  }

  /**
   * Convert an instance of AndroidMatrix to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

