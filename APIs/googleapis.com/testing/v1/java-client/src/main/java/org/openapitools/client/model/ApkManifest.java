/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IntentFilter;
import org.openapitools.client.model.Metadata;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.UsesFeature;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Android app manifest. See http://developer.android.com/guide/topics/manifest/manifest-intro.html
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApkManifest {
  public static final String SERIALIZED_NAME_APPLICATION_LABEL = "applicationLabel";
  @SerializedName(SERIALIZED_NAME_APPLICATION_LABEL)
  private String applicationLabel;

  public static final String SERIALIZED_NAME_INTENT_FILTERS = "intentFilters";
  @SerializedName(SERIALIZED_NAME_INTENT_FILTERS)
  private List<IntentFilter> intentFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_SDK_VERSION = "maxSdkVersion";
  @SerializedName(SERIALIZED_NAME_MAX_SDK_VERSION)
  private Integer maxSdkVersion;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<Metadata> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIN_SDK_VERSION = "minSdkVersion";
  @SerializedName(SERIALIZED_NAME_MIN_SDK_VERSION)
  private Integer minSdkVersion;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "packageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<Service> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_SDK_VERSION = "targetSdkVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_SDK_VERSION)
  private Integer targetSdkVersion;

  public static final String SERIALIZED_NAME_USES_FEATURE = "usesFeature";
  @SerializedName(SERIALIZED_NAME_USES_FEATURE)
  private List<UsesFeature> usesFeature = new ArrayList<>();

  public static final String SERIALIZED_NAME_USES_PERMISSION = "usesPermission";
  @SerializedName(SERIALIZED_NAME_USES_PERMISSION)
  private List<String> usesPermission = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION_CODE = "versionCode";
  @SerializedName(SERIALIZED_NAME_VERSION_CODE)
  private String versionCode;

  public static final String SERIALIZED_NAME_VERSION_NAME = "versionName";
  @SerializedName(SERIALIZED_NAME_VERSION_NAME)
  private String versionName;

  public ApkManifest() {
  }

  public ApkManifest applicationLabel(String applicationLabel) {
    this.applicationLabel = applicationLabel;
    return this;
  }

  /**
   * User-readable name for the application.
   * @return applicationLabel
   */
  @javax.annotation.Nullable
  public String getApplicationLabel() {
    return applicationLabel;
  }

  public void setApplicationLabel(String applicationLabel) {
    this.applicationLabel = applicationLabel;
  }


  public ApkManifest intentFilters(List<IntentFilter> intentFilters) {
    this.intentFilters = intentFilters;
    return this;
  }

  public ApkManifest addIntentFiltersItem(IntentFilter intentFiltersItem) {
    if (this.intentFilters == null) {
      this.intentFilters = new ArrayList<>();
    }
    this.intentFilters.add(intentFiltersItem);
    return this;
  }

  /**
   * Get intentFilters
   * @return intentFilters
   */
  @javax.annotation.Nullable
  public List<IntentFilter> getIntentFilters() {
    return intentFilters;
  }

  public void setIntentFilters(List<IntentFilter> intentFilters) {
    this.intentFilters = intentFilters;
  }


  public ApkManifest maxSdkVersion(Integer maxSdkVersion) {
    this.maxSdkVersion = maxSdkVersion;
    return this;
  }

  /**
   * Maximum API level on which the application is designed to run.
   * @return maxSdkVersion
   */
  @javax.annotation.Nullable
  public Integer getMaxSdkVersion() {
    return maxSdkVersion;
  }

  public void setMaxSdkVersion(Integer maxSdkVersion) {
    this.maxSdkVersion = maxSdkVersion;
  }


  public ApkManifest metadata(List<Metadata> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ApkManifest addMetadataItem(Metadata metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * Meta-data tags defined in the manifest.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<Metadata> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<Metadata> metadata) {
    this.metadata = metadata;
  }


  public ApkManifest minSdkVersion(Integer minSdkVersion) {
    this.minSdkVersion = minSdkVersion;
    return this;
  }

  /**
   * Minimum API level required for the application to run.
   * @return minSdkVersion
   */
  @javax.annotation.Nullable
  public Integer getMinSdkVersion() {
    return minSdkVersion;
  }

  public void setMinSdkVersion(Integer minSdkVersion) {
    this.minSdkVersion = minSdkVersion;
  }


  public ApkManifest packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Full Java-style package name for this application, e.g. \&quot;com.example.foo\&quot;.
   * @return packageName
   */
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public ApkManifest services(List<Service> services) {
    this.services = services;
    return this;
  }

  public ApkManifest addServicesItem(Service servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * Services contained in the tag.
   * @return services
   */
  @javax.annotation.Nullable
  public List<Service> getServices() {
    return services;
  }

  public void setServices(List<Service> services) {
    this.services = services;
  }


  public ApkManifest targetSdkVersion(Integer targetSdkVersion) {
    this.targetSdkVersion = targetSdkVersion;
    return this;
  }

  /**
   * Specifies the API Level on which the application is designed to run.
   * @return targetSdkVersion
   */
  @javax.annotation.Nullable
  public Integer getTargetSdkVersion() {
    return targetSdkVersion;
  }

  public void setTargetSdkVersion(Integer targetSdkVersion) {
    this.targetSdkVersion = targetSdkVersion;
  }


  public ApkManifest usesFeature(List<UsesFeature> usesFeature) {
    this.usesFeature = usesFeature;
    return this;
  }

  public ApkManifest addUsesFeatureItem(UsesFeature usesFeatureItem) {
    if (this.usesFeature == null) {
      this.usesFeature = new ArrayList<>();
    }
    this.usesFeature.add(usesFeatureItem);
    return this;
  }

  /**
   * Feature usage tags defined in the manifest.
   * @return usesFeature
   */
  @javax.annotation.Nullable
  public List<UsesFeature> getUsesFeature() {
    return usesFeature;
  }

  public void setUsesFeature(List<UsesFeature> usesFeature) {
    this.usesFeature = usesFeature;
  }


  public ApkManifest usesPermission(List<String> usesPermission) {
    this.usesPermission = usesPermission;
    return this;
  }

  public ApkManifest addUsesPermissionItem(String usesPermissionItem) {
    if (this.usesPermission == null) {
      this.usesPermission = new ArrayList<>();
    }
    this.usesPermission.add(usesPermissionItem);
    return this;
  }

  /**
   * Permissions declared to be used by the application
   * @return usesPermission
   */
  @javax.annotation.Nullable
  public List<String> getUsesPermission() {
    return usesPermission;
  }

  public void setUsesPermission(List<String> usesPermission) {
    this.usesPermission = usesPermission;
  }


  public ApkManifest versionCode(String versionCode) {
    this.versionCode = versionCode;
    return this;
  }

  /**
   * Version number used internally by the app.
   * @return versionCode
   */
  @javax.annotation.Nullable
  public String getVersionCode() {
    return versionCode;
  }

  public void setVersionCode(String versionCode) {
    this.versionCode = versionCode;
  }


  public ApkManifest versionName(String versionName) {
    this.versionName = versionName;
    return this;
  }

  /**
   * Version number shown to users.
   * @return versionName
   */
  @javax.annotation.Nullable
  public String getVersionName() {
    return versionName;
  }

  public void setVersionName(String versionName) {
    this.versionName = versionName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApkManifest apkManifest = (ApkManifest) o;
    return Objects.equals(this.applicationLabel, apkManifest.applicationLabel) &&
        Objects.equals(this.intentFilters, apkManifest.intentFilters) &&
        Objects.equals(this.maxSdkVersion, apkManifest.maxSdkVersion) &&
        Objects.equals(this.metadata, apkManifest.metadata) &&
        Objects.equals(this.minSdkVersion, apkManifest.minSdkVersion) &&
        Objects.equals(this.packageName, apkManifest.packageName) &&
        Objects.equals(this.services, apkManifest.services) &&
        Objects.equals(this.targetSdkVersion, apkManifest.targetSdkVersion) &&
        Objects.equals(this.usesFeature, apkManifest.usesFeature) &&
        Objects.equals(this.usesPermission, apkManifest.usesPermission) &&
        Objects.equals(this.versionCode, apkManifest.versionCode) &&
        Objects.equals(this.versionName, apkManifest.versionName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationLabel, intentFilters, maxSdkVersion, metadata, minSdkVersion, packageName, services, targetSdkVersion, usesFeature, usesPermission, versionCode, versionName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApkManifest {\n");
    sb.append("    applicationLabel: ").append(toIndentedString(applicationLabel)).append("\n");
    sb.append("    intentFilters: ").append(toIndentedString(intentFilters)).append("\n");
    sb.append("    maxSdkVersion: ").append(toIndentedString(maxSdkVersion)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    minSdkVersion: ").append(toIndentedString(minSdkVersion)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    targetSdkVersion: ").append(toIndentedString(targetSdkVersion)).append("\n");
    sb.append("    usesFeature: ").append(toIndentedString(usesFeature)).append("\n");
    sb.append("    usesPermission: ").append(toIndentedString(usesPermission)).append("\n");
    sb.append("    versionCode: ").append(toIndentedString(versionCode)).append("\n");
    sb.append("    versionName: ").append(toIndentedString(versionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationLabel");
    openapiFields.add("intentFilters");
    openapiFields.add("maxSdkVersion");
    openapiFields.add("metadata");
    openapiFields.add("minSdkVersion");
    openapiFields.add("packageName");
    openapiFields.add("services");
    openapiFields.add("targetSdkVersion");
    openapiFields.add("usesFeature");
    openapiFields.add("usesPermission");
    openapiFields.add("versionCode");
    openapiFields.add("versionName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApkManifest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApkManifest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApkManifest is not found in the empty JSON string", ApkManifest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApkManifest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApkManifest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applicationLabel") != null && !jsonObj.get("applicationLabel").isJsonNull()) && !jsonObj.get("applicationLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationLabel").toString()));
      }
      if (jsonObj.get("intentFilters") != null && !jsonObj.get("intentFilters").isJsonNull()) {
        JsonArray jsonArrayintentFilters = jsonObj.getAsJsonArray("intentFilters");
        if (jsonArrayintentFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("intentFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `intentFilters` to be an array in the JSON string but got `%s`", jsonObj.get("intentFilters").toString()));
          }

          // validate the optional field `intentFilters` (array)
          for (int i = 0; i < jsonArrayintentFilters.size(); i++) {
            IntentFilter.validateJsonElement(jsonArrayintentFilters.get(i));
          };
        }
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            Metadata.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      if ((jsonObj.get("packageName") != null && !jsonObj.get("packageName").isJsonNull()) && !jsonObj.get("packageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageName").toString()));
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            Service.validateJsonElement(jsonArrayservices.get(i));
          };
        }
      }
      if (jsonObj.get("usesFeature") != null && !jsonObj.get("usesFeature").isJsonNull()) {
        JsonArray jsonArrayusesFeature = jsonObj.getAsJsonArray("usesFeature");
        if (jsonArrayusesFeature != null) {
          // ensure the json data is an array
          if (!jsonObj.get("usesFeature").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `usesFeature` to be an array in the JSON string but got `%s`", jsonObj.get("usesFeature").toString()));
          }

          // validate the optional field `usesFeature` (array)
          for (int i = 0; i < jsonArrayusesFeature.size(); i++) {
            UsesFeature.validateJsonElement(jsonArrayusesFeature.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("usesPermission") != null && !jsonObj.get("usesPermission").isJsonNull() && !jsonObj.get("usesPermission").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usesPermission` to be an array in the JSON string but got `%s`", jsonObj.get("usesPermission").toString()));
      }
      if ((jsonObj.get("versionCode") != null && !jsonObj.get("versionCode").isJsonNull()) && !jsonObj.get("versionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionCode").toString()));
      }
      if ((jsonObj.get("versionName") != null && !jsonObj.get("versionName").isJsonNull()) && !jsonObj.get("versionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApkManifest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApkManifest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApkManifest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApkManifest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApkManifest>() {
           @Override
           public void write(JsonWriter out, ApkManifest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApkManifest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApkManifest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApkManifest
   * @throws IOException if the JSON string is invalid with respect to ApkManifest
   */
  public static ApkManifest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApkManifest.class);
  }

  /**
   * Convert an instance of ApkManifest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

