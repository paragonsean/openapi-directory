/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppBundle;
import org.openapitools.client.model.FileReference;
import org.openapitools.client.model.ShardingOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AndroidInstrumentationTest {
  public static final String SERIALIZED_NAME_APP_APK = "appApk";
  @SerializedName(SERIALIZED_NAME_APP_APK)
  private FileReference appApk;

  public static final String SERIALIZED_NAME_APP_BUNDLE = "appBundle";
  @SerializedName(SERIALIZED_NAME_APP_BUNDLE)
  private AppBundle appBundle;

  public static final String SERIALIZED_NAME_APP_PACKAGE_ID = "appPackageId";
  @SerializedName(SERIALIZED_NAME_APP_PACKAGE_ID)
  private String appPackageId;

  /**
   * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
   */
  @JsonAdapter(OrchestratorOptionEnum.Adapter.class)
  public enum OrchestratorOptionEnum {
    ORCHESTRATOR_OPTION_UNSPECIFIED("ORCHESTRATOR_OPTION_UNSPECIFIED"),
    
    USE_ORCHESTRATOR("USE_ORCHESTRATOR"),
    
    DO_NOT_USE_ORCHESTRATOR("DO_NOT_USE_ORCHESTRATOR");

    private String value;

    OrchestratorOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrchestratorOptionEnum fromValue(String value) {
      for (OrchestratorOptionEnum b : OrchestratorOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrchestratorOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrchestratorOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrchestratorOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrchestratorOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrchestratorOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORCHESTRATOR_OPTION = "orchestratorOption";
  @SerializedName(SERIALIZED_NAME_ORCHESTRATOR_OPTION)
  private OrchestratorOptionEnum orchestratorOption;

  public static final String SERIALIZED_NAME_SHARDING_OPTION = "shardingOption";
  @SerializedName(SERIALIZED_NAME_SHARDING_OPTION)
  private ShardingOption shardingOption;

  public static final String SERIALIZED_NAME_TEST_APK = "testApk";
  @SerializedName(SERIALIZED_NAME_TEST_APK)
  private FileReference testApk;

  public static final String SERIALIZED_NAME_TEST_PACKAGE_ID = "testPackageId";
  @SerializedName(SERIALIZED_NAME_TEST_PACKAGE_ID)
  private String testPackageId;

  public static final String SERIALIZED_NAME_TEST_RUNNER_CLASS = "testRunnerClass";
  @SerializedName(SERIALIZED_NAME_TEST_RUNNER_CLASS)
  private String testRunnerClass;

  public static final String SERIALIZED_NAME_TEST_TARGETS = "testTargets";
  @SerializedName(SERIALIZED_NAME_TEST_TARGETS)
  private List<String> testTargets = new ArrayList<>();

  public AndroidInstrumentationTest() {
  }

  public AndroidInstrumentationTest appApk(FileReference appApk) {
    this.appApk = appApk;
    return this;
  }

  /**
   * Get appApk
   * @return appApk
   */
  @javax.annotation.Nullable
  public FileReference getAppApk() {
    return appApk;
  }

  public void setAppApk(FileReference appApk) {
    this.appApk = appApk;
  }


  public AndroidInstrumentationTest appBundle(AppBundle appBundle) {
    this.appBundle = appBundle;
    return this;
  }

  /**
   * Get appBundle
   * @return appBundle
   */
  @javax.annotation.Nullable
  public AppBundle getAppBundle() {
    return appBundle;
  }

  public void setAppBundle(AppBundle appBundle) {
    this.appBundle = appBundle;
  }


  public AndroidInstrumentationTest appPackageId(String appPackageId) {
    this.appPackageId = appPackageId;
    return this;
  }

  /**
   * The java package for the application under test. The default value is determined by examining the application&#39;s manifest.
   * @return appPackageId
   */
  @javax.annotation.Nullable
  public String getAppPackageId() {
    return appPackageId;
  }

  public void setAppPackageId(String appPackageId) {
    this.appPackageId = appPackageId;
  }


  public AndroidInstrumentationTest orchestratorOption(OrchestratorOptionEnum orchestratorOption) {
    this.orchestratorOption = orchestratorOption;
    return this;
  }

  /**
   * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
   * @return orchestratorOption
   */
  @javax.annotation.Nullable
  public OrchestratorOptionEnum getOrchestratorOption() {
    return orchestratorOption;
  }

  public void setOrchestratorOption(OrchestratorOptionEnum orchestratorOption) {
    this.orchestratorOption = orchestratorOption;
  }


  public AndroidInstrumentationTest shardingOption(ShardingOption shardingOption) {
    this.shardingOption = shardingOption;
    return this;
  }

  /**
   * Get shardingOption
   * @return shardingOption
   */
  @javax.annotation.Nullable
  public ShardingOption getShardingOption() {
    return shardingOption;
  }

  public void setShardingOption(ShardingOption shardingOption) {
    this.shardingOption = shardingOption;
  }


  public AndroidInstrumentationTest testApk(FileReference testApk) {
    this.testApk = testApk;
    return this;
  }

  /**
   * Get testApk
   * @return testApk
   */
  @javax.annotation.Nullable
  public FileReference getTestApk() {
    return testApk;
  }

  public void setTestApk(FileReference testApk) {
    this.testApk = testApk;
  }


  public AndroidInstrumentationTest testPackageId(String testPackageId) {
    this.testPackageId = testPackageId;
    return this;
  }

  /**
   * The java package for the test to be executed. The default value is determined by examining the application&#39;s manifest.
   * @return testPackageId
   */
  @javax.annotation.Nullable
  public String getTestPackageId() {
    return testPackageId;
  }

  public void setTestPackageId(String testPackageId) {
    this.testPackageId = testPackageId;
  }


  public AndroidInstrumentationTest testRunnerClass(String testRunnerClass) {
    this.testRunnerClass = testRunnerClass;
    return this;
  }

  /**
   * The InstrumentationTestRunner class. The default value is determined by examining the application&#39;s manifest.
   * @return testRunnerClass
   */
  @javax.annotation.Nullable
  public String getTestRunnerClass() {
    return testRunnerClass;
  }

  public void setTestRunnerClass(String testRunnerClass) {
    this.testRunnerClass = testRunnerClass;
  }


  public AndroidInstrumentationTest testTargets(List<String> testTargets) {
    this.testTargets = testTargets;
    return this;
  }

  public AndroidInstrumentationTest addTestTargetsItem(String testTargetsItem) {
    if (this.testTargets == null) {
      this.testTargets = new ArrayList<>();
    }
    this.testTargets.add(testTargetsItem);
    return this;
  }

  /**
   * Each target must be fully qualified with the package name or class name, in one of these formats: - \&quot;package package_name\&quot; - \&quot;class package_name.class_name\&quot; - \&quot;class package_name.class_name#method_name\&quot; If empty, all targets in the module will be run.
   * @return testTargets
   */
  @javax.annotation.Nullable
  public List<String> getTestTargets() {
    return testTargets;
  }

  public void setTestTargets(List<String> testTargets) {
    this.testTargets = testTargets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AndroidInstrumentationTest androidInstrumentationTest = (AndroidInstrumentationTest) o;
    return Objects.equals(this.appApk, androidInstrumentationTest.appApk) &&
        Objects.equals(this.appBundle, androidInstrumentationTest.appBundle) &&
        Objects.equals(this.appPackageId, androidInstrumentationTest.appPackageId) &&
        Objects.equals(this.orchestratorOption, androidInstrumentationTest.orchestratorOption) &&
        Objects.equals(this.shardingOption, androidInstrumentationTest.shardingOption) &&
        Objects.equals(this.testApk, androidInstrumentationTest.testApk) &&
        Objects.equals(this.testPackageId, androidInstrumentationTest.testPackageId) &&
        Objects.equals(this.testRunnerClass, androidInstrumentationTest.testRunnerClass) &&
        Objects.equals(this.testTargets, androidInstrumentationTest.testTargets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appApk, appBundle, appPackageId, orchestratorOption, shardingOption, testApk, testPackageId, testRunnerClass, testTargets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AndroidInstrumentationTest {\n");
    sb.append("    appApk: ").append(toIndentedString(appApk)).append("\n");
    sb.append("    appBundle: ").append(toIndentedString(appBundle)).append("\n");
    sb.append("    appPackageId: ").append(toIndentedString(appPackageId)).append("\n");
    sb.append("    orchestratorOption: ").append(toIndentedString(orchestratorOption)).append("\n");
    sb.append("    shardingOption: ").append(toIndentedString(shardingOption)).append("\n");
    sb.append("    testApk: ").append(toIndentedString(testApk)).append("\n");
    sb.append("    testPackageId: ").append(toIndentedString(testPackageId)).append("\n");
    sb.append("    testRunnerClass: ").append(toIndentedString(testRunnerClass)).append("\n");
    sb.append("    testTargets: ").append(toIndentedString(testTargets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appApk");
    openapiFields.add("appBundle");
    openapiFields.add("appPackageId");
    openapiFields.add("orchestratorOption");
    openapiFields.add("shardingOption");
    openapiFields.add("testApk");
    openapiFields.add("testPackageId");
    openapiFields.add("testRunnerClass");
    openapiFields.add("testTargets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AndroidInstrumentationTest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AndroidInstrumentationTest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AndroidInstrumentationTest is not found in the empty JSON string", AndroidInstrumentationTest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AndroidInstrumentationTest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AndroidInstrumentationTest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appApk`
      if (jsonObj.get("appApk") != null && !jsonObj.get("appApk").isJsonNull()) {
        FileReference.validateJsonElement(jsonObj.get("appApk"));
      }
      // validate the optional field `appBundle`
      if (jsonObj.get("appBundle") != null && !jsonObj.get("appBundle").isJsonNull()) {
        AppBundle.validateJsonElement(jsonObj.get("appBundle"));
      }
      if ((jsonObj.get("appPackageId") != null && !jsonObj.get("appPackageId").isJsonNull()) && !jsonObj.get("appPackageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appPackageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appPackageId").toString()));
      }
      if ((jsonObj.get("orchestratorOption") != null && !jsonObj.get("orchestratorOption").isJsonNull()) && !jsonObj.get("orchestratorOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orchestratorOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orchestratorOption").toString()));
      }
      // validate the optional field `orchestratorOption`
      if (jsonObj.get("orchestratorOption") != null && !jsonObj.get("orchestratorOption").isJsonNull()) {
        OrchestratorOptionEnum.validateJsonElement(jsonObj.get("orchestratorOption"));
      }
      // validate the optional field `shardingOption`
      if (jsonObj.get("shardingOption") != null && !jsonObj.get("shardingOption").isJsonNull()) {
        ShardingOption.validateJsonElement(jsonObj.get("shardingOption"));
      }
      // validate the optional field `testApk`
      if (jsonObj.get("testApk") != null && !jsonObj.get("testApk").isJsonNull()) {
        FileReference.validateJsonElement(jsonObj.get("testApk"));
      }
      if ((jsonObj.get("testPackageId") != null && !jsonObj.get("testPackageId").isJsonNull()) && !jsonObj.get("testPackageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testPackageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testPackageId").toString()));
      }
      if ((jsonObj.get("testRunnerClass") != null && !jsonObj.get("testRunnerClass").isJsonNull()) && !jsonObj.get("testRunnerClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testRunnerClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testRunnerClass").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("testTargets") != null && !jsonObj.get("testTargets").isJsonNull() && !jsonObj.get("testTargets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testTargets` to be an array in the JSON string but got `%s`", jsonObj.get("testTargets").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AndroidInstrumentationTest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AndroidInstrumentationTest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AndroidInstrumentationTest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AndroidInstrumentationTest.class));

       return (TypeAdapter<T>) new TypeAdapter<AndroidInstrumentationTest>() {
           @Override
           public void write(JsonWriter out, AndroidInstrumentationTest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AndroidInstrumentationTest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AndroidInstrumentationTest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AndroidInstrumentationTest
   * @throws IOException if the JSON string is invalid with respect to AndroidInstrumentationTest
   */
  public static AndroidInstrumentationTest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AndroidInstrumentationTest.class);
  }

  /**
   * Convert an instance of AndroidInstrumentationTest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

