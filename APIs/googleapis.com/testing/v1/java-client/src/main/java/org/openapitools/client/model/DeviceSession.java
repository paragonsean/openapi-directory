/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AndroidDevice;
import org.openapitools.client.model.SessionStateEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Protobuf message describing the device message, used from several RPCs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceSession {
  public static final String SERIALIZED_NAME_ACTIVE_START_TIME = "activeStartTime";
  @SerializedName(SERIALIZED_NAME_ACTIVE_START_TIME)
  private String activeStartTime;

  public static final String SERIALIZED_NAME_ANDROID_DEVICE = "androidDevice";
  @SerializedName(SERIALIZED_NAME_ANDROID_DEVICE)
  private AndroidDevice androidDevice;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_INACTIVITY_TIMEOUT = "inactivityTimeout";
  @SerializedName(SERIALIZED_NAME_INACTIVITY_TIMEOUT)
  private String inactivityTimeout;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. Current state of the DeviceSession.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    SESSION_STATE_UNSPECIFIED("SESSION_STATE_UNSPECIFIED"),
    
    REQUESTED("REQUESTED"),
    
    PENDING("PENDING"),
    
    ACTIVE("ACTIVE"),
    
    EXPIRED("EXPIRED"),
    
    FINISHED("FINISHED"),
    
    UNAVAILABLE("UNAVAILABLE"),
    
    ERROR("ERROR");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_HISTORIES = "stateHistories";
  @SerializedName(SERIALIZED_NAME_STATE_HISTORIES)
  private List<SessionStateEvent> stateHistories = new ArrayList<>();

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  public DeviceSession() {
  }

  public DeviceSession(
     String activeStartTime, 
     String createTime, 
     String displayName, 
     String inactivityTimeout, 
     StateEnum state, 
     List<SessionStateEvent> stateHistories
  ) {
    this();
    this.activeStartTime = activeStartTime;
    this.createTime = createTime;
    this.displayName = displayName;
    this.inactivityTimeout = inactivityTimeout;
    this.state = state;
    this.stateHistories = stateHistories;
  }

  /**
   * Output only. The timestamp that the session first became ACTIVE.
   * @return activeStartTime
   */
  @javax.annotation.Nullable
  public String getActiveStartTime() {
    return activeStartTime;
  }



  public DeviceSession androidDevice(AndroidDevice androidDevice) {
    this.androidDevice = androidDevice;
    return this;
  }

  /**
   * Get androidDevice
   * @return androidDevice
   */
  @javax.annotation.Nullable
  public AndroidDevice getAndroidDevice() {
    return androidDevice;
  }

  public void setAndroidDevice(AndroidDevice androidDevice) {
    this.androidDevice = androidDevice;
  }


  /**
   * Output only. The time that the Session was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The title of the DeviceSession to be presented in the UI.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  public DeviceSession expireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Optional. If the device is still in use at this time, any connections will be ended and the SessionState will transition from ACTIVE to FINISHED.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(String expireTime) {
    this.expireTime = expireTime;
  }


  /**
   * Output only. The interval of time that this device must be interacted with before it transitions from ACTIVE to TIMEOUT_INACTIVITY.
   * @return inactivityTimeout
   */
  @javax.annotation.Nullable
  public String getInactivityTimeout() {
    return inactivityTimeout;
  }



  public DeviceSession name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Name of the DeviceSession, e.g. \&quot;projects/{project_id}/deviceSessions/{session_id}\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Current state of the DeviceSession.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The historical state transitions of the session_state message including the current session state.
   * @return stateHistories
   */
  @javax.annotation.Nullable
  public List<SessionStateEvent> getStateHistories() {
    return stateHistories;
  }



  public DeviceSession ttl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Optional. The amount of time that a device will be initially allocated for. This can eventually be extended with the UpdateDeviceSession RPC. Default: 30 minutes.
   * @return ttl
   */
  @javax.annotation.Nullable
  public String getTtl() {
    return ttl;
  }

  public void setTtl(String ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceSession deviceSession = (DeviceSession) o;
    return Objects.equals(this.activeStartTime, deviceSession.activeStartTime) &&
        Objects.equals(this.androidDevice, deviceSession.androidDevice) &&
        Objects.equals(this.createTime, deviceSession.createTime) &&
        Objects.equals(this.displayName, deviceSession.displayName) &&
        Objects.equals(this.expireTime, deviceSession.expireTime) &&
        Objects.equals(this.inactivityTimeout, deviceSession.inactivityTimeout) &&
        Objects.equals(this.name, deviceSession.name) &&
        Objects.equals(this.state, deviceSession.state) &&
        Objects.equals(this.stateHistories, deviceSession.stateHistories) &&
        Objects.equals(this.ttl, deviceSession.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeStartTime, androidDevice, createTime, displayName, expireTime, inactivityTimeout, name, state, stateHistories, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceSession {\n");
    sb.append("    activeStartTime: ").append(toIndentedString(activeStartTime)).append("\n");
    sb.append("    androidDevice: ").append(toIndentedString(androidDevice)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    inactivityTimeout: ").append(toIndentedString(inactivityTimeout)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateHistories: ").append(toIndentedString(stateHistories)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeStartTime");
    openapiFields.add("androidDevice");
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("expireTime");
    openapiFields.add("inactivityTimeout");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("stateHistories");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceSession is not found in the empty JSON string", DeviceSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activeStartTime") != null && !jsonObj.get("activeStartTime").isJsonNull()) && !jsonObj.get("activeStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeStartTime").toString()));
      }
      // validate the optional field `androidDevice`
      if (jsonObj.get("androidDevice") != null && !jsonObj.get("androidDevice").isJsonNull()) {
        AndroidDevice.validateJsonElement(jsonObj.get("androidDevice"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("inactivityTimeout") != null && !jsonObj.get("inactivityTimeout").isJsonNull()) && !jsonObj.get("inactivityTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inactivityTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inactivityTimeout").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("stateHistories") != null && !jsonObj.get("stateHistories").isJsonNull()) {
        JsonArray jsonArraystateHistories = jsonObj.getAsJsonArray("stateHistories");
        if (jsonArraystateHistories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stateHistories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stateHistories` to be an array in the JSON string but got `%s`", jsonObj.get("stateHistories").toString()));
          }

          // validate the optional field `stateHistories` (array)
          for (int i = 0; i < jsonArraystateHistories.size(); i++) {
            SessionStateEvent.validateJsonElement(jsonArraystateHistories.get(i));
          };
        }
      }
      if ((jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceSession.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceSession>() {
           @Override
           public void write(JsonWriter out, DeviceSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceSession
   * @throws IOException if the JSON string is invalid with respect to DeviceSession
   */
  public static DeviceSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceSession.class);
  }

  /**
   * Convert an instance of DeviceSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

