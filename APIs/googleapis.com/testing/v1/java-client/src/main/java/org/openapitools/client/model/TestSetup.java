/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.Apk;
import org.openapitools.client.model.DeviceFile;
import org.openapitools.client.model.EnvironmentVariable;
import org.openapitools.client.model.SystraceSetup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of how to set up the Android device prior to running the test.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestSetup {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private Account account;

  public static final String SERIALIZED_NAME_ADDITIONAL_APKS = "additionalApks";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_APKS)
  private List<Apk> additionalApks = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIRECTORIES_TO_PULL = "directoriesToPull";
  @SerializedName(SERIALIZED_NAME_DIRECTORIES_TO_PULL)
  private List<String> directoriesToPull = new ArrayList<>();

  public static final String SERIALIZED_NAME_DONT_AUTOGRANT_PERMISSIONS = "dontAutograntPermissions";
  @SerializedName(SERIALIZED_NAME_DONT_AUTOGRANT_PERMISSIONS)
  private Boolean dontAutograntPermissions;

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private List<EnvironmentVariable> environmentVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILES_TO_PUSH = "filesToPush";
  @SerializedName(SERIALIZED_NAME_FILES_TO_PUSH)
  private List<DeviceFile> filesToPush = new ArrayList<>();

  public static final String SERIALIZED_NAME_INITIAL_SETUP_APKS = "initialSetupApks";
  @SerializedName(SERIALIZED_NAME_INITIAL_SETUP_APKS)
  private List<Apk> initialSetupApks = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_PROFILE = "networkProfile";
  @SerializedName(SERIALIZED_NAME_NETWORK_PROFILE)
  private String networkProfile;

  public static final String SERIALIZED_NAME_SYSTRACE = "systrace";
  @SerializedName(SERIALIZED_NAME_SYSTRACE)
  private SystraceSetup systrace;

  public TestSetup() {
  }

  public TestSetup account(Account account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public Account getAccount() {
    return account;
  }

  public void setAccount(Account account) {
    this.account = account;
  }


  public TestSetup additionalApks(List<Apk> additionalApks) {
    this.additionalApks = additionalApks;
    return this;
  }

  public TestSetup addAdditionalApksItem(Apk additionalApksItem) {
    if (this.additionalApks == null) {
      this.additionalApks = new ArrayList<>();
    }
    this.additionalApks.add(additionalApksItem);
    return this;
  }

  /**
   * APKs to install in addition to those being directly tested. These will be installed after the app under test. Currently capped at 100.
   * @return additionalApks
   */
  @javax.annotation.Nullable
  public List<Apk> getAdditionalApks() {
    return additionalApks;
  }

  public void setAdditionalApks(List<Apk> additionalApks) {
    this.additionalApks = additionalApks;
  }


  public TestSetup directoriesToPull(List<String> directoriesToPull) {
    this.directoriesToPull = directoriesToPull;
    return this;
  }

  public TestSetup addDirectoriesToPullItem(String directoriesToPullItem) {
    if (this.directoriesToPull == null) {
      this.directoriesToPull = new ArrayList<>();
    }
    this.directoriesToPull.add(directoriesToPullItem);
    return this;
  }

  /**
   * List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
   * @return directoriesToPull
   */
  @javax.annotation.Nullable
  public List<String> getDirectoriesToPull() {
    return directoriesToPull;
  }

  public void setDirectoriesToPull(List<String> directoriesToPull) {
    this.directoriesToPull = directoriesToPull;
  }


  public TestSetup dontAutograntPermissions(Boolean dontAutograntPermissions) {
    this.dontAutograntPermissions = dontAutograntPermissions;
    return this;
  }

  /**
   * Whether to prevent all runtime permissions to be granted at app install
   * @return dontAutograntPermissions
   */
  @javax.annotation.Nullable
  public Boolean getDontAutograntPermissions() {
    return dontAutograntPermissions;
  }

  public void setDontAutograntPermissions(Boolean dontAutograntPermissions) {
    this.dontAutograntPermissions = dontAutograntPermissions;
  }


  public TestSetup environmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public TestSetup addEnvironmentVariablesItem(EnvironmentVariable environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new ArrayList<>();
    }
    this.environmentVariables.add(environmentVariablesItem);
    return this;
  }

  /**
   * Environment variables to set for the test (only applicable for instrumentation tests).
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public List<EnvironmentVariable> getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  public TestSetup filesToPush(List<DeviceFile> filesToPush) {
    this.filesToPush = filesToPush;
    return this;
  }

  public TestSetup addFilesToPushItem(DeviceFile filesToPushItem) {
    if (this.filesToPush == null) {
      this.filesToPush = new ArrayList<>();
    }
    this.filesToPush.add(filesToPushItem);
    return this;
  }

  /**
   * List of files to push to the device before starting the test.
   * @return filesToPush
   */
  @javax.annotation.Nullable
  public List<DeviceFile> getFilesToPush() {
    return filesToPush;
  }

  public void setFilesToPush(List<DeviceFile> filesToPush) {
    this.filesToPush = filesToPush;
  }


  public TestSetup initialSetupApks(List<Apk> initialSetupApks) {
    this.initialSetupApks = initialSetupApks;
    return this;
  }

  public TestSetup addInitialSetupApksItem(Apk initialSetupApksItem) {
    if (this.initialSetupApks == null) {
      this.initialSetupApks = new ArrayList<>();
    }
    this.initialSetupApks.add(initialSetupApksItem);
    return this;
  }

  /**
   * Optional. Initial setup APKs to install before the app under test is installed. Currently capped at 100.
   * @return initialSetupApks
   */
  @javax.annotation.Nullable
  public List<Apk> getInitialSetupApks() {
    return initialSetupApks;
  }

  public void setInitialSetupApks(List<Apk> initialSetupApks) {
    this.initialSetupApks = initialSetupApks;
  }


  public TestSetup networkProfile(String networkProfile) {
    this.networkProfile = networkProfile;
    return this;
  }

  /**
   * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
   * @return networkProfile
   */
  @javax.annotation.Nullable
  public String getNetworkProfile() {
    return networkProfile;
  }

  public void setNetworkProfile(String networkProfile) {
    this.networkProfile = networkProfile;
  }


  public TestSetup systrace(SystraceSetup systrace) {
    this.systrace = systrace;
    return this;
  }

  /**
   * Get systrace
   * @return systrace
   */
  @javax.annotation.Nullable
  public SystraceSetup getSystrace() {
    return systrace;
  }

  public void setSystrace(SystraceSetup systrace) {
    this.systrace = systrace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestSetup testSetup = (TestSetup) o;
    return Objects.equals(this.account, testSetup.account) &&
        Objects.equals(this.additionalApks, testSetup.additionalApks) &&
        Objects.equals(this.directoriesToPull, testSetup.directoriesToPull) &&
        Objects.equals(this.dontAutograntPermissions, testSetup.dontAutograntPermissions) &&
        Objects.equals(this.environmentVariables, testSetup.environmentVariables) &&
        Objects.equals(this.filesToPush, testSetup.filesToPush) &&
        Objects.equals(this.initialSetupApks, testSetup.initialSetupApks) &&
        Objects.equals(this.networkProfile, testSetup.networkProfile) &&
        Objects.equals(this.systrace, testSetup.systrace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, additionalApks, directoriesToPull, dontAutograntPermissions, environmentVariables, filesToPush, initialSetupApks, networkProfile, systrace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestSetup {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    additionalApks: ").append(toIndentedString(additionalApks)).append("\n");
    sb.append("    directoriesToPull: ").append(toIndentedString(directoriesToPull)).append("\n");
    sb.append("    dontAutograntPermissions: ").append(toIndentedString(dontAutograntPermissions)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    filesToPush: ").append(toIndentedString(filesToPush)).append("\n");
    sb.append("    initialSetupApks: ").append(toIndentedString(initialSetupApks)).append("\n");
    sb.append("    networkProfile: ").append(toIndentedString(networkProfile)).append("\n");
    sb.append("    systrace: ").append(toIndentedString(systrace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("additionalApks");
    openapiFields.add("directoriesToPull");
    openapiFields.add("dontAutograntPermissions");
    openapiFields.add("environmentVariables");
    openapiFields.add("filesToPush");
    openapiFields.add("initialSetupApks");
    openapiFields.add("networkProfile");
    openapiFields.add("systrace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestSetup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestSetup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestSetup is not found in the empty JSON string", TestSetup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestSetup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestSetup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        Account.validateJsonElement(jsonObj.get("account"));
      }
      if (jsonObj.get("additionalApks") != null && !jsonObj.get("additionalApks").isJsonNull()) {
        JsonArray jsonArrayadditionalApks = jsonObj.getAsJsonArray("additionalApks");
        if (jsonArrayadditionalApks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalApks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalApks` to be an array in the JSON string but got `%s`", jsonObj.get("additionalApks").toString()));
          }

          // validate the optional field `additionalApks` (array)
          for (int i = 0; i < jsonArrayadditionalApks.size(); i++) {
            Apk.validateJsonElement(jsonArrayadditionalApks.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("directoriesToPull") != null && !jsonObj.get("directoriesToPull").isJsonNull() && !jsonObj.get("directoriesToPull").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `directoriesToPull` to be an array in the JSON string but got `%s`", jsonObj.get("directoriesToPull").toString()));
      }
      if (jsonObj.get("environmentVariables") != null && !jsonObj.get("environmentVariables").isJsonNull()) {
        JsonArray jsonArrayenvironmentVariables = jsonObj.getAsJsonArray("environmentVariables");
        if (jsonArrayenvironmentVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentVariables` to be an array in the JSON string but got `%s`", jsonObj.get("environmentVariables").toString()));
          }

          // validate the optional field `environmentVariables` (array)
          for (int i = 0; i < jsonArrayenvironmentVariables.size(); i++) {
            EnvironmentVariable.validateJsonElement(jsonArrayenvironmentVariables.get(i));
          };
        }
      }
      if (jsonObj.get("filesToPush") != null && !jsonObj.get("filesToPush").isJsonNull()) {
        JsonArray jsonArrayfilesToPush = jsonObj.getAsJsonArray("filesToPush");
        if (jsonArrayfilesToPush != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filesToPush").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filesToPush` to be an array in the JSON string but got `%s`", jsonObj.get("filesToPush").toString()));
          }

          // validate the optional field `filesToPush` (array)
          for (int i = 0; i < jsonArrayfilesToPush.size(); i++) {
            DeviceFile.validateJsonElement(jsonArrayfilesToPush.get(i));
          };
        }
      }
      if (jsonObj.get("initialSetupApks") != null && !jsonObj.get("initialSetupApks").isJsonNull()) {
        JsonArray jsonArrayinitialSetupApks = jsonObj.getAsJsonArray("initialSetupApks");
        if (jsonArrayinitialSetupApks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("initialSetupApks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `initialSetupApks` to be an array in the JSON string but got `%s`", jsonObj.get("initialSetupApks").toString()));
          }

          // validate the optional field `initialSetupApks` (array)
          for (int i = 0; i < jsonArrayinitialSetupApks.size(); i++) {
            Apk.validateJsonElement(jsonArrayinitialSetupApks.get(i));
          };
        }
      }
      if ((jsonObj.get("networkProfile") != null && !jsonObj.get("networkProfile").isJsonNull()) && !jsonObj.get("networkProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkProfile").toString()));
      }
      // validate the optional field `systrace`
      if (jsonObj.get("systrace") != null && !jsonObj.get("systrace").isJsonNull()) {
        SystraceSetup.validateJsonElement(jsonObj.get("systrace"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestSetup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestSetup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestSetup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestSetup.class));

       return (TypeAdapter<T>) new TypeAdapter<TestSetup>() {
           @Override
           public void write(JsonWriter out, TestSetup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestSetup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestSetup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestSetup
   * @throws IOException if the JSON string is invalid with respect to TestSetup
   */
  public static TestSetup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestSetup.class);
  }

  /**
   * Convert an instance of TestSetup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

