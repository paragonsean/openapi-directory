/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AndroidDeviceCatalog;
import org.openapitools.client.model.DeviceIpBlockCatalog;
import org.openapitools.client.model.IosDeviceCatalog;
import org.openapitools.client.model.NetworkConfigurationCatalog;
import org.openapitools.client.model.ProvidedSoftwareCatalog;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of a test environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestEnvironmentCatalog {
  public static final String SERIALIZED_NAME_ANDROID_DEVICE_CATALOG = "androidDeviceCatalog";
  @SerializedName(SERIALIZED_NAME_ANDROID_DEVICE_CATALOG)
  private AndroidDeviceCatalog androidDeviceCatalog;

  public static final String SERIALIZED_NAME_DEVICE_IP_BLOCK_CATALOG = "deviceIpBlockCatalog";
  @SerializedName(SERIALIZED_NAME_DEVICE_IP_BLOCK_CATALOG)
  private DeviceIpBlockCatalog deviceIpBlockCatalog;

  public static final String SERIALIZED_NAME_IOS_DEVICE_CATALOG = "iosDeviceCatalog";
  @SerializedName(SERIALIZED_NAME_IOS_DEVICE_CATALOG)
  private IosDeviceCatalog iosDeviceCatalog;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION_CATALOG = "networkConfigurationCatalog";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION_CATALOG)
  private NetworkConfigurationCatalog networkConfigurationCatalog;

  public static final String SERIALIZED_NAME_SOFTWARE_CATALOG = "softwareCatalog";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_CATALOG)
  private ProvidedSoftwareCatalog softwareCatalog;

  public TestEnvironmentCatalog() {
  }

  public TestEnvironmentCatalog androidDeviceCatalog(AndroidDeviceCatalog androidDeviceCatalog) {
    this.androidDeviceCatalog = androidDeviceCatalog;
    return this;
  }

  /**
   * Get androidDeviceCatalog
   * @return androidDeviceCatalog
   */
  @javax.annotation.Nullable
  public AndroidDeviceCatalog getAndroidDeviceCatalog() {
    return androidDeviceCatalog;
  }

  public void setAndroidDeviceCatalog(AndroidDeviceCatalog androidDeviceCatalog) {
    this.androidDeviceCatalog = androidDeviceCatalog;
  }


  public TestEnvironmentCatalog deviceIpBlockCatalog(DeviceIpBlockCatalog deviceIpBlockCatalog) {
    this.deviceIpBlockCatalog = deviceIpBlockCatalog;
    return this;
  }

  /**
   * Get deviceIpBlockCatalog
   * @return deviceIpBlockCatalog
   */
  @javax.annotation.Nullable
  public DeviceIpBlockCatalog getDeviceIpBlockCatalog() {
    return deviceIpBlockCatalog;
  }

  public void setDeviceIpBlockCatalog(DeviceIpBlockCatalog deviceIpBlockCatalog) {
    this.deviceIpBlockCatalog = deviceIpBlockCatalog;
  }


  public TestEnvironmentCatalog iosDeviceCatalog(IosDeviceCatalog iosDeviceCatalog) {
    this.iosDeviceCatalog = iosDeviceCatalog;
    return this;
  }

  /**
   * Get iosDeviceCatalog
   * @return iosDeviceCatalog
   */
  @javax.annotation.Nullable
  public IosDeviceCatalog getIosDeviceCatalog() {
    return iosDeviceCatalog;
  }

  public void setIosDeviceCatalog(IosDeviceCatalog iosDeviceCatalog) {
    this.iosDeviceCatalog = iosDeviceCatalog;
  }


  public TestEnvironmentCatalog networkConfigurationCatalog(NetworkConfigurationCatalog networkConfigurationCatalog) {
    this.networkConfigurationCatalog = networkConfigurationCatalog;
    return this;
  }

  /**
   * Get networkConfigurationCatalog
   * @return networkConfigurationCatalog
   */
  @javax.annotation.Nullable
  public NetworkConfigurationCatalog getNetworkConfigurationCatalog() {
    return networkConfigurationCatalog;
  }

  public void setNetworkConfigurationCatalog(NetworkConfigurationCatalog networkConfigurationCatalog) {
    this.networkConfigurationCatalog = networkConfigurationCatalog;
  }


  public TestEnvironmentCatalog softwareCatalog(ProvidedSoftwareCatalog softwareCatalog) {
    this.softwareCatalog = softwareCatalog;
    return this;
  }

  /**
   * Get softwareCatalog
   * @return softwareCatalog
   */
  @javax.annotation.Nullable
  public ProvidedSoftwareCatalog getSoftwareCatalog() {
    return softwareCatalog;
  }

  public void setSoftwareCatalog(ProvidedSoftwareCatalog softwareCatalog) {
    this.softwareCatalog = softwareCatalog;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestEnvironmentCatalog testEnvironmentCatalog = (TestEnvironmentCatalog) o;
    return Objects.equals(this.androidDeviceCatalog, testEnvironmentCatalog.androidDeviceCatalog) &&
        Objects.equals(this.deviceIpBlockCatalog, testEnvironmentCatalog.deviceIpBlockCatalog) &&
        Objects.equals(this.iosDeviceCatalog, testEnvironmentCatalog.iosDeviceCatalog) &&
        Objects.equals(this.networkConfigurationCatalog, testEnvironmentCatalog.networkConfigurationCatalog) &&
        Objects.equals(this.softwareCatalog, testEnvironmentCatalog.softwareCatalog);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidDeviceCatalog, deviceIpBlockCatalog, iosDeviceCatalog, networkConfigurationCatalog, softwareCatalog);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestEnvironmentCatalog {\n");
    sb.append("    androidDeviceCatalog: ").append(toIndentedString(androidDeviceCatalog)).append("\n");
    sb.append("    deviceIpBlockCatalog: ").append(toIndentedString(deviceIpBlockCatalog)).append("\n");
    sb.append("    iosDeviceCatalog: ").append(toIndentedString(iosDeviceCatalog)).append("\n");
    sb.append("    networkConfigurationCatalog: ").append(toIndentedString(networkConfigurationCatalog)).append("\n");
    sb.append("    softwareCatalog: ").append(toIndentedString(softwareCatalog)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("androidDeviceCatalog");
    openapiFields.add("deviceIpBlockCatalog");
    openapiFields.add("iosDeviceCatalog");
    openapiFields.add("networkConfigurationCatalog");
    openapiFields.add("softwareCatalog");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestEnvironmentCatalog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestEnvironmentCatalog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestEnvironmentCatalog is not found in the empty JSON string", TestEnvironmentCatalog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestEnvironmentCatalog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestEnvironmentCatalog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `androidDeviceCatalog`
      if (jsonObj.get("androidDeviceCatalog") != null && !jsonObj.get("androidDeviceCatalog").isJsonNull()) {
        AndroidDeviceCatalog.validateJsonElement(jsonObj.get("androidDeviceCatalog"));
      }
      // validate the optional field `deviceIpBlockCatalog`
      if (jsonObj.get("deviceIpBlockCatalog") != null && !jsonObj.get("deviceIpBlockCatalog").isJsonNull()) {
        DeviceIpBlockCatalog.validateJsonElement(jsonObj.get("deviceIpBlockCatalog"));
      }
      // validate the optional field `iosDeviceCatalog`
      if (jsonObj.get("iosDeviceCatalog") != null && !jsonObj.get("iosDeviceCatalog").isJsonNull()) {
        IosDeviceCatalog.validateJsonElement(jsonObj.get("iosDeviceCatalog"));
      }
      // validate the optional field `networkConfigurationCatalog`
      if (jsonObj.get("networkConfigurationCatalog") != null && !jsonObj.get("networkConfigurationCatalog").isJsonNull()) {
        NetworkConfigurationCatalog.validateJsonElement(jsonObj.get("networkConfigurationCatalog"));
      }
      // validate the optional field `softwareCatalog`
      if (jsonObj.get("softwareCatalog") != null && !jsonObj.get("softwareCatalog").isJsonNull()) {
        ProvidedSoftwareCatalog.validateJsonElement(jsonObj.get("softwareCatalog"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestEnvironmentCatalog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestEnvironmentCatalog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestEnvironmentCatalog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestEnvironmentCatalog.class));

       return (TypeAdapter<T>) new TypeAdapter<TestEnvironmentCatalog>() {
           @Override
           public void write(JsonWriter out, TestEnvironmentCatalog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestEnvironmentCatalog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestEnvironmentCatalog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestEnvironmentCatalog
   * @throws IOException if the JSON string is invalid with respect to TestEnvironmentCatalog
   */
  public static TestEnvironmentCatalog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestEnvironmentCatalog.class);
  }

  /**
   * Convert an instance of TestEnvironmentCatalog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

