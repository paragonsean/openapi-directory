/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.Shard;
import org.openapitools.client.model.TestDetails;
import org.openapitools.client.model.TestSpecification;
import org.openapitools.client.model.ToolResultsStep;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single test executed in a single environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestExecution {
  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private Environment environment;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MATRIX_ID = "matrixId";
  @SerializedName(SERIALIZED_NAME_MATRIX_ID)
  private String matrixId;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_SHARD = "shard";
  @SerializedName(SERIALIZED_NAME_SHARD)
  private Shard shard;

  /**
   * Output only. Indicates the current progress of the test execution (e.g., FINISHED).
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    TEST_STATE_UNSPECIFIED("TEST_STATE_UNSPECIFIED"),
    
    VALIDATING("VALIDATING"),
    
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    FINISHED("FINISHED"),
    
    ERROR("ERROR"),
    
    UNSUPPORTED_ENVIRONMENT("UNSUPPORTED_ENVIRONMENT"),
    
    INCOMPATIBLE_ENVIRONMENT("INCOMPATIBLE_ENVIRONMENT"),
    
    INCOMPATIBLE_ARCHITECTURE("INCOMPATIBLE_ARCHITECTURE"),
    
    CANCELLED("CANCELLED"),
    
    INVALID("INVALID");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TEST_DETAILS = "testDetails";
  @SerializedName(SERIALIZED_NAME_TEST_DETAILS)
  private TestDetails testDetails;

  public static final String SERIALIZED_NAME_TEST_SPECIFICATION = "testSpecification";
  @SerializedName(SERIALIZED_NAME_TEST_SPECIFICATION)
  private TestSpecification testSpecification;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_TOOL_RESULTS_STEP = "toolResultsStep";
  @SerializedName(SERIALIZED_NAME_TOOL_RESULTS_STEP)
  private ToolResultsStep toolResultsStep;

  public TestExecution() {
  }

  public TestExecution environment(Environment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public Environment getEnvironment() {
    return environment;
  }

  public void setEnvironment(Environment environment) {
    this.environment = environment;
  }


  public TestExecution id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Output only. Unique id set by the service.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TestExecution matrixId(String matrixId) {
    this.matrixId = matrixId;
    return this;
  }

  /**
   * Output only. Id of the containing TestMatrix.
   * @return matrixId
   */
  @javax.annotation.Nullable
  public String getMatrixId() {
    return matrixId;
  }

  public void setMatrixId(String matrixId) {
    this.matrixId = matrixId;
  }


  public TestExecution projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Output only. The cloud project that owns the test execution.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public TestExecution shard(Shard shard) {
    this.shard = shard;
    return this;
  }

  /**
   * Get shard
   * @return shard
   */
  @javax.annotation.Nullable
  public Shard getShard() {
    return shard;
  }

  public void setShard(Shard shard) {
    this.shard = shard;
  }


  public TestExecution state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Indicates the current progress of the test execution (e.g., FINISHED).
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public TestExecution testDetails(TestDetails testDetails) {
    this.testDetails = testDetails;
    return this;
  }

  /**
   * Get testDetails
   * @return testDetails
   */
  @javax.annotation.Nullable
  public TestDetails getTestDetails() {
    return testDetails;
  }

  public void setTestDetails(TestDetails testDetails) {
    this.testDetails = testDetails;
  }


  public TestExecution testSpecification(TestSpecification testSpecification) {
    this.testSpecification = testSpecification;
    return this;
  }

  /**
   * Get testSpecification
   * @return testSpecification
   */
  @javax.annotation.Nullable
  public TestSpecification getTestSpecification() {
    return testSpecification;
  }

  public void setTestSpecification(TestSpecification testSpecification) {
    this.testSpecification = testSpecification;
  }


  public TestExecution timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Output only. The time this test execution was initially created.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public TestExecution toolResultsStep(ToolResultsStep toolResultsStep) {
    this.toolResultsStep = toolResultsStep;
    return this;
  }

  /**
   * Get toolResultsStep
   * @return toolResultsStep
   */
  @javax.annotation.Nullable
  public ToolResultsStep getToolResultsStep() {
    return toolResultsStep;
  }

  public void setToolResultsStep(ToolResultsStep toolResultsStep) {
    this.toolResultsStep = toolResultsStep;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestExecution testExecution = (TestExecution) o;
    return Objects.equals(this.environment, testExecution.environment) &&
        Objects.equals(this.id, testExecution.id) &&
        Objects.equals(this.matrixId, testExecution.matrixId) &&
        Objects.equals(this.projectId, testExecution.projectId) &&
        Objects.equals(this.shard, testExecution.shard) &&
        Objects.equals(this.state, testExecution.state) &&
        Objects.equals(this.testDetails, testExecution.testDetails) &&
        Objects.equals(this.testSpecification, testExecution.testSpecification) &&
        Objects.equals(this.timestamp, testExecution.timestamp) &&
        Objects.equals(this.toolResultsStep, testExecution.toolResultsStep);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environment, id, matrixId, projectId, shard, state, testDetails, testSpecification, timestamp, toolResultsStep);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestExecution {\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    matrixId: ").append(toIndentedString(matrixId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    shard: ").append(toIndentedString(shard)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    testDetails: ").append(toIndentedString(testDetails)).append("\n");
    sb.append("    testSpecification: ").append(toIndentedString(testSpecification)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    toolResultsStep: ").append(toIndentedString(toolResultsStep)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("environment");
    openapiFields.add("id");
    openapiFields.add("matrixId");
    openapiFields.add("projectId");
    openapiFields.add("shard");
    openapiFields.add("state");
    openapiFields.add("testDetails");
    openapiFields.add("testSpecification");
    openapiFields.add("timestamp");
    openapiFields.add("toolResultsStep");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestExecution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestExecution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestExecution is not found in the empty JSON string", TestExecution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestExecution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestExecution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        Environment.validateJsonElement(jsonObj.get("environment"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("matrixId") != null && !jsonObj.get("matrixId").isJsonNull()) && !jsonObj.get("matrixId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matrixId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matrixId").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      // validate the optional field `shard`
      if (jsonObj.get("shard") != null && !jsonObj.get("shard").isJsonNull()) {
        Shard.validateJsonElement(jsonObj.get("shard"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `testDetails`
      if (jsonObj.get("testDetails") != null && !jsonObj.get("testDetails").isJsonNull()) {
        TestDetails.validateJsonElement(jsonObj.get("testDetails"));
      }
      // validate the optional field `testSpecification`
      if (jsonObj.get("testSpecification") != null && !jsonObj.get("testSpecification").isJsonNull()) {
        TestSpecification.validateJsonElement(jsonObj.get("testSpecification"));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      // validate the optional field `toolResultsStep`
      if (jsonObj.get("toolResultsStep") != null && !jsonObj.get("toolResultsStep").isJsonNull()) {
        ToolResultsStep.validateJsonElement(jsonObj.get("toolResultsStep"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestExecution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestExecution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestExecution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestExecution.class));

       return (TypeAdapter<T>) new TypeAdapter<TestExecution>() {
           @Override
           public void write(JsonWriter out, TestExecution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestExecution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestExecution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestExecution
   * @throws IOException if the JSON string is invalid with respect to TestExecution
   */
  public static TestExecution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestExecution.class);
  }

  /**
   * Convert an instance of TestExecution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

