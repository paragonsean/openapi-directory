/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.openapitools.client.model.Distribution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A version of the Android OS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AndroidVersion {
  public static final String SERIALIZED_NAME_API_LEVEL = "apiLevel";
  @SerializedName(SERIALIZED_NAME_API_LEVEL)
  private Integer apiLevel;

  public static final String SERIALIZED_NAME_CODE_NAME = "codeName";
  @SerializedName(SERIALIZED_NAME_CODE_NAME)
  private String codeName;

  public static final String SERIALIZED_NAME_DISTRIBUTION = "distribution";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION)
  private Distribution distribution;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private Date releaseDate;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION_STRING = "versionString";
  @SerializedName(SERIALIZED_NAME_VERSION_STRING)
  private String versionString;

  public AndroidVersion() {
  }

  public AndroidVersion apiLevel(Integer apiLevel) {
    this.apiLevel = apiLevel;
    return this;
  }

  /**
   * The API level for this Android version. Examples: 18, 19.
   * @return apiLevel
   */
  @javax.annotation.Nullable
  public Integer getApiLevel() {
    return apiLevel;
  }

  public void setApiLevel(Integer apiLevel) {
    this.apiLevel = apiLevel;
  }


  public AndroidVersion codeName(String codeName) {
    this.codeName = codeName;
    return this;
  }

  /**
   * The code name for this Android version. Examples: \&quot;JellyBean\&quot;, \&quot;KitKat\&quot;.
   * @return codeName
   */
  @javax.annotation.Nullable
  public String getCodeName() {
    return codeName;
  }

  public void setCodeName(String codeName) {
    this.codeName = codeName;
  }


  public AndroidVersion distribution(Distribution distribution) {
    this.distribution = distribution;
    return this;
  }

  /**
   * Get distribution
   * @return distribution
   */
  @javax.annotation.Nullable
  public Distribution getDistribution() {
    return distribution;
  }

  public void setDistribution(Distribution distribution) {
    this.distribution = distribution;
  }


  public AndroidVersion id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An opaque id for this Android version. Use this id to invoke the TestExecutionService.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AndroidVersion releaseDate(Date releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Get releaseDate
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public Date getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(Date releaseDate) {
    this.releaseDate = releaseDate;
  }


  public AndroidVersion tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public AndroidVersion addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags for this dimension. Examples: \&quot;default\&quot;, \&quot;preview\&quot;, \&quot;deprecated\&quot;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public AndroidVersion versionString(String versionString) {
    this.versionString = versionString;
    return this;
  }

  /**
   * A string representing this version of the Android OS. Examples: \&quot;4.3\&quot;, \&quot;4.4\&quot;.
   * @return versionString
   */
  @javax.annotation.Nullable
  public String getVersionString() {
    return versionString;
  }

  public void setVersionString(String versionString) {
    this.versionString = versionString;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AndroidVersion androidVersion = (AndroidVersion) o;
    return Objects.equals(this.apiLevel, androidVersion.apiLevel) &&
        Objects.equals(this.codeName, androidVersion.codeName) &&
        Objects.equals(this.distribution, androidVersion.distribution) &&
        Objects.equals(this.id, androidVersion.id) &&
        Objects.equals(this.releaseDate, androidVersion.releaseDate) &&
        Objects.equals(this.tags, androidVersion.tags) &&
        Objects.equals(this.versionString, androidVersion.versionString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiLevel, codeName, distribution, id, releaseDate, tags, versionString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AndroidVersion {\n");
    sb.append("    apiLevel: ").append(toIndentedString(apiLevel)).append("\n");
    sb.append("    codeName: ").append(toIndentedString(codeName)).append("\n");
    sb.append("    distribution: ").append(toIndentedString(distribution)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    versionString: ").append(toIndentedString(versionString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiLevel");
    openapiFields.add("codeName");
    openapiFields.add("distribution");
    openapiFields.add("id");
    openapiFields.add("releaseDate");
    openapiFields.add("tags");
    openapiFields.add("versionString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AndroidVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AndroidVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AndroidVersion is not found in the empty JSON string", AndroidVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AndroidVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AndroidVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("codeName") != null && !jsonObj.get("codeName").isJsonNull()) && !jsonObj.get("codeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeName").toString()));
      }
      // validate the optional field `distribution`
      if (jsonObj.get("distribution") != null && !jsonObj.get("distribution").isJsonNull()) {
        Distribution.validateJsonElement(jsonObj.get("distribution"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `releaseDate`
      if (jsonObj.get("releaseDate") != null && !jsonObj.get("releaseDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("releaseDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("versionString") != null && !jsonObj.get("versionString").isJsonNull()) && !jsonObj.get("versionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AndroidVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AndroidVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AndroidVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AndroidVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<AndroidVersion>() {
           @Override
           public void write(JsonWriter out, AndroidVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AndroidVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AndroidVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AndroidVersion
   * @throws IOException if the JSON string is invalid with respect to AndroidVersion
   */
  public static AndroidVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AndroidVersion.class);
  }

  /**
   * Convert an instance of AndroidVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

