/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Network emulation parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrafficRule {
  public static final String SERIALIZED_NAME_BANDWIDTH = "bandwidth";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH)
  private Float bandwidth;

  public static final String SERIALIZED_NAME_BURST = "burst";
  @SerializedName(SERIALIZED_NAME_BURST)
  private Float burst;

  public static final String SERIALIZED_NAME_DELAY = "delay";
  @SerializedName(SERIALIZED_NAME_DELAY)
  private String delay;

  public static final String SERIALIZED_NAME_PACKET_DUPLICATION_RATIO = "packetDuplicationRatio";
  @SerializedName(SERIALIZED_NAME_PACKET_DUPLICATION_RATIO)
  private Float packetDuplicationRatio;

  public static final String SERIALIZED_NAME_PACKET_LOSS_RATIO = "packetLossRatio";
  @SerializedName(SERIALIZED_NAME_PACKET_LOSS_RATIO)
  private Float packetLossRatio;

  public TrafficRule() {
  }

  public TrafficRule bandwidth(Float bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

  /**
   * Bandwidth in kbits/second.
   * @return bandwidth
   */
  @javax.annotation.Nullable
  public Float getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(Float bandwidth) {
    this.bandwidth = bandwidth;
  }


  public TrafficRule burst(Float burst) {
    this.burst = burst;
    return this;
  }

  /**
   * Burst size in kbits.
   * @return burst
   */
  @javax.annotation.Nullable
  public Float getBurst() {
    return burst;
  }

  public void setBurst(Float burst) {
    this.burst = burst;
  }


  public TrafficRule delay(String delay) {
    this.delay = delay;
    return this;
  }

  /**
   * Packet delay, must be &gt;&#x3D; 0.
   * @return delay
   */
  @javax.annotation.Nullable
  public String getDelay() {
    return delay;
  }

  public void setDelay(String delay) {
    this.delay = delay;
  }


  public TrafficRule packetDuplicationRatio(Float packetDuplicationRatio) {
    this.packetDuplicationRatio = packetDuplicationRatio;
    return this;
  }

  /**
   * Packet duplication ratio (0.0 - 1.0).
   * @return packetDuplicationRatio
   */
  @javax.annotation.Nullable
  public Float getPacketDuplicationRatio() {
    return packetDuplicationRatio;
  }

  public void setPacketDuplicationRatio(Float packetDuplicationRatio) {
    this.packetDuplicationRatio = packetDuplicationRatio;
  }


  public TrafficRule packetLossRatio(Float packetLossRatio) {
    this.packetLossRatio = packetLossRatio;
    return this;
  }

  /**
   * Packet loss ratio (0.0 - 1.0).
   * @return packetLossRatio
   */
  @javax.annotation.Nullable
  public Float getPacketLossRatio() {
    return packetLossRatio;
  }

  public void setPacketLossRatio(Float packetLossRatio) {
    this.packetLossRatio = packetLossRatio;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrafficRule trafficRule = (TrafficRule) o;
    return Objects.equals(this.bandwidth, trafficRule.bandwidth) &&
        Objects.equals(this.burst, trafficRule.burst) &&
        Objects.equals(this.delay, trafficRule.delay) &&
        Objects.equals(this.packetDuplicationRatio, trafficRule.packetDuplicationRatio) &&
        Objects.equals(this.packetLossRatio, trafficRule.packetLossRatio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidth, burst, delay, packetDuplicationRatio, packetLossRatio);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrafficRule {\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    burst: ").append(toIndentedString(burst)).append("\n");
    sb.append("    delay: ").append(toIndentedString(delay)).append("\n");
    sb.append("    packetDuplicationRatio: ").append(toIndentedString(packetDuplicationRatio)).append("\n");
    sb.append("    packetLossRatio: ").append(toIndentedString(packetLossRatio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandwidth");
    openapiFields.add("burst");
    openapiFields.add("delay");
    openapiFields.add("packetDuplicationRatio");
    openapiFields.add("packetLossRatio");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrafficRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrafficRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrafficRule is not found in the empty JSON string", TrafficRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrafficRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrafficRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delay") != null && !jsonObj.get("delay").isJsonNull()) && !jsonObj.get("delay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delay").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrafficRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrafficRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrafficRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrafficRule.class));

       return (TypeAdapter<T>) new TypeAdapter<TrafficRule>() {
           @Override
           public void write(JsonWriter out, TrafficRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrafficRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrafficRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrafficRule
   * @throws IOException if the JSON string is invalid with respect to TrafficRule
   */
  public static TrafficRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrafficRule.class);
  }

  /**
   * Convert an instance of TrafficRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

