/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AndroidInstrumentationTest;
import org.openapitools.client.model.AndroidRoboTest;
import org.openapitools.client.model.AndroidTestLoop;
import org.openapitools.client.model.IosRoboTest;
import org.openapitools.client.model.IosTestLoop;
import org.openapitools.client.model.IosTestSetup;
import org.openapitools.client.model.IosXcTest;
import org.openapitools.client.model.TestSetup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of how to run the test.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestSpecification {
  public static final String SERIALIZED_NAME_ANDROID_INSTRUMENTATION_TEST = "androidInstrumentationTest";
  @SerializedName(SERIALIZED_NAME_ANDROID_INSTRUMENTATION_TEST)
  private AndroidInstrumentationTest androidInstrumentationTest;

  public static final String SERIALIZED_NAME_ANDROID_ROBO_TEST = "androidRoboTest";
  @SerializedName(SERIALIZED_NAME_ANDROID_ROBO_TEST)
  private AndroidRoboTest androidRoboTest;

  public static final String SERIALIZED_NAME_ANDROID_TEST_LOOP = "androidTestLoop";
  @SerializedName(SERIALIZED_NAME_ANDROID_TEST_LOOP)
  private AndroidTestLoop androidTestLoop;

  public static final String SERIALIZED_NAME_DISABLE_PERFORMANCE_METRICS = "disablePerformanceMetrics";
  @SerializedName(SERIALIZED_NAME_DISABLE_PERFORMANCE_METRICS)
  private Boolean disablePerformanceMetrics;

  public static final String SERIALIZED_NAME_DISABLE_VIDEO_RECORDING = "disableVideoRecording";
  @SerializedName(SERIALIZED_NAME_DISABLE_VIDEO_RECORDING)
  private Boolean disableVideoRecording;

  public static final String SERIALIZED_NAME_IOS_ROBO_TEST = "iosRoboTest";
  @SerializedName(SERIALIZED_NAME_IOS_ROBO_TEST)
  private IosRoboTest iosRoboTest;

  public static final String SERIALIZED_NAME_IOS_TEST_LOOP = "iosTestLoop";
  @SerializedName(SERIALIZED_NAME_IOS_TEST_LOOP)
  private IosTestLoop iosTestLoop;

  public static final String SERIALIZED_NAME_IOS_TEST_SETUP = "iosTestSetup";
  @SerializedName(SERIALIZED_NAME_IOS_TEST_SETUP)
  private IosTestSetup iosTestSetup;

  public static final String SERIALIZED_NAME_IOS_XC_TEST = "iosXcTest";
  @SerializedName(SERIALIZED_NAME_IOS_XC_TEST)
  private IosXcTest iosXcTest;

  public static final String SERIALIZED_NAME_TEST_SETUP = "testSetup";
  @SerializedName(SERIALIZED_NAME_TEST_SETUP)
  private TestSetup testSetup;

  public static final String SERIALIZED_NAME_TEST_TIMEOUT = "testTimeout";
  @SerializedName(SERIALIZED_NAME_TEST_TIMEOUT)
  private String testTimeout;

  public TestSpecification() {
  }

  public TestSpecification androidInstrumentationTest(AndroidInstrumentationTest androidInstrumentationTest) {
    this.androidInstrumentationTest = androidInstrumentationTest;
    return this;
  }

  /**
   * Get androidInstrumentationTest
   * @return androidInstrumentationTest
   */
  @javax.annotation.Nullable
  public AndroidInstrumentationTest getAndroidInstrumentationTest() {
    return androidInstrumentationTest;
  }

  public void setAndroidInstrumentationTest(AndroidInstrumentationTest androidInstrumentationTest) {
    this.androidInstrumentationTest = androidInstrumentationTest;
  }


  public TestSpecification androidRoboTest(AndroidRoboTest androidRoboTest) {
    this.androidRoboTest = androidRoboTest;
    return this;
  }

  /**
   * Get androidRoboTest
   * @return androidRoboTest
   */
  @javax.annotation.Nullable
  public AndroidRoboTest getAndroidRoboTest() {
    return androidRoboTest;
  }

  public void setAndroidRoboTest(AndroidRoboTest androidRoboTest) {
    this.androidRoboTest = androidRoboTest;
  }


  public TestSpecification androidTestLoop(AndroidTestLoop androidTestLoop) {
    this.androidTestLoop = androidTestLoop;
    return this;
  }

  /**
   * Get androidTestLoop
   * @return androidTestLoop
   */
  @javax.annotation.Nullable
  public AndroidTestLoop getAndroidTestLoop() {
    return androidTestLoop;
  }

  public void setAndroidTestLoop(AndroidTestLoop androidTestLoop) {
    this.androidTestLoop = androidTestLoop;
  }


  public TestSpecification disablePerformanceMetrics(Boolean disablePerformanceMetrics) {
    this.disablePerformanceMetrics = disablePerformanceMetrics;
    return this;
  }

  /**
   * Disables performance metrics recording. May reduce test latency.
   * @return disablePerformanceMetrics
   */
  @javax.annotation.Nullable
  public Boolean getDisablePerformanceMetrics() {
    return disablePerformanceMetrics;
  }

  public void setDisablePerformanceMetrics(Boolean disablePerformanceMetrics) {
    this.disablePerformanceMetrics = disablePerformanceMetrics;
  }


  public TestSpecification disableVideoRecording(Boolean disableVideoRecording) {
    this.disableVideoRecording = disableVideoRecording;
    return this;
  }

  /**
   * Disables video recording. May reduce test latency.
   * @return disableVideoRecording
   */
  @javax.annotation.Nullable
  public Boolean getDisableVideoRecording() {
    return disableVideoRecording;
  }

  public void setDisableVideoRecording(Boolean disableVideoRecording) {
    this.disableVideoRecording = disableVideoRecording;
  }


  public TestSpecification iosRoboTest(IosRoboTest iosRoboTest) {
    this.iosRoboTest = iosRoboTest;
    return this;
  }

  /**
   * Get iosRoboTest
   * @return iosRoboTest
   */
  @javax.annotation.Nullable
  public IosRoboTest getIosRoboTest() {
    return iosRoboTest;
  }

  public void setIosRoboTest(IosRoboTest iosRoboTest) {
    this.iosRoboTest = iosRoboTest;
  }


  public TestSpecification iosTestLoop(IosTestLoop iosTestLoop) {
    this.iosTestLoop = iosTestLoop;
    return this;
  }

  /**
   * Get iosTestLoop
   * @return iosTestLoop
   */
  @javax.annotation.Nullable
  public IosTestLoop getIosTestLoop() {
    return iosTestLoop;
  }

  public void setIosTestLoop(IosTestLoop iosTestLoop) {
    this.iosTestLoop = iosTestLoop;
  }


  public TestSpecification iosTestSetup(IosTestSetup iosTestSetup) {
    this.iosTestSetup = iosTestSetup;
    return this;
  }

  /**
   * Get iosTestSetup
   * @return iosTestSetup
   */
  @javax.annotation.Nullable
  public IosTestSetup getIosTestSetup() {
    return iosTestSetup;
  }

  public void setIosTestSetup(IosTestSetup iosTestSetup) {
    this.iosTestSetup = iosTestSetup;
  }


  public TestSpecification iosXcTest(IosXcTest iosXcTest) {
    this.iosXcTest = iosXcTest;
    return this;
  }

  /**
   * Get iosXcTest
   * @return iosXcTest
   */
  @javax.annotation.Nullable
  public IosXcTest getIosXcTest() {
    return iosXcTest;
  }

  public void setIosXcTest(IosXcTest iosXcTest) {
    this.iosXcTest = iosXcTest;
  }


  public TestSpecification testSetup(TestSetup testSetup) {
    this.testSetup = testSetup;
    return this;
  }

  /**
   * Get testSetup
   * @return testSetup
   */
  @javax.annotation.Nullable
  public TestSetup getTestSetup() {
    return testSetup;
  }

  public void setTestSetup(TestSetup testSetup) {
    this.testSetup = testSetup;
  }


  public TestSpecification testTimeout(String testTimeout) {
    this.testTimeout = testTimeout;
    return this;
  }

  /**
   * Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
   * @return testTimeout
   */
  @javax.annotation.Nullable
  public String getTestTimeout() {
    return testTimeout;
  }

  public void setTestTimeout(String testTimeout) {
    this.testTimeout = testTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestSpecification testSpecification = (TestSpecification) o;
    return Objects.equals(this.androidInstrumentationTest, testSpecification.androidInstrumentationTest) &&
        Objects.equals(this.androidRoboTest, testSpecification.androidRoboTest) &&
        Objects.equals(this.androidTestLoop, testSpecification.androidTestLoop) &&
        Objects.equals(this.disablePerformanceMetrics, testSpecification.disablePerformanceMetrics) &&
        Objects.equals(this.disableVideoRecording, testSpecification.disableVideoRecording) &&
        Objects.equals(this.iosRoboTest, testSpecification.iosRoboTest) &&
        Objects.equals(this.iosTestLoop, testSpecification.iosTestLoop) &&
        Objects.equals(this.iosTestSetup, testSpecification.iosTestSetup) &&
        Objects.equals(this.iosXcTest, testSpecification.iosXcTest) &&
        Objects.equals(this.testSetup, testSpecification.testSetup) &&
        Objects.equals(this.testTimeout, testSpecification.testTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidInstrumentationTest, androidRoboTest, androidTestLoop, disablePerformanceMetrics, disableVideoRecording, iosRoboTest, iosTestLoop, iosTestSetup, iosXcTest, testSetup, testTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestSpecification {\n");
    sb.append("    androidInstrumentationTest: ").append(toIndentedString(androidInstrumentationTest)).append("\n");
    sb.append("    androidRoboTest: ").append(toIndentedString(androidRoboTest)).append("\n");
    sb.append("    androidTestLoop: ").append(toIndentedString(androidTestLoop)).append("\n");
    sb.append("    disablePerformanceMetrics: ").append(toIndentedString(disablePerformanceMetrics)).append("\n");
    sb.append("    disableVideoRecording: ").append(toIndentedString(disableVideoRecording)).append("\n");
    sb.append("    iosRoboTest: ").append(toIndentedString(iosRoboTest)).append("\n");
    sb.append("    iosTestLoop: ").append(toIndentedString(iosTestLoop)).append("\n");
    sb.append("    iosTestSetup: ").append(toIndentedString(iosTestSetup)).append("\n");
    sb.append("    iosXcTest: ").append(toIndentedString(iosXcTest)).append("\n");
    sb.append("    testSetup: ").append(toIndentedString(testSetup)).append("\n");
    sb.append("    testTimeout: ").append(toIndentedString(testTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("androidInstrumentationTest");
    openapiFields.add("androidRoboTest");
    openapiFields.add("androidTestLoop");
    openapiFields.add("disablePerformanceMetrics");
    openapiFields.add("disableVideoRecording");
    openapiFields.add("iosRoboTest");
    openapiFields.add("iosTestLoop");
    openapiFields.add("iosTestSetup");
    openapiFields.add("iosXcTest");
    openapiFields.add("testSetup");
    openapiFields.add("testTimeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestSpecification is not found in the empty JSON string", TestSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `androidInstrumentationTest`
      if (jsonObj.get("androidInstrumentationTest") != null && !jsonObj.get("androidInstrumentationTest").isJsonNull()) {
        AndroidInstrumentationTest.validateJsonElement(jsonObj.get("androidInstrumentationTest"));
      }
      // validate the optional field `androidRoboTest`
      if (jsonObj.get("androidRoboTest") != null && !jsonObj.get("androidRoboTest").isJsonNull()) {
        AndroidRoboTest.validateJsonElement(jsonObj.get("androidRoboTest"));
      }
      // validate the optional field `androidTestLoop`
      if (jsonObj.get("androidTestLoop") != null && !jsonObj.get("androidTestLoop").isJsonNull()) {
        AndroidTestLoop.validateJsonElement(jsonObj.get("androidTestLoop"));
      }
      // validate the optional field `iosRoboTest`
      if (jsonObj.get("iosRoboTest") != null && !jsonObj.get("iosRoboTest").isJsonNull()) {
        IosRoboTest.validateJsonElement(jsonObj.get("iosRoboTest"));
      }
      // validate the optional field `iosTestLoop`
      if (jsonObj.get("iosTestLoop") != null && !jsonObj.get("iosTestLoop").isJsonNull()) {
        IosTestLoop.validateJsonElement(jsonObj.get("iosTestLoop"));
      }
      // validate the optional field `iosTestSetup`
      if (jsonObj.get("iosTestSetup") != null && !jsonObj.get("iosTestSetup").isJsonNull()) {
        IosTestSetup.validateJsonElement(jsonObj.get("iosTestSetup"));
      }
      // validate the optional field `iosXcTest`
      if (jsonObj.get("iosXcTest") != null && !jsonObj.get("iosXcTest").isJsonNull()) {
        IosXcTest.validateJsonElement(jsonObj.get("iosXcTest"));
      }
      // validate the optional field `testSetup`
      if (jsonObj.get("testSetup") != null && !jsonObj.get("testSetup").isJsonNull()) {
        TestSetup.validateJsonElement(jsonObj.get("testSetup"));
      }
      if ((jsonObj.get("testTimeout") != null && !jsonObj.get("testTimeout").isJsonNull()) && !jsonObj.get("testTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testTimeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<TestSpecification>() {
           @Override
           public void write(JsonWriter out, TestSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestSpecification
   * @throws IOException if the JSON string is invalid with respect to TestSpecification
   */
  public static TestSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestSpecification.class);
  }

  /**
   * Convert an instance of TestSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

