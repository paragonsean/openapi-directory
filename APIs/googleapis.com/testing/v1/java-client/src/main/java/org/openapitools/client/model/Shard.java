/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TestTargetsForShard;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output only. Details about the shard.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Shard {
  public static final String SERIALIZED_NAME_ESTIMATED_SHARD_DURATION = "estimatedShardDuration";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_SHARD_DURATION)
  private String estimatedShardDuration;

  public static final String SERIALIZED_NAME_NUM_SHARDS = "numShards";
  @SerializedName(SERIALIZED_NAME_NUM_SHARDS)
  private Integer numShards;

  public static final String SERIALIZED_NAME_SHARD_INDEX = "shardIndex";
  @SerializedName(SERIALIZED_NAME_SHARD_INDEX)
  private Integer shardIndex;

  public static final String SERIALIZED_NAME_TEST_TARGETS_FOR_SHARD = "testTargetsForShard";
  @SerializedName(SERIALIZED_NAME_TEST_TARGETS_FOR_SHARD)
  private TestTargetsForShard testTargetsForShard;

  public Shard() {
  }

  public Shard(
     String estimatedShardDuration, 
     Integer numShards, 
     Integer shardIndex
  ) {
    this();
    this.estimatedShardDuration = estimatedShardDuration;
    this.numShards = numShards;
    this.shardIndex = shardIndex;
  }

  /**
   * Output only. The estimated shard duration based on previous test case timing records, if available.
   * @return estimatedShardDuration
   */
  @javax.annotation.Nullable
  public String getEstimatedShardDuration() {
    return estimatedShardDuration;
  }



  /**
   * Output only. The total number of shards.
   * @return numShards
   */
  @javax.annotation.Nullable
  public Integer getNumShards() {
    return numShards;
  }



  /**
   * Output only. The index of the shard among all the shards.
   * @return shardIndex
   */
  @javax.annotation.Nullable
  public Integer getShardIndex() {
    return shardIndex;
  }



  public Shard testTargetsForShard(TestTargetsForShard testTargetsForShard) {
    this.testTargetsForShard = testTargetsForShard;
    return this;
  }

  /**
   * Get testTargetsForShard
   * @return testTargetsForShard
   */
  @javax.annotation.Nullable
  public TestTargetsForShard getTestTargetsForShard() {
    return testTargetsForShard;
  }

  public void setTestTargetsForShard(TestTargetsForShard testTargetsForShard) {
    this.testTargetsForShard = testTargetsForShard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Shard shard = (Shard) o;
    return Objects.equals(this.estimatedShardDuration, shard.estimatedShardDuration) &&
        Objects.equals(this.numShards, shard.numShards) &&
        Objects.equals(this.shardIndex, shard.shardIndex) &&
        Objects.equals(this.testTargetsForShard, shard.testTargetsForShard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(estimatedShardDuration, numShards, shardIndex, testTargetsForShard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Shard {\n");
    sb.append("    estimatedShardDuration: ").append(toIndentedString(estimatedShardDuration)).append("\n");
    sb.append("    numShards: ").append(toIndentedString(numShards)).append("\n");
    sb.append("    shardIndex: ").append(toIndentedString(shardIndex)).append("\n");
    sb.append("    testTargetsForShard: ").append(toIndentedString(testTargetsForShard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("estimatedShardDuration");
    openapiFields.add("numShards");
    openapiFields.add("shardIndex");
    openapiFields.add("testTargetsForShard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Shard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Shard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Shard is not found in the empty JSON string", Shard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Shard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Shard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("estimatedShardDuration") != null && !jsonObj.get("estimatedShardDuration").isJsonNull()) && !jsonObj.get("estimatedShardDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimatedShardDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimatedShardDuration").toString()));
      }
      // validate the optional field `testTargetsForShard`
      if (jsonObj.get("testTargetsForShard") != null && !jsonObj.get("testTargetsForShard").isJsonNull()) {
        TestTargetsForShard.validateJsonElement(jsonObj.get("testTargetsForShard"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Shard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Shard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Shard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Shard.class));

       return (TypeAdapter<T>) new TypeAdapter<Shard>() {
           @Override
           public void write(JsonWriter out, Shard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Shard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Shard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Shard
   * @throws IOException if the JSON string is invalid with respect to Shard
   */
  public static Shard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Shard.class);
  }

  /**
   * Convert an instance of Shard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

