/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Denotes whether Direct Access is supported, and by which client versions. DirectAccessService is currently available as a preview to select developers. You can register today on behalf of you and your team at https://developer.android.com/studio/preview/android-device-streaming
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectAccessVersionInfo {
  public static final String SERIALIZED_NAME_DIRECT_ACCESS_SUPPORTED = "directAccessSupported";
  @SerializedName(SERIALIZED_NAME_DIRECT_ACCESS_SUPPORTED)
  private Boolean directAccessSupported;

  public static final String SERIALIZED_NAME_MINIMUM_ANDROID_STUDIO_VERSION = "minimumAndroidStudioVersion";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ANDROID_STUDIO_VERSION)
  private String minimumAndroidStudioVersion;

  public DirectAccessVersionInfo() {
  }

  public DirectAccessVersionInfo directAccessSupported(Boolean directAccessSupported) {
    this.directAccessSupported = directAccessSupported;
    return this;
  }

  /**
   * Whether direct access is supported at all. Clients are expected to filter down the device list to only android models and versions which support Direct Access when that is the user intent.
   * @return directAccessSupported
   */
  @javax.annotation.Nullable
  public Boolean getDirectAccessSupported() {
    return directAccessSupported;
  }

  public void setDirectAccessSupported(Boolean directAccessSupported) {
    this.directAccessSupported = directAccessSupported;
  }


  public DirectAccessVersionInfo minimumAndroidStudioVersion(String minimumAndroidStudioVersion) {
    this.minimumAndroidStudioVersion = minimumAndroidStudioVersion;
    return this;
  }

  /**
   * Output only. Indicates client-device compatibility, where a device is known to work only with certain workarounds implemented in the Android Studio client. Expected format \&quot;major.minor.micro.patch\&quot;, e.g. \&quot;5921.22.2211.8881706\&quot;.
   * @return minimumAndroidStudioVersion
   */
  @javax.annotation.Nullable
  public String getMinimumAndroidStudioVersion() {
    return minimumAndroidStudioVersion;
  }

  public void setMinimumAndroidStudioVersion(String minimumAndroidStudioVersion) {
    this.minimumAndroidStudioVersion = minimumAndroidStudioVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectAccessVersionInfo directAccessVersionInfo = (DirectAccessVersionInfo) o;
    return Objects.equals(this.directAccessSupported, directAccessVersionInfo.directAccessSupported) &&
        Objects.equals(this.minimumAndroidStudioVersion, directAccessVersionInfo.minimumAndroidStudioVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directAccessSupported, minimumAndroidStudioVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectAccessVersionInfo {\n");
    sb.append("    directAccessSupported: ").append(toIndentedString(directAccessSupported)).append("\n");
    sb.append("    minimumAndroidStudioVersion: ").append(toIndentedString(minimumAndroidStudioVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("directAccessSupported");
    openapiFields.add("minimumAndroidStudioVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectAccessVersionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectAccessVersionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectAccessVersionInfo is not found in the empty JSON string", DirectAccessVersionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectAccessVersionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectAccessVersionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("minimumAndroidStudioVersion") != null && !jsonObj.get("minimumAndroidStudioVersion").isJsonNull()) && !jsonObj.get("minimumAndroidStudioVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumAndroidStudioVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumAndroidStudioVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectAccessVersionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectAccessVersionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectAccessVersionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectAccessVersionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectAccessVersionInfo>() {
           @Override
           public void write(JsonWriter out, DirectAccessVersionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectAccessVersionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectAccessVersionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectAccessVersionInfo
   * @throws IOException if the JSON string is invalid with respect to DirectAccessVersionInfo
   */
  public static DirectAccessVersionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectAccessVersionInfo.class);
  }

  /**
   * Convert an instance of DirectAccessVersionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

