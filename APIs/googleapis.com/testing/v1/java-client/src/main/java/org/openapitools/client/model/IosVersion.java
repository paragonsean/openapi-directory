/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An iOS version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IosVersion {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MAJOR_VERSION = "majorVersion";
  @SerializedName(SERIALIZED_NAME_MAJOR_VERSION)
  private Integer majorVersion;

  public static final String SERIALIZED_NAME_MINOR_VERSION = "minorVersion";
  @SerializedName(SERIALIZED_NAME_MINOR_VERSION)
  private Integer minorVersion;

  public static final String SERIALIZED_NAME_SUPPORTED_XCODE_VERSION_IDS = "supportedXcodeVersionIds";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_XCODE_VERSION_IDS)
  private List<String> supportedXcodeVersionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public IosVersion() {
  }

  public IosVersion id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An opaque id for this iOS version. Use this id to invoke the TestExecutionService.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public IosVersion majorVersion(Integer majorVersion) {
    this.majorVersion = majorVersion;
    return this;
  }

  /**
   * An integer representing the major iOS version. Examples: \&quot;8\&quot;, \&quot;9\&quot;.
   * @return majorVersion
   */
  @javax.annotation.Nullable
  public Integer getMajorVersion() {
    return majorVersion;
  }

  public void setMajorVersion(Integer majorVersion) {
    this.majorVersion = majorVersion;
  }


  public IosVersion minorVersion(Integer minorVersion) {
    this.minorVersion = minorVersion;
    return this;
  }

  /**
   * An integer representing the minor iOS version. Examples: \&quot;1\&quot;, \&quot;2\&quot;.
   * @return minorVersion
   */
  @javax.annotation.Nullable
  public Integer getMinorVersion() {
    return minorVersion;
  }

  public void setMinorVersion(Integer minorVersion) {
    this.minorVersion = minorVersion;
  }


  public IosVersion supportedXcodeVersionIds(List<String> supportedXcodeVersionIds) {
    this.supportedXcodeVersionIds = supportedXcodeVersionIds;
    return this;
  }

  public IosVersion addSupportedXcodeVersionIdsItem(String supportedXcodeVersionIdsItem) {
    if (this.supportedXcodeVersionIds == null) {
      this.supportedXcodeVersionIds = new ArrayList<>();
    }
    this.supportedXcodeVersionIds.add(supportedXcodeVersionIdsItem);
    return this;
  }

  /**
   * The available Xcode versions for this version.
   * @return supportedXcodeVersionIds
   */
  @javax.annotation.Nullable
  public List<String> getSupportedXcodeVersionIds() {
    return supportedXcodeVersionIds;
  }

  public void setSupportedXcodeVersionIds(List<String> supportedXcodeVersionIds) {
    this.supportedXcodeVersionIds = supportedXcodeVersionIds;
  }


  public IosVersion tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public IosVersion addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags for this dimension. Examples: \&quot;default\&quot;, \&quot;preview\&quot;, \&quot;deprecated\&quot;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IosVersion iosVersion = (IosVersion) o;
    return Objects.equals(this.id, iosVersion.id) &&
        Objects.equals(this.majorVersion, iosVersion.majorVersion) &&
        Objects.equals(this.minorVersion, iosVersion.minorVersion) &&
        Objects.equals(this.supportedXcodeVersionIds, iosVersion.supportedXcodeVersionIds) &&
        Objects.equals(this.tags, iosVersion.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, majorVersion, minorVersion, supportedXcodeVersionIds, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IosVersion {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    majorVersion: ").append(toIndentedString(majorVersion)).append("\n");
    sb.append("    minorVersion: ").append(toIndentedString(minorVersion)).append("\n");
    sb.append("    supportedXcodeVersionIds: ").append(toIndentedString(supportedXcodeVersionIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("majorVersion");
    openapiFields.add("minorVersion");
    openapiFields.add("supportedXcodeVersionIds");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IosVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IosVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IosVersion is not found in the empty JSON string", IosVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IosVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IosVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedXcodeVersionIds") != null && !jsonObj.get("supportedXcodeVersionIds").isJsonNull() && !jsonObj.get("supportedXcodeVersionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedXcodeVersionIds` to be an array in the JSON string but got `%s`", jsonObj.get("supportedXcodeVersionIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IosVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IosVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IosVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IosVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<IosVersion>() {
           @Override
           public void write(JsonWriter out, IosVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IosVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IosVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IosVersion
   * @throws IOException if the JSON string is invalid with respect to IosVersion
   */
  public static IosVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IosVersion.class);
  }

  /**
   * Convert an instance of IosVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

