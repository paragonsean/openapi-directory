/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppBundle;
import org.openapitools.client.model.FileReference;
import org.openapitools.client.model.RoboDirective;
import org.openapitools.client.model.RoboStartingIntent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AndroidRoboTest {
  public static final String SERIALIZED_NAME_APP_APK = "appApk";
  @SerializedName(SERIALIZED_NAME_APP_APK)
  private FileReference appApk;

  public static final String SERIALIZED_NAME_APP_BUNDLE = "appBundle";
  @SerializedName(SERIALIZED_NAME_APP_BUNDLE)
  private AppBundle appBundle;

  public static final String SERIALIZED_NAME_APP_INITIAL_ACTIVITY = "appInitialActivity";
  @SerializedName(SERIALIZED_NAME_APP_INITIAL_ACTIVITY)
  private String appInitialActivity;

  public static final String SERIALIZED_NAME_APP_PACKAGE_ID = "appPackageId";
  @SerializedName(SERIALIZED_NAME_APP_PACKAGE_ID)
  private String appPackageId;

  public static final String SERIALIZED_NAME_MAX_DEPTH = "maxDepth";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_MAX_DEPTH)
  private Integer maxDepth;

  public static final String SERIALIZED_NAME_MAX_STEPS = "maxSteps";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_MAX_STEPS)
  private Integer maxSteps;

  public static final String SERIALIZED_NAME_ROBO_DIRECTIVES = "roboDirectives";
  @SerializedName(SERIALIZED_NAME_ROBO_DIRECTIVES)
  private List<RoboDirective> roboDirectives = new ArrayList<>();

  /**
   * The mode in which Robo should run. Most clients should allow the server to populate this field automatically.
   */
  @JsonAdapter(RoboModeEnum.Adapter.class)
  public enum RoboModeEnum {
    MODE_UNSPECIFIED("ROBO_MODE_UNSPECIFIED"),
    
    VERSION_1("ROBO_VERSION_1"),
    
    VERSION_2("ROBO_VERSION_2");

    private String value;

    RoboModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoboModeEnum fromValue(String value) {
      for (RoboModeEnum b : RoboModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoboModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoboModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoboModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoboModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoboModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROBO_MODE = "roboMode";
  @SerializedName(SERIALIZED_NAME_ROBO_MODE)
  private RoboModeEnum roboMode;

  public static final String SERIALIZED_NAME_ROBO_SCRIPT = "roboScript";
  @SerializedName(SERIALIZED_NAME_ROBO_SCRIPT)
  private FileReference roboScript;

  public static final String SERIALIZED_NAME_STARTING_INTENTS = "startingIntents";
  @SerializedName(SERIALIZED_NAME_STARTING_INTENTS)
  private List<RoboStartingIntent> startingIntents = new ArrayList<>();

  public AndroidRoboTest() {
  }

  public AndroidRoboTest appApk(FileReference appApk) {
    this.appApk = appApk;
    return this;
  }

  /**
   * Get appApk
   * @return appApk
   */
  @javax.annotation.Nullable
  public FileReference getAppApk() {
    return appApk;
  }

  public void setAppApk(FileReference appApk) {
    this.appApk = appApk;
  }


  public AndroidRoboTest appBundle(AppBundle appBundle) {
    this.appBundle = appBundle;
    return this;
  }

  /**
   * Get appBundle
   * @return appBundle
   */
  @javax.annotation.Nullable
  public AppBundle getAppBundle() {
    return appBundle;
  }

  public void setAppBundle(AppBundle appBundle) {
    this.appBundle = appBundle;
  }


  public AndroidRoboTest appInitialActivity(String appInitialActivity) {
    this.appInitialActivity = appInitialActivity;
    return this;
  }

  /**
   * The initial activity that should be used to start the app.
   * @return appInitialActivity
   */
  @javax.annotation.Nullable
  public String getAppInitialActivity() {
    return appInitialActivity;
  }

  public void setAppInitialActivity(String appInitialActivity) {
    this.appInitialActivity = appInitialActivity;
  }


  public AndroidRoboTest appPackageId(String appPackageId) {
    this.appPackageId = appPackageId;
    return this;
  }

  /**
   * The java package for the application under test. The default value is determined by examining the application&#39;s manifest.
   * @return appPackageId
   */
  @javax.annotation.Nullable
  public String getAppPackageId() {
    return appPackageId;
  }

  public void setAppPackageId(String appPackageId) {
    this.appPackageId = appPackageId;
  }


  @Deprecated
  public AndroidRoboTest maxDepth(Integer maxDepth) {
    this.maxDepth = maxDepth;
    return this;
  }

  /**
   * The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.
   * @return maxDepth
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getMaxDepth() {
    return maxDepth;
  }

  @Deprecated
  public void setMaxDepth(Integer maxDepth) {
    this.maxDepth = maxDepth;
  }


  @Deprecated
  public AndroidRoboTest maxSteps(Integer maxSteps) {
    this.maxSteps = maxSteps;
    return this;
  }

  /**
   * The max number of steps Robo can execute. Default is no limit.
   * @return maxSteps
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getMaxSteps() {
    return maxSteps;
  }

  @Deprecated
  public void setMaxSteps(Integer maxSteps) {
    this.maxSteps = maxSteps;
  }


  public AndroidRoboTest roboDirectives(List<RoboDirective> roboDirectives) {
    this.roboDirectives = roboDirectives;
    return this;
  }

  public AndroidRoboTest addRoboDirectivesItem(RoboDirective roboDirectivesItem) {
    if (this.roboDirectives == null) {
      this.roboDirectives = new ArrayList<>();
    }
    this.roboDirectives.add(roboDirectivesItem);
    return this;
  }

  /**
   * A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.
   * @return roboDirectives
   */
  @javax.annotation.Nullable
  public List<RoboDirective> getRoboDirectives() {
    return roboDirectives;
  }

  public void setRoboDirectives(List<RoboDirective> roboDirectives) {
    this.roboDirectives = roboDirectives;
  }


  public AndroidRoboTest roboMode(RoboModeEnum roboMode) {
    this.roboMode = roboMode;
    return this;
  }

  /**
   * The mode in which Robo should run. Most clients should allow the server to populate this field automatically.
   * @return roboMode
   */
  @javax.annotation.Nullable
  public RoboModeEnum getRoboMode() {
    return roboMode;
  }

  public void setRoboMode(RoboModeEnum roboMode) {
    this.roboMode = roboMode;
  }


  public AndroidRoboTest roboScript(FileReference roboScript) {
    this.roboScript = roboScript;
    return this;
  }

  /**
   * Get roboScript
   * @return roboScript
   */
  @javax.annotation.Nullable
  public FileReference getRoboScript() {
    return roboScript;
  }

  public void setRoboScript(FileReference roboScript) {
    this.roboScript = roboScript;
  }


  public AndroidRoboTest startingIntents(List<RoboStartingIntent> startingIntents) {
    this.startingIntents = startingIntents;
    return this;
  }

  public AndroidRoboTest addStartingIntentsItem(RoboStartingIntent startingIntentsItem) {
    if (this.startingIntents == null) {
      this.startingIntents = new ArrayList<>();
    }
    this.startingIntents.add(startingIntentsItem);
    return this;
  }

  /**
   * The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).
   * @return startingIntents
   */
  @javax.annotation.Nullable
  public List<RoboStartingIntent> getStartingIntents() {
    return startingIntents;
  }

  public void setStartingIntents(List<RoboStartingIntent> startingIntents) {
    this.startingIntents = startingIntents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AndroidRoboTest androidRoboTest = (AndroidRoboTest) o;
    return Objects.equals(this.appApk, androidRoboTest.appApk) &&
        Objects.equals(this.appBundle, androidRoboTest.appBundle) &&
        Objects.equals(this.appInitialActivity, androidRoboTest.appInitialActivity) &&
        Objects.equals(this.appPackageId, androidRoboTest.appPackageId) &&
        Objects.equals(this.maxDepth, androidRoboTest.maxDepth) &&
        Objects.equals(this.maxSteps, androidRoboTest.maxSteps) &&
        Objects.equals(this.roboDirectives, androidRoboTest.roboDirectives) &&
        Objects.equals(this.roboMode, androidRoboTest.roboMode) &&
        Objects.equals(this.roboScript, androidRoboTest.roboScript) &&
        Objects.equals(this.startingIntents, androidRoboTest.startingIntents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appApk, appBundle, appInitialActivity, appPackageId, maxDepth, maxSteps, roboDirectives, roboMode, roboScript, startingIntents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AndroidRoboTest {\n");
    sb.append("    appApk: ").append(toIndentedString(appApk)).append("\n");
    sb.append("    appBundle: ").append(toIndentedString(appBundle)).append("\n");
    sb.append("    appInitialActivity: ").append(toIndentedString(appInitialActivity)).append("\n");
    sb.append("    appPackageId: ").append(toIndentedString(appPackageId)).append("\n");
    sb.append("    maxDepth: ").append(toIndentedString(maxDepth)).append("\n");
    sb.append("    maxSteps: ").append(toIndentedString(maxSteps)).append("\n");
    sb.append("    roboDirectives: ").append(toIndentedString(roboDirectives)).append("\n");
    sb.append("    roboMode: ").append(toIndentedString(roboMode)).append("\n");
    sb.append("    roboScript: ").append(toIndentedString(roboScript)).append("\n");
    sb.append("    startingIntents: ").append(toIndentedString(startingIntents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appApk");
    openapiFields.add("appBundle");
    openapiFields.add("appInitialActivity");
    openapiFields.add("appPackageId");
    openapiFields.add("maxDepth");
    openapiFields.add("maxSteps");
    openapiFields.add("roboDirectives");
    openapiFields.add("roboMode");
    openapiFields.add("roboScript");
    openapiFields.add("startingIntents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AndroidRoboTest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AndroidRoboTest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AndroidRoboTest is not found in the empty JSON string", AndroidRoboTest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AndroidRoboTest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AndroidRoboTest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appApk`
      if (jsonObj.get("appApk") != null && !jsonObj.get("appApk").isJsonNull()) {
        FileReference.validateJsonElement(jsonObj.get("appApk"));
      }
      // validate the optional field `appBundle`
      if (jsonObj.get("appBundle") != null && !jsonObj.get("appBundle").isJsonNull()) {
        AppBundle.validateJsonElement(jsonObj.get("appBundle"));
      }
      if ((jsonObj.get("appInitialActivity") != null && !jsonObj.get("appInitialActivity").isJsonNull()) && !jsonObj.get("appInitialActivity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appInitialActivity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appInitialActivity").toString()));
      }
      if ((jsonObj.get("appPackageId") != null && !jsonObj.get("appPackageId").isJsonNull()) && !jsonObj.get("appPackageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appPackageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appPackageId").toString()));
      }
      if (jsonObj.get("roboDirectives") != null && !jsonObj.get("roboDirectives").isJsonNull()) {
        JsonArray jsonArrayroboDirectives = jsonObj.getAsJsonArray("roboDirectives");
        if (jsonArrayroboDirectives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roboDirectives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roboDirectives` to be an array in the JSON string but got `%s`", jsonObj.get("roboDirectives").toString()));
          }

          // validate the optional field `roboDirectives` (array)
          for (int i = 0; i < jsonArrayroboDirectives.size(); i++) {
            RoboDirective.validateJsonElement(jsonArrayroboDirectives.get(i));
          };
        }
      }
      if ((jsonObj.get("roboMode") != null && !jsonObj.get("roboMode").isJsonNull()) && !jsonObj.get("roboMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roboMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roboMode").toString()));
      }
      // validate the optional field `roboMode`
      if (jsonObj.get("roboMode") != null && !jsonObj.get("roboMode").isJsonNull()) {
        RoboModeEnum.validateJsonElement(jsonObj.get("roboMode"));
      }
      // validate the optional field `roboScript`
      if (jsonObj.get("roboScript") != null && !jsonObj.get("roboScript").isJsonNull()) {
        FileReference.validateJsonElement(jsonObj.get("roboScript"));
      }
      if (jsonObj.get("startingIntents") != null && !jsonObj.get("startingIntents").isJsonNull()) {
        JsonArray jsonArraystartingIntents = jsonObj.getAsJsonArray("startingIntents");
        if (jsonArraystartingIntents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("startingIntents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `startingIntents` to be an array in the JSON string but got `%s`", jsonObj.get("startingIntents").toString()));
          }

          // validate the optional field `startingIntents` (array)
          for (int i = 0; i < jsonArraystartingIntents.size(); i++) {
            RoboStartingIntent.validateJsonElement(jsonArraystartingIntents.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AndroidRoboTest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AndroidRoboTest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AndroidRoboTest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AndroidRoboTest.class));

       return (TypeAdapter<T>) new TypeAdapter<AndroidRoboTest>() {
           @Override
           public void write(JsonWriter out, AndroidRoboTest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AndroidRoboTest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AndroidRoboTest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AndroidRoboTest
   * @throws IOException if the JSON string is invalid with respect to AndroidRoboTest
   */
  public static AndroidRoboTest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AndroidRoboTest.class);
  }

  /**
   * Convert an instance of AndroidRoboTest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

