/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppBundle;
import org.openapitools.client.model.FileReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A test of an Android Application with a Test Loop. The intent \\ will be implicitly added, since Games is the only user of this api, for the time being.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AndroidTestLoop {
  public static final String SERIALIZED_NAME_APP_APK = "appApk";
  @SerializedName(SERIALIZED_NAME_APP_APK)
  private FileReference appApk;

  public static final String SERIALIZED_NAME_APP_BUNDLE = "appBundle";
  @SerializedName(SERIALIZED_NAME_APP_BUNDLE)
  private AppBundle appBundle;

  public static final String SERIALIZED_NAME_APP_PACKAGE_ID = "appPackageId";
  @SerializedName(SERIALIZED_NAME_APP_PACKAGE_ID)
  private String appPackageId;

  public static final String SERIALIZED_NAME_SCENARIO_LABELS = "scenarioLabels";
  @SerializedName(SERIALIZED_NAME_SCENARIO_LABELS)
  private List<String> scenarioLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCENARIOS = "scenarios";
  @SerializedName(SERIALIZED_NAME_SCENARIOS)
  private List<Integer> scenarios = new ArrayList<>();

  public AndroidTestLoop() {
  }

  public AndroidTestLoop appApk(FileReference appApk) {
    this.appApk = appApk;
    return this;
  }

  /**
   * Get appApk
   * @return appApk
   */
  @javax.annotation.Nullable
  public FileReference getAppApk() {
    return appApk;
  }

  public void setAppApk(FileReference appApk) {
    this.appApk = appApk;
  }


  public AndroidTestLoop appBundle(AppBundle appBundle) {
    this.appBundle = appBundle;
    return this;
  }

  /**
   * Get appBundle
   * @return appBundle
   */
  @javax.annotation.Nullable
  public AppBundle getAppBundle() {
    return appBundle;
  }

  public void setAppBundle(AppBundle appBundle) {
    this.appBundle = appBundle;
  }


  public AndroidTestLoop appPackageId(String appPackageId) {
    this.appPackageId = appPackageId;
    return this;
  }

  /**
   * The java package for the application under test. The default is determined by examining the application&#39;s manifest.
   * @return appPackageId
   */
  @javax.annotation.Nullable
  public String getAppPackageId() {
    return appPackageId;
  }

  public void setAppPackageId(String appPackageId) {
    this.appPackageId = appPackageId;
  }


  public AndroidTestLoop scenarioLabels(List<String> scenarioLabels) {
    this.scenarioLabels = scenarioLabels;
    return this;
  }

  public AndroidTestLoop addScenarioLabelsItem(String scenarioLabelsItem) {
    if (this.scenarioLabels == null) {
      this.scenarioLabels = new ArrayList<>();
    }
    this.scenarioLabels.add(scenarioLabelsItem);
    return this;
  }

  /**
   * The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application&#39;s manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.
   * @return scenarioLabels
   */
  @javax.annotation.Nullable
  public List<String> getScenarioLabels() {
    return scenarioLabels;
  }

  public void setScenarioLabels(List<String> scenarioLabels) {
    this.scenarioLabels = scenarioLabels;
  }


  public AndroidTestLoop scenarios(List<Integer> scenarios) {
    this.scenarios = scenarios;
    return this;
  }

  public AndroidTestLoop addScenariosItem(Integer scenariosItem) {
    if (this.scenarios == null) {
      this.scenarios = new ArrayList<>();
    }
    this.scenarios.add(scenariosItem);
    return this;
  }

  /**
   * The list of scenarios that should be run during the test. The default is all test loops, derived from the application&#39;s manifest.
   * @return scenarios
   */
  @javax.annotation.Nullable
  public List<Integer> getScenarios() {
    return scenarios;
  }

  public void setScenarios(List<Integer> scenarios) {
    this.scenarios = scenarios;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AndroidTestLoop androidTestLoop = (AndroidTestLoop) o;
    return Objects.equals(this.appApk, androidTestLoop.appApk) &&
        Objects.equals(this.appBundle, androidTestLoop.appBundle) &&
        Objects.equals(this.appPackageId, androidTestLoop.appPackageId) &&
        Objects.equals(this.scenarioLabels, androidTestLoop.scenarioLabels) &&
        Objects.equals(this.scenarios, androidTestLoop.scenarios);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appApk, appBundle, appPackageId, scenarioLabels, scenarios);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AndroidTestLoop {\n");
    sb.append("    appApk: ").append(toIndentedString(appApk)).append("\n");
    sb.append("    appBundle: ").append(toIndentedString(appBundle)).append("\n");
    sb.append("    appPackageId: ").append(toIndentedString(appPackageId)).append("\n");
    sb.append("    scenarioLabels: ").append(toIndentedString(scenarioLabels)).append("\n");
    sb.append("    scenarios: ").append(toIndentedString(scenarios)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appApk");
    openapiFields.add("appBundle");
    openapiFields.add("appPackageId");
    openapiFields.add("scenarioLabels");
    openapiFields.add("scenarios");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AndroidTestLoop
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AndroidTestLoop.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AndroidTestLoop is not found in the empty JSON string", AndroidTestLoop.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AndroidTestLoop.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AndroidTestLoop` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appApk`
      if (jsonObj.get("appApk") != null && !jsonObj.get("appApk").isJsonNull()) {
        FileReference.validateJsonElement(jsonObj.get("appApk"));
      }
      // validate the optional field `appBundle`
      if (jsonObj.get("appBundle") != null && !jsonObj.get("appBundle").isJsonNull()) {
        AppBundle.validateJsonElement(jsonObj.get("appBundle"));
      }
      if ((jsonObj.get("appPackageId") != null && !jsonObj.get("appPackageId").isJsonNull()) && !jsonObj.get("appPackageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appPackageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appPackageId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scenarioLabels") != null && !jsonObj.get("scenarioLabels").isJsonNull() && !jsonObj.get("scenarioLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenarioLabels` to be an array in the JSON string but got `%s`", jsonObj.get("scenarioLabels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scenarios") != null && !jsonObj.get("scenarios").isJsonNull() && !jsonObj.get("scenarios").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenarios` to be an array in the JSON string but got `%s`", jsonObj.get("scenarios").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AndroidTestLoop.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AndroidTestLoop' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AndroidTestLoop> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AndroidTestLoop.class));

       return (TypeAdapter<T>) new TypeAdapter<AndroidTestLoop>() {
           @Override
           public void write(JsonWriter out, AndroidTestLoop value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AndroidTestLoop read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AndroidTestLoop given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AndroidTestLoop
   * @throws IOException if the JSON string is invalid with respect to AndroidTestLoop
   */
  public static AndroidTestLoop fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AndroidTestLoop.class);
  }

  /**
   * Convert an instance of AndroidTestLoop to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

