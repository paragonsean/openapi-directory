/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FileReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A test of an iOS application that uses the XCTest framework. Xcode supports the option to \&quot;build for testing\&quot;, which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IosXcTest {
  public static final String SERIALIZED_NAME_APP_BUNDLE_ID = "appBundleId";
  @SerializedName(SERIALIZED_NAME_APP_BUNDLE_ID)
  private String appBundleId;

  public static final String SERIALIZED_NAME_TEST_SPECIAL_ENTITLEMENTS = "testSpecialEntitlements";
  @SerializedName(SERIALIZED_NAME_TEST_SPECIAL_ENTITLEMENTS)
  private Boolean testSpecialEntitlements;

  public static final String SERIALIZED_NAME_TESTS_ZIP = "testsZip";
  @SerializedName(SERIALIZED_NAME_TESTS_ZIP)
  private FileReference testsZip;

  public static final String SERIALIZED_NAME_XCODE_VERSION = "xcodeVersion";
  @SerializedName(SERIALIZED_NAME_XCODE_VERSION)
  private String xcodeVersion;

  public static final String SERIALIZED_NAME_XCTESTRUN = "xctestrun";
  @SerializedName(SERIALIZED_NAME_XCTESTRUN)
  private FileReference xctestrun;

  public IosXcTest() {
  }

  public IosXcTest appBundleId(String appBundleId) {
    this.appBundleId = appBundleId;
    return this;
  }

  /**
   * Output only. The bundle id for the application under test.
   * @return appBundleId
   */
  @javax.annotation.Nullable
  public String getAppBundleId() {
    return appBundleId;
  }

  public void setAppBundleId(String appBundleId) {
    this.appBundleId = appBundleId;
  }


  public IosXcTest testSpecialEntitlements(Boolean testSpecialEntitlements) {
    this.testSpecialEntitlements = testSpecialEntitlements;
    return this;
  }

  /**
   * The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
   * @return testSpecialEntitlements
   */
  @javax.annotation.Nullable
  public Boolean getTestSpecialEntitlements() {
    return testSpecialEntitlements;
  }

  public void setTestSpecialEntitlements(Boolean testSpecialEntitlements) {
    this.testSpecialEntitlements = testSpecialEntitlements;
  }


  public IosXcTest testsZip(FileReference testsZip) {
    this.testsZip = testsZip;
    return this;
  }

  /**
   * Get testsZip
   * @return testsZip
   */
  @javax.annotation.Nullable
  public FileReference getTestsZip() {
    return testsZip;
  }

  public void setTestsZip(FileReference testsZip) {
    this.testsZip = testsZip;
  }


  public IosXcTest xcodeVersion(String xcodeVersion) {
    this.xcodeVersion = xcodeVersion;
    return this;
  }

  /**
   * The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
   * @return xcodeVersion
   */
  @javax.annotation.Nullable
  public String getXcodeVersion() {
    return xcodeVersion;
  }

  public void setXcodeVersion(String xcodeVersion) {
    this.xcodeVersion = xcodeVersion;
  }


  public IosXcTest xctestrun(FileReference xctestrun) {
    this.xctestrun = xctestrun;
    return this;
  }

  /**
   * Get xctestrun
   * @return xctestrun
   */
  @javax.annotation.Nullable
  public FileReference getXctestrun() {
    return xctestrun;
  }

  public void setXctestrun(FileReference xctestrun) {
    this.xctestrun = xctestrun;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IosXcTest iosXcTest = (IosXcTest) o;
    return Objects.equals(this.appBundleId, iosXcTest.appBundleId) &&
        Objects.equals(this.testSpecialEntitlements, iosXcTest.testSpecialEntitlements) &&
        Objects.equals(this.testsZip, iosXcTest.testsZip) &&
        Objects.equals(this.xcodeVersion, iosXcTest.xcodeVersion) &&
        Objects.equals(this.xctestrun, iosXcTest.xctestrun);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appBundleId, testSpecialEntitlements, testsZip, xcodeVersion, xctestrun);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IosXcTest {\n");
    sb.append("    appBundleId: ").append(toIndentedString(appBundleId)).append("\n");
    sb.append("    testSpecialEntitlements: ").append(toIndentedString(testSpecialEntitlements)).append("\n");
    sb.append("    testsZip: ").append(toIndentedString(testsZip)).append("\n");
    sb.append("    xcodeVersion: ").append(toIndentedString(xcodeVersion)).append("\n");
    sb.append("    xctestrun: ").append(toIndentedString(xctestrun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appBundleId");
    openapiFields.add("testSpecialEntitlements");
    openapiFields.add("testsZip");
    openapiFields.add("xcodeVersion");
    openapiFields.add("xctestrun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IosXcTest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IosXcTest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IosXcTest is not found in the empty JSON string", IosXcTest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IosXcTest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IosXcTest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appBundleId") != null && !jsonObj.get("appBundleId").isJsonNull()) && !jsonObj.get("appBundleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appBundleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appBundleId").toString()));
      }
      // validate the optional field `testsZip`
      if (jsonObj.get("testsZip") != null && !jsonObj.get("testsZip").isJsonNull()) {
        FileReference.validateJsonElement(jsonObj.get("testsZip"));
      }
      if ((jsonObj.get("xcodeVersion") != null && !jsonObj.get("xcodeVersion").isJsonNull()) && !jsonObj.get("xcodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xcodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xcodeVersion").toString()));
      }
      // validate the optional field `xctestrun`
      if (jsonObj.get("xctestrun") != null && !jsonObj.get("xctestrun").isJsonNull()) {
        FileReference.validateJsonElement(jsonObj.get("xctestrun"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IosXcTest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IosXcTest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IosXcTest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IosXcTest.class));

       return (TypeAdapter<T>) new TypeAdapter<IosXcTest>() {
           @Override
           public void write(JsonWriter out, IosXcTest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IosXcTest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IosXcTest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IosXcTest
   * @throws IOException if the JSON string is invalid with respect to IosXcTest
   */
  public static IosXcTest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IosXcTest.class);
  }

  /**
   * Convert an instance of IosXcTest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

