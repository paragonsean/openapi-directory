/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FileReference;
import org.openapitools.client.model.IosDeviceFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of how to set up an iOS device prior to running the test.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IosTestSetup {
  public static final String SERIALIZED_NAME_ADDITIONAL_IPAS = "additionalIpas";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_IPAS)
  private List<FileReference> additionalIpas = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_PROFILE = "networkProfile";
  @SerializedName(SERIALIZED_NAME_NETWORK_PROFILE)
  private String networkProfile;

  public static final String SERIALIZED_NAME_PULL_DIRECTORIES = "pullDirectories";
  @SerializedName(SERIALIZED_NAME_PULL_DIRECTORIES)
  private List<IosDeviceFile> pullDirectories = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUSH_FILES = "pushFiles";
  @SerializedName(SERIALIZED_NAME_PUSH_FILES)
  private List<IosDeviceFile> pushFiles = new ArrayList<>();

  public IosTestSetup() {
  }

  public IosTestSetup additionalIpas(List<FileReference> additionalIpas) {
    this.additionalIpas = additionalIpas;
    return this;
  }

  public IosTestSetup addAdditionalIpasItem(FileReference additionalIpasItem) {
    if (this.additionalIpas == null) {
      this.additionalIpas = new ArrayList<>();
    }
    this.additionalIpas.add(additionalIpasItem);
    return this;
  }

  /**
   * iOS apps to install in addition to those being directly tested.
   * @return additionalIpas
   */
  @javax.annotation.Nullable
  public List<FileReference> getAdditionalIpas() {
    return additionalIpas;
  }

  public void setAdditionalIpas(List<FileReference> additionalIpas) {
    this.additionalIpas = additionalIpas;
  }


  public IosTestSetup networkProfile(String networkProfile) {
    this.networkProfile = networkProfile;
    return this;
  }

  /**
   * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
   * @return networkProfile
   */
  @javax.annotation.Nullable
  public String getNetworkProfile() {
    return networkProfile;
  }

  public void setNetworkProfile(String networkProfile) {
    this.networkProfile = networkProfile;
  }


  public IosTestSetup pullDirectories(List<IosDeviceFile> pullDirectories) {
    this.pullDirectories = pullDirectories;
    return this;
  }

  public IosTestSetup addPullDirectoriesItem(IosDeviceFile pullDirectoriesItem) {
    if (this.pullDirectories == null) {
      this.pullDirectories = new ArrayList<>();
    }
    this.pullDirectories.add(pullDirectoriesItem);
    return this;
  }

  /**
   * List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (such as /private/var/mobile/Media) or within an accessible directory inside the app&#39;s filesystem (such as /Documents) by specifying the bundle ID.
   * @return pullDirectories
   */
  @javax.annotation.Nullable
  public List<IosDeviceFile> getPullDirectories() {
    return pullDirectories;
  }

  public void setPullDirectories(List<IosDeviceFile> pullDirectories) {
    this.pullDirectories = pullDirectories;
  }


  public IosTestSetup pushFiles(List<IosDeviceFile> pushFiles) {
    this.pushFiles = pushFiles;
    return this;
  }

  public IosTestSetup addPushFilesItem(IosDeviceFile pushFilesItem) {
    if (this.pushFiles == null) {
      this.pushFiles = new ArrayList<>();
    }
    this.pushFiles.add(pushFilesItem);
    return this;
  }

  /**
   * List of files to push to the device before starting the test.
   * @return pushFiles
   */
  @javax.annotation.Nullable
  public List<IosDeviceFile> getPushFiles() {
    return pushFiles;
  }

  public void setPushFiles(List<IosDeviceFile> pushFiles) {
    this.pushFiles = pushFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IosTestSetup iosTestSetup = (IosTestSetup) o;
    return Objects.equals(this.additionalIpas, iosTestSetup.additionalIpas) &&
        Objects.equals(this.networkProfile, iosTestSetup.networkProfile) &&
        Objects.equals(this.pullDirectories, iosTestSetup.pullDirectories) &&
        Objects.equals(this.pushFiles, iosTestSetup.pushFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalIpas, networkProfile, pullDirectories, pushFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IosTestSetup {\n");
    sb.append("    additionalIpas: ").append(toIndentedString(additionalIpas)).append("\n");
    sb.append("    networkProfile: ").append(toIndentedString(networkProfile)).append("\n");
    sb.append("    pullDirectories: ").append(toIndentedString(pullDirectories)).append("\n");
    sb.append("    pushFiles: ").append(toIndentedString(pushFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalIpas");
    openapiFields.add("networkProfile");
    openapiFields.add("pullDirectories");
    openapiFields.add("pushFiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IosTestSetup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IosTestSetup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IosTestSetup is not found in the empty JSON string", IosTestSetup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IosTestSetup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IosTestSetup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalIpas") != null && !jsonObj.get("additionalIpas").isJsonNull()) {
        JsonArray jsonArrayadditionalIpas = jsonObj.getAsJsonArray("additionalIpas");
        if (jsonArrayadditionalIpas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalIpas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalIpas` to be an array in the JSON string but got `%s`", jsonObj.get("additionalIpas").toString()));
          }

          // validate the optional field `additionalIpas` (array)
          for (int i = 0; i < jsonArrayadditionalIpas.size(); i++) {
            FileReference.validateJsonElement(jsonArrayadditionalIpas.get(i));
          };
        }
      }
      if ((jsonObj.get("networkProfile") != null && !jsonObj.get("networkProfile").isJsonNull()) && !jsonObj.get("networkProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkProfile").toString()));
      }
      if (jsonObj.get("pullDirectories") != null && !jsonObj.get("pullDirectories").isJsonNull()) {
        JsonArray jsonArraypullDirectories = jsonObj.getAsJsonArray("pullDirectories");
        if (jsonArraypullDirectories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pullDirectories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pullDirectories` to be an array in the JSON string but got `%s`", jsonObj.get("pullDirectories").toString()));
          }

          // validate the optional field `pullDirectories` (array)
          for (int i = 0; i < jsonArraypullDirectories.size(); i++) {
            IosDeviceFile.validateJsonElement(jsonArraypullDirectories.get(i));
          };
        }
      }
      if (jsonObj.get("pushFiles") != null && !jsonObj.get("pushFiles").isJsonNull()) {
        JsonArray jsonArraypushFiles = jsonObj.getAsJsonArray("pushFiles");
        if (jsonArraypushFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pushFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pushFiles` to be an array in the JSON string but got `%s`", jsonObj.get("pushFiles").toString()));
          }

          // validate the optional field `pushFiles` (array)
          for (int i = 0; i < jsonArraypushFiles.size(); i++) {
            IosDeviceFile.validateJsonElement(jsonArraypushFiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IosTestSetup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IosTestSetup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IosTestSetup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IosTestSetup.class));

       return (TypeAdapter<T>) new TypeAdapter<IosTestSetup>() {
           @Override
           public void write(JsonWriter out, IosTestSetup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IosTestSetup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IosTestSetup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IosTestSetup
   * @throws IOException if the JSON string is invalid with respect to IosTestSetup
   */
  public static IosTestSetup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IosTestSetup.class);
  }

  /**
   * Convert an instance of IosTestSetup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

