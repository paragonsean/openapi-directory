/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single Android device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AndroidDevice {
  public static final String SERIALIZED_NAME_ANDROID_MODEL_ID = "androidModelId";
  @SerializedName(SERIALIZED_NAME_ANDROID_MODEL_ID)
  private String androidModelId;

  public static final String SERIALIZED_NAME_ANDROID_VERSION_ID = "androidVersionId";
  @SerializedName(SERIALIZED_NAME_ANDROID_VERSION_ID)
  private String androidVersionId;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private String orientation;

  public AndroidDevice() {
  }

  public AndroidDevice androidModelId(String androidModelId) {
    this.androidModelId = androidModelId;
    return this;
  }

  /**
   * Required. The id of the Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
   * @return androidModelId
   */
  @javax.annotation.Nullable
  public String getAndroidModelId() {
    return androidModelId;
  }

  public void setAndroidModelId(String androidModelId) {
    this.androidModelId = androidModelId;
  }


  public AndroidDevice androidVersionId(String androidVersionId) {
    this.androidVersionId = androidVersionId;
    return this;
  }

  /**
   * Required. The id of the Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
   * @return androidVersionId
   */
  @javax.annotation.Nullable
  public String getAndroidVersionId() {
    return androidVersionId;
  }

  public void setAndroidVersionId(String androidVersionId) {
    this.androidVersionId = androidVersionId;
  }


  public AndroidDevice locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public AndroidDevice orientation(String orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
   * @return orientation
   */
  @javax.annotation.Nullable
  public String getOrientation() {
    return orientation;
  }

  public void setOrientation(String orientation) {
    this.orientation = orientation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AndroidDevice androidDevice = (AndroidDevice) o;
    return Objects.equals(this.androidModelId, androidDevice.androidModelId) &&
        Objects.equals(this.androidVersionId, androidDevice.androidVersionId) &&
        Objects.equals(this.locale, androidDevice.locale) &&
        Objects.equals(this.orientation, androidDevice.orientation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidModelId, androidVersionId, locale, orientation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AndroidDevice {\n");
    sb.append("    androidModelId: ").append(toIndentedString(androidModelId)).append("\n");
    sb.append("    androidVersionId: ").append(toIndentedString(androidVersionId)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("androidModelId");
    openapiFields.add("androidVersionId");
    openapiFields.add("locale");
    openapiFields.add("orientation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AndroidDevice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AndroidDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AndroidDevice is not found in the empty JSON string", AndroidDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AndroidDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AndroidDevice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("androidModelId") != null && !jsonObj.get("androidModelId").isJsonNull()) && !jsonObj.get("androidModelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `androidModelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("androidModelId").toString()));
      }
      if ((jsonObj.get("androidVersionId") != null && !jsonObj.get("androidVersionId").isJsonNull()) && !jsonObj.get("androidVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `androidVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("androidVersionId").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) && !jsonObj.get("orientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orientation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AndroidDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AndroidDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AndroidDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AndroidDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<AndroidDevice>() {
           @Override
           public void write(JsonWriter out, AndroidDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AndroidDevice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AndroidDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AndroidDevice
   * @throws IOException if the JSON string is invalid with respect to AndroidDevice
   */
  public static AndroidDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AndroidDevice.class);
  }

  /**
   * Convert an instance of AndroidDevice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

