/*
 * Cloud Testing API
 * Allows developers to run automated tests for their mobile applications on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message encapsulating a series of Session states and the time that the DeviceSession first entered those states.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:25.957019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SessionStateEvent {
  public static final String SERIALIZED_NAME_EVENT_TIME = "eventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private String eventTime;

  /**
   * Output only. The session_state tracked by this event
   */
  @JsonAdapter(SessionStateEnum.Adapter.class)
  public enum SessionStateEnum {
    SESSION_STATE_UNSPECIFIED("SESSION_STATE_UNSPECIFIED"),
    
    REQUESTED("REQUESTED"),
    
    PENDING("PENDING"),
    
    ACTIVE("ACTIVE"),
    
    EXPIRED("EXPIRED"),
    
    FINISHED("FINISHED"),
    
    UNAVAILABLE("UNAVAILABLE"),
    
    ERROR("ERROR");

    private String value;

    SessionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SessionStateEnum fromValue(String value) {
      for (SessionStateEnum b : SessionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SessionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SessionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SessionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SESSION_STATE = "sessionState";
  @SerializedName(SERIALIZED_NAME_SESSION_STATE)
  private SessionStateEnum sessionState;

  public static final String SERIALIZED_NAME_STATE_MESSAGE = "stateMessage";
  @SerializedName(SERIALIZED_NAME_STATE_MESSAGE)
  private String stateMessage;

  public SessionStateEvent() {
  }

  public SessionStateEvent(
     String eventTime, 
     SessionStateEnum sessionState, 
     String stateMessage
  ) {
    this();
    this.eventTime = eventTime;
    this.sessionState = sessionState;
    this.stateMessage = stateMessage;
  }

  /**
   * Output only. The time that the session_state first encountered that state.
   * @return eventTime
   */
  @javax.annotation.Nullable
  public String getEventTime() {
    return eventTime;
  }



  /**
   * Output only. The session_state tracked by this event
   * @return sessionState
   */
  @javax.annotation.Nullable
  public SessionStateEnum getSessionState() {
    return sessionState;
  }



  /**
   * Output only. A human-readable message to explain the state.
   * @return stateMessage
   */
  @javax.annotation.Nullable
  public String getStateMessage() {
    return stateMessage;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionStateEvent sessionStateEvent = (SessionStateEvent) o;
    return Objects.equals(this.eventTime, sessionStateEvent.eventTime) &&
        Objects.equals(this.sessionState, sessionStateEvent.sessionState) &&
        Objects.equals(this.stateMessage, sessionStateEvent.stateMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventTime, sessionState, stateMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionStateEvent {\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    sessionState: ").append(toIndentedString(sessionState)).append("\n");
    sb.append("    stateMessage: ").append(toIndentedString(stateMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventTime");
    openapiFields.add("sessionState");
    openapiFields.add("stateMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SessionStateEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionStateEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionStateEvent is not found in the empty JSON string", SessionStateEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionStateEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionStateEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eventTime") != null && !jsonObj.get("eventTime").isJsonNull()) && !jsonObj.get("eventTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventTime").toString()));
      }
      if ((jsonObj.get("sessionState") != null && !jsonObj.get("sessionState").isJsonNull()) && !jsonObj.get("sessionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionState").toString()));
      }
      // validate the optional field `sessionState`
      if (jsonObj.get("sessionState") != null && !jsonObj.get("sessionState").isJsonNull()) {
        SessionStateEnum.validateJsonElement(jsonObj.get("sessionState"));
      }
      if ((jsonObj.get("stateMessage") != null && !jsonObj.get("stateMessage").isJsonNull()) && !jsonObj.get("stateMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionStateEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionStateEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionStateEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionStateEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionStateEvent>() {
           @Override
           public void write(JsonWriter out, SessionStateEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionStateEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SessionStateEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionStateEvent
   * @throws IOException if the JSON string is invalid with respect to SessionStateEvent
   */
  public static SessionStateEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionStateEvent.class);
  }

  /**
   * Convert an instance of SessionStateEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

