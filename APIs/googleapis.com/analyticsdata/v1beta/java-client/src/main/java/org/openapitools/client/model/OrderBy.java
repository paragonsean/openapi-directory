/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DimensionOrderBy;
import org.openapitools.client.model.MetricOrderBy;
import org.openapitools.client.model.PivotOrderBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Order bys define how rows will be sorted in the response. For example, ordering rows by descending event count is one ordering, and ordering rows by the event name string is a different ordering.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderBy {
  public static final String SERIALIZED_NAME_DESC = "desc";
  @SerializedName(SERIALIZED_NAME_DESC)
  private Boolean desc;

  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private DimensionOrderBy dimension;

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private MetricOrderBy metric;

  public static final String SERIALIZED_NAME_PIVOT = "pivot";
  @SerializedName(SERIALIZED_NAME_PIVOT)
  private PivotOrderBy pivot;

  public OrderBy() {
  }

  public OrderBy desc(Boolean desc) {
    this.desc = desc;
    return this;
  }

  /**
   * If true, sorts by descending order.
   * @return desc
   */
  @javax.annotation.Nullable
  public Boolean getDesc() {
    return desc;
  }

  public void setDesc(Boolean desc) {
    this.desc = desc;
  }


  public OrderBy dimension(DimensionOrderBy dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * Get dimension
   * @return dimension
   */
  @javax.annotation.Nullable
  public DimensionOrderBy getDimension() {
    return dimension;
  }

  public void setDimension(DimensionOrderBy dimension) {
    this.dimension = dimension;
  }


  public OrderBy metric(MetricOrderBy metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Get metric
   * @return metric
   */
  @javax.annotation.Nullable
  public MetricOrderBy getMetric() {
    return metric;
  }

  public void setMetric(MetricOrderBy metric) {
    this.metric = metric;
  }


  public OrderBy pivot(PivotOrderBy pivot) {
    this.pivot = pivot;
    return this;
  }

  /**
   * Get pivot
   * @return pivot
   */
  @javax.annotation.Nullable
  public PivotOrderBy getPivot() {
    return pivot;
  }

  public void setPivot(PivotOrderBy pivot) {
    this.pivot = pivot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderBy orderBy = (OrderBy) o;
    return Objects.equals(this.desc, orderBy.desc) &&
        Objects.equals(this.dimension, orderBy.dimension) &&
        Objects.equals(this.metric, orderBy.metric) &&
        Objects.equals(this.pivot, orderBy.pivot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(desc, dimension, metric, pivot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderBy {\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    pivot: ").append(toIndentedString(pivot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("desc");
    openapiFields.add("dimension");
    openapiFields.add("metric");
    openapiFields.add("pivot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderBy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderBy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderBy is not found in the empty JSON string", OrderBy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderBy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderBy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dimension`
      if (jsonObj.get("dimension") != null && !jsonObj.get("dimension").isJsonNull()) {
        DimensionOrderBy.validateJsonElement(jsonObj.get("dimension"));
      }
      // validate the optional field `metric`
      if (jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) {
        MetricOrderBy.validateJsonElement(jsonObj.get("metric"));
      }
      // validate the optional field `pivot`
      if (jsonObj.get("pivot") != null && !jsonObj.get("pivot").isJsonNull()) {
        PivotOrderBy.validateJsonElement(jsonObj.get("pivot"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderBy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderBy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderBy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderBy.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderBy>() {
           @Override
           public void write(JsonWriter out, OrderBy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderBy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderBy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderBy
   * @throws IOException if the JSON string is invalid with respect to OrderBy
   */
  public static OrderBy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderBy.class);
  }

  /**
   * Convert an instance of OrderBy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

