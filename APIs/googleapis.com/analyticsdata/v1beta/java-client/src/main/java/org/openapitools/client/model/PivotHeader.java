/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PivotDimensionHeader;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dimensions&#39; values in a single pivot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PivotHeader {
  public static final String SERIALIZED_NAME_PIVOT_DIMENSION_HEADERS = "pivotDimensionHeaders";
  @SerializedName(SERIALIZED_NAME_PIVOT_DIMENSION_HEADERS)
  private List<PivotDimensionHeader> pivotDimensionHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROW_COUNT = "rowCount";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Integer rowCount;

  public PivotHeader() {
  }

  public PivotHeader pivotDimensionHeaders(List<PivotDimensionHeader> pivotDimensionHeaders) {
    this.pivotDimensionHeaders = pivotDimensionHeaders;
    return this;
  }

  public PivotHeader addPivotDimensionHeadersItem(PivotDimensionHeader pivotDimensionHeadersItem) {
    if (this.pivotDimensionHeaders == null) {
      this.pivotDimensionHeaders = new ArrayList<>();
    }
    this.pivotDimensionHeaders.add(pivotDimensionHeadersItem);
    return this;
  }

  /**
   * The size is the same as the cardinality of the corresponding dimension combinations.
   * @return pivotDimensionHeaders
   */
  @javax.annotation.Nullable
  public List<PivotDimensionHeader> getPivotDimensionHeaders() {
    return pivotDimensionHeaders;
  }

  public void setPivotDimensionHeaders(List<PivotDimensionHeader> pivotDimensionHeaders) {
    this.pivotDimensionHeaders = pivotDimensionHeaders;
  }


  public PivotHeader rowCount(Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * The cardinality of the pivot. The total number of rows for this pivot&#39;s fields regardless of how the parameters &#x60;offset&#x60; and &#x60;limit&#x60; are specified in the request.
   * @return rowCount
   */
  @javax.annotation.Nullable
  public Integer getRowCount() {
    return rowCount;
  }

  public void setRowCount(Integer rowCount) {
    this.rowCount = rowCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PivotHeader pivotHeader = (PivotHeader) o;
    return Objects.equals(this.pivotDimensionHeaders, pivotHeader.pivotDimensionHeaders) &&
        Objects.equals(this.rowCount, pivotHeader.rowCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pivotDimensionHeaders, rowCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PivotHeader {\n");
    sb.append("    pivotDimensionHeaders: ").append(toIndentedString(pivotDimensionHeaders)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pivotDimensionHeaders");
    openapiFields.add("rowCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PivotHeader
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PivotHeader.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PivotHeader is not found in the empty JSON string", PivotHeader.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PivotHeader.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PivotHeader` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("pivotDimensionHeaders") != null && !jsonObj.get("pivotDimensionHeaders").isJsonNull()) {
        JsonArray jsonArraypivotDimensionHeaders = jsonObj.getAsJsonArray("pivotDimensionHeaders");
        if (jsonArraypivotDimensionHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pivotDimensionHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pivotDimensionHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("pivotDimensionHeaders").toString()));
          }

          // validate the optional field `pivotDimensionHeaders` (array)
          for (int i = 0; i < jsonArraypivotDimensionHeaders.size(); i++) {
            PivotDimensionHeader.validateJsonElement(jsonArraypivotDimensionHeaders.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PivotHeader.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PivotHeader' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PivotHeader> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PivotHeader.class));

       return (TypeAdapter<T>) new TypeAdapter<PivotHeader>() {
           @Override
           public void write(JsonWriter out, PivotHeader value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PivotHeader read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PivotHeader given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PivotHeader
   * @throws IOException if the JSON string is invalid with respect to PivotHeader
   */
  public static PivotHeader fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PivotHeader.class);
  }

  /**
   * Convert an instance of PivotHeader to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

