/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.FilterExpressionList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FilterExpression {
  public static final String SERIALIZED_NAME_AND_GROUP = "andGroup";
  @SerializedName(SERIALIZED_NAME_AND_GROUP)
  private FilterExpressionList andGroup;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private Filter filter;

  public static final String SERIALIZED_NAME_NOT_EXPRESSION = "notExpression";
  @SerializedName(SERIALIZED_NAME_NOT_EXPRESSION)
  private FilterExpression notExpression;

  public static final String SERIALIZED_NAME_OR_GROUP = "orGroup";
  @SerializedName(SERIALIZED_NAME_OR_GROUP)
  private FilterExpressionList orGroup;

  public FilterExpression() {
  }

  public FilterExpression andGroup(FilterExpressionList andGroup) {
    this.andGroup = andGroup;
    return this;
  }

  /**
   * Get andGroup
   * @return andGroup
   */
  @javax.annotation.Nullable
  public FilterExpressionList getAndGroup() {
    return andGroup;
  }

  public void setAndGroup(FilterExpressionList andGroup) {
    this.andGroup = andGroup;
  }


  public FilterExpression filter(Filter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public Filter getFilter() {
    return filter;
  }

  public void setFilter(Filter filter) {
    this.filter = filter;
  }


  public FilterExpression notExpression(FilterExpression notExpression) {
    this.notExpression = notExpression;
    return this;
  }

  /**
   * Get notExpression
   * @return notExpression
   */
  @javax.annotation.Nullable
  public FilterExpression getNotExpression() {
    return notExpression;
  }

  public void setNotExpression(FilterExpression notExpression) {
    this.notExpression = notExpression;
  }


  public FilterExpression orGroup(FilterExpressionList orGroup) {
    this.orGroup = orGroup;
    return this;
  }

  /**
   * Get orGroup
   * @return orGroup
   */
  @javax.annotation.Nullable
  public FilterExpressionList getOrGroup() {
    return orGroup;
  }

  public void setOrGroup(FilterExpressionList orGroup) {
    this.orGroup = orGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterExpression filterExpression = (FilterExpression) o;
    return Objects.equals(this.andGroup, filterExpression.andGroup) &&
        Objects.equals(this.filter, filterExpression.filter) &&
        Objects.equals(this.notExpression, filterExpression.notExpression) &&
        Objects.equals(this.orGroup, filterExpression.orGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(andGroup, filter, notExpression, orGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterExpression {\n");
    sb.append("    andGroup: ").append(toIndentedString(andGroup)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    notExpression: ").append(toIndentedString(notExpression)).append("\n");
    sb.append("    orGroup: ").append(toIndentedString(orGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("andGroup");
    openapiFields.add("filter");
    openapiFields.add("notExpression");
    openapiFields.add("orGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FilterExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FilterExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilterExpression is not found in the empty JSON string", FilterExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FilterExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FilterExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `andGroup`
      if (jsonObj.get("andGroup") != null && !jsonObj.get("andGroup").isJsonNull()) {
        FilterExpressionList.validateJsonElement(jsonObj.get("andGroup"));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        Filter.validateJsonElement(jsonObj.get("filter"));
      }
      // validate the optional field `notExpression`
      if (jsonObj.get("notExpression") != null && !jsonObj.get("notExpression").isJsonNull()) {
        FilterExpression.validateJsonElement(jsonObj.get("notExpression"));
      }
      // validate the optional field `orGroup`
      if (jsonObj.get("orGroup") != null && !jsonObj.get("orGroup").isJsonNull()) {
        FilterExpressionList.validateJsonElement(jsonObj.get("orGroup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilterExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilterExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilterExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilterExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<FilterExpression>() {
           @Override
           public void write(JsonWriter out, FilterExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FilterExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FilterExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FilterExpression
   * @throws IOException if the JSON string is invalid with respect to FilterExpression
   */
  public static FilterExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilterExpression.class);
  }

  /**
   * Convert an instance of FilterExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

