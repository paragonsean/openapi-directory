/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BetweenFilter;
import org.openapitools.client.model.InListFilter;
import org.openapitools.client.model.NumericFilter;
import org.openapitools.client.model.StringFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An expression to filter dimension or metric values.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Filter {
  public static final String SERIALIZED_NAME_BETWEEN_FILTER = "betweenFilter";
  @SerializedName(SERIALIZED_NAME_BETWEEN_FILTER)
  private BetweenFilter betweenFilter;

  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_IN_LIST_FILTER = "inListFilter";
  @SerializedName(SERIALIZED_NAME_IN_LIST_FILTER)
  private InListFilter inListFilter;

  public static final String SERIALIZED_NAME_NUMERIC_FILTER = "numericFilter";
  @SerializedName(SERIALIZED_NAME_NUMERIC_FILTER)
  private NumericFilter numericFilter;

  public static final String SERIALIZED_NAME_STRING_FILTER = "stringFilter";
  @SerializedName(SERIALIZED_NAME_STRING_FILTER)
  private StringFilter stringFilter;

  public Filter() {
  }

  public Filter betweenFilter(BetweenFilter betweenFilter) {
    this.betweenFilter = betweenFilter;
    return this;
  }

  /**
   * Get betweenFilter
   * @return betweenFilter
   */
  @javax.annotation.Nullable
  public BetweenFilter getBetweenFilter() {
    return betweenFilter;
  }

  public void setBetweenFilter(BetweenFilter betweenFilter) {
    this.betweenFilter = betweenFilter;
  }


  public Filter fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * The dimension name or metric name. In most methods, dimensions &amp; metrics can be used for the first time in this field. However in a RunPivotReportRequest, this field must be additionally specified by name in the RunPivotReportRequest&#39;s dimensions or metrics.
   * @return fieldName
   */
  @javax.annotation.Nullable
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public Filter inListFilter(InListFilter inListFilter) {
    this.inListFilter = inListFilter;
    return this;
  }

  /**
   * Get inListFilter
   * @return inListFilter
   */
  @javax.annotation.Nullable
  public InListFilter getInListFilter() {
    return inListFilter;
  }

  public void setInListFilter(InListFilter inListFilter) {
    this.inListFilter = inListFilter;
  }


  public Filter numericFilter(NumericFilter numericFilter) {
    this.numericFilter = numericFilter;
    return this;
  }

  /**
   * Get numericFilter
   * @return numericFilter
   */
  @javax.annotation.Nullable
  public NumericFilter getNumericFilter() {
    return numericFilter;
  }

  public void setNumericFilter(NumericFilter numericFilter) {
    this.numericFilter = numericFilter;
  }


  public Filter stringFilter(StringFilter stringFilter) {
    this.stringFilter = stringFilter;
    return this;
  }

  /**
   * Get stringFilter
   * @return stringFilter
   */
  @javax.annotation.Nullable
  public StringFilter getStringFilter() {
    return stringFilter;
  }

  public void setStringFilter(StringFilter stringFilter) {
    this.stringFilter = stringFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filter filter = (Filter) o;
    return Objects.equals(this.betweenFilter, filter.betweenFilter) &&
        Objects.equals(this.fieldName, filter.fieldName) &&
        Objects.equals(this.inListFilter, filter.inListFilter) &&
        Objects.equals(this.numericFilter, filter.numericFilter) &&
        Objects.equals(this.stringFilter, filter.stringFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(betweenFilter, fieldName, inListFilter, numericFilter, stringFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filter {\n");
    sb.append("    betweenFilter: ").append(toIndentedString(betweenFilter)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    inListFilter: ").append(toIndentedString(inListFilter)).append("\n");
    sb.append("    numericFilter: ").append(toIndentedString(numericFilter)).append("\n");
    sb.append("    stringFilter: ").append(toIndentedString(stringFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("betweenFilter");
    openapiFields.add("fieldName");
    openapiFields.add("inListFilter");
    openapiFields.add("numericFilter");
    openapiFields.add("stringFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Filter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Filter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Filter is not found in the empty JSON string", Filter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Filter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Filter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `betweenFilter`
      if (jsonObj.get("betweenFilter") != null && !jsonObj.get("betweenFilter").isJsonNull()) {
        BetweenFilter.validateJsonElement(jsonObj.get("betweenFilter"));
      }
      if ((jsonObj.get("fieldName") != null && !jsonObj.get("fieldName").isJsonNull()) && !jsonObj.get("fieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldName").toString()));
      }
      // validate the optional field `inListFilter`
      if (jsonObj.get("inListFilter") != null && !jsonObj.get("inListFilter").isJsonNull()) {
        InListFilter.validateJsonElement(jsonObj.get("inListFilter"));
      }
      // validate the optional field `numericFilter`
      if (jsonObj.get("numericFilter") != null && !jsonObj.get("numericFilter").isJsonNull()) {
        NumericFilter.validateJsonElement(jsonObj.get("numericFilter"));
      }
      // validate the optional field `stringFilter`
      if (jsonObj.get("stringFilter") != null && !jsonObj.get("stringFilter").isJsonNull()) {
        StringFilter.validateJsonElement(jsonObj.get("stringFilter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Filter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Filter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Filter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Filter.class));

       return (TypeAdapter<T>) new TypeAdapter<Filter>() {
           @Override
           public void write(JsonWriter out, Filter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Filter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Filter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Filter
   * @throws IOException if the JSON string is invalid with respect to Filter
   */
  public static Filter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Filter.class);
  }

  /**
   * Convert an instance of Filter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

