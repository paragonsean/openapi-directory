/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the visible dimension columns and rows in the report response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pivot {
  public static final String SERIALIZED_NAME_FIELD_NAMES = "fieldNames";
  @SerializedName(SERIALIZED_NAME_FIELD_NAMES)
  private List<String> fieldNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private String limit;

  /**
   * Gets or Sets metricAggregations
   */
  @JsonAdapter(MetricAggregationsEnum.Adapter.class)
  public enum MetricAggregationsEnum {
    METRIC_AGGREGATION_UNSPECIFIED("METRIC_AGGREGATION_UNSPECIFIED"),
    
    TOTAL("TOTAL"),
    
    MINIMUM("MINIMUM"),
    
    MAXIMUM("MAXIMUM"),
    
    COUNT("COUNT");

    private String value;

    MetricAggregationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricAggregationsEnum fromValue(String value) {
      for (MetricAggregationsEnum b : MetricAggregationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricAggregationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricAggregationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricAggregationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricAggregationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricAggregationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRIC_AGGREGATIONS = "metricAggregations";
  @SerializedName(SERIALIZED_NAME_METRIC_AGGREGATIONS)
  private List<MetricAggregationsEnum> metricAggregations = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private String offset;

  public static final String SERIALIZED_NAME_ORDER_BYS = "orderBys";
  @SerializedName(SERIALIZED_NAME_ORDER_BYS)
  private List<OrderBy> orderBys = new ArrayList<>();

  public Pivot() {
  }

  public Pivot fieldNames(List<String> fieldNames) {
    this.fieldNames = fieldNames;
    return this;
  }

  public Pivot addFieldNamesItem(String fieldNamesItem) {
    if (this.fieldNames == null) {
      this.fieldNames = new ArrayList<>();
    }
    this.fieldNames.add(fieldNamesItem);
    return this;
  }

  /**
   * Dimension names for visible columns in the report response. Including \&quot;dateRange\&quot; produces a date range column; for each row in the response, dimension values in the date range column will indicate the corresponding date range from the request.
   * @return fieldNames
   */
  @javax.annotation.Nullable
  public List<String> getFieldNames() {
    return fieldNames;
  }

  public void setFieldNames(List<String> fieldNames) {
    this.fieldNames = fieldNames;
  }


  public Pivot limit(String limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of unique combinations of dimension values to return in this pivot. The &#x60;limit&#x60; parameter is required. A &#x60;limit&#x60; of 10,000 is common for single pivot requests. The product of the &#x60;limit&#x60; for each &#x60;pivot&#x60; in a &#x60;RunPivotReportRequest&#x60; must not exceed 250,000. For example, a two pivot request with &#x60;limit: 1000&#x60; in each pivot will fail because the product is &#x60;1,000,000&#x60;.
   * @return limit
   */
  @javax.annotation.Nullable
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }


  public Pivot metricAggregations(List<MetricAggregationsEnum> metricAggregations) {
    this.metricAggregations = metricAggregations;
    return this;
  }

  public Pivot addMetricAggregationsItem(MetricAggregationsEnum metricAggregationsItem) {
    if (this.metricAggregations == null) {
      this.metricAggregations = new ArrayList<>();
    }
    this.metricAggregations.add(metricAggregationsItem);
    return this;
  }

  /**
   * Aggregate the metrics by dimensions in this pivot using the specified metric_aggregations.
   * @return metricAggregations
   */
  @javax.annotation.Nullable
  public List<MetricAggregationsEnum> getMetricAggregations() {
    return metricAggregations;
  }

  public void setMetricAggregations(List<MetricAggregationsEnum> metricAggregations) {
    this.metricAggregations = metricAggregations;
  }


  public Pivot offset(String offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The row count of the start row. The first row is counted as row 0.
   * @return offset
   */
  @javax.annotation.Nullable
  public String getOffset() {
    return offset;
  }

  public void setOffset(String offset) {
    this.offset = offset;
  }


  public Pivot orderBys(List<OrderBy> orderBys) {
    this.orderBys = orderBys;
    return this;
  }

  public Pivot addOrderBysItem(OrderBy orderBysItem) {
    if (this.orderBys == null) {
      this.orderBys = new ArrayList<>();
    }
    this.orderBys.add(orderBysItem);
    return this;
  }

  /**
   * Specifies how dimensions are ordered in the pivot. In the first Pivot, the OrderBys determine Row and PivotDimensionHeader ordering; in subsequent Pivots, the OrderBys determine only PivotDimensionHeader ordering. Dimensions specified in these OrderBys must be a subset of Pivot.field_names.
   * @return orderBys
   */
  @javax.annotation.Nullable
  public List<OrderBy> getOrderBys() {
    return orderBys;
  }

  public void setOrderBys(List<OrderBy> orderBys) {
    this.orderBys = orderBys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pivot pivot = (Pivot) o;
    return Objects.equals(this.fieldNames, pivot.fieldNames) &&
        Objects.equals(this.limit, pivot.limit) &&
        Objects.equals(this.metricAggregations, pivot.metricAggregations) &&
        Objects.equals(this.offset, pivot.offset) &&
        Objects.equals(this.orderBys, pivot.orderBys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldNames, limit, metricAggregations, offset, orderBys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pivot {\n");
    sb.append("    fieldNames: ").append(toIndentedString(fieldNames)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    metricAggregations: ").append(toIndentedString(metricAggregations)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    orderBys: ").append(toIndentedString(orderBys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fieldNames");
    openapiFields.add("limit");
    openapiFields.add("metricAggregations");
    openapiFields.add("offset");
    openapiFields.add("orderBys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pivot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pivot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pivot is not found in the empty JSON string", Pivot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pivot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pivot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("fieldNames") != null && !jsonObj.get("fieldNames").isJsonNull() && !jsonObj.get("fieldNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldNames` to be an array in the JSON string but got `%s`", jsonObj.get("fieldNames").toString()));
      }
      if ((jsonObj.get("limit") != null && !jsonObj.get("limit").isJsonNull()) && !jsonObj.get("limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limit").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metricAggregations") != null && !jsonObj.get("metricAggregations").isJsonNull() && !jsonObj.get("metricAggregations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricAggregations` to be an array in the JSON string but got `%s`", jsonObj.get("metricAggregations").toString()));
      }
      if ((jsonObj.get("offset") != null && !jsonObj.get("offset").isJsonNull()) && !jsonObj.get("offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offset").toString()));
      }
      if (jsonObj.get("orderBys") != null && !jsonObj.get("orderBys").isJsonNull()) {
        JsonArray jsonArrayorderBys = jsonObj.getAsJsonArray("orderBys");
        if (jsonArrayorderBys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderBys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderBys` to be an array in the JSON string but got `%s`", jsonObj.get("orderBys").toString()));
          }

          // validate the optional field `orderBys` (array)
          for (int i = 0; i < jsonArrayorderBys.size(); i++) {
            OrderBy.validateJsonElement(jsonArrayorderBys.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pivot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pivot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pivot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pivot.class));

       return (TypeAdapter<T>) new TypeAdapter<Pivot>() {
           @Override
           public void write(JsonWriter out, Pivot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pivot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pivot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pivot
   * @throws IOException if the JSON string is invalid with respect to Pivot
   */
  public static Pivot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pivot.class);
  }

  /**
   * Convert an instance of Pivot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

