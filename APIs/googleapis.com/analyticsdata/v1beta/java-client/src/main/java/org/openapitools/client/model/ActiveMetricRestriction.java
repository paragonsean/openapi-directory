/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A metric actively restricted in creating the report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActiveMetricRestriction {
  public static final String SERIALIZED_NAME_METRIC_NAME = "metricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  /**
   * Gets or Sets restrictedMetricTypes
   */
  @JsonAdapter(RestrictedMetricTypesEnum.Adapter.class)
  public enum RestrictedMetricTypesEnum {
    RESTRICTED_METRIC_TYPE_UNSPECIFIED("RESTRICTED_METRIC_TYPE_UNSPECIFIED"),
    
    COST_DATA("COST_DATA"),
    
    REVENUE_DATA("REVENUE_DATA");

    private String value;

    RestrictedMetricTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestrictedMetricTypesEnum fromValue(String value) {
      for (RestrictedMetricTypesEnum b : RestrictedMetricTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestrictedMetricTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestrictedMetricTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestrictedMetricTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestrictedMetricTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestrictedMetricTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTRICTED_METRIC_TYPES = "restrictedMetricTypes";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_METRIC_TYPES)
  private List<RestrictedMetricTypesEnum> restrictedMetricTypes = new ArrayList<>();

  public ActiveMetricRestriction() {
  }

  public ActiveMetricRestriction metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * The name of the restricted metric.
   * @return metricName
   */
  @javax.annotation.Nullable
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public ActiveMetricRestriction restrictedMetricTypes(List<RestrictedMetricTypesEnum> restrictedMetricTypes) {
    this.restrictedMetricTypes = restrictedMetricTypes;
    return this;
  }

  public ActiveMetricRestriction addRestrictedMetricTypesItem(RestrictedMetricTypesEnum restrictedMetricTypesItem) {
    if (this.restrictedMetricTypes == null) {
      this.restrictedMetricTypes = new ArrayList<>();
    }
    this.restrictedMetricTypes.add(restrictedMetricTypesItem);
    return this;
  }

  /**
   * The reason for this metric&#39;s restriction.
   * @return restrictedMetricTypes
   */
  @javax.annotation.Nullable
  public List<RestrictedMetricTypesEnum> getRestrictedMetricTypes() {
    return restrictedMetricTypes;
  }

  public void setRestrictedMetricTypes(List<RestrictedMetricTypesEnum> restrictedMetricTypes) {
    this.restrictedMetricTypes = restrictedMetricTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActiveMetricRestriction activeMetricRestriction = (ActiveMetricRestriction) o;
    return Objects.equals(this.metricName, activeMetricRestriction.metricName) &&
        Objects.equals(this.restrictedMetricTypes, activeMetricRestriction.restrictedMetricTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricName, restrictedMetricTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActiveMetricRestriction {\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    restrictedMetricTypes: ").append(toIndentedString(restrictedMetricTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metricName");
    openapiFields.add("restrictedMetricTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActiveMetricRestriction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActiveMetricRestriction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActiveMetricRestriction is not found in the empty JSON string", ActiveMetricRestriction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActiveMetricRestriction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActiveMetricRestriction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("metricName") != null && !jsonObj.get("metricName").isJsonNull()) && !jsonObj.get("metricName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restrictedMetricTypes") != null && !jsonObj.get("restrictedMetricTypes").isJsonNull() && !jsonObj.get("restrictedMetricTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedMetricTypes` to be an array in the JSON string but got `%s`", jsonObj.get("restrictedMetricTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActiveMetricRestriction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActiveMetricRestriction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActiveMetricRestriction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActiveMetricRestriction.class));

       return (TypeAdapter<T>) new TypeAdapter<ActiveMetricRestriction>() {
           @Override
           public void write(JsonWriter out, ActiveMetricRestriction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActiveMetricRestriction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActiveMetricRestriction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActiveMetricRestriction
   * @throws IOException if the JSON string is invalid with respect to ActiveMetricRestriction
   */
  public static ActiveMetricRestriction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActiveMetricRestriction.class);
  }

  /**
   * Convert an instance of ActiveMetricRestriction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

