/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Used to combine dimension values to a single dimension.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConcatenateExpression {
  public static final String SERIALIZED_NAME_DELIMITER = "delimiter";
  @SerializedName(SERIALIZED_NAME_DELIMITER)
  private String delimiter;

  public static final String SERIALIZED_NAME_DIMENSION_NAMES = "dimensionNames";
  @SerializedName(SERIALIZED_NAME_DIMENSION_NAMES)
  private List<String> dimensionNames = new ArrayList<>();

  public ConcatenateExpression() {
  }

  public ConcatenateExpression delimiter(String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

  /**
   * The delimiter placed between dimension names. Delimiters are often single characters such as \&quot;|\&quot; or \&quot;,\&quot; but can be longer strings. If a dimension value contains the delimiter, both will be present in response with no distinction. For example if dimension 1 value &#x3D; \&quot;US,FR\&quot;, dimension 2 value &#x3D; \&quot;JP\&quot;, and delimiter &#x3D; \&quot;,\&quot;, then the response will contain \&quot;US,FR,JP\&quot;.
   * @return delimiter
   */
  @javax.annotation.Nullable
  public String getDelimiter() {
    return delimiter;
  }

  public void setDelimiter(String delimiter) {
    this.delimiter = delimiter;
  }


  public ConcatenateExpression dimensionNames(List<String> dimensionNames) {
    this.dimensionNames = dimensionNames;
    return this;
  }

  public ConcatenateExpression addDimensionNamesItem(String dimensionNamesItem) {
    if (this.dimensionNames == null) {
      this.dimensionNames = new ArrayList<>();
    }
    this.dimensionNames.add(dimensionNamesItem);
    return this;
  }

  /**
   * Names of dimensions. The names must refer back to names in the dimensions field of the request.
   * @return dimensionNames
   */
  @javax.annotation.Nullable
  public List<String> getDimensionNames() {
    return dimensionNames;
  }

  public void setDimensionNames(List<String> dimensionNames) {
    this.dimensionNames = dimensionNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConcatenateExpression concatenateExpression = (ConcatenateExpression) o;
    return Objects.equals(this.delimiter, concatenateExpression.delimiter) &&
        Objects.equals(this.dimensionNames, concatenateExpression.dimensionNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delimiter, dimensionNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConcatenateExpression {\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    dimensionNames: ").append(toIndentedString(dimensionNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delimiter");
    openapiFields.add("dimensionNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConcatenateExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConcatenateExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConcatenateExpression is not found in the empty JSON string", ConcatenateExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConcatenateExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConcatenateExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delimiter") != null && !jsonObj.get("delimiter").isJsonNull()) && !jsonObj.get("delimiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delimiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delimiter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dimensionNames") != null && !jsonObj.get("dimensionNames").isJsonNull() && !jsonObj.get("dimensionNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensionNames` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConcatenateExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConcatenateExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConcatenateExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConcatenateExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<ConcatenateExpression>() {
           @Override
           public void write(JsonWriter out, ConcatenateExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConcatenateExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConcatenateExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConcatenateExpression
   * @throws IOException if the JSON string is invalid with respect to ConcatenateExpression
   */
  public static ConcatenateExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConcatenateExpression.class);
  }

  /**
   * Convert an instance of ConcatenateExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

