/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If this report results is [sampled](https://support.google.com/analytics/answer/13331292), this describes the percentage of events used in this report. Sampling is the practice of analyzing a subset of all data in order to uncover the meaningful information in the larger data set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SamplingMetadata {
  public static final String SERIALIZED_NAME_SAMPLES_READ_COUNT = "samplesReadCount";
  @SerializedName(SERIALIZED_NAME_SAMPLES_READ_COUNT)
  private String samplesReadCount;

  public static final String SERIALIZED_NAME_SAMPLING_SPACE_SIZE = "samplingSpaceSize";
  @SerializedName(SERIALIZED_NAME_SAMPLING_SPACE_SIZE)
  private String samplingSpaceSize;

  public SamplingMetadata() {
  }

  public SamplingMetadata samplesReadCount(String samplesReadCount) {
    this.samplesReadCount = samplesReadCount;
    return this;
  }

  /**
   * The total number of events read in this sampled report for a date range. This is the size of the subset this property&#39;s data that was analyzed in this report.
   * @return samplesReadCount
   */
  @javax.annotation.Nullable
  public String getSamplesReadCount() {
    return samplesReadCount;
  }

  public void setSamplesReadCount(String samplesReadCount) {
    this.samplesReadCount = samplesReadCount;
  }


  public SamplingMetadata samplingSpaceSize(String samplingSpaceSize) {
    this.samplingSpaceSize = samplingSpaceSize;
    return this;
  }

  /**
   * The total number of events present in this property&#39;s data that could have been analyzed in this report for a date range. Sampling uncovers the meaningful information about the larger data set, and this is the size of the larger data set. To calculate the percentage of available data that was used in this report, compute &#x60;samplesReadCount/samplingSpaceSize&#x60;.
   * @return samplingSpaceSize
   */
  @javax.annotation.Nullable
  public String getSamplingSpaceSize() {
    return samplingSpaceSize;
  }

  public void setSamplingSpaceSize(String samplingSpaceSize) {
    this.samplingSpaceSize = samplingSpaceSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SamplingMetadata samplingMetadata = (SamplingMetadata) o;
    return Objects.equals(this.samplesReadCount, samplingMetadata.samplesReadCount) &&
        Objects.equals(this.samplingSpaceSize, samplingMetadata.samplingSpaceSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(samplesReadCount, samplingSpaceSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SamplingMetadata {\n");
    sb.append("    samplesReadCount: ").append(toIndentedString(samplesReadCount)).append("\n");
    sb.append("    samplingSpaceSize: ").append(toIndentedString(samplingSpaceSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("samplesReadCount");
    openapiFields.add("samplingSpaceSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SamplingMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SamplingMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SamplingMetadata is not found in the empty JSON string", SamplingMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SamplingMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SamplingMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("samplesReadCount") != null && !jsonObj.get("samplesReadCount").isJsonNull()) && !jsonObj.get("samplesReadCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samplesReadCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samplesReadCount").toString()));
      }
      if ((jsonObj.get("samplingSpaceSize") != null && !jsonObj.get("samplingSpaceSize").isJsonNull()) && !jsonObj.get("samplingSpaceSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samplingSpaceSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samplingSpaceSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SamplingMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SamplingMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SamplingMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SamplingMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<SamplingMetadata>() {
           @Override
           public void write(JsonWriter out, SamplingMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SamplingMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SamplingMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SamplingMetadata
   * @throws IOException if the JSON string is invalid with respect to SamplingMetadata
   */
  public static SamplingMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SamplingMetadata.class);
  }

  /**
   * Convert an instance of SamplingMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

