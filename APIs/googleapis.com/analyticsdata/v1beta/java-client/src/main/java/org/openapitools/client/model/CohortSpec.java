/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Cohort;
import org.openapitools.client.model.CohortReportSettings;
import org.openapitools.client.model.CohortsRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The specification of cohorts for a cohort report. Cohort reports create a time series of user retention for the cohort. For example, you could select the cohort of users that were acquired in the first week of September and follow that cohort for the next six weeks. Selecting the users acquired in the first week of September cohort is specified in the &#x60;cohort&#x60; object. Following that cohort for the next six weeks is specified in the &#x60;cohortsRange&#x60; object. For examples, see [Cohort Report Examples](https://developers.google.com/analytics/devguides/reporting/data/v1/advanced#cohort_report_examples). The report response could show a weekly time series where say your app has retained 60% of this cohort after three weeks and 25% of this cohort after six weeks. These two percentages can be calculated by the metric &#x60;cohortActiveUsers/cohortTotalUsers&#x60; and will be separate rows in the report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CohortSpec {
  public static final String SERIALIZED_NAME_COHORT_REPORT_SETTINGS = "cohortReportSettings";
  @SerializedName(SERIALIZED_NAME_COHORT_REPORT_SETTINGS)
  private CohortReportSettings cohortReportSettings;

  public static final String SERIALIZED_NAME_COHORTS = "cohorts";
  @SerializedName(SERIALIZED_NAME_COHORTS)
  private List<Cohort> cohorts = new ArrayList<>();

  public static final String SERIALIZED_NAME_COHORTS_RANGE = "cohortsRange";
  @SerializedName(SERIALIZED_NAME_COHORTS_RANGE)
  private CohortsRange cohortsRange;

  public CohortSpec() {
  }

  public CohortSpec cohortReportSettings(CohortReportSettings cohortReportSettings) {
    this.cohortReportSettings = cohortReportSettings;
    return this;
  }

  /**
   * Get cohortReportSettings
   * @return cohortReportSettings
   */
  @javax.annotation.Nullable
  public CohortReportSettings getCohortReportSettings() {
    return cohortReportSettings;
  }

  public void setCohortReportSettings(CohortReportSettings cohortReportSettings) {
    this.cohortReportSettings = cohortReportSettings;
  }


  public CohortSpec cohorts(List<Cohort> cohorts) {
    this.cohorts = cohorts;
    return this;
  }

  public CohortSpec addCohortsItem(Cohort cohortsItem) {
    if (this.cohorts == null) {
      this.cohorts = new ArrayList<>();
    }
    this.cohorts.add(cohortsItem);
    return this;
  }

  /**
   * Defines the selection criteria to group users into cohorts. Most cohort reports define only a single cohort. If multiple cohorts are specified, each cohort can be recognized in the report by their name.
   * @return cohorts
   */
  @javax.annotation.Nullable
  public List<Cohort> getCohorts() {
    return cohorts;
  }

  public void setCohorts(List<Cohort> cohorts) {
    this.cohorts = cohorts;
  }


  public CohortSpec cohortsRange(CohortsRange cohortsRange) {
    this.cohortsRange = cohortsRange;
    return this;
  }

  /**
   * Get cohortsRange
   * @return cohortsRange
   */
  @javax.annotation.Nullable
  public CohortsRange getCohortsRange() {
    return cohortsRange;
  }

  public void setCohortsRange(CohortsRange cohortsRange) {
    this.cohortsRange = cohortsRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CohortSpec cohortSpec = (CohortSpec) o;
    return Objects.equals(this.cohortReportSettings, cohortSpec.cohortReportSettings) &&
        Objects.equals(this.cohorts, cohortSpec.cohorts) &&
        Objects.equals(this.cohortsRange, cohortSpec.cohortsRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cohortReportSettings, cohorts, cohortsRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CohortSpec {\n");
    sb.append("    cohortReportSettings: ").append(toIndentedString(cohortReportSettings)).append("\n");
    sb.append("    cohorts: ").append(toIndentedString(cohorts)).append("\n");
    sb.append("    cohortsRange: ").append(toIndentedString(cohortsRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cohortReportSettings");
    openapiFields.add("cohorts");
    openapiFields.add("cohortsRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CohortSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CohortSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CohortSpec is not found in the empty JSON string", CohortSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CohortSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CohortSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cohortReportSettings`
      if (jsonObj.get("cohortReportSettings") != null && !jsonObj.get("cohortReportSettings").isJsonNull()) {
        CohortReportSettings.validateJsonElement(jsonObj.get("cohortReportSettings"));
      }
      if (jsonObj.get("cohorts") != null && !jsonObj.get("cohorts").isJsonNull()) {
        JsonArray jsonArraycohorts = jsonObj.getAsJsonArray("cohorts");
        if (jsonArraycohorts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cohorts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cohorts` to be an array in the JSON string but got `%s`", jsonObj.get("cohorts").toString()));
          }

          // validate the optional field `cohorts` (array)
          for (int i = 0; i < jsonArraycohorts.size(); i++) {
            Cohort.validateJsonElement(jsonArraycohorts.get(i));
          };
        }
      }
      // validate the optional field `cohortsRange`
      if (jsonObj.get("cohortsRange") != null && !jsonObj.get("cohortsRange").isJsonNull()) {
        CohortsRange.validateJsonElement(jsonObj.get("cohortsRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CohortSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CohortSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CohortSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CohortSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<CohortSpec>() {
           @Override
           public void write(JsonWriter out, CohortSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CohortSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CohortSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CohortSpec
   * @throws IOException if the JSON string is invalid with respect to CohortSpec
   */
  public static CohortSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CohortSpec.class);
  }

  /**
   * Convert an instance of CohortSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

