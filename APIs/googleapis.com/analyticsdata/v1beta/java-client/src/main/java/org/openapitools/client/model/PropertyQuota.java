/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.QuotaStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Current state of all quotas for this Analytics Property. If any quota for a property is exhausted, all requests to that property will return Resource Exhausted errors.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PropertyQuota {
  public static final String SERIALIZED_NAME_CONCURRENT_REQUESTS = "concurrentRequests";
  @SerializedName(SERIALIZED_NAME_CONCURRENT_REQUESTS)
  private QuotaStatus concurrentRequests;

  public static final String SERIALIZED_NAME_POTENTIALLY_THRESHOLDED_REQUESTS_PER_HOUR = "potentiallyThresholdedRequestsPerHour";
  @SerializedName(SERIALIZED_NAME_POTENTIALLY_THRESHOLDED_REQUESTS_PER_HOUR)
  private QuotaStatus potentiallyThresholdedRequestsPerHour;

  public static final String SERIALIZED_NAME_SERVER_ERRORS_PER_PROJECT_PER_HOUR = "serverErrorsPerProjectPerHour";
  @SerializedName(SERIALIZED_NAME_SERVER_ERRORS_PER_PROJECT_PER_HOUR)
  private QuotaStatus serverErrorsPerProjectPerHour;

  public static final String SERIALIZED_NAME_TOKENS_PER_DAY = "tokensPerDay";
  @SerializedName(SERIALIZED_NAME_TOKENS_PER_DAY)
  private QuotaStatus tokensPerDay;

  public static final String SERIALIZED_NAME_TOKENS_PER_HOUR = "tokensPerHour";
  @SerializedName(SERIALIZED_NAME_TOKENS_PER_HOUR)
  private QuotaStatus tokensPerHour;

  public static final String SERIALIZED_NAME_TOKENS_PER_PROJECT_PER_HOUR = "tokensPerProjectPerHour";
  @SerializedName(SERIALIZED_NAME_TOKENS_PER_PROJECT_PER_HOUR)
  private QuotaStatus tokensPerProjectPerHour;

  public PropertyQuota() {
  }

  public PropertyQuota concurrentRequests(QuotaStatus concurrentRequests) {
    this.concurrentRequests = concurrentRequests;
    return this;
  }

  /**
   * Get concurrentRequests
   * @return concurrentRequests
   */
  @javax.annotation.Nullable
  public QuotaStatus getConcurrentRequests() {
    return concurrentRequests;
  }

  public void setConcurrentRequests(QuotaStatus concurrentRequests) {
    this.concurrentRequests = concurrentRequests;
  }


  public PropertyQuota potentiallyThresholdedRequestsPerHour(QuotaStatus potentiallyThresholdedRequestsPerHour) {
    this.potentiallyThresholdedRequestsPerHour = potentiallyThresholdedRequestsPerHour;
    return this;
  }

  /**
   * Get potentiallyThresholdedRequestsPerHour
   * @return potentiallyThresholdedRequestsPerHour
   */
  @javax.annotation.Nullable
  public QuotaStatus getPotentiallyThresholdedRequestsPerHour() {
    return potentiallyThresholdedRequestsPerHour;
  }

  public void setPotentiallyThresholdedRequestsPerHour(QuotaStatus potentiallyThresholdedRequestsPerHour) {
    this.potentiallyThresholdedRequestsPerHour = potentiallyThresholdedRequestsPerHour;
  }


  public PropertyQuota serverErrorsPerProjectPerHour(QuotaStatus serverErrorsPerProjectPerHour) {
    this.serverErrorsPerProjectPerHour = serverErrorsPerProjectPerHour;
    return this;
  }

  /**
   * Get serverErrorsPerProjectPerHour
   * @return serverErrorsPerProjectPerHour
   */
  @javax.annotation.Nullable
  public QuotaStatus getServerErrorsPerProjectPerHour() {
    return serverErrorsPerProjectPerHour;
  }

  public void setServerErrorsPerProjectPerHour(QuotaStatus serverErrorsPerProjectPerHour) {
    this.serverErrorsPerProjectPerHour = serverErrorsPerProjectPerHour;
  }


  public PropertyQuota tokensPerDay(QuotaStatus tokensPerDay) {
    this.tokensPerDay = tokensPerDay;
    return this;
  }

  /**
   * Get tokensPerDay
   * @return tokensPerDay
   */
  @javax.annotation.Nullable
  public QuotaStatus getTokensPerDay() {
    return tokensPerDay;
  }

  public void setTokensPerDay(QuotaStatus tokensPerDay) {
    this.tokensPerDay = tokensPerDay;
  }


  public PropertyQuota tokensPerHour(QuotaStatus tokensPerHour) {
    this.tokensPerHour = tokensPerHour;
    return this;
  }

  /**
   * Get tokensPerHour
   * @return tokensPerHour
   */
  @javax.annotation.Nullable
  public QuotaStatus getTokensPerHour() {
    return tokensPerHour;
  }

  public void setTokensPerHour(QuotaStatus tokensPerHour) {
    this.tokensPerHour = tokensPerHour;
  }


  public PropertyQuota tokensPerProjectPerHour(QuotaStatus tokensPerProjectPerHour) {
    this.tokensPerProjectPerHour = tokensPerProjectPerHour;
    return this;
  }

  /**
   * Get tokensPerProjectPerHour
   * @return tokensPerProjectPerHour
   */
  @javax.annotation.Nullable
  public QuotaStatus getTokensPerProjectPerHour() {
    return tokensPerProjectPerHour;
  }

  public void setTokensPerProjectPerHour(QuotaStatus tokensPerProjectPerHour) {
    this.tokensPerProjectPerHour = tokensPerProjectPerHour;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyQuota propertyQuota = (PropertyQuota) o;
    return Objects.equals(this.concurrentRequests, propertyQuota.concurrentRequests) &&
        Objects.equals(this.potentiallyThresholdedRequestsPerHour, propertyQuota.potentiallyThresholdedRequestsPerHour) &&
        Objects.equals(this.serverErrorsPerProjectPerHour, propertyQuota.serverErrorsPerProjectPerHour) &&
        Objects.equals(this.tokensPerDay, propertyQuota.tokensPerDay) &&
        Objects.equals(this.tokensPerHour, propertyQuota.tokensPerHour) &&
        Objects.equals(this.tokensPerProjectPerHour, propertyQuota.tokensPerProjectPerHour);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concurrentRequests, potentiallyThresholdedRequestsPerHour, serverErrorsPerProjectPerHour, tokensPerDay, tokensPerHour, tokensPerProjectPerHour);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyQuota {\n");
    sb.append("    concurrentRequests: ").append(toIndentedString(concurrentRequests)).append("\n");
    sb.append("    potentiallyThresholdedRequestsPerHour: ").append(toIndentedString(potentiallyThresholdedRequestsPerHour)).append("\n");
    sb.append("    serverErrorsPerProjectPerHour: ").append(toIndentedString(serverErrorsPerProjectPerHour)).append("\n");
    sb.append("    tokensPerDay: ").append(toIndentedString(tokensPerDay)).append("\n");
    sb.append("    tokensPerHour: ").append(toIndentedString(tokensPerHour)).append("\n");
    sb.append("    tokensPerProjectPerHour: ").append(toIndentedString(tokensPerProjectPerHour)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("concurrentRequests");
    openapiFields.add("potentiallyThresholdedRequestsPerHour");
    openapiFields.add("serverErrorsPerProjectPerHour");
    openapiFields.add("tokensPerDay");
    openapiFields.add("tokensPerHour");
    openapiFields.add("tokensPerProjectPerHour");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PropertyQuota
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyQuota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyQuota is not found in the empty JSON string", PropertyQuota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropertyQuota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyQuota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `concurrentRequests`
      if (jsonObj.get("concurrentRequests") != null && !jsonObj.get("concurrentRequests").isJsonNull()) {
        QuotaStatus.validateJsonElement(jsonObj.get("concurrentRequests"));
      }
      // validate the optional field `potentiallyThresholdedRequestsPerHour`
      if (jsonObj.get("potentiallyThresholdedRequestsPerHour") != null && !jsonObj.get("potentiallyThresholdedRequestsPerHour").isJsonNull()) {
        QuotaStatus.validateJsonElement(jsonObj.get("potentiallyThresholdedRequestsPerHour"));
      }
      // validate the optional field `serverErrorsPerProjectPerHour`
      if (jsonObj.get("serverErrorsPerProjectPerHour") != null && !jsonObj.get("serverErrorsPerProjectPerHour").isJsonNull()) {
        QuotaStatus.validateJsonElement(jsonObj.get("serverErrorsPerProjectPerHour"));
      }
      // validate the optional field `tokensPerDay`
      if (jsonObj.get("tokensPerDay") != null && !jsonObj.get("tokensPerDay").isJsonNull()) {
        QuotaStatus.validateJsonElement(jsonObj.get("tokensPerDay"));
      }
      // validate the optional field `tokensPerHour`
      if (jsonObj.get("tokensPerHour") != null && !jsonObj.get("tokensPerHour").isJsonNull()) {
        QuotaStatus.validateJsonElement(jsonObj.get("tokensPerHour"));
      }
      // validate the optional field `tokensPerProjectPerHour`
      if (jsonObj.get("tokensPerProjectPerHour") != null && !jsonObj.get("tokensPerProjectPerHour").isJsonNull()) {
        QuotaStatus.validateJsonElement(jsonObj.get("tokensPerProjectPerHour"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyQuota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyQuota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyQuota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyQuota.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyQuota>() {
           @Override
           public void write(JsonWriter out, PropertyQuota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyQuota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PropertyQuota given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PropertyQuota
   * @throws IOException if the JSON string is invalid with respect to PropertyQuota
   */
  public static PropertyQuota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyQuota.class);
  }

  /**
   * Convert an instance of PropertyQuota to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

