/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CaseExpression;
import org.openapitools.client.model.ConcatenateExpression;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Used to express a dimension which is the result of a formula of multiple dimensions. Example usages: 1) lower_case(dimension) 2) concatenate(dimension1, symbol, dimension2).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DimensionExpression {
  public static final String SERIALIZED_NAME_CONCATENATE = "concatenate";
  @SerializedName(SERIALIZED_NAME_CONCATENATE)
  private ConcatenateExpression concatenate;

  public static final String SERIALIZED_NAME_LOWER_CASE = "lowerCase";
  @SerializedName(SERIALIZED_NAME_LOWER_CASE)
  private CaseExpression lowerCase;

  public static final String SERIALIZED_NAME_UPPER_CASE = "upperCase";
  @SerializedName(SERIALIZED_NAME_UPPER_CASE)
  private CaseExpression upperCase;

  public DimensionExpression() {
  }

  public DimensionExpression concatenate(ConcatenateExpression concatenate) {
    this.concatenate = concatenate;
    return this;
  }

  /**
   * Get concatenate
   * @return concatenate
   */
  @javax.annotation.Nullable
  public ConcatenateExpression getConcatenate() {
    return concatenate;
  }

  public void setConcatenate(ConcatenateExpression concatenate) {
    this.concatenate = concatenate;
  }


  public DimensionExpression lowerCase(CaseExpression lowerCase) {
    this.lowerCase = lowerCase;
    return this;
  }

  /**
   * Get lowerCase
   * @return lowerCase
   */
  @javax.annotation.Nullable
  public CaseExpression getLowerCase() {
    return lowerCase;
  }

  public void setLowerCase(CaseExpression lowerCase) {
    this.lowerCase = lowerCase;
  }


  public DimensionExpression upperCase(CaseExpression upperCase) {
    this.upperCase = upperCase;
    return this;
  }

  /**
   * Get upperCase
   * @return upperCase
   */
  @javax.annotation.Nullable
  public CaseExpression getUpperCase() {
    return upperCase;
  }

  public void setUpperCase(CaseExpression upperCase) {
    this.upperCase = upperCase;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DimensionExpression dimensionExpression = (DimensionExpression) o;
    return Objects.equals(this.concatenate, dimensionExpression.concatenate) &&
        Objects.equals(this.lowerCase, dimensionExpression.lowerCase) &&
        Objects.equals(this.upperCase, dimensionExpression.upperCase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concatenate, lowerCase, upperCase);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DimensionExpression {\n");
    sb.append("    concatenate: ").append(toIndentedString(concatenate)).append("\n");
    sb.append("    lowerCase: ").append(toIndentedString(lowerCase)).append("\n");
    sb.append("    upperCase: ").append(toIndentedString(upperCase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("concatenate");
    openapiFields.add("lowerCase");
    openapiFields.add("upperCase");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DimensionExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DimensionExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DimensionExpression is not found in the empty JSON string", DimensionExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DimensionExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DimensionExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `concatenate`
      if (jsonObj.get("concatenate") != null && !jsonObj.get("concatenate").isJsonNull()) {
        ConcatenateExpression.validateJsonElement(jsonObj.get("concatenate"));
      }
      // validate the optional field `lowerCase`
      if (jsonObj.get("lowerCase") != null && !jsonObj.get("lowerCase").isJsonNull()) {
        CaseExpression.validateJsonElement(jsonObj.get("lowerCase"));
      }
      // validate the optional field `upperCase`
      if (jsonObj.get("upperCase") != null && !jsonObj.get("upperCase").isJsonNull()) {
        CaseExpression.validateJsonElement(jsonObj.get("upperCase"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DimensionExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DimensionExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DimensionExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DimensionExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<DimensionExpression>() {
           @Override
           public void write(JsonWriter out, DimensionExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DimensionExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DimensionExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DimensionExpression
   * @throws IOException if the JSON string is invalid with respect to DimensionExpression
   */
  public static DimensionExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DimensionExpression.class);
  }

  /**
   * Convert an instance of DimensionExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

