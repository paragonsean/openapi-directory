/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PivotSelection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sorts by a pivot column group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PivotOrderBy {
  public static final String SERIALIZED_NAME_METRIC_NAME = "metricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_PIVOT_SELECTIONS = "pivotSelections";
  @SerializedName(SERIALIZED_NAME_PIVOT_SELECTIONS)
  private List<PivotSelection> pivotSelections = new ArrayList<>();

  public PivotOrderBy() {
  }

  public PivotOrderBy metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * In the response to order by, order rows by this column. Must be a metric name from the request.
   * @return metricName
   */
  @javax.annotation.Nullable
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public PivotOrderBy pivotSelections(List<PivotSelection> pivotSelections) {
    this.pivotSelections = pivotSelections;
    return this;
  }

  public PivotOrderBy addPivotSelectionsItem(PivotSelection pivotSelectionsItem) {
    if (this.pivotSelections == null) {
      this.pivotSelections = new ArrayList<>();
    }
    this.pivotSelections.add(pivotSelectionsItem);
    return this;
  }

  /**
   * Used to select a dimension name and value pivot. If multiple pivot selections are given, the sort occurs on rows where all pivot selection dimension name and value pairs match the row&#39;s dimension name and value pair.
   * @return pivotSelections
   */
  @javax.annotation.Nullable
  public List<PivotSelection> getPivotSelections() {
    return pivotSelections;
  }

  public void setPivotSelections(List<PivotSelection> pivotSelections) {
    this.pivotSelections = pivotSelections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PivotOrderBy pivotOrderBy = (PivotOrderBy) o;
    return Objects.equals(this.metricName, pivotOrderBy.metricName) &&
        Objects.equals(this.pivotSelections, pivotOrderBy.pivotSelections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricName, pivotSelections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PivotOrderBy {\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    pivotSelections: ").append(toIndentedString(pivotSelections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metricName");
    openapiFields.add("pivotSelections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PivotOrderBy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PivotOrderBy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PivotOrderBy is not found in the empty JSON string", PivotOrderBy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PivotOrderBy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PivotOrderBy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("metricName") != null && !jsonObj.get("metricName").isJsonNull()) && !jsonObj.get("metricName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricName").toString()));
      }
      if (jsonObj.get("pivotSelections") != null && !jsonObj.get("pivotSelections").isJsonNull()) {
        JsonArray jsonArraypivotSelections = jsonObj.getAsJsonArray("pivotSelections");
        if (jsonArraypivotSelections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pivotSelections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pivotSelections` to be an array in the JSON string but got `%s`", jsonObj.get("pivotSelections").toString()));
          }

          // validate the optional field `pivotSelections` (array)
          for (int i = 0; i < jsonArraypivotSelections.size(); i++) {
            PivotSelection.validateJsonElement(jsonArraypivotSelections.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PivotOrderBy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PivotOrderBy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PivotOrderBy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PivotOrderBy.class));

       return (TypeAdapter<T>) new TypeAdapter<PivotOrderBy>() {
           @Override
           public void write(JsonWriter out, PivotOrderBy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PivotOrderBy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PivotOrderBy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PivotOrderBy
   * @throws IOException if the JSON string is invalid with respect to PivotOrderBy
   */
  public static PivotOrderBy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PivotOrderBy.class);
  }

  /**
   * Convert an instance of PivotOrderBy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

