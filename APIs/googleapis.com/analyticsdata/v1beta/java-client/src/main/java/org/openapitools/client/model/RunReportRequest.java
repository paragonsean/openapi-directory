/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CohortSpec;
import org.openapitools.client.model.DateRange;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.FilterExpression;
import org.openapitools.client.model.Metric;
import org.openapitools.client.model.OrderBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request to generate a report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunReportRequest {
  public static final String SERIALIZED_NAME_COHORT_SPEC = "cohortSpec";
  @SerializedName(SERIALIZED_NAME_COHORT_SPEC)
  private CohortSpec cohortSpec;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DATE_RANGES = "dateRanges";
  @SerializedName(SERIALIZED_NAME_DATE_RANGES)
  private List<DateRange> dateRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIMENSION_FILTER = "dimensionFilter";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTER)
  private FilterExpression dimensionFilter;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<Dimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEEP_EMPTY_ROWS = "keepEmptyRows";
  @SerializedName(SERIALIZED_NAME_KEEP_EMPTY_ROWS)
  private Boolean keepEmptyRows;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private String limit;

  /**
   * Gets or Sets metricAggregations
   */
  @JsonAdapter(MetricAggregationsEnum.Adapter.class)
  public enum MetricAggregationsEnum {
    METRIC_AGGREGATION_UNSPECIFIED("METRIC_AGGREGATION_UNSPECIFIED"),
    
    TOTAL("TOTAL"),
    
    MINIMUM("MINIMUM"),
    
    MAXIMUM("MAXIMUM"),
    
    COUNT("COUNT");

    private String value;

    MetricAggregationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricAggregationsEnum fromValue(String value) {
      for (MetricAggregationsEnum b : MetricAggregationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricAggregationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricAggregationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricAggregationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricAggregationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricAggregationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRIC_AGGREGATIONS = "metricAggregations";
  @SerializedName(SERIALIZED_NAME_METRIC_AGGREGATIONS)
  private List<MetricAggregationsEnum> metricAggregations = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_FILTER = "metricFilter";
  @SerializedName(SERIALIZED_NAME_METRIC_FILTER)
  private FilterExpression metricFilter;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<Metric> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private String offset;

  public static final String SERIALIZED_NAME_ORDER_BYS = "orderBys";
  @SerializedName(SERIALIZED_NAME_ORDER_BYS)
  private List<OrderBy> orderBys = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTY = "property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private String property;

  public static final String SERIALIZED_NAME_RETURN_PROPERTY_QUOTA = "returnPropertyQuota";
  @SerializedName(SERIALIZED_NAME_RETURN_PROPERTY_QUOTA)
  private Boolean returnPropertyQuota;

  public RunReportRequest() {
  }

  public RunReportRequest cohortSpec(CohortSpec cohortSpec) {
    this.cohortSpec = cohortSpec;
    return this;
  }

  /**
   * Get cohortSpec
   * @return cohortSpec
   */
  @javax.annotation.Nullable
  public CohortSpec getCohortSpec() {
    return cohortSpec;
  }

  public void setCohortSpec(CohortSpec cohortSpec) {
    this.cohortSpec = cohortSpec;
  }


  public RunReportRequest currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * A currency code in ISO4217 format, such as \&quot;AED\&quot;, \&quot;USD\&quot;, \&quot;JPY\&quot;. If the field is empty, the report uses the property&#39;s default currency.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public RunReportRequest dateRanges(List<DateRange> dateRanges) {
    this.dateRanges = dateRanges;
    return this;
  }

  public RunReportRequest addDateRangesItem(DateRange dateRangesItem) {
    if (this.dateRanges == null) {
      this.dateRanges = new ArrayList<>();
    }
    this.dateRanges.add(dateRangesItem);
    return this;
  }

  /**
   * Date ranges of data to read. If multiple date ranges are requested, each response row will contain a zero based date range index. If two date ranges overlap, the event data for the overlapping days is included in the response rows for both date ranges. In a cohort request, this &#x60;dateRanges&#x60; must be unspecified.
   * @return dateRanges
   */
  @javax.annotation.Nullable
  public List<DateRange> getDateRanges() {
    return dateRanges;
  }

  public void setDateRanges(List<DateRange> dateRanges) {
    this.dateRanges = dateRanges;
  }


  public RunReportRequest dimensionFilter(FilterExpression dimensionFilter) {
    this.dimensionFilter = dimensionFilter;
    return this;
  }

  /**
   * Get dimensionFilter
   * @return dimensionFilter
   */
  @javax.annotation.Nullable
  public FilterExpression getDimensionFilter() {
    return dimensionFilter;
  }

  public void setDimensionFilter(FilterExpression dimensionFilter) {
    this.dimensionFilter = dimensionFilter;
  }


  public RunReportRequest dimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public RunReportRequest addDimensionsItem(Dimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * The dimensions requested and displayed.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<Dimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
  }


  public RunReportRequest keepEmptyRows(Boolean keepEmptyRows) {
    this.keepEmptyRows = keepEmptyRows;
    return this;
  }

  /**
   * If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. Regardless of this &#x60;keep_empty_rows&#x60; setting, only data recorded by the Google Analytics (GA4) property can be displayed in a report. For example if a property never logs a &#x60;purchase&#x60; event, then a query for the &#x60;eventName&#x60; dimension and &#x60;eventCount&#x60; metric will not have a row eventName: \&quot;purchase\&quot; and eventCount: 0.
   * @return keepEmptyRows
   */
  @javax.annotation.Nullable
  public Boolean getKeepEmptyRows() {
    return keepEmptyRows;
  }

  public void setKeepEmptyRows(Boolean keepEmptyRows) {
    this.keepEmptyRows = keepEmptyRows;
  }


  public RunReportRequest limit(String limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. &#x60;limit&#x60; must be positive. The API can also return fewer rows than the requested &#x60;limit&#x60;, if there aren&#39;t as many dimension values as the &#x60;limit&#x60;. For instance, there are fewer than 300 possible values for the dimension &#x60;country&#x60;, so when reporting on only &#x60;country&#x60;, you can&#39;t get more than 300 rows, even if you set &#x60;limit&#x60; to a higher value. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @return limit
   */
  @javax.annotation.Nullable
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }


  public RunReportRequest metricAggregations(List<MetricAggregationsEnum> metricAggregations) {
    this.metricAggregations = metricAggregations;
    return this;
  }

  public RunReportRequest addMetricAggregationsItem(MetricAggregationsEnum metricAggregationsItem) {
    if (this.metricAggregations == null) {
      this.metricAggregations = new ArrayList<>();
    }
    this.metricAggregations.add(metricAggregationsItem);
    return this;
  }

  /**
   * Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to \&quot;RESERVED_(MetricAggregation)\&quot;.
   * @return metricAggregations
   */
  @javax.annotation.Nullable
  public List<MetricAggregationsEnum> getMetricAggregations() {
    return metricAggregations;
  }

  public void setMetricAggregations(List<MetricAggregationsEnum> metricAggregations) {
    this.metricAggregations = metricAggregations;
  }


  public RunReportRequest metricFilter(FilterExpression metricFilter) {
    this.metricFilter = metricFilter;
    return this;
  }

  /**
   * Get metricFilter
   * @return metricFilter
   */
  @javax.annotation.Nullable
  public FilterExpression getMetricFilter() {
    return metricFilter;
  }

  public void setMetricFilter(FilterExpression metricFilter) {
    this.metricFilter = metricFilter;
  }


  public RunReportRequest metrics(List<Metric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public RunReportRequest addMetricsItem(Metric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * The metrics requested and displayed.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<Metric> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Metric> metrics) {
    this.metrics = metrics;
  }


  public RunReportRequest offset(String offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The row count of the start row. The first row is counted as row 0. When paging, the first request does not specify offset; or equivalently, sets offset to 0; the first request returns the first &#x60;limit&#x60; of rows. The second request sets offset to the &#x60;limit&#x60; of the first request; the second request returns the second &#x60;limit&#x60; of rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @return offset
   */
  @javax.annotation.Nullable
  public String getOffset() {
    return offset;
  }

  public void setOffset(String offset) {
    this.offset = offset;
  }


  public RunReportRequest orderBys(List<OrderBy> orderBys) {
    this.orderBys = orderBys;
    return this;
  }

  public RunReportRequest addOrderBysItem(OrderBy orderBysItem) {
    if (this.orderBys == null) {
      this.orderBys = new ArrayList<>();
    }
    this.orderBys.add(orderBysItem);
    return this;
  }

  /**
   * Specifies how rows are ordered in the response.
   * @return orderBys
   */
  @javax.annotation.Nullable
  public List<OrderBy> getOrderBys() {
    return orderBys;
  }

  public void setOrderBys(List<OrderBy> orderBys) {
    this.orderBys = orderBys;
  }


  public RunReportRequest property(String property) {
    this.property = property;
    return this;
  }

  /**
   * A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234
   * @return property
   */
  @javax.annotation.Nullable
  public String getProperty() {
    return property;
  }

  public void setProperty(String property) {
    this.property = property;
  }


  public RunReportRequest returnPropertyQuota(Boolean returnPropertyQuota) {
    this.returnPropertyQuota = returnPropertyQuota;
    return this;
  }

  /**
   * Toggles whether to return the current state of this Analytics Property&#39;s quota. Quota is returned in [PropertyQuota](#PropertyQuota).
   * @return returnPropertyQuota
   */
  @javax.annotation.Nullable
  public Boolean getReturnPropertyQuota() {
    return returnPropertyQuota;
  }

  public void setReturnPropertyQuota(Boolean returnPropertyQuota) {
    this.returnPropertyQuota = returnPropertyQuota;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunReportRequest runReportRequest = (RunReportRequest) o;
    return Objects.equals(this.cohortSpec, runReportRequest.cohortSpec) &&
        Objects.equals(this.currencyCode, runReportRequest.currencyCode) &&
        Objects.equals(this.dateRanges, runReportRequest.dateRanges) &&
        Objects.equals(this.dimensionFilter, runReportRequest.dimensionFilter) &&
        Objects.equals(this.dimensions, runReportRequest.dimensions) &&
        Objects.equals(this.keepEmptyRows, runReportRequest.keepEmptyRows) &&
        Objects.equals(this.limit, runReportRequest.limit) &&
        Objects.equals(this.metricAggregations, runReportRequest.metricAggregations) &&
        Objects.equals(this.metricFilter, runReportRequest.metricFilter) &&
        Objects.equals(this.metrics, runReportRequest.metrics) &&
        Objects.equals(this.offset, runReportRequest.offset) &&
        Objects.equals(this.orderBys, runReportRequest.orderBys) &&
        Objects.equals(this.property, runReportRequest.property) &&
        Objects.equals(this.returnPropertyQuota, runReportRequest.returnPropertyQuota);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cohortSpec, currencyCode, dateRanges, dimensionFilter, dimensions, keepEmptyRows, limit, metricAggregations, metricFilter, metrics, offset, orderBys, property, returnPropertyQuota);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunReportRequest {\n");
    sb.append("    cohortSpec: ").append(toIndentedString(cohortSpec)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    dateRanges: ").append(toIndentedString(dateRanges)).append("\n");
    sb.append("    dimensionFilter: ").append(toIndentedString(dimensionFilter)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    keepEmptyRows: ").append(toIndentedString(keepEmptyRows)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    metricAggregations: ").append(toIndentedString(metricAggregations)).append("\n");
    sb.append("    metricFilter: ").append(toIndentedString(metricFilter)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    orderBys: ").append(toIndentedString(orderBys)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    returnPropertyQuota: ").append(toIndentedString(returnPropertyQuota)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cohortSpec");
    openapiFields.add("currencyCode");
    openapiFields.add("dateRanges");
    openapiFields.add("dimensionFilter");
    openapiFields.add("dimensions");
    openapiFields.add("keepEmptyRows");
    openapiFields.add("limit");
    openapiFields.add("metricAggregations");
    openapiFields.add("metricFilter");
    openapiFields.add("metrics");
    openapiFields.add("offset");
    openapiFields.add("orderBys");
    openapiFields.add("property");
    openapiFields.add("returnPropertyQuota");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunReportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunReportRequest is not found in the empty JSON string", RunReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cohortSpec`
      if (jsonObj.get("cohortSpec") != null && !jsonObj.get("cohortSpec").isJsonNull()) {
        CohortSpec.validateJsonElement(jsonObj.get("cohortSpec"));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if (jsonObj.get("dateRanges") != null && !jsonObj.get("dateRanges").isJsonNull()) {
        JsonArray jsonArraydateRanges = jsonObj.getAsJsonArray("dateRanges");
        if (jsonArraydateRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dateRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dateRanges` to be an array in the JSON string but got `%s`", jsonObj.get("dateRanges").toString()));
          }

          // validate the optional field `dateRanges` (array)
          for (int i = 0; i < jsonArraydateRanges.size(); i++) {
            DateRange.validateJsonElement(jsonArraydateRanges.get(i));
          };
        }
      }
      // validate the optional field `dimensionFilter`
      if (jsonObj.get("dimensionFilter") != null && !jsonObj.get("dimensionFilter").isJsonNull()) {
        FilterExpression.validateJsonElement(jsonObj.get("dimensionFilter"));
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            Dimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      if ((jsonObj.get("limit") != null && !jsonObj.get("limit").isJsonNull()) && !jsonObj.get("limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limit").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metricAggregations") != null && !jsonObj.get("metricAggregations").isJsonNull() && !jsonObj.get("metricAggregations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricAggregations` to be an array in the JSON string but got `%s`", jsonObj.get("metricAggregations").toString()));
      }
      // validate the optional field `metricFilter`
      if (jsonObj.get("metricFilter") != null && !jsonObj.get("metricFilter").isJsonNull()) {
        FilterExpression.validateJsonElement(jsonObj.get("metricFilter"));
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            Metric.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("offset") != null && !jsonObj.get("offset").isJsonNull()) && !jsonObj.get("offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offset").toString()));
      }
      if (jsonObj.get("orderBys") != null && !jsonObj.get("orderBys").isJsonNull()) {
        JsonArray jsonArrayorderBys = jsonObj.getAsJsonArray("orderBys");
        if (jsonArrayorderBys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderBys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderBys` to be an array in the JSON string but got `%s`", jsonObj.get("orderBys").toString()));
          }

          // validate the optional field `orderBys` (array)
          for (int i = 0; i < jsonArrayorderBys.size(); i++) {
            OrderBy.validateJsonElement(jsonArrayorderBys.get(i));
          };
        }
      }
      if ((jsonObj.get("property") != null && !jsonObj.get("property").isJsonNull()) && !jsonObj.get("property").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `property` to be a primitive type in the JSON string but got `%s`", jsonObj.get("property").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RunReportRequest>() {
           @Override
           public void write(JsonWriter out, RunReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunReportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunReportRequest
   * @throws IOException if the JSON string is invalid with respect to RunReportRequest
   */
  public static RunReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunReportRequest.class);
  }

  /**
   * Convert an instance of RunReportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

