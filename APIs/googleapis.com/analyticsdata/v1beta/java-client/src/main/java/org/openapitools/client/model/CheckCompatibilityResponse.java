/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DimensionCompatibility;
import org.openapitools.client.model.MetricCompatibility;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The compatibility response with the compatibility of each dimension &amp; metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckCompatibilityResponse {
  public static final String SERIALIZED_NAME_DIMENSION_COMPATIBILITIES = "dimensionCompatibilities";
  @SerializedName(SERIALIZED_NAME_DIMENSION_COMPATIBILITIES)
  private List<DimensionCompatibility> dimensionCompatibilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_COMPATIBILITIES = "metricCompatibilities";
  @SerializedName(SERIALIZED_NAME_METRIC_COMPATIBILITIES)
  private List<MetricCompatibility> metricCompatibilities = new ArrayList<>();

  public CheckCompatibilityResponse() {
  }

  public CheckCompatibilityResponse dimensionCompatibilities(List<DimensionCompatibility> dimensionCompatibilities) {
    this.dimensionCompatibilities = dimensionCompatibilities;
    return this;
  }

  public CheckCompatibilityResponse addDimensionCompatibilitiesItem(DimensionCompatibility dimensionCompatibilitiesItem) {
    if (this.dimensionCompatibilities == null) {
      this.dimensionCompatibilities = new ArrayList<>();
    }
    this.dimensionCompatibilities.add(dimensionCompatibilitiesItem);
    return this;
  }

  /**
   * The compatibility of each dimension.
   * @return dimensionCompatibilities
   */
  @javax.annotation.Nullable
  public List<DimensionCompatibility> getDimensionCompatibilities() {
    return dimensionCompatibilities;
  }

  public void setDimensionCompatibilities(List<DimensionCompatibility> dimensionCompatibilities) {
    this.dimensionCompatibilities = dimensionCompatibilities;
  }


  public CheckCompatibilityResponse metricCompatibilities(List<MetricCompatibility> metricCompatibilities) {
    this.metricCompatibilities = metricCompatibilities;
    return this;
  }

  public CheckCompatibilityResponse addMetricCompatibilitiesItem(MetricCompatibility metricCompatibilitiesItem) {
    if (this.metricCompatibilities == null) {
      this.metricCompatibilities = new ArrayList<>();
    }
    this.metricCompatibilities.add(metricCompatibilitiesItem);
    return this;
  }

  /**
   * The compatibility of each metric.
   * @return metricCompatibilities
   */
  @javax.annotation.Nullable
  public List<MetricCompatibility> getMetricCompatibilities() {
    return metricCompatibilities;
  }

  public void setMetricCompatibilities(List<MetricCompatibility> metricCompatibilities) {
    this.metricCompatibilities = metricCompatibilities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckCompatibilityResponse checkCompatibilityResponse = (CheckCompatibilityResponse) o;
    return Objects.equals(this.dimensionCompatibilities, checkCompatibilityResponse.dimensionCompatibilities) &&
        Objects.equals(this.metricCompatibilities, checkCompatibilityResponse.metricCompatibilities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensionCompatibilities, metricCompatibilities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckCompatibilityResponse {\n");
    sb.append("    dimensionCompatibilities: ").append(toIndentedString(dimensionCompatibilities)).append("\n");
    sb.append("    metricCompatibilities: ").append(toIndentedString(metricCompatibilities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensionCompatibilities");
    openapiFields.add("metricCompatibilities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckCompatibilityResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckCompatibilityResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckCompatibilityResponse is not found in the empty JSON string", CheckCompatibilityResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckCompatibilityResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckCompatibilityResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dimensionCompatibilities") != null && !jsonObj.get("dimensionCompatibilities").isJsonNull()) {
        JsonArray jsonArraydimensionCompatibilities = jsonObj.getAsJsonArray("dimensionCompatibilities");
        if (jsonArraydimensionCompatibilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensionCompatibilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensionCompatibilities` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionCompatibilities").toString()));
          }

          // validate the optional field `dimensionCompatibilities` (array)
          for (int i = 0; i < jsonArraydimensionCompatibilities.size(); i++) {
            DimensionCompatibility.validateJsonElement(jsonArraydimensionCompatibilities.get(i));
          };
        }
      }
      if (jsonObj.get("metricCompatibilities") != null && !jsonObj.get("metricCompatibilities").isJsonNull()) {
        JsonArray jsonArraymetricCompatibilities = jsonObj.getAsJsonArray("metricCompatibilities");
        if (jsonArraymetricCompatibilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricCompatibilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricCompatibilities` to be an array in the JSON string but got `%s`", jsonObj.get("metricCompatibilities").toString()));
          }

          // validate the optional field `metricCompatibilities` (array)
          for (int i = 0; i < jsonArraymetricCompatibilities.size(); i++) {
            MetricCompatibility.validateJsonElement(jsonArraymetricCompatibilities.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckCompatibilityResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckCompatibilityResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckCompatibilityResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckCompatibilityResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckCompatibilityResponse>() {
           @Override
           public void write(JsonWriter out, CheckCompatibilityResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckCompatibilityResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckCompatibilityResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckCompatibilityResponse
   * @throws IOException if the JSON string is invalid with respect to CheckCompatibilityResponse
   */
  public static CheckCompatibilityResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckCompatibilityResponse.class);
  }

  /**
   * Convert an instance of CheckCompatibilityResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

