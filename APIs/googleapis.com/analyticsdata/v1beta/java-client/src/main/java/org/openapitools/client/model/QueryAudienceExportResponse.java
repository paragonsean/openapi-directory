/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AudienceExport;
import org.openapitools.client.model.V1betaAudienceRow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A list of users in an audience export.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryAudienceExportResponse {
  public static final String SERIALIZED_NAME_AUDIENCE_EXPORT = "audienceExport";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_EXPORT)
  private AudienceExport audienceExport;

  public static final String SERIALIZED_NAME_AUDIENCE_ROWS = "audienceRows";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_ROWS)
  private List<V1betaAudienceRow> audienceRows = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROW_COUNT = "rowCount";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Integer rowCount;

  public QueryAudienceExportResponse() {
  }

  public QueryAudienceExportResponse audienceExport(AudienceExport audienceExport) {
    this.audienceExport = audienceExport;
    return this;
  }

  /**
   * Get audienceExport
   * @return audienceExport
   */
  @javax.annotation.Nullable
  public AudienceExport getAudienceExport() {
    return audienceExport;
  }

  public void setAudienceExport(AudienceExport audienceExport) {
    this.audienceExport = audienceExport;
  }


  public QueryAudienceExportResponse audienceRows(List<V1betaAudienceRow> audienceRows) {
    this.audienceRows = audienceRows;
    return this;
  }

  public QueryAudienceExportResponse addAudienceRowsItem(V1betaAudienceRow audienceRowsItem) {
    if (this.audienceRows == null) {
      this.audienceRows = new ArrayList<>();
    }
    this.audienceRows.add(audienceRowsItem);
    return this;
  }

  /**
   * Rows for each user in an audience export. The number of rows in this response will be less than or equal to request&#39;s page size.
   * @return audienceRows
   */
  @javax.annotation.Nullable
  public List<V1betaAudienceRow> getAudienceRows() {
    return audienceRows;
  }

  public void setAudienceRows(List<V1betaAudienceRow> audienceRows) {
    this.audienceRows = audienceRows;
  }


  public QueryAudienceExportResponse rowCount(Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * The total number of rows in the AudienceExport result. &#x60;rowCount&#x60; is independent of the number of rows returned in the response, the &#x60;limit&#x60; request parameter, and the &#x60;offset&#x60; request parameter. For example if a query returns 175 rows and includes &#x60;limit&#x60; of 50 in the API request, the response will contain &#x60;rowCount&#x60; of 175 but only 50 rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @return rowCount
   */
  @javax.annotation.Nullable
  public Integer getRowCount() {
    return rowCount;
  }

  public void setRowCount(Integer rowCount) {
    this.rowCount = rowCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryAudienceExportResponse queryAudienceExportResponse = (QueryAudienceExportResponse) o;
    return Objects.equals(this.audienceExport, queryAudienceExportResponse.audienceExport) &&
        Objects.equals(this.audienceRows, queryAudienceExportResponse.audienceRows) &&
        Objects.equals(this.rowCount, queryAudienceExportResponse.rowCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audienceExport, audienceRows, rowCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryAudienceExportResponse {\n");
    sb.append("    audienceExport: ").append(toIndentedString(audienceExport)).append("\n");
    sb.append("    audienceRows: ").append(toIndentedString(audienceRows)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audienceExport");
    openapiFields.add("audienceRows");
    openapiFields.add("rowCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryAudienceExportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryAudienceExportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryAudienceExportResponse is not found in the empty JSON string", QueryAudienceExportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryAudienceExportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryAudienceExportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `audienceExport`
      if (jsonObj.get("audienceExport") != null && !jsonObj.get("audienceExport").isJsonNull()) {
        AudienceExport.validateJsonElement(jsonObj.get("audienceExport"));
      }
      if (jsonObj.get("audienceRows") != null && !jsonObj.get("audienceRows").isJsonNull()) {
        JsonArray jsonArrayaudienceRows = jsonObj.getAsJsonArray("audienceRows");
        if (jsonArrayaudienceRows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("audienceRows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `audienceRows` to be an array in the JSON string but got `%s`", jsonObj.get("audienceRows").toString()));
          }

          // validate the optional field `audienceRows` (array)
          for (int i = 0; i < jsonArrayaudienceRows.size(); i++) {
            V1betaAudienceRow.validateJsonElement(jsonArrayaudienceRows.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryAudienceExportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryAudienceExportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryAudienceExportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryAudienceExportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryAudienceExportResponse>() {
           @Override
           public void write(JsonWriter out, QueryAudienceExportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryAudienceExportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryAudienceExportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryAudienceExportResponse
   * @throws IOException if the JSON string is invalid with respect to QueryAudienceExportResponse
   */
  public static QueryAudienceExportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryAudienceExportResponse.class);
  }

  /**
   * Convert an instance of QueryAudienceExportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

