/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.FilterExpression;
import org.openapitools.client.model.Metric;
import org.openapitools.client.model.MinuteRange;
import org.openapitools.client.model.OrderBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request to generate a realtime report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunRealtimeReportRequest {
  public static final String SERIALIZED_NAME_DIMENSION_FILTER = "dimensionFilter";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTER)
  private FilterExpression dimensionFilter;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<Dimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private String limit;

  /**
   * Gets or Sets metricAggregations
   */
  @JsonAdapter(MetricAggregationsEnum.Adapter.class)
  public enum MetricAggregationsEnum {
    METRIC_AGGREGATION_UNSPECIFIED("METRIC_AGGREGATION_UNSPECIFIED"),
    
    TOTAL("TOTAL"),
    
    MINIMUM("MINIMUM"),
    
    MAXIMUM("MAXIMUM"),
    
    COUNT("COUNT");

    private String value;

    MetricAggregationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricAggregationsEnum fromValue(String value) {
      for (MetricAggregationsEnum b : MetricAggregationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricAggregationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricAggregationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricAggregationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricAggregationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricAggregationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRIC_AGGREGATIONS = "metricAggregations";
  @SerializedName(SERIALIZED_NAME_METRIC_AGGREGATIONS)
  private List<MetricAggregationsEnum> metricAggregations = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_FILTER = "metricFilter";
  @SerializedName(SERIALIZED_NAME_METRIC_FILTER)
  private FilterExpression metricFilter;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<Metric> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINUTE_RANGES = "minuteRanges";
  @SerializedName(SERIALIZED_NAME_MINUTE_RANGES)
  private List<MinuteRange> minuteRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_BYS = "orderBys";
  @SerializedName(SERIALIZED_NAME_ORDER_BYS)
  private List<OrderBy> orderBys = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_PROPERTY_QUOTA = "returnPropertyQuota";
  @SerializedName(SERIALIZED_NAME_RETURN_PROPERTY_QUOTA)
  private Boolean returnPropertyQuota;

  public RunRealtimeReportRequest() {
  }

  public RunRealtimeReportRequest dimensionFilter(FilterExpression dimensionFilter) {
    this.dimensionFilter = dimensionFilter;
    return this;
  }

  /**
   * Get dimensionFilter
   * @return dimensionFilter
   */
  @javax.annotation.Nullable
  public FilterExpression getDimensionFilter() {
    return dimensionFilter;
  }

  public void setDimensionFilter(FilterExpression dimensionFilter) {
    this.dimensionFilter = dimensionFilter;
  }


  public RunRealtimeReportRequest dimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public RunRealtimeReportRequest addDimensionsItem(Dimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * The dimensions requested and displayed.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<Dimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
  }


  public RunRealtimeReportRequest limit(String limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. &#x60;limit&#x60; must be positive. The API can also return fewer rows than the requested &#x60;limit&#x60;, if there aren&#39;t as many dimension values as the &#x60;limit&#x60;. For instance, there are fewer than 300 possible values for the dimension &#x60;country&#x60;, so when reporting on only &#x60;country&#x60;, you can&#39;t get more than 300 rows, even if you set &#x60;limit&#x60; to a higher value.
   * @return limit
   */
  @javax.annotation.Nullable
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }


  public RunRealtimeReportRequest metricAggregations(List<MetricAggregationsEnum> metricAggregations) {
    this.metricAggregations = metricAggregations;
    return this;
  }

  public RunRealtimeReportRequest addMetricAggregationsItem(MetricAggregationsEnum metricAggregationsItem) {
    if (this.metricAggregations == null) {
      this.metricAggregations = new ArrayList<>();
    }
    this.metricAggregations.add(metricAggregationsItem);
    return this;
  }

  /**
   * Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to \&quot;RESERVED_(MetricAggregation)\&quot;.
   * @return metricAggregations
   */
  @javax.annotation.Nullable
  public List<MetricAggregationsEnum> getMetricAggregations() {
    return metricAggregations;
  }

  public void setMetricAggregations(List<MetricAggregationsEnum> metricAggregations) {
    this.metricAggregations = metricAggregations;
  }


  public RunRealtimeReportRequest metricFilter(FilterExpression metricFilter) {
    this.metricFilter = metricFilter;
    return this;
  }

  /**
   * Get metricFilter
   * @return metricFilter
   */
  @javax.annotation.Nullable
  public FilterExpression getMetricFilter() {
    return metricFilter;
  }

  public void setMetricFilter(FilterExpression metricFilter) {
    this.metricFilter = metricFilter;
  }


  public RunRealtimeReportRequest metrics(List<Metric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public RunRealtimeReportRequest addMetricsItem(Metric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * The metrics requested and displayed.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<Metric> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Metric> metrics) {
    this.metrics = metrics;
  }


  public RunRealtimeReportRequest minuteRanges(List<MinuteRange> minuteRanges) {
    this.minuteRanges = minuteRanges;
    return this;
  }

  public RunRealtimeReportRequest addMinuteRangesItem(MinuteRange minuteRangesItem) {
    if (this.minuteRanges == null) {
      this.minuteRanges = new ArrayList<>();
    }
    this.minuteRanges.add(minuteRangesItem);
    return this;
  }

  /**
   * The minute ranges of event data to read. If unspecified, one minute range for the last 30 minutes will be used. If multiple minute ranges are requested, each response row will contain a zero based minute range index. If two minute ranges overlap, the event data for the overlapping minutes is included in the response rows for both minute ranges.
   * @return minuteRanges
   */
  @javax.annotation.Nullable
  public List<MinuteRange> getMinuteRanges() {
    return minuteRanges;
  }

  public void setMinuteRanges(List<MinuteRange> minuteRanges) {
    this.minuteRanges = minuteRanges;
  }


  public RunRealtimeReportRequest orderBys(List<OrderBy> orderBys) {
    this.orderBys = orderBys;
    return this;
  }

  public RunRealtimeReportRequest addOrderBysItem(OrderBy orderBysItem) {
    if (this.orderBys == null) {
      this.orderBys = new ArrayList<>();
    }
    this.orderBys.add(orderBysItem);
    return this;
  }

  /**
   * Specifies how rows are ordered in the response.
   * @return orderBys
   */
  @javax.annotation.Nullable
  public List<OrderBy> getOrderBys() {
    return orderBys;
  }

  public void setOrderBys(List<OrderBy> orderBys) {
    this.orderBys = orderBys;
  }


  public RunRealtimeReportRequest returnPropertyQuota(Boolean returnPropertyQuota) {
    this.returnPropertyQuota = returnPropertyQuota;
    return this;
  }

  /**
   * Toggles whether to return the current state of this Analytics Property&#39;s Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).
   * @return returnPropertyQuota
   */
  @javax.annotation.Nullable
  public Boolean getReturnPropertyQuota() {
    return returnPropertyQuota;
  }

  public void setReturnPropertyQuota(Boolean returnPropertyQuota) {
    this.returnPropertyQuota = returnPropertyQuota;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunRealtimeReportRequest runRealtimeReportRequest = (RunRealtimeReportRequest) o;
    return Objects.equals(this.dimensionFilter, runRealtimeReportRequest.dimensionFilter) &&
        Objects.equals(this.dimensions, runRealtimeReportRequest.dimensions) &&
        Objects.equals(this.limit, runRealtimeReportRequest.limit) &&
        Objects.equals(this.metricAggregations, runRealtimeReportRequest.metricAggregations) &&
        Objects.equals(this.metricFilter, runRealtimeReportRequest.metricFilter) &&
        Objects.equals(this.metrics, runRealtimeReportRequest.metrics) &&
        Objects.equals(this.minuteRanges, runRealtimeReportRequest.minuteRanges) &&
        Objects.equals(this.orderBys, runRealtimeReportRequest.orderBys) &&
        Objects.equals(this.returnPropertyQuota, runRealtimeReportRequest.returnPropertyQuota);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensionFilter, dimensions, limit, metricAggregations, metricFilter, metrics, minuteRanges, orderBys, returnPropertyQuota);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunRealtimeReportRequest {\n");
    sb.append("    dimensionFilter: ").append(toIndentedString(dimensionFilter)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    metricAggregations: ").append(toIndentedString(metricAggregations)).append("\n");
    sb.append("    metricFilter: ").append(toIndentedString(metricFilter)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    minuteRanges: ").append(toIndentedString(minuteRanges)).append("\n");
    sb.append("    orderBys: ").append(toIndentedString(orderBys)).append("\n");
    sb.append("    returnPropertyQuota: ").append(toIndentedString(returnPropertyQuota)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensionFilter");
    openapiFields.add("dimensions");
    openapiFields.add("limit");
    openapiFields.add("metricAggregations");
    openapiFields.add("metricFilter");
    openapiFields.add("metrics");
    openapiFields.add("minuteRanges");
    openapiFields.add("orderBys");
    openapiFields.add("returnPropertyQuota");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunRealtimeReportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunRealtimeReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunRealtimeReportRequest is not found in the empty JSON string", RunRealtimeReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunRealtimeReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunRealtimeReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dimensionFilter`
      if (jsonObj.get("dimensionFilter") != null && !jsonObj.get("dimensionFilter").isJsonNull()) {
        FilterExpression.validateJsonElement(jsonObj.get("dimensionFilter"));
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            Dimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      if ((jsonObj.get("limit") != null && !jsonObj.get("limit").isJsonNull()) && !jsonObj.get("limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limit").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metricAggregations") != null && !jsonObj.get("metricAggregations").isJsonNull() && !jsonObj.get("metricAggregations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricAggregations` to be an array in the JSON string but got `%s`", jsonObj.get("metricAggregations").toString()));
      }
      // validate the optional field `metricFilter`
      if (jsonObj.get("metricFilter") != null && !jsonObj.get("metricFilter").isJsonNull()) {
        FilterExpression.validateJsonElement(jsonObj.get("metricFilter"));
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            Metric.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if (jsonObj.get("minuteRanges") != null && !jsonObj.get("minuteRanges").isJsonNull()) {
        JsonArray jsonArrayminuteRanges = jsonObj.getAsJsonArray("minuteRanges");
        if (jsonArrayminuteRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("minuteRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `minuteRanges` to be an array in the JSON string but got `%s`", jsonObj.get("minuteRanges").toString()));
          }

          // validate the optional field `minuteRanges` (array)
          for (int i = 0; i < jsonArrayminuteRanges.size(); i++) {
            MinuteRange.validateJsonElement(jsonArrayminuteRanges.get(i));
          };
        }
      }
      if (jsonObj.get("orderBys") != null && !jsonObj.get("orderBys").isJsonNull()) {
        JsonArray jsonArrayorderBys = jsonObj.getAsJsonArray("orderBys");
        if (jsonArrayorderBys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderBys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderBys` to be an array in the JSON string but got `%s`", jsonObj.get("orderBys").toString()));
          }

          // validate the optional field `orderBys` (array)
          for (int i = 0; i < jsonArrayorderBys.size(); i++) {
            OrderBy.validateJsonElement(jsonArrayorderBys.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunRealtimeReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunRealtimeReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunRealtimeReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunRealtimeReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RunRealtimeReportRequest>() {
           @Override
           public void write(JsonWriter out, RunRealtimeReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunRealtimeReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunRealtimeReportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunRealtimeReportRequest
   * @throws IOException if the JSON string is invalid with respect to RunRealtimeReportRequest
   */
  public static RunRealtimeReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunRealtimeReportRequest.class);
  }

  /**
   * Convert an instance of RunRealtimeReportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

