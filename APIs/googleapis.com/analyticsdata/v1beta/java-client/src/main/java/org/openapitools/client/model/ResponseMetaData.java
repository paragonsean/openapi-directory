/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SamplingMetadata;
import org.openapitools.client.model.SchemaRestrictionResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response&#39;s metadata carrying additional information about the report content.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResponseMetaData {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DATA_LOSS_FROM_OTHER_ROW = "dataLossFromOtherRow";
  @SerializedName(SERIALIZED_NAME_DATA_LOSS_FROM_OTHER_ROW)
  private Boolean dataLossFromOtherRow;

  public static final String SERIALIZED_NAME_EMPTY_REASON = "emptyReason";
  @SerializedName(SERIALIZED_NAME_EMPTY_REASON)
  private String emptyReason;

  public static final String SERIALIZED_NAME_SAMPLING_METADATAS = "samplingMetadatas";
  @SerializedName(SERIALIZED_NAME_SAMPLING_METADATAS)
  private List<SamplingMetadata> samplingMetadatas = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMA_RESTRICTION_RESPONSE = "schemaRestrictionResponse";
  @SerializedName(SERIALIZED_NAME_SCHEMA_RESTRICTION_RESPONSE)
  private SchemaRestrictionResponse schemaRestrictionResponse;

  public static final String SERIALIZED_NAME_SUBJECT_TO_THRESHOLDING = "subjectToThresholding";
  @SerializedName(SERIALIZED_NAME_SUBJECT_TO_THRESHOLDING)
  private Boolean subjectToThresholding;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public ResponseMetaData() {
  }

  public ResponseMetaData currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code used in this report. Intended to be used in formatting currency metrics like &#x60;purchaseRevenue&#x60; for visualization. If currency_code was specified in the request, this response parameter will echo the request parameter; otherwise, this response parameter is the property&#39;s current currency_code. Currency codes are string encodings of currency types from the ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217); for example \&quot;USD\&quot;, \&quot;EUR\&quot;, \&quot;JPY\&quot;. To learn more, see https://support.google.com/analytics/answer/9796179.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ResponseMetaData dataLossFromOtherRow(Boolean dataLossFromOtherRow) {
    this.dataLossFromOtherRow = dataLossFromOtherRow;
    return this;
  }

  /**
   * If true, indicates some buckets of dimension combinations are rolled into \&quot;(other)\&quot; row. This can happen for high cardinality reports. The metadata parameter dataLossFromOtherRow is populated based on the aggregated data table used in the report. The parameter will be accurately populated regardless of the filters and limits in the report. For example, the (other) row could be dropped from the report because the request contains a filter on sessionSource &#x3D; google. This parameter will still be populated if data loss from other row was present in the input aggregate data used to generate this report. To learn more, see [About the (other) row and data sampling](https://support.google.com/analytics/answer/13208658#reports).
   * @return dataLossFromOtherRow
   */
  @javax.annotation.Nullable
  public Boolean getDataLossFromOtherRow() {
    return dataLossFromOtherRow;
  }

  public void setDataLossFromOtherRow(Boolean dataLossFromOtherRow) {
    this.dataLossFromOtherRow = dataLossFromOtherRow;
  }


  public ResponseMetaData emptyReason(String emptyReason) {
    this.emptyReason = emptyReason;
    return this;
  }

  /**
   * If empty reason is specified, the report is empty for this reason.
   * @return emptyReason
   */
  @javax.annotation.Nullable
  public String getEmptyReason() {
    return emptyReason;
  }

  public void setEmptyReason(String emptyReason) {
    this.emptyReason = emptyReason;
  }


  public ResponseMetaData samplingMetadatas(List<SamplingMetadata> samplingMetadatas) {
    this.samplingMetadatas = samplingMetadatas;
    return this;
  }

  public ResponseMetaData addSamplingMetadatasItem(SamplingMetadata samplingMetadatasItem) {
    if (this.samplingMetadatas == null) {
      this.samplingMetadatas = new ArrayList<>();
    }
    this.samplingMetadatas.add(samplingMetadatasItem);
    return this;
  }

  /**
   * If this report results is [sampled](https://support.google.com/analytics/answer/13331292), this describes the percentage of events used in this report. One &#x60;samplingMetadatas&#x60; is populated for each date range. Each &#x60;samplingMetadatas&#x60; corresponds to a date range in order that date ranges were specified in the request. However if the results are not sampled, this field will not be defined.
   * @return samplingMetadatas
   */
  @javax.annotation.Nullable
  public List<SamplingMetadata> getSamplingMetadatas() {
    return samplingMetadatas;
  }

  public void setSamplingMetadatas(List<SamplingMetadata> samplingMetadatas) {
    this.samplingMetadatas = samplingMetadatas;
  }


  public ResponseMetaData schemaRestrictionResponse(SchemaRestrictionResponse schemaRestrictionResponse) {
    this.schemaRestrictionResponse = schemaRestrictionResponse;
    return this;
  }

  /**
   * Get schemaRestrictionResponse
   * @return schemaRestrictionResponse
   */
  @javax.annotation.Nullable
  public SchemaRestrictionResponse getSchemaRestrictionResponse() {
    return schemaRestrictionResponse;
  }

  public void setSchemaRestrictionResponse(SchemaRestrictionResponse schemaRestrictionResponse) {
    this.schemaRestrictionResponse = schemaRestrictionResponse;
  }


  public ResponseMetaData subjectToThresholding(Boolean subjectToThresholding) {
    this.subjectToThresholding = subjectToThresholding;
    return this;
  }

  /**
   * If &#x60;subjectToThresholding&#x60; is true, this report is subject to thresholding and only returns data that meets the minimum aggregation thresholds. It is possible for a request to be subject to thresholding thresholding and no data is absent from the report, and this happens when all data is above the thresholds. To learn more, see [Data thresholds](https://support.google.com/analytics/answer/9383630).
   * @return subjectToThresholding
   */
  @javax.annotation.Nullable
  public Boolean getSubjectToThresholding() {
    return subjectToThresholding;
  }

  public void setSubjectToThresholding(Boolean subjectToThresholding) {
    this.subjectToThresholding = subjectToThresholding;
  }


  public ResponseMetaData timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The property&#39;s current timezone. Intended to be used to interpret time-based dimensions like &#x60;hour&#x60; and &#x60;minute&#x60;. Formatted as strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example \&quot;America/New_York\&quot; or \&quot;Asia/Tokyo\&quot;.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseMetaData responseMetaData = (ResponseMetaData) o;
    return Objects.equals(this.currencyCode, responseMetaData.currencyCode) &&
        Objects.equals(this.dataLossFromOtherRow, responseMetaData.dataLossFromOtherRow) &&
        Objects.equals(this.emptyReason, responseMetaData.emptyReason) &&
        Objects.equals(this.samplingMetadatas, responseMetaData.samplingMetadatas) &&
        Objects.equals(this.schemaRestrictionResponse, responseMetaData.schemaRestrictionResponse) &&
        Objects.equals(this.subjectToThresholding, responseMetaData.subjectToThresholding) &&
        Objects.equals(this.timeZone, responseMetaData.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, dataLossFromOtherRow, emptyReason, samplingMetadatas, schemaRestrictionResponse, subjectToThresholding, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseMetaData {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    dataLossFromOtherRow: ").append(toIndentedString(dataLossFromOtherRow)).append("\n");
    sb.append("    emptyReason: ").append(toIndentedString(emptyReason)).append("\n");
    sb.append("    samplingMetadatas: ").append(toIndentedString(samplingMetadatas)).append("\n");
    sb.append("    schemaRestrictionResponse: ").append(toIndentedString(schemaRestrictionResponse)).append("\n");
    sb.append("    subjectToThresholding: ").append(toIndentedString(subjectToThresholding)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyCode");
    openapiFields.add("dataLossFromOtherRow");
    openapiFields.add("emptyReason");
    openapiFields.add("samplingMetadatas");
    openapiFields.add("schemaRestrictionResponse");
    openapiFields.add("subjectToThresholding");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseMetaData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseMetaData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseMetaData is not found in the empty JSON string", ResponseMetaData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseMetaData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseMetaData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("emptyReason") != null && !jsonObj.get("emptyReason").isJsonNull()) && !jsonObj.get("emptyReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emptyReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emptyReason").toString()));
      }
      if (jsonObj.get("samplingMetadatas") != null && !jsonObj.get("samplingMetadatas").isJsonNull()) {
        JsonArray jsonArraysamplingMetadatas = jsonObj.getAsJsonArray("samplingMetadatas");
        if (jsonArraysamplingMetadatas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("samplingMetadatas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `samplingMetadatas` to be an array in the JSON string but got `%s`", jsonObj.get("samplingMetadatas").toString()));
          }

          // validate the optional field `samplingMetadatas` (array)
          for (int i = 0; i < jsonArraysamplingMetadatas.size(); i++) {
            SamplingMetadata.validateJsonElement(jsonArraysamplingMetadatas.get(i));
          };
        }
      }
      // validate the optional field `schemaRestrictionResponse`
      if (jsonObj.get("schemaRestrictionResponse") != null && !jsonObj.get("schemaRestrictionResponse").isJsonNull()) {
        SchemaRestrictionResponse.validateJsonElement(jsonObj.get("schemaRestrictionResponse"));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseMetaData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseMetaData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseMetaData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseMetaData.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseMetaData>() {
           @Override
           public void write(JsonWriter out, ResponseMetaData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseMetaData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseMetaData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseMetaData
   * @throws IOException if the JSON string is invalid with respect to ResponseMetaData
   */
  public static ResponseMetaData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseMetaData.class);
  }

  /**
   * Convert an instance of ResponseMetaData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

