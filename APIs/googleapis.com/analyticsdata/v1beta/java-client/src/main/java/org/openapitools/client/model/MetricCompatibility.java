/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MetricMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The compatibility for a single metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricCompatibility {
  /**
   * The compatibility of this metric. If the compatibility is COMPATIBLE, this metric can be successfully added to the report.
   */
  @JsonAdapter(CompatibilityEnum.Adapter.class)
  public enum CompatibilityEnum {
    COMPATIBILITY_UNSPECIFIED("COMPATIBILITY_UNSPECIFIED"),
    
    COMPATIBLE("COMPATIBLE"),
    
    INCOMPATIBLE("INCOMPATIBLE");

    private String value;

    CompatibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompatibilityEnum fromValue(String value) {
      for (CompatibilityEnum b : CompatibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompatibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompatibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompatibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompatibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompatibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPATIBILITY = "compatibility";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY)
  private CompatibilityEnum compatibility;

  public static final String SERIALIZED_NAME_METRIC_METADATA = "metricMetadata";
  @SerializedName(SERIALIZED_NAME_METRIC_METADATA)
  private MetricMetadata metricMetadata;

  public MetricCompatibility() {
  }

  public MetricCompatibility compatibility(CompatibilityEnum compatibility) {
    this.compatibility = compatibility;
    return this;
  }

  /**
   * The compatibility of this metric. If the compatibility is COMPATIBLE, this metric can be successfully added to the report.
   * @return compatibility
   */
  @javax.annotation.Nullable
  public CompatibilityEnum getCompatibility() {
    return compatibility;
  }

  public void setCompatibility(CompatibilityEnum compatibility) {
    this.compatibility = compatibility;
  }


  public MetricCompatibility metricMetadata(MetricMetadata metricMetadata) {
    this.metricMetadata = metricMetadata;
    return this;
  }

  /**
   * Get metricMetadata
   * @return metricMetadata
   */
  @javax.annotation.Nullable
  public MetricMetadata getMetricMetadata() {
    return metricMetadata;
  }

  public void setMetricMetadata(MetricMetadata metricMetadata) {
    this.metricMetadata = metricMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricCompatibility metricCompatibility = (MetricCompatibility) o;
    return Objects.equals(this.compatibility, metricCompatibility.compatibility) &&
        Objects.equals(this.metricMetadata, metricCompatibility.metricMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compatibility, metricMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricCompatibility {\n");
    sb.append("    compatibility: ").append(toIndentedString(compatibility)).append("\n");
    sb.append("    metricMetadata: ").append(toIndentedString(metricMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compatibility");
    openapiFields.add("metricMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricCompatibility
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricCompatibility.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricCompatibility is not found in the empty JSON string", MetricCompatibility.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricCompatibility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricCompatibility` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("compatibility") != null && !jsonObj.get("compatibility").isJsonNull()) && !jsonObj.get("compatibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compatibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compatibility").toString()));
      }
      // validate the optional field `compatibility`
      if (jsonObj.get("compatibility") != null && !jsonObj.get("compatibility").isJsonNull()) {
        CompatibilityEnum.validateJsonElement(jsonObj.get("compatibility"));
      }
      // validate the optional field `metricMetadata`
      if (jsonObj.get("metricMetadata") != null && !jsonObj.get("metricMetadata").isJsonNull()) {
        MetricMetadata.validateJsonElement(jsonObj.get("metricMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricCompatibility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricCompatibility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricCompatibility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricCompatibility.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricCompatibility>() {
           @Override
           public void write(JsonWriter out, MetricCompatibility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricCompatibility read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricCompatibility given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricCompatibility
   * @throws IOException if the JSON string is invalid with respect to MetricCompatibility
   */
  public static MetricCompatibility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricCompatibility.class);
  }

  /**
   * Convert an instance of MetricCompatibility to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

