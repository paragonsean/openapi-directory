/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DimensionHeader;
import org.openapitools.client.model.MetricHeader;
import org.openapitools.client.model.PivotHeader;
import org.openapitools.client.model.PropertyQuota;
import org.openapitools.client.model.ResponseMetaData;
import org.openapitools.client.model.Row;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response pivot report table corresponding to a pivot request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunPivotReportResponse {
  public static final String SERIALIZED_NAME_AGGREGATES = "aggregates";
  @SerializedName(SERIALIZED_NAME_AGGREGATES)
  private List<Row> aggregates = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIMENSION_HEADERS = "dimensionHeaders";
  @SerializedName(SERIALIZED_NAME_DIMENSION_HEADERS)
  private List<DimensionHeader> dimensionHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ResponseMetaData metadata;

  public static final String SERIALIZED_NAME_METRIC_HEADERS = "metricHeaders";
  @SerializedName(SERIALIZED_NAME_METRIC_HEADERS)
  private List<MetricHeader> metricHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_PIVOT_HEADERS = "pivotHeaders";
  @SerializedName(SERIALIZED_NAME_PIVOT_HEADERS)
  private List<PivotHeader> pivotHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTY_QUOTA = "propertyQuota";
  @SerializedName(SERIALIZED_NAME_PROPERTY_QUOTA)
  private PropertyQuota propertyQuota;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<Row> rows = new ArrayList<>();

  public RunPivotReportResponse() {
  }

  public RunPivotReportResponse aggregates(List<Row> aggregates) {
    this.aggregates = aggregates;
    return this;
  }

  public RunPivotReportResponse addAggregatesItem(Row aggregatesItem) {
    if (this.aggregates == null) {
      this.aggregates = new ArrayList<>();
    }
    this.aggregates.add(aggregatesItem);
    return this;
  }

  /**
   * Aggregation of metric values. Can be totals, minimums, or maximums. The returned aggregations are controlled by the metric_aggregations in the pivot. The type of aggregation returned in each row is shown by the dimension_values which are set to \&quot;RESERVED_\&quot;.
   * @return aggregates
   */
  @javax.annotation.Nullable
  public List<Row> getAggregates() {
    return aggregates;
  }

  public void setAggregates(List<Row> aggregates) {
    this.aggregates = aggregates;
  }


  public RunPivotReportResponse dimensionHeaders(List<DimensionHeader> dimensionHeaders) {
    this.dimensionHeaders = dimensionHeaders;
    return this;
  }

  public RunPivotReportResponse addDimensionHeadersItem(DimensionHeader dimensionHeadersItem) {
    if (this.dimensionHeaders == null) {
      this.dimensionHeaders = new ArrayList<>();
    }
    this.dimensionHeaders.add(dimensionHeadersItem);
    return this;
  }

  /**
   * Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.
   * @return dimensionHeaders
   */
  @javax.annotation.Nullable
  public List<DimensionHeader> getDimensionHeaders() {
    return dimensionHeaders;
  }

  public void setDimensionHeaders(List<DimensionHeader> dimensionHeaders) {
    this.dimensionHeaders = dimensionHeaders;
  }


  public RunPivotReportResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this message is. This &#x60;kind&#x60; is always the fixed string \&quot;analyticsData#runPivotReport\&quot;. Useful to distinguish between response types in JSON.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public RunPivotReportResponse metadata(ResponseMetaData metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public ResponseMetaData getMetadata() {
    return metadata;
  }

  public void setMetadata(ResponseMetaData metadata) {
    this.metadata = metadata;
  }


  public RunPivotReportResponse metricHeaders(List<MetricHeader> metricHeaders) {
    this.metricHeaders = metricHeaders;
    return this;
  }

  public RunPivotReportResponse addMetricHeadersItem(MetricHeader metricHeadersItem) {
    if (this.metricHeaders == null) {
      this.metricHeaders = new ArrayList<>();
    }
    this.metricHeaders.add(metricHeadersItem);
    return this;
  }

  /**
   * Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.
   * @return metricHeaders
   */
  @javax.annotation.Nullable
  public List<MetricHeader> getMetricHeaders() {
    return metricHeaders;
  }

  public void setMetricHeaders(List<MetricHeader> metricHeaders) {
    this.metricHeaders = metricHeaders;
  }


  public RunPivotReportResponse pivotHeaders(List<PivotHeader> pivotHeaders) {
    this.pivotHeaders = pivotHeaders;
    return this;
  }

  public RunPivotReportResponse addPivotHeadersItem(PivotHeader pivotHeadersItem) {
    if (this.pivotHeaders == null) {
      this.pivotHeaders = new ArrayList<>();
    }
    this.pivotHeaders.add(pivotHeadersItem);
    return this;
  }

  /**
   * Summarizes the columns and rows created by a pivot. Each pivot in the request produces one header in the response. If we have a request like this: \&quot;pivots\&quot;: [{ \&quot;fieldNames\&quot;: [\&quot;country\&quot;, \&quot;city\&quot;] }, { \&quot;fieldNames\&quot;: \&quot;eventName\&quot; }] We will have the following &#x60;pivotHeaders&#x60; in the response: \&quot;pivotHeaders\&quot; : [{ \&quot;dimensionHeaders\&quot;: [{ \&quot;dimensionValues\&quot;: [ { \&quot;value\&quot;: \&quot;United Kingdom\&quot; }, { \&quot;value\&quot;: \&quot;London\&quot; } ] }, { \&quot;dimensionValues\&quot;: [ { \&quot;value\&quot;: \&quot;Japan\&quot; }, { \&quot;value\&quot;: \&quot;Osaka\&quot; } ] }] }, { \&quot;dimensionHeaders\&quot;: [{ \&quot;dimensionValues\&quot;: [{ \&quot;value\&quot;: \&quot;session_start\&quot; }] }, { \&quot;dimensionValues\&quot;: [{ \&quot;value\&quot;: \&quot;scroll\&quot; }] }] }]
   * @return pivotHeaders
   */
  @javax.annotation.Nullable
  public List<PivotHeader> getPivotHeaders() {
    return pivotHeaders;
  }

  public void setPivotHeaders(List<PivotHeader> pivotHeaders) {
    this.pivotHeaders = pivotHeaders;
  }


  public RunPivotReportResponse propertyQuota(PropertyQuota propertyQuota) {
    this.propertyQuota = propertyQuota;
    return this;
  }

  /**
   * Get propertyQuota
   * @return propertyQuota
   */
  @javax.annotation.Nullable
  public PropertyQuota getPropertyQuota() {
    return propertyQuota;
  }

  public void setPropertyQuota(PropertyQuota propertyQuota) {
    this.propertyQuota = propertyQuota;
  }


  public RunPivotReportResponse rows(List<Row> rows) {
    this.rows = rows;
    return this;
  }

  public RunPivotReportResponse addRowsItem(Row rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * Rows of dimension value combinations and metric values in the report.
   * @return rows
   */
  @javax.annotation.Nullable
  public List<Row> getRows() {
    return rows;
  }

  public void setRows(List<Row> rows) {
    this.rows = rows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunPivotReportResponse runPivotReportResponse = (RunPivotReportResponse) o;
    return Objects.equals(this.aggregates, runPivotReportResponse.aggregates) &&
        Objects.equals(this.dimensionHeaders, runPivotReportResponse.dimensionHeaders) &&
        Objects.equals(this.kind, runPivotReportResponse.kind) &&
        Objects.equals(this.metadata, runPivotReportResponse.metadata) &&
        Objects.equals(this.metricHeaders, runPivotReportResponse.metricHeaders) &&
        Objects.equals(this.pivotHeaders, runPivotReportResponse.pivotHeaders) &&
        Objects.equals(this.propertyQuota, runPivotReportResponse.propertyQuota) &&
        Objects.equals(this.rows, runPivotReportResponse.rows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregates, dimensionHeaders, kind, metadata, metricHeaders, pivotHeaders, propertyQuota, rows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunPivotReportResponse {\n");
    sb.append("    aggregates: ").append(toIndentedString(aggregates)).append("\n");
    sb.append("    dimensionHeaders: ").append(toIndentedString(dimensionHeaders)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    metricHeaders: ").append(toIndentedString(metricHeaders)).append("\n");
    sb.append("    pivotHeaders: ").append(toIndentedString(pivotHeaders)).append("\n");
    sb.append("    propertyQuota: ").append(toIndentedString(propertyQuota)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregates");
    openapiFields.add("dimensionHeaders");
    openapiFields.add("kind");
    openapiFields.add("metadata");
    openapiFields.add("metricHeaders");
    openapiFields.add("pivotHeaders");
    openapiFields.add("propertyQuota");
    openapiFields.add("rows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunPivotReportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunPivotReportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunPivotReportResponse is not found in the empty JSON string", RunPivotReportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunPivotReportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunPivotReportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("aggregates") != null && !jsonObj.get("aggregates").isJsonNull()) {
        JsonArray jsonArrayaggregates = jsonObj.getAsJsonArray("aggregates");
        if (jsonArrayaggregates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aggregates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aggregates` to be an array in the JSON string but got `%s`", jsonObj.get("aggregates").toString()));
          }

          // validate the optional field `aggregates` (array)
          for (int i = 0; i < jsonArrayaggregates.size(); i++) {
            Row.validateJsonElement(jsonArrayaggregates.get(i));
          };
        }
      }
      if (jsonObj.get("dimensionHeaders") != null && !jsonObj.get("dimensionHeaders").isJsonNull()) {
        JsonArray jsonArraydimensionHeaders = jsonObj.getAsJsonArray("dimensionHeaders");
        if (jsonArraydimensionHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensionHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensionHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionHeaders").toString()));
          }

          // validate the optional field `dimensionHeaders` (array)
          for (int i = 0; i < jsonArraydimensionHeaders.size(); i++) {
            DimensionHeader.validateJsonElement(jsonArraydimensionHeaders.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        ResponseMetaData.validateJsonElement(jsonObj.get("metadata"));
      }
      if (jsonObj.get("metricHeaders") != null && !jsonObj.get("metricHeaders").isJsonNull()) {
        JsonArray jsonArraymetricHeaders = jsonObj.getAsJsonArray("metricHeaders");
        if (jsonArraymetricHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("metricHeaders").toString()));
          }

          // validate the optional field `metricHeaders` (array)
          for (int i = 0; i < jsonArraymetricHeaders.size(); i++) {
            MetricHeader.validateJsonElement(jsonArraymetricHeaders.get(i));
          };
        }
      }
      if (jsonObj.get("pivotHeaders") != null && !jsonObj.get("pivotHeaders").isJsonNull()) {
        JsonArray jsonArraypivotHeaders = jsonObj.getAsJsonArray("pivotHeaders");
        if (jsonArraypivotHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pivotHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pivotHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("pivotHeaders").toString()));
          }

          // validate the optional field `pivotHeaders` (array)
          for (int i = 0; i < jsonArraypivotHeaders.size(); i++) {
            PivotHeader.validateJsonElement(jsonArraypivotHeaders.get(i));
          };
        }
      }
      // validate the optional field `propertyQuota`
      if (jsonObj.get("propertyQuota") != null && !jsonObj.get("propertyQuota").isJsonNull()) {
        PropertyQuota.validateJsonElement(jsonObj.get("propertyQuota"));
      }
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull()) {
        JsonArray jsonArrayrows = jsonObj.getAsJsonArray("rows");
        if (jsonArrayrows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
          }

          // validate the optional field `rows` (array)
          for (int i = 0; i < jsonArrayrows.size(); i++) {
            Row.validateJsonElement(jsonArrayrows.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunPivotReportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunPivotReportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunPivotReportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunPivotReportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RunPivotReportResponse>() {
           @Override
           public void write(JsonWriter out, RunPivotReportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunPivotReportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunPivotReportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunPivotReportResponse
   * @throws IOException if the JSON string is invalid with respect to RunPivotReportResponse
   */
  public static RunPivotReportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunPivotReportResponse.class);
  }

  /**
   * Convert an instance of RunPivotReportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

