/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Explains a metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricMetadata {
  public static final String SERIALIZED_NAME_API_NAME = "apiName";
  @SerializedName(SERIALIZED_NAME_API_NAME)
  private String apiName;

  /**
   * Gets or Sets blockedReasons
   */
  @JsonAdapter(BlockedReasonsEnum.Adapter.class)
  public enum BlockedReasonsEnum {
    BLOCKED_REASON_UNSPECIFIED("BLOCKED_REASON_UNSPECIFIED"),
    
    NO_REVENUE_METRICS("NO_REVENUE_METRICS"),
    
    NO_COST_METRICS("NO_COST_METRICS");

    private String value;

    BlockedReasonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlockedReasonsEnum fromValue(String value) {
      for (BlockedReasonsEnum b : BlockedReasonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BlockedReasonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlockedReasonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlockedReasonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BlockedReasonsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BlockedReasonsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BLOCKED_REASONS = "blockedReasons";
  @SerializedName(SERIALIZED_NAME_BLOCKED_REASONS)
  private List<BlockedReasonsEnum> blockedReasons = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CUSTOM_DEFINITION = "customDefinition";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DEFINITION)
  private Boolean customDefinition;

  public static final String SERIALIZED_NAME_DEPRECATED_API_NAMES = "deprecatedApiNames";
  @SerializedName(SERIALIZED_NAME_DEPRECATED_API_NAMES)
  private List<String> deprecatedApiNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  /**
   * The type of this metric.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    METRIC_TYPE_UNSPECIFIED("METRIC_TYPE_UNSPECIFIED"),
    
    TYPE_INTEGER("TYPE_INTEGER"),
    
    TYPE_FLOAT("TYPE_FLOAT"),
    
    TYPE_SECONDS("TYPE_SECONDS"),
    
    TYPE_MILLISECONDS("TYPE_MILLISECONDS"),
    
    TYPE_MINUTES("TYPE_MINUTES"),
    
    TYPE_HOURS("TYPE_HOURS"),
    
    TYPE_STANDARD("TYPE_STANDARD"),
    
    TYPE_CURRENCY("TYPE_CURRENCY"),
    
    TYPE_FEET("TYPE_FEET"),
    
    TYPE_MILES("TYPE_MILES"),
    
    TYPE_METERS("TYPE_METERS"),
    
    TYPE_KILOMETERS("TYPE_KILOMETERS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UI_NAME = "uiName";
  @SerializedName(SERIALIZED_NAME_UI_NAME)
  private String uiName;

  public MetricMetadata() {
  }

  public MetricMetadata apiName(String apiName) {
    this.apiName = apiName;
    return this;
  }

  /**
   * A metric name. Useable in [Metric](#Metric)&#39;s &#x60;name&#x60;. For example, &#x60;eventCount&#x60;.
   * @return apiName
   */
  @javax.annotation.Nullable
  public String getApiName() {
    return apiName;
  }

  public void setApiName(String apiName) {
    this.apiName = apiName;
  }


  public MetricMetadata blockedReasons(List<BlockedReasonsEnum> blockedReasons) {
    this.blockedReasons = blockedReasons;
    return this;
  }

  public MetricMetadata addBlockedReasonsItem(BlockedReasonsEnum blockedReasonsItem) {
    if (this.blockedReasons == null) {
      this.blockedReasons = new ArrayList<>();
    }
    this.blockedReasons.add(blockedReasonsItem);
    return this;
  }

  /**
   * If reasons are specified, your access is blocked to this metric for this property. API requests from you to this property for this metric will succeed; however, the report will contain only zeros for this metric. API requests with metric filters on blocked metrics will fail. If reasons are empty, you have access to this metric. To learn more, see [Access and data-restriction management](https://support.google.com/analytics/answer/10851388).
   * @return blockedReasons
   */
  @javax.annotation.Nullable
  public List<BlockedReasonsEnum> getBlockedReasons() {
    return blockedReasons;
  }

  public void setBlockedReasons(List<BlockedReasonsEnum> blockedReasons) {
    this.blockedReasons = blockedReasons;
  }


  public MetricMetadata category(String category) {
    this.category = category;
    return this;
  }

  /**
   * The display name of the category that this metrics belongs to. Similar dimensions and metrics are categorized together.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public MetricMetadata customDefinition(Boolean customDefinition) {
    this.customDefinition = customDefinition;
    return this;
  }

  /**
   * True if the metric is a custom metric for this property.
   * @return customDefinition
   */
  @javax.annotation.Nullable
  public Boolean getCustomDefinition() {
    return customDefinition;
  }

  public void setCustomDefinition(Boolean customDefinition) {
    this.customDefinition = customDefinition;
  }


  public MetricMetadata deprecatedApiNames(List<String> deprecatedApiNames) {
    this.deprecatedApiNames = deprecatedApiNames;
    return this;
  }

  public MetricMetadata addDeprecatedApiNamesItem(String deprecatedApiNamesItem) {
    if (this.deprecatedApiNames == null) {
      this.deprecatedApiNames = new ArrayList<>();
    }
    this.deprecatedApiNames.add(deprecatedApiNamesItem);
    return this;
  }

  /**
   * Still usable but deprecated names for this metric. If populated, this metric is available by either &#x60;apiName&#x60; or one of &#x60;deprecatedApiNames&#x60; for a period of time. After the deprecation period, the metric will be available only by &#x60;apiName&#x60;.
   * @return deprecatedApiNames
   */
  @javax.annotation.Nullable
  public List<String> getDeprecatedApiNames() {
    return deprecatedApiNames;
  }

  public void setDeprecatedApiNames(List<String> deprecatedApiNames) {
    this.deprecatedApiNames = deprecatedApiNames;
  }


  public MetricMetadata description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of how this metric is used and calculated.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MetricMetadata expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * The mathematical expression for this derived metric. Can be used in [Metric](#Metric)&#39;s &#x60;expression&#x60; field for equivalent reports. Most metrics are not expressions, and for non-expressions, this field is empty.
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public MetricMetadata type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this metric.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MetricMetadata uiName(String uiName) {
    this.uiName = uiName;
    return this;
  }

  /**
   * This metric&#39;s name within the Google Analytics user interface. For example, &#x60;Event count&#x60;.
   * @return uiName
   */
  @javax.annotation.Nullable
  public String getUiName() {
    return uiName;
  }

  public void setUiName(String uiName) {
    this.uiName = uiName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricMetadata metricMetadata = (MetricMetadata) o;
    return Objects.equals(this.apiName, metricMetadata.apiName) &&
        Objects.equals(this.blockedReasons, metricMetadata.blockedReasons) &&
        Objects.equals(this.category, metricMetadata.category) &&
        Objects.equals(this.customDefinition, metricMetadata.customDefinition) &&
        Objects.equals(this.deprecatedApiNames, metricMetadata.deprecatedApiNames) &&
        Objects.equals(this.description, metricMetadata.description) &&
        Objects.equals(this.expression, metricMetadata.expression) &&
        Objects.equals(this.type, metricMetadata.type) &&
        Objects.equals(this.uiName, metricMetadata.uiName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiName, blockedReasons, category, customDefinition, deprecatedApiNames, description, expression, type, uiName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricMetadata {\n");
    sb.append("    apiName: ").append(toIndentedString(apiName)).append("\n");
    sb.append("    blockedReasons: ").append(toIndentedString(blockedReasons)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    customDefinition: ").append(toIndentedString(customDefinition)).append("\n");
    sb.append("    deprecatedApiNames: ").append(toIndentedString(deprecatedApiNames)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uiName: ").append(toIndentedString(uiName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiName");
    openapiFields.add("blockedReasons");
    openapiFields.add("category");
    openapiFields.add("customDefinition");
    openapiFields.add("deprecatedApiNames");
    openapiFields.add("description");
    openapiFields.add("expression");
    openapiFields.add("type");
    openapiFields.add("uiName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricMetadata is not found in the empty JSON string", MetricMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiName") != null && !jsonObj.get("apiName").isJsonNull()) && !jsonObj.get("apiName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockedReasons") != null && !jsonObj.get("blockedReasons").isJsonNull() && !jsonObj.get("blockedReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockedReasons` to be an array in the JSON string but got `%s`", jsonObj.get("blockedReasons").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deprecatedApiNames") != null && !jsonObj.get("deprecatedApiNames").isJsonNull() && !jsonObj.get("deprecatedApiNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deprecatedApiNames` to be an array in the JSON string but got `%s`", jsonObj.get("deprecatedApiNames").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uiName") != null && !jsonObj.get("uiName").isJsonNull()) && !jsonObj.get("uiName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uiName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uiName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricMetadata>() {
           @Override
           public void write(JsonWriter out, MetricMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricMetadata
   * @throws IOException if the JSON string is invalid with respect to MetricMetadata
   */
  public static MetricMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricMetadata.class);
  }

  /**
   * Convert an instance of MetricMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

