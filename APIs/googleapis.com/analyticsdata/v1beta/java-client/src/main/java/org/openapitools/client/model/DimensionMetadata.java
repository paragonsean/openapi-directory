/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Explains a dimension.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DimensionMetadata {
  public static final String SERIALIZED_NAME_API_NAME = "apiName";
  @SerializedName(SERIALIZED_NAME_API_NAME)
  private String apiName;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CUSTOM_DEFINITION = "customDefinition";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DEFINITION)
  private Boolean customDefinition;

  public static final String SERIALIZED_NAME_DEPRECATED_API_NAMES = "deprecatedApiNames";
  @SerializedName(SERIALIZED_NAME_DEPRECATED_API_NAMES)
  private List<String> deprecatedApiNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_UI_NAME = "uiName";
  @SerializedName(SERIALIZED_NAME_UI_NAME)
  private String uiName;

  public DimensionMetadata() {
  }

  public DimensionMetadata apiName(String apiName) {
    this.apiName = apiName;
    return this;
  }

  /**
   * This dimension&#39;s name. Useable in [Dimension](#Dimension)&#39;s &#x60;name&#x60;. For example, &#x60;eventName&#x60;.
   * @return apiName
   */
  @javax.annotation.Nullable
  public String getApiName() {
    return apiName;
  }

  public void setApiName(String apiName) {
    this.apiName = apiName;
  }


  public DimensionMetadata category(String category) {
    this.category = category;
    return this;
  }

  /**
   * The display name of the category that this dimension belongs to. Similar dimensions and metrics are categorized together.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public DimensionMetadata customDefinition(Boolean customDefinition) {
    this.customDefinition = customDefinition;
    return this;
  }

  /**
   * True if the dimension is custom to this property. This includes user, event, &amp; item scoped custom dimensions; to learn more about custom dimensions, see https://support.google.com/analytics/answer/14240153. This also include custom channel groups; to learn more about custom channel groups, see https://support.google.com/analytics/answer/13051316.
   * @return customDefinition
   */
  @javax.annotation.Nullable
  public Boolean getCustomDefinition() {
    return customDefinition;
  }

  public void setCustomDefinition(Boolean customDefinition) {
    this.customDefinition = customDefinition;
  }


  public DimensionMetadata deprecatedApiNames(List<String> deprecatedApiNames) {
    this.deprecatedApiNames = deprecatedApiNames;
    return this;
  }

  public DimensionMetadata addDeprecatedApiNamesItem(String deprecatedApiNamesItem) {
    if (this.deprecatedApiNames == null) {
      this.deprecatedApiNames = new ArrayList<>();
    }
    this.deprecatedApiNames.add(deprecatedApiNamesItem);
    return this;
  }

  /**
   * Still usable but deprecated names for this dimension. If populated, this dimension is available by either &#x60;apiName&#x60; or one of &#x60;deprecatedApiNames&#x60; for a period of time. After the deprecation period, the dimension will be available only by &#x60;apiName&#x60;.
   * @return deprecatedApiNames
   */
  @javax.annotation.Nullable
  public List<String> getDeprecatedApiNames() {
    return deprecatedApiNames;
  }

  public void setDeprecatedApiNames(List<String> deprecatedApiNames) {
    this.deprecatedApiNames = deprecatedApiNames;
  }


  public DimensionMetadata description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of how this dimension is used and calculated.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DimensionMetadata uiName(String uiName) {
    this.uiName = uiName;
    return this;
  }

  /**
   * This dimension&#39;s name within the Google Analytics user interface. For example, &#x60;Event name&#x60;.
   * @return uiName
   */
  @javax.annotation.Nullable
  public String getUiName() {
    return uiName;
  }

  public void setUiName(String uiName) {
    this.uiName = uiName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DimensionMetadata dimensionMetadata = (DimensionMetadata) o;
    return Objects.equals(this.apiName, dimensionMetadata.apiName) &&
        Objects.equals(this.category, dimensionMetadata.category) &&
        Objects.equals(this.customDefinition, dimensionMetadata.customDefinition) &&
        Objects.equals(this.deprecatedApiNames, dimensionMetadata.deprecatedApiNames) &&
        Objects.equals(this.description, dimensionMetadata.description) &&
        Objects.equals(this.uiName, dimensionMetadata.uiName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiName, category, customDefinition, deprecatedApiNames, description, uiName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DimensionMetadata {\n");
    sb.append("    apiName: ").append(toIndentedString(apiName)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    customDefinition: ").append(toIndentedString(customDefinition)).append("\n");
    sb.append("    deprecatedApiNames: ").append(toIndentedString(deprecatedApiNames)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    uiName: ").append(toIndentedString(uiName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiName");
    openapiFields.add("category");
    openapiFields.add("customDefinition");
    openapiFields.add("deprecatedApiNames");
    openapiFields.add("description");
    openapiFields.add("uiName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DimensionMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DimensionMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DimensionMetadata is not found in the empty JSON string", DimensionMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DimensionMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DimensionMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiName") != null && !jsonObj.get("apiName").isJsonNull()) && !jsonObj.get("apiName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiName").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deprecatedApiNames") != null && !jsonObj.get("deprecatedApiNames").isJsonNull() && !jsonObj.get("deprecatedApiNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deprecatedApiNames` to be an array in the JSON string but got `%s`", jsonObj.get("deprecatedApiNames").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("uiName") != null && !jsonObj.get("uiName").isJsonNull()) && !jsonObj.get("uiName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uiName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uiName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DimensionMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DimensionMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DimensionMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DimensionMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<DimensionMetadata>() {
           @Override
           public void write(JsonWriter out, DimensionMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DimensionMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DimensionMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DimensionMetadata
   * @throws IOException if the JSON string is invalid with respect to DimensionMetadata
   */
  public static DimensionMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DimensionMetadata.class);
  }

  /**
   * Convert an instance of DimensionMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

