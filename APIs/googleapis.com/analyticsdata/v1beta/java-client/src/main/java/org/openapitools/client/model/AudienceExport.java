/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V1betaAudienceDimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An audience export is a list of users in an audience at the time of the list&#39;s creation. One audience may have multiple audience exports created for different days.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudienceExport {
  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  private String audience;

  public static final String SERIALIZED_NAME_AUDIENCE_DISPLAY_NAME = "audienceDisplayName";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_DISPLAY_NAME)
  private String audienceDisplayName;

  public static final String SERIALIZED_NAME_BEGIN_CREATING_TIME = "beginCreatingTime";
  @SerializedName(SERIALIZED_NAME_BEGIN_CREATING_TIME)
  private String beginCreatingTime;

  public static final String SERIALIZED_NAME_CREATION_QUOTA_TOKENS_CHARGED = "creationQuotaTokensCharged";
  @SerializedName(SERIALIZED_NAME_CREATION_QUOTA_TOKENS_CHARGED)
  private Integer creationQuotaTokensCharged;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<V1betaAudienceDimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENTAGE_COMPLETED = "percentageCompleted";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_COMPLETED)
  private Double percentageCompleted;

  public static final String SERIALIZED_NAME_ROW_COUNT = "rowCount";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Integer rowCount;

  /**
   * Output only. The current state for this AudienceExport.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    FAILED("FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public AudienceExport() {
  }

  public AudienceExport(
     String audienceDisplayName, 
     String beginCreatingTime, 
     Integer creationQuotaTokensCharged, 
     String errorMessage, 
     String name, 
     Double percentageCompleted, 
     Integer rowCount, 
     StateEnum state
  ) {
    this();
    this.audienceDisplayName = audienceDisplayName;
    this.beginCreatingTime = beginCreatingTime;
    this.creationQuotaTokensCharged = creationQuotaTokensCharged;
    this.errorMessage = errorMessage;
    this.name = name;
    this.percentageCompleted = percentageCompleted;
    this.rowCount = rowCount;
    this.state = state;
  }

  public AudienceExport audience(String audience) {
    this.audience = audience;
    return this;
  }

  /**
   * Required. The audience resource name. This resource name identifies the audience being listed and is shared between the Analytics Data &amp; Admin APIs. Format: &#x60;properties/{property}/audiences/{audience}&#x60;
   * @return audience
   */
  @javax.annotation.Nullable
  public String getAudience() {
    return audience;
  }

  public void setAudience(String audience) {
    this.audience = audience;
  }


  /**
   * Output only. The descriptive display name for this audience. For example, \&quot;Purchasers\&quot;.
   * @return audienceDisplayName
   */
  @javax.annotation.Nullable
  public String getAudienceDisplayName() {
    return audienceDisplayName;
  }



  /**
   * Output only. The time when CreateAudienceExport was called and the AudienceExport began the &#x60;CREATING&#x60; state.
   * @return beginCreatingTime
   */
  @javax.annotation.Nullable
  public String getBeginCreatingTime() {
    return beginCreatingTime;
  }



  /**
   * Output only. The total quota tokens charged during creation of the AudienceExport. Because this token count is based on activity from the &#x60;CREATING&#x60; state, this tokens charged will be fixed once an AudienceExport enters the &#x60;ACTIVE&#x60; or &#x60;FAILED&#x60; states.
   * @return creationQuotaTokensCharged
   */
  @javax.annotation.Nullable
  public Integer getCreationQuotaTokensCharged() {
    return creationQuotaTokensCharged;
  }



  public AudienceExport dimensions(List<V1betaAudienceDimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public AudienceExport addDimensionsItem(V1betaAudienceDimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * Required. The dimensions requested and displayed in the query response.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<V1betaAudienceDimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<V1betaAudienceDimension> dimensions) {
    this.dimensions = dimensions;
  }


  /**
   * Output only. Error message is populated when an audience export fails during creation. A common reason for such a failure is quota exhaustion.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }



  /**
   * Output only. Identifier. The audience export resource name assigned during creation. This resource name identifies this &#x60;AudienceExport&#x60;. Format: &#x60;properties/{property}/audienceExports/{audience_export}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The percentage completed for this audience export ranging between 0 to 100.
   * @return percentageCompleted
   */
  @javax.annotation.Nullable
  public Double getPercentageCompleted() {
    return percentageCompleted;
  }



  /**
   * Output only. The total number of rows in the AudienceExport result.
   * @return rowCount
   */
  @javax.annotation.Nullable
  public Integer getRowCount() {
    return rowCount;
  }



  /**
   * Output only. The current state for this AudienceExport.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudienceExport audienceExport = (AudienceExport) o;
    return Objects.equals(this.audience, audienceExport.audience) &&
        Objects.equals(this.audienceDisplayName, audienceExport.audienceDisplayName) &&
        Objects.equals(this.beginCreatingTime, audienceExport.beginCreatingTime) &&
        Objects.equals(this.creationQuotaTokensCharged, audienceExport.creationQuotaTokensCharged) &&
        Objects.equals(this.dimensions, audienceExport.dimensions) &&
        Objects.equals(this.errorMessage, audienceExport.errorMessage) &&
        Objects.equals(this.name, audienceExport.name) &&
        Objects.equals(this.percentageCompleted, audienceExport.percentageCompleted) &&
        Objects.equals(this.rowCount, audienceExport.rowCount) &&
        Objects.equals(this.state, audienceExport.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audience, audienceDisplayName, beginCreatingTime, creationQuotaTokensCharged, dimensions, errorMessage, name, percentageCompleted, rowCount, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudienceExport {\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    audienceDisplayName: ").append(toIndentedString(audienceDisplayName)).append("\n");
    sb.append("    beginCreatingTime: ").append(toIndentedString(beginCreatingTime)).append("\n");
    sb.append("    creationQuotaTokensCharged: ").append(toIndentedString(creationQuotaTokensCharged)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentageCompleted: ").append(toIndentedString(percentageCompleted)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audience");
    openapiFields.add("audienceDisplayName");
    openapiFields.add("beginCreatingTime");
    openapiFields.add("creationQuotaTokensCharged");
    openapiFields.add("dimensions");
    openapiFields.add("errorMessage");
    openapiFields.add("name");
    openapiFields.add("percentageCompleted");
    openapiFields.add("rowCount");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudienceExport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudienceExport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudienceExport is not found in the empty JSON string", AudienceExport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudienceExport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudienceExport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonNull()) && !jsonObj.get("audience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audience").toString()));
      }
      if ((jsonObj.get("audienceDisplayName") != null && !jsonObj.get("audienceDisplayName").isJsonNull()) && !jsonObj.get("audienceDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audienceDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audienceDisplayName").toString()));
      }
      if ((jsonObj.get("beginCreatingTime") != null && !jsonObj.get("beginCreatingTime").isJsonNull()) && !jsonObj.get("beginCreatingTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beginCreatingTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beginCreatingTime").toString()));
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            V1betaAudienceDimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudienceExport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudienceExport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudienceExport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudienceExport.class));

       return (TypeAdapter<T>) new TypeAdapter<AudienceExport>() {
           @Override
           public void write(JsonWriter out, AudienceExport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudienceExport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudienceExport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudienceExport
   * @throws IOException if the JSON string is invalid with respect to AudienceExport
   */
  public static AudienceExport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudienceExport.class);
  }

  /**
   * Convert an instance of AudienceExport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

