/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.FilterExpression;
import org.openapitools.client.model.Metric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for compatibility information for a report&#39;s dimensions and metrics. Check compatibility provides a preview of the compatibility of a report; fields shared with the &#x60;runReport&#x60; request should be the same values as in your &#x60;runReport&#x60; request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckCompatibilityRequest {
  /**
   * Filters the dimensions and metrics in the response to just this compatibility. Commonly used as &#x60;”compatibilityFilter”: “COMPATIBLE”&#x60; to only return compatible dimensions &amp; metrics.
   */
  @JsonAdapter(CompatibilityFilterEnum.Adapter.class)
  public enum CompatibilityFilterEnum {
    COMPATIBILITY_UNSPECIFIED("COMPATIBILITY_UNSPECIFIED"),
    
    COMPATIBLE("COMPATIBLE"),
    
    INCOMPATIBLE("INCOMPATIBLE");

    private String value;

    CompatibilityFilterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompatibilityFilterEnum fromValue(String value) {
      for (CompatibilityFilterEnum b : CompatibilityFilterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompatibilityFilterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompatibilityFilterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompatibilityFilterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompatibilityFilterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompatibilityFilterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPATIBILITY_FILTER = "compatibilityFilter";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_FILTER)
  private CompatibilityFilterEnum compatibilityFilter;

  public static final String SERIALIZED_NAME_DIMENSION_FILTER = "dimensionFilter";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTER)
  private FilterExpression dimensionFilter;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<Dimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_FILTER = "metricFilter";
  @SerializedName(SERIALIZED_NAME_METRIC_FILTER)
  private FilterExpression metricFilter;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<Metric> metrics = new ArrayList<>();

  public CheckCompatibilityRequest() {
  }

  public CheckCompatibilityRequest compatibilityFilter(CompatibilityFilterEnum compatibilityFilter) {
    this.compatibilityFilter = compatibilityFilter;
    return this;
  }

  /**
   * Filters the dimensions and metrics in the response to just this compatibility. Commonly used as &#x60;”compatibilityFilter”: “COMPATIBLE”&#x60; to only return compatible dimensions &amp; metrics.
   * @return compatibilityFilter
   */
  @javax.annotation.Nullable
  public CompatibilityFilterEnum getCompatibilityFilter() {
    return compatibilityFilter;
  }

  public void setCompatibilityFilter(CompatibilityFilterEnum compatibilityFilter) {
    this.compatibilityFilter = compatibilityFilter;
  }


  public CheckCompatibilityRequest dimensionFilter(FilterExpression dimensionFilter) {
    this.dimensionFilter = dimensionFilter;
    return this;
  }

  /**
   * Get dimensionFilter
   * @return dimensionFilter
   */
  @javax.annotation.Nullable
  public FilterExpression getDimensionFilter() {
    return dimensionFilter;
  }

  public void setDimensionFilter(FilterExpression dimensionFilter) {
    this.dimensionFilter = dimensionFilter;
  }


  public CheckCompatibilityRequest dimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public CheckCompatibilityRequest addDimensionsItem(Dimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * The dimensions in this report. &#x60;dimensions&#x60; should be the same value as in your &#x60;runReport&#x60; request.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<Dimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
  }


  public CheckCompatibilityRequest metricFilter(FilterExpression metricFilter) {
    this.metricFilter = metricFilter;
    return this;
  }

  /**
   * Get metricFilter
   * @return metricFilter
   */
  @javax.annotation.Nullable
  public FilterExpression getMetricFilter() {
    return metricFilter;
  }

  public void setMetricFilter(FilterExpression metricFilter) {
    this.metricFilter = metricFilter;
  }


  public CheckCompatibilityRequest metrics(List<Metric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public CheckCompatibilityRequest addMetricsItem(Metric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * The metrics in this report. &#x60;metrics&#x60; should be the same value as in your &#x60;runReport&#x60; request.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<Metric> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Metric> metrics) {
    this.metrics = metrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckCompatibilityRequest checkCompatibilityRequest = (CheckCompatibilityRequest) o;
    return Objects.equals(this.compatibilityFilter, checkCompatibilityRequest.compatibilityFilter) &&
        Objects.equals(this.dimensionFilter, checkCompatibilityRequest.dimensionFilter) &&
        Objects.equals(this.dimensions, checkCompatibilityRequest.dimensions) &&
        Objects.equals(this.metricFilter, checkCompatibilityRequest.metricFilter) &&
        Objects.equals(this.metrics, checkCompatibilityRequest.metrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compatibilityFilter, dimensionFilter, dimensions, metricFilter, metrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckCompatibilityRequest {\n");
    sb.append("    compatibilityFilter: ").append(toIndentedString(compatibilityFilter)).append("\n");
    sb.append("    dimensionFilter: ").append(toIndentedString(dimensionFilter)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    metricFilter: ").append(toIndentedString(metricFilter)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compatibilityFilter");
    openapiFields.add("dimensionFilter");
    openapiFields.add("dimensions");
    openapiFields.add("metricFilter");
    openapiFields.add("metrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckCompatibilityRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckCompatibilityRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckCompatibilityRequest is not found in the empty JSON string", CheckCompatibilityRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckCompatibilityRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckCompatibilityRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("compatibilityFilter") != null && !jsonObj.get("compatibilityFilter").isJsonNull()) && !jsonObj.get("compatibilityFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compatibilityFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compatibilityFilter").toString()));
      }
      // validate the optional field `compatibilityFilter`
      if (jsonObj.get("compatibilityFilter") != null && !jsonObj.get("compatibilityFilter").isJsonNull()) {
        CompatibilityFilterEnum.validateJsonElement(jsonObj.get("compatibilityFilter"));
      }
      // validate the optional field `dimensionFilter`
      if (jsonObj.get("dimensionFilter") != null && !jsonObj.get("dimensionFilter").isJsonNull()) {
        FilterExpression.validateJsonElement(jsonObj.get("dimensionFilter"));
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            Dimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      // validate the optional field `metricFilter`
      if (jsonObj.get("metricFilter") != null && !jsonObj.get("metricFilter").isJsonNull()) {
        FilterExpression.validateJsonElement(jsonObj.get("metricFilter"));
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            Metric.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckCompatibilityRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckCompatibilityRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckCompatibilityRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckCompatibilityRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckCompatibilityRequest>() {
           @Override
           public void write(JsonWriter out, CheckCompatibilityRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckCompatibilityRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckCompatibilityRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckCompatibilityRequest
   * @throws IOException if the JSON string is invalid with respect to CheckCompatibilityRequest
   */
  public static CheckCompatibilityRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckCompatibilityRequest.class);
  }

  /**
   * Convert an instance of CheckCompatibilityRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

