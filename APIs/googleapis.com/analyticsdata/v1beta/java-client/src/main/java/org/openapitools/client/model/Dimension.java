/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DimensionExpression;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dimensions are attributes of your data. For example, the dimension city indicates the city from which an event originates. Dimension values in report responses are strings; for example, the city could be \&quot;Paris\&quot; or \&quot;New York\&quot;. Requests are allowed up to 9 dimensions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dimension {
  public static final String SERIALIZED_NAME_DIMENSION_EXPRESSION = "dimensionExpression";
  @SerializedName(SERIALIZED_NAME_DIMENSION_EXPRESSION)
  private DimensionExpression dimensionExpression;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public Dimension() {
  }

  public Dimension dimensionExpression(DimensionExpression dimensionExpression) {
    this.dimensionExpression = dimensionExpression;
    return this;
  }

  /**
   * Get dimensionExpression
   * @return dimensionExpression
   */
  @javax.annotation.Nullable
  public DimensionExpression getDimensionExpression() {
    return dimensionExpression;
  }

  public void setDimensionExpression(DimensionExpression dimensionExpression) {
    this.dimensionExpression = dimensionExpression;
  }


  public Dimension name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the dimension. See the [API Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#dimensions) for the list of dimension names supported by core reporting methods such as &#x60;runReport&#x60; and &#x60;batchRunReports&#x60;. See [Realtime Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-api-schema#dimensions) for the list of dimension names supported by the &#x60;runRealtimeReport&#x60; method. See [Funnel Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/exploration-api-schema#dimensions) for the list of dimension names supported by the &#x60;runFunnelReport&#x60; method. If &#x60;dimensionExpression&#x60; is specified, &#x60;name&#x60; can be any string that you would like within the allowed character set. For example if a &#x60;dimensionExpression&#x60; concatenates &#x60;country&#x60; and &#x60;city&#x60;, you could call that dimension &#x60;countryAndCity&#x60;. Dimension names that you choose must match the regular expression &#x60;^[a-zA-Z0-9_]$&#x60;. Dimensions are referenced by &#x60;name&#x60; in &#x60;dimensionFilter&#x60;, &#x60;orderBys&#x60;, &#x60;dimensionExpression&#x60;, and &#x60;pivots&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dimension dimension = (Dimension) o;
    return Objects.equals(this.dimensionExpression, dimension.dimensionExpression) &&
        Objects.equals(this.name, dimension.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensionExpression, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dimension {\n");
    sb.append("    dimensionExpression: ").append(toIndentedString(dimensionExpression)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensionExpression");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dimension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dimension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dimension is not found in the empty JSON string", Dimension.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dimension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dimension` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dimensionExpression`
      if (jsonObj.get("dimensionExpression") != null && !jsonObj.get("dimensionExpression").isJsonNull()) {
        DimensionExpression.validateJsonElement(jsonObj.get("dimensionExpression"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dimension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dimension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dimension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dimension.class));

       return (TypeAdapter<T>) new TypeAdapter<Dimension>() {
           @Override
           public void write(JsonWriter out, Dimension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dimension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dimension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dimension
   * @throws IOException if the JSON string is invalid with respect to Dimension
   */
  public static Dimension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dimension.class);
  }

  /**
   * Convert an instance of Dimension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

