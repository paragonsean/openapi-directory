/*
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures the extended reporting date range for a cohort report. Specifies an offset duration to follow the cohorts over.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:54.521143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CohortsRange {
  public static final String SERIALIZED_NAME_END_OFFSET = "endOffset";
  @SerializedName(SERIALIZED_NAME_END_OFFSET)
  private Integer endOffset;

  /**
   * Required. The granularity used to interpret the &#x60;startOffset&#x60; and &#x60;endOffset&#x60; for the extended reporting date range for a cohort report.
   */
  @JsonAdapter(GranularityEnum.Adapter.class)
  public enum GranularityEnum {
    GRANULARITY_UNSPECIFIED("GRANULARITY_UNSPECIFIED"),
    
    DAILY("DAILY"),
    
    WEEKLY("WEEKLY"),
    
    MONTHLY("MONTHLY");

    private String value;

    GranularityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GranularityEnum fromValue(String value) {
      for (GranularityEnum b : GranularityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GranularityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GranularityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GranularityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GranularityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GranularityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRANULARITY = "granularity";
  @SerializedName(SERIALIZED_NAME_GRANULARITY)
  private GranularityEnum granularity;

  public static final String SERIALIZED_NAME_START_OFFSET = "startOffset";
  @SerializedName(SERIALIZED_NAME_START_OFFSET)
  private Integer startOffset;

  public CohortsRange() {
  }

  public CohortsRange endOffset(Integer endOffset) {
    this.endOffset = endOffset;
    return this;
  }

  /**
   * Required. &#x60;endOffset&#x60; specifies the end date of the extended reporting date range for a cohort report. &#x60;endOffset&#x60; can be any positive integer but is commonly set to 5 to 10 so that reports contain data on the cohort for the next several granularity time periods. If &#x60;granularity&#x60; is &#x60;DAILY&#x60;, the &#x60;endDate&#x60; of the extended reporting date range is &#x60;endDate&#x60; of the cohort plus &#x60;endOffset&#x60; days. If &#x60;granularity&#x60; is &#x60;WEEKLY&#x60;, the &#x60;endDate&#x60; of the extended reporting date range is &#x60;endDate&#x60; of the cohort plus &#x60;endOffset * 7&#x60; days. If &#x60;granularity&#x60; is &#x60;MONTHLY&#x60;, the &#x60;endDate&#x60; of the extended reporting date range is &#x60;endDate&#x60; of the cohort plus &#x60;endOffset * 30&#x60; days.
   * @return endOffset
   */
  @javax.annotation.Nullable
  public Integer getEndOffset() {
    return endOffset;
  }

  public void setEndOffset(Integer endOffset) {
    this.endOffset = endOffset;
  }


  public CohortsRange granularity(GranularityEnum granularity) {
    this.granularity = granularity;
    return this;
  }

  /**
   * Required. The granularity used to interpret the &#x60;startOffset&#x60; and &#x60;endOffset&#x60; for the extended reporting date range for a cohort report.
   * @return granularity
   */
  @javax.annotation.Nullable
  public GranularityEnum getGranularity() {
    return granularity;
  }

  public void setGranularity(GranularityEnum granularity) {
    this.granularity = granularity;
  }


  public CohortsRange startOffset(Integer startOffset) {
    this.startOffset = startOffset;
    return this;
  }

  /**
   * &#x60;startOffset&#x60; specifies the start date of the extended reporting date range for a cohort report. &#x60;startOffset&#x60; is commonly set to 0 so that reports contain data from the acquisition of the cohort forward. If &#x60;granularity&#x60; is &#x60;DAILY&#x60;, the &#x60;startDate&#x60; of the extended reporting date range is &#x60;startDate&#x60; of the cohort plus &#x60;startOffset&#x60; days. If &#x60;granularity&#x60; is &#x60;WEEKLY&#x60;, the &#x60;startDate&#x60; of the extended reporting date range is &#x60;startDate&#x60; of the cohort plus &#x60;startOffset * 7&#x60; days. If &#x60;granularity&#x60; is &#x60;MONTHLY&#x60;, the &#x60;startDate&#x60; of the extended reporting date range is &#x60;startDate&#x60; of the cohort plus &#x60;startOffset * 30&#x60; days.
   * @return startOffset
   */
  @javax.annotation.Nullable
  public Integer getStartOffset() {
    return startOffset;
  }

  public void setStartOffset(Integer startOffset) {
    this.startOffset = startOffset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CohortsRange cohortsRange = (CohortsRange) o;
    return Objects.equals(this.endOffset, cohortsRange.endOffset) &&
        Objects.equals(this.granularity, cohortsRange.granularity) &&
        Objects.equals(this.startOffset, cohortsRange.startOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endOffset, granularity, startOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CohortsRange {\n");
    sb.append("    endOffset: ").append(toIndentedString(endOffset)).append("\n");
    sb.append("    granularity: ").append(toIndentedString(granularity)).append("\n");
    sb.append("    startOffset: ").append(toIndentedString(startOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endOffset");
    openapiFields.add("granularity");
    openapiFields.add("startOffset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CohortsRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CohortsRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CohortsRange is not found in the empty JSON string", CohortsRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CohortsRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CohortsRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("granularity") != null && !jsonObj.get("granularity").isJsonNull()) && !jsonObj.get("granularity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `granularity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("granularity").toString()));
      }
      // validate the optional field `granularity`
      if (jsonObj.get("granularity") != null && !jsonObj.get("granularity").isJsonNull()) {
        GranularityEnum.validateJsonElement(jsonObj.get("granularity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CohortsRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CohortsRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CohortsRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CohortsRange.class));

       return (TypeAdapter<T>) new TypeAdapter<CohortsRange>() {
           @Override
           public void write(JsonWriter out, CohortsRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CohortsRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CohortsRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CohortsRange
   * @throws IOException if the JSON string is invalid with respect to CohortsRange
   */
  public static CohortsRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CohortsRange.class);
  }

  /**
   * Convert an instance of CohortsRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

