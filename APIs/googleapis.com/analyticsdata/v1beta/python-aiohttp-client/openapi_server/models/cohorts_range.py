# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CohortsRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_offset: int=None, granularity: str=None, start_offset: int=None):
        """CohortsRange - a model defined in OpenAPI

        :param end_offset: The end_offset of this CohortsRange.
        :param granularity: The granularity of this CohortsRange.
        :param start_offset: The start_offset of this CohortsRange.
        """
        self.openapi_types = {
            'end_offset': int,
            'granularity': str,
            'start_offset': int
        }

        self.attribute_map = {
            'end_offset': 'endOffset',
            'granularity': 'granularity',
            'start_offset': 'startOffset'
        }

        self._end_offset = end_offset
        self._granularity = granularity
        self._start_offset = start_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CohortsRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CohortsRange of this CohortsRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_offset(self):
        """Gets the end_offset of this CohortsRange.

        Required. `endOffset` specifies the end date of the extended reporting date range for a cohort report. `endOffset` can be any positive integer but is commonly set to 5 to 10 so that reports contain data on the cohort for the next several granularity time periods. If `granularity` is `DAILY`, the `endDate` of the extended reporting date range is `endDate` of the cohort plus `endOffset` days. If `granularity` is `WEEKLY`, the `endDate` of the extended reporting date range is `endDate` of the cohort plus `endOffset * 7` days. If `granularity` is `MONTHLY`, the `endDate` of the extended reporting date range is `endDate` of the cohort plus `endOffset * 30` days.

        :return: The end_offset of this CohortsRange.
        :rtype: int
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """Sets the end_offset of this CohortsRange.

        Required. `endOffset` specifies the end date of the extended reporting date range for a cohort report. `endOffset` can be any positive integer but is commonly set to 5 to 10 so that reports contain data on the cohort for the next several granularity time periods. If `granularity` is `DAILY`, the `endDate` of the extended reporting date range is `endDate` of the cohort plus `endOffset` days. If `granularity` is `WEEKLY`, the `endDate` of the extended reporting date range is `endDate` of the cohort plus `endOffset * 7` days. If `granularity` is `MONTHLY`, the `endDate` of the extended reporting date range is `endDate` of the cohort plus `endOffset * 30` days.

        :param end_offset: The end_offset of this CohortsRange.
        :type end_offset: int
        """

        self._end_offset = end_offset

    @property
    def granularity(self):
        """Gets the granularity of this CohortsRange.

        Required. The granularity used to interpret the `startOffset` and `endOffset` for the extended reporting date range for a cohort report.

        :return: The granularity of this CohortsRange.
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this CohortsRange.

        Required. The granularity used to interpret the `startOffset` and `endOffset` for the extended reporting date range for a cohort report.

        :param granularity: The granularity of this CohortsRange.
        :type granularity: str
        """
        allowed_values = ["GRANULARITY_UNSPECIFIED", "DAILY", "WEEKLY", "MONTHLY"]  # noqa: E501
        if granularity not in allowed_values:
            raise ValueError(
                "Invalid value for `granularity` ({0}), must be one of {1}"
                .format(granularity, allowed_values)
            )

        self._granularity = granularity

    @property
    def start_offset(self):
        """Gets the start_offset of this CohortsRange.

        `startOffset` specifies the start date of the extended reporting date range for a cohort report. `startOffset` is commonly set to 0 so that reports contain data from the acquisition of the cohort forward. If `granularity` is `DAILY`, the `startDate` of the extended reporting date range is `startDate` of the cohort plus `startOffset` days. If `granularity` is `WEEKLY`, the `startDate` of the extended reporting date range is `startDate` of the cohort plus `startOffset * 7` days. If `granularity` is `MONTHLY`, the `startDate` of the extended reporting date range is `startDate` of the cohort plus `startOffset * 30` days.

        :return: The start_offset of this CohortsRange.
        :rtype: int
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """Sets the start_offset of this CohortsRange.

        `startOffset` specifies the start date of the extended reporting date range for a cohort report. `startOffset` is commonly set to 0 so that reports contain data from the acquisition of the cohort forward. If `granularity` is `DAILY`, the `startDate` of the extended reporting date range is `startDate` of the cohort plus `startOffset` days. If `granularity` is `WEEKLY`, the `startDate` of the extended reporting date range is `startDate` of the cohort plus `startOffset * 7` days. If `granularity` is `MONTHLY`, the `startDate` of the extended reporting date range is `startDate` of the cohort plus `startOffset * 30` days.

        :param start_offset: The start_offset of this CohortsRange.
        :type start_offset: int
        """

        self._start_offset = start_offset
