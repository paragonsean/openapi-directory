# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SamplingMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, samples_read_count: str=None, sampling_space_size: str=None):
        """SamplingMetadata - a model defined in OpenAPI

        :param samples_read_count: The samples_read_count of this SamplingMetadata.
        :param sampling_space_size: The sampling_space_size of this SamplingMetadata.
        """
        self.openapi_types = {
            'samples_read_count': str,
            'sampling_space_size': str
        }

        self.attribute_map = {
            'samples_read_count': 'samplesReadCount',
            'sampling_space_size': 'samplingSpaceSize'
        }

        self._samples_read_count = samples_read_count
        self._sampling_space_size = sampling_space_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SamplingMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SamplingMetadata of this SamplingMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def samples_read_count(self):
        """Gets the samples_read_count of this SamplingMetadata.

        The total number of events read in this sampled report for a date range. This is the size of the subset this property's data that was analyzed in this report.

        :return: The samples_read_count of this SamplingMetadata.
        :rtype: str
        """
        return self._samples_read_count

    @samples_read_count.setter
    def samples_read_count(self, samples_read_count):
        """Sets the samples_read_count of this SamplingMetadata.

        The total number of events read in this sampled report for a date range. This is the size of the subset this property's data that was analyzed in this report.

        :param samples_read_count: The samples_read_count of this SamplingMetadata.
        :type samples_read_count: str
        """

        self._samples_read_count = samples_read_count

    @property
    def sampling_space_size(self):
        """Gets the sampling_space_size of this SamplingMetadata.

        The total number of events present in this property's data that could have been analyzed in this report for a date range. Sampling uncovers the meaningful information about the larger data set, and this is the size of the larger data set. To calculate the percentage of available data that was used in this report, compute `samplesReadCount/samplingSpaceSize`.

        :return: The sampling_space_size of this SamplingMetadata.
        :rtype: str
        """
        return self._sampling_space_size

    @sampling_space_size.setter
    def sampling_space_size(self, sampling_space_size):
        """Sets the sampling_space_size of this SamplingMetadata.

        The total number of events present in this property's data that could have been analyzed in this report for a date range. Sampling uncovers the meaningful information about the larger data set, and this is the size of the larger data set. To calculate the percentage of available data that was used in this report, compute `samplesReadCount/samplingSpaceSize`.

        :param sampling_space_size: The sampling_space_size of this SamplingMetadata.
        :type sampling_space_size: str
        """

        self._sampling_space_size = sampling_space_size
