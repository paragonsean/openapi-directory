# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActiveMetricRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_name: str=None, restricted_metric_types: List[str]=None):
        """ActiveMetricRestriction - a model defined in OpenAPI

        :param metric_name: The metric_name of this ActiveMetricRestriction.
        :param restricted_metric_types: The restricted_metric_types of this ActiveMetricRestriction.
        """
        self.openapi_types = {
            'metric_name': str,
            'restricted_metric_types': List[str]
        }

        self.attribute_map = {
            'metric_name': 'metricName',
            'restricted_metric_types': 'restrictedMetricTypes'
        }

        self._metric_name = metric_name
        self._restricted_metric_types = restricted_metric_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActiveMetricRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActiveMetricRestriction of this ActiveMetricRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_name(self):
        """Gets the metric_name of this ActiveMetricRestriction.

        The name of the restricted metric.

        :return: The metric_name of this ActiveMetricRestriction.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this ActiveMetricRestriction.

        The name of the restricted metric.

        :param metric_name: The metric_name of this ActiveMetricRestriction.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def restricted_metric_types(self):
        """Gets the restricted_metric_types of this ActiveMetricRestriction.

        The reason for this metric's restriction.

        :return: The restricted_metric_types of this ActiveMetricRestriction.
        :rtype: List[str]
        """
        return self._restricted_metric_types

    @restricted_metric_types.setter
    def restricted_metric_types(self, restricted_metric_types):
        """Sets the restricted_metric_types of this ActiveMetricRestriction.

        The reason for this metric's restriction.

        :param restricted_metric_types: The restricted_metric_types of this ActiveMetricRestriction.
        :type restricted_metric_types: List[str]
        """
        allowed_values = ["RESTRICTED_METRIC_TYPE_UNSPECIFIED", "COST_DATA", "REVENUE_DATA"]  # noqa: E501
        if not set(restricted_metric_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `restricted_metric_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(restricted_metric_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._restricted_metric_types = restricted_metric_types
