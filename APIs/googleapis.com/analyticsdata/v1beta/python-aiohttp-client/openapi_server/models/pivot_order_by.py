# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pivot_selection import PivotSelection
from openapi_server import util


class PivotOrderBy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_name: str=None, pivot_selections: List[PivotSelection]=None):
        """PivotOrderBy - a model defined in OpenAPI

        :param metric_name: The metric_name of this PivotOrderBy.
        :param pivot_selections: The pivot_selections of this PivotOrderBy.
        """
        self.openapi_types = {
            'metric_name': str,
            'pivot_selections': List[PivotSelection]
        }

        self.attribute_map = {
            'metric_name': 'metricName',
            'pivot_selections': 'pivotSelections'
        }

        self._metric_name = metric_name
        self._pivot_selections = pivot_selections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PivotOrderBy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PivotOrderBy of this PivotOrderBy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_name(self):
        """Gets the metric_name of this PivotOrderBy.

        In the response to order by, order rows by this column. Must be a metric name from the request.

        :return: The metric_name of this PivotOrderBy.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this PivotOrderBy.

        In the response to order by, order rows by this column. Must be a metric name from the request.

        :param metric_name: The metric_name of this PivotOrderBy.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def pivot_selections(self):
        """Gets the pivot_selections of this PivotOrderBy.

        Used to select a dimension name and value pivot. If multiple pivot selections are given, the sort occurs on rows where all pivot selection dimension name and value pairs match the row's dimension name and value pair.

        :return: The pivot_selections of this PivotOrderBy.
        :rtype: List[PivotSelection]
        """
        return self._pivot_selections

    @pivot_selections.setter
    def pivot_selections(self, pivot_selections):
        """Sets the pivot_selections of this PivotOrderBy.

        Used to select a dimension name and value pivot. If multiple pivot selections are given, the sort occurs on rows where all pivot selection dimension name and value pairs match the row's dimension name and value pair.

        :param pivot_selections: The pivot_selections of this PivotOrderBy.
        :type pivot_selections: List[PivotSelection]
        """

        self._pivot_selections = pivot_selections
