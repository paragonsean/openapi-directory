# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.case_expression import CaseExpression
from openapi_server.models.concatenate_expression import ConcatenateExpression
from openapi_server import util


class DimensionExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concatenate: ConcatenateExpression=None, lower_case: CaseExpression=None, upper_case: CaseExpression=None):
        """DimensionExpression - a model defined in OpenAPI

        :param concatenate: The concatenate of this DimensionExpression.
        :param lower_case: The lower_case of this DimensionExpression.
        :param upper_case: The upper_case of this DimensionExpression.
        """
        self.openapi_types = {
            'concatenate': ConcatenateExpression,
            'lower_case': CaseExpression,
            'upper_case': CaseExpression
        }

        self.attribute_map = {
            'concatenate': 'concatenate',
            'lower_case': 'lowerCase',
            'upper_case': 'upperCase'
        }

        self._concatenate = concatenate
        self._lower_case = lower_case
        self._upper_case = upper_case

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DimensionExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DimensionExpression of this DimensionExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concatenate(self):
        """Gets the concatenate of this DimensionExpression.


        :return: The concatenate of this DimensionExpression.
        :rtype: ConcatenateExpression
        """
        return self._concatenate

    @concatenate.setter
    def concatenate(self, concatenate):
        """Sets the concatenate of this DimensionExpression.


        :param concatenate: The concatenate of this DimensionExpression.
        :type concatenate: ConcatenateExpression
        """

        self._concatenate = concatenate

    @property
    def lower_case(self):
        """Gets the lower_case of this DimensionExpression.


        :return: The lower_case of this DimensionExpression.
        :rtype: CaseExpression
        """
        return self._lower_case

    @lower_case.setter
    def lower_case(self, lower_case):
        """Sets the lower_case of this DimensionExpression.


        :param lower_case: The lower_case of this DimensionExpression.
        :type lower_case: CaseExpression
        """

        self._lower_case = lower_case

    @property
    def upper_case(self):
        """Gets the upper_case of this DimensionExpression.


        :return: The upper_case of this DimensionExpression.
        :rtype: CaseExpression
        """
        return self._upper_case

    @upper_case.setter
    def upper_case(self, upper_case):
        """Sets the upper_case of this DimensionExpression.


        :param upper_case: The upper_case of this DimensionExpression.
        :type upper_case: CaseExpression
        """

        self._upper_case = upper_case
