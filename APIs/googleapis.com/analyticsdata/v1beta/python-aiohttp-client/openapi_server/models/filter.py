# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.between_filter import BetweenFilter
from openapi_server.models.in_list_filter import InListFilter
from openapi_server.models.numeric_filter import NumericFilter
from openapi_server.models.string_filter import StringFilter
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, between_filter: BetweenFilter=None, field_name: str=None, in_list_filter: InListFilter=None, numeric_filter: NumericFilter=None, string_filter: StringFilter=None):
        """Filter - a model defined in OpenAPI

        :param between_filter: The between_filter of this Filter.
        :param field_name: The field_name of this Filter.
        :param in_list_filter: The in_list_filter of this Filter.
        :param numeric_filter: The numeric_filter of this Filter.
        :param string_filter: The string_filter of this Filter.
        """
        self.openapi_types = {
            'between_filter': BetweenFilter,
            'field_name': str,
            'in_list_filter': InListFilter,
            'numeric_filter': NumericFilter,
            'string_filter': StringFilter
        }

        self.attribute_map = {
            'between_filter': 'betweenFilter',
            'field_name': 'fieldName',
            'in_list_filter': 'inListFilter',
            'numeric_filter': 'numericFilter',
            'string_filter': 'stringFilter'
        }

        self._between_filter = between_filter
        self._field_name = field_name
        self._in_list_filter = in_list_filter
        self._numeric_filter = numeric_filter
        self._string_filter = string_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def between_filter(self):
        """Gets the between_filter of this Filter.


        :return: The between_filter of this Filter.
        :rtype: BetweenFilter
        """
        return self._between_filter

    @between_filter.setter
    def between_filter(self, between_filter):
        """Sets the between_filter of this Filter.


        :param between_filter: The between_filter of this Filter.
        :type between_filter: BetweenFilter
        """

        self._between_filter = between_filter

    @property
    def field_name(self):
        """Gets the field_name of this Filter.

        The dimension name or metric name. In most methods, dimensions & metrics can be used for the first time in this field. However in a RunPivotReportRequest, this field must be additionally specified by name in the RunPivotReportRequest's dimensions or metrics.

        :return: The field_name of this Filter.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this Filter.

        The dimension name or metric name. In most methods, dimensions & metrics can be used for the first time in this field. However in a RunPivotReportRequest, this field must be additionally specified by name in the RunPivotReportRequest's dimensions or metrics.

        :param field_name: The field_name of this Filter.
        :type field_name: str
        """

        self._field_name = field_name

    @property
    def in_list_filter(self):
        """Gets the in_list_filter of this Filter.


        :return: The in_list_filter of this Filter.
        :rtype: InListFilter
        """
        return self._in_list_filter

    @in_list_filter.setter
    def in_list_filter(self, in_list_filter):
        """Sets the in_list_filter of this Filter.


        :param in_list_filter: The in_list_filter of this Filter.
        :type in_list_filter: InListFilter
        """

        self._in_list_filter = in_list_filter

    @property
    def numeric_filter(self):
        """Gets the numeric_filter of this Filter.


        :return: The numeric_filter of this Filter.
        :rtype: NumericFilter
        """
        return self._numeric_filter

    @numeric_filter.setter
    def numeric_filter(self, numeric_filter):
        """Sets the numeric_filter of this Filter.


        :param numeric_filter: The numeric_filter of this Filter.
        :type numeric_filter: NumericFilter
        """

        self._numeric_filter = numeric_filter

    @property
    def string_filter(self):
        """Gets the string_filter of this Filter.


        :return: The string_filter of this Filter.
        :rtype: StringFilter
        """
        return self._string_filter

    @string_filter.setter
    def string_filter(self, string_filter):
        """Sets the string_filter of this Filter.


        :param string_filter: The string_filter of this Filter.
        :type string_filter: StringFilter
        """

        self._string_filter = string_filter
