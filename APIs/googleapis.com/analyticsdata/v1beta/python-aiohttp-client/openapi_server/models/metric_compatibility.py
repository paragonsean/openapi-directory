# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_metadata import MetricMetadata
from openapi_server import util


class MetricCompatibility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compatibility: str=None, metric_metadata: MetricMetadata=None):
        """MetricCompatibility - a model defined in OpenAPI

        :param compatibility: The compatibility of this MetricCompatibility.
        :param metric_metadata: The metric_metadata of this MetricCompatibility.
        """
        self.openapi_types = {
            'compatibility': str,
            'metric_metadata': MetricMetadata
        }

        self.attribute_map = {
            'compatibility': 'compatibility',
            'metric_metadata': 'metricMetadata'
        }

        self._compatibility = compatibility
        self._metric_metadata = metric_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricCompatibility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricCompatibility of this MetricCompatibility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compatibility(self):
        """Gets the compatibility of this MetricCompatibility.

        The compatibility of this metric. If the compatibility is COMPATIBLE, this metric can be successfully added to the report.

        :return: The compatibility of this MetricCompatibility.
        :rtype: str
        """
        return self._compatibility

    @compatibility.setter
    def compatibility(self, compatibility):
        """Sets the compatibility of this MetricCompatibility.

        The compatibility of this metric. If the compatibility is COMPATIBLE, this metric can be successfully added to the report.

        :param compatibility: The compatibility of this MetricCompatibility.
        :type compatibility: str
        """
        allowed_values = ["COMPATIBILITY_UNSPECIFIED", "COMPATIBLE", "INCOMPATIBLE"]  # noqa: E501
        if compatibility not in allowed_values:
            raise ValueError(
                "Invalid value for `compatibility` ({0}), must be one of {1}"
                .format(compatibility, allowed_values)
            )

        self._compatibility = compatibility

    @property
    def metric_metadata(self):
        """Gets the metric_metadata of this MetricCompatibility.


        :return: The metric_metadata of this MetricCompatibility.
        :rtype: MetricMetadata
        """
        return self._metric_metadata

    @metric_metadata.setter
    def metric_metadata(self, metric_metadata):
        """Sets the metric_metadata of this MetricCompatibility.


        :param metric_metadata: The metric_metadata of this MetricCompatibility.
        :type metric_metadata: MetricMetadata
        """

        self._metric_metadata = metric_metadata
