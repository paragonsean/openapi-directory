# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.numeric_value import NumericValue
from openapi_server import util


class NumericFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation: str=None, value: NumericValue=None):
        """NumericFilter - a model defined in OpenAPI

        :param operation: The operation of this NumericFilter.
        :param value: The value of this NumericFilter.
        """
        self.openapi_types = {
            'operation': str,
            'value': NumericValue
        }

        self.attribute_map = {
            'operation': 'operation',
            'value': 'value'
        }

        self._operation = operation
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumericFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumericFilter of this NumericFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this NumericFilter.

        The operation type for this filter.

        :return: The operation of this NumericFilter.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this NumericFilter.

        The operation type for this filter.

        :param operation: The operation of this NumericFilter.
        :type operation: str
        """
        allowed_values = ["OPERATION_UNSPECIFIED", "EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def value(self):
        """Gets the value of this NumericFilter.


        :return: The value of this NumericFilter.
        :rtype: NumericValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NumericFilter.


        :param value: The value of this NumericFilter.
        :type value: NumericValue
        """

        self._value = value
