# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_header import DimensionHeader
from openapi_server.models.metric_header import MetricHeader
from openapi_server.models.property_quota import PropertyQuota
from openapi_server.models.row import Row
from openapi_server import util


class RunRealtimeReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_headers: List[DimensionHeader]=None, kind: str=None, maximums: List[Row]=None, metric_headers: List[MetricHeader]=None, minimums: List[Row]=None, property_quota: PropertyQuota=None, row_count: int=None, rows: List[Row]=None, totals: List[Row]=None):
        """RunRealtimeReportResponse - a model defined in OpenAPI

        :param dimension_headers: The dimension_headers of this RunRealtimeReportResponse.
        :param kind: The kind of this RunRealtimeReportResponse.
        :param maximums: The maximums of this RunRealtimeReportResponse.
        :param metric_headers: The metric_headers of this RunRealtimeReportResponse.
        :param minimums: The minimums of this RunRealtimeReportResponse.
        :param property_quota: The property_quota of this RunRealtimeReportResponse.
        :param row_count: The row_count of this RunRealtimeReportResponse.
        :param rows: The rows of this RunRealtimeReportResponse.
        :param totals: The totals of this RunRealtimeReportResponse.
        """
        self.openapi_types = {
            'dimension_headers': List[DimensionHeader],
            'kind': str,
            'maximums': List[Row],
            'metric_headers': List[MetricHeader],
            'minimums': List[Row],
            'property_quota': PropertyQuota,
            'row_count': int,
            'rows': List[Row],
            'totals': List[Row]
        }

        self.attribute_map = {
            'dimension_headers': 'dimensionHeaders',
            'kind': 'kind',
            'maximums': 'maximums',
            'metric_headers': 'metricHeaders',
            'minimums': 'minimums',
            'property_quota': 'propertyQuota',
            'row_count': 'rowCount',
            'rows': 'rows',
            'totals': 'totals'
        }

        self._dimension_headers = dimension_headers
        self._kind = kind
        self._maximums = maximums
        self._metric_headers = metric_headers
        self._minimums = minimums
        self._property_quota = property_quota
        self._row_count = row_count
        self._rows = rows
        self._totals = totals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunRealtimeReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunRealtimeReportResponse of this RunRealtimeReportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_headers(self):
        """Gets the dimension_headers of this RunRealtimeReportResponse.

        Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.

        :return: The dimension_headers of this RunRealtimeReportResponse.
        :rtype: List[DimensionHeader]
        """
        return self._dimension_headers

    @dimension_headers.setter
    def dimension_headers(self, dimension_headers):
        """Sets the dimension_headers of this RunRealtimeReportResponse.

        Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.

        :param dimension_headers: The dimension_headers of this RunRealtimeReportResponse.
        :type dimension_headers: List[DimensionHeader]
        """

        self._dimension_headers = dimension_headers

    @property
    def kind(self):
        """Gets the kind of this RunRealtimeReportResponse.

        Identifies what kind of resource this message is. This `kind` is always the fixed string \"analyticsData#runRealtimeReport\". Useful to distinguish between response types in JSON.

        :return: The kind of this RunRealtimeReportResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RunRealtimeReportResponse.

        Identifies what kind of resource this message is. This `kind` is always the fixed string \"analyticsData#runRealtimeReport\". Useful to distinguish between response types in JSON.

        :param kind: The kind of this RunRealtimeReportResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def maximums(self):
        """Gets the maximums of this RunRealtimeReportResponse.

        If requested, the maximum values of metrics.

        :return: The maximums of this RunRealtimeReportResponse.
        :rtype: List[Row]
        """
        return self._maximums

    @maximums.setter
    def maximums(self, maximums):
        """Sets the maximums of this RunRealtimeReportResponse.

        If requested, the maximum values of metrics.

        :param maximums: The maximums of this RunRealtimeReportResponse.
        :type maximums: List[Row]
        """

        self._maximums = maximums

    @property
    def metric_headers(self):
        """Gets the metric_headers of this RunRealtimeReportResponse.

        Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.

        :return: The metric_headers of this RunRealtimeReportResponse.
        :rtype: List[MetricHeader]
        """
        return self._metric_headers

    @metric_headers.setter
    def metric_headers(self, metric_headers):
        """Sets the metric_headers of this RunRealtimeReportResponse.

        Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.

        :param metric_headers: The metric_headers of this RunRealtimeReportResponse.
        :type metric_headers: List[MetricHeader]
        """

        self._metric_headers = metric_headers

    @property
    def minimums(self):
        """Gets the minimums of this RunRealtimeReportResponse.

        If requested, the minimum values of metrics.

        :return: The minimums of this RunRealtimeReportResponse.
        :rtype: List[Row]
        """
        return self._minimums

    @minimums.setter
    def minimums(self, minimums):
        """Sets the minimums of this RunRealtimeReportResponse.

        If requested, the minimum values of metrics.

        :param minimums: The minimums of this RunRealtimeReportResponse.
        :type minimums: List[Row]
        """

        self._minimums = minimums

    @property
    def property_quota(self):
        """Gets the property_quota of this RunRealtimeReportResponse.


        :return: The property_quota of this RunRealtimeReportResponse.
        :rtype: PropertyQuota
        """
        return self._property_quota

    @property_quota.setter
    def property_quota(self, property_quota):
        """Sets the property_quota of this RunRealtimeReportResponse.


        :param property_quota: The property_quota of this RunRealtimeReportResponse.
        :type property_quota: PropertyQuota
        """

        self._property_quota = property_quota

    @property
    def row_count(self):
        """Gets the row_count of this RunRealtimeReportResponse.

        The total number of rows in the query result. `rowCount` is independent of the number of rows returned in the response and the `limit` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows.

        :return: The row_count of this RunRealtimeReportResponse.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this RunRealtimeReportResponse.

        The total number of rows in the query result. `rowCount` is independent of the number of rows returned in the response and the `limit` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows.

        :param row_count: The row_count of this RunRealtimeReportResponse.
        :type row_count: int
        """

        self._row_count = row_count

    @property
    def rows(self):
        """Gets the rows of this RunRealtimeReportResponse.

        Rows of dimension value combinations and metric values in the report.

        :return: The rows of this RunRealtimeReportResponse.
        :rtype: List[Row]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this RunRealtimeReportResponse.

        Rows of dimension value combinations and metric values in the report.

        :param rows: The rows of this RunRealtimeReportResponse.
        :type rows: List[Row]
        """

        self._rows = rows

    @property
    def totals(self):
        """Gets the totals of this RunRealtimeReportResponse.

        If requested, the totaled values of metrics.

        :return: The totals of this RunRealtimeReportResponse.
        :rtype: List[Row]
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this RunRealtimeReportResponse.

        If requested, the totaled values of metrics.

        :param totals: The totals of this RunRealtimeReportResponse.
        :type totals: List[Row]
        """

        self._totals = totals
