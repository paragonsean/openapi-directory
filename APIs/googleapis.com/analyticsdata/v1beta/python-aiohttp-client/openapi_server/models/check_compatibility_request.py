# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.filter_expression import FilterExpression
from openapi_server.models.metric import Metric
from openapi_server import util


class CheckCompatibilityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compatibility_filter: str=None, dimension_filter: FilterExpression=None, dimensions: List[Dimension]=None, metric_filter: FilterExpression=None, metrics: List[Metric]=None):
        """CheckCompatibilityRequest - a model defined in OpenAPI

        :param compatibility_filter: The compatibility_filter of this CheckCompatibilityRequest.
        :param dimension_filter: The dimension_filter of this CheckCompatibilityRequest.
        :param dimensions: The dimensions of this CheckCompatibilityRequest.
        :param metric_filter: The metric_filter of this CheckCompatibilityRequest.
        :param metrics: The metrics of this CheckCompatibilityRequest.
        """
        self.openapi_types = {
            'compatibility_filter': str,
            'dimension_filter': FilterExpression,
            'dimensions': List[Dimension],
            'metric_filter': FilterExpression,
            'metrics': List[Metric]
        }

        self.attribute_map = {
            'compatibility_filter': 'compatibilityFilter',
            'dimension_filter': 'dimensionFilter',
            'dimensions': 'dimensions',
            'metric_filter': 'metricFilter',
            'metrics': 'metrics'
        }

        self._compatibility_filter = compatibility_filter
        self._dimension_filter = dimension_filter
        self._dimensions = dimensions
        self._metric_filter = metric_filter
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckCompatibilityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckCompatibilityRequest of this CheckCompatibilityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compatibility_filter(self):
        """Gets the compatibility_filter of this CheckCompatibilityRequest.

        Filters the dimensions and metrics in the response to just this compatibility. Commonly used as `”compatibilityFilter”: “COMPATIBLE”` to only return compatible dimensions & metrics.

        :return: The compatibility_filter of this CheckCompatibilityRequest.
        :rtype: str
        """
        return self._compatibility_filter

    @compatibility_filter.setter
    def compatibility_filter(self, compatibility_filter):
        """Sets the compatibility_filter of this CheckCompatibilityRequest.

        Filters the dimensions and metrics in the response to just this compatibility. Commonly used as `”compatibilityFilter”: “COMPATIBLE”` to only return compatible dimensions & metrics.

        :param compatibility_filter: The compatibility_filter of this CheckCompatibilityRequest.
        :type compatibility_filter: str
        """
        allowed_values = ["COMPATIBILITY_UNSPECIFIED", "COMPATIBLE", "INCOMPATIBLE"]  # noqa: E501
        if compatibility_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `compatibility_filter` ({0}), must be one of {1}"
                .format(compatibility_filter, allowed_values)
            )

        self._compatibility_filter = compatibility_filter

    @property
    def dimension_filter(self):
        """Gets the dimension_filter of this CheckCompatibilityRequest.


        :return: The dimension_filter of this CheckCompatibilityRequest.
        :rtype: FilterExpression
        """
        return self._dimension_filter

    @dimension_filter.setter
    def dimension_filter(self, dimension_filter):
        """Sets the dimension_filter of this CheckCompatibilityRequest.


        :param dimension_filter: The dimension_filter of this CheckCompatibilityRequest.
        :type dimension_filter: FilterExpression
        """

        self._dimension_filter = dimension_filter

    @property
    def dimensions(self):
        """Gets the dimensions of this CheckCompatibilityRequest.

        The dimensions in this report. `dimensions` should be the same value as in your `runReport` request.

        :return: The dimensions of this CheckCompatibilityRequest.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this CheckCompatibilityRequest.

        The dimensions in this report. `dimensions` should be the same value as in your `runReport` request.

        :param dimensions: The dimensions of this CheckCompatibilityRequest.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def metric_filter(self):
        """Gets the metric_filter of this CheckCompatibilityRequest.


        :return: The metric_filter of this CheckCompatibilityRequest.
        :rtype: FilterExpression
        """
        return self._metric_filter

    @metric_filter.setter
    def metric_filter(self, metric_filter):
        """Sets the metric_filter of this CheckCompatibilityRequest.


        :param metric_filter: The metric_filter of this CheckCompatibilityRequest.
        :type metric_filter: FilterExpression
        """

        self._metric_filter = metric_filter

    @property
    def metrics(self):
        """Gets the metrics of this CheckCompatibilityRequest.

        The metrics in this report. `metrics` should be the same value as in your `runReport` request.

        :return: The metrics of this CheckCompatibilityRequest.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this CheckCompatibilityRequest.

        The metrics in this report. `metrics` should be the same value as in your `runReport` request.

        :param metrics: The metrics of this CheckCompatibilityRequest.
        :type metrics: List[Metric]
        """

        self._metrics = metrics
