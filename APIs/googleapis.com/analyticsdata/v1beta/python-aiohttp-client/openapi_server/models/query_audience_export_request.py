# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryAudienceExportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit: str=None, offset: str=None):
        """QueryAudienceExportRequest - a model defined in OpenAPI

        :param limit: The limit of this QueryAudienceExportRequest.
        :param offset: The offset of this QueryAudienceExportRequest.
        """
        self.openapi_types = {
            'limit': str,
            'offset': str
        }

        self.attribute_map = {
            'limit': 'limit',
            'offset': 'offset'
        }

        self._limit = limit
        self._offset = offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryAudienceExportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryAudienceExportRequest of this QueryAudienceExportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this QueryAudienceExportRequest.

        Optional. The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :return: The limit of this QueryAudienceExportRequest.
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryAudienceExportRequest.

        Optional. The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :param limit: The limit of this QueryAudienceExportRequest.
        :type limit: str
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this QueryAudienceExportRequest.

        Optional. The row count of the start row. The first row is counted as row 0. When paging, the first request does not specify offset; or equivalently, sets offset to 0; the first request returns the first `limit` of rows. The second request sets offset to the `limit` of the first request; the second request returns the second `limit` of rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :return: The offset of this QueryAudienceExportRequest.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this QueryAudienceExportRequest.

        Optional. The row count of the start row. The first row is counted as row 0. When paging, the first request does not specify offset; or equivalently, sets offset to 0; the first request returns the first `limit` of rows. The second request sets offset to the `limit` of the first request; the second request returns the second `limit` of rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :param offset: The offset of this QueryAudienceExportRequest.
        :type offset: str
        """

        self._offset = offset
