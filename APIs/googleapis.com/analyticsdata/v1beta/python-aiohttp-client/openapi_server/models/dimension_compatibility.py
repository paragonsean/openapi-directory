# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_metadata import DimensionMetadata
from openapi_server import util


class DimensionCompatibility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compatibility: str=None, dimension_metadata: DimensionMetadata=None):
        """DimensionCompatibility - a model defined in OpenAPI

        :param compatibility: The compatibility of this DimensionCompatibility.
        :param dimension_metadata: The dimension_metadata of this DimensionCompatibility.
        """
        self.openapi_types = {
            'compatibility': str,
            'dimension_metadata': DimensionMetadata
        }

        self.attribute_map = {
            'compatibility': 'compatibility',
            'dimension_metadata': 'dimensionMetadata'
        }

        self._compatibility = compatibility
        self._dimension_metadata = dimension_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DimensionCompatibility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DimensionCompatibility of this DimensionCompatibility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compatibility(self):
        """Gets the compatibility of this DimensionCompatibility.

        The compatibility of this dimension. If the compatibility is COMPATIBLE, this dimension can be successfully added to the report.

        :return: The compatibility of this DimensionCompatibility.
        :rtype: str
        """
        return self._compatibility

    @compatibility.setter
    def compatibility(self, compatibility):
        """Sets the compatibility of this DimensionCompatibility.

        The compatibility of this dimension. If the compatibility is COMPATIBLE, this dimension can be successfully added to the report.

        :param compatibility: The compatibility of this DimensionCompatibility.
        :type compatibility: str
        """
        allowed_values = ["COMPATIBILITY_UNSPECIFIED", "COMPATIBLE", "INCOMPATIBLE"]  # noqa: E501
        if compatibility not in allowed_values:
            raise ValueError(
                "Invalid value for `compatibility` ({0}), must be one of {1}"
                .format(compatibility, allowed_values)
            )

        self._compatibility = compatibility

    @property
    def dimension_metadata(self):
        """Gets the dimension_metadata of this DimensionCompatibility.


        :return: The dimension_metadata of this DimensionCompatibility.
        :rtype: DimensionMetadata
        """
        return self._dimension_metadata

    @dimension_metadata.setter
    def dimension_metadata(self, dimension_metadata):
        """Sets the dimension_metadata of this DimensionCompatibility.


        :param dimension_metadata: The dimension_metadata of this DimensionCompatibility.
        :type dimension_metadata: DimensionMetadata
        """

        self._dimension_metadata = dimension_metadata
