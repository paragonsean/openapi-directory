# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sampling_metadata import SamplingMetadata
from openapi_server.models.schema_restriction_response import SchemaRestrictionResponse
from openapi_server import util


class ResponseMetaData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, data_loss_from_other_row: bool=None, empty_reason: str=None, sampling_metadatas: List[SamplingMetadata]=None, schema_restriction_response: SchemaRestrictionResponse=None, subject_to_thresholding: bool=None, time_zone: str=None):
        """ResponseMetaData - a model defined in OpenAPI

        :param currency_code: The currency_code of this ResponseMetaData.
        :param data_loss_from_other_row: The data_loss_from_other_row of this ResponseMetaData.
        :param empty_reason: The empty_reason of this ResponseMetaData.
        :param sampling_metadatas: The sampling_metadatas of this ResponseMetaData.
        :param schema_restriction_response: The schema_restriction_response of this ResponseMetaData.
        :param subject_to_thresholding: The subject_to_thresholding of this ResponseMetaData.
        :param time_zone: The time_zone of this ResponseMetaData.
        """
        self.openapi_types = {
            'currency_code': str,
            'data_loss_from_other_row': bool,
            'empty_reason': str,
            'sampling_metadatas': List[SamplingMetadata],
            'schema_restriction_response': SchemaRestrictionResponse,
            'subject_to_thresholding': bool,
            'time_zone': str
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'data_loss_from_other_row': 'dataLossFromOtherRow',
            'empty_reason': 'emptyReason',
            'sampling_metadatas': 'samplingMetadatas',
            'schema_restriction_response': 'schemaRestrictionResponse',
            'subject_to_thresholding': 'subjectToThresholding',
            'time_zone': 'timeZone'
        }

        self._currency_code = currency_code
        self._data_loss_from_other_row = data_loss_from_other_row
        self._empty_reason = empty_reason
        self._sampling_metadatas = sampling_metadatas
        self._schema_restriction_response = schema_restriction_response
        self._subject_to_thresholding = subject_to_thresholding
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseMetaData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseMetaData of this ResponseMetaData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this ResponseMetaData.

        The currency code used in this report. Intended to be used in formatting currency metrics like `purchaseRevenue` for visualization. If currency_code was specified in the request, this response parameter will echo the request parameter; otherwise, this response parameter is the property's current currency_code. Currency codes are string encodings of currency types from the ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217); for example \"USD\", \"EUR\", \"JPY\". To learn more, see https://support.google.com/analytics/answer/9796179.

        :return: The currency_code of this ResponseMetaData.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ResponseMetaData.

        The currency code used in this report. Intended to be used in formatting currency metrics like `purchaseRevenue` for visualization. If currency_code was specified in the request, this response parameter will echo the request parameter; otherwise, this response parameter is the property's current currency_code. Currency codes are string encodings of currency types from the ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217); for example \"USD\", \"EUR\", \"JPY\". To learn more, see https://support.google.com/analytics/answer/9796179.

        :param currency_code: The currency_code of this ResponseMetaData.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def data_loss_from_other_row(self):
        """Gets the data_loss_from_other_row of this ResponseMetaData.

        If true, indicates some buckets of dimension combinations are rolled into \"(other)\" row. This can happen for high cardinality reports. The metadata parameter dataLossFromOtherRow is populated based on the aggregated data table used in the report. The parameter will be accurately populated regardless of the filters and limits in the report. For example, the (other) row could be dropped from the report because the request contains a filter on sessionSource = google. This parameter will still be populated if data loss from other row was present in the input aggregate data used to generate this report. To learn more, see [About the (other) row and data sampling](https://support.google.com/analytics/answer/13208658#reports).

        :return: The data_loss_from_other_row of this ResponseMetaData.
        :rtype: bool
        """
        return self._data_loss_from_other_row

    @data_loss_from_other_row.setter
    def data_loss_from_other_row(self, data_loss_from_other_row):
        """Sets the data_loss_from_other_row of this ResponseMetaData.

        If true, indicates some buckets of dimension combinations are rolled into \"(other)\" row. This can happen for high cardinality reports. The metadata parameter dataLossFromOtherRow is populated based on the aggregated data table used in the report. The parameter will be accurately populated regardless of the filters and limits in the report. For example, the (other) row could be dropped from the report because the request contains a filter on sessionSource = google. This parameter will still be populated if data loss from other row was present in the input aggregate data used to generate this report. To learn more, see [About the (other) row and data sampling](https://support.google.com/analytics/answer/13208658#reports).

        :param data_loss_from_other_row: The data_loss_from_other_row of this ResponseMetaData.
        :type data_loss_from_other_row: bool
        """

        self._data_loss_from_other_row = data_loss_from_other_row

    @property
    def empty_reason(self):
        """Gets the empty_reason of this ResponseMetaData.

        If empty reason is specified, the report is empty for this reason.

        :return: The empty_reason of this ResponseMetaData.
        :rtype: str
        """
        return self._empty_reason

    @empty_reason.setter
    def empty_reason(self, empty_reason):
        """Sets the empty_reason of this ResponseMetaData.

        If empty reason is specified, the report is empty for this reason.

        :param empty_reason: The empty_reason of this ResponseMetaData.
        :type empty_reason: str
        """

        self._empty_reason = empty_reason

    @property
    def sampling_metadatas(self):
        """Gets the sampling_metadatas of this ResponseMetaData.

        If this report results is [sampled](https://support.google.com/analytics/answer/13331292), this describes the percentage of events used in this report. One `samplingMetadatas` is populated for each date range. Each `samplingMetadatas` corresponds to a date range in order that date ranges were specified in the request. However if the results are not sampled, this field will not be defined.

        :return: The sampling_metadatas of this ResponseMetaData.
        :rtype: List[SamplingMetadata]
        """
        return self._sampling_metadatas

    @sampling_metadatas.setter
    def sampling_metadatas(self, sampling_metadatas):
        """Sets the sampling_metadatas of this ResponseMetaData.

        If this report results is [sampled](https://support.google.com/analytics/answer/13331292), this describes the percentage of events used in this report. One `samplingMetadatas` is populated for each date range. Each `samplingMetadatas` corresponds to a date range in order that date ranges were specified in the request. However if the results are not sampled, this field will not be defined.

        :param sampling_metadatas: The sampling_metadatas of this ResponseMetaData.
        :type sampling_metadatas: List[SamplingMetadata]
        """

        self._sampling_metadatas = sampling_metadatas

    @property
    def schema_restriction_response(self):
        """Gets the schema_restriction_response of this ResponseMetaData.


        :return: The schema_restriction_response of this ResponseMetaData.
        :rtype: SchemaRestrictionResponse
        """
        return self._schema_restriction_response

    @schema_restriction_response.setter
    def schema_restriction_response(self, schema_restriction_response):
        """Sets the schema_restriction_response of this ResponseMetaData.


        :param schema_restriction_response: The schema_restriction_response of this ResponseMetaData.
        :type schema_restriction_response: SchemaRestrictionResponse
        """

        self._schema_restriction_response = schema_restriction_response

    @property
    def subject_to_thresholding(self):
        """Gets the subject_to_thresholding of this ResponseMetaData.

        If `subjectToThresholding` is true, this report is subject to thresholding and only returns data that meets the minimum aggregation thresholds. It is possible for a request to be subject to thresholding thresholding and no data is absent from the report, and this happens when all data is above the thresholds. To learn more, see [Data thresholds](https://support.google.com/analytics/answer/9383630).

        :return: The subject_to_thresholding of this ResponseMetaData.
        :rtype: bool
        """
        return self._subject_to_thresholding

    @subject_to_thresholding.setter
    def subject_to_thresholding(self, subject_to_thresholding):
        """Sets the subject_to_thresholding of this ResponseMetaData.

        If `subjectToThresholding` is true, this report is subject to thresholding and only returns data that meets the minimum aggregation thresholds. It is possible for a request to be subject to thresholding thresholding and no data is absent from the report, and this happens when all data is above the thresholds. To learn more, see [Data thresholds](https://support.google.com/analytics/answer/9383630).

        :param subject_to_thresholding: The subject_to_thresholding of this ResponseMetaData.
        :type subject_to_thresholding: bool
        """

        self._subject_to_thresholding = subject_to_thresholding

    @property
    def time_zone(self):
        """Gets the time_zone of this ResponseMetaData.

        The property's current timezone. Intended to be used to interpret time-based dimensions like `hour` and `minute`. Formatted as strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example \"America/New_York\" or \"Asia/Tokyo\".

        :return: The time_zone of this ResponseMetaData.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ResponseMetaData.

        The property's current timezone. Intended to be used to interpret time-based dimensions like `hour` and `minute`. Formatted as strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example \"America/New_York\" or \"Asia/Tokyo\".

        :param time_zone: The time_zone of this ResponseMetaData.
        :type time_zone: str
        """

        self._time_zone = time_zone
