# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audience_export import AudienceExport
from openapi_server.models.v1beta_audience_row import V1betaAudienceRow
from openapi_server import util


class QueryAudienceExportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audience_export: AudienceExport=None, audience_rows: List[V1betaAudienceRow]=None, row_count: int=None):
        """QueryAudienceExportResponse - a model defined in OpenAPI

        :param audience_export: The audience_export of this QueryAudienceExportResponse.
        :param audience_rows: The audience_rows of this QueryAudienceExportResponse.
        :param row_count: The row_count of this QueryAudienceExportResponse.
        """
        self.openapi_types = {
            'audience_export': AudienceExport,
            'audience_rows': List[V1betaAudienceRow],
            'row_count': int
        }

        self.attribute_map = {
            'audience_export': 'audienceExport',
            'audience_rows': 'audienceRows',
            'row_count': 'rowCount'
        }

        self._audience_export = audience_export
        self._audience_rows = audience_rows
        self._row_count = row_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryAudienceExportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryAudienceExportResponse of this QueryAudienceExportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audience_export(self):
        """Gets the audience_export of this QueryAudienceExportResponse.


        :return: The audience_export of this QueryAudienceExportResponse.
        :rtype: AudienceExport
        """
        return self._audience_export

    @audience_export.setter
    def audience_export(self, audience_export):
        """Sets the audience_export of this QueryAudienceExportResponse.


        :param audience_export: The audience_export of this QueryAudienceExportResponse.
        :type audience_export: AudienceExport
        """

        self._audience_export = audience_export

    @property
    def audience_rows(self):
        """Gets the audience_rows of this QueryAudienceExportResponse.

        Rows for each user in an audience export. The number of rows in this response will be less than or equal to request's page size.

        :return: The audience_rows of this QueryAudienceExportResponse.
        :rtype: List[V1betaAudienceRow]
        """
        return self._audience_rows

    @audience_rows.setter
    def audience_rows(self, audience_rows):
        """Sets the audience_rows of this QueryAudienceExportResponse.

        Rows for each user in an audience export. The number of rows in this response will be less than or equal to request's page size.

        :param audience_rows: The audience_rows of this QueryAudienceExportResponse.
        :type audience_rows: List[V1betaAudienceRow]
        """

        self._audience_rows = audience_rows

    @property
    def row_count(self):
        """Gets the row_count of this QueryAudienceExportResponse.

        The total number of rows in the AudienceExport result. `rowCount` is independent of the number of rows returned in the response, the `limit` request parameter, and the `offset` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :return: The row_count of this QueryAudienceExportResponse.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this QueryAudienceExportResponse.

        The total number of rows in the AudienceExport result. `rowCount` is independent of the number of rows returned in the response, the `limit` request parameter, and the `offset` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :param row_count: The row_count of this QueryAudienceExportResponse.
        :type row_count: int
        """

        self._row_count = row_count
