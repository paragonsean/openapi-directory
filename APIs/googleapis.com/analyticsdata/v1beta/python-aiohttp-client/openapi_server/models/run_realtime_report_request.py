# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.filter_expression import FilterExpression
from openapi_server.models.metric import Metric
from openapi_server.models.minute_range import MinuteRange
from openapi_server.models.order_by import OrderBy
from openapi_server import util


class RunRealtimeReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_filter: FilterExpression=None, dimensions: List[Dimension]=None, limit: str=None, metric_aggregations: List[str]=None, metric_filter: FilterExpression=None, metrics: List[Metric]=None, minute_ranges: List[MinuteRange]=None, order_bys: List[OrderBy]=None, return_property_quota: bool=None):
        """RunRealtimeReportRequest - a model defined in OpenAPI

        :param dimension_filter: The dimension_filter of this RunRealtimeReportRequest.
        :param dimensions: The dimensions of this RunRealtimeReportRequest.
        :param limit: The limit of this RunRealtimeReportRequest.
        :param metric_aggregations: The metric_aggregations of this RunRealtimeReportRequest.
        :param metric_filter: The metric_filter of this RunRealtimeReportRequest.
        :param metrics: The metrics of this RunRealtimeReportRequest.
        :param minute_ranges: The minute_ranges of this RunRealtimeReportRequest.
        :param order_bys: The order_bys of this RunRealtimeReportRequest.
        :param return_property_quota: The return_property_quota of this RunRealtimeReportRequest.
        """
        self.openapi_types = {
            'dimension_filter': FilterExpression,
            'dimensions': List[Dimension],
            'limit': str,
            'metric_aggregations': List[str],
            'metric_filter': FilterExpression,
            'metrics': List[Metric],
            'minute_ranges': List[MinuteRange],
            'order_bys': List[OrderBy],
            'return_property_quota': bool
        }

        self.attribute_map = {
            'dimension_filter': 'dimensionFilter',
            'dimensions': 'dimensions',
            'limit': 'limit',
            'metric_aggregations': 'metricAggregations',
            'metric_filter': 'metricFilter',
            'metrics': 'metrics',
            'minute_ranges': 'minuteRanges',
            'order_bys': 'orderBys',
            'return_property_quota': 'returnPropertyQuota'
        }

        self._dimension_filter = dimension_filter
        self._dimensions = dimensions
        self._limit = limit
        self._metric_aggregations = metric_aggregations
        self._metric_filter = metric_filter
        self._metrics = metrics
        self._minute_ranges = minute_ranges
        self._order_bys = order_bys
        self._return_property_quota = return_property_quota

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunRealtimeReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunRealtimeReportRequest of this RunRealtimeReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_filter(self):
        """Gets the dimension_filter of this RunRealtimeReportRequest.


        :return: The dimension_filter of this RunRealtimeReportRequest.
        :rtype: FilterExpression
        """
        return self._dimension_filter

    @dimension_filter.setter
    def dimension_filter(self, dimension_filter):
        """Sets the dimension_filter of this RunRealtimeReportRequest.


        :param dimension_filter: The dimension_filter of this RunRealtimeReportRequest.
        :type dimension_filter: FilterExpression
        """

        self._dimension_filter = dimension_filter

    @property
    def dimensions(self):
        """Gets the dimensions of this RunRealtimeReportRequest.

        The dimensions requested and displayed.

        :return: The dimensions of this RunRealtimeReportRequest.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this RunRealtimeReportRequest.

        The dimensions requested and displayed.

        :param dimensions: The dimensions of this RunRealtimeReportRequest.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def limit(self):
        """Gets the limit of this RunRealtimeReportRequest.

        The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value.

        :return: The limit of this RunRealtimeReportRequest.
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this RunRealtimeReportRequest.

        The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value.

        :param limit: The limit of this RunRealtimeReportRequest.
        :type limit: str
        """

        self._limit = limit

    @property
    def metric_aggregations(self):
        """Gets the metric_aggregations of this RunRealtimeReportRequest.

        Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to \"RESERVED_(MetricAggregation)\".

        :return: The metric_aggregations of this RunRealtimeReportRequest.
        :rtype: List[str]
        """
        return self._metric_aggregations

    @metric_aggregations.setter
    def metric_aggregations(self, metric_aggregations):
        """Sets the metric_aggregations of this RunRealtimeReportRequest.

        Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to \"RESERVED_(MetricAggregation)\".

        :param metric_aggregations: The metric_aggregations of this RunRealtimeReportRequest.
        :type metric_aggregations: List[str]
        """
        allowed_values = ["METRIC_AGGREGATION_UNSPECIFIED", "TOTAL", "MINIMUM", "MAXIMUM", "COUNT"]  # noqa: E501
        if not set(metric_aggregations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `metric_aggregations` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(metric_aggregations) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._metric_aggregations = metric_aggregations

    @property
    def metric_filter(self):
        """Gets the metric_filter of this RunRealtimeReportRequest.


        :return: The metric_filter of this RunRealtimeReportRequest.
        :rtype: FilterExpression
        """
        return self._metric_filter

    @metric_filter.setter
    def metric_filter(self, metric_filter):
        """Sets the metric_filter of this RunRealtimeReportRequest.


        :param metric_filter: The metric_filter of this RunRealtimeReportRequest.
        :type metric_filter: FilterExpression
        """

        self._metric_filter = metric_filter

    @property
    def metrics(self):
        """Gets the metrics of this RunRealtimeReportRequest.

        The metrics requested and displayed.

        :return: The metrics of this RunRealtimeReportRequest.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this RunRealtimeReportRequest.

        The metrics requested and displayed.

        :param metrics: The metrics of this RunRealtimeReportRequest.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def minute_ranges(self):
        """Gets the minute_ranges of this RunRealtimeReportRequest.

        The minute ranges of event data to read. If unspecified, one minute range for the last 30 minutes will be used. If multiple minute ranges are requested, each response row will contain a zero based minute range index. If two minute ranges overlap, the event data for the overlapping minutes is included in the response rows for both minute ranges.

        :return: The minute_ranges of this RunRealtimeReportRequest.
        :rtype: List[MinuteRange]
        """
        return self._minute_ranges

    @minute_ranges.setter
    def minute_ranges(self, minute_ranges):
        """Sets the minute_ranges of this RunRealtimeReportRequest.

        The minute ranges of event data to read. If unspecified, one minute range for the last 30 minutes will be used. If multiple minute ranges are requested, each response row will contain a zero based minute range index. If two minute ranges overlap, the event data for the overlapping minutes is included in the response rows for both minute ranges.

        :param minute_ranges: The minute_ranges of this RunRealtimeReportRequest.
        :type minute_ranges: List[MinuteRange]
        """

        self._minute_ranges = minute_ranges

    @property
    def order_bys(self):
        """Gets the order_bys of this RunRealtimeReportRequest.

        Specifies how rows are ordered in the response.

        :return: The order_bys of this RunRealtimeReportRequest.
        :rtype: List[OrderBy]
        """
        return self._order_bys

    @order_bys.setter
    def order_bys(self, order_bys):
        """Sets the order_bys of this RunRealtimeReportRequest.

        Specifies how rows are ordered in the response.

        :param order_bys: The order_bys of this RunRealtimeReportRequest.
        :type order_bys: List[OrderBy]
        """

        self._order_bys = order_bys

    @property
    def return_property_quota(self):
        """Gets the return_property_quota of this RunRealtimeReportRequest.

        Toggles whether to return the current state of this Analytics Property's Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).

        :return: The return_property_quota of this RunRealtimeReportRequest.
        :rtype: bool
        """
        return self._return_property_quota

    @return_property_quota.setter
    def return_property_quota(self, return_property_quota):
        """Sets the return_property_quota of this RunRealtimeReportRequest.

        Toggles whether to return the current state of this Analytics Property's Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).

        :param return_property_quota: The return_property_quota of this RunRealtimeReportRequest.
        :type return_property_quota: bool
        """

        self._return_property_quota = return_property_quota
