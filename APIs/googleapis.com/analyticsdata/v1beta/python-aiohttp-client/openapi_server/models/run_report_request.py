# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cohort_spec import CohortSpec
from openapi_server.models.date_range import DateRange
from openapi_server.models.dimension import Dimension
from openapi_server.models.filter_expression import FilterExpression
from openapi_server.models.metric import Metric
from openapi_server.models.order_by import OrderBy
from openapi_server import util


class RunReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cohort_spec: CohortSpec=None, currency_code: str=None, date_ranges: List[DateRange]=None, dimension_filter: FilterExpression=None, dimensions: List[Dimension]=None, keep_empty_rows: bool=None, limit: str=None, metric_aggregations: List[str]=None, metric_filter: FilterExpression=None, metrics: List[Metric]=None, offset: str=None, order_bys: List[OrderBy]=None, _property: str=None, return_property_quota: bool=None):
        """RunReportRequest - a model defined in OpenAPI

        :param cohort_spec: The cohort_spec of this RunReportRequest.
        :param currency_code: The currency_code of this RunReportRequest.
        :param date_ranges: The date_ranges of this RunReportRequest.
        :param dimension_filter: The dimension_filter of this RunReportRequest.
        :param dimensions: The dimensions of this RunReportRequest.
        :param keep_empty_rows: The keep_empty_rows of this RunReportRequest.
        :param limit: The limit of this RunReportRequest.
        :param metric_aggregations: The metric_aggregations of this RunReportRequest.
        :param metric_filter: The metric_filter of this RunReportRequest.
        :param metrics: The metrics of this RunReportRequest.
        :param offset: The offset of this RunReportRequest.
        :param order_bys: The order_bys of this RunReportRequest.
        :param _property: The _property of this RunReportRequest.
        :param return_property_quota: The return_property_quota of this RunReportRequest.
        """
        self.openapi_types = {
            'cohort_spec': CohortSpec,
            'currency_code': str,
            'date_ranges': List[DateRange],
            'dimension_filter': FilterExpression,
            'dimensions': List[Dimension],
            'keep_empty_rows': bool,
            'limit': str,
            'metric_aggregations': List[str],
            'metric_filter': FilterExpression,
            'metrics': List[Metric],
            'offset': str,
            'order_bys': List[OrderBy],
            '_property': str,
            'return_property_quota': bool
        }

        self.attribute_map = {
            'cohort_spec': 'cohortSpec',
            'currency_code': 'currencyCode',
            'date_ranges': 'dateRanges',
            'dimension_filter': 'dimensionFilter',
            'dimensions': 'dimensions',
            'keep_empty_rows': 'keepEmptyRows',
            'limit': 'limit',
            'metric_aggregations': 'metricAggregations',
            'metric_filter': 'metricFilter',
            'metrics': 'metrics',
            'offset': 'offset',
            'order_bys': 'orderBys',
            '_property': 'property',
            'return_property_quota': 'returnPropertyQuota'
        }

        self._cohort_spec = cohort_spec
        self._currency_code = currency_code
        self._date_ranges = date_ranges
        self._dimension_filter = dimension_filter
        self._dimensions = dimensions
        self._keep_empty_rows = keep_empty_rows
        self._limit = limit
        self._metric_aggregations = metric_aggregations
        self._metric_filter = metric_filter
        self._metrics = metrics
        self._offset = offset
        self._order_bys = order_bys
        self.__property = _property
        self._return_property_quota = return_property_quota

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunReportRequest of this RunReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cohort_spec(self):
        """Gets the cohort_spec of this RunReportRequest.


        :return: The cohort_spec of this RunReportRequest.
        :rtype: CohortSpec
        """
        return self._cohort_spec

    @cohort_spec.setter
    def cohort_spec(self, cohort_spec):
        """Sets the cohort_spec of this RunReportRequest.


        :param cohort_spec: The cohort_spec of this RunReportRequest.
        :type cohort_spec: CohortSpec
        """

        self._cohort_spec = cohort_spec

    @property
    def currency_code(self):
        """Gets the currency_code of this RunReportRequest.

        A currency code in ISO4217 format, such as \"AED\", \"USD\", \"JPY\". If the field is empty, the report uses the property's default currency.

        :return: The currency_code of this RunReportRequest.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this RunReportRequest.

        A currency code in ISO4217 format, such as \"AED\", \"USD\", \"JPY\". If the field is empty, the report uses the property's default currency.

        :param currency_code: The currency_code of this RunReportRequest.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def date_ranges(self):
        """Gets the date_ranges of this RunReportRequest.

        Date ranges of data to read. If multiple date ranges are requested, each response row will contain a zero based date range index. If two date ranges overlap, the event data for the overlapping days is included in the response rows for both date ranges. In a cohort request, this `dateRanges` must be unspecified.

        :return: The date_ranges of this RunReportRequest.
        :rtype: List[DateRange]
        """
        return self._date_ranges

    @date_ranges.setter
    def date_ranges(self, date_ranges):
        """Sets the date_ranges of this RunReportRequest.

        Date ranges of data to read. If multiple date ranges are requested, each response row will contain a zero based date range index. If two date ranges overlap, the event data for the overlapping days is included in the response rows for both date ranges. In a cohort request, this `dateRanges` must be unspecified.

        :param date_ranges: The date_ranges of this RunReportRequest.
        :type date_ranges: List[DateRange]
        """

        self._date_ranges = date_ranges

    @property
    def dimension_filter(self):
        """Gets the dimension_filter of this RunReportRequest.


        :return: The dimension_filter of this RunReportRequest.
        :rtype: FilterExpression
        """
        return self._dimension_filter

    @dimension_filter.setter
    def dimension_filter(self, dimension_filter):
        """Sets the dimension_filter of this RunReportRequest.


        :param dimension_filter: The dimension_filter of this RunReportRequest.
        :type dimension_filter: FilterExpression
        """

        self._dimension_filter = dimension_filter

    @property
    def dimensions(self):
        """Gets the dimensions of this RunReportRequest.

        The dimensions requested and displayed.

        :return: The dimensions of this RunReportRequest.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this RunReportRequest.

        The dimensions requested and displayed.

        :param dimensions: The dimensions of this RunReportRequest.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def keep_empty_rows(self):
        """Gets the keep_empty_rows of this RunReportRequest.

        If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. Regardless of this `keep_empty_rows` setting, only data recorded by the Google Analytics (GA4) property can be displayed in a report. For example if a property never logs a `purchase` event, then a query for the `eventName` dimension and `eventCount` metric will not have a row eventName: \"purchase\" and eventCount: 0.

        :return: The keep_empty_rows of this RunReportRequest.
        :rtype: bool
        """
        return self._keep_empty_rows

    @keep_empty_rows.setter
    def keep_empty_rows(self, keep_empty_rows):
        """Sets the keep_empty_rows of this RunReportRequest.

        If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. Regardless of this `keep_empty_rows` setting, only data recorded by the Google Analytics (GA4) property can be displayed in a report. For example if a property never logs a `purchase` event, then a query for the `eventName` dimension and `eventCount` metric will not have a row eventName: \"purchase\" and eventCount: 0.

        :param keep_empty_rows: The keep_empty_rows of this RunReportRequest.
        :type keep_empty_rows: bool
        """

        self._keep_empty_rows = keep_empty_rows

    @property
    def limit(self):
        """Gets the limit of this RunReportRequest.

        The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :return: The limit of this RunReportRequest.
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this RunReportRequest.

        The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :param limit: The limit of this RunReportRequest.
        :type limit: str
        """

        self._limit = limit

    @property
    def metric_aggregations(self):
        """Gets the metric_aggregations of this RunReportRequest.

        Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to \"RESERVED_(MetricAggregation)\".

        :return: The metric_aggregations of this RunReportRequest.
        :rtype: List[str]
        """
        return self._metric_aggregations

    @metric_aggregations.setter
    def metric_aggregations(self, metric_aggregations):
        """Sets the metric_aggregations of this RunReportRequest.

        Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to \"RESERVED_(MetricAggregation)\".

        :param metric_aggregations: The metric_aggregations of this RunReportRequest.
        :type metric_aggregations: List[str]
        """
        allowed_values = ["METRIC_AGGREGATION_UNSPECIFIED", "TOTAL", "MINIMUM", "MAXIMUM", "COUNT"]  # noqa: E501
        if not set(metric_aggregations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `metric_aggregations` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(metric_aggregations) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._metric_aggregations = metric_aggregations

    @property
    def metric_filter(self):
        """Gets the metric_filter of this RunReportRequest.


        :return: The metric_filter of this RunReportRequest.
        :rtype: FilterExpression
        """
        return self._metric_filter

    @metric_filter.setter
    def metric_filter(self, metric_filter):
        """Sets the metric_filter of this RunReportRequest.


        :param metric_filter: The metric_filter of this RunReportRequest.
        :type metric_filter: FilterExpression
        """

        self._metric_filter = metric_filter

    @property
    def metrics(self):
        """Gets the metrics of this RunReportRequest.

        The metrics requested and displayed.

        :return: The metrics of this RunReportRequest.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this RunReportRequest.

        The metrics requested and displayed.

        :param metrics: The metrics of this RunReportRequest.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def offset(self):
        """Gets the offset of this RunReportRequest.

        The row count of the start row. The first row is counted as row 0. When paging, the first request does not specify offset; or equivalently, sets offset to 0; the first request returns the first `limit` of rows. The second request sets offset to the `limit` of the first request; the second request returns the second `limit` of rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :return: The offset of this RunReportRequest.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this RunReportRequest.

        The row count of the start row. The first row is counted as row 0. When paging, the first request does not specify offset; or equivalently, sets offset to 0; the first request returns the first `limit` of rows. The second request sets offset to the `limit` of the first request; the second request returns the second `limit` of rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :param offset: The offset of this RunReportRequest.
        :type offset: str
        """

        self._offset = offset

    @property
    def order_bys(self):
        """Gets the order_bys of this RunReportRequest.

        Specifies how rows are ordered in the response.

        :return: The order_bys of this RunReportRequest.
        :rtype: List[OrderBy]
        """
        return self._order_bys

    @order_bys.setter
    def order_bys(self, order_bys):
        """Sets the order_bys of this RunReportRequest.

        Specifies how rows are ordered in the response.

        :param order_bys: The order_bys of this RunReportRequest.
        :type order_bys: List[OrderBy]
        """

        self._order_bys = order_bys

    @property
    def _property(self):
        """Gets the _property of this RunReportRequest.

        A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234

        :return: The _property of this RunReportRequest.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this RunReportRequest.

        A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234

        :param _property: The _property of this RunReportRequest.
        :type _property: str
        """

        self.__property = _property

    @property
    def return_property_quota(self):
        """Gets the return_property_quota of this RunReportRequest.

        Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota).

        :return: The return_property_quota of this RunReportRequest.
        :rtype: bool
        """
        return self._return_property_quota

    @return_property_quota.setter
    def return_property_quota(self, return_property_quota):
        """Sets the return_property_quota of this RunReportRequest.

        Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota).

        :param return_property_quota: The return_property_quota of this RunReportRequest.
        :type return_property_quota: bool
        """

        self._return_property_quota = return_property_quota
