# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_name: str=None, blocked_reasons: List[str]=None, category: str=None, custom_definition: bool=None, deprecated_api_names: List[str]=None, description: str=None, expression: str=None, type: str=None, ui_name: str=None):
        """MetricMetadata - a model defined in OpenAPI

        :param api_name: The api_name of this MetricMetadata.
        :param blocked_reasons: The blocked_reasons of this MetricMetadata.
        :param category: The category of this MetricMetadata.
        :param custom_definition: The custom_definition of this MetricMetadata.
        :param deprecated_api_names: The deprecated_api_names of this MetricMetadata.
        :param description: The description of this MetricMetadata.
        :param expression: The expression of this MetricMetadata.
        :param type: The type of this MetricMetadata.
        :param ui_name: The ui_name of this MetricMetadata.
        """
        self.openapi_types = {
            'api_name': str,
            'blocked_reasons': List[str],
            'category': str,
            'custom_definition': bool,
            'deprecated_api_names': List[str],
            'description': str,
            'expression': str,
            'type': str,
            'ui_name': str
        }

        self.attribute_map = {
            'api_name': 'apiName',
            'blocked_reasons': 'blockedReasons',
            'category': 'category',
            'custom_definition': 'customDefinition',
            'deprecated_api_names': 'deprecatedApiNames',
            'description': 'description',
            'expression': 'expression',
            'type': 'type',
            'ui_name': 'uiName'
        }

        self._api_name = api_name
        self._blocked_reasons = blocked_reasons
        self._category = category
        self._custom_definition = custom_definition
        self._deprecated_api_names = deprecated_api_names
        self._description = description
        self._expression = expression
        self._type = type
        self._ui_name = ui_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricMetadata of this MetricMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_name(self):
        """Gets the api_name of this MetricMetadata.

        A metric name. Useable in [Metric](#Metric)'s `name`. For example, `eventCount`.

        :return: The api_name of this MetricMetadata.
        :rtype: str
        """
        return self._api_name

    @api_name.setter
    def api_name(self, api_name):
        """Sets the api_name of this MetricMetadata.

        A metric name. Useable in [Metric](#Metric)'s `name`. For example, `eventCount`.

        :param api_name: The api_name of this MetricMetadata.
        :type api_name: str
        """

        self._api_name = api_name

    @property
    def blocked_reasons(self):
        """Gets the blocked_reasons of this MetricMetadata.

        If reasons are specified, your access is blocked to this metric for this property. API requests from you to this property for this metric will succeed; however, the report will contain only zeros for this metric. API requests with metric filters on blocked metrics will fail. If reasons are empty, you have access to this metric. To learn more, see [Access and data-restriction management](https://support.google.com/analytics/answer/10851388).

        :return: The blocked_reasons of this MetricMetadata.
        :rtype: List[str]
        """
        return self._blocked_reasons

    @blocked_reasons.setter
    def blocked_reasons(self, blocked_reasons):
        """Sets the blocked_reasons of this MetricMetadata.

        If reasons are specified, your access is blocked to this metric for this property. API requests from you to this property for this metric will succeed; however, the report will contain only zeros for this metric. API requests with metric filters on blocked metrics will fail. If reasons are empty, you have access to this metric. To learn more, see [Access and data-restriction management](https://support.google.com/analytics/answer/10851388).

        :param blocked_reasons: The blocked_reasons of this MetricMetadata.
        :type blocked_reasons: List[str]
        """
        allowed_values = ["BLOCKED_REASON_UNSPECIFIED", "NO_REVENUE_METRICS", "NO_COST_METRICS"]  # noqa: E501
        if not set(blocked_reasons).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `blocked_reasons` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(blocked_reasons) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._blocked_reasons = blocked_reasons

    @property
    def category(self):
        """Gets the category of this MetricMetadata.

        The display name of the category that this metrics belongs to. Similar dimensions and metrics are categorized together.

        :return: The category of this MetricMetadata.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MetricMetadata.

        The display name of the category that this metrics belongs to. Similar dimensions and metrics are categorized together.

        :param category: The category of this MetricMetadata.
        :type category: str
        """

        self._category = category

    @property
    def custom_definition(self):
        """Gets the custom_definition of this MetricMetadata.

        True if the metric is a custom metric for this property.

        :return: The custom_definition of this MetricMetadata.
        :rtype: bool
        """
        return self._custom_definition

    @custom_definition.setter
    def custom_definition(self, custom_definition):
        """Sets the custom_definition of this MetricMetadata.

        True if the metric is a custom metric for this property.

        :param custom_definition: The custom_definition of this MetricMetadata.
        :type custom_definition: bool
        """

        self._custom_definition = custom_definition

    @property
    def deprecated_api_names(self):
        """Gets the deprecated_api_names of this MetricMetadata.

        Still usable but deprecated names for this metric. If populated, this metric is available by either `apiName` or one of `deprecatedApiNames` for a period of time. After the deprecation period, the metric will be available only by `apiName`.

        :return: The deprecated_api_names of this MetricMetadata.
        :rtype: List[str]
        """
        return self._deprecated_api_names

    @deprecated_api_names.setter
    def deprecated_api_names(self, deprecated_api_names):
        """Sets the deprecated_api_names of this MetricMetadata.

        Still usable but deprecated names for this metric. If populated, this metric is available by either `apiName` or one of `deprecatedApiNames` for a period of time. After the deprecation period, the metric will be available only by `apiName`.

        :param deprecated_api_names: The deprecated_api_names of this MetricMetadata.
        :type deprecated_api_names: List[str]
        """

        self._deprecated_api_names = deprecated_api_names

    @property
    def description(self):
        """Gets the description of this MetricMetadata.

        Description of how this metric is used and calculated.

        :return: The description of this MetricMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetricMetadata.

        Description of how this metric is used and calculated.

        :param description: The description of this MetricMetadata.
        :type description: str
        """

        self._description = description

    @property
    def expression(self):
        """Gets the expression of this MetricMetadata.

        The mathematical expression for this derived metric. Can be used in [Metric](#Metric)'s `expression` field for equivalent reports. Most metrics are not expressions, and for non-expressions, this field is empty.

        :return: The expression of this MetricMetadata.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this MetricMetadata.

        The mathematical expression for this derived metric. Can be used in [Metric](#Metric)'s `expression` field for equivalent reports. Most metrics are not expressions, and for non-expressions, this field is empty.

        :param expression: The expression of this MetricMetadata.
        :type expression: str
        """

        self._expression = expression

    @property
    def type(self):
        """Gets the type of this MetricMetadata.

        The type of this metric.

        :return: The type of this MetricMetadata.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetricMetadata.

        The type of this metric.

        :param type: The type of this MetricMetadata.
        :type type: str
        """
        allowed_values = ["METRIC_TYPE_UNSPECIFIED", "TYPE_INTEGER", "TYPE_FLOAT", "TYPE_SECONDS", "TYPE_MILLISECONDS", "TYPE_MINUTES", "TYPE_HOURS", "TYPE_STANDARD", "TYPE_CURRENCY", "TYPE_FEET", "TYPE_MILES", "TYPE_METERS", "TYPE_KILOMETERS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def ui_name(self):
        """Gets the ui_name of this MetricMetadata.

        This metric's name within the Google Analytics user interface. For example, `Event count`.

        :return: The ui_name of this MetricMetadata.
        :rtype: str
        """
        return self._ui_name

    @ui_name.setter
    def ui_name(self, ui_name):
        """Sets the ui_name of this MetricMetadata.

        This metric's name within the Google Analytics user interface. For example, `Event count`.

        :param ui_name: The ui_name of this MetricMetadata.
        :type ui_name: str
        """

        self._ui_name = ui_name
