# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_header import DimensionHeader
from openapi_server.models.metric_header import MetricHeader
from openapi_server.models.pivot_header import PivotHeader
from openapi_server.models.property_quota import PropertyQuota
from openapi_server.models.response_meta_data import ResponseMetaData
from openapi_server.models.row import Row
from openapi_server import util


class RunPivotReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregates: List[Row]=None, dimension_headers: List[DimensionHeader]=None, kind: str=None, metadata: ResponseMetaData=None, metric_headers: List[MetricHeader]=None, pivot_headers: List[PivotHeader]=None, property_quota: PropertyQuota=None, rows: List[Row]=None):
        """RunPivotReportResponse - a model defined in OpenAPI

        :param aggregates: The aggregates of this RunPivotReportResponse.
        :param dimension_headers: The dimension_headers of this RunPivotReportResponse.
        :param kind: The kind of this RunPivotReportResponse.
        :param metadata: The metadata of this RunPivotReportResponse.
        :param metric_headers: The metric_headers of this RunPivotReportResponse.
        :param pivot_headers: The pivot_headers of this RunPivotReportResponse.
        :param property_quota: The property_quota of this RunPivotReportResponse.
        :param rows: The rows of this RunPivotReportResponse.
        """
        self.openapi_types = {
            'aggregates': List[Row],
            'dimension_headers': List[DimensionHeader],
            'kind': str,
            'metadata': ResponseMetaData,
            'metric_headers': List[MetricHeader],
            'pivot_headers': List[PivotHeader],
            'property_quota': PropertyQuota,
            'rows': List[Row]
        }

        self.attribute_map = {
            'aggregates': 'aggregates',
            'dimension_headers': 'dimensionHeaders',
            'kind': 'kind',
            'metadata': 'metadata',
            'metric_headers': 'metricHeaders',
            'pivot_headers': 'pivotHeaders',
            'property_quota': 'propertyQuota',
            'rows': 'rows'
        }

        self._aggregates = aggregates
        self._dimension_headers = dimension_headers
        self._kind = kind
        self._metadata = metadata
        self._metric_headers = metric_headers
        self._pivot_headers = pivot_headers
        self._property_quota = property_quota
        self._rows = rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunPivotReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunPivotReportResponse of this RunPivotReportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregates(self):
        """Gets the aggregates of this RunPivotReportResponse.

        Aggregation of metric values. Can be totals, minimums, or maximums. The returned aggregations are controlled by the metric_aggregations in the pivot. The type of aggregation returned in each row is shown by the dimension_values which are set to \"RESERVED_\".

        :return: The aggregates of this RunPivotReportResponse.
        :rtype: List[Row]
        """
        return self._aggregates

    @aggregates.setter
    def aggregates(self, aggregates):
        """Sets the aggregates of this RunPivotReportResponse.

        Aggregation of metric values. Can be totals, minimums, or maximums. The returned aggregations are controlled by the metric_aggregations in the pivot. The type of aggregation returned in each row is shown by the dimension_values which are set to \"RESERVED_\".

        :param aggregates: The aggregates of this RunPivotReportResponse.
        :type aggregates: List[Row]
        """

        self._aggregates = aggregates

    @property
    def dimension_headers(self):
        """Gets the dimension_headers of this RunPivotReportResponse.

        Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.

        :return: The dimension_headers of this RunPivotReportResponse.
        :rtype: List[DimensionHeader]
        """
        return self._dimension_headers

    @dimension_headers.setter
    def dimension_headers(self, dimension_headers):
        """Sets the dimension_headers of this RunPivotReportResponse.

        Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.

        :param dimension_headers: The dimension_headers of this RunPivotReportResponse.
        :type dimension_headers: List[DimensionHeader]
        """

        self._dimension_headers = dimension_headers

    @property
    def kind(self):
        """Gets the kind of this RunPivotReportResponse.

        Identifies what kind of resource this message is. This `kind` is always the fixed string \"analyticsData#runPivotReport\". Useful to distinguish between response types in JSON.

        :return: The kind of this RunPivotReportResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RunPivotReportResponse.

        Identifies what kind of resource this message is. This `kind` is always the fixed string \"analyticsData#runPivotReport\". Useful to distinguish between response types in JSON.

        :param kind: The kind of this RunPivotReportResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def metadata(self):
        """Gets the metadata of this RunPivotReportResponse.


        :return: The metadata of this RunPivotReportResponse.
        :rtype: ResponseMetaData
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RunPivotReportResponse.


        :param metadata: The metadata of this RunPivotReportResponse.
        :type metadata: ResponseMetaData
        """

        self._metadata = metadata

    @property
    def metric_headers(self):
        """Gets the metric_headers of this RunPivotReportResponse.

        Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.

        :return: The metric_headers of this RunPivotReportResponse.
        :rtype: List[MetricHeader]
        """
        return self._metric_headers

    @metric_headers.setter
    def metric_headers(self, metric_headers):
        """Sets the metric_headers of this RunPivotReportResponse.

        Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.

        :param metric_headers: The metric_headers of this RunPivotReportResponse.
        :type metric_headers: List[MetricHeader]
        """

        self._metric_headers = metric_headers

    @property
    def pivot_headers(self):
        """Gets the pivot_headers of this RunPivotReportResponse.

        Summarizes the columns and rows created by a pivot. Each pivot in the request produces one header in the response. If we have a request like this: \"pivots\": [{ \"fieldNames\": [\"country\", \"city\"] }, { \"fieldNames\": \"eventName\" }] We will have the following `pivotHeaders` in the response: \"pivotHeaders\" : [{ \"dimensionHeaders\": [{ \"dimensionValues\": [ { \"value\": \"United Kingdom\" }, { \"value\": \"London\" } ] }, { \"dimensionValues\": [ { \"value\": \"Japan\" }, { \"value\": \"Osaka\" } ] }] }, { \"dimensionHeaders\": [{ \"dimensionValues\": [{ \"value\": \"session_start\" }] }, { \"dimensionValues\": [{ \"value\": \"scroll\" }] }] }]

        :return: The pivot_headers of this RunPivotReportResponse.
        :rtype: List[PivotHeader]
        """
        return self._pivot_headers

    @pivot_headers.setter
    def pivot_headers(self, pivot_headers):
        """Sets the pivot_headers of this RunPivotReportResponse.

        Summarizes the columns and rows created by a pivot. Each pivot in the request produces one header in the response. If we have a request like this: \"pivots\": [{ \"fieldNames\": [\"country\", \"city\"] }, { \"fieldNames\": \"eventName\" }] We will have the following `pivotHeaders` in the response: \"pivotHeaders\" : [{ \"dimensionHeaders\": [{ \"dimensionValues\": [ { \"value\": \"United Kingdom\" }, { \"value\": \"London\" } ] }, { \"dimensionValues\": [ { \"value\": \"Japan\" }, { \"value\": \"Osaka\" } ] }] }, { \"dimensionHeaders\": [{ \"dimensionValues\": [{ \"value\": \"session_start\" }] }, { \"dimensionValues\": [{ \"value\": \"scroll\" }] }] }]

        :param pivot_headers: The pivot_headers of this RunPivotReportResponse.
        :type pivot_headers: List[PivotHeader]
        """

        self._pivot_headers = pivot_headers

    @property
    def property_quota(self):
        """Gets the property_quota of this RunPivotReportResponse.


        :return: The property_quota of this RunPivotReportResponse.
        :rtype: PropertyQuota
        """
        return self._property_quota

    @property_quota.setter
    def property_quota(self, property_quota):
        """Sets the property_quota of this RunPivotReportResponse.


        :param property_quota: The property_quota of this RunPivotReportResponse.
        :type property_quota: PropertyQuota
        """

        self._property_quota = property_quota

    @property
    def rows(self):
        """Gets the rows of this RunPivotReportResponse.

        Rows of dimension value combinations and metric values in the report.

        :return: The rows of this RunPivotReportResponse.
        :rtype: List[Row]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this RunPivotReportResponse.

        Rows of dimension value combinations and metric values in the report.

        :param rows: The rows of this RunPivotReportResponse.
        :type rows: List[Row]
        """

        self._rows = rows
