# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_by import OrderBy
from openapi_server import util


class Pivot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_names: List[str]=None, limit: str=None, metric_aggregations: List[str]=None, offset: str=None, order_bys: List[OrderBy]=None):
        """Pivot - a model defined in OpenAPI

        :param field_names: The field_names of this Pivot.
        :param limit: The limit of this Pivot.
        :param metric_aggregations: The metric_aggregations of this Pivot.
        :param offset: The offset of this Pivot.
        :param order_bys: The order_bys of this Pivot.
        """
        self.openapi_types = {
            'field_names': List[str],
            'limit': str,
            'metric_aggregations': List[str],
            'offset': str,
            'order_bys': List[OrderBy]
        }

        self.attribute_map = {
            'field_names': 'fieldNames',
            'limit': 'limit',
            'metric_aggregations': 'metricAggregations',
            'offset': 'offset',
            'order_bys': 'orderBys'
        }

        self._field_names = field_names
        self._limit = limit
        self._metric_aggregations = metric_aggregations
        self._offset = offset
        self._order_bys = order_bys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pivot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pivot of this Pivot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_names(self):
        """Gets the field_names of this Pivot.

        Dimension names for visible columns in the report response. Including \"dateRange\" produces a date range column; for each row in the response, dimension values in the date range column will indicate the corresponding date range from the request.

        :return: The field_names of this Pivot.
        :rtype: List[str]
        """
        return self._field_names

    @field_names.setter
    def field_names(self, field_names):
        """Sets the field_names of this Pivot.

        Dimension names for visible columns in the report response. Including \"dateRange\" produces a date range column; for each row in the response, dimension values in the date range column will indicate the corresponding date range from the request.

        :param field_names: The field_names of this Pivot.
        :type field_names: List[str]
        """

        self._field_names = field_names

    @property
    def limit(self):
        """Gets the limit of this Pivot.

        The number of unique combinations of dimension values to return in this pivot. The `limit` parameter is required. A `limit` of 10,000 is common for single pivot requests. The product of the `limit` for each `pivot` in a `RunPivotReportRequest` must not exceed 250,000. For example, a two pivot request with `limit: 1000` in each pivot will fail because the product is `1,000,000`.

        :return: The limit of this Pivot.
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Pivot.

        The number of unique combinations of dimension values to return in this pivot. The `limit` parameter is required. A `limit` of 10,000 is common for single pivot requests. The product of the `limit` for each `pivot` in a `RunPivotReportRequest` must not exceed 250,000. For example, a two pivot request with `limit: 1000` in each pivot will fail because the product is `1,000,000`.

        :param limit: The limit of this Pivot.
        :type limit: str
        """

        self._limit = limit

    @property
    def metric_aggregations(self):
        """Gets the metric_aggregations of this Pivot.

        Aggregate the metrics by dimensions in this pivot using the specified metric_aggregations.

        :return: The metric_aggregations of this Pivot.
        :rtype: List[str]
        """
        return self._metric_aggregations

    @metric_aggregations.setter
    def metric_aggregations(self, metric_aggregations):
        """Sets the metric_aggregations of this Pivot.

        Aggregate the metrics by dimensions in this pivot using the specified metric_aggregations.

        :param metric_aggregations: The metric_aggregations of this Pivot.
        :type metric_aggregations: List[str]
        """
        allowed_values = ["METRIC_AGGREGATION_UNSPECIFIED", "TOTAL", "MINIMUM", "MAXIMUM", "COUNT"]  # noqa: E501
        if not set(metric_aggregations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `metric_aggregations` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(metric_aggregations) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._metric_aggregations = metric_aggregations

    @property
    def offset(self):
        """Gets the offset of this Pivot.

        The row count of the start row. The first row is counted as row 0.

        :return: The offset of this Pivot.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Pivot.

        The row count of the start row. The first row is counted as row 0.

        :param offset: The offset of this Pivot.
        :type offset: str
        """

        self._offset = offset

    @property
    def order_bys(self):
        """Gets the order_bys of this Pivot.

        Specifies how dimensions are ordered in the pivot. In the first Pivot, the OrderBys determine Row and PivotDimensionHeader ordering; in subsequent Pivots, the OrderBys determine only PivotDimensionHeader ordering. Dimensions specified in these OrderBys must be a subset of Pivot.field_names.

        :return: The order_bys of this Pivot.
        :rtype: List[OrderBy]
        """
        return self._order_bys

    @order_bys.setter
    def order_bys(self, order_bys):
        """Sets the order_bys of this Pivot.

        Specifies how dimensions are ordered in the pivot. In the first Pivot, the OrderBys determine Row and PivotDimensionHeader ordering; in subsequent Pivots, the OrderBys determine only PivotDimensionHeader ordering. Dimensions specified in these OrderBys must be a subset of Pivot.field_names.

        :param order_bys: The order_bys of this Pivot.
        :type order_bys: List[OrderBy]
        """

        self._order_bys = order_bys
