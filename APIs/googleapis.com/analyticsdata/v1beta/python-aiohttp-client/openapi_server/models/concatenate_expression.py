# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConcatenateExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delimiter: str=None, dimension_names: List[str]=None):
        """ConcatenateExpression - a model defined in OpenAPI

        :param delimiter: The delimiter of this ConcatenateExpression.
        :param dimension_names: The dimension_names of this ConcatenateExpression.
        """
        self.openapi_types = {
            'delimiter': str,
            'dimension_names': List[str]
        }

        self.attribute_map = {
            'delimiter': 'delimiter',
            'dimension_names': 'dimensionNames'
        }

        self._delimiter = delimiter
        self._dimension_names = dimension_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConcatenateExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConcatenateExpression of this ConcatenateExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delimiter(self):
        """Gets the delimiter of this ConcatenateExpression.

        The delimiter placed between dimension names. Delimiters are often single characters such as \"|\" or \",\" but can be longer strings. If a dimension value contains the delimiter, both will be present in response with no distinction. For example if dimension 1 value = \"US,FR\", dimension 2 value = \"JP\", and delimiter = \",\", then the response will contain \"US,FR,JP\".

        :return: The delimiter of this ConcatenateExpression.
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this ConcatenateExpression.

        The delimiter placed between dimension names. Delimiters are often single characters such as \"|\" or \",\" but can be longer strings. If a dimension value contains the delimiter, both will be present in response with no distinction. For example if dimension 1 value = \"US,FR\", dimension 2 value = \"JP\", and delimiter = \",\", then the response will contain \"US,FR,JP\".

        :param delimiter: The delimiter of this ConcatenateExpression.
        :type delimiter: str
        """

        self._delimiter = delimiter

    @property
    def dimension_names(self):
        """Gets the dimension_names of this ConcatenateExpression.

        Names of dimensions. The names must refer back to names in the dimensions field of the request.

        :return: The dimension_names of this ConcatenateExpression.
        :rtype: List[str]
        """
        return self._dimension_names

    @dimension_names.setter
    def dimension_names(self, dimension_names):
        """Sets the dimension_names of this ConcatenateExpression.

        Names of dimensions. The names must refer back to names in the dimensions field of the request.

        :param dimension_names: The dimension_names of this ConcatenateExpression.
        :type dimension_names: List[str]
        """

        self._dimension_names = dimension_names
