# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cohort_spec import CohortSpec
from openapi_server.models.date_range import DateRange
from openapi_server.models.dimension import Dimension
from openapi_server.models.filter_expression import FilterExpression
from openapi_server.models.metric import Metric
from openapi_server.models.pivot import Pivot
from openapi_server import util


class RunPivotReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cohort_spec: CohortSpec=None, currency_code: str=None, date_ranges: List[DateRange]=None, dimension_filter: FilterExpression=None, dimensions: List[Dimension]=None, keep_empty_rows: bool=None, metric_filter: FilterExpression=None, metrics: List[Metric]=None, pivots: List[Pivot]=None, _property: str=None, return_property_quota: bool=None):
        """RunPivotReportRequest - a model defined in OpenAPI

        :param cohort_spec: The cohort_spec of this RunPivotReportRequest.
        :param currency_code: The currency_code of this RunPivotReportRequest.
        :param date_ranges: The date_ranges of this RunPivotReportRequest.
        :param dimension_filter: The dimension_filter of this RunPivotReportRequest.
        :param dimensions: The dimensions of this RunPivotReportRequest.
        :param keep_empty_rows: The keep_empty_rows of this RunPivotReportRequest.
        :param metric_filter: The metric_filter of this RunPivotReportRequest.
        :param metrics: The metrics of this RunPivotReportRequest.
        :param pivots: The pivots of this RunPivotReportRequest.
        :param _property: The _property of this RunPivotReportRequest.
        :param return_property_quota: The return_property_quota of this RunPivotReportRequest.
        """
        self.openapi_types = {
            'cohort_spec': CohortSpec,
            'currency_code': str,
            'date_ranges': List[DateRange],
            'dimension_filter': FilterExpression,
            'dimensions': List[Dimension],
            'keep_empty_rows': bool,
            'metric_filter': FilterExpression,
            'metrics': List[Metric],
            'pivots': List[Pivot],
            '_property': str,
            'return_property_quota': bool
        }

        self.attribute_map = {
            'cohort_spec': 'cohortSpec',
            'currency_code': 'currencyCode',
            'date_ranges': 'dateRanges',
            'dimension_filter': 'dimensionFilter',
            'dimensions': 'dimensions',
            'keep_empty_rows': 'keepEmptyRows',
            'metric_filter': 'metricFilter',
            'metrics': 'metrics',
            'pivots': 'pivots',
            '_property': 'property',
            'return_property_quota': 'returnPropertyQuota'
        }

        self._cohort_spec = cohort_spec
        self._currency_code = currency_code
        self._date_ranges = date_ranges
        self._dimension_filter = dimension_filter
        self._dimensions = dimensions
        self._keep_empty_rows = keep_empty_rows
        self._metric_filter = metric_filter
        self._metrics = metrics
        self._pivots = pivots
        self.__property = _property
        self._return_property_quota = return_property_quota

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunPivotReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunPivotReportRequest of this RunPivotReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cohort_spec(self):
        """Gets the cohort_spec of this RunPivotReportRequest.


        :return: The cohort_spec of this RunPivotReportRequest.
        :rtype: CohortSpec
        """
        return self._cohort_spec

    @cohort_spec.setter
    def cohort_spec(self, cohort_spec):
        """Sets the cohort_spec of this RunPivotReportRequest.


        :param cohort_spec: The cohort_spec of this RunPivotReportRequest.
        :type cohort_spec: CohortSpec
        """

        self._cohort_spec = cohort_spec

    @property
    def currency_code(self):
        """Gets the currency_code of this RunPivotReportRequest.

        A currency code in ISO4217 format, such as \"AED\", \"USD\", \"JPY\". If the field is empty, the report uses the property's default currency.

        :return: The currency_code of this RunPivotReportRequest.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this RunPivotReportRequest.

        A currency code in ISO4217 format, such as \"AED\", \"USD\", \"JPY\". If the field is empty, the report uses the property's default currency.

        :param currency_code: The currency_code of this RunPivotReportRequest.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def date_ranges(self):
        """Gets the date_ranges of this RunPivotReportRequest.

        The date range to retrieve event data for the report. If multiple date ranges are specified, event data from each date range is used in the report. A special dimension with field name \"dateRange\" can be included in a Pivot's field names; if included, the report compares between date ranges. In a cohort request, this `dateRanges` must be unspecified.

        :return: The date_ranges of this RunPivotReportRequest.
        :rtype: List[DateRange]
        """
        return self._date_ranges

    @date_ranges.setter
    def date_ranges(self, date_ranges):
        """Sets the date_ranges of this RunPivotReportRequest.

        The date range to retrieve event data for the report. If multiple date ranges are specified, event data from each date range is used in the report. A special dimension with field name \"dateRange\" can be included in a Pivot's field names; if included, the report compares between date ranges. In a cohort request, this `dateRanges` must be unspecified.

        :param date_ranges: The date_ranges of this RunPivotReportRequest.
        :type date_ranges: List[DateRange]
        """

        self._date_ranges = date_ranges

    @property
    def dimension_filter(self):
        """Gets the dimension_filter of this RunPivotReportRequest.


        :return: The dimension_filter of this RunPivotReportRequest.
        :rtype: FilterExpression
        """
        return self._dimension_filter

    @dimension_filter.setter
    def dimension_filter(self, dimension_filter):
        """Sets the dimension_filter of this RunPivotReportRequest.


        :param dimension_filter: The dimension_filter of this RunPivotReportRequest.
        :type dimension_filter: FilterExpression
        """

        self._dimension_filter = dimension_filter

    @property
    def dimensions(self):
        """Gets the dimensions of this RunPivotReportRequest.

        The dimensions requested. All defined dimensions must be used by one of the following: dimension_expression, dimension_filter, pivots, order_bys.

        :return: The dimensions of this RunPivotReportRequest.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this RunPivotReportRequest.

        The dimensions requested. All defined dimensions must be used by one of the following: dimension_expression, dimension_filter, pivots, order_bys.

        :param dimensions: The dimensions of this RunPivotReportRequest.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def keep_empty_rows(self):
        """Gets the keep_empty_rows of this RunPivotReportRequest.

        If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. Regardless of this `keep_empty_rows` setting, only data recorded by the Google Analytics (GA4) property can be displayed in a report. For example if a property never logs a `purchase` event, then a query for the `eventName` dimension and `eventCount` metric will not have a row eventName: \"purchase\" and eventCount: 0.

        :return: The keep_empty_rows of this RunPivotReportRequest.
        :rtype: bool
        """
        return self._keep_empty_rows

    @keep_empty_rows.setter
    def keep_empty_rows(self, keep_empty_rows):
        """Sets the keep_empty_rows of this RunPivotReportRequest.

        If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. Regardless of this `keep_empty_rows` setting, only data recorded by the Google Analytics (GA4) property can be displayed in a report. For example if a property never logs a `purchase` event, then a query for the `eventName` dimension and `eventCount` metric will not have a row eventName: \"purchase\" and eventCount: 0.

        :param keep_empty_rows: The keep_empty_rows of this RunPivotReportRequest.
        :type keep_empty_rows: bool
        """

        self._keep_empty_rows = keep_empty_rows

    @property
    def metric_filter(self):
        """Gets the metric_filter of this RunPivotReportRequest.


        :return: The metric_filter of this RunPivotReportRequest.
        :rtype: FilterExpression
        """
        return self._metric_filter

    @metric_filter.setter
    def metric_filter(self, metric_filter):
        """Sets the metric_filter of this RunPivotReportRequest.


        :param metric_filter: The metric_filter of this RunPivotReportRequest.
        :type metric_filter: FilterExpression
        """

        self._metric_filter = metric_filter

    @property
    def metrics(self):
        """Gets the metrics of this RunPivotReportRequest.

        The metrics requested, at least one metric needs to be specified. All defined metrics must be used by one of the following: metric_expression, metric_filter, order_bys.

        :return: The metrics of this RunPivotReportRequest.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this RunPivotReportRequest.

        The metrics requested, at least one metric needs to be specified. All defined metrics must be used by one of the following: metric_expression, metric_filter, order_bys.

        :param metrics: The metrics of this RunPivotReportRequest.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def pivots(self):
        """Gets the pivots of this RunPivotReportRequest.

        Describes the visual format of the report's dimensions in columns or rows. The union of the fieldNames (dimension names) in all pivots must be a subset of dimension names defined in Dimensions. No two pivots can share a dimension. A dimension is only visible if it appears in a pivot.

        :return: The pivots of this RunPivotReportRequest.
        :rtype: List[Pivot]
        """
        return self._pivots

    @pivots.setter
    def pivots(self, pivots):
        """Sets the pivots of this RunPivotReportRequest.

        Describes the visual format of the report's dimensions in columns or rows. The union of the fieldNames (dimension names) in all pivots must be a subset of dimension names defined in Dimensions. No two pivots can share a dimension. A dimension is only visible if it appears in a pivot.

        :param pivots: The pivots of this RunPivotReportRequest.
        :type pivots: List[Pivot]
        """

        self._pivots = pivots

    @property
    def _property(self):
        """Gets the _property of this RunPivotReportRequest.

        A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234

        :return: The _property of this RunPivotReportRequest.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this RunPivotReportRequest.

        A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234

        :param _property: The _property of this RunPivotReportRequest.
        :type _property: str
        """

        self.__property = _property

    @property
    def return_property_quota(self):
        """Gets the return_property_quota of this RunPivotReportRequest.

        Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota).

        :return: The return_property_quota of this RunPivotReportRequest.
        :rtype: bool
        """
        return self._return_property_quota

    @return_property_quota.setter
    def return_property_quota(self, return_property_quota):
        """Sets the return_property_quota of this RunPivotReportRequest.

        Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota).

        :param return_property_quota: The return_property_quota of this RunPivotReportRequest.
        :type return_property_quota: bool
        """

        self._return_property_quota = return_property_quota
