# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v1beta_audience_dimension import V1betaAudienceDimension
from openapi_server import util


class AudienceExport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audience: str=None, audience_display_name: str=None, begin_creating_time: str=None, creation_quota_tokens_charged: int=None, dimensions: List[V1betaAudienceDimension]=None, error_message: str=None, name: str=None, percentage_completed: float=None, row_count: int=None, state: str=None):
        """AudienceExport - a model defined in OpenAPI

        :param audience: The audience of this AudienceExport.
        :param audience_display_name: The audience_display_name of this AudienceExport.
        :param begin_creating_time: The begin_creating_time of this AudienceExport.
        :param creation_quota_tokens_charged: The creation_quota_tokens_charged of this AudienceExport.
        :param dimensions: The dimensions of this AudienceExport.
        :param error_message: The error_message of this AudienceExport.
        :param name: The name of this AudienceExport.
        :param percentage_completed: The percentage_completed of this AudienceExport.
        :param row_count: The row_count of this AudienceExport.
        :param state: The state of this AudienceExport.
        """
        self.openapi_types = {
            'audience': str,
            'audience_display_name': str,
            'begin_creating_time': str,
            'creation_quota_tokens_charged': int,
            'dimensions': List[V1betaAudienceDimension],
            'error_message': str,
            'name': str,
            'percentage_completed': float,
            'row_count': int,
            'state': str
        }

        self.attribute_map = {
            'audience': 'audience',
            'audience_display_name': 'audienceDisplayName',
            'begin_creating_time': 'beginCreatingTime',
            'creation_quota_tokens_charged': 'creationQuotaTokensCharged',
            'dimensions': 'dimensions',
            'error_message': 'errorMessage',
            'name': 'name',
            'percentage_completed': 'percentageCompleted',
            'row_count': 'rowCount',
            'state': 'state'
        }

        self._audience = audience
        self._audience_display_name = audience_display_name
        self._begin_creating_time = begin_creating_time
        self._creation_quota_tokens_charged = creation_quota_tokens_charged
        self._dimensions = dimensions
        self._error_message = error_message
        self._name = name
        self._percentage_completed = percentage_completed
        self._row_count = row_count
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudienceExport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudienceExport of this AudienceExport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audience(self):
        """Gets the audience of this AudienceExport.

        Required. The audience resource name. This resource name identifies the audience being listed and is shared between the Analytics Data & Admin APIs. Format: `properties/{property}/audiences/{audience}`

        :return: The audience of this AudienceExport.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this AudienceExport.

        Required. The audience resource name. This resource name identifies the audience being listed and is shared between the Analytics Data & Admin APIs. Format: `properties/{property}/audiences/{audience}`

        :param audience: The audience of this AudienceExport.
        :type audience: str
        """

        self._audience = audience

    @property
    def audience_display_name(self):
        """Gets the audience_display_name of this AudienceExport.

        Output only. The descriptive display name for this audience. For example, \"Purchasers\".

        :return: The audience_display_name of this AudienceExport.
        :rtype: str
        """
        return self._audience_display_name

    @audience_display_name.setter
    def audience_display_name(self, audience_display_name):
        """Sets the audience_display_name of this AudienceExport.

        Output only. The descriptive display name for this audience. For example, \"Purchasers\".

        :param audience_display_name: The audience_display_name of this AudienceExport.
        :type audience_display_name: str
        """

        self._audience_display_name = audience_display_name

    @property
    def begin_creating_time(self):
        """Gets the begin_creating_time of this AudienceExport.

        Output only. The time when CreateAudienceExport was called and the AudienceExport began the `CREATING` state.

        :return: The begin_creating_time of this AudienceExport.
        :rtype: str
        """
        return self._begin_creating_time

    @begin_creating_time.setter
    def begin_creating_time(self, begin_creating_time):
        """Sets the begin_creating_time of this AudienceExport.

        Output only. The time when CreateAudienceExport was called and the AudienceExport began the `CREATING` state.

        :param begin_creating_time: The begin_creating_time of this AudienceExport.
        :type begin_creating_time: str
        """

        self._begin_creating_time = begin_creating_time

    @property
    def creation_quota_tokens_charged(self):
        """Gets the creation_quota_tokens_charged of this AudienceExport.

        Output only. The total quota tokens charged during creation of the AudienceExport. Because this token count is based on activity from the `CREATING` state, this tokens charged will be fixed once an AudienceExport enters the `ACTIVE` or `FAILED` states.

        :return: The creation_quota_tokens_charged of this AudienceExport.
        :rtype: int
        """
        return self._creation_quota_tokens_charged

    @creation_quota_tokens_charged.setter
    def creation_quota_tokens_charged(self, creation_quota_tokens_charged):
        """Sets the creation_quota_tokens_charged of this AudienceExport.

        Output only. The total quota tokens charged during creation of the AudienceExport. Because this token count is based on activity from the `CREATING` state, this tokens charged will be fixed once an AudienceExport enters the `ACTIVE` or `FAILED` states.

        :param creation_quota_tokens_charged: The creation_quota_tokens_charged of this AudienceExport.
        :type creation_quota_tokens_charged: int
        """

        self._creation_quota_tokens_charged = creation_quota_tokens_charged

    @property
    def dimensions(self):
        """Gets the dimensions of this AudienceExport.

        Required. The dimensions requested and displayed in the query response.

        :return: The dimensions of this AudienceExport.
        :rtype: List[V1betaAudienceDimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this AudienceExport.

        Required. The dimensions requested and displayed in the query response.

        :param dimensions: The dimensions of this AudienceExport.
        :type dimensions: List[V1betaAudienceDimension]
        """

        self._dimensions = dimensions

    @property
    def error_message(self):
        """Gets the error_message of this AudienceExport.

        Output only. Error message is populated when an audience export fails during creation. A common reason for such a failure is quota exhaustion.

        :return: The error_message of this AudienceExport.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this AudienceExport.

        Output only. Error message is populated when an audience export fails during creation. A common reason for such a failure is quota exhaustion.

        :param error_message: The error_message of this AudienceExport.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def name(self):
        """Gets the name of this AudienceExport.

        Output only. Identifier. The audience export resource name assigned during creation. This resource name identifies this `AudienceExport`. Format: `properties/{property}/audienceExports/{audience_export}`

        :return: The name of this AudienceExport.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AudienceExport.

        Output only. Identifier. The audience export resource name assigned during creation. This resource name identifies this `AudienceExport`. Format: `properties/{property}/audienceExports/{audience_export}`

        :param name: The name of this AudienceExport.
        :type name: str
        """

        self._name = name

    @property
    def percentage_completed(self):
        """Gets the percentage_completed of this AudienceExport.

        Output only. The percentage completed for this audience export ranging between 0 to 100.

        :return: The percentage_completed of this AudienceExport.
        :rtype: float
        """
        return self._percentage_completed

    @percentage_completed.setter
    def percentage_completed(self, percentage_completed):
        """Sets the percentage_completed of this AudienceExport.

        Output only. The percentage completed for this audience export ranging between 0 to 100.

        :param percentage_completed: The percentage_completed of this AudienceExport.
        :type percentage_completed: float
        """

        self._percentage_completed = percentage_completed

    @property
    def row_count(self):
        """Gets the row_count of this AudienceExport.

        Output only. The total number of rows in the AudienceExport result.

        :return: The row_count of this AudienceExport.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this AudienceExport.

        Output only. The total number of rows in the AudienceExport result.

        :param row_count: The row_count of this AudienceExport.
        :type row_count: int
        """

        self._row_count = row_count

    @property
    def state(self):
        """Gets the state of this AudienceExport.

        Output only. The current state for this AudienceExport.

        :return: The state of this AudienceExport.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AudienceExport.

        Output only. The current state for this AudienceExport.

        :param state: The state of this AudienceExport.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
