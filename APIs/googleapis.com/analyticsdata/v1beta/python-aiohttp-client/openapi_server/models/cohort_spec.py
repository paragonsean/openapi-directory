# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cohort import Cohort
from openapi_server.models.cohort_report_settings import CohortReportSettings
from openapi_server.models.cohorts_range import CohortsRange
from openapi_server import util


class CohortSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cohort_report_settings: CohortReportSettings=None, cohorts: List[Cohort]=None, cohorts_range: CohortsRange=None):
        """CohortSpec - a model defined in OpenAPI

        :param cohort_report_settings: The cohort_report_settings of this CohortSpec.
        :param cohorts: The cohorts of this CohortSpec.
        :param cohorts_range: The cohorts_range of this CohortSpec.
        """
        self.openapi_types = {
            'cohort_report_settings': CohortReportSettings,
            'cohorts': List[Cohort],
            'cohorts_range': CohortsRange
        }

        self.attribute_map = {
            'cohort_report_settings': 'cohortReportSettings',
            'cohorts': 'cohorts',
            'cohorts_range': 'cohortsRange'
        }

        self._cohort_report_settings = cohort_report_settings
        self._cohorts = cohorts
        self._cohorts_range = cohorts_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CohortSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CohortSpec of this CohortSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cohort_report_settings(self):
        """Gets the cohort_report_settings of this CohortSpec.


        :return: The cohort_report_settings of this CohortSpec.
        :rtype: CohortReportSettings
        """
        return self._cohort_report_settings

    @cohort_report_settings.setter
    def cohort_report_settings(self, cohort_report_settings):
        """Sets the cohort_report_settings of this CohortSpec.


        :param cohort_report_settings: The cohort_report_settings of this CohortSpec.
        :type cohort_report_settings: CohortReportSettings
        """

        self._cohort_report_settings = cohort_report_settings

    @property
    def cohorts(self):
        """Gets the cohorts of this CohortSpec.

        Defines the selection criteria to group users into cohorts. Most cohort reports define only a single cohort. If multiple cohorts are specified, each cohort can be recognized in the report by their name.

        :return: The cohorts of this CohortSpec.
        :rtype: List[Cohort]
        """
        return self._cohorts

    @cohorts.setter
    def cohorts(self, cohorts):
        """Sets the cohorts of this CohortSpec.

        Defines the selection criteria to group users into cohorts. Most cohort reports define only a single cohort. If multiple cohorts are specified, each cohort can be recognized in the report by their name.

        :param cohorts: The cohorts of this CohortSpec.
        :type cohorts: List[Cohort]
        """

        self._cohorts = cohorts

    @property
    def cohorts_range(self):
        """Gets the cohorts_range of this CohortSpec.


        :return: The cohorts_range of this CohortSpec.
        :rtype: CohortsRange
        """
        return self._cohorts_range

    @cohorts_range.setter
    def cohorts_range(self, cohorts_range):
        """Sets the cohorts_range of this CohortSpec.


        :param cohorts_range: The cohorts_range of this CohortSpec.
        :type cohorts_range: CohortsRange
        """

        self._cohorts_range = cohorts_range
