/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICohort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICohort::OAICohort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICohort::OAICohort() {
    this->initializeModel();
}

OAICohort::~OAICohort() {}

void OAICohort::initializeModel() {

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICohort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICohort::fromJsonObject(QJsonObject json) {

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICohort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICohort::asJsonObject() const {
    QJsonObject obj;
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_dimension_isSet) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIDateRange OAICohort::getDateRange() const {
    return m_date_range;
}
void OAICohort::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAICohort::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAICohort::is_date_range_Valid() const{
    return m_date_range_isValid;
}

QString OAICohort::getDimension() const {
    return m_dimension;
}
void OAICohort::setDimension(const QString &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAICohort::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAICohort::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QString OAICohort::getName() const {
    return m_name;
}
void OAICohort::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICohort::is_name_Set() const{
    return m_name_isSet;
}

bool OAICohort::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICohort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICohort::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
