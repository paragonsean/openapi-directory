/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActiveMetricRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActiveMetricRestriction::OAIActiveMetricRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActiveMetricRestriction::OAIActiveMetricRestriction() {
    this->initializeModel();
}

OAIActiveMetricRestriction::~OAIActiveMetricRestriction() {}

void OAIActiveMetricRestriction::initializeModel() {

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_restricted_metric_types_isSet = false;
    m_restricted_metric_types_isValid = false;
}

void OAIActiveMetricRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActiveMetricRestriction::fromJsonObject(QJsonObject json) {

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_restricted_metric_types_isValid = ::OpenAPI::fromJsonValue(m_restricted_metric_types, json[QString("restrictedMetricTypes")]);
    m_restricted_metric_types_isSet = !json[QString("restrictedMetricTypes")].isNull() && m_restricted_metric_types_isValid;
}

QString OAIActiveMetricRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActiveMetricRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_restricted_metric_types.size() > 0) {
        obj.insert(QString("restrictedMetricTypes"), ::OpenAPI::toJsonValue(m_restricted_metric_types));
    }
    return obj;
}

QString OAIActiveMetricRestriction::getMetricName() const {
    return m_metric_name;
}
void OAIActiveMetricRestriction::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIActiveMetricRestriction::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIActiveMetricRestriction::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QList<QString> OAIActiveMetricRestriction::getRestrictedMetricTypes() const {
    return m_restricted_metric_types;
}
void OAIActiveMetricRestriction::setRestrictedMetricTypes(const QList<QString> &restricted_metric_types) {
    m_restricted_metric_types = restricted_metric_types;
    m_restricted_metric_types_isSet = true;
}

bool OAIActiveMetricRestriction::is_restricted_metric_types_Set() const{
    return m_restricted_metric_types_isSet;
}

bool OAIActiveMetricRestriction::is_restricted_metric_types_Valid() const{
    return m_restricted_metric_types_isValid;
}

bool OAIActiveMetricRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_metric_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActiveMetricRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
