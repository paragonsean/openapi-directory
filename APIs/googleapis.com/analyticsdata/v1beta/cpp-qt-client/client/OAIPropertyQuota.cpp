/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyQuota::OAIPropertyQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyQuota::OAIPropertyQuota() {
    this->initializeModel();
}

OAIPropertyQuota::~OAIPropertyQuota() {}

void OAIPropertyQuota::initializeModel() {

    m_concurrent_requests_isSet = false;
    m_concurrent_requests_isValid = false;

    m_potentially_thresholded_requests_per_hour_isSet = false;
    m_potentially_thresholded_requests_per_hour_isValid = false;

    m_server_errors_per_project_per_hour_isSet = false;
    m_server_errors_per_project_per_hour_isValid = false;

    m_tokens_per_day_isSet = false;
    m_tokens_per_day_isValid = false;

    m_tokens_per_hour_isSet = false;
    m_tokens_per_hour_isValid = false;

    m_tokens_per_project_per_hour_isSet = false;
    m_tokens_per_project_per_hour_isValid = false;
}

void OAIPropertyQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyQuota::fromJsonObject(QJsonObject json) {

    m_concurrent_requests_isValid = ::OpenAPI::fromJsonValue(m_concurrent_requests, json[QString("concurrentRequests")]);
    m_concurrent_requests_isSet = !json[QString("concurrentRequests")].isNull() && m_concurrent_requests_isValid;

    m_potentially_thresholded_requests_per_hour_isValid = ::OpenAPI::fromJsonValue(m_potentially_thresholded_requests_per_hour, json[QString("potentiallyThresholdedRequestsPerHour")]);
    m_potentially_thresholded_requests_per_hour_isSet = !json[QString("potentiallyThresholdedRequestsPerHour")].isNull() && m_potentially_thresholded_requests_per_hour_isValid;

    m_server_errors_per_project_per_hour_isValid = ::OpenAPI::fromJsonValue(m_server_errors_per_project_per_hour, json[QString("serverErrorsPerProjectPerHour")]);
    m_server_errors_per_project_per_hour_isSet = !json[QString("serverErrorsPerProjectPerHour")].isNull() && m_server_errors_per_project_per_hour_isValid;

    m_tokens_per_day_isValid = ::OpenAPI::fromJsonValue(m_tokens_per_day, json[QString("tokensPerDay")]);
    m_tokens_per_day_isSet = !json[QString("tokensPerDay")].isNull() && m_tokens_per_day_isValid;

    m_tokens_per_hour_isValid = ::OpenAPI::fromJsonValue(m_tokens_per_hour, json[QString("tokensPerHour")]);
    m_tokens_per_hour_isSet = !json[QString("tokensPerHour")].isNull() && m_tokens_per_hour_isValid;

    m_tokens_per_project_per_hour_isValid = ::OpenAPI::fromJsonValue(m_tokens_per_project_per_hour, json[QString("tokensPerProjectPerHour")]);
    m_tokens_per_project_per_hour_isSet = !json[QString("tokensPerProjectPerHour")].isNull() && m_tokens_per_project_per_hour_isValid;
}

QString OAIPropertyQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrent_requests.isSet()) {
        obj.insert(QString("concurrentRequests"), ::OpenAPI::toJsonValue(m_concurrent_requests));
    }
    if (m_potentially_thresholded_requests_per_hour.isSet()) {
        obj.insert(QString("potentiallyThresholdedRequestsPerHour"), ::OpenAPI::toJsonValue(m_potentially_thresholded_requests_per_hour));
    }
    if (m_server_errors_per_project_per_hour.isSet()) {
        obj.insert(QString("serverErrorsPerProjectPerHour"), ::OpenAPI::toJsonValue(m_server_errors_per_project_per_hour));
    }
    if (m_tokens_per_day.isSet()) {
        obj.insert(QString("tokensPerDay"), ::OpenAPI::toJsonValue(m_tokens_per_day));
    }
    if (m_tokens_per_hour.isSet()) {
        obj.insert(QString("tokensPerHour"), ::OpenAPI::toJsonValue(m_tokens_per_hour));
    }
    if (m_tokens_per_project_per_hour.isSet()) {
        obj.insert(QString("tokensPerProjectPerHour"), ::OpenAPI::toJsonValue(m_tokens_per_project_per_hour));
    }
    return obj;
}

OAIQuotaStatus OAIPropertyQuota::getConcurrentRequests() const {
    return m_concurrent_requests;
}
void OAIPropertyQuota::setConcurrentRequests(const OAIQuotaStatus &concurrent_requests) {
    m_concurrent_requests = concurrent_requests;
    m_concurrent_requests_isSet = true;
}

bool OAIPropertyQuota::is_concurrent_requests_Set() const{
    return m_concurrent_requests_isSet;
}

bool OAIPropertyQuota::is_concurrent_requests_Valid() const{
    return m_concurrent_requests_isValid;
}

OAIQuotaStatus OAIPropertyQuota::getPotentiallyThresholdedRequestsPerHour() const {
    return m_potentially_thresholded_requests_per_hour;
}
void OAIPropertyQuota::setPotentiallyThresholdedRequestsPerHour(const OAIQuotaStatus &potentially_thresholded_requests_per_hour) {
    m_potentially_thresholded_requests_per_hour = potentially_thresholded_requests_per_hour;
    m_potentially_thresholded_requests_per_hour_isSet = true;
}

bool OAIPropertyQuota::is_potentially_thresholded_requests_per_hour_Set() const{
    return m_potentially_thresholded_requests_per_hour_isSet;
}

bool OAIPropertyQuota::is_potentially_thresholded_requests_per_hour_Valid() const{
    return m_potentially_thresholded_requests_per_hour_isValid;
}

OAIQuotaStatus OAIPropertyQuota::getServerErrorsPerProjectPerHour() const {
    return m_server_errors_per_project_per_hour;
}
void OAIPropertyQuota::setServerErrorsPerProjectPerHour(const OAIQuotaStatus &server_errors_per_project_per_hour) {
    m_server_errors_per_project_per_hour = server_errors_per_project_per_hour;
    m_server_errors_per_project_per_hour_isSet = true;
}

bool OAIPropertyQuota::is_server_errors_per_project_per_hour_Set() const{
    return m_server_errors_per_project_per_hour_isSet;
}

bool OAIPropertyQuota::is_server_errors_per_project_per_hour_Valid() const{
    return m_server_errors_per_project_per_hour_isValid;
}

OAIQuotaStatus OAIPropertyQuota::getTokensPerDay() const {
    return m_tokens_per_day;
}
void OAIPropertyQuota::setTokensPerDay(const OAIQuotaStatus &tokens_per_day) {
    m_tokens_per_day = tokens_per_day;
    m_tokens_per_day_isSet = true;
}

bool OAIPropertyQuota::is_tokens_per_day_Set() const{
    return m_tokens_per_day_isSet;
}

bool OAIPropertyQuota::is_tokens_per_day_Valid() const{
    return m_tokens_per_day_isValid;
}

OAIQuotaStatus OAIPropertyQuota::getTokensPerHour() const {
    return m_tokens_per_hour;
}
void OAIPropertyQuota::setTokensPerHour(const OAIQuotaStatus &tokens_per_hour) {
    m_tokens_per_hour = tokens_per_hour;
    m_tokens_per_hour_isSet = true;
}

bool OAIPropertyQuota::is_tokens_per_hour_Set() const{
    return m_tokens_per_hour_isSet;
}

bool OAIPropertyQuota::is_tokens_per_hour_Valid() const{
    return m_tokens_per_hour_isValid;
}

OAIQuotaStatus OAIPropertyQuota::getTokensPerProjectPerHour() const {
    return m_tokens_per_project_per_hour;
}
void OAIPropertyQuota::setTokensPerProjectPerHour(const OAIQuotaStatus &tokens_per_project_per_hour) {
    m_tokens_per_project_per_hour = tokens_per_project_per_hour;
    m_tokens_per_project_per_hour_isSet = true;
}

bool OAIPropertyQuota::is_tokens_per_project_per_hour_Set() const{
    return m_tokens_per_project_per_hour_isSet;
}

bool OAIPropertyQuota::is_tokens_per_project_per_hour_Valid() const{
    return m_tokens_per_project_per_hour_isValid;
}

bool OAIPropertyQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrent_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_potentially_thresholded_requests_per_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_errors_per_project_per_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens_per_day.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens_per_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens_per_project_per_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
