/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionOrderBy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionOrderBy::OAIDimensionOrderBy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionOrderBy::OAIDimensionOrderBy() {
    this->initializeModel();
}

OAIDimensionOrderBy::~OAIDimensionOrderBy() {}

void OAIDimensionOrderBy::initializeModel() {

    m_dimension_name_isSet = false;
    m_dimension_name_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;
}

void OAIDimensionOrderBy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionOrderBy::fromJsonObject(QJsonObject json) {

    m_dimension_name_isValid = ::OpenAPI::fromJsonValue(m_dimension_name, json[QString("dimensionName")]);
    m_dimension_name_isSet = !json[QString("dimensionName")].isNull() && m_dimension_name_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;
}

QString OAIDimensionOrderBy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionOrderBy::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_name_isSet) {
        obj.insert(QString("dimensionName"), ::OpenAPI::toJsonValue(m_dimension_name));
    }
    if (m_order_type_isSet) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    return obj;
}

QString OAIDimensionOrderBy::getDimensionName() const {
    return m_dimension_name;
}
void OAIDimensionOrderBy::setDimensionName(const QString &dimension_name) {
    m_dimension_name = dimension_name;
    m_dimension_name_isSet = true;
}

bool OAIDimensionOrderBy::is_dimension_name_Set() const{
    return m_dimension_name_isSet;
}

bool OAIDimensionOrderBy::is_dimension_name_Valid() const{
    return m_dimension_name_isValid;
}

QString OAIDimensionOrderBy::getOrderType() const {
    return m_order_type;
}
void OAIDimensionOrderBy::setOrderType(const QString &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAIDimensionOrderBy::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAIDimensionOrderBy::is_order_type_Valid() const{
    return m_order_type_isValid;
}

bool OAIDimensionOrderBy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionOrderBy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
