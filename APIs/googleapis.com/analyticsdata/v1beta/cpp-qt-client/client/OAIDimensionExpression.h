/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDimensionExpression.h
 *
 * Used to express a dimension which is the result of a formula of multiple dimensions. Example usages: 1) lower_case(dimension) 2) concatenate(dimension1, symbol, dimension2).
 */

#ifndef OAIDimensionExpression_H
#define OAIDimensionExpression_H

#include <QJsonObject>

#include "OAICaseExpression.h"
#include "OAIConcatenateExpression.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConcatenateExpression;
class OAICaseExpression;

class OAIDimensionExpression : public OAIObject {
public:
    OAIDimensionExpression();
    OAIDimensionExpression(QString json);
    ~OAIDimensionExpression() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConcatenateExpression getConcatenate() const;
    void setConcatenate(const OAIConcatenateExpression &concatenate);
    bool is_concatenate_Set() const;
    bool is_concatenate_Valid() const;

    OAICaseExpression getLowerCase() const;
    void setLowerCase(const OAICaseExpression &lower_case);
    bool is_lower_case_Set() const;
    bool is_lower_case_Valid() const;

    OAICaseExpression getUpperCase() const;
    void setUpperCase(const OAICaseExpression &upper_case);
    bool is_upper_case_Set() const;
    bool is_upper_case_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConcatenateExpression m_concatenate;
    bool m_concatenate_isSet;
    bool m_concatenate_isValid;

    OAICaseExpression m_lower_case;
    bool m_lower_case_isSet;
    bool m_lower_case_isValid;

    OAICaseExpression m_upper_case;
    bool m_upper_case_isSet;
    bool m_upper_case_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDimensionExpression)

#endif // OAIDimensionExpression_H
