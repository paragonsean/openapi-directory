/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionMetadata::OAIDimensionMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionMetadata::OAIDimensionMetadata() {
    this->initializeModel();
}

OAIDimensionMetadata::~OAIDimensionMetadata() {}

void OAIDimensionMetadata::initializeModel() {

    m_api_name_isSet = false;
    m_api_name_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_custom_definition_isSet = false;
    m_custom_definition_isValid = false;

    m_deprecated_api_names_isSet = false;
    m_deprecated_api_names_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ui_name_isSet = false;
    m_ui_name_isValid = false;
}

void OAIDimensionMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionMetadata::fromJsonObject(QJsonObject json) {

    m_api_name_isValid = ::OpenAPI::fromJsonValue(m_api_name, json[QString("apiName")]);
    m_api_name_isSet = !json[QString("apiName")].isNull() && m_api_name_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_custom_definition_isValid = ::OpenAPI::fromJsonValue(m_custom_definition, json[QString("customDefinition")]);
    m_custom_definition_isSet = !json[QString("customDefinition")].isNull() && m_custom_definition_isValid;

    m_deprecated_api_names_isValid = ::OpenAPI::fromJsonValue(m_deprecated_api_names, json[QString("deprecatedApiNames")]);
    m_deprecated_api_names_isSet = !json[QString("deprecatedApiNames")].isNull() && m_deprecated_api_names_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ui_name_isValid = ::OpenAPI::fromJsonValue(m_ui_name, json[QString("uiName")]);
    m_ui_name_isSet = !json[QString("uiName")].isNull() && m_ui_name_isValid;
}

QString OAIDimensionMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_api_name_isSet) {
        obj.insert(QString("apiName"), ::OpenAPI::toJsonValue(m_api_name));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_custom_definition_isSet) {
        obj.insert(QString("customDefinition"), ::OpenAPI::toJsonValue(m_custom_definition));
    }
    if (m_deprecated_api_names.size() > 0) {
        obj.insert(QString("deprecatedApiNames"), ::OpenAPI::toJsonValue(m_deprecated_api_names));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ui_name_isSet) {
        obj.insert(QString("uiName"), ::OpenAPI::toJsonValue(m_ui_name));
    }
    return obj;
}

QString OAIDimensionMetadata::getApiName() const {
    return m_api_name;
}
void OAIDimensionMetadata::setApiName(const QString &api_name) {
    m_api_name = api_name;
    m_api_name_isSet = true;
}

bool OAIDimensionMetadata::is_api_name_Set() const{
    return m_api_name_isSet;
}

bool OAIDimensionMetadata::is_api_name_Valid() const{
    return m_api_name_isValid;
}

QString OAIDimensionMetadata::getCategory() const {
    return m_category;
}
void OAIDimensionMetadata::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIDimensionMetadata::is_category_Set() const{
    return m_category_isSet;
}

bool OAIDimensionMetadata::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIDimensionMetadata::isCustomDefinition() const {
    return m_custom_definition;
}
void OAIDimensionMetadata::setCustomDefinition(const bool &custom_definition) {
    m_custom_definition = custom_definition;
    m_custom_definition_isSet = true;
}

bool OAIDimensionMetadata::is_custom_definition_Set() const{
    return m_custom_definition_isSet;
}

bool OAIDimensionMetadata::is_custom_definition_Valid() const{
    return m_custom_definition_isValid;
}

QList<QString> OAIDimensionMetadata::getDeprecatedApiNames() const {
    return m_deprecated_api_names;
}
void OAIDimensionMetadata::setDeprecatedApiNames(const QList<QString> &deprecated_api_names) {
    m_deprecated_api_names = deprecated_api_names;
    m_deprecated_api_names_isSet = true;
}

bool OAIDimensionMetadata::is_deprecated_api_names_Set() const{
    return m_deprecated_api_names_isSet;
}

bool OAIDimensionMetadata::is_deprecated_api_names_Valid() const{
    return m_deprecated_api_names_isValid;
}

QString OAIDimensionMetadata::getDescription() const {
    return m_description;
}
void OAIDimensionMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDimensionMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDimensionMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDimensionMetadata::getUiName() const {
    return m_ui_name;
}
void OAIDimensionMetadata::setUiName(const QString &ui_name) {
    m_ui_name = ui_name;
    m_ui_name_isSet = true;
}

bool OAIDimensionMetadata::is_ui_name_Set() const{
    return m_ui_name_isSet;
}

bool OAIDimensionMetadata::is_ui_name_Valid() const{
    return m_ui_name_isValid;
}

bool OAIDimensionMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_api_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
