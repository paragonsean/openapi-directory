/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunRealtimeReportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunRealtimeReportResponse::OAIRunRealtimeReportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunRealtimeReportResponse::OAIRunRealtimeReportResponse() {
    this->initializeModel();
}

OAIRunRealtimeReportResponse::~OAIRunRealtimeReportResponse() {}

void OAIRunRealtimeReportResponse::initializeModel() {

    m_dimension_headers_isSet = false;
    m_dimension_headers_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_maximums_isSet = false;
    m_maximums_isValid = false;

    m_metric_headers_isSet = false;
    m_metric_headers_isValid = false;

    m_minimums_isSet = false;
    m_minimums_isValid = false;

    m_property_quota_isSet = false;
    m_property_quota_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;
}

void OAIRunRealtimeReportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunRealtimeReportResponse::fromJsonObject(QJsonObject json) {

    m_dimension_headers_isValid = ::OpenAPI::fromJsonValue(m_dimension_headers, json[QString("dimensionHeaders")]);
    m_dimension_headers_isSet = !json[QString("dimensionHeaders")].isNull() && m_dimension_headers_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_maximums_isValid = ::OpenAPI::fromJsonValue(m_maximums, json[QString("maximums")]);
    m_maximums_isSet = !json[QString("maximums")].isNull() && m_maximums_isValid;

    m_metric_headers_isValid = ::OpenAPI::fromJsonValue(m_metric_headers, json[QString("metricHeaders")]);
    m_metric_headers_isSet = !json[QString("metricHeaders")].isNull() && m_metric_headers_isValid;

    m_minimums_isValid = ::OpenAPI::fromJsonValue(m_minimums, json[QString("minimums")]);
    m_minimums_isSet = !json[QString("minimums")].isNull() && m_minimums_isValid;

    m_property_quota_isValid = ::OpenAPI::fromJsonValue(m_property_quota, json[QString("propertyQuota")]);
    m_property_quota_isSet = !json[QString("propertyQuota")].isNull() && m_property_quota_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;
}

QString OAIRunRealtimeReportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunRealtimeReportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_headers.size() > 0) {
        obj.insert(QString("dimensionHeaders"), ::OpenAPI::toJsonValue(m_dimension_headers));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_maximums.size() > 0) {
        obj.insert(QString("maximums"), ::OpenAPI::toJsonValue(m_maximums));
    }
    if (m_metric_headers.size() > 0) {
        obj.insert(QString("metricHeaders"), ::OpenAPI::toJsonValue(m_metric_headers));
    }
    if (m_minimums.size() > 0) {
        obj.insert(QString("minimums"), ::OpenAPI::toJsonValue(m_minimums));
    }
    if (m_property_quota.isSet()) {
        obj.insert(QString("propertyQuota"), ::OpenAPI::toJsonValue(m_property_quota));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_totals.size() > 0) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    return obj;
}

QList<OAIDimensionHeader> OAIRunRealtimeReportResponse::getDimensionHeaders() const {
    return m_dimension_headers;
}
void OAIRunRealtimeReportResponse::setDimensionHeaders(const QList<OAIDimensionHeader> &dimension_headers) {
    m_dimension_headers = dimension_headers;
    m_dimension_headers_isSet = true;
}

bool OAIRunRealtimeReportResponse::is_dimension_headers_Set() const{
    return m_dimension_headers_isSet;
}

bool OAIRunRealtimeReportResponse::is_dimension_headers_Valid() const{
    return m_dimension_headers_isValid;
}

QString OAIRunRealtimeReportResponse::getKind() const {
    return m_kind;
}
void OAIRunRealtimeReportResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRunRealtimeReportResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRunRealtimeReportResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIRow> OAIRunRealtimeReportResponse::getMaximums() const {
    return m_maximums;
}
void OAIRunRealtimeReportResponse::setMaximums(const QList<OAIRow> &maximums) {
    m_maximums = maximums;
    m_maximums_isSet = true;
}

bool OAIRunRealtimeReportResponse::is_maximums_Set() const{
    return m_maximums_isSet;
}

bool OAIRunRealtimeReportResponse::is_maximums_Valid() const{
    return m_maximums_isValid;
}

QList<OAIMetricHeader> OAIRunRealtimeReportResponse::getMetricHeaders() const {
    return m_metric_headers;
}
void OAIRunRealtimeReportResponse::setMetricHeaders(const QList<OAIMetricHeader> &metric_headers) {
    m_metric_headers = metric_headers;
    m_metric_headers_isSet = true;
}

bool OAIRunRealtimeReportResponse::is_metric_headers_Set() const{
    return m_metric_headers_isSet;
}

bool OAIRunRealtimeReportResponse::is_metric_headers_Valid() const{
    return m_metric_headers_isValid;
}

QList<OAIRow> OAIRunRealtimeReportResponse::getMinimums() const {
    return m_minimums;
}
void OAIRunRealtimeReportResponse::setMinimums(const QList<OAIRow> &minimums) {
    m_minimums = minimums;
    m_minimums_isSet = true;
}

bool OAIRunRealtimeReportResponse::is_minimums_Set() const{
    return m_minimums_isSet;
}

bool OAIRunRealtimeReportResponse::is_minimums_Valid() const{
    return m_minimums_isValid;
}

OAIPropertyQuota OAIRunRealtimeReportResponse::getPropertyQuota() const {
    return m_property_quota;
}
void OAIRunRealtimeReportResponse::setPropertyQuota(const OAIPropertyQuota &property_quota) {
    m_property_quota = property_quota;
    m_property_quota_isSet = true;
}

bool OAIRunRealtimeReportResponse::is_property_quota_Set() const{
    return m_property_quota_isSet;
}

bool OAIRunRealtimeReportResponse::is_property_quota_Valid() const{
    return m_property_quota_isValid;
}

qint32 OAIRunRealtimeReportResponse::getRowCount() const {
    return m_row_count;
}
void OAIRunRealtimeReportResponse::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIRunRealtimeReportResponse::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIRunRealtimeReportResponse::is_row_count_Valid() const{
    return m_row_count_isValid;
}

QList<OAIRow> OAIRunRealtimeReportResponse::getRows() const {
    return m_rows;
}
void OAIRunRealtimeReportResponse::setRows(const QList<OAIRow> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIRunRealtimeReportResponse::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIRunRealtimeReportResponse::is_rows_Valid() const{
    return m_rows_isValid;
}

QList<OAIRow> OAIRunRealtimeReportResponse::getTotals() const {
    return m_totals;
}
void OAIRunRealtimeReportResponse::setTotals(const QList<OAIRow> &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAIRunRealtimeReportResponse::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAIRunRealtimeReportResponse::is_totals_Valid() const{
    return m_totals_isValid;
}

bool OAIRunRealtimeReportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunRealtimeReportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
