/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterExpressionList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterExpressionList::OAIFilterExpressionList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterExpressionList::OAIFilterExpressionList() {
    this->initializeModel();
}

OAIFilterExpressionList::~OAIFilterExpressionList() {}

void OAIFilterExpressionList::initializeModel() {

    m_expressions_isSet = false;
    m_expressions_isValid = false;
}

void OAIFilterExpressionList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterExpressionList::fromJsonObject(QJsonObject json) {

    m_expressions_isValid = ::OpenAPI::fromJsonValue(m_expressions, json[QString("expressions")]);
    m_expressions_isSet = !json[QString("expressions")].isNull() && m_expressions_isValid;
}

QString OAIFilterExpressionList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterExpressionList::asJsonObject() const {
    QJsonObject obj;
    if (m_expressions.size() > 0) {
        obj.insert(QString("expressions"), ::OpenAPI::toJsonValue(m_expressions));
    }
    return obj;
}

QList<OAIFilterExpression> OAIFilterExpressionList::getExpressions() const {
    return m_expressions;
}
void OAIFilterExpressionList::setExpressions(const QList<OAIFilterExpression> &expressions) {
    m_expressions = expressions;
    m_expressions_isSet = true;
}

bool OAIFilterExpressionList::is_expressions_Set() const{
    return m_expressions_isSet;
}

bool OAIFilterExpressionList::is_expressions_Valid() const{
    return m_expressions_isValid;
}

bool OAIFilterExpressionList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterExpressionList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
