/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRow::OAIRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRow::OAIRow() {
    this->initializeModel();
}

OAIRow::~OAIRow() {}

void OAIRow::initializeModel() {

    m_dimension_values_isSet = false;
    m_dimension_values_isValid = false;

    m_metric_values_isSet = false;
    m_metric_values_isValid = false;
}

void OAIRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRow::fromJsonObject(QJsonObject json) {

    m_dimension_values_isValid = ::OpenAPI::fromJsonValue(m_dimension_values, json[QString("dimensionValues")]);
    m_dimension_values_isSet = !json[QString("dimensionValues")].isNull() && m_dimension_values_isValid;

    m_metric_values_isValid = ::OpenAPI::fromJsonValue(m_metric_values, json[QString("metricValues")]);
    m_metric_values_isSet = !json[QString("metricValues")].isNull() && m_metric_values_isValid;
}

QString OAIRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRow::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_values.size() > 0) {
        obj.insert(QString("dimensionValues"), ::OpenAPI::toJsonValue(m_dimension_values));
    }
    if (m_metric_values.size() > 0) {
        obj.insert(QString("metricValues"), ::OpenAPI::toJsonValue(m_metric_values));
    }
    return obj;
}

QList<OAIDimensionValue> OAIRow::getDimensionValues() const {
    return m_dimension_values;
}
void OAIRow::setDimensionValues(const QList<OAIDimensionValue> &dimension_values) {
    m_dimension_values = dimension_values;
    m_dimension_values_isSet = true;
}

bool OAIRow::is_dimension_values_Set() const{
    return m_dimension_values_isSet;
}

bool OAIRow::is_dimension_values_Valid() const{
    return m_dimension_values_isValid;
}

QList<OAIMetricValue> OAIRow::getMetricValues() const {
    return m_metric_values;
}
void OAIRow::setMetricValues(const QList<OAIMetricValue> &metric_values) {
    m_metric_values = metric_values;
    m_metric_values_isSet = true;
}

bool OAIRow::is_metric_values_Set() const{
    return m_metric_values_isSet;
}

bool OAIRow::is_metric_values_Valid() const{
    return m_metric_values_isValid;
}

bool OAIRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
