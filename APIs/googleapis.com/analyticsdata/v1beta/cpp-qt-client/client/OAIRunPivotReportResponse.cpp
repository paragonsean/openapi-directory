/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunPivotReportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunPivotReportResponse::OAIRunPivotReportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunPivotReportResponse::OAIRunPivotReportResponse() {
    this->initializeModel();
}

OAIRunPivotReportResponse::~OAIRunPivotReportResponse() {}

void OAIRunPivotReportResponse::initializeModel() {

    m_aggregates_isSet = false;
    m_aggregates_isValid = false;

    m_dimension_headers_isSet = false;
    m_dimension_headers_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_metric_headers_isSet = false;
    m_metric_headers_isValid = false;

    m_pivot_headers_isSet = false;
    m_pivot_headers_isValid = false;

    m_property_quota_isSet = false;
    m_property_quota_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;
}

void OAIRunPivotReportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunPivotReportResponse::fromJsonObject(QJsonObject json) {

    m_aggregates_isValid = ::OpenAPI::fromJsonValue(m_aggregates, json[QString("aggregates")]);
    m_aggregates_isSet = !json[QString("aggregates")].isNull() && m_aggregates_isValid;

    m_dimension_headers_isValid = ::OpenAPI::fromJsonValue(m_dimension_headers, json[QString("dimensionHeaders")]);
    m_dimension_headers_isSet = !json[QString("dimensionHeaders")].isNull() && m_dimension_headers_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_metric_headers_isValid = ::OpenAPI::fromJsonValue(m_metric_headers, json[QString("metricHeaders")]);
    m_metric_headers_isSet = !json[QString("metricHeaders")].isNull() && m_metric_headers_isValid;

    m_pivot_headers_isValid = ::OpenAPI::fromJsonValue(m_pivot_headers, json[QString("pivotHeaders")]);
    m_pivot_headers_isSet = !json[QString("pivotHeaders")].isNull() && m_pivot_headers_isValid;

    m_property_quota_isValid = ::OpenAPI::fromJsonValue(m_property_quota, json[QString("propertyQuota")]);
    m_property_quota_isSet = !json[QString("propertyQuota")].isNull() && m_property_quota_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;
}

QString OAIRunPivotReportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunPivotReportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregates.size() > 0) {
        obj.insert(QString("aggregates"), ::OpenAPI::toJsonValue(m_aggregates));
    }
    if (m_dimension_headers.size() > 0) {
        obj.insert(QString("dimensionHeaders"), ::OpenAPI::toJsonValue(m_dimension_headers));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_metric_headers.size() > 0) {
        obj.insert(QString("metricHeaders"), ::OpenAPI::toJsonValue(m_metric_headers));
    }
    if (m_pivot_headers.size() > 0) {
        obj.insert(QString("pivotHeaders"), ::OpenAPI::toJsonValue(m_pivot_headers));
    }
    if (m_property_quota.isSet()) {
        obj.insert(QString("propertyQuota"), ::OpenAPI::toJsonValue(m_property_quota));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    return obj;
}

QList<OAIRow> OAIRunPivotReportResponse::getAggregates() const {
    return m_aggregates;
}
void OAIRunPivotReportResponse::setAggregates(const QList<OAIRow> &aggregates) {
    m_aggregates = aggregates;
    m_aggregates_isSet = true;
}

bool OAIRunPivotReportResponse::is_aggregates_Set() const{
    return m_aggregates_isSet;
}

bool OAIRunPivotReportResponse::is_aggregates_Valid() const{
    return m_aggregates_isValid;
}

QList<OAIDimensionHeader> OAIRunPivotReportResponse::getDimensionHeaders() const {
    return m_dimension_headers;
}
void OAIRunPivotReportResponse::setDimensionHeaders(const QList<OAIDimensionHeader> &dimension_headers) {
    m_dimension_headers = dimension_headers;
    m_dimension_headers_isSet = true;
}

bool OAIRunPivotReportResponse::is_dimension_headers_Set() const{
    return m_dimension_headers_isSet;
}

bool OAIRunPivotReportResponse::is_dimension_headers_Valid() const{
    return m_dimension_headers_isValid;
}

QString OAIRunPivotReportResponse::getKind() const {
    return m_kind;
}
void OAIRunPivotReportResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRunPivotReportResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRunPivotReportResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIResponseMetaData OAIRunPivotReportResponse::getMetadata() const {
    return m_metadata;
}
void OAIRunPivotReportResponse::setMetadata(const OAIResponseMetaData &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIRunPivotReportResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIRunPivotReportResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIMetricHeader> OAIRunPivotReportResponse::getMetricHeaders() const {
    return m_metric_headers;
}
void OAIRunPivotReportResponse::setMetricHeaders(const QList<OAIMetricHeader> &metric_headers) {
    m_metric_headers = metric_headers;
    m_metric_headers_isSet = true;
}

bool OAIRunPivotReportResponse::is_metric_headers_Set() const{
    return m_metric_headers_isSet;
}

bool OAIRunPivotReportResponse::is_metric_headers_Valid() const{
    return m_metric_headers_isValid;
}

QList<OAIPivotHeader> OAIRunPivotReportResponse::getPivotHeaders() const {
    return m_pivot_headers;
}
void OAIRunPivotReportResponse::setPivotHeaders(const QList<OAIPivotHeader> &pivot_headers) {
    m_pivot_headers = pivot_headers;
    m_pivot_headers_isSet = true;
}

bool OAIRunPivotReportResponse::is_pivot_headers_Set() const{
    return m_pivot_headers_isSet;
}

bool OAIRunPivotReportResponse::is_pivot_headers_Valid() const{
    return m_pivot_headers_isValid;
}

OAIPropertyQuota OAIRunPivotReportResponse::getPropertyQuota() const {
    return m_property_quota;
}
void OAIRunPivotReportResponse::setPropertyQuota(const OAIPropertyQuota &property_quota) {
    m_property_quota = property_quota;
    m_property_quota_isSet = true;
}

bool OAIRunPivotReportResponse::is_property_quota_Set() const{
    return m_property_quota_isSet;
}

bool OAIRunPivotReportResponse::is_property_quota_Valid() const{
    return m_property_quota_isValid;
}

QList<OAIRow> OAIRunPivotReportResponse::getRows() const {
    return m_rows;
}
void OAIRunPivotReportResponse::setRows(const QList<OAIRow> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIRunPivotReportResponse::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIRunPivotReportResponse::is_rows_Valid() const{
    return m_rows_isValid;
}

bool OAIRunPivotReportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivot_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunPivotReportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
