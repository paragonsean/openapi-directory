/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryAudienceExportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryAudienceExportResponse::OAIQueryAudienceExportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryAudienceExportResponse::OAIQueryAudienceExportResponse() {
    this->initializeModel();
}

OAIQueryAudienceExportResponse::~OAIQueryAudienceExportResponse() {}

void OAIQueryAudienceExportResponse::initializeModel() {

    m_audience_export_isSet = false;
    m_audience_export_isValid = false;

    m_audience_rows_isSet = false;
    m_audience_rows_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;
}

void OAIQueryAudienceExportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryAudienceExportResponse::fromJsonObject(QJsonObject json) {

    m_audience_export_isValid = ::OpenAPI::fromJsonValue(m_audience_export, json[QString("audienceExport")]);
    m_audience_export_isSet = !json[QString("audienceExport")].isNull() && m_audience_export_isValid;

    m_audience_rows_isValid = ::OpenAPI::fromJsonValue(m_audience_rows, json[QString("audienceRows")]);
    m_audience_rows_isSet = !json[QString("audienceRows")].isNull() && m_audience_rows_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;
}

QString OAIQueryAudienceExportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryAudienceExportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_audience_export.isSet()) {
        obj.insert(QString("audienceExport"), ::OpenAPI::toJsonValue(m_audience_export));
    }
    if (m_audience_rows.size() > 0) {
        obj.insert(QString("audienceRows"), ::OpenAPI::toJsonValue(m_audience_rows));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    return obj;
}

OAIAudienceExport OAIQueryAudienceExportResponse::getAudienceExport() const {
    return m_audience_export;
}
void OAIQueryAudienceExportResponse::setAudienceExport(const OAIAudienceExport &audience_export) {
    m_audience_export = audience_export;
    m_audience_export_isSet = true;
}

bool OAIQueryAudienceExportResponse::is_audience_export_Set() const{
    return m_audience_export_isSet;
}

bool OAIQueryAudienceExportResponse::is_audience_export_Valid() const{
    return m_audience_export_isValid;
}

QList<OAIV1betaAudienceRow> OAIQueryAudienceExportResponse::getAudienceRows() const {
    return m_audience_rows;
}
void OAIQueryAudienceExportResponse::setAudienceRows(const QList<OAIV1betaAudienceRow> &audience_rows) {
    m_audience_rows = audience_rows;
    m_audience_rows_isSet = true;
}

bool OAIQueryAudienceExportResponse::is_audience_rows_Set() const{
    return m_audience_rows_isSet;
}

bool OAIQueryAudienceExportResponse::is_audience_rows_Valid() const{
    return m_audience_rows_isValid;
}

qint32 OAIQueryAudienceExportResponse::getRowCount() const {
    return m_row_count;
}
void OAIQueryAudienceExportResponse::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIQueryAudienceExportResponse::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIQueryAudienceExportResponse::is_row_count_Valid() const{
    return m_row_count_isValid;
}

bool OAIQueryAudienceExportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audience_export.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryAudienceExportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
