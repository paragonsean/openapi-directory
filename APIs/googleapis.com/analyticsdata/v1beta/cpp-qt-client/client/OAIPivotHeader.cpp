/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotHeader::OAIPivotHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotHeader::OAIPivotHeader() {
    this->initializeModel();
}

OAIPivotHeader::~OAIPivotHeader() {}

void OAIPivotHeader::initializeModel() {

    m_pivot_dimension_headers_isSet = false;
    m_pivot_dimension_headers_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;
}

void OAIPivotHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotHeader::fromJsonObject(QJsonObject json) {

    m_pivot_dimension_headers_isValid = ::OpenAPI::fromJsonValue(m_pivot_dimension_headers, json[QString("pivotDimensionHeaders")]);
    m_pivot_dimension_headers_isSet = !json[QString("pivotDimensionHeaders")].isNull() && m_pivot_dimension_headers_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;
}

QString OAIPivotHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_pivot_dimension_headers.size() > 0) {
        obj.insert(QString("pivotDimensionHeaders"), ::OpenAPI::toJsonValue(m_pivot_dimension_headers));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    return obj;
}

QList<OAIPivotDimensionHeader> OAIPivotHeader::getPivotDimensionHeaders() const {
    return m_pivot_dimension_headers;
}
void OAIPivotHeader::setPivotDimensionHeaders(const QList<OAIPivotDimensionHeader> &pivot_dimension_headers) {
    m_pivot_dimension_headers = pivot_dimension_headers;
    m_pivot_dimension_headers_isSet = true;
}

bool OAIPivotHeader::is_pivot_dimension_headers_Set() const{
    return m_pivot_dimension_headers_isSet;
}

bool OAIPivotHeader::is_pivot_dimension_headers_Valid() const{
    return m_pivot_dimension_headers_isValid;
}

qint32 OAIPivotHeader::getRowCount() const {
    return m_row_count;
}
void OAIPivotHeader::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIPivotHeader::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIPivotHeader::is_row_count_Valid() const{
    return m_row_count_isValid;
}

bool OAIPivotHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pivot_dimension_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
