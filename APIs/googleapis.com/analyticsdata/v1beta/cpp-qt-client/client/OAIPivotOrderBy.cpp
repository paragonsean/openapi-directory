/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotOrderBy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotOrderBy::OAIPivotOrderBy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotOrderBy::OAIPivotOrderBy() {
    this->initializeModel();
}

OAIPivotOrderBy::~OAIPivotOrderBy() {}

void OAIPivotOrderBy::initializeModel() {

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_pivot_selections_isSet = false;
    m_pivot_selections_isValid = false;
}

void OAIPivotOrderBy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotOrderBy::fromJsonObject(QJsonObject json) {

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_pivot_selections_isValid = ::OpenAPI::fromJsonValue(m_pivot_selections, json[QString("pivotSelections")]);
    m_pivot_selections_isSet = !json[QString("pivotSelections")].isNull() && m_pivot_selections_isValid;
}

QString OAIPivotOrderBy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotOrderBy::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_pivot_selections.size() > 0) {
        obj.insert(QString("pivotSelections"), ::OpenAPI::toJsonValue(m_pivot_selections));
    }
    return obj;
}

QString OAIPivotOrderBy::getMetricName() const {
    return m_metric_name;
}
void OAIPivotOrderBy::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIPivotOrderBy::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIPivotOrderBy::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QList<OAIPivotSelection> OAIPivotOrderBy::getPivotSelections() const {
    return m_pivot_selections;
}
void OAIPivotOrderBy::setPivotSelections(const QList<OAIPivotSelection> &pivot_selections) {
    m_pivot_selections = pivot_selections;
    m_pivot_selections_isSet = true;
}

bool OAIPivotOrderBy::is_pivot_selections_Set() const{
    return m_pivot_selections_isSet;
}

bool OAIPivotOrderBy::is_pivot_selections_Valid() const{
    return m_pivot_selections_isValid;
}

bool OAIPivotOrderBy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivot_selections.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotOrderBy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
