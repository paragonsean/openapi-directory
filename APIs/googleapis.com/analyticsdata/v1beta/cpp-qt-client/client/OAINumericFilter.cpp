/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericFilter::OAINumericFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericFilter::OAINumericFilter() {
    this->initializeModel();
}

OAINumericFilter::~OAINumericFilter() {}

void OAINumericFilter::initializeModel() {

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAINumericFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericFilter::fromJsonObject(QJsonObject json) {

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAINumericFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAINumericFilter::getOperation() const {
    return m_operation;
}
void OAINumericFilter::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAINumericFilter::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAINumericFilter::is_operation_Valid() const{
    return m_operation_isValid;
}

OAINumericValue OAINumericFilter::getValue() const {
    return m_value;
}
void OAINumericFilter::setValue(const OAINumericValue &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAINumericFilter::is_value_Set() const{
    return m_value_isSet;
}

bool OAINumericFilter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAINumericFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
