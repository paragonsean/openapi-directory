/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICheckCompatibilityRequest.h
 *
 * The request for compatibility information for a report&#39;s dimensions and metrics. Check compatibility provides a preview of the compatibility of a report; fields shared with the &#x60;runReport&#x60; request should be the same values as in your &#x60;runReport&#x60; request.
 */

#ifndef OAICheckCompatibilityRequest_H
#define OAICheckCompatibilityRequest_H

#include <QJsonObject>

#include "OAIDimension.h"
#include "OAIFilterExpression.h"
#include "OAIMetric.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFilterExpression;
class OAIDimension;
class OAIMetric;

class OAICheckCompatibilityRequest : public OAIObject {
public:
    OAICheckCompatibilityRequest();
    OAICheckCompatibilityRequest(QString json);
    ~OAICheckCompatibilityRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCompatibilityFilter() const;
    void setCompatibilityFilter(const QString &compatibility_filter);
    bool is_compatibility_filter_Set() const;
    bool is_compatibility_filter_Valid() const;

    OAIFilterExpression getDimensionFilter() const;
    void setDimensionFilter(const OAIFilterExpression &dimension_filter);
    bool is_dimension_filter_Set() const;
    bool is_dimension_filter_Valid() const;

    QList<OAIDimension> getDimensions() const;
    void setDimensions(const QList<OAIDimension> &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    OAIFilterExpression getMetricFilter() const;
    void setMetricFilter(const OAIFilterExpression &metric_filter);
    bool is_metric_filter_Set() const;
    bool is_metric_filter_Valid() const;

    QList<OAIMetric> getMetrics() const;
    void setMetrics(const QList<OAIMetric> &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_compatibility_filter;
    bool m_compatibility_filter_isSet;
    bool m_compatibility_filter_isValid;

    OAIFilterExpression m_dimension_filter;
    bool m_dimension_filter_isSet;
    bool m_dimension_filter_isValid;

    QList<OAIDimension> m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    OAIFilterExpression m_metric_filter;
    bool m_metric_filter_isSet;
    bool m_metric_filter_isValid;

    QList<OAIMetric> m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICheckCompatibilityRequest)

#endif // OAICheckCompatibilityRequest_H
