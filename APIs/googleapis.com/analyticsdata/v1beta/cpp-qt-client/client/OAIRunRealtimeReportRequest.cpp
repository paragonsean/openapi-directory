/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunRealtimeReportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunRealtimeReportRequest::OAIRunRealtimeReportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunRealtimeReportRequest::OAIRunRealtimeReportRequest() {
    this->initializeModel();
}

OAIRunRealtimeReportRequest::~OAIRunRealtimeReportRequest() {}

void OAIRunRealtimeReportRequest::initializeModel() {

    m_dimension_filter_isSet = false;
    m_dimension_filter_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_metric_aggregations_isSet = false;
    m_metric_aggregations_isValid = false;

    m_metric_filter_isSet = false;
    m_metric_filter_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_minute_ranges_isSet = false;
    m_minute_ranges_isValid = false;

    m_order_bys_isSet = false;
    m_order_bys_isValid = false;

    m_return_property_quota_isSet = false;
    m_return_property_quota_isValid = false;
}

void OAIRunRealtimeReportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunRealtimeReportRequest::fromJsonObject(QJsonObject json) {

    m_dimension_filter_isValid = ::OpenAPI::fromJsonValue(m_dimension_filter, json[QString("dimensionFilter")]);
    m_dimension_filter_isSet = !json[QString("dimensionFilter")].isNull() && m_dimension_filter_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_metric_aggregations_isValid = ::OpenAPI::fromJsonValue(m_metric_aggregations, json[QString("metricAggregations")]);
    m_metric_aggregations_isSet = !json[QString("metricAggregations")].isNull() && m_metric_aggregations_isValid;

    m_metric_filter_isValid = ::OpenAPI::fromJsonValue(m_metric_filter, json[QString("metricFilter")]);
    m_metric_filter_isSet = !json[QString("metricFilter")].isNull() && m_metric_filter_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_minute_ranges_isValid = ::OpenAPI::fromJsonValue(m_minute_ranges, json[QString("minuteRanges")]);
    m_minute_ranges_isSet = !json[QString("minuteRanges")].isNull() && m_minute_ranges_isValid;

    m_order_bys_isValid = ::OpenAPI::fromJsonValue(m_order_bys, json[QString("orderBys")]);
    m_order_bys_isSet = !json[QString("orderBys")].isNull() && m_order_bys_isValid;

    m_return_property_quota_isValid = ::OpenAPI::fromJsonValue(m_return_property_quota, json[QString("returnPropertyQuota")]);
    m_return_property_quota_isSet = !json[QString("returnPropertyQuota")].isNull() && m_return_property_quota_isValid;
}

QString OAIRunRealtimeReportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunRealtimeReportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_filter.isSet()) {
        obj.insert(QString("dimensionFilter"), ::OpenAPI::toJsonValue(m_dimension_filter));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_metric_aggregations.size() > 0) {
        obj.insert(QString("metricAggregations"), ::OpenAPI::toJsonValue(m_metric_aggregations));
    }
    if (m_metric_filter.isSet()) {
        obj.insert(QString("metricFilter"), ::OpenAPI::toJsonValue(m_metric_filter));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_minute_ranges.size() > 0) {
        obj.insert(QString("minuteRanges"), ::OpenAPI::toJsonValue(m_minute_ranges));
    }
    if (m_order_bys.size() > 0) {
        obj.insert(QString("orderBys"), ::OpenAPI::toJsonValue(m_order_bys));
    }
    if (m_return_property_quota_isSet) {
        obj.insert(QString("returnPropertyQuota"), ::OpenAPI::toJsonValue(m_return_property_quota));
    }
    return obj;
}

OAIFilterExpression OAIRunRealtimeReportRequest::getDimensionFilter() const {
    return m_dimension_filter;
}
void OAIRunRealtimeReportRequest::setDimensionFilter(const OAIFilterExpression &dimension_filter) {
    m_dimension_filter = dimension_filter;
    m_dimension_filter_isSet = true;
}

bool OAIRunRealtimeReportRequest::is_dimension_filter_Set() const{
    return m_dimension_filter_isSet;
}

bool OAIRunRealtimeReportRequest::is_dimension_filter_Valid() const{
    return m_dimension_filter_isValid;
}

QList<OAIDimension> OAIRunRealtimeReportRequest::getDimensions() const {
    return m_dimensions;
}
void OAIRunRealtimeReportRequest::setDimensions(const QList<OAIDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIRunRealtimeReportRequest::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIRunRealtimeReportRequest::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIRunRealtimeReportRequest::getLimit() const {
    return m_limit;
}
void OAIRunRealtimeReportRequest::setLimit(const QString &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIRunRealtimeReportRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIRunRealtimeReportRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QList<QString> OAIRunRealtimeReportRequest::getMetricAggregations() const {
    return m_metric_aggregations;
}
void OAIRunRealtimeReportRequest::setMetricAggregations(const QList<QString> &metric_aggregations) {
    m_metric_aggregations = metric_aggregations;
    m_metric_aggregations_isSet = true;
}

bool OAIRunRealtimeReportRequest::is_metric_aggregations_Set() const{
    return m_metric_aggregations_isSet;
}

bool OAIRunRealtimeReportRequest::is_metric_aggregations_Valid() const{
    return m_metric_aggregations_isValid;
}

OAIFilterExpression OAIRunRealtimeReportRequest::getMetricFilter() const {
    return m_metric_filter;
}
void OAIRunRealtimeReportRequest::setMetricFilter(const OAIFilterExpression &metric_filter) {
    m_metric_filter = metric_filter;
    m_metric_filter_isSet = true;
}

bool OAIRunRealtimeReportRequest::is_metric_filter_Set() const{
    return m_metric_filter_isSet;
}

bool OAIRunRealtimeReportRequest::is_metric_filter_Valid() const{
    return m_metric_filter_isValid;
}

QList<OAIMetric> OAIRunRealtimeReportRequest::getMetrics() const {
    return m_metrics;
}
void OAIRunRealtimeReportRequest::setMetrics(const QList<OAIMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIRunRealtimeReportRequest::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIRunRealtimeReportRequest::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList<OAIMinuteRange> OAIRunRealtimeReportRequest::getMinuteRanges() const {
    return m_minute_ranges;
}
void OAIRunRealtimeReportRequest::setMinuteRanges(const QList<OAIMinuteRange> &minute_ranges) {
    m_minute_ranges = minute_ranges;
    m_minute_ranges_isSet = true;
}

bool OAIRunRealtimeReportRequest::is_minute_ranges_Set() const{
    return m_minute_ranges_isSet;
}

bool OAIRunRealtimeReportRequest::is_minute_ranges_Valid() const{
    return m_minute_ranges_isValid;
}

QList<OAIOrderBy> OAIRunRealtimeReportRequest::getOrderBys() const {
    return m_order_bys;
}
void OAIRunRealtimeReportRequest::setOrderBys(const QList<OAIOrderBy> &order_bys) {
    m_order_bys = order_bys;
    m_order_bys_isSet = true;
}

bool OAIRunRealtimeReportRequest::is_order_bys_Set() const{
    return m_order_bys_isSet;
}

bool OAIRunRealtimeReportRequest::is_order_bys_Valid() const{
    return m_order_bys_isValid;
}

bool OAIRunRealtimeReportRequest::isReturnPropertyQuota() const {
    return m_return_property_quota;
}
void OAIRunRealtimeReportRequest::setReturnPropertyQuota(const bool &return_property_quota) {
    m_return_property_quota = return_property_quota;
    m_return_property_quota_isSet = true;
}

bool OAIRunRealtimeReportRequest::is_return_property_quota_Set() const{
    return m_return_property_quota_isSet;
}

bool OAIRunRealtimeReportRequest::is_return_property_quota_Valid() const{
    return m_return_property_quota_isValid;
}

bool OAIRunRealtimeReportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_aggregations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minute_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_bys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_property_quota_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunRealtimeReportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
