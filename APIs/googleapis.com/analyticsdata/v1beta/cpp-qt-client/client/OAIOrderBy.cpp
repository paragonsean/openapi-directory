/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderBy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderBy::OAIOrderBy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderBy::OAIOrderBy() {
    this->initializeModel();
}

OAIOrderBy::~OAIOrderBy() {}

void OAIOrderBy::initializeModel() {

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_pivot_isSet = false;
    m_pivot_isValid = false;
}

void OAIOrderBy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderBy::fromJsonObject(QJsonObject json) {

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_pivot_isValid = ::OpenAPI::fromJsonValue(m_pivot, json[QString("pivot")]);
    m_pivot_isSet = !json[QString("pivot")].isNull() && m_pivot_isValid;
}

QString OAIOrderBy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderBy::asJsonObject() const {
    QJsonObject obj;
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_dimension.isSet()) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_pivot.isSet()) {
        obj.insert(QString("pivot"), ::OpenAPI::toJsonValue(m_pivot));
    }
    return obj;
}

bool OAIOrderBy::isDesc() const {
    return m_desc;
}
void OAIOrderBy::setDesc(const bool &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAIOrderBy::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAIOrderBy::is_desc_Valid() const{
    return m_desc_isValid;
}

OAIDimensionOrderBy OAIOrderBy::getDimension() const {
    return m_dimension;
}
void OAIOrderBy::setDimension(const OAIDimensionOrderBy &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIOrderBy::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIOrderBy::is_dimension_Valid() const{
    return m_dimension_isValid;
}

OAIMetricOrderBy OAIOrderBy::getMetric() const {
    return m_metric;
}
void OAIOrderBy::setMetric(const OAIMetricOrderBy &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIOrderBy::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIOrderBy::is_metric_Valid() const{
    return m_metric_isValid;
}

OAIPivotOrderBy OAIOrderBy::getPivot() const {
    return m_pivot;
}
void OAIOrderBy::setPivot(const OAIPivotOrderBy &pivot) {
    m_pivot = pivot;
    m_pivot_isSet = true;
}

bool OAIOrderBy::is_pivot_Set() const{
    return m_pivot_isSet;
}

bool OAIOrderBy::is_pivot_Valid() const{
    return m_pivot_isValid;
}

bool OAIOrderBy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivot.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderBy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
