/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamplingMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamplingMetadata::OAISamplingMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamplingMetadata::OAISamplingMetadata() {
    this->initializeModel();
}

OAISamplingMetadata::~OAISamplingMetadata() {}

void OAISamplingMetadata::initializeModel() {

    m_samples_read_count_isSet = false;
    m_samples_read_count_isValid = false;

    m_sampling_space_size_isSet = false;
    m_sampling_space_size_isValid = false;
}

void OAISamplingMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamplingMetadata::fromJsonObject(QJsonObject json) {

    m_samples_read_count_isValid = ::OpenAPI::fromJsonValue(m_samples_read_count, json[QString("samplesReadCount")]);
    m_samples_read_count_isSet = !json[QString("samplesReadCount")].isNull() && m_samples_read_count_isValid;

    m_sampling_space_size_isValid = ::OpenAPI::fromJsonValue(m_sampling_space_size, json[QString("samplingSpaceSize")]);
    m_sampling_space_size_isSet = !json[QString("samplingSpaceSize")].isNull() && m_sampling_space_size_isValid;
}

QString OAISamplingMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamplingMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_samples_read_count_isSet) {
        obj.insert(QString("samplesReadCount"), ::OpenAPI::toJsonValue(m_samples_read_count));
    }
    if (m_sampling_space_size_isSet) {
        obj.insert(QString("samplingSpaceSize"), ::OpenAPI::toJsonValue(m_sampling_space_size));
    }
    return obj;
}

QString OAISamplingMetadata::getSamplesReadCount() const {
    return m_samples_read_count;
}
void OAISamplingMetadata::setSamplesReadCount(const QString &samples_read_count) {
    m_samples_read_count = samples_read_count;
    m_samples_read_count_isSet = true;
}

bool OAISamplingMetadata::is_samples_read_count_Set() const{
    return m_samples_read_count_isSet;
}

bool OAISamplingMetadata::is_samples_read_count_Valid() const{
    return m_samples_read_count_isValid;
}

QString OAISamplingMetadata::getSamplingSpaceSize() const {
    return m_sampling_space_size;
}
void OAISamplingMetadata::setSamplingSpaceSize(const QString &sampling_space_size) {
    m_sampling_space_size = sampling_space_size;
    m_sampling_space_size_isSet = true;
}

bool OAISamplingMetadata::is_sampling_space_size_Set() const{
    return m_sampling_space_size_isSet;
}

bool OAISamplingMetadata::is_sampling_space_size_Valid() const{
    return m_sampling_space_size_isValid;
}

bool OAISamplingMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_samples_read_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_space_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamplingMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
