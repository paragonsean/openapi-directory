/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckCompatibilityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckCompatibilityResponse::OAICheckCompatibilityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckCompatibilityResponse::OAICheckCompatibilityResponse() {
    this->initializeModel();
}

OAICheckCompatibilityResponse::~OAICheckCompatibilityResponse() {}

void OAICheckCompatibilityResponse::initializeModel() {

    m_dimension_compatibilities_isSet = false;
    m_dimension_compatibilities_isValid = false;

    m_metric_compatibilities_isSet = false;
    m_metric_compatibilities_isValid = false;
}

void OAICheckCompatibilityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckCompatibilityResponse::fromJsonObject(QJsonObject json) {

    m_dimension_compatibilities_isValid = ::OpenAPI::fromJsonValue(m_dimension_compatibilities, json[QString("dimensionCompatibilities")]);
    m_dimension_compatibilities_isSet = !json[QString("dimensionCompatibilities")].isNull() && m_dimension_compatibilities_isValid;

    m_metric_compatibilities_isValid = ::OpenAPI::fromJsonValue(m_metric_compatibilities, json[QString("metricCompatibilities")]);
    m_metric_compatibilities_isSet = !json[QString("metricCompatibilities")].isNull() && m_metric_compatibilities_isValid;
}

QString OAICheckCompatibilityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckCompatibilityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_compatibilities.size() > 0) {
        obj.insert(QString("dimensionCompatibilities"), ::OpenAPI::toJsonValue(m_dimension_compatibilities));
    }
    if (m_metric_compatibilities.size() > 0) {
        obj.insert(QString("metricCompatibilities"), ::OpenAPI::toJsonValue(m_metric_compatibilities));
    }
    return obj;
}

QList<OAIDimensionCompatibility> OAICheckCompatibilityResponse::getDimensionCompatibilities() const {
    return m_dimension_compatibilities;
}
void OAICheckCompatibilityResponse::setDimensionCompatibilities(const QList<OAIDimensionCompatibility> &dimension_compatibilities) {
    m_dimension_compatibilities = dimension_compatibilities;
    m_dimension_compatibilities_isSet = true;
}

bool OAICheckCompatibilityResponse::is_dimension_compatibilities_Set() const{
    return m_dimension_compatibilities_isSet;
}

bool OAICheckCompatibilityResponse::is_dimension_compatibilities_Valid() const{
    return m_dimension_compatibilities_isValid;
}

QList<OAIMetricCompatibility> OAICheckCompatibilityResponse::getMetricCompatibilities() const {
    return m_metric_compatibilities;
}
void OAICheckCompatibilityResponse::setMetricCompatibilities(const QList<OAIMetricCompatibility> &metric_compatibilities) {
    m_metric_compatibilities = metric_compatibilities;
    m_metric_compatibilities_isSet = true;
}

bool OAICheckCompatibilityResponse::is_metric_compatibilities_Set() const{
    return m_metric_compatibilities_isSet;
}

bool OAICheckCompatibilityResponse::is_metric_compatibilities_Valid() const{
    return m_metric_compatibilities_isValid;
}

bool OAICheckCompatibilityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_compatibilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_compatibilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckCompatibilityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
