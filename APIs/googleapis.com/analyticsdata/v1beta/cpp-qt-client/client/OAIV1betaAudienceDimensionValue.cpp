/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1betaAudienceDimensionValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1betaAudienceDimensionValue::OAIV1betaAudienceDimensionValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1betaAudienceDimensionValue::OAIV1betaAudienceDimensionValue() {
    this->initializeModel();
}

OAIV1betaAudienceDimensionValue::~OAIV1betaAudienceDimensionValue() {}

void OAIV1betaAudienceDimensionValue::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIV1betaAudienceDimensionValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1betaAudienceDimensionValue::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIV1betaAudienceDimensionValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1betaAudienceDimensionValue::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIV1betaAudienceDimensionValue::getValue() const {
    return m_value;
}
void OAIV1betaAudienceDimensionValue::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIV1betaAudienceDimensionValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIV1betaAudienceDimensionValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIV1betaAudienceDimensionValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1betaAudienceDimensionValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
