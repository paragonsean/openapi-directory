/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBetweenFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBetweenFilter::OAIBetweenFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBetweenFilter::OAIBetweenFilter() {
    this->initializeModel();
}

OAIBetweenFilter::~OAIBetweenFilter() {}

void OAIBetweenFilter::initializeModel() {

    m_from_value_isSet = false;
    m_from_value_isValid = false;

    m_to_value_isSet = false;
    m_to_value_isValid = false;
}

void OAIBetweenFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBetweenFilter::fromJsonObject(QJsonObject json) {

    m_from_value_isValid = ::OpenAPI::fromJsonValue(m_from_value, json[QString("fromValue")]);
    m_from_value_isSet = !json[QString("fromValue")].isNull() && m_from_value_isValid;

    m_to_value_isValid = ::OpenAPI::fromJsonValue(m_to_value, json[QString("toValue")]);
    m_to_value_isSet = !json[QString("toValue")].isNull() && m_to_value_isValid;
}

QString OAIBetweenFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBetweenFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_from_value.isSet()) {
        obj.insert(QString("fromValue"), ::OpenAPI::toJsonValue(m_from_value));
    }
    if (m_to_value.isSet()) {
        obj.insert(QString("toValue"), ::OpenAPI::toJsonValue(m_to_value));
    }
    return obj;
}

OAINumericValue OAIBetweenFilter::getFromValue() const {
    return m_from_value;
}
void OAIBetweenFilter::setFromValue(const OAINumericValue &from_value) {
    m_from_value = from_value;
    m_from_value_isSet = true;
}

bool OAIBetweenFilter::is_from_value_Set() const{
    return m_from_value_isSet;
}

bool OAIBetweenFilter::is_from_value_Valid() const{
    return m_from_value_isValid;
}

OAINumericValue OAIBetweenFilter::getToValue() const {
    return m_to_value;
}
void OAIBetweenFilter::setToValue(const OAINumericValue &to_value) {
    m_to_value = to_value;
    m_to_value_isSet = true;
}

bool OAIBetweenFilter::is_to_value_Set() const{
    return m_to_value_isSet;
}

bool OAIBetweenFilter::is_to_value_Valid() const{
    return m_to_value_isValid;
}

bool OAIBetweenFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBetweenFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
