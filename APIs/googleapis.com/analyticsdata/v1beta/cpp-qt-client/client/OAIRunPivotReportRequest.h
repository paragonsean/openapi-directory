/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRunPivotReportRequest.h
 *
 * The request to generate a pivot report.
 */

#ifndef OAIRunPivotReportRequest_H
#define OAIRunPivotReportRequest_H

#include <QJsonObject>

#include "OAICohortSpec.h"
#include "OAIDateRange.h"
#include "OAIDimension.h"
#include "OAIFilterExpression.h"
#include "OAIMetric.h"
#include "OAIPivot.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICohortSpec;
class OAIDateRange;
class OAIFilterExpression;
class OAIDimension;
class OAIMetric;
class OAIPivot;

class OAIRunPivotReportRequest : public OAIObject {
public:
    OAIRunPivotReportRequest();
    OAIRunPivotReportRequest(QString json);
    ~OAIRunPivotReportRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICohortSpec getCohortSpec() const;
    void setCohortSpec(const OAICohortSpec &cohort_spec);
    bool is_cohort_spec_Set() const;
    bool is_cohort_spec_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    QList<OAIDateRange> getDateRanges() const;
    void setDateRanges(const QList<OAIDateRange> &date_ranges);
    bool is_date_ranges_Set() const;
    bool is_date_ranges_Valid() const;

    OAIFilterExpression getDimensionFilter() const;
    void setDimensionFilter(const OAIFilterExpression &dimension_filter);
    bool is_dimension_filter_Set() const;
    bool is_dimension_filter_Valid() const;

    QList<OAIDimension> getDimensions() const;
    void setDimensions(const QList<OAIDimension> &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    bool isKeepEmptyRows() const;
    void setKeepEmptyRows(const bool &keep_empty_rows);
    bool is_keep_empty_rows_Set() const;
    bool is_keep_empty_rows_Valid() const;

    OAIFilterExpression getMetricFilter() const;
    void setMetricFilter(const OAIFilterExpression &metric_filter);
    bool is_metric_filter_Set() const;
    bool is_metric_filter_Valid() const;

    QList<OAIMetric> getMetrics() const;
    void setMetrics(const QList<OAIMetric> &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    QList<OAIPivot> getPivots() const;
    void setPivots(const QList<OAIPivot> &pivots);
    bool is_pivots_Set() const;
    bool is_pivots_Valid() const;

    QString getProperty() const;
    void setProperty(const QString &property);
    bool is_property_Set() const;
    bool is_property_Valid() const;

    bool isReturnPropertyQuota() const;
    void setReturnPropertyQuota(const bool &return_property_quota);
    bool is_return_property_quota_Set() const;
    bool is_return_property_quota_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICohortSpec m_cohort_spec;
    bool m_cohort_spec_isSet;
    bool m_cohort_spec_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    QList<OAIDateRange> m_date_ranges;
    bool m_date_ranges_isSet;
    bool m_date_ranges_isValid;

    OAIFilterExpression m_dimension_filter;
    bool m_dimension_filter_isSet;
    bool m_dimension_filter_isValid;

    QList<OAIDimension> m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    bool m_keep_empty_rows;
    bool m_keep_empty_rows_isSet;
    bool m_keep_empty_rows_isValid;

    OAIFilterExpression m_metric_filter;
    bool m_metric_filter_isSet;
    bool m_metric_filter_isValid;

    QList<OAIMetric> m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    QList<OAIPivot> m_pivots;
    bool m_pivots_isSet;
    bool m_pivots_isValid;

    QString m_property;
    bool m_property_isSet;
    bool m_property_isValid;

    bool m_return_property_quota;
    bool m_return_property_quota_isSet;
    bool m_return_property_quota_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRunPivotReportRequest)

#endif // OAIRunPivotReportRequest_H
