/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchRunReportsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchRunReportsRequest::OAIBatchRunReportsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchRunReportsRequest::OAIBatchRunReportsRequest() {
    this->initializeModel();
}

OAIBatchRunReportsRequest::~OAIBatchRunReportsRequest() {}

void OAIBatchRunReportsRequest::initializeModel() {

    m_requests_isSet = false;
    m_requests_isValid = false;
}

void OAIBatchRunReportsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchRunReportsRequest::fromJsonObject(QJsonObject json) {

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;
}

QString OAIBatchRunReportsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchRunReportsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_requests.size() > 0) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    return obj;
}

QList<OAIRunReportRequest> OAIBatchRunReportsRequest::getRequests() const {
    return m_requests;
}
void OAIBatchRunReportsRequest::setRequests(const QList<OAIRunReportRequest> &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAIBatchRunReportsRequest::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAIBatchRunReportsRequest::is_requests_Valid() const{
    return m_requests_isValid;
}

bool OAIBatchRunReportsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchRunReportsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
