/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStringFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStringFilter::OAIStringFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStringFilter::OAIStringFilter() {
    this->initializeModel();
}

OAIStringFilter::~OAIStringFilter() {}

void OAIStringFilter::initializeModel() {

    m_case_sensitive_isSet = false;
    m_case_sensitive_isValid = false;

    m_match_type_isSet = false;
    m_match_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIStringFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStringFilter::fromJsonObject(QJsonObject json) {

    m_case_sensitive_isValid = ::OpenAPI::fromJsonValue(m_case_sensitive, json[QString("caseSensitive")]);
    m_case_sensitive_isSet = !json[QString("caseSensitive")].isNull() && m_case_sensitive_isValid;

    m_match_type_isValid = ::OpenAPI::fromJsonValue(m_match_type, json[QString("matchType")]);
    m_match_type_isSet = !json[QString("matchType")].isNull() && m_match_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIStringFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStringFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_case_sensitive_isSet) {
        obj.insert(QString("caseSensitive"), ::OpenAPI::toJsonValue(m_case_sensitive));
    }
    if (m_match_type_isSet) {
        obj.insert(QString("matchType"), ::OpenAPI::toJsonValue(m_match_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIStringFilter::isCaseSensitive() const {
    return m_case_sensitive;
}
void OAIStringFilter::setCaseSensitive(const bool &case_sensitive) {
    m_case_sensitive = case_sensitive;
    m_case_sensitive_isSet = true;
}

bool OAIStringFilter::is_case_sensitive_Set() const{
    return m_case_sensitive_isSet;
}

bool OAIStringFilter::is_case_sensitive_Valid() const{
    return m_case_sensitive_isValid;
}

QString OAIStringFilter::getMatchType() const {
    return m_match_type;
}
void OAIStringFilter::setMatchType(const QString &match_type) {
    m_match_type = match_type;
    m_match_type_isSet = true;
}

bool OAIStringFilter::is_match_type_Set() const{
    return m_match_type_isSet;
}

bool OAIStringFilter::is_match_type_Valid() const{
    return m_match_type_isValid;
}

QString OAIStringFilter::getValue() const {
    return m_value;
}
void OAIStringFilter::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIStringFilter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIStringFilter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIStringFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStringFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
