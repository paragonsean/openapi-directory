/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConcatenateExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConcatenateExpression::OAIConcatenateExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConcatenateExpression::OAIConcatenateExpression() {
    this->initializeModel();
}

OAIConcatenateExpression::~OAIConcatenateExpression() {}

void OAIConcatenateExpression::initializeModel() {

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;

    m_dimension_names_isSet = false;
    m_dimension_names_isValid = false;
}

void OAIConcatenateExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConcatenateExpression::fromJsonObject(QJsonObject json) {

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("delimiter")]);
    m_delimiter_isSet = !json[QString("delimiter")].isNull() && m_delimiter_isValid;

    m_dimension_names_isValid = ::OpenAPI::fromJsonValue(m_dimension_names, json[QString("dimensionNames")]);
    m_dimension_names_isSet = !json[QString("dimensionNames")].isNull() && m_dimension_names_isValid;
}

QString OAIConcatenateExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConcatenateExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_delimiter_isSet) {
        obj.insert(QString("delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    if (m_dimension_names.size() > 0) {
        obj.insert(QString("dimensionNames"), ::OpenAPI::toJsonValue(m_dimension_names));
    }
    return obj;
}

QString OAIConcatenateExpression::getDelimiter() const {
    return m_delimiter;
}
void OAIConcatenateExpression::setDelimiter(const QString &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAIConcatenateExpression::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAIConcatenateExpression::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

QList<QString> OAIConcatenateExpression::getDimensionNames() const {
    return m_dimension_names;
}
void OAIConcatenateExpression::setDimensionNames(const QList<QString> &dimension_names) {
    m_dimension_names = dimension_names;
    m_dimension_names_isSet = true;
}

bool OAIConcatenateExpression::is_dimension_names_Set() const{
    return m_dimension_names_isSet;
}

bool OAIConcatenateExpression::is_dimension_names_Valid() const{
    return m_dimension_names_isValid;
}

bool OAIConcatenateExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConcatenateExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
