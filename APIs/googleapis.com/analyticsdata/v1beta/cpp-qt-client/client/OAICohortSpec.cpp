/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICohortSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICohortSpec::OAICohortSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICohortSpec::OAICohortSpec() {
    this->initializeModel();
}

OAICohortSpec::~OAICohortSpec() {}

void OAICohortSpec::initializeModel() {

    m_cohort_report_settings_isSet = false;
    m_cohort_report_settings_isValid = false;

    m_cohorts_isSet = false;
    m_cohorts_isValid = false;

    m_cohorts_range_isSet = false;
    m_cohorts_range_isValid = false;
}

void OAICohortSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICohortSpec::fromJsonObject(QJsonObject json) {

    m_cohort_report_settings_isValid = ::OpenAPI::fromJsonValue(m_cohort_report_settings, json[QString("cohortReportSettings")]);
    m_cohort_report_settings_isSet = !json[QString("cohortReportSettings")].isNull() && m_cohort_report_settings_isValid;

    m_cohorts_isValid = ::OpenAPI::fromJsonValue(m_cohorts, json[QString("cohorts")]);
    m_cohorts_isSet = !json[QString("cohorts")].isNull() && m_cohorts_isValid;

    m_cohorts_range_isValid = ::OpenAPI::fromJsonValue(m_cohorts_range, json[QString("cohortsRange")]);
    m_cohorts_range_isSet = !json[QString("cohortsRange")].isNull() && m_cohorts_range_isValid;
}

QString OAICohortSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICohortSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_cohort_report_settings.isSet()) {
        obj.insert(QString("cohortReportSettings"), ::OpenAPI::toJsonValue(m_cohort_report_settings));
    }
    if (m_cohorts.size() > 0) {
        obj.insert(QString("cohorts"), ::OpenAPI::toJsonValue(m_cohorts));
    }
    if (m_cohorts_range.isSet()) {
        obj.insert(QString("cohortsRange"), ::OpenAPI::toJsonValue(m_cohorts_range));
    }
    return obj;
}

OAICohortReportSettings OAICohortSpec::getCohortReportSettings() const {
    return m_cohort_report_settings;
}
void OAICohortSpec::setCohortReportSettings(const OAICohortReportSettings &cohort_report_settings) {
    m_cohort_report_settings = cohort_report_settings;
    m_cohort_report_settings_isSet = true;
}

bool OAICohortSpec::is_cohort_report_settings_Set() const{
    return m_cohort_report_settings_isSet;
}

bool OAICohortSpec::is_cohort_report_settings_Valid() const{
    return m_cohort_report_settings_isValid;
}

QList<OAICohort> OAICohortSpec::getCohorts() const {
    return m_cohorts;
}
void OAICohortSpec::setCohorts(const QList<OAICohort> &cohorts) {
    m_cohorts = cohorts;
    m_cohorts_isSet = true;
}

bool OAICohortSpec::is_cohorts_Set() const{
    return m_cohorts_isSet;
}

bool OAICohortSpec::is_cohorts_Valid() const{
    return m_cohorts_isValid;
}

OAICohortsRange OAICohortSpec::getCohortsRange() const {
    return m_cohorts_range;
}
void OAICohortSpec::setCohortsRange(const OAICohortsRange &cohorts_range) {
    m_cohorts_range = cohorts_range;
    m_cohorts_range_isSet = true;
}

bool OAICohortSpec::is_cohorts_range_Set() const{
    return m_cohorts_range_isSet;
}

bool OAICohortSpec::is_cohorts_range_Valid() const{
    return m_cohorts_range_isValid;
}

bool OAICohortSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cohort_report_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cohorts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cohorts_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICohortSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
