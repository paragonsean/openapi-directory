/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionExpression::OAIDimensionExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionExpression::OAIDimensionExpression() {
    this->initializeModel();
}

OAIDimensionExpression::~OAIDimensionExpression() {}

void OAIDimensionExpression::initializeModel() {

    m_concatenate_isSet = false;
    m_concatenate_isValid = false;

    m_lower_case_isSet = false;
    m_lower_case_isValid = false;

    m_upper_case_isSet = false;
    m_upper_case_isValid = false;
}

void OAIDimensionExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionExpression::fromJsonObject(QJsonObject json) {

    m_concatenate_isValid = ::OpenAPI::fromJsonValue(m_concatenate, json[QString("concatenate")]);
    m_concatenate_isSet = !json[QString("concatenate")].isNull() && m_concatenate_isValid;

    m_lower_case_isValid = ::OpenAPI::fromJsonValue(m_lower_case, json[QString("lowerCase")]);
    m_lower_case_isSet = !json[QString("lowerCase")].isNull() && m_lower_case_isValid;

    m_upper_case_isValid = ::OpenAPI::fromJsonValue(m_upper_case, json[QString("upperCase")]);
    m_upper_case_isSet = !json[QString("upperCase")].isNull() && m_upper_case_isValid;
}

QString OAIDimensionExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_concatenate.isSet()) {
        obj.insert(QString("concatenate"), ::OpenAPI::toJsonValue(m_concatenate));
    }
    if (m_lower_case.isSet()) {
        obj.insert(QString("lowerCase"), ::OpenAPI::toJsonValue(m_lower_case));
    }
    if (m_upper_case.isSet()) {
        obj.insert(QString("upperCase"), ::OpenAPI::toJsonValue(m_upper_case));
    }
    return obj;
}

OAIConcatenateExpression OAIDimensionExpression::getConcatenate() const {
    return m_concatenate;
}
void OAIDimensionExpression::setConcatenate(const OAIConcatenateExpression &concatenate) {
    m_concatenate = concatenate;
    m_concatenate_isSet = true;
}

bool OAIDimensionExpression::is_concatenate_Set() const{
    return m_concatenate_isSet;
}

bool OAIDimensionExpression::is_concatenate_Valid() const{
    return m_concatenate_isValid;
}

OAICaseExpression OAIDimensionExpression::getLowerCase() const {
    return m_lower_case;
}
void OAIDimensionExpression::setLowerCase(const OAICaseExpression &lower_case) {
    m_lower_case = lower_case;
    m_lower_case_isSet = true;
}

bool OAIDimensionExpression::is_lower_case_Set() const{
    return m_lower_case_isSet;
}

bool OAIDimensionExpression::is_lower_case_Valid() const{
    return m_lower_case_isValid;
}

OAICaseExpression OAIDimensionExpression::getUpperCase() const {
    return m_upper_case;
}
void OAIDimensionExpression::setUpperCase(const OAICaseExpression &upper_case) {
    m_upper_case = upper_case;
    m_upper_case_isSet = true;
}

bool OAIDimensionExpression::is_upper_case_Set() const{
    return m_upper_case_isSet;
}

bool OAIDimensionExpression::is_upper_case_Valid() const{
    return m_upper_case_isValid;
}

bool OAIDimensionExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concatenate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_case.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_case.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
