/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricCompatibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricCompatibility::OAIMetricCompatibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricCompatibility::OAIMetricCompatibility() {
    this->initializeModel();
}

OAIMetricCompatibility::~OAIMetricCompatibility() {}

void OAIMetricCompatibility::initializeModel() {

    m_compatibility_isSet = false;
    m_compatibility_isValid = false;

    m_metric_metadata_isSet = false;
    m_metric_metadata_isValid = false;
}

void OAIMetricCompatibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricCompatibility::fromJsonObject(QJsonObject json) {

    m_compatibility_isValid = ::OpenAPI::fromJsonValue(m_compatibility, json[QString("compatibility")]);
    m_compatibility_isSet = !json[QString("compatibility")].isNull() && m_compatibility_isValid;

    m_metric_metadata_isValid = ::OpenAPI::fromJsonValue(m_metric_metadata, json[QString("metricMetadata")]);
    m_metric_metadata_isSet = !json[QString("metricMetadata")].isNull() && m_metric_metadata_isValid;
}

QString OAIMetricCompatibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricCompatibility::asJsonObject() const {
    QJsonObject obj;
    if (m_compatibility_isSet) {
        obj.insert(QString("compatibility"), ::OpenAPI::toJsonValue(m_compatibility));
    }
    if (m_metric_metadata.isSet()) {
        obj.insert(QString("metricMetadata"), ::OpenAPI::toJsonValue(m_metric_metadata));
    }
    return obj;
}

QString OAIMetricCompatibility::getCompatibility() const {
    return m_compatibility;
}
void OAIMetricCompatibility::setCompatibility(const QString &compatibility) {
    m_compatibility = compatibility;
    m_compatibility_isSet = true;
}

bool OAIMetricCompatibility::is_compatibility_Set() const{
    return m_compatibility_isSet;
}

bool OAIMetricCompatibility::is_compatibility_Valid() const{
    return m_compatibility_isValid;
}

OAIMetricMetadata OAIMetricCompatibility::getMetricMetadata() const {
    return m_metric_metadata;
}
void OAIMetricCompatibility::setMetricMetadata(const OAIMetricMetadata &metric_metadata) {
    m_metric_metadata = metric_metadata;
    m_metric_metadata_isSet = true;
}

bool OAIMetricCompatibility::is_metric_metadata_Set() const{
    return m_metric_metadata_isSet;
}

bool OAIMetricCompatibility::is_metric_metadata_Valid() const{
    return m_metric_metadata_isValid;
}

bool OAIMetricCompatibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compatibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricCompatibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
