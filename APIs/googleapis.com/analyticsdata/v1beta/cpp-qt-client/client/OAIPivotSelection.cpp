/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotSelection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotSelection::OAIPivotSelection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotSelection::OAIPivotSelection() {
    this->initializeModel();
}

OAIPivotSelection::~OAIPivotSelection() {}

void OAIPivotSelection::initializeModel() {

    m_dimension_name_isSet = false;
    m_dimension_name_isValid = false;

    m_dimension_value_isSet = false;
    m_dimension_value_isValid = false;
}

void OAIPivotSelection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotSelection::fromJsonObject(QJsonObject json) {

    m_dimension_name_isValid = ::OpenAPI::fromJsonValue(m_dimension_name, json[QString("dimensionName")]);
    m_dimension_name_isSet = !json[QString("dimensionName")].isNull() && m_dimension_name_isValid;

    m_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_dimension_value, json[QString("dimensionValue")]);
    m_dimension_value_isSet = !json[QString("dimensionValue")].isNull() && m_dimension_value_isValid;
}

QString OAIPivotSelection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotSelection::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_name_isSet) {
        obj.insert(QString("dimensionName"), ::OpenAPI::toJsonValue(m_dimension_name));
    }
    if (m_dimension_value_isSet) {
        obj.insert(QString("dimensionValue"), ::OpenAPI::toJsonValue(m_dimension_value));
    }
    return obj;
}

QString OAIPivotSelection::getDimensionName() const {
    return m_dimension_name;
}
void OAIPivotSelection::setDimensionName(const QString &dimension_name) {
    m_dimension_name = dimension_name;
    m_dimension_name_isSet = true;
}

bool OAIPivotSelection::is_dimension_name_Set() const{
    return m_dimension_name_isSet;
}

bool OAIPivotSelection::is_dimension_name_Valid() const{
    return m_dimension_name_isValid;
}

QString OAIPivotSelection::getDimensionValue() const {
    return m_dimension_value;
}
void OAIPivotSelection::setDimensionValue(const QString &dimension_value) {
    m_dimension_value = dimension_value;
    m_dimension_value_isSet = true;
}

bool OAIPivotSelection::is_dimension_value_Set() const{
    return m_dimension_value_isSet;
}

bool OAIPivotSelection::is_dimension_value_Valid() const{
    return m_dimension_value_isValid;
}

bool OAIPivotSelection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotSelection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
