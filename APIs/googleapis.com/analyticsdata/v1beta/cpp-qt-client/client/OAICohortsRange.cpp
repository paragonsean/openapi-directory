/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICohortsRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICohortsRange::OAICohortsRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICohortsRange::OAICohortsRange() {
    this->initializeModel();
}

OAICohortsRange::~OAICohortsRange() {}

void OAICohortsRange::initializeModel() {

    m_end_offset_isSet = false;
    m_end_offset_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_start_offset_isSet = false;
    m_start_offset_isValid = false;
}

void OAICohortsRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICohortsRange::fromJsonObject(QJsonObject json) {

    m_end_offset_isValid = ::OpenAPI::fromJsonValue(m_end_offset, json[QString("endOffset")]);
    m_end_offset_isSet = !json[QString("endOffset")].isNull() && m_end_offset_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(m_granularity, json[QString("granularity")]);
    m_granularity_isSet = !json[QString("granularity")].isNull() && m_granularity_isValid;

    m_start_offset_isValid = ::OpenAPI::fromJsonValue(m_start_offset, json[QString("startOffset")]);
    m_start_offset_isSet = !json[QString("startOffset")].isNull() && m_start_offset_isValid;
}

QString OAICohortsRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICohortsRange::asJsonObject() const {
    QJsonObject obj;
    if (m_end_offset_isSet) {
        obj.insert(QString("endOffset"), ::OpenAPI::toJsonValue(m_end_offset));
    }
    if (m_granularity_isSet) {
        obj.insert(QString("granularity"), ::OpenAPI::toJsonValue(m_granularity));
    }
    if (m_start_offset_isSet) {
        obj.insert(QString("startOffset"), ::OpenAPI::toJsonValue(m_start_offset));
    }
    return obj;
}

qint32 OAICohortsRange::getEndOffset() const {
    return m_end_offset;
}
void OAICohortsRange::setEndOffset(const qint32 &end_offset) {
    m_end_offset = end_offset;
    m_end_offset_isSet = true;
}

bool OAICohortsRange::is_end_offset_Set() const{
    return m_end_offset_isSet;
}

bool OAICohortsRange::is_end_offset_Valid() const{
    return m_end_offset_isValid;
}

QString OAICohortsRange::getGranularity() const {
    return m_granularity;
}
void OAICohortsRange::setGranularity(const QString &granularity) {
    m_granularity = granularity;
    m_granularity_isSet = true;
}

bool OAICohortsRange::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAICohortsRange::is_granularity_Valid() const{
    return m_granularity_isValid;
}

qint32 OAICohortsRange::getStartOffset() const {
    return m_start_offset;
}
void OAICohortsRange::setStartOffset(const qint32 &start_offset) {
    m_start_offset = start_offset;
    m_start_offset_isSet = true;
}

bool OAICohortsRange::is_start_offset_Set() const{
    return m_start_offset_isSet;
}

bool OAICohortsRange::is_start_offset_Valid() const{
    return m_start_offset_isValid;
}

bool OAICohortsRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICohortsRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
