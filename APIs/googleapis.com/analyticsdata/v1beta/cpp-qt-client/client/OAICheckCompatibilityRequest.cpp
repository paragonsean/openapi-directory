/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckCompatibilityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckCompatibilityRequest::OAICheckCompatibilityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckCompatibilityRequest::OAICheckCompatibilityRequest() {
    this->initializeModel();
}

OAICheckCompatibilityRequest::~OAICheckCompatibilityRequest() {}

void OAICheckCompatibilityRequest::initializeModel() {

    m_compatibility_filter_isSet = false;
    m_compatibility_filter_isValid = false;

    m_dimension_filter_isSet = false;
    m_dimension_filter_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_metric_filter_isSet = false;
    m_metric_filter_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAICheckCompatibilityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckCompatibilityRequest::fromJsonObject(QJsonObject json) {

    m_compatibility_filter_isValid = ::OpenAPI::fromJsonValue(m_compatibility_filter, json[QString("compatibilityFilter")]);
    m_compatibility_filter_isSet = !json[QString("compatibilityFilter")].isNull() && m_compatibility_filter_isValid;

    m_dimension_filter_isValid = ::OpenAPI::fromJsonValue(m_dimension_filter, json[QString("dimensionFilter")]);
    m_dimension_filter_isSet = !json[QString("dimensionFilter")].isNull() && m_dimension_filter_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_metric_filter_isValid = ::OpenAPI::fromJsonValue(m_metric_filter, json[QString("metricFilter")]);
    m_metric_filter_isSet = !json[QString("metricFilter")].isNull() && m_metric_filter_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;
}

QString OAICheckCompatibilityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckCompatibilityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_compatibility_filter_isSet) {
        obj.insert(QString("compatibilityFilter"), ::OpenAPI::toJsonValue(m_compatibility_filter));
    }
    if (m_dimension_filter.isSet()) {
        obj.insert(QString("dimensionFilter"), ::OpenAPI::toJsonValue(m_dimension_filter));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_metric_filter.isSet()) {
        obj.insert(QString("metricFilter"), ::OpenAPI::toJsonValue(m_metric_filter));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

QString OAICheckCompatibilityRequest::getCompatibilityFilter() const {
    return m_compatibility_filter;
}
void OAICheckCompatibilityRequest::setCompatibilityFilter(const QString &compatibility_filter) {
    m_compatibility_filter = compatibility_filter;
    m_compatibility_filter_isSet = true;
}

bool OAICheckCompatibilityRequest::is_compatibility_filter_Set() const{
    return m_compatibility_filter_isSet;
}

bool OAICheckCompatibilityRequest::is_compatibility_filter_Valid() const{
    return m_compatibility_filter_isValid;
}

OAIFilterExpression OAICheckCompatibilityRequest::getDimensionFilter() const {
    return m_dimension_filter;
}
void OAICheckCompatibilityRequest::setDimensionFilter(const OAIFilterExpression &dimension_filter) {
    m_dimension_filter = dimension_filter;
    m_dimension_filter_isSet = true;
}

bool OAICheckCompatibilityRequest::is_dimension_filter_Set() const{
    return m_dimension_filter_isSet;
}

bool OAICheckCompatibilityRequest::is_dimension_filter_Valid() const{
    return m_dimension_filter_isValid;
}

QList<OAIDimension> OAICheckCompatibilityRequest::getDimensions() const {
    return m_dimensions;
}
void OAICheckCompatibilityRequest::setDimensions(const QList<OAIDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAICheckCompatibilityRequest::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAICheckCompatibilityRequest::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAIFilterExpression OAICheckCompatibilityRequest::getMetricFilter() const {
    return m_metric_filter;
}
void OAICheckCompatibilityRequest::setMetricFilter(const OAIFilterExpression &metric_filter) {
    m_metric_filter = metric_filter;
    m_metric_filter_isSet = true;
}

bool OAICheckCompatibilityRequest::is_metric_filter_Set() const{
    return m_metric_filter_isSet;
}

bool OAICheckCompatibilityRequest::is_metric_filter_Valid() const{
    return m_metric_filter_isValid;
}

QList<OAIMetric> OAICheckCompatibilityRequest::getMetrics() const {
    return m_metrics;
}
void OAICheckCompatibilityRequest::setMetrics(const QList<OAIMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAICheckCompatibilityRequest::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAICheckCompatibilityRequest::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAICheckCompatibilityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compatibility_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckCompatibilityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
