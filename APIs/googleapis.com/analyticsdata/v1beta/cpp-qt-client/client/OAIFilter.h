/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFilter.h
 *
 * An expression to filter dimension or metric values.
 */

#ifndef OAIFilter_H
#define OAIFilter_H

#include <QJsonObject>

#include "OAIBetweenFilter.h"
#include "OAIInListFilter.h"
#include "OAINumericFilter.h"
#include "OAIStringFilter.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBetweenFilter;
class OAIInListFilter;
class OAINumericFilter;
class OAIStringFilter;

class OAIFilter : public OAIObject {
public:
    OAIFilter();
    OAIFilter(QString json);
    ~OAIFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBetweenFilter getBetweenFilter() const;
    void setBetweenFilter(const OAIBetweenFilter &between_filter);
    bool is_between_filter_Set() const;
    bool is_between_filter_Valid() const;

    QString getFieldName() const;
    void setFieldName(const QString &field_name);
    bool is_field_name_Set() const;
    bool is_field_name_Valid() const;

    OAIInListFilter getInListFilter() const;
    void setInListFilter(const OAIInListFilter &in_list_filter);
    bool is_in_list_filter_Set() const;
    bool is_in_list_filter_Valid() const;

    OAINumericFilter getNumericFilter() const;
    void setNumericFilter(const OAINumericFilter &numeric_filter);
    bool is_numeric_filter_Set() const;
    bool is_numeric_filter_Valid() const;

    OAIStringFilter getStringFilter() const;
    void setStringFilter(const OAIStringFilter &string_filter);
    bool is_string_filter_Set() const;
    bool is_string_filter_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBetweenFilter m_between_filter;
    bool m_between_filter_isSet;
    bool m_between_filter_isValid;

    QString m_field_name;
    bool m_field_name_isSet;
    bool m_field_name_isValid;

    OAIInListFilter m_in_list_filter;
    bool m_in_list_filter_isSet;
    bool m_in_list_filter_isValid;

    OAINumericFilter m_numeric_filter;
    bool m_numeric_filter_isSet;
    bool m_numeric_filter_isValid;

    OAIStringFilter m_string_filter;
    bool m_string_filter_isSet;
    bool m_string_filter_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFilter)

#endif // OAIFilter_H
