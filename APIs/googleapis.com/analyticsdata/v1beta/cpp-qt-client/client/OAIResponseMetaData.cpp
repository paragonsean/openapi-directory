/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseMetaData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseMetaData::OAIResponseMetaData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseMetaData::OAIResponseMetaData() {
    this->initializeModel();
}

OAIResponseMetaData::~OAIResponseMetaData() {}

void OAIResponseMetaData::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_data_loss_from_other_row_isSet = false;
    m_data_loss_from_other_row_isValid = false;

    m_empty_reason_isSet = false;
    m_empty_reason_isValid = false;

    m_sampling_metadatas_isSet = false;
    m_sampling_metadatas_isValid = false;

    m_schema_restriction_response_isSet = false;
    m_schema_restriction_response_isValid = false;

    m_subject_to_thresholding_isSet = false;
    m_subject_to_thresholding_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIResponseMetaData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseMetaData::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_data_loss_from_other_row_isValid = ::OpenAPI::fromJsonValue(m_data_loss_from_other_row, json[QString("dataLossFromOtherRow")]);
    m_data_loss_from_other_row_isSet = !json[QString("dataLossFromOtherRow")].isNull() && m_data_loss_from_other_row_isValid;

    m_empty_reason_isValid = ::OpenAPI::fromJsonValue(m_empty_reason, json[QString("emptyReason")]);
    m_empty_reason_isSet = !json[QString("emptyReason")].isNull() && m_empty_reason_isValid;

    m_sampling_metadatas_isValid = ::OpenAPI::fromJsonValue(m_sampling_metadatas, json[QString("samplingMetadatas")]);
    m_sampling_metadatas_isSet = !json[QString("samplingMetadatas")].isNull() && m_sampling_metadatas_isValid;

    m_schema_restriction_response_isValid = ::OpenAPI::fromJsonValue(m_schema_restriction_response, json[QString("schemaRestrictionResponse")]);
    m_schema_restriction_response_isSet = !json[QString("schemaRestrictionResponse")].isNull() && m_schema_restriction_response_isValid;

    m_subject_to_thresholding_isValid = ::OpenAPI::fromJsonValue(m_subject_to_thresholding, json[QString("subjectToThresholding")]);
    m_subject_to_thresholding_isSet = !json[QString("subjectToThresholding")].isNull() && m_subject_to_thresholding_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIResponseMetaData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseMetaData::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_data_loss_from_other_row_isSet) {
        obj.insert(QString("dataLossFromOtherRow"), ::OpenAPI::toJsonValue(m_data_loss_from_other_row));
    }
    if (m_empty_reason_isSet) {
        obj.insert(QString("emptyReason"), ::OpenAPI::toJsonValue(m_empty_reason));
    }
    if (m_sampling_metadatas.size() > 0) {
        obj.insert(QString("samplingMetadatas"), ::OpenAPI::toJsonValue(m_sampling_metadatas));
    }
    if (m_schema_restriction_response.isSet()) {
        obj.insert(QString("schemaRestrictionResponse"), ::OpenAPI::toJsonValue(m_schema_restriction_response));
    }
    if (m_subject_to_thresholding_isSet) {
        obj.insert(QString("subjectToThresholding"), ::OpenAPI::toJsonValue(m_subject_to_thresholding));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIResponseMetaData::getCurrencyCode() const {
    return m_currency_code;
}
void OAIResponseMetaData::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIResponseMetaData::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIResponseMetaData::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

bool OAIResponseMetaData::isDataLossFromOtherRow() const {
    return m_data_loss_from_other_row;
}
void OAIResponseMetaData::setDataLossFromOtherRow(const bool &data_loss_from_other_row) {
    m_data_loss_from_other_row = data_loss_from_other_row;
    m_data_loss_from_other_row_isSet = true;
}

bool OAIResponseMetaData::is_data_loss_from_other_row_Set() const{
    return m_data_loss_from_other_row_isSet;
}

bool OAIResponseMetaData::is_data_loss_from_other_row_Valid() const{
    return m_data_loss_from_other_row_isValid;
}

QString OAIResponseMetaData::getEmptyReason() const {
    return m_empty_reason;
}
void OAIResponseMetaData::setEmptyReason(const QString &empty_reason) {
    m_empty_reason = empty_reason;
    m_empty_reason_isSet = true;
}

bool OAIResponseMetaData::is_empty_reason_Set() const{
    return m_empty_reason_isSet;
}

bool OAIResponseMetaData::is_empty_reason_Valid() const{
    return m_empty_reason_isValid;
}

QList<OAISamplingMetadata> OAIResponseMetaData::getSamplingMetadatas() const {
    return m_sampling_metadatas;
}
void OAIResponseMetaData::setSamplingMetadatas(const QList<OAISamplingMetadata> &sampling_metadatas) {
    m_sampling_metadatas = sampling_metadatas;
    m_sampling_metadatas_isSet = true;
}

bool OAIResponseMetaData::is_sampling_metadatas_Set() const{
    return m_sampling_metadatas_isSet;
}

bool OAIResponseMetaData::is_sampling_metadatas_Valid() const{
    return m_sampling_metadatas_isValid;
}

OAISchemaRestrictionResponse OAIResponseMetaData::getSchemaRestrictionResponse() const {
    return m_schema_restriction_response;
}
void OAIResponseMetaData::setSchemaRestrictionResponse(const OAISchemaRestrictionResponse &schema_restriction_response) {
    m_schema_restriction_response = schema_restriction_response;
    m_schema_restriction_response_isSet = true;
}

bool OAIResponseMetaData::is_schema_restriction_response_Set() const{
    return m_schema_restriction_response_isSet;
}

bool OAIResponseMetaData::is_schema_restriction_response_Valid() const{
    return m_schema_restriction_response_isValid;
}

bool OAIResponseMetaData::isSubjectToThresholding() const {
    return m_subject_to_thresholding;
}
void OAIResponseMetaData::setSubjectToThresholding(const bool &subject_to_thresholding) {
    m_subject_to_thresholding = subject_to_thresholding;
    m_subject_to_thresholding_isSet = true;
}

bool OAIResponseMetaData::is_subject_to_thresholding_Set() const{
    return m_subject_to_thresholding_isSet;
}

bool OAIResponseMetaData::is_subject_to_thresholding_Valid() const{
    return m_subject_to_thresholding_isValid;
}

QString OAIResponseMetaData::getTimeZone() const {
    return m_time_zone;
}
void OAIResponseMetaData::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIResponseMetaData::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIResponseMetaData::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIResponseMetaData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_loss_from_other_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_metadatas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_restriction_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_to_thresholding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseMetaData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
