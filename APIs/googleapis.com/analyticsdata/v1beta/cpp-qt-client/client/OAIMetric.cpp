/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetric::OAIMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetric::OAIMetric() {
    this->initializeModel();
}

OAIMetric::~OAIMetric() {}

void OAIMetric::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_invisible_isSet = false;
    m_invisible_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetric::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_invisible_isValid = ::OpenAPI::fromJsonValue(m_invisible, json[QString("invisible")]);
    m_invisible_isSet = !json[QString("invisible")].isNull() && m_invisible_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_invisible_isSet) {
        obj.insert(QString("invisible"), ::OpenAPI::toJsonValue(m_invisible));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIMetric::getExpression() const {
    return m_expression;
}
void OAIMetric::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIMetric::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIMetric::is_expression_Valid() const{
    return m_expression_isValid;
}

bool OAIMetric::isInvisible() const {
    return m_invisible;
}
void OAIMetric::setInvisible(const bool &invisible) {
    m_invisible = invisible;
    m_invisible_isSet = true;
}

bool OAIMetric::is_invisible_Set() const{
    return m_invisible_isSet;
}

bool OAIMetric::is_invisible_Valid() const{
    return m_invisible_isValid;
}

QString OAIMetric::getName() const {
    return m_name;
}
void OAIMetric::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetric::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetric::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invisible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
