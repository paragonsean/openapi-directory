/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimension::OAIDimension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimension::OAIDimension() {
    this->initializeModel();
}

OAIDimension::~OAIDimension() {}

void OAIDimension::initializeModel() {

    m_dimension_expression_isSet = false;
    m_dimension_expression_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIDimension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimension::fromJsonObject(QJsonObject json) {

    m_dimension_expression_isValid = ::OpenAPI::fromJsonValue(m_dimension_expression, json[QString("dimensionExpression")]);
    m_dimension_expression_isSet = !json[QString("dimensionExpression")].isNull() && m_dimension_expression_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIDimension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimension::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_expression.isSet()) {
        obj.insert(QString("dimensionExpression"), ::OpenAPI::toJsonValue(m_dimension_expression));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIDimensionExpression OAIDimension::getDimensionExpression() const {
    return m_dimension_expression;
}
void OAIDimension::setDimensionExpression(const OAIDimensionExpression &dimension_expression) {
    m_dimension_expression = dimension_expression;
    m_dimension_expression_isSet = true;
}

bool OAIDimension::is_dimension_expression_Set() const{
    return m_dimension_expression_isSet;
}

bool OAIDimension::is_dimension_expression_Valid() const{
    return m_dimension_expression_isValid;
}

QString OAIDimension::getName() const {
    return m_name;
}
void OAIDimension::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDimension::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDimension::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDimension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
