/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudienceExport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudienceExport::OAIAudienceExport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudienceExport::OAIAudienceExport() {
    this->initializeModel();
}

OAIAudienceExport::~OAIAudienceExport() {}

void OAIAudienceExport::initializeModel() {

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_audience_display_name_isSet = false;
    m_audience_display_name_isValid = false;

    m_begin_creating_time_isSet = false;
    m_begin_creating_time_isValid = false;

    m_creation_quota_tokens_charged_isSet = false;
    m_creation_quota_tokens_charged_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_percentage_completed_isSet = false;
    m_percentage_completed_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAudienceExport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudienceExport::fromJsonObject(QJsonObject json) {

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("audience")]);
    m_audience_isSet = !json[QString("audience")].isNull() && m_audience_isValid;

    m_audience_display_name_isValid = ::OpenAPI::fromJsonValue(m_audience_display_name, json[QString("audienceDisplayName")]);
    m_audience_display_name_isSet = !json[QString("audienceDisplayName")].isNull() && m_audience_display_name_isValid;

    m_begin_creating_time_isValid = ::OpenAPI::fromJsonValue(m_begin_creating_time, json[QString("beginCreatingTime")]);
    m_begin_creating_time_isSet = !json[QString("beginCreatingTime")].isNull() && m_begin_creating_time_isValid;

    m_creation_quota_tokens_charged_isValid = ::OpenAPI::fromJsonValue(m_creation_quota_tokens_charged, json[QString("creationQuotaTokensCharged")]);
    m_creation_quota_tokens_charged_isSet = !json[QString("creationQuotaTokensCharged")].isNull() && m_creation_quota_tokens_charged_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_percentage_completed_isValid = ::OpenAPI::fromJsonValue(m_percentage_completed, json[QString("percentageCompleted")]);
    m_percentage_completed_isSet = !json[QString("percentageCompleted")].isNull() && m_percentage_completed_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAudienceExport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudienceExport::asJsonObject() const {
    QJsonObject obj;
    if (m_audience_isSet) {
        obj.insert(QString("audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_audience_display_name_isSet) {
        obj.insert(QString("audienceDisplayName"), ::OpenAPI::toJsonValue(m_audience_display_name));
    }
    if (m_begin_creating_time_isSet) {
        obj.insert(QString("beginCreatingTime"), ::OpenAPI::toJsonValue(m_begin_creating_time));
    }
    if (m_creation_quota_tokens_charged_isSet) {
        obj.insert(QString("creationQuotaTokensCharged"), ::OpenAPI::toJsonValue(m_creation_quota_tokens_charged));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_percentage_completed_isSet) {
        obj.insert(QString("percentageCompleted"), ::OpenAPI::toJsonValue(m_percentage_completed));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIAudienceExport::getAudience() const {
    return m_audience;
}
void OAIAudienceExport::setAudience(const QString &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAIAudienceExport::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAIAudienceExport::is_audience_Valid() const{
    return m_audience_isValid;
}

QString OAIAudienceExport::getAudienceDisplayName() const {
    return m_audience_display_name;
}
void OAIAudienceExport::setAudienceDisplayName(const QString &audience_display_name) {
    m_audience_display_name = audience_display_name;
    m_audience_display_name_isSet = true;
}

bool OAIAudienceExport::is_audience_display_name_Set() const{
    return m_audience_display_name_isSet;
}

bool OAIAudienceExport::is_audience_display_name_Valid() const{
    return m_audience_display_name_isValid;
}

QString OAIAudienceExport::getBeginCreatingTime() const {
    return m_begin_creating_time;
}
void OAIAudienceExport::setBeginCreatingTime(const QString &begin_creating_time) {
    m_begin_creating_time = begin_creating_time;
    m_begin_creating_time_isSet = true;
}

bool OAIAudienceExport::is_begin_creating_time_Set() const{
    return m_begin_creating_time_isSet;
}

bool OAIAudienceExport::is_begin_creating_time_Valid() const{
    return m_begin_creating_time_isValid;
}

qint32 OAIAudienceExport::getCreationQuotaTokensCharged() const {
    return m_creation_quota_tokens_charged;
}
void OAIAudienceExport::setCreationQuotaTokensCharged(const qint32 &creation_quota_tokens_charged) {
    m_creation_quota_tokens_charged = creation_quota_tokens_charged;
    m_creation_quota_tokens_charged_isSet = true;
}

bool OAIAudienceExport::is_creation_quota_tokens_charged_Set() const{
    return m_creation_quota_tokens_charged_isSet;
}

bool OAIAudienceExport::is_creation_quota_tokens_charged_Valid() const{
    return m_creation_quota_tokens_charged_isValid;
}

QList<OAIV1betaAudienceDimension> OAIAudienceExport::getDimensions() const {
    return m_dimensions;
}
void OAIAudienceExport::setDimensions(const QList<OAIV1betaAudienceDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIAudienceExport::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIAudienceExport::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIAudienceExport::getErrorMessage() const {
    return m_error_message;
}
void OAIAudienceExport::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIAudienceExport::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIAudienceExport::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIAudienceExport::getName() const {
    return m_name;
}
void OAIAudienceExport::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAudienceExport::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAudienceExport::is_name_Valid() const{
    return m_name_isValid;
}

double OAIAudienceExport::getPercentageCompleted() const {
    return m_percentage_completed;
}
void OAIAudienceExport::setPercentageCompleted(const double &percentage_completed) {
    m_percentage_completed = percentage_completed;
    m_percentage_completed_isSet = true;
}

bool OAIAudienceExport::is_percentage_completed_Set() const{
    return m_percentage_completed_isSet;
}

bool OAIAudienceExport::is_percentage_completed_Valid() const{
    return m_percentage_completed_isValid;
}

qint32 OAIAudienceExport::getRowCount() const {
    return m_row_count;
}
void OAIAudienceExport::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIAudienceExport::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIAudienceExport::is_row_count_Valid() const{
    return m_row_count_isValid;
}

QString OAIAudienceExport::getState() const {
    return m_state;
}
void OAIAudienceExport::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAudienceExport::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAudienceExport::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAudienceExport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_begin_creating_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_quota_tokens_charged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudienceExport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
