/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricMetadata::OAIMetricMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricMetadata::OAIMetricMetadata() {
    this->initializeModel();
}

OAIMetricMetadata::~OAIMetricMetadata() {}

void OAIMetricMetadata::initializeModel() {

    m_api_name_isSet = false;
    m_api_name_isValid = false;

    m_blocked_reasons_isSet = false;
    m_blocked_reasons_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_custom_definition_isSet = false;
    m_custom_definition_isValid = false;

    m_deprecated_api_names_isSet = false;
    m_deprecated_api_names_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_ui_name_isSet = false;
    m_ui_name_isValid = false;
}

void OAIMetricMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricMetadata::fromJsonObject(QJsonObject json) {

    m_api_name_isValid = ::OpenAPI::fromJsonValue(m_api_name, json[QString("apiName")]);
    m_api_name_isSet = !json[QString("apiName")].isNull() && m_api_name_isValid;

    m_blocked_reasons_isValid = ::OpenAPI::fromJsonValue(m_blocked_reasons, json[QString("blockedReasons")]);
    m_blocked_reasons_isSet = !json[QString("blockedReasons")].isNull() && m_blocked_reasons_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_custom_definition_isValid = ::OpenAPI::fromJsonValue(m_custom_definition, json[QString("customDefinition")]);
    m_custom_definition_isSet = !json[QString("customDefinition")].isNull() && m_custom_definition_isValid;

    m_deprecated_api_names_isValid = ::OpenAPI::fromJsonValue(m_deprecated_api_names, json[QString("deprecatedApiNames")]);
    m_deprecated_api_names_isSet = !json[QString("deprecatedApiNames")].isNull() && m_deprecated_api_names_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_ui_name_isValid = ::OpenAPI::fromJsonValue(m_ui_name, json[QString("uiName")]);
    m_ui_name_isSet = !json[QString("uiName")].isNull() && m_ui_name_isValid;
}

QString OAIMetricMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_api_name_isSet) {
        obj.insert(QString("apiName"), ::OpenAPI::toJsonValue(m_api_name));
    }
    if (m_blocked_reasons.size() > 0) {
        obj.insert(QString("blockedReasons"), ::OpenAPI::toJsonValue(m_blocked_reasons));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_custom_definition_isSet) {
        obj.insert(QString("customDefinition"), ::OpenAPI::toJsonValue(m_custom_definition));
    }
    if (m_deprecated_api_names.size() > 0) {
        obj.insert(QString("deprecatedApiNames"), ::OpenAPI::toJsonValue(m_deprecated_api_names));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_ui_name_isSet) {
        obj.insert(QString("uiName"), ::OpenAPI::toJsonValue(m_ui_name));
    }
    return obj;
}

QString OAIMetricMetadata::getApiName() const {
    return m_api_name;
}
void OAIMetricMetadata::setApiName(const QString &api_name) {
    m_api_name = api_name;
    m_api_name_isSet = true;
}

bool OAIMetricMetadata::is_api_name_Set() const{
    return m_api_name_isSet;
}

bool OAIMetricMetadata::is_api_name_Valid() const{
    return m_api_name_isValid;
}

QList<QString> OAIMetricMetadata::getBlockedReasons() const {
    return m_blocked_reasons;
}
void OAIMetricMetadata::setBlockedReasons(const QList<QString> &blocked_reasons) {
    m_blocked_reasons = blocked_reasons;
    m_blocked_reasons_isSet = true;
}

bool OAIMetricMetadata::is_blocked_reasons_Set() const{
    return m_blocked_reasons_isSet;
}

bool OAIMetricMetadata::is_blocked_reasons_Valid() const{
    return m_blocked_reasons_isValid;
}

QString OAIMetricMetadata::getCategory() const {
    return m_category;
}
void OAIMetricMetadata::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIMetricMetadata::is_category_Set() const{
    return m_category_isSet;
}

bool OAIMetricMetadata::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIMetricMetadata::isCustomDefinition() const {
    return m_custom_definition;
}
void OAIMetricMetadata::setCustomDefinition(const bool &custom_definition) {
    m_custom_definition = custom_definition;
    m_custom_definition_isSet = true;
}

bool OAIMetricMetadata::is_custom_definition_Set() const{
    return m_custom_definition_isSet;
}

bool OAIMetricMetadata::is_custom_definition_Valid() const{
    return m_custom_definition_isValid;
}

QList<QString> OAIMetricMetadata::getDeprecatedApiNames() const {
    return m_deprecated_api_names;
}
void OAIMetricMetadata::setDeprecatedApiNames(const QList<QString> &deprecated_api_names) {
    m_deprecated_api_names = deprecated_api_names;
    m_deprecated_api_names_isSet = true;
}

bool OAIMetricMetadata::is_deprecated_api_names_Set() const{
    return m_deprecated_api_names_isSet;
}

bool OAIMetricMetadata::is_deprecated_api_names_Valid() const{
    return m_deprecated_api_names_isValid;
}

QString OAIMetricMetadata::getDescription() const {
    return m_description;
}
void OAIMetricMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMetricMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMetricMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMetricMetadata::getExpression() const {
    return m_expression;
}
void OAIMetricMetadata::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIMetricMetadata::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIMetricMetadata::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIMetricMetadata::getType() const {
    return m_type;
}
void OAIMetricMetadata::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMetricMetadata::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMetricMetadata::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMetricMetadata::getUiName() const {
    return m_ui_name;
}
void OAIMetricMetadata::setUiName(const QString &ui_name) {
    m_ui_name = ui_name;
    m_ui_name_isSet = true;
}

bool OAIMetricMetadata::is_ui_name_Set() const{
    return m_ui_name_isSet;
}

bool OAIMetricMetadata::is_ui_name_Valid() const{
    return m_ui_name_isValid;
}

bool OAIMetricMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_api_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
