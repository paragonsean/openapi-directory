/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaRestrictionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaRestrictionResponse::OAISchemaRestrictionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaRestrictionResponse::OAISchemaRestrictionResponse() {
    this->initializeModel();
}

OAISchemaRestrictionResponse::~OAISchemaRestrictionResponse() {}

void OAISchemaRestrictionResponse::initializeModel() {

    m_active_metric_restrictions_isSet = false;
    m_active_metric_restrictions_isValid = false;
}

void OAISchemaRestrictionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchemaRestrictionResponse::fromJsonObject(QJsonObject json) {

    m_active_metric_restrictions_isValid = ::OpenAPI::fromJsonValue(m_active_metric_restrictions, json[QString("activeMetricRestrictions")]);
    m_active_metric_restrictions_isSet = !json[QString("activeMetricRestrictions")].isNull() && m_active_metric_restrictions_isValid;
}

QString OAISchemaRestrictionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchemaRestrictionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_active_metric_restrictions.size() > 0) {
        obj.insert(QString("activeMetricRestrictions"), ::OpenAPI::toJsonValue(m_active_metric_restrictions));
    }
    return obj;
}

QList<OAIActiveMetricRestriction> OAISchemaRestrictionResponse::getActiveMetricRestrictions() const {
    return m_active_metric_restrictions;
}
void OAISchemaRestrictionResponse::setActiveMetricRestrictions(const QList<OAIActiveMetricRestriction> &active_metric_restrictions) {
    m_active_metric_restrictions = active_metric_restrictions;
    m_active_metric_restrictions_isSet = true;
}

bool OAISchemaRestrictionResponse::is_active_metric_restrictions_Set() const{
    return m_active_metric_restrictions_isSet;
}

bool OAISchemaRestrictionResponse::is_active_metric_restrictions_Valid() const{
    return m_active_metric_restrictions_isValid;
}

bool OAISchemaRestrictionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_metric_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchemaRestrictionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
