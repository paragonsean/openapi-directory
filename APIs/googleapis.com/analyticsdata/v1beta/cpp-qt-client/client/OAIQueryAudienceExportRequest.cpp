/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryAudienceExportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryAudienceExportRequest::OAIQueryAudienceExportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryAudienceExportRequest::OAIQueryAudienceExportRequest() {
    this->initializeModel();
}

OAIQueryAudienceExportRequest::~OAIQueryAudienceExportRequest() {}

void OAIQueryAudienceExportRequest::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;
}

void OAIQueryAudienceExportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryAudienceExportRequest::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;
}

QString OAIQueryAudienceExportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryAudienceExportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    return obj;
}

QString OAIQueryAudienceExportRequest::getLimit() const {
    return m_limit;
}
void OAIQueryAudienceExportRequest::setLimit(const QString &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIQueryAudienceExportRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIQueryAudienceExportRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIQueryAudienceExportRequest::getOffset() const {
    return m_offset;
}
void OAIQueryAudienceExportRequest::setOffset(const QString &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIQueryAudienceExportRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIQueryAudienceExportRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

bool OAIQueryAudienceExportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryAudienceExportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
