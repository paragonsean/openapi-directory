/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchRunPivotReportsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchRunPivotReportsResponse::OAIBatchRunPivotReportsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchRunPivotReportsResponse::OAIBatchRunPivotReportsResponse() {
    this->initializeModel();
}

OAIBatchRunPivotReportsResponse::~OAIBatchRunPivotReportsResponse() {}

void OAIBatchRunPivotReportsResponse::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_pivot_reports_isSet = false;
    m_pivot_reports_isValid = false;
}

void OAIBatchRunPivotReportsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchRunPivotReportsResponse::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_pivot_reports_isValid = ::OpenAPI::fromJsonValue(m_pivot_reports, json[QString("pivotReports")]);
    m_pivot_reports_isSet = !json[QString("pivotReports")].isNull() && m_pivot_reports_isValid;
}

QString OAIBatchRunPivotReportsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchRunPivotReportsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_pivot_reports.size() > 0) {
        obj.insert(QString("pivotReports"), ::OpenAPI::toJsonValue(m_pivot_reports));
    }
    return obj;
}

QString OAIBatchRunPivotReportsResponse::getKind() const {
    return m_kind;
}
void OAIBatchRunPivotReportsResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIBatchRunPivotReportsResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIBatchRunPivotReportsResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIRunPivotReportResponse> OAIBatchRunPivotReportsResponse::getPivotReports() const {
    return m_pivot_reports;
}
void OAIBatchRunPivotReportsResponse::setPivotReports(const QList<OAIRunPivotReportResponse> &pivot_reports) {
    m_pivot_reports = pivot_reports;
    m_pivot_reports_isSet = true;
}

bool OAIBatchRunPivotReportsResponse::is_pivot_reports_Set() const{
    return m_pivot_reports_isSet;
}

bool OAIBatchRunPivotReportsResponse::is_pivot_reports_Valid() const{
    return m_pivot_reports_isValid;
}

bool OAIBatchRunPivotReportsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivot_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchRunPivotReportsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
