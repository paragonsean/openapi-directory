/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GoogleAnalyticsDataApi);
  }
}(this, function(expect, GoogleAnalyticsDataApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GoogleAnalyticsDataApi.RunReportRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RunReportRequest', function() {
    it('should create an instance of RunReportRequest', function() {
      // uncomment below and update the code to test RunReportRequest
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be.a(GoogleAnalyticsDataApi.RunReportRequest);
    });

    it('should have the property cohortSpec (base name: "cohortSpec")', function() {
      // uncomment below and update the code to test the property cohortSpec
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property dateRanges (base name: "dateRanges")', function() {
      // uncomment below and update the code to test the property dateRanges
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property dimensionFilter (base name: "dimensionFilter")', function() {
      // uncomment below and update the code to test the property dimensionFilter
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property dimensions (base name: "dimensions")', function() {
      // uncomment below and update the code to test the property dimensions
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property keepEmptyRows (base name: "keepEmptyRows")', function() {
      // uncomment below and update the code to test the property keepEmptyRows
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property limit (base name: "limit")', function() {
      // uncomment below and update the code to test the property limit
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property metricAggregations (base name: "metricAggregations")', function() {
      // uncomment below and update the code to test the property metricAggregations
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property metricFilter (base name: "metricFilter")', function() {
      // uncomment below and update the code to test the property metricFilter
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property metrics (base name: "metrics")', function() {
      // uncomment below and update the code to test the property metrics
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property offset (base name: "offset")', function() {
      // uncomment below and update the code to test the property offset
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property orderBys (base name: "orderBys")', function() {
      // uncomment below and update the code to test the property orderBys
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property property (base name: "property")', function() {
      // uncomment below and update the code to test the property property
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

    it('should have the property returnPropertyQuota (base name: "returnPropertyQuota")', function() {
      // uncomment below and update the code to test the property returnPropertyQuota
      //var instance = new GoogleAnalyticsDataApi.RunReportRequest();
      //expect(instance).to.be();
    });

  });

}));
