/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GoogleAnalyticsDataApi);
  }
}(this, function(expect, GoogleAnalyticsDataApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GoogleAnalyticsDataApi.MetricMetadata();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MetricMetadata', function() {
    it('should create an instance of MetricMetadata', function() {
      // uncomment below and update the code to test MetricMetadata
      //var instance = new GoogleAnalyticsDataApi.MetricMetadata();
      //expect(instance).to.be.a(GoogleAnalyticsDataApi.MetricMetadata);
    });

    it('should have the property apiName (base name: "apiName")', function() {
      // uncomment below and update the code to test the property apiName
      //var instance = new GoogleAnalyticsDataApi.MetricMetadata();
      //expect(instance).to.be();
    });

    it('should have the property blockedReasons (base name: "blockedReasons")', function() {
      // uncomment below and update the code to test the property blockedReasons
      //var instance = new GoogleAnalyticsDataApi.MetricMetadata();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new GoogleAnalyticsDataApi.MetricMetadata();
      //expect(instance).to.be();
    });

    it('should have the property customDefinition (base name: "customDefinition")', function() {
      // uncomment below and update the code to test the property customDefinition
      //var instance = new GoogleAnalyticsDataApi.MetricMetadata();
      //expect(instance).to.be();
    });

    it('should have the property deprecatedApiNames (base name: "deprecatedApiNames")', function() {
      // uncomment below and update the code to test the property deprecatedApiNames
      //var instance = new GoogleAnalyticsDataApi.MetricMetadata();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new GoogleAnalyticsDataApi.MetricMetadata();
      //expect(instance).to.be();
    });

    it('should have the property expression (base name: "expression")', function() {
      // uncomment below and update the code to test the property expression
      //var instance = new GoogleAnalyticsDataApi.MetricMetadata();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new GoogleAnalyticsDataApi.MetricMetadata();
      //expect(instance).to.be();
    });

    it('should have the property uiName (base name: "uiName")', function() {
      // uncomment below and update the code to test the property uiName
      //var instance = new GoogleAnalyticsDataApi.MetricMetadata();
      //expect(instance).to.be();
    });

  });

}));
