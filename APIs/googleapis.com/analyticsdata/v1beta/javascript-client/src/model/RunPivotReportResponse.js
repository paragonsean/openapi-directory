/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DimensionHeader from './DimensionHeader';
import MetricHeader from './MetricHeader';
import PivotHeader from './PivotHeader';
import PropertyQuota from './PropertyQuota';
import ResponseMetaData from './ResponseMetaData';
import Row from './Row';

/**
 * The RunPivotReportResponse model module.
 * @module model/RunPivotReportResponse
 * @version v1beta
 */
class RunPivotReportResponse {
    /**
     * Constructs a new <code>RunPivotReportResponse</code>.
     * The response pivot report table corresponding to a pivot request.
     * @alias module:model/RunPivotReportResponse
     */
    constructor() { 
        
        RunPivotReportResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunPivotReportResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunPivotReportResponse} obj Optional instance to populate.
     * @return {module:model/RunPivotReportResponse} The populated <code>RunPivotReportResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunPivotReportResponse();

            if (data.hasOwnProperty('aggregates')) {
                obj['aggregates'] = ApiClient.convertToType(data['aggregates'], [Row]);
            }
            if (data.hasOwnProperty('dimensionHeaders')) {
                obj['dimensionHeaders'] = ApiClient.convertToType(data['dimensionHeaders'], [DimensionHeader]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ResponseMetaData.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('metricHeaders')) {
                obj['metricHeaders'] = ApiClient.convertToType(data['metricHeaders'], [MetricHeader]);
            }
            if (data.hasOwnProperty('pivotHeaders')) {
                obj['pivotHeaders'] = ApiClient.convertToType(data['pivotHeaders'], [PivotHeader]);
            }
            if (data.hasOwnProperty('propertyQuota')) {
                obj['propertyQuota'] = PropertyQuota.constructFromObject(data['propertyQuota']);
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [Row]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunPivotReportResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunPivotReportResponse</code>.
     */
    static validateJSON(data) {
        if (data['aggregates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aggregates'])) {
                throw new Error("Expected the field `aggregates` to be an array in the JSON data but got " + data['aggregates']);
            }
            // validate the optional field `aggregates` (array)
            for (const item of data['aggregates']) {
                Row.validateJSON(item);
            };
        }
        if (data['dimensionHeaders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensionHeaders'])) {
                throw new Error("Expected the field `dimensionHeaders` to be an array in the JSON data but got " + data['dimensionHeaders']);
            }
            // validate the optional field `dimensionHeaders` (array)
            for (const item of data['dimensionHeaders']) {
                DimensionHeader.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          ResponseMetaData.validateJSON(data['metadata']);
        }
        if (data['metricHeaders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricHeaders'])) {
                throw new Error("Expected the field `metricHeaders` to be an array in the JSON data but got " + data['metricHeaders']);
            }
            // validate the optional field `metricHeaders` (array)
            for (const item of data['metricHeaders']) {
                MetricHeader.validateJSON(item);
            };
        }
        if (data['pivotHeaders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pivotHeaders'])) {
                throw new Error("Expected the field `pivotHeaders` to be an array in the JSON data but got " + data['pivotHeaders']);
            }
            // validate the optional field `pivotHeaders` (array)
            for (const item of data['pivotHeaders']) {
                PivotHeader.validateJSON(item);
            };
        }
        // validate the optional field `propertyQuota`
        if (data['propertyQuota']) { // data not null
          PropertyQuota.validateJSON(data['propertyQuota']);
        }
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                Row.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Aggregation of metric values. Can be totals, minimums, or maximums. The returned aggregations are controlled by the metric_aggregations in the pivot. The type of aggregation returned in each row is shown by the dimension_values which are set to \"RESERVED_\".
 * @member {Array.<module:model/Row>} aggregates
 */
RunPivotReportResponse.prototype['aggregates'] = undefined;

/**
 * Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.
 * @member {Array.<module:model/DimensionHeader>} dimensionHeaders
 */
RunPivotReportResponse.prototype['dimensionHeaders'] = undefined;

/**
 * Identifies what kind of resource this message is. This `kind` is always the fixed string \"analyticsData#runPivotReport\". Useful to distinguish between response types in JSON.
 * @member {String} kind
 */
RunPivotReportResponse.prototype['kind'] = undefined;

/**
 * @member {module:model/ResponseMetaData} metadata
 */
RunPivotReportResponse.prototype['metadata'] = undefined;

/**
 * Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.
 * @member {Array.<module:model/MetricHeader>} metricHeaders
 */
RunPivotReportResponse.prototype['metricHeaders'] = undefined;

/**
 * Summarizes the columns and rows created by a pivot. Each pivot in the request produces one header in the response. If we have a request like this: \"pivots\": [{ \"fieldNames\": [\"country\", \"city\"] }, { \"fieldNames\": \"eventName\" }] We will have the following `pivotHeaders` in the response: \"pivotHeaders\" : [{ \"dimensionHeaders\": [{ \"dimensionValues\": [ { \"value\": \"United Kingdom\" }, { \"value\": \"London\" } ] }, { \"dimensionValues\": [ { \"value\": \"Japan\" }, { \"value\": \"Osaka\" } ] }] }, { \"dimensionHeaders\": [{ \"dimensionValues\": [{ \"value\": \"session_start\" }] }, { \"dimensionValues\": [{ \"value\": \"scroll\" }] }] }]
 * @member {Array.<module:model/PivotHeader>} pivotHeaders
 */
RunPivotReportResponse.prototype['pivotHeaders'] = undefined;

/**
 * @member {module:model/PropertyQuota} propertyQuota
 */
RunPivotReportResponse.prototype['propertyQuota'] = undefined;

/**
 * Rows of dimension value combinations and metric values in the report.
 * @member {Array.<module:model/Row>} rows
 */
RunPivotReportResponse.prototype['rows'] = undefined;






export default RunPivotReportResponse;

