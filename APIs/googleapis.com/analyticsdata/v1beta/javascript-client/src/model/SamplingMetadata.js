/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SamplingMetadata model module.
 * @module model/SamplingMetadata
 * @version v1beta
 */
class SamplingMetadata {
    /**
     * Constructs a new <code>SamplingMetadata</code>.
     * If this report results is [sampled](https://support.google.com/analytics/answer/13331292), this describes the percentage of events used in this report. Sampling is the practice of analyzing a subset of all data in order to uncover the meaningful information in the larger data set.
     * @alias module:model/SamplingMetadata
     */
    constructor() { 
        
        SamplingMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SamplingMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SamplingMetadata} obj Optional instance to populate.
     * @return {module:model/SamplingMetadata} The populated <code>SamplingMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SamplingMetadata();

            if (data.hasOwnProperty('samplesReadCount')) {
                obj['samplesReadCount'] = ApiClient.convertToType(data['samplesReadCount'], 'String');
            }
            if (data.hasOwnProperty('samplingSpaceSize')) {
                obj['samplingSpaceSize'] = ApiClient.convertToType(data['samplingSpaceSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SamplingMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SamplingMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['samplesReadCount'] && !(typeof data['samplesReadCount'] === 'string' || data['samplesReadCount'] instanceof String)) {
            throw new Error("Expected the field `samplesReadCount` to be a primitive type in the JSON string but got " + data['samplesReadCount']);
        }
        // ensure the json data is a string
        if (data['samplingSpaceSize'] && !(typeof data['samplingSpaceSize'] === 'string' || data['samplingSpaceSize'] instanceof String)) {
            throw new Error("Expected the field `samplingSpaceSize` to be a primitive type in the JSON string but got " + data['samplingSpaceSize']);
        }

        return true;
    }


}



/**
 * The total number of events read in this sampled report for a date range. This is the size of the subset this property's data that was analyzed in this report.
 * @member {String} samplesReadCount
 */
SamplingMetadata.prototype['samplesReadCount'] = undefined;

/**
 * The total number of events present in this property's data that could have been analyzed in this report for a date range. Sampling uncovers the meaningful information about the larger data set, and this is the size of the larger data set. To calculate the percentage of available data that was used in this report, compute `samplesReadCount/samplingSpaceSize`.
 * @member {String} samplingSpaceSize
 */
SamplingMetadata.prototype['samplingSpaceSize'] = undefined;






export default SamplingMetadata;

