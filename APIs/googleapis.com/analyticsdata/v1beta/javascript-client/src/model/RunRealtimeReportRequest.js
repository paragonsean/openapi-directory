/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import FilterExpression from './FilterExpression';
import Metric from './Metric';
import MinuteRange from './MinuteRange';
import OrderBy from './OrderBy';

/**
 * The RunRealtimeReportRequest model module.
 * @module model/RunRealtimeReportRequest
 * @version v1beta
 */
class RunRealtimeReportRequest {
    /**
     * Constructs a new <code>RunRealtimeReportRequest</code>.
     * The request to generate a realtime report.
     * @alias module:model/RunRealtimeReportRequest
     */
    constructor() { 
        
        RunRealtimeReportRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunRealtimeReportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunRealtimeReportRequest} obj Optional instance to populate.
     * @return {module:model/RunRealtimeReportRequest} The populated <code>RunRealtimeReportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunRealtimeReportRequest();

            if (data.hasOwnProperty('dimensionFilter')) {
                obj['dimensionFilter'] = FilterExpression.constructFromObject(data['dimensionFilter']);
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'String');
            }
            if (data.hasOwnProperty('metricAggregations')) {
                obj['metricAggregations'] = ApiClient.convertToType(data['metricAggregations'], ['String']);
            }
            if (data.hasOwnProperty('metricFilter')) {
                obj['metricFilter'] = FilterExpression.constructFromObject(data['metricFilter']);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Metric]);
            }
            if (data.hasOwnProperty('minuteRanges')) {
                obj['minuteRanges'] = ApiClient.convertToType(data['minuteRanges'], [MinuteRange]);
            }
            if (data.hasOwnProperty('orderBys')) {
                obj['orderBys'] = ApiClient.convertToType(data['orderBys'], [OrderBy]);
            }
            if (data.hasOwnProperty('returnPropertyQuota')) {
                obj['returnPropertyQuota'] = ApiClient.convertToType(data['returnPropertyQuota'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunRealtimeReportRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunRealtimeReportRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dimensionFilter`
        if (data['dimensionFilter']) { // data not null
          FilterExpression.validateJSON(data['dimensionFilter']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Dimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['limit'] && !(typeof data['limit'] === 'string' || data['limit'] instanceof String)) {
            throw new Error("Expected the field `limit` to be a primitive type in the JSON string but got " + data['limit']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metricAggregations'])) {
            throw new Error("Expected the field `metricAggregations` to be an array in the JSON data but got " + data['metricAggregations']);
        }
        // validate the optional field `metricFilter`
        if (data['metricFilter']) { // data not null
          FilterExpression.validateJSON(data['metricFilter']);
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                Metric.validateJSON(item);
            };
        }
        if (data['minuteRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['minuteRanges'])) {
                throw new Error("Expected the field `minuteRanges` to be an array in the JSON data but got " + data['minuteRanges']);
            }
            // validate the optional field `minuteRanges` (array)
            for (const item of data['minuteRanges']) {
                MinuteRange.validateJSON(item);
            };
        }
        if (data['orderBys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orderBys'])) {
                throw new Error("Expected the field `orderBys` to be an array in the JSON data but got " + data['orderBys']);
            }
            // validate the optional field `orderBys` (array)
            for (const item of data['orderBys']) {
                OrderBy.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/FilterExpression} dimensionFilter
 */
RunRealtimeReportRequest.prototype['dimensionFilter'] = undefined;

/**
 * The dimensions requested and displayed.
 * @member {Array.<module:model/Dimension>} dimensions
 */
RunRealtimeReportRequest.prototype['dimensions'] = undefined;

/**
 * The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value.
 * @member {String} limit
 */
RunRealtimeReportRequest.prototype['limit'] = undefined;

/**
 * Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to \"RESERVED_(MetricAggregation)\".
 * @member {Array.<module:model/RunRealtimeReportRequest.MetricAggregationsEnum>} metricAggregations
 */
RunRealtimeReportRequest.prototype['metricAggregations'] = undefined;

/**
 * @member {module:model/FilterExpression} metricFilter
 */
RunRealtimeReportRequest.prototype['metricFilter'] = undefined;

/**
 * The metrics requested and displayed.
 * @member {Array.<module:model/Metric>} metrics
 */
RunRealtimeReportRequest.prototype['metrics'] = undefined;

/**
 * The minute ranges of event data to read. If unspecified, one minute range for the last 30 minutes will be used. If multiple minute ranges are requested, each response row will contain a zero based minute range index. If two minute ranges overlap, the event data for the overlapping minutes is included in the response rows for both minute ranges.
 * @member {Array.<module:model/MinuteRange>} minuteRanges
 */
RunRealtimeReportRequest.prototype['minuteRanges'] = undefined;

/**
 * Specifies how rows are ordered in the response.
 * @member {Array.<module:model/OrderBy>} orderBys
 */
RunRealtimeReportRequest.prototype['orderBys'] = undefined;

/**
 * Toggles whether to return the current state of this Analytics Property's Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).
 * @member {Boolean} returnPropertyQuota
 */
RunRealtimeReportRequest.prototype['returnPropertyQuota'] = undefined;





/**
 * Allowed values for the <code>metricAggregations</code> property.
 * @enum {String}
 * @readonly
 */
RunRealtimeReportRequest['MetricAggregationsEnum'] = {

    /**
     * value: "METRIC_AGGREGATION_UNSPECIFIED"
     * @const
     */
    "METRIC_AGGREGATION_UNSPECIFIED": "METRIC_AGGREGATION_UNSPECIFIED",

    /**
     * value: "TOTAL"
     * @const
     */
    "TOTAL": "TOTAL",

    /**
     * value: "MINIMUM"
     * @const
     */
    "MINIMUM": "MINIMUM",

    /**
     * value: "MAXIMUM"
     * @const
     */
    "MAXIMUM": "MAXIMUM",

    /**
     * value: "COUNT"
     * @const
     */
    "COUNT": "COUNT"
};



export default RunRealtimeReportRequest;

