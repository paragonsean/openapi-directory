/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cohort from './Cohort';
import CohortReportSettings from './CohortReportSettings';
import CohortsRange from './CohortsRange';

/**
 * The CohortSpec model module.
 * @module model/CohortSpec
 * @version v1beta
 */
class CohortSpec {
    /**
     * Constructs a new <code>CohortSpec</code>.
     * The specification of cohorts for a cohort report. Cohort reports create a time series of user retention for the cohort. For example, you could select the cohort of users that were acquired in the first week of September and follow that cohort for the next six weeks. Selecting the users acquired in the first week of September cohort is specified in the &#x60;cohort&#x60; object. Following that cohort for the next six weeks is specified in the &#x60;cohortsRange&#x60; object. For examples, see [Cohort Report Examples](https://developers.google.com/analytics/devguides/reporting/data/v1/advanced#cohort_report_examples). The report response could show a weekly time series where say your app has retained 60% of this cohort after three weeks and 25% of this cohort after six weeks. These two percentages can be calculated by the metric &#x60;cohortActiveUsers/cohortTotalUsers&#x60; and will be separate rows in the report.
     * @alias module:model/CohortSpec
     */
    constructor() { 
        
        CohortSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CohortSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CohortSpec} obj Optional instance to populate.
     * @return {module:model/CohortSpec} The populated <code>CohortSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CohortSpec();

            if (data.hasOwnProperty('cohortReportSettings')) {
                obj['cohortReportSettings'] = CohortReportSettings.constructFromObject(data['cohortReportSettings']);
            }
            if (data.hasOwnProperty('cohorts')) {
                obj['cohorts'] = ApiClient.convertToType(data['cohorts'], [Cohort]);
            }
            if (data.hasOwnProperty('cohortsRange')) {
                obj['cohortsRange'] = CohortsRange.constructFromObject(data['cohortsRange']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CohortSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CohortSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cohortReportSettings`
        if (data['cohortReportSettings']) { // data not null
          CohortReportSettings.validateJSON(data['cohortReportSettings']);
        }
        if (data['cohorts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cohorts'])) {
                throw new Error("Expected the field `cohorts` to be an array in the JSON data but got " + data['cohorts']);
            }
            // validate the optional field `cohorts` (array)
            for (const item of data['cohorts']) {
                Cohort.validateJSON(item);
            };
        }
        // validate the optional field `cohortsRange`
        if (data['cohortsRange']) { // data not null
          CohortsRange.validateJSON(data['cohortsRange']);
        }

        return true;
    }


}



/**
 * @member {module:model/CohortReportSettings} cohortReportSettings
 */
CohortSpec.prototype['cohortReportSettings'] = undefined;

/**
 * Defines the selection criteria to group users into cohorts. Most cohort reports define only a single cohort. If multiple cohorts are specified, each cohort can be recognized in the report by their name.
 * @member {Array.<module:model/Cohort>} cohorts
 */
CohortSpec.prototype['cohorts'] = undefined;

/**
 * @member {module:model/CohortsRange} cohortsRange
 */
CohortSpec.prototype['cohortsRange'] = undefined;






export default CohortSpec;

