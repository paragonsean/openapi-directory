/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetricMetadata model module.
 * @module model/MetricMetadata
 * @version v1beta
 */
class MetricMetadata {
    /**
     * Constructs a new <code>MetricMetadata</code>.
     * Explains a metric.
     * @alias module:model/MetricMetadata
     */
    constructor() { 
        
        MetricMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricMetadata} obj Optional instance to populate.
     * @return {module:model/MetricMetadata} The populated <code>MetricMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricMetadata();

            if (data.hasOwnProperty('apiName')) {
                obj['apiName'] = ApiClient.convertToType(data['apiName'], 'String');
            }
            if (data.hasOwnProperty('blockedReasons')) {
                obj['blockedReasons'] = ApiClient.convertToType(data['blockedReasons'], ['String']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('customDefinition')) {
                obj['customDefinition'] = ApiClient.convertToType(data['customDefinition'], 'Boolean');
            }
            if (data.hasOwnProperty('deprecatedApiNames')) {
                obj['deprecatedApiNames'] = ApiClient.convertToType(data['deprecatedApiNames'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uiName')) {
                obj['uiName'] = ApiClient.convertToType(data['uiName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['apiName'] && !(typeof data['apiName'] === 'string' || data['apiName'] instanceof String)) {
            throw new Error("Expected the field `apiName` to be a primitive type in the JSON string but got " + data['apiName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blockedReasons'])) {
            throw new Error("Expected the field `blockedReasons` to be an array in the JSON data but got " + data['blockedReasons']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deprecatedApiNames'])) {
            throw new Error("Expected the field `deprecatedApiNames` to be an array in the JSON data but got " + data['deprecatedApiNames']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uiName'] && !(typeof data['uiName'] === 'string' || data['uiName'] instanceof String)) {
            throw new Error("Expected the field `uiName` to be a primitive type in the JSON string but got " + data['uiName']);
        }

        return true;
    }


}



/**
 * A metric name. Useable in [Metric](#Metric)'s `name`. For example, `eventCount`.
 * @member {String} apiName
 */
MetricMetadata.prototype['apiName'] = undefined;

/**
 * If reasons are specified, your access is blocked to this metric for this property. API requests from you to this property for this metric will succeed; however, the report will contain only zeros for this metric. API requests with metric filters on blocked metrics will fail. If reasons are empty, you have access to this metric. To learn more, see [Access and data-restriction management](https://support.google.com/analytics/answer/10851388).
 * @member {Array.<module:model/MetricMetadata.BlockedReasonsEnum>} blockedReasons
 */
MetricMetadata.prototype['blockedReasons'] = undefined;

/**
 * The display name of the category that this metrics belongs to. Similar dimensions and metrics are categorized together.
 * @member {String} category
 */
MetricMetadata.prototype['category'] = undefined;

/**
 * True if the metric is a custom metric for this property.
 * @member {Boolean} customDefinition
 */
MetricMetadata.prototype['customDefinition'] = undefined;

/**
 * Still usable but deprecated names for this metric. If populated, this metric is available by either `apiName` or one of `deprecatedApiNames` for a period of time. After the deprecation period, the metric will be available only by `apiName`.
 * @member {Array.<String>} deprecatedApiNames
 */
MetricMetadata.prototype['deprecatedApiNames'] = undefined;

/**
 * Description of how this metric is used and calculated.
 * @member {String} description
 */
MetricMetadata.prototype['description'] = undefined;

/**
 * The mathematical expression for this derived metric. Can be used in [Metric](#Metric)'s `expression` field for equivalent reports. Most metrics are not expressions, and for non-expressions, this field is empty.
 * @member {String} expression
 */
MetricMetadata.prototype['expression'] = undefined;

/**
 * The type of this metric.
 * @member {module:model/MetricMetadata.TypeEnum} type
 */
MetricMetadata.prototype['type'] = undefined;

/**
 * This metric's name within the Google Analytics user interface. For example, `Event count`.
 * @member {String} uiName
 */
MetricMetadata.prototype['uiName'] = undefined;





/**
 * Allowed values for the <code>blockedReasons</code> property.
 * @enum {String}
 * @readonly
 */
MetricMetadata['BlockedReasonsEnum'] = {

    /**
     * value: "BLOCKED_REASON_UNSPECIFIED"
     * @const
     */
    "BLOCKED_REASON_UNSPECIFIED": "BLOCKED_REASON_UNSPECIFIED",

    /**
     * value: "NO_REVENUE_METRICS"
     * @const
     */
    "NO_REVENUE_METRICS": "NO_REVENUE_METRICS",

    /**
     * value: "NO_COST_METRICS"
     * @const
     */
    "NO_COST_METRICS": "NO_COST_METRICS"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MetricMetadata['TypeEnum'] = {

    /**
     * value: "METRIC_TYPE_UNSPECIFIED"
     * @const
     */
    "METRIC_TYPE_UNSPECIFIED": "METRIC_TYPE_UNSPECIFIED",

    /**
     * value: "TYPE_INTEGER"
     * @const
     */
    "TYPE_INTEGER": "TYPE_INTEGER",

    /**
     * value: "TYPE_FLOAT"
     * @const
     */
    "TYPE_FLOAT": "TYPE_FLOAT",

    /**
     * value: "TYPE_SECONDS"
     * @const
     */
    "TYPE_SECONDS": "TYPE_SECONDS",

    /**
     * value: "TYPE_MILLISECONDS"
     * @const
     */
    "TYPE_MILLISECONDS": "TYPE_MILLISECONDS",

    /**
     * value: "TYPE_MINUTES"
     * @const
     */
    "TYPE_MINUTES": "TYPE_MINUTES",

    /**
     * value: "TYPE_HOURS"
     * @const
     */
    "TYPE_HOURS": "TYPE_HOURS",

    /**
     * value: "TYPE_STANDARD"
     * @const
     */
    "TYPE_STANDARD": "TYPE_STANDARD",

    /**
     * value: "TYPE_CURRENCY"
     * @const
     */
    "TYPE_CURRENCY": "TYPE_CURRENCY",

    /**
     * value: "TYPE_FEET"
     * @const
     */
    "TYPE_FEET": "TYPE_FEET",

    /**
     * value: "TYPE_MILES"
     * @const
     */
    "TYPE_MILES": "TYPE_MILES",

    /**
     * value: "TYPE_METERS"
     * @const
     */
    "TYPE_METERS": "TYPE_METERS",

    /**
     * value: "TYPE_KILOMETERS"
     * @const
     */
    "TYPE_KILOMETERS": "TYPE_KILOMETERS"
};



export default MetricMetadata;

