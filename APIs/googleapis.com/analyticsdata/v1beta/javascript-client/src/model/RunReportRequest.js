/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CohortSpec from './CohortSpec';
import DateRange from './DateRange';
import Dimension from './Dimension';
import FilterExpression from './FilterExpression';
import Metric from './Metric';
import OrderBy from './OrderBy';

/**
 * The RunReportRequest model module.
 * @module model/RunReportRequest
 * @version v1beta
 */
class RunReportRequest {
    /**
     * Constructs a new <code>RunReportRequest</code>.
     * The request to generate a report.
     * @alias module:model/RunReportRequest
     */
    constructor() { 
        
        RunReportRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunReportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunReportRequest} obj Optional instance to populate.
     * @return {module:model/RunReportRequest} The populated <code>RunReportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunReportRequest();

            if (data.hasOwnProperty('cohortSpec')) {
                obj['cohortSpec'] = CohortSpec.constructFromObject(data['cohortSpec']);
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('dateRanges')) {
                obj['dateRanges'] = ApiClient.convertToType(data['dateRanges'], [DateRange]);
            }
            if (data.hasOwnProperty('dimensionFilter')) {
                obj['dimensionFilter'] = FilterExpression.constructFromObject(data['dimensionFilter']);
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('keepEmptyRows')) {
                obj['keepEmptyRows'] = ApiClient.convertToType(data['keepEmptyRows'], 'Boolean');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'String');
            }
            if (data.hasOwnProperty('metricAggregations')) {
                obj['metricAggregations'] = ApiClient.convertToType(data['metricAggregations'], ['String']);
            }
            if (data.hasOwnProperty('metricFilter')) {
                obj['metricFilter'] = FilterExpression.constructFromObject(data['metricFilter']);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Metric]);
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'String');
            }
            if (data.hasOwnProperty('orderBys')) {
                obj['orderBys'] = ApiClient.convertToType(data['orderBys'], [OrderBy]);
            }
            if (data.hasOwnProperty('property')) {
                obj['property'] = ApiClient.convertToType(data['property'], 'String');
            }
            if (data.hasOwnProperty('returnPropertyQuota')) {
                obj['returnPropertyQuota'] = ApiClient.convertToType(data['returnPropertyQuota'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunReportRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunReportRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cohortSpec`
        if (data['cohortSpec']) { // data not null
          CohortSpec.validateJSON(data['cohortSpec']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        if (data['dateRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dateRanges'])) {
                throw new Error("Expected the field `dateRanges` to be an array in the JSON data but got " + data['dateRanges']);
            }
            // validate the optional field `dateRanges` (array)
            for (const item of data['dateRanges']) {
                DateRange.validateJSON(item);
            };
        }
        // validate the optional field `dimensionFilter`
        if (data['dimensionFilter']) { // data not null
          FilterExpression.validateJSON(data['dimensionFilter']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Dimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['limit'] && !(typeof data['limit'] === 'string' || data['limit'] instanceof String)) {
            throw new Error("Expected the field `limit` to be a primitive type in the JSON string but got " + data['limit']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metricAggregations'])) {
            throw new Error("Expected the field `metricAggregations` to be an array in the JSON data but got " + data['metricAggregations']);
        }
        // validate the optional field `metricFilter`
        if (data['metricFilter']) { // data not null
          FilterExpression.validateJSON(data['metricFilter']);
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                Metric.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['offset'] && !(typeof data['offset'] === 'string' || data['offset'] instanceof String)) {
            throw new Error("Expected the field `offset` to be a primitive type in the JSON string but got " + data['offset']);
        }
        if (data['orderBys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orderBys'])) {
                throw new Error("Expected the field `orderBys` to be an array in the JSON data but got " + data['orderBys']);
            }
            // validate the optional field `orderBys` (array)
            for (const item of data['orderBys']) {
                OrderBy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['property'] && !(typeof data['property'] === 'string' || data['property'] instanceof String)) {
            throw new Error("Expected the field `property` to be a primitive type in the JSON string but got " + data['property']);
        }

        return true;
    }


}



/**
 * @member {module:model/CohortSpec} cohortSpec
 */
RunReportRequest.prototype['cohortSpec'] = undefined;

/**
 * A currency code in ISO4217 format, such as \"AED\", \"USD\", \"JPY\". If the field is empty, the report uses the property's default currency.
 * @member {String} currencyCode
 */
RunReportRequest.prototype['currencyCode'] = undefined;

/**
 * Date ranges of data to read. If multiple date ranges are requested, each response row will contain a zero based date range index. If two date ranges overlap, the event data for the overlapping days is included in the response rows for both date ranges. In a cohort request, this `dateRanges` must be unspecified.
 * @member {Array.<module:model/DateRange>} dateRanges
 */
RunReportRequest.prototype['dateRanges'] = undefined;

/**
 * @member {module:model/FilterExpression} dimensionFilter
 */
RunReportRequest.prototype['dimensionFilter'] = undefined;

/**
 * The dimensions requested and displayed.
 * @member {Array.<module:model/Dimension>} dimensions
 */
RunReportRequest.prototype['dimensions'] = undefined;

/**
 * If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. Regardless of this `keep_empty_rows` setting, only data recorded by the Google Analytics (GA4) property can be displayed in a report. For example if a property never logs a `purchase` event, then a query for the `eventName` dimension and `eventCount` metric will not have a row eventName: \"purchase\" and eventCount: 0.
 * @member {Boolean} keepEmptyRows
 */
RunReportRequest.prototype['keepEmptyRows'] = undefined;

/**
 * The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
 * @member {String} limit
 */
RunReportRequest.prototype['limit'] = undefined;

/**
 * Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to \"RESERVED_(MetricAggregation)\".
 * @member {Array.<module:model/RunReportRequest.MetricAggregationsEnum>} metricAggregations
 */
RunReportRequest.prototype['metricAggregations'] = undefined;

/**
 * @member {module:model/FilterExpression} metricFilter
 */
RunReportRequest.prototype['metricFilter'] = undefined;

/**
 * The metrics requested and displayed.
 * @member {Array.<module:model/Metric>} metrics
 */
RunReportRequest.prototype['metrics'] = undefined;

/**
 * The row count of the start row. The first row is counted as row 0. When paging, the first request does not specify offset; or equivalently, sets offset to 0; the first request returns the first `limit` of rows. The second request sets offset to the `limit` of the first request; the second request returns the second `limit` of rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
 * @member {String} offset
 */
RunReportRequest.prototype['offset'] = undefined;

/**
 * Specifies how rows are ordered in the response.
 * @member {Array.<module:model/OrderBy>} orderBys
 */
RunReportRequest.prototype['orderBys'] = undefined;

/**
 * A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234
 * @member {String} property
 */
RunReportRequest.prototype['property'] = undefined;

/**
 * Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota).
 * @member {Boolean} returnPropertyQuota
 */
RunReportRequest.prototype['returnPropertyQuota'] = undefined;





/**
 * Allowed values for the <code>metricAggregations</code> property.
 * @enum {String}
 * @readonly
 */
RunReportRequest['MetricAggregationsEnum'] = {

    /**
     * value: "METRIC_AGGREGATION_UNSPECIFIED"
     * @const
     */
    "METRIC_AGGREGATION_UNSPECIFIED": "METRIC_AGGREGATION_UNSPECIFIED",

    /**
     * value: "TOTAL"
     * @const
     */
    "TOTAL": "TOTAL",

    /**
     * value: "MINIMUM"
     * @const
     */
    "MINIMUM": "MINIMUM",

    /**
     * value: "MAXIMUM"
     * @const
     */
    "MAXIMUM": "MAXIMUM",

    /**
     * value: "COUNT"
     * @const
     */
    "COUNT": "COUNT"
};



export default RunReportRequest;

