/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PivotDimensionHeader from './PivotDimensionHeader';

/**
 * The PivotHeader model module.
 * @module model/PivotHeader
 * @version v1beta
 */
class PivotHeader {
    /**
     * Constructs a new <code>PivotHeader</code>.
     * Dimensions&#39; values in a single pivot.
     * @alias module:model/PivotHeader
     */
    constructor() { 
        
        PivotHeader.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PivotHeader</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PivotHeader} obj Optional instance to populate.
     * @return {module:model/PivotHeader} The populated <code>PivotHeader</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PivotHeader();

            if (data.hasOwnProperty('pivotDimensionHeaders')) {
                obj['pivotDimensionHeaders'] = ApiClient.convertToType(data['pivotDimensionHeaders'], [PivotDimensionHeader]);
            }
            if (data.hasOwnProperty('rowCount')) {
                obj['rowCount'] = ApiClient.convertToType(data['rowCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PivotHeader</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PivotHeader</code>.
     */
    static validateJSON(data) {
        if (data['pivotDimensionHeaders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pivotDimensionHeaders'])) {
                throw new Error("Expected the field `pivotDimensionHeaders` to be an array in the JSON data but got " + data['pivotDimensionHeaders']);
            }
            // validate the optional field `pivotDimensionHeaders` (array)
            for (const item of data['pivotDimensionHeaders']) {
                PivotDimensionHeader.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The size is the same as the cardinality of the corresponding dimension combinations.
 * @member {Array.<module:model/PivotDimensionHeader>} pivotDimensionHeaders
 */
PivotHeader.prototype['pivotDimensionHeaders'] = undefined;

/**
 * The cardinality of the pivot. The total number of rows for this pivot's fields regardless of how the parameters `offset` and `limit` are specified in the request.
 * @member {Number} rowCount
 */
PivotHeader.prototype['rowCount'] = undefined;






export default PivotHeader;

