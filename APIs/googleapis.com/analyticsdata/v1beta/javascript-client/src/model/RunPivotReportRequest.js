/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CohortSpec from './CohortSpec';
import DateRange from './DateRange';
import Dimension from './Dimension';
import FilterExpression from './FilterExpression';
import Metric from './Metric';
import Pivot from './Pivot';

/**
 * The RunPivotReportRequest model module.
 * @module model/RunPivotReportRequest
 * @version v1beta
 */
class RunPivotReportRequest {
    /**
     * Constructs a new <code>RunPivotReportRequest</code>.
     * The request to generate a pivot report.
     * @alias module:model/RunPivotReportRequest
     */
    constructor() { 
        
        RunPivotReportRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunPivotReportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunPivotReportRequest} obj Optional instance to populate.
     * @return {module:model/RunPivotReportRequest} The populated <code>RunPivotReportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunPivotReportRequest();

            if (data.hasOwnProperty('cohortSpec')) {
                obj['cohortSpec'] = CohortSpec.constructFromObject(data['cohortSpec']);
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('dateRanges')) {
                obj['dateRanges'] = ApiClient.convertToType(data['dateRanges'], [DateRange]);
            }
            if (data.hasOwnProperty('dimensionFilter')) {
                obj['dimensionFilter'] = FilterExpression.constructFromObject(data['dimensionFilter']);
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('keepEmptyRows')) {
                obj['keepEmptyRows'] = ApiClient.convertToType(data['keepEmptyRows'], 'Boolean');
            }
            if (data.hasOwnProperty('metricFilter')) {
                obj['metricFilter'] = FilterExpression.constructFromObject(data['metricFilter']);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Metric]);
            }
            if (data.hasOwnProperty('pivots')) {
                obj['pivots'] = ApiClient.convertToType(data['pivots'], [Pivot]);
            }
            if (data.hasOwnProperty('property')) {
                obj['property'] = ApiClient.convertToType(data['property'], 'String');
            }
            if (data.hasOwnProperty('returnPropertyQuota')) {
                obj['returnPropertyQuota'] = ApiClient.convertToType(data['returnPropertyQuota'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunPivotReportRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunPivotReportRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cohortSpec`
        if (data['cohortSpec']) { // data not null
          CohortSpec.validateJSON(data['cohortSpec']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        if (data['dateRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dateRanges'])) {
                throw new Error("Expected the field `dateRanges` to be an array in the JSON data but got " + data['dateRanges']);
            }
            // validate the optional field `dateRanges` (array)
            for (const item of data['dateRanges']) {
                DateRange.validateJSON(item);
            };
        }
        // validate the optional field `dimensionFilter`
        if (data['dimensionFilter']) { // data not null
          FilterExpression.validateJSON(data['dimensionFilter']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Dimension.validateJSON(item);
            };
        }
        // validate the optional field `metricFilter`
        if (data['metricFilter']) { // data not null
          FilterExpression.validateJSON(data['metricFilter']);
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                Metric.validateJSON(item);
            };
        }
        if (data['pivots']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pivots'])) {
                throw new Error("Expected the field `pivots` to be an array in the JSON data but got " + data['pivots']);
            }
            // validate the optional field `pivots` (array)
            for (const item of data['pivots']) {
                Pivot.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['property'] && !(typeof data['property'] === 'string' || data['property'] instanceof String)) {
            throw new Error("Expected the field `property` to be a primitive type in the JSON string but got " + data['property']);
        }

        return true;
    }


}



/**
 * @member {module:model/CohortSpec} cohortSpec
 */
RunPivotReportRequest.prototype['cohortSpec'] = undefined;

/**
 * A currency code in ISO4217 format, such as \"AED\", \"USD\", \"JPY\". If the field is empty, the report uses the property's default currency.
 * @member {String} currencyCode
 */
RunPivotReportRequest.prototype['currencyCode'] = undefined;

/**
 * The date range to retrieve event data for the report. If multiple date ranges are specified, event data from each date range is used in the report. A special dimension with field name \"dateRange\" can be included in a Pivot's field names; if included, the report compares between date ranges. In a cohort request, this `dateRanges` must be unspecified.
 * @member {Array.<module:model/DateRange>} dateRanges
 */
RunPivotReportRequest.prototype['dateRanges'] = undefined;

/**
 * @member {module:model/FilterExpression} dimensionFilter
 */
RunPivotReportRequest.prototype['dimensionFilter'] = undefined;

/**
 * The dimensions requested. All defined dimensions must be used by one of the following: dimension_expression, dimension_filter, pivots, order_bys.
 * @member {Array.<module:model/Dimension>} dimensions
 */
RunPivotReportRequest.prototype['dimensions'] = undefined;

/**
 * If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. Regardless of this `keep_empty_rows` setting, only data recorded by the Google Analytics (GA4) property can be displayed in a report. For example if a property never logs a `purchase` event, then a query for the `eventName` dimension and `eventCount` metric will not have a row eventName: \"purchase\" and eventCount: 0.
 * @member {Boolean} keepEmptyRows
 */
RunPivotReportRequest.prototype['keepEmptyRows'] = undefined;

/**
 * @member {module:model/FilterExpression} metricFilter
 */
RunPivotReportRequest.prototype['metricFilter'] = undefined;

/**
 * The metrics requested, at least one metric needs to be specified. All defined metrics must be used by one of the following: metric_expression, metric_filter, order_bys.
 * @member {Array.<module:model/Metric>} metrics
 */
RunPivotReportRequest.prototype['metrics'] = undefined;

/**
 * Describes the visual format of the report's dimensions in columns or rows. The union of the fieldNames (dimension names) in all pivots must be a subset of dimension names defined in Dimensions. No two pivots can share a dimension. A dimension is only visible if it appears in a pivot.
 * @member {Array.<module:model/Pivot>} pivots
 */
RunPivotReportRequest.prototype['pivots'] = undefined;

/**
 * A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234
 * @member {String} property
 */
RunPivotReportRequest.prototype['property'] = undefined;

/**
 * Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota).
 * @member {Boolean} returnPropertyQuota
 */
RunPivotReportRequest.prototype['returnPropertyQuota'] = undefined;






export default RunPivotReportRequest;

