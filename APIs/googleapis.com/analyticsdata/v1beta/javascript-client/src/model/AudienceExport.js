/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V1betaAudienceDimension from './V1betaAudienceDimension';

/**
 * The AudienceExport model module.
 * @module model/AudienceExport
 * @version v1beta
 */
class AudienceExport {
    /**
     * Constructs a new <code>AudienceExport</code>.
     * An audience export is a list of users in an audience at the time of the list&#39;s creation. One audience may have multiple audience exports created for different days.
     * @alias module:model/AudienceExport
     */
    constructor() { 
        
        AudienceExport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudienceExport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudienceExport} obj Optional instance to populate.
     * @return {module:model/AudienceExport} The populated <code>AudienceExport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudienceExport();

            if (data.hasOwnProperty('audience')) {
                obj['audience'] = ApiClient.convertToType(data['audience'], 'String');
            }
            if (data.hasOwnProperty('audienceDisplayName')) {
                obj['audienceDisplayName'] = ApiClient.convertToType(data['audienceDisplayName'], 'String');
            }
            if (data.hasOwnProperty('beginCreatingTime')) {
                obj['beginCreatingTime'] = ApiClient.convertToType(data['beginCreatingTime'], 'String');
            }
            if (data.hasOwnProperty('creationQuotaTokensCharged')) {
                obj['creationQuotaTokensCharged'] = ApiClient.convertToType(data['creationQuotaTokensCharged'], 'Number');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [V1betaAudienceDimension]);
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('percentageCompleted')) {
                obj['percentageCompleted'] = ApiClient.convertToType(data['percentageCompleted'], 'Number');
            }
            if (data.hasOwnProperty('rowCount')) {
                obj['rowCount'] = ApiClient.convertToType(data['rowCount'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudienceExport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudienceExport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['audience'] && !(typeof data['audience'] === 'string' || data['audience'] instanceof String)) {
            throw new Error("Expected the field `audience` to be a primitive type in the JSON string but got " + data['audience']);
        }
        // ensure the json data is a string
        if (data['audienceDisplayName'] && !(typeof data['audienceDisplayName'] === 'string' || data['audienceDisplayName'] instanceof String)) {
            throw new Error("Expected the field `audienceDisplayName` to be a primitive type in the JSON string but got " + data['audienceDisplayName']);
        }
        // ensure the json data is a string
        if (data['beginCreatingTime'] && !(typeof data['beginCreatingTime'] === 'string' || data['beginCreatingTime'] instanceof String)) {
            throw new Error("Expected the field `beginCreatingTime` to be a primitive type in the JSON string but got " + data['beginCreatingTime']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                V1betaAudienceDimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Required. The audience resource name. This resource name identifies the audience being listed and is shared between the Analytics Data & Admin APIs. Format: `properties/{property}/audiences/{audience}`
 * @member {String} audience
 */
AudienceExport.prototype['audience'] = undefined;

/**
 * Output only. The descriptive display name for this audience. For example, \"Purchasers\".
 * @member {String} audienceDisplayName
 */
AudienceExport.prototype['audienceDisplayName'] = undefined;

/**
 * Output only. The time when CreateAudienceExport was called and the AudienceExport began the `CREATING` state.
 * @member {String} beginCreatingTime
 */
AudienceExport.prototype['beginCreatingTime'] = undefined;

/**
 * Output only. The total quota tokens charged during creation of the AudienceExport. Because this token count is based on activity from the `CREATING` state, this tokens charged will be fixed once an AudienceExport enters the `ACTIVE` or `FAILED` states.
 * @member {Number} creationQuotaTokensCharged
 */
AudienceExport.prototype['creationQuotaTokensCharged'] = undefined;

/**
 * Required. The dimensions requested and displayed in the query response.
 * @member {Array.<module:model/V1betaAudienceDimension>} dimensions
 */
AudienceExport.prototype['dimensions'] = undefined;

/**
 * Output only. Error message is populated when an audience export fails during creation. A common reason for such a failure is quota exhaustion.
 * @member {String} errorMessage
 */
AudienceExport.prototype['errorMessage'] = undefined;

/**
 * Output only. Identifier. The audience export resource name assigned during creation. This resource name identifies this `AudienceExport`. Format: `properties/{property}/audienceExports/{audience_export}`
 * @member {String} name
 */
AudienceExport.prototype['name'] = undefined;

/**
 * Output only. The percentage completed for this audience export ranging between 0 to 100.
 * @member {Number} percentageCompleted
 */
AudienceExport.prototype['percentageCompleted'] = undefined;

/**
 * Output only. The total number of rows in the AudienceExport result.
 * @member {Number} rowCount
 */
AudienceExport.prototype['rowCount'] = undefined;

/**
 * Output only. The current state for this AudienceExport.
 * @member {module:model/AudienceExport.StateEnum} state
 */
AudienceExport.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
AudienceExport['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default AudienceExport;

