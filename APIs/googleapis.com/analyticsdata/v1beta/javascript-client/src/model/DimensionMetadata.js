/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DimensionMetadata model module.
 * @module model/DimensionMetadata
 * @version v1beta
 */
class DimensionMetadata {
    /**
     * Constructs a new <code>DimensionMetadata</code>.
     * Explains a dimension.
     * @alias module:model/DimensionMetadata
     */
    constructor() { 
        
        DimensionMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DimensionMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DimensionMetadata} obj Optional instance to populate.
     * @return {module:model/DimensionMetadata} The populated <code>DimensionMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DimensionMetadata();

            if (data.hasOwnProperty('apiName')) {
                obj['apiName'] = ApiClient.convertToType(data['apiName'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('customDefinition')) {
                obj['customDefinition'] = ApiClient.convertToType(data['customDefinition'], 'Boolean');
            }
            if (data.hasOwnProperty('deprecatedApiNames')) {
                obj['deprecatedApiNames'] = ApiClient.convertToType(data['deprecatedApiNames'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('uiName')) {
                obj['uiName'] = ApiClient.convertToType(data['uiName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DimensionMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DimensionMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['apiName'] && !(typeof data['apiName'] === 'string' || data['apiName'] instanceof String)) {
            throw new Error("Expected the field `apiName` to be a primitive type in the JSON string but got " + data['apiName']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deprecatedApiNames'])) {
            throw new Error("Expected the field `deprecatedApiNames` to be an array in the JSON data but got " + data['deprecatedApiNames']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['uiName'] && !(typeof data['uiName'] === 'string' || data['uiName'] instanceof String)) {
            throw new Error("Expected the field `uiName` to be a primitive type in the JSON string but got " + data['uiName']);
        }

        return true;
    }


}



/**
 * This dimension's name. Useable in [Dimension](#Dimension)'s `name`. For example, `eventName`.
 * @member {String} apiName
 */
DimensionMetadata.prototype['apiName'] = undefined;

/**
 * The display name of the category that this dimension belongs to. Similar dimensions and metrics are categorized together.
 * @member {String} category
 */
DimensionMetadata.prototype['category'] = undefined;

/**
 * True if the dimension is custom to this property. This includes user, event, & item scoped custom dimensions; to learn more about custom dimensions, see https://support.google.com/analytics/answer/14240153. This also include custom channel groups; to learn more about custom channel groups, see https://support.google.com/analytics/answer/13051316.
 * @member {Boolean} customDefinition
 */
DimensionMetadata.prototype['customDefinition'] = undefined;

/**
 * Still usable but deprecated names for this dimension. If populated, this dimension is available by either `apiName` or one of `deprecatedApiNames` for a period of time. After the deprecation period, the dimension will be available only by `apiName`.
 * @member {Array.<String>} deprecatedApiNames
 */
DimensionMetadata.prototype['deprecatedApiNames'] = undefined;

/**
 * Description of how this dimension is used and calculated.
 * @member {String} description
 */
DimensionMetadata.prototype['description'] = undefined;

/**
 * This dimension's name within the Google Analytics user interface. For example, `Event name`.
 * @member {String} uiName
 */
DimensionMetadata.prototype['uiName'] = undefined;






export default DimensionMetadata;

