/**
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderBy from './OrderBy';

/**
 * The Pivot model module.
 * @module model/Pivot
 * @version v1beta
 */
class Pivot {
    /**
     * Constructs a new <code>Pivot</code>.
     * Describes the visible dimension columns and rows in the report response.
     * @alias module:model/Pivot
     */
    constructor() { 
        
        Pivot.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Pivot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pivot} obj Optional instance to populate.
     * @return {module:model/Pivot} The populated <code>Pivot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pivot();

            if (data.hasOwnProperty('fieldNames')) {
                obj['fieldNames'] = ApiClient.convertToType(data['fieldNames'], ['String']);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'String');
            }
            if (data.hasOwnProperty('metricAggregations')) {
                obj['metricAggregations'] = ApiClient.convertToType(data['metricAggregations'], ['String']);
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'String');
            }
            if (data.hasOwnProperty('orderBys')) {
                obj['orderBys'] = ApiClient.convertToType(data['orderBys'], [OrderBy]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pivot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pivot</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['fieldNames'])) {
            throw new Error("Expected the field `fieldNames` to be an array in the JSON data but got " + data['fieldNames']);
        }
        // ensure the json data is a string
        if (data['limit'] && !(typeof data['limit'] === 'string' || data['limit'] instanceof String)) {
            throw new Error("Expected the field `limit` to be a primitive type in the JSON string but got " + data['limit']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metricAggregations'])) {
            throw new Error("Expected the field `metricAggregations` to be an array in the JSON data but got " + data['metricAggregations']);
        }
        // ensure the json data is a string
        if (data['offset'] && !(typeof data['offset'] === 'string' || data['offset'] instanceof String)) {
            throw new Error("Expected the field `offset` to be a primitive type in the JSON string but got " + data['offset']);
        }
        if (data['orderBys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orderBys'])) {
                throw new Error("Expected the field `orderBys` to be an array in the JSON data but got " + data['orderBys']);
            }
            // validate the optional field `orderBys` (array)
            for (const item of data['orderBys']) {
                OrderBy.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Dimension names for visible columns in the report response. Including \"dateRange\" produces a date range column; for each row in the response, dimension values in the date range column will indicate the corresponding date range from the request.
 * @member {Array.<String>} fieldNames
 */
Pivot.prototype['fieldNames'] = undefined;

/**
 * The number of unique combinations of dimension values to return in this pivot. The `limit` parameter is required. A `limit` of 10,000 is common for single pivot requests. The product of the `limit` for each `pivot` in a `RunPivotReportRequest` must not exceed 250,000. For example, a two pivot request with `limit: 1000` in each pivot will fail because the product is `1,000,000`.
 * @member {String} limit
 */
Pivot.prototype['limit'] = undefined;

/**
 * Aggregate the metrics by dimensions in this pivot using the specified metric_aggregations.
 * @member {Array.<module:model/Pivot.MetricAggregationsEnum>} metricAggregations
 */
Pivot.prototype['metricAggregations'] = undefined;

/**
 * The row count of the start row. The first row is counted as row 0.
 * @member {String} offset
 */
Pivot.prototype['offset'] = undefined;

/**
 * Specifies how dimensions are ordered in the pivot. In the first Pivot, the OrderBys determine Row and PivotDimensionHeader ordering; in subsequent Pivots, the OrderBys determine only PivotDimensionHeader ordering. Dimensions specified in these OrderBys must be a subset of Pivot.field_names.
 * @member {Array.<module:model/OrderBy>} orderBys
 */
Pivot.prototype['orderBys'] = undefined;





/**
 * Allowed values for the <code>metricAggregations</code> property.
 * @enum {String}
 * @readonly
 */
Pivot['MetricAggregationsEnum'] = {

    /**
     * value: "METRIC_AGGREGATION_UNSPECIFIED"
     * @const
     */
    "METRIC_AGGREGATION_UNSPECIFIED": "METRIC_AGGREGATION_UNSPECIFIED",

    /**
     * value: "TOTAL"
     * @const
     */
    "TOTAL": "TOTAL",

    /**
     * value: "MINIMUM"
     * @const
     */
    "MINIMUM": "MINIMUM",

    /**
     * value: "MAXIMUM"
     * @const
     */
    "MAXIMUM": "MAXIMUM",

    /**
     * value: "COUNT"
     * @const
     */
    "COUNT": "COUNT"
};



export default Pivot;

