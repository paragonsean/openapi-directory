# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extension_config_intent_add_media import ExtensionConfigIntentAddMedia
from openapi_server.models.extension_config_intent_play_media import ExtensionConfigIntentPlayMedia
from openapi_server.models.extension_config_intent_update_media_affinity import ExtensionConfigIntentUpdateMediaAffinity
from openapi_server import util


class ExtensionConfigIntent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_media: ExtensionConfigIntentAddMedia=None, hdr: object=None, play_media: ExtensionConfigIntentPlayMedia=None, update_media_affinity: ExtensionConfigIntentUpdateMediaAffinity=None):
        """ExtensionConfigIntent - a model defined in OpenAPI

        :param add_media: The add_media of this ExtensionConfigIntent.
        :param hdr: The hdr of this ExtensionConfigIntent.
        :param play_media: The play_media of this ExtensionConfigIntent.
        :param update_media_affinity: The update_media_affinity of this ExtensionConfigIntent.
        """
        self.openapi_types = {
            'add_media': ExtensionConfigIntentAddMedia,
            'hdr': object,
            'play_media': ExtensionConfigIntentPlayMedia,
            'update_media_affinity': ExtensionConfigIntentUpdateMediaAffinity
        }

        self.attribute_map = {
            'add_media': 'addMedia',
            'hdr': 'hdr',
            'play_media': 'playMedia',
            'update_media_affinity': 'updateMediaAffinity'
        }

        self._add_media = add_media
        self._hdr = hdr
        self._play_media = play_media
        self._update_media_affinity = update_media_affinity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtensionConfigIntent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtensionConfig_intent of this ExtensionConfigIntent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_media(self):
        """Gets the add_media of this ExtensionConfigIntent.


        :return: The add_media of this ExtensionConfigIntent.
        :rtype: ExtensionConfigIntentAddMedia
        """
        return self._add_media

    @add_media.setter
    def add_media(self, add_media):
        """Sets the add_media of this ExtensionConfigIntent.


        :param add_media: The add_media of this ExtensionConfigIntent.
        :type add_media: ExtensionConfigIntentAddMedia
        """

        self._add_media = add_media

    @property
    def hdr(self):
        """Gets the hdr of this ExtensionConfigIntent.


        :return: The hdr of this ExtensionConfigIntent.
        :rtype: object
        """
        return self._hdr

    @hdr.setter
    def hdr(self, hdr):
        """Sets the hdr of this ExtensionConfigIntent.


        :param hdr: The hdr of this ExtensionConfigIntent.
        :type hdr: object
        """

        self._hdr = hdr

    @property
    def play_media(self):
        """Gets the play_media of this ExtensionConfigIntent.


        :return: The play_media of this ExtensionConfigIntent.
        :rtype: ExtensionConfigIntentPlayMedia
        """
        return self._play_media

    @play_media.setter
    def play_media(self, play_media):
        """Sets the play_media of this ExtensionConfigIntent.


        :param play_media: The play_media of this ExtensionConfigIntent.
        :type play_media: ExtensionConfigIntentPlayMedia
        """
        if play_media is None:
            raise ValueError("Invalid value for `play_media`, must not be `None`")

        self._play_media = play_media

    @property
    def update_media_affinity(self):
        """Gets the update_media_affinity of this ExtensionConfigIntent.


        :return: The update_media_affinity of this ExtensionConfigIntent.
        :rtype: ExtensionConfigIntentUpdateMediaAffinity
        """
        return self._update_media_affinity

    @update_media_affinity.setter
    def update_media_affinity(self, update_media_affinity):
        """Sets the update_media_affinity of this ExtensionConfigIntent.


        :param update_media_affinity: The update_media_affinity of this ExtensionConfigIntent.
        :type update_media_affinity: ExtensionConfigIntentUpdateMediaAffinity
        """

        self._update_media_affinity = update_media_affinity
