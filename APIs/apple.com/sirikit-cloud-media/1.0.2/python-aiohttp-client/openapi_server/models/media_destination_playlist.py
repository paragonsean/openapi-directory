# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_destination import MediaDestination
from openapi_server import util


class MediaDestinationPlaylist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_destination_type: str=None, playlist_name: str=None):
        """MediaDestinationPlaylist - a model defined in OpenAPI

        :param media_destination_type: The media_destination_type of this MediaDestinationPlaylist.
        :param playlist_name: The playlist_name of this MediaDestinationPlaylist.
        """
        self.openapi_types = {
            'media_destination_type': str,
            'playlist_name': str
        }

        self.attribute_map = {
            'media_destination_type': 'mediaDestinationType',
            'playlist_name': 'playlistName'
        }

        self._media_destination_type = media_destination_type
        self._playlist_name = playlist_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaDestinationPlaylist':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaDestinationPlaylist of this MediaDestinationPlaylist.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_destination_type(self):
        """Gets the media_destination_type of this MediaDestinationPlaylist.


        :return: The media_destination_type of this MediaDestinationPlaylist.
        :rtype: str
        """
        return self._media_destination_type

    @media_destination_type.setter
    def media_destination_type(self, media_destination_type):
        """Sets the media_destination_type of this MediaDestinationPlaylist.


        :param media_destination_type: The media_destination_type of this MediaDestinationPlaylist.
        :type media_destination_type: str
        """
        allowed_values = ["playlist"]  # noqa: E501
        if media_destination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `media_destination_type` ({0}), must be one of {1}"
                .format(media_destination_type, allowed_values)
            )

        self._media_destination_type = media_destination_type

    @property
    def playlist_name(self):
        """Gets the playlist_name of this MediaDestinationPlaylist.


        :return: The playlist_name of this MediaDestinationPlaylist.
        :rtype: str
        """
        return self._playlist_name

    @playlist_name.setter
    def playlist_name(self, playlist_name):
        """Sets the playlist_name of this MediaDestinationPlaylist.


        :param playlist_name: The playlist_name of this MediaDestinationPlaylist.
        :type playlist_name: str
        """
        if playlist_name is None:
            raise ValueError("Invalid value for `playlist_name`, must not be `None`")
        if playlist_name is not None and len(playlist_name) > 1000:
            raise ValueError("Invalid value for `playlist_name`, length must be less than or equal to `1000`")
        if playlist_name is not None and len(playlist_name) < 1:
            raise ValueError("Invalid value for `playlist_name`, length must be greater than or equal to `1`")

        self._playlist_name = playlist_name
