# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_item_type import MediaItemType
from openapi_server import util


class MediaItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artist: str=None, identifier: str=None, title: str=None, type: MediaItemType=None):
        """MediaItem - a model defined in OpenAPI

        :param artist: The artist of this MediaItem.
        :param identifier: The identifier of this MediaItem.
        :param title: The title of this MediaItem.
        :param type: The type of this MediaItem.
        """
        self.openapi_types = {
            'artist': str,
            'identifier': str,
            'title': str,
            'type': MediaItemType
        }

        self.attribute_map = {
            'artist': 'artist',
            'identifier': 'identifier',
            'title': 'title',
            'type': 'type'
        }

        self._artist = artist
        self._identifier = identifier
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaItem of this MediaItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artist(self):
        """Gets the artist of this MediaItem.


        :return: The artist of this MediaItem.
        :rtype: str
        """
        return self._artist

    @artist.setter
    def artist(self, artist):
        """Sets the artist of this MediaItem.


        :param artist: The artist of this MediaItem.
        :type artist: str
        """
        if artist is not None and len(artist) > 1000:
            raise ValueError("Invalid value for `artist`, length must be less than or equal to `1000`")

        self._artist = artist

    @property
    def identifier(self):
        """Gets the identifier of this MediaItem.


        :return: The identifier of this MediaItem.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this MediaItem.


        :param identifier: The identifier of this MediaItem.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and len(identifier) > 250:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `250`")

        self._identifier = identifier

    @property
    def title(self):
        """Gets the title of this MediaItem.


        :return: The title of this MediaItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MediaItem.


        :param title: The title of this MediaItem.
        :type title: str
        """
        if title is not None and len(title) > 1000:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `1000`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this MediaItem.


        :return: The type of this MediaItem.
        :rtype: MediaItemType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MediaItem.


        :param type: The type of this MediaItem.
        :type type: MediaItemType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
