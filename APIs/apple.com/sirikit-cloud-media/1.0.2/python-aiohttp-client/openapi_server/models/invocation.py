# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.session import Session
from openapi_server import util


class Invocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, params: object=None, session: Session=None):
        """Invocation - a model defined in OpenAPI

        :param method: The method of this Invocation.
        :param params: The params of this Invocation.
        :param session: The session of this Invocation.
        """
        self.openapi_types = {
            'method': str,
            'params': object,
            'session': Session
        }

        self.attribute_map = {
            'method': 'method',
            'params': 'params',
            'session': 'session'
        }

        self._method = method
        self._params = params
        self._session = session

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invocation of this Invocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this Invocation.


        :return: The method of this Invocation.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Invocation.


        :param method: The method of this Invocation.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def params(self):
        """Gets the params of this Invocation.


        :return: The params of this Invocation.
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Invocation.


        :param params: The params of this Invocation.
        :type params: object
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")

        self._params = params

    @property
    def session(self):
        """Gets the session of this Invocation.


        :return: The session of this Invocation.
        :rtype: Session
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this Invocation.


        :param session: The session of this Invocation.
        :type session: Session
        """

        self._session = session
