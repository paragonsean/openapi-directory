# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content import Content
from openapi_server.models.queue_control_mapping import QueueControlMapping
from openapi_server.models.queue_insert_pointer import QueueInsertPointer
from openapi_server.models.queue_play_pointer import QueuePlayPointer
import re
from openapi_server import util


class Queue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: List[Content]=None, content_items_count: int=None, controls: QueueControlMapping=None, identifier: str=None, insert_pointer: QueueInsertPointer=None, next_content_url: str=None, play_pointer: QueuePlayPointer=None, preroll_seconds: float=None, previous_content_url: str=None, skips_remaining: int=None, version: str=None):
        """Queue - a model defined in OpenAPI

        :param content: The content of this Queue.
        :param content_items_count: The content_items_count of this Queue.
        :param controls: The controls of this Queue.
        :param identifier: The identifier of this Queue.
        :param insert_pointer: The insert_pointer of this Queue.
        :param next_content_url: The next_content_url of this Queue.
        :param play_pointer: The play_pointer of this Queue.
        :param preroll_seconds: The preroll_seconds of this Queue.
        :param previous_content_url: The previous_content_url of this Queue.
        :param skips_remaining: The skips_remaining of this Queue.
        :param version: The version of this Queue.
        """
        self.openapi_types = {
            'content': List[Content],
            'content_items_count': int,
            'controls': QueueControlMapping,
            'identifier': str,
            'insert_pointer': QueueInsertPointer,
            'next_content_url': str,
            'play_pointer': QueuePlayPointer,
            'preroll_seconds': float,
            'previous_content_url': str,
            'skips_remaining': int,
            'version': str
        }

        self.attribute_map = {
            'content': 'content',
            'content_items_count': 'contentItemsCount',
            'controls': 'controls',
            'identifier': 'identifier',
            'insert_pointer': 'insertPointer',
            'next_content_url': 'nextContentUrl',
            'play_pointer': 'playPointer',
            'preroll_seconds': 'prerollSeconds',
            'previous_content_url': 'previousContentUrl',
            'skips_remaining': 'skipsRemaining',
            'version': 'version'
        }

        self._content = content
        self._content_items_count = content_items_count
        self._controls = controls
        self._identifier = identifier
        self._insert_pointer = insert_pointer
        self._next_content_url = next_content_url
        self._play_pointer = play_pointer
        self._preroll_seconds = preroll_seconds
        self._previous_content_url = previous_content_url
        self._skips_remaining = skips_remaining
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Queue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Queue of this Queue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Queue.


        :return: The content of this Queue.
        :rtype: List[Content]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Queue.


        :param content: The content of this Queue.
        :type content: List[Content]
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) > 1000:
            raise ValueError("Invalid value for `content`, number of items must be less than or equal to `1000`")

        self._content = content

    @property
    def content_items_count(self):
        """Gets the content_items_count of this Queue.


        :return: The content_items_count of this Queue.
        :rtype: int
        """
        return self._content_items_count

    @content_items_count.setter
    def content_items_count(self, content_items_count):
        """Sets the content_items_count of this Queue.


        :param content_items_count: The content_items_count of this Queue.
        :type content_items_count: int
        """

        self._content_items_count = content_items_count

    @property
    def controls(self):
        """Gets the controls of this Queue.


        :return: The controls of this Queue.
        :rtype: QueueControlMapping
        """
        return self._controls

    @controls.setter
    def controls(self, controls):
        """Sets the controls of this Queue.


        :param controls: The controls of this Queue.
        :type controls: QueueControlMapping
        """

        self._controls = controls

    @property
    def identifier(self):
        """Gets the identifier of this Queue.


        :return: The identifier of this Queue.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Queue.


        :param identifier: The identifier of this Queue.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and len(identifier) > 1024:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `1024`")
        if identifier is not None and len(identifier) < 1:
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `1`")

        self._identifier = identifier

    @property
    def insert_pointer(self):
        """Gets the insert_pointer of this Queue.


        :return: The insert_pointer of this Queue.
        :rtype: QueueInsertPointer
        """
        return self._insert_pointer

    @insert_pointer.setter
    def insert_pointer(self, insert_pointer):
        """Sets the insert_pointer of this Queue.


        :param insert_pointer: The insert_pointer of this Queue.
        :type insert_pointer: QueueInsertPointer
        """

        self._insert_pointer = insert_pointer

    @property
    def next_content_url(self):
        """Gets the next_content_url of this Queue.


        :return: The next_content_url of this Queue.
        :rtype: str
        """
        return self._next_content_url

    @next_content_url.setter
    def next_content_url(self, next_content_url):
        """Sets the next_content_url of this Queue.


        :param next_content_url: The next_content_url of this Queue.
        :type next_content_url: str
        """
        if next_content_url is not None and len(next_content_url) > 2000:
            raise ValueError("Invalid value for `next_content_url`, length must be less than or equal to `2000`")
        if next_content_url is not None and len(next_content_url) < 1:
            raise ValueError("Invalid value for `next_content_url`, length must be greater than or equal to `1`")

        self._next_content_url = next_content_url

    @property
    def play_pointer(self):
        """Gets the play_pointer of this Queue.


        :return: The play_pointer of this Queue.
        :rtype: QueuePlayPointer
        """
        return self._play_pointer

    @play_pointer.setter
    def play_pointer(self, play_pointer):
        """Sets the play_pointer of this Queue.


        :param play_pointer: The play_pointer of this Queue.
        :type play_pointer: QueuePlayPointer
        """

        self._play_pointer = play_pointer

    @property
    def preroll_seconds(self):
        """Gets the preroll_seconds of this Queue.


        :return: The preroll_seconds of this Queue.
        :rtype: float
        """
        return self._preroll_seconds

    @preroll_seconds.setter
    def preroll_seconds(self, preroll_seconds):
        """Sets the preroll_seconds of this Queue.


        :param preroll_seconds: The preroll_seconds of this Queue.
        :type preroll_seconds: float
        """

        self._preroll_seconds = preroll_seconds

    @property
    def previous_content_url(self):
        """Gets the previous_content_url of this Queue.


        :return: The previous_content_url of this Queue.
        :rtype: str
        """
        return self._previous_content_url

    @previous_content_url.setter
    def previous_content_url(self, previous_content_url):
        """Sets the previous_content_url of this Queue.


        :param previous_content_url: The previous_content_url of this Queue.
        :type previous_content_url: str
        """
        if previous_content_url is not None and len(previous_content_url) > 2000:
            raise ValueError("Invalid value for `previous_content_url`, length must be less than or equal to `2000`")
        if previous_content_url is not None and len(previous_content_url) < 1:
            raise ValueError("Invalid value for `previous_content_url`, length must be greater than or equal to `1`")

        self._previous_content_url = previous_content_url

    @property
    def skips_remaining(self):
        """Gets the skips_remaining of this Queue.


        :return: The skips_remaining of this Queue.
        :rtype: int
        """
        return self._skips_remaining

    @skips_remaining.setter
    def skips_remaining(self, skips_remaining):
        """Sets the skips_remaining of this Queue.


        :param skips_remaining: The skips_remaining of this Queue.
        :type skips_remaining: int
        """

        self._skips_remaining = skips_remaining

    @property
    def version(self):
        """Gets the version of this Queue.


        :return: The version of this Queue.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Queue.


        :param version: The version of this Queue.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and len(version) > 25:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `25`")
        if version is not None and not re.search(r'[0-9]+\.[0-9]+\.[0-9]+', version):
            raise ValueError("Invalid value for `version`, must be a follow pattern or equal to `/[0-9]+\.[0-9]+\.[0-9]+/`")

        self._version = version
