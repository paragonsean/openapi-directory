# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.execution_metrics import ExecutionMetrics
from openapi_server.models.invocation_response import InvocationResponse
from openapi_server.models.playback_queue_location_resolution_result import PlaybackQueueLocationResolutionResult
from openapi_server import util


class PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, result: object=None, debug: str=None, metrics: ExecutionMetrics=None):
        """PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse - a model defined in OpenAPI

        :param method: The method of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        :param result: The result of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        :param debug: The debug of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        :param metrics: The metrics of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        """
        self.openapi_types = {
            'method': str,
            'result': object,
            'debug': str,
            'metrics': ExecutionMetrics
        }

        self.attribute_map = {
            'method': 'method',
            'result': 'result',
            'debug': 'debug',
            'metrics': 'metrics'
        }

        self._method = method
        self._result = result
        self._debug = debug
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.


        :return: The method of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.


        :param method: The method of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        :type method: str
        """
        allowed_values = ["PlayMediaIntentHandling.resolvePlaybackQueueLocation"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def result(self):
        """Gets the result of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.


        :return: The result of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.


        :param result: The result of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        :type result: object
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result

    @property
    def debug(self):
        """Gets the debug of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.


        :return: The debug of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        :rtype: str
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.


        :param debug: The debug of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        :type debug: str
        """
        if debug is not None and len(debug) > 2000:
            raise ValueError("Invalid value for `debug`, length must be less than or equal to `2000`")

        self._debug = debug

    @property
    def metrics(self):
        """Gets the metrics of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.


        :return: The metrics of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        :rtype: ExecutionMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.


        :param metrics: The metrics of this PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
        :type metrics: ExecutionMetrics
        """

        self._metrics = metrics
