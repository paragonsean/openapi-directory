# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExtensionConfigIntentUpdateMediaAffinity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, opt: List[str]=None, hdr: object=None, url: str=None):
        """ExtensionConfigIntentUpdateMediaAffinity - a model defined in OpenAPI

        :param opt: The opt of this ExtensionConfigIntentUpdateMediaAffinity.
        :param hdr: The hdr of this ExtensionConfigIntentUpdateMediaAffinity.
        :param url: The url of this ExtensionConfigIntentUpdateMediaAffinity.
        """
        self.openapi_types = {
            'opt': List[str],
            'hdr': object,
            'url': str
        }

        self.attribute_map = {
            'opt': 'opt',
            'hdr': 'hdr',
            'url': 'url'
        }

        self._opt = opt
        self._hdr = hdr
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtensionConfigIntentUpdateMediaAffinity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtensionConfig_intent_updateMediaAffinity of this ExtensionConfigIntentUpdateMediaAffinity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def opt(self):
        """Gets the opt of this ExtensionConfigIntentUpdateMediaAffinity.


        :return: The opt of this ExtensionConfigIntentUpdateMediaAffinity.
        :rtype: List[str]
        """
        return self._opt

    @opt.setter
    def opt(self, opt):
        """Sets the opt of this ExtensionConfigIntentUpdateMediaAffinity.


        :param opt: The opt of this ExtensionConfigIntentUpdateMediaAffinity.
        :type opt: List[str]
        """
        allowed_values = ["resolveAffinityType"]  # noqa: E501
        if not set(opt).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `opt` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(opt) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._opt = opt

    @property
    def hdr(self):
        """Gets the hdr of this ExtensionConfigIntentUpdateMediaAffinity.


        :return: The hdr of this ExtensionConfigIntentUpdateMediaAffinity.
        :rtype: object
        """
        return self._hdr

    @hdr.setter
    def hdr(self, hdr):
        """Sets the hdr of this ExtensionConfigIntentUpdateMediaAffinity.


        :param hdr: The hdr of this ExtensionConfigIntentUpdateMediaAffinity.
        :type hdr: object
        """

        self._hdr = hdr

    @property
    def url(self):
        """Gets the url of this ExtensionConfigIntentUpdateMediaAffinity.


        :return: The url of this ExtensionConfigIntentUpdateMediaAffinity.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ExtensionConfigIntentUpdateMediaAffinity.


        :param url: The url of this ExtensionConfigIntentUpdateMediaAffinity.
        :type url: str
        """
        if url is not None and len(url) > 2000:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2000`")
        if url is not None and len(url) < 0:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `0`")

        self._url = url
