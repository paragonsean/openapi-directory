# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueueInsertPointer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_identifier: str=None, replace: bool=False):
        """QueueInsertPointer - a model defined in OpenAPI

        :param after_identifier: The after_identifier of this QueueInsertPointer.
        :param replace: The replace of this QueueInsertPointer.
        """
        self.openapi_types = {
            'after_identifier': str,
            'replace': bool
        }

        self.attribute_map = {
            'after_identifier': 'afterIdentifier',
            'replace': 'replace'
        }

        self._after_identifier = after_identifier
        self._replace = replace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueueInsertPointer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueueInsertPointer of this QueueInsertPointer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_identifier(self):
        """Gets the after_identifier of this QueueInsertPointer.


        :return: The after_identifier of this QueueInsertPointer.
        :rtype: str
        """
        return self._after_identifier

    @after_identifier.setter
    def after_identifier(self, after_identifier):
        """Sets the after_identifier of this QueueInsertPointer.


        :param after_identifier: The after_identifier of this QueueInsertPointer.
        :type after_identifier: str
        """
        if after_identifier is not None and len(after_identifier) > 1000:
            raise ValueError("Invalid value for `after_identifier`, length must be less than or equal to `1000`")
        if after_identifier is not None and len(after_identifier) < 1:
            raise ValueError("Invalid value for `after_identifier`, length must be greater than or equal to `1`")

        self._after_identifier = after_identifier

    @property
    def replace(self):
        """Gets the replace of this QueueInsertPointer.


        :return: The replace of this QueueInsertPointer.
        :rtype: bool
        """
        return self._replace

    @replace.setter
    def replace(self, replace):
        """Sets the replace of this QueueInsertPointer.


        :param replace: The replace of this QueueInsertPointer.
        :type replace: bool
        """

        self._replace = replace
