# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.explicit_date_components import ExplicitDateComponents
from openapi_server import util


class DateComponents(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calendar_identifier: str=None, day: int=None, era: int=None, hour: int=None, minute: int=None, month: int=None, nanosecond: int=None, second: int=None, time_zone: str=None, year: int=None):
        """DateComponents - a model defined in OpenAPI

        :param calendar_identifier: The calendar_identifier of this DateComponents.
        :param day: The day of this DateComponents.
        :param era: The era of this DateComponents.
        :param hour: The hour of this DateComponents.
        :param minute: The minute of this DateComponents.
        :param month: The month of this DateComponents.
        :param nanosecond: The nanosecond of this DateComponents.
        :param second: The second of this DateComponents.
        :param time_zone: The time_zone of this DateComponents.
        :param year: The year of this DateComponents.
        """
        self.openapi_types = {
            'calendar_identifier': str,
            'day': int,
            'era': int,
            'hour': int,
            'minute': int,
            'month': int,
            'nanosecond': int,
            'second': int,
            'time_zone': str,
            'year': int
        }

        self.attribute_map = {
            'calendar_identifier': 'calendarIdentifier',
            'day': 'day',
            'era': 'era',
            'hour': 'hour',
            'minute': 'minute',
            'month': 'month',
            'nanosecond': 'nanosecond',
            'second': 'second',
            'time_zone': 'timeZone',
            'year': 'year'
        }

        self._calendar_identifier = calendar_identifier
        self._day = day
        self._era = era
        self._hour = hour
        self._minute = minute
        self._month = month
        self._nanosecond = nanosecond
        self._second = second
        self._time_zone = time_zone
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateComponents':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateComponents of this DateComponents.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calendar_identifier(self):
        """Gets the calendar_identifier of this DateComponents.


        :return: The calendar_identifier of this DateComponents.
        :rtype: str
        """
        return self._calendar_identifier

    @calendar_identifier.setter
    def calendar_identifier(self, calendar_identifier):
        """Sets the calendar_identifier of this DateComponents.


        :param calendar_identifier: The calendar_identifier of this DateComponents.
        :type calendar_identifier: str
        """

        self._calendar_identifier = calendar_identifier

    @property
    def day(self):
        """Gets the day of this DateComponents.


        :return: The day of this DateComponents.
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this DateComponents.


        :param day: The day of this DateComponents.
        :type day: int
        """

        self._day = day

    @property
    def era(self):
        """Gets the era of this DateComponents.


        :return: The era of this DateComponents.
        :rtype: int
        """
        return self._era

    @era.setter
    def era(self, era):
        """Sets the era of this DateComponents.


        :param era: The era of this DateComponents.
        :type era: int
        """

        self._era = era

    @property
    def hour(self):
        """Gets the hour of this DateComponents.


        :return: The hour of this DateComponents.
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this DateComponents.


        :param hour: The hour of this DateComponents.
        :type hour: int
        """

        self._hour = hour

    @property
    def minute(self):
        """Gets the minute of this DateComponents.


        :return: The minute of this DateComponents.
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this DateComponents.


        :param minute: The minute of this DateComponents.
        :type minute: int
        """

        self._minute = minute

    @property
    def month(self):
        """Gets the month of this DateComponents.


        :return: The month of this DateComponents.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this DateComponents.


        :param month: The month of this DateComponents.
        :type month: int
        """

        self._month = month

    @property
    def nanosecond(self):
        """Gets the nanosecond of this DateComponents.


        :return: The nanosecond of this DateComponents.
        :rtype: int
        """
        return self._nanosecond

    @nanosecond.setter
    def nanosecond(self, nanosecond):
        """Sets the nanosecond of this DateComponents.


        :param nanosecond: The nanosecond of this DateComponents.
        :type nanosecond: int
        """

        self._nanosecond = nanosecond

    @property
    def second(self):
        """Gets the second of this DateComponents.


        :return: The second of this DateComponents.
        :rtype: int
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this DateComponents.


        :param second: The second of this DateComponents.
        :type second: int
        """

        self._second = second

    @property
    def time_zone(self):
        """Gets the time_zone of this DateComponents.


        :return: The time_zone of this DateComponents.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this DateComponents.


        :param time_zone: The time_zone of this DateComponents.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def year(self):
        """Gets the year of this DateComponents.


        :return: The year of this DateComponents.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this DateComponents.


        :param year: The year of this DateComponents.
        :type year: int
        """

        self._year = year
