# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_media_intent_response_code import AddMediaIntentResponseCode
from openapi_server.models.intent_response import IntentResponse
from openapi_server.models.user_activity import UserActivity
from openapi_server import util


class AddMediaIntentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _class: str=None, code: AddMediaIntentResponseCode=None, user_activity: UserActivity=None):
        """AddMediaIntentResponse - a model defined in OpenAPI

        :param _class: The _class of this AddMediaIntentResponse.
        :param code: The code of this AddMediaIntentResponse.
        :param user_activity: The user_activity of this AddMediaIntentResponse.
        """
        self.openapi_types = {
            '_class': str,
            'code': AddMediaIntentResponseCode,
            'user_activity': UserActivity
        }

        self.attribute_map = {
            '_class': 'class',
            'code': 'code',
            'user_activity': 'userActivity'
        }

        self.__class = _class
        self._code = code
        self._user_activity = user_activity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddMediaIntentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddMediaIntentResponse of this AddMediaIntentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self):
        """Gets the _class of this AddMediaIntentResponse.


        :return: The _class of this AddMediaIntentResponse.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this AddMediaIntentResponse.


        :param _class: The _class of this AddMediaIntentResponse.
        :type _class: str
        """
        allowed_values = ["AddMediaIntentResponse"]  # noqa: E501
        if _class not in allowed_values:
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def code(self):
        """Gets the code of this AddMediaIntentResponse.


        :return: The code of this AddMediaIntentResponse.
        :rtype: AddMediaIntentResponseCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AddMediaIntentResponse.


        :param code: The code of this AddMediaIntentResponse.
        :type code: AddMediaIntentResponseCode
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def user_activity(self):
        """Gets the user_activity of this AddMediaIntentResponse.


        :return: The user_activity of this AddMediaIntentResponse.
        :rtype: UserActivity
        """
        return self._user_activity

    @user_activity.setter
    def user_activity(self, user_activity):
        """Sets the user_activity of this AddMediaIntentResponse.


        :param user_activity: The user_activity of this AddMediaIntentResponse.
        :type user_activity: UserActivity
        """
        if user_activity is None:
            raise ValueError("Invalid value for `user_activity`, must not be `None`")

        self._user_activity = user_activity
