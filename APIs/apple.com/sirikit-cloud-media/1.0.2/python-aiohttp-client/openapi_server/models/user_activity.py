# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UserActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_type: str=None, persistent_identifier: str=None, title: str=None, user_info: object=None, version: str=None):
        """UserActivity - a model defined in OpenAPI

        :param activity_type: The activity_type of this UserActivity.
        :param persistent_identifier: The persistent_identifier of this UserActivity.
        :param title: The title of this UserActivity.
        :param user_info: The user_info of this UserActivity.
        :param version: The version of this UserActivity.
        """
        self.openapi_types = {
            'activity_type': str,
            'persistent_identifier': str,
            'title': str,
            'user_info': object,
            'version': str
        }

        self.attribute_map = {
            'activity_type': 'activityType',
            'persistent_identifier': 'persistentIdentifier',
            'title': 'title',
            'user_info': 'userInfo',
            'version': 'version'
        }

        self._activity_type = activity_type
        self._persistent_identifier = persistent_identifier
        self._title = title
        self._user_info = user_info
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserActivity of this UserActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_type(self):
        """Gets the activity_type of this UserActivity.


        :return: The activity_type of this UserActivity.
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this UserActivity.


        :param activity_type: The activity_type of this UserActivity.
        :type activity_type: str
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")
        if activity_type is not None and len(activity_type) > 250:
            raise ValueError("Invalid value for `activity_type`, length must be less than or equal to `250`")

        self._activity_type = activity_type

    @property
    def persistent_identifier(self):
        """Gets the persistent_identifier of this UserActivity.


        :return: The persistent_identifier of this UserActivity.
        :rtype: str
        """
        return self._persistent_identifier

    @persistent_identifier.setter
    def persistent_identifier(self, persistent_identifier):
        """Sets the persistent_identifier of this UserActivity.


        :param persistent_identifier: The persistent_identifier of this UserActivity.
        :type persistent_identifier: str
        """
        if persistent_identifier is not None and len(persistent_identifier) > 250:
            raise ValueError("Invalid value for `persistent_identifier`, length must be less than or equal to `250`")

        self._persistent_identifier = persistent_identifier

    @property
    def title(self):
        """Gets the title of this UserActivity.


        :return: The title of this UserActivity.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserActivity.


        :param title: The title of this UserActivity.
        :type title: str
        """
        if title is not None and len(title) > 250:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `250`")

        self._title = title

    @property
    def user_info(self):
        """Gets the user_info of this UserActivity.


        :return: The user_info of this UserActivity.
        :rtype: object
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this UserActivity.


        :param user_info: The user_info of this UserActivity.
        :type user_info: object
        """

        self._user_info = user_info

    @property
    def version(self):
        """Gets the version of this UserActivity.


        :return: The version of this UserActivity.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UserActivity.


        :param version: The version of this UserActivity.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and len(version) > 25:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `25`")
        if version is not None and not re.search(r'[0-9]+\.[0-9]+\.[0-9]+', version):
            raise ValueError("Invalid value for `version`, must be a follow pattern or equal to `/[0-9]+\.[0-9]+\.[0-9]+/`")

        self._version = version
