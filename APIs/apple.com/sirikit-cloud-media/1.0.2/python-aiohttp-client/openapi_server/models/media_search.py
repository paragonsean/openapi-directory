# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_components_range import DateComponentsRange
from openapi_server.models.media_item_type import MediaItemType
from openapi_server.models.media_reference import MediaReference
from openapi_server.models.media_sort_order import MediaSortOrder
from openapi_server import util


class MediaSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, album_name: str=None, artist_name: str=None, genre_names: List[str]=None, media_identifier: str=None, media_name: str=None, media_type: MediaItemType=None, mood_names: List[str]=None, reference: MediaReference=None, release_date: DateComponentsRange=None, sort_order: MediaSortOrder=None):
        """MediaSearch - a model defined in OpenAPI

        :param album_name: The album_name of this MediaSearch.
        :param artist_name: The artist_name of this MediaSearch.
        :param genre_names: The genre_names of this MediaSearch.
        :param media_identifier: The media_identifier of this MediaSearch.
        :param media_name: The media_name of this MediaSearch.
        :param media_type: The media_type of this MediaSearch.
        :param mood_names: The mood_names of this MediaSearch.
        :param reference: The reference of this MediaSearch.
        :param release_date: The release_date of this MediaSearch.
        :param sort_order: The sort_order of this MediaSearch.
        """
        self.openapi_types = {
            'album_name': str,
            'artist_name': str,
            'genre_names': List[str],
            'media_identifier': str,
            'media_name': str,
            'media_type': MediaItemType,
            'mood_names': List[str],
            'reference': MediaReference,
            'release_date': DateComponentsRange,
            'sort_order': MediaSortOrder
        }

        self.attribute_map = {
            'album_name': 'albumName',
            'artist_name': 'artistName',
            'genre_names': 'genreNames',
            'media_identifier': 'mediaIdentifier',
            'media_name': 'mediaName',
            'media_type': 'mediaType',
            'mood_names': 'moodNames',
            'reference': 'reference',
            'release_date': 'releaseDate',
            'sort_order': 'sortOrder'
        }

        self._album_name = album_name
        self._artist_name = artist_name
        self._genre_names = genre_names
        self._media_identifier = media_identifier
        self._media_name = media_name
        self._media_type = media_type
        self._mood_names = mood_names
        self._reference = reference
        self._release_date = release_date
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaSearch of this MediaSearch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def album_name(self):
        """Gets the album_name of this MediaSearch.


        :return: The album_name of this MediaSearch.
        :rtype: str
        """
        return self._album_name

    @album_name.setter
    def album_name(self, album_name):
        """Sets the album_name of this MediaSearch.


        :param album_name: The album_name of this MediaSearch.
        :type album_name: str
        """

        self._album_name = album_name

    @property
    def artist_name(self):
        """Gets the artist_name of this MediaSearch.


        :return: The artist_name of this MediaSearch.
        :rtype: str
        """
        return self._artist_name

    @artist_name.setter
    def artist_name(self, artist_name):
        """Sets the artist_name of this MediaSearch.


        :param artist_name: The artist_name of this MediaSearch.
        :type artist_name: str
        """

        self._artist_name = artist_name

    @property
    def genre_names(self):
        """Gets the genre_names of this MediaSearch.


        :return: The genre_names of this MediaSearch.
        :rtype: List[str]
        """
        return self._genre_names

    @genre_names.setter
    def genre_names(self, genre_names):
        """Sets the genre_names of this MediaSearch.


        :param genre_names: The genre_names of this MediaSearch.
        :type genre_names: List[str]
        """

        self._genre_names = genre_names

    @property
    def media_identifier(self):
        """Gets the media_identifier of this MediaSearch.


        :return: The media_identifier of this MediaSearch.
        :rtype: str
        """
        return self._media_identifier

    @media_identifier.setter
    def media_identifier(self, media_identifier):
        """Sets the media_identifier of this MediaSearch.


        :param media_identifier: The media_identifier of this MediaSearch.
        :type media_identifier: str
        """

        self._media_identifier = media_identifier

    @property
    def media_name(self):
        """Gets the media_name of this MediaSearch.


        :return: The media_name of this MediaSearch.
        :rtype: str
        """
        return self._media_name

    @media_name.setter
    def media_name(self, media_name):
        """Sets the media_name of this MediaSearch.


        :param media_name: The media_name of this MediaSearch.
        :type media_name: str
        """

        self._media_name = media_name

    @property
    def media_type(self):
        """Gets the media_type of this MediaSearch.


        :return: The media_type of this MediaSearch.
        :rtype: MediaItemType
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this MediaSearch.


        :param media_type: The media_type of this MediaSearch.
        :type media_type: MediaItemType
        """

        self._media_type = media_type

    @property
    def mood_names(self):
        """Gets the mood_names of this MediaSearch.


        :return: The mood_names of this MediaSearch.
        :rtype: List[str]
        """
        return self._mood_names

    @mood_names.setter
    def mood_names(self, mood_names):
        """Sets the mood_names of this MediaSearch.


        :param mood_names: The mood_names of this MediaSearch.
        :type mood_names: List[str]
        """

        self._mood_names = mood_names

    @property
    def reference(self):
        """Gets the reference of this MediaSearch.


        :return: The reference of this MediaSearch.
        :rtype: MediaReference
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this MediaSearch.


        :param reference: The reference of this MediaSearch.
        :type reference: MediaReference
        """

        self._reference = reference

    @property
    def release_date(self):
        """Gets the release_date of this MediaSearch.


        :return: The release_date of this MediaSearch.
        :rtype: DateComponentsRange
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this MediaSearch.


        :param release_date: The release_date of this MediaSearch.
        :type release_date: DateComponentsRange
        """

        self._release_date = release_date

    @property
    def sort_order(self):
        """Gets the sort_order of this MediaSearch.


        :return: The sort_order of this MediaSearch.
        :rtype: MediaSortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this MediaSearch.


        :param sort_order: The sort_order of this MediaSearch.
        :type sort_order: MediaSortOrder
        """

        self._sort_order = sort_order
