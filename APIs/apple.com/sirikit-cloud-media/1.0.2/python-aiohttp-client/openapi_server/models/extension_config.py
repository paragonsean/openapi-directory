# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extension_config_intent import ExtensionConfigIntent
from openapi_server.models.extension_config_media import ExtensionConfigMedia
import re
from openapi_server import util


class ExtensionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hdr: object=None, intent: ExtensionConfigIntent=None, media: ExtensionConfigMedia=None, url: str=None, version: str=None):
        """ExtensionConfig - a model defined in OpenAPI

        :param hdr: The hdr of this ExtensionConfig.
        :param intent: The intent of this ExtensionConfig.
        :param media: The media of this ExtensionConfig.
        :param url: The url of this ExtensionConfig.
        :param version: The version of this ExtensionConfig.
        """
        self.openapi_types = {
            'hdr': object,
            'intent': ExtensionConfigIntent,
            'media': ExtensionConfigMedia,
            'url': str,
            'version': str
        }

        self.attribute_map = {
            'hdr': 'hdr',
            'intent': 'intent',
            'media': 'media',
            'url': 'url',
            'version': 'version'
        }

        self._hdr = hdr
        self._intent = intent
        self._media = media
        self._url = url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtensionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtensionConfig of this ExtensionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hdr(self):
        """Gets the hdr of this ExtensionConfig.


        :return: The hdr of this ExtensionConfig.
        :rtype: object
        """
        return self._hdr

    @hdr.setter
    def hdr(self, hdr):
        """Sets the hdr of this ExtensionConfig.


        :param hdr: The hdr of this ExtensionConfig.
        :type hdr: object
        """

        self._hdr = hdr

    @property
    def intent(self):
        """Gets the intent of this ExtensionConfig.


        :return: The intent of this ExtensionConfig.
        :rtype: ExtensionConfigIntent
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this ExtensionConfig.


        :param intent: The intent of this ExtensionConfig.
        :type intent: ExtensionConfigIntent
        """
        if intent is None:
            raise ValueError("Invalid value for `intent`, must not be `None`")

        self._intent = intent

    @property
    def media(self):
        """Gets the media of this ExtensionConfig.


        :return: The media of this ExtensionConfig.
        :rtype: ExtensionConfigMedia
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this ExtensionConfig.


        :param media: The media of this ExtensionConfig.
        :type media: ExtensionConfigMedia
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def url(self):
        """Gets the url of this ExtensionConfig.


        :return: The url of this ExtensionConfig.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ExtensionConfig.


        :param url: The url of this ExtensionConfig.
        :type url: str
        """
        if url is not None and len(url) > 2000:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2000`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url

    @property
    def version(self):
        """Gets the version of this ExtensionConfig.


        :return: The version of this ExtensionConfig.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ExtensionConfig.


        :param version: The version of this ExtensionConfig.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and not re.search(r'([0-9]+[.]){2}[0-9]+', version):
            raise ValueError("Invalid value for `version`, must be a follow pattern or equal to `/([0-9]+[.]){2}[0-9]+/`")

        self._version = version
