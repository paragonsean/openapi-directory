# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.constraints import Constraints
from openapi_server.models.player_context import PlayerContext
from openapi_server.models.queue_activity_report_event import QueueActivityReportEvent
from openapi_server.models.user_activity import UserActivity
import re
from openapi_server import util


class UpdateActivityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constraints: Constraints=None, now_playing: PlayerContext=None, previously_playing: PlayerContext=None, report: QueueActivityReportEvent=None, timestamp: datetime=None, user_activity: UserActivity=None, version: str=None):
        """UpdateActivityRequest - a model defined in OpenAPI

        :param constraints: The constraints of this UpdateActivityRequest.
        :param now_playing: The now_playing of this UpdateActivityRequest.
        :param previously_playing: The previously_playing of this UpdateActivityRequest.
        :param report: The report of this UpdateActivityRequest.
        :param timestamp: The timestamp of this UpdateActivityRequest.
        :param user_activity: The user_activity of this UpdateActivityRequest.
        :param version: The version of this UpdateActivityRequest.
        """
        self.openapi_types = {
            'constraints': Constraints,
            'now_playing': PlayerContext,
            'previously_playing': PlayerContext,
            'report': QueueActivityReportEvent,
            'timestamp': datetime,
            'user_activity': UserActivity,
            'version': str
        }

        self.attribute_map = {
            'constraints': 'constraints',
            'now_playing': 'nowPlaying',
            'previously_playing': 'previouslyPlaying',
            'report': 'report',
            'timestamp': 'timestamp',
            'user_activity': 'userActivity',
            'version': 'version'
        }

        self._constraints = constraints
        self._now_playing = now_playing
        self._previously_playing = previously_playing
        self._report = report
        self._timestamp = timestamp
        self._user_activity = user_activity
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateActivityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateActivityRequest of this UpdateActivityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constraints(self):
        """Gets the constraints of this UpdateActivityRequest.


        :return: The constraints of this UpdateActivityRequest.
        :rtype: Constraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this UpdateActivityRequest.


        :param constraints: The constraints of this UpdateActivityRequest.
        :type constraints: Constraints
        """

        self._constraints = constraints

    @property
    def now_playing(self):
        """Gets the now_playing of this UpdateActivityRequest.


        :return: The now_playing of this UpdateActivityRequest.
        :rtype: PlayerContext
        """
        return self._now_playing

    @now_playing.setter
    def now_playing(self, now_playing):
        """Sets the now_playing of this UpdateActivityRequest.


        :param now_playing: The now_playing of this UpdateActivityRequest.
        :type now_playing: PlayerContext
        """

        self._now_playing = now_playing

    @property
    def previously_playing(self):
        """Gets the previously_playing of this UpdateActivityRequest.


        :return: The previously_playing of this UpdateActivityRequest.
        :rtype: PlayerContext
        """
        return self._previously_playing

    @previously_playing.setter
    def previously_playing(self, previously_playing):
        """Sets the previously_playing of this UpdateActivityRequest.


        :param previously_playing: The previously_playing of this UpdateActivityRequest.
        :type previously_playing: PlayerContext
        """

        self._previously_playing = previously_playing

    @property
    def report(self):
        """Gets the report of this UpdateActivityRequest.


        :return: The report of this UpdateActivityRequest.
        :rtype: QueueActivityReportEvent
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this UpdateActivityRequest.


        :param report: The report of this UpdateActivityRequest.
        :type report: QueueActivityReportEvent
        """
        if report is None:
            raise ValueError("Invalid value for `report`, must not be `None`")

        self._report = report

    @property
    def timestamp(self):
        """Gets the timestamp of this UpdateActivityRequest.


        :return: The timestamp of this UpdateActivityRequest.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this UpdateActivityRequest.


        :param timestamp: The timestamp of this UpdateActivityRequest.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def user_activity(self):
        """Gets the user_activity of this UpdateActivityRequest.


        :return: The user_activity of this UpdateActivityRequest.
        :rtype: UserActivity
        """
        return self._user_activity

    @user_activity.setter
    def user_activity(self, user_activity):
        """Sets the user_activity of this UpdateActivityRequest.


        :param user_activity: The user_activity of this UpdateActivityRequest.
        :type user_activity: UserActivity
        """
        if user_activity is None:
            raise ValueError("Invalid value for `user_activity`, must not be `None`")

        self._user_activity = user_activity

    @property
    def version(self):
        """Gets the version of this UpdateActivityRequest.


        :return: The version of this UpdateActivityRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpdateActivityRequest.


        :param version: The version of this UpdateActivityRequest.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and not re.search(r'[0-9]+\.[0-9]+\.[0-9]+', version):
            raise ValueError("Invalid value for `version`, must be a follow pattern or equal to `/[0-9]+\.[0-9]+\.[0-9]+/`")

        self._version = version
