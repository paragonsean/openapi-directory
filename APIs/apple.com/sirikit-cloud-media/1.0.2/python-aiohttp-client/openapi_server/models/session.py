# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.constraints import Constraints
from openapi_server.models.player_context import PlayerContext
import re
from openapi_server import util


class Session(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constraints: Constraints=None, deadline: datetime=None, identifier: str=None, player_context: PlayerContext=None, requested: datetime=None, version: str=None):
        """Session - a model defined in OpenAPI

        :param constraints: The constraints of this Session.
        :param deadline: The deadline of this Session.
        :param identifier: The identifier of this Session.
        :param player_context: The player_context of this Session.
        :param requested: The requested of this Session.
        :param version: The version of this Session.
        """
        self.openapi_types = {
            'constraints': Constraints,
            'deadline': datetime,
            'identifier': str,
            'player_context': PlayerContext,
            'requested': datetime,
            'version': str
        }

        self.attribute_map = {
            'constraints': 'constraints',
            'deadline': 'deadline',
            'identifier': 'identifier',
            'player_context': 'playerContext',
            'requested': 'requested',
            'version': 'version'
        }

        self._constraints = constraints
        self._deadline = deadline
        self._identifier = identifier
        self._player_context = player_context
        self._requested = requested
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Session of this Session.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constraints(self):
        """Gets the constraints of this Session.


        :return: The constraints of this Session.
        :rtype: Constraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this Session.


        :param constraints: The constraints of this Session.
        :type constraints: Constraints
        """
        if constraints is None:
            raise ValueError("Invalid value for `constraints`, must not be `None`")

        self._constraints = constraints

    @property
    def deadline(self):
        """Gets the deadline of this Session.


        :return: The deadline of this Session.
        :rtype: datetime
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this Session.


        :param deadline: The deadline of this Session.
        :type deadline: datetime
        """
        if deadline is None:
            raise ValueError("Invalid value for `deadline`, must not be `None`")

        self._deadline = deadline

    @property
    def identifier(self):
        """Gets the identifier of this Session.


        :return: The identifier of this Session.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Session.


        :param identifier: The identifier of this Session.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and len(identifier) > 128:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `128`")
        if identifier is not None and len(identifier) < 1:
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `1`")

        self._identifier = identifier

    @property
    def player_context(self):
        """Gets the player_context of this Session.


        :return: The player_context of this Session.
        :rtype: PlayerContext
        """
        return self._player_context

    @player_context.setter
    def player_context(self, player_context):
        """Sets the player_context of this Session.


        :param player_context: The player_context of this Session.
        :type player_context: PlayerContext
        """

        self._player_context = player_context

    @property
    def requested(self):
        """Gets the requested of this Session.


        :return: The requested of this Session.
        :rtype: datetime
        """
        return self._requested

    @requested.setter
    def requested(self, requested):
        """Sets the requested of this Session.


        :param requested: The requested of this Session.
        :type requested: datetime
        """
        if requested is None:
            raise ValueError("Invalid value for `requested`, must not be `None`")

        self._requested = requested

    @property
    def version(self):
        """Gets the version of this Session.


        :return: The version of this Session.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Session.


        :param version: The version of this Session.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and not re.search(r'[0-9]+\.[0-9]+\.[0-9]+', version):
            raise ValueError("Invalid value for `version`, must be a follow pattern or equal to `/[0-9]+\.[0-9]+\.[0-9]+/`")

        self._version = version
