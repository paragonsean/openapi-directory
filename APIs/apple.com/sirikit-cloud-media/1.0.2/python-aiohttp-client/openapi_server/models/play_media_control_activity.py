# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlayMediaControlActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, play_elapsed: int=None, play_elapsed_interval: int=None, play_paused: int=5):
        """PlayMediaControlActivity - a model defined in OpenAPI

        :param play_elapsed: The play_elapsed of this PlayMediaControlActivity.
        :param play_elapsed_interval: The play_elapsed_interval of this PlayMediaControlActivity.
        :param play_paused: The play_paused of this PlayMediaControlActivity.
        """
        self.openapi_types = {
            'play_elapsed': int,
            'play_elapsed_interval': int,
            'play_paused': int
        }

        self.attribute_map = {
            'play_elapsed': 'playElapsed',
            'play_elapsed_interval': 'playElapsedInterval',
            'play_paused': 'playPaused'
        }

        self._play_elapsed = play_elapsed
        self._play_elapsed_interval = play_elapsed_interval
        self._play_paused = play_paused

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayMediaControlActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayMediaControlActivity of this PlayMediaControlActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def play_elapsed(self):
        """Gets the play_elapsed of this PlayMediaControlActivity.


        :return: The play_elapsed of this PlayMediaControlActivity.
        :rtype: int
        """
        return self._play_elapsed

    @play_elapsed.setter
    def play_elapsed(self, play_elapsed):
        """Sets the play_elapsed of this PlayMediaControlActivity.


        :param play_elapsed: The play_elapsed of this PlayMediaControlActivity.
        :type play_elapsed: int
        """
        if play_elapsed is not None and play_elapsed < 5:
            raise ValueError("Invalid value for `play_elapsed`, must be a value greater than or equal to `5`")

        self._play_elapsed = play_elapsed

    @property
    def play_elapsed_interval(self):
        """Gets the play_elapsed_interval of this PlayMediaControlActivity.


        :return: The play_elapsed_interval of this PlayMediaControlActivity.
        :rtype: int
        """
        return self._play_elapsed_interval

    @play_elapsed_interval.setter
    def play_elapsed_interval(self, play_elapsed_interval):
        """Sets the play_elapsed_interval of this PlayMediaControlActivity.


        :param play_elapsed_interval: The play_elapsed_interval of this PlayMediaControlActivity.
        :type play_elapsed_interval: int
        """
        if play_elapsed_interval is not None and play_elapsed_interval < 5:
            raise ValueError("Invalid value for `play_elapsed_interval`, must be a value greater than or equal to `5`")

        self._play_elapsed_interval = play_elapsed_interval

    @property
    def play_paused(self):
        """Gets the play_paused of this PlayMediaControlActivity.


        :return: The play_paused of this PlayMediaControlActivity.
        :rtype: int
        """
        return self._play_paused

    @play_paused.setter
    def play_paused(self, play_paused):
        """Sets the play_paused of this PlayMediaControlActivity.


        :param play_paused: The play_paused of this PlayMediaControlActivity.
        :type play_paused: int
        """
        if play_paused is not None and play_paused > 60:
            raise ValueError("Invalid value for `play_paused`, must be a value less than or equal to `60`")
        if play_paused is not None and play_paused < 5:
            raise ValueError("Invalid value for `play_paused`, must be a value greater than or equal to `5`")

        self._play_paused = play_paused
