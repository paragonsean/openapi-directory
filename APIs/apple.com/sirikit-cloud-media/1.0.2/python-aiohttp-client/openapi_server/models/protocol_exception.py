# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protocol_exception_reason import ProtocolExceptionReason
from openapi_server import util


class ProtocolException(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, method_index: int=None, method_name: str=None, reason: ProtocolExceptionReason=None, retry_with_delay: float=-1, trace: List[str]=None):
        """ProtocolException - a model defined in OpenAPI

        :param code: The code of this ProtocolException.
        :param method_index: The method_index of this ProtocolException.
        :param method_name: The method_name of this ProtocolException.
        :param reason: The reason of this ProtocolException.
        :param retry_with_delay: The retry_with_delay of this ProtocolException.
        :param trace: The trace of this ProtocolException.
        """
        self.openapi_types = {
            'code': int,
            'method_index': int,
            'method_name': str,
            'reason': ProtocolExceptionReason,
            'retry_with_delay': float,
            'trace': List[str]
        }

        self.attribute_map = {
            'code': 'code',
            'method_index': 'methodIndex',
            'method_name': 'methodName',
            'reason': 'reason',
            'retry_with_delay': 'retryWithDelay',
            'trace': 'trace'
        }

        self._code = code
        self._method_index = method_index
        self._method_name = method_name
        self._reason = reason
        self._retry_with_delay = retry_with_delay
        self._trace = trace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtocolException':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtocolException of this ProtocolException.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ProtocolException.


        :return: The code of this ProtocolException.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProtocolException.


        :param code: The code of this ProtocolException.
        :type code: int
        """

        self._code = code

    @property
    def method_index(self):
        """Gets the method_index of this ProtocolException.


        :return: The method_index of this ProtocolException.
        :rtype: int
        """
        return self._method_index

    @method_index.setter
    def method_index(self, method_index):
        """Sets the method_index of this ProtocolException.


        :param method_index: The method_index of this ProtocolException.
        :type method_index: int
        """

        self._method_index = method_index

    @property
    def method_name(self):
        """Gets the method_name of this ProtocolException.


        :return: The method_name of this ProtocolException.
        :rtype: str
        """
        return self._method_name

    @method_name.setter
    def method_name(self, method_name):
        """Sets the method_name of this ProtocolException.


        :param method_name: The method_name of this ProtocolException.
        :type method_name: str
        """

        self._method_name = method_name

    @property
    def reason(self):
        """Gets the reason of this ProtocolException.


        :return: The reason of this ProtocolException.
        :rtype: ProtocolExceptionReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ProtocolException.


        :param reason: The reason of this ProtocolException.
        :type reason: ProtocolExceptionReason
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def retry_with_delay(self):
        """Gets the retry_with_delay of this ProtocolException.


        :return: The retry_with_delay of this ProtocolException.
        :rtype: float
        """
        return self._retry_with_delay

    @retry_with_delay.setter
    def retry_with_delay(self, retry_with_delay):
        """Sets the retry_with_delay of this ProtocolException.


        :param retry_with_delay: The retry_with_delay of this ProtocolException.
        :type retry_with_delay: float
        """

        self._retry_with_delay = retry_with_delay

    @property
    def trace(self):
        """Gets the trace of this ProtocolException.


        :return: The trace of this ProtocolException.
        :rtype: List[str]
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this ProtocolException.


        :param trace: The trace of this ProtocolException.
        :type trace: List[str]
        """
        if trace is not None and len(trace) > 64:
            raise ValueError("Invalid value for `trace`, number of items must be less than or equal to `64`")

        self._trace = trace
