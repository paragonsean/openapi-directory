# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_attributes_artwork import ContentAttributesArtwork
from openapi_server import util


class ContentAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, album_name: str=None, artist_name: str=None, artwork: ContentAttributesArtwork=None, composer_name: str=None, duration_in_millis: int=None, genre_names: List[str]=None, name: str=None, track_number: int=None):
        """ContentAttributes - a model defined in OpenAPI

        :param album_name: The album_name of this ContentAttributes.
        :param artist_name: The artist_name of this ContentAttributes.
        :param artwork: The artwork of this ContentAttributes.
        :param composer_name: The composer_name of this ContentAttributes.
        :param duration_in_millis: The duration_in_millis of this ContentAttributes.
        :param genre_names: The genre_names of this ContentAttributes.
        :param name: The name of this ContentAttributes.
        :param track_number: The track_number of this ContentAttributes.
        """
        self.openapi_types = {
            'album_name': str,
            'artist_name': str,
            'artwork': ContentAttributesArtwork,
            'composer_name': str,
            'duration_in_millis': int,
            'genre_names': List[str],
            'name': str,
            'track_number': int
        }

        self.attribute_map = {
            'album_name': 'albumName',
            'artist_name': 'artistName',
            'artwork': 'artwork',
            'composer_name': 'composerName',
            'duration_in_millis': 'durationInMillis',
            'genre_names': 'genreNames',
            'name': 'name',
            'track_number': 'trackNumber'
        }

        self._album_name = album_name
        self._artist_name = artist_name
        self._artwork = artwork
        self._composer_name = composer_name
        self._duration_in_millis = duration_in_millis
        self._genre_names = genre_names
        self._name = name
        self._track_number = track_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentAttributes of this ContentAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def album_name(self):
        """Gets the album_name of this ContentAttributes.


        :return: The album_name of this ContentAttributes.
        :rtype: str
        """
        return self._album_name

    @album_name.setter
    def album_name(self, album_name):
        """Sets the album_name of this ContentAttributes.


        :param album_name: The album_name of this ContentAttributes.
        :type album_name: str
        """
        if album_name is not None and len(album_name) > 250:
            raise ValueError("Invalid value for `album_name`, length must be less than or equal to `250`")

        self._album_name = album_name

    @property
    def artist_name(self):
        """Gets the artist_name of this ContentAttributes.


        :return: The artist_name of this ContentAttributes.
        :rtype: str
        """
        return self._artist_name

    @artist_name.setter
    def artist_name(self, artist_name):
        """Sets the artist_name of this ContentAttributes.


        :param artist_name: The artist_name of this ContentAttributes.
        :type artist_name: str
        """
        if artist_name is not None and len(artist_name) > 1000:
            raise ValueError("Invalid value for `artist_name`, length must be less than or equal to `1000`")

        self._artist_name = artist_name

    @property
    def artwork(self):
        """Gets the artwork of this ContentAttributes.


        :return: The artwork of this ContentAttributes.
        :rtype: ContentAttributesArtwork
        """
        return self._artwork

    @artwork.setter
    def artwork(self, artwork):
        """Sets the artwork of this ContentAttributes.


        :param artwork: The artwork of this ContentAttributes.
        :type artwork: ContentAttributesArtwork
        """

        self._artwork = artwork

    @property
    def composer_name(self):
        """Gets the composer_name of this ContentAttributes.


        :return: The composer_name of this ContentAttributes.
        :rtype: str
        """
        return self._composer_name

    @composer_name.setter
    def composer_name(self, composer_name):
        """Sets the composer_name of this ContentAttributes.


        :param composer_name: The composer_name of this ContentAttributes.
        :type composer_name: str
        """
        if composer_name is not None and len(composer_name) > 250:
            raise ValueError("Invalid value for `composer_name`, length must be less than or equal to `250`")

        self._composer_name = composer_name

    @property
    def duration_in_millis(self):
        """Gets the duration_in_millis of this ContentAttributes.


        :return: The duration_in_millis of this ContentAttributes.
        :rtype: int
        """
        return self._duration_in_millis

    @duration_in_millis.setter
    def duration_in_millis(self, duration_in_millis):
        """Sets the duration_in_millis of this ContentAttributes.


        :param duration_in_millis: The duration_in_millis of this ContentAttributes.
        :type duration_in_millis: int
        """

        self._duration_in_millis = duration_in_millis

    @property
    def genre_names(self):
        """Gets the genre_names of this ContentAttributes.


        :return: The genre_names of this ContentAttributes.
        :rtype: List[str]
        """
        return self._genre_names

    @genre_names.setter
    def genre_names(self, genre_names):
        """Sets the genre_names of this ContentAttributes.


        :param genre_names: The genre_names of this ContentAttributes.
        :type genre_names: List[str]
        """
        if genre_names is not None and len(genre_names) > 30:
            raise ValueError("Invalid value for `genre_names`, number of items must be less than or equal to `30`")

        self._genre_names = genre_names

    @property
    def name(self):
        """Gets the name of this ContentAttributes.


        :return: The name of this ContentAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentAttributes.


        :param name: The name of this ContentAttributes.
        :type name: str
        """
        if name is not None and len(name) > 250:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `250`")

        self._name = name

    @property
    def track_number(self):
        """Gets the track_number of this ContentAttributes.


        :return: The track_number of this ContentAttributes.
        :rtype: int
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """Sets the track_number of this ContentAttributes.


        :param track_number: The track_number of this ContentAttributes.
        :type track_number: int
        """

        self._track_number = track_number
