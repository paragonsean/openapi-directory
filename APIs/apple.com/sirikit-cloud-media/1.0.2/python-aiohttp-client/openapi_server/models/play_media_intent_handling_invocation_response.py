# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.execution_metrics import ExecutionMetrics
from openapi_server.models.play_media_intent_handling_handle_invocation_response import PlayMediaIntentHandlingHandleInvocationResponse
from openapi_server.models.play_media_intent_handling_resolve_media_items_invocation_response import PlayMediaIntentHandlingResolveMediaItemsInvocationResponse
from openapi_server.models.play_media_intent_handling_resolve_play_shuffled_invocation_response import PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse
from openapi_server.models.play_media_intent_handling_resolve_playback_queue_location_invocation_response import PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse
from openapi_server.models.play_media_intent_handling_resolve_playback_repeat_mode_invocation_response import PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse
from openapi_server.models.play_media_intent_handling_resolve_resume_playback_invocation_response import PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse
from openapi_server.models.protocol_exception import ProtocolException
from openapi_server.models.protocol_exception_invocation_response import ProtocolExceptionInvocationResponse
from openapi_server import util


class PlayMediaIntentHandlingInvocationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, result: object=None, debug: str=None, metrics: ExecutionMetrics=None, exception: ProtocolException=None):
        """PlayMediaIntentHandlingInvocationResponse - a model defined in OpenAPI

        :param method: The method of this PlayMediaIntentHandlingInvocationResponse.
        :param result: The result of this PlayMediaIntentHandlingInvocationResponse.
        :param debug: The debug of this PlayMediaIntentHandlingInvocationResponse.
        :param metrics: The metrics of this PlayMediaIntentHandlingInvocationResponse.
        :param exception: The exception of this PlayMediaIntentHandlingInvocationResponse.
        """
        self.openapi_types = {
            'method': str,
            'result': object,
            'debug': str,
            'metrics': ExecutionMetrics,
            'exception': ProtocolException
        }

        self.attribute_map = {
            'method': 'method',
            'result': 'result',
            'debug': 'debug',
            'metrics': 'metrics',
            'exception': 'exception'
        }

        self._method = method
        self._result = result
        self._debug = debug
        self._metrics = metrics
        self._exception = exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayMediaIntentHandlingInvocationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayMediaIntentHandlingInvocationResponse of this PlayMediaIntentHandlingInvocationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this PlayMediaIntentHandlingInvocationResponse.


        :return: The method of this PlayMediaIntentHandlingInvocationResponse.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PlayMediaIntentHandlingInvocationResponse.


        :param method: The method of this PlayMediaIntentHandlingInvocationResponse.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def result(self):
        """Gets the result of this PlayMediaIntentHandlingInvocationResponse.


        :return: The result of this PlayMediaIntentHandlingInvocationResponse.
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PlayMediaIntentHandlingInvocationResponse.


        :param result: The result of this PlayMediaIntentHandlingInvocationResponse.
        :type result: object
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result

    @property
    def debug(self):
        """Gets the debug of this PlayMediaIntentHandlingInvocationResponse.


        :return: The debug of this PlayMediaIntentHandlingInvocationResponse.
        :rtype: str
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this PlayMediaIntentHandlingInvocationResponse.


        :param debug: The debug of this PlayMediaIntentHandlingInvocationResponse.
        :type debug: str
        """
        if debug is not None and len(debug) > 2000:
            raise ValueError("Invalid value for `debug`, length must be less than or equal to `2000`")

        self._debug = debug

    @property
    def metrics(self):
        """Gets the metrics of this PlayMediaIntentHandlingInvocationResponse.


        :return: The metrics of this PlayMediaIntentHandlingInvocationResponse.
        :rtype: ExecutionMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this PlayMediaIntentHandlingInvocationResponse.


        :param metrics: The metrics of this PlayMediaIntentHandlingInvocationResponse.
        :type metrics: ExecutionMetrics
        """

        self._metrics = metrics

    @property
    def exception(self):
        """Gets the exception of this PlayMediaIntentHandlingInvocationResponse.


        :return: The exception of this PlayMediaIntentHandlingInvocationResponse.
        :rtype: ProtocolException
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this PlayMediaIntentHandlingInvocationResponse.


        :param exception: The exception of this PlayMediaIntentHandlingInvocationResponse.
        :type exception: ProtocolException
        """
        if exception is None:
            raise ValueError("Invalid value for `exception`, must not be `None`")

        self._exception = exception
