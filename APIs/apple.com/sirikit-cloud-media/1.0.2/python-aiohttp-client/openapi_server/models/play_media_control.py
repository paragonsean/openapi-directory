# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.play_media_control_activity import PlayMediaControlActivity
from openapi_server.models.play_media_control_command_set import PlayMediaControlCommandSet
from openapi_server.models.play_media_control_scheme import PlayMediaControlScheme
from openapi_server import util


class PlayMediaControl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity: PlayMediaControlActivity=None, commands: PlayMediaControlCommandSet=None, scheme: PlayMediaControlScheme=None):
        """PlayMediaControl - a model defined in OpenAPI

        :param activity: The activity of this PlayMediaControl.
        :param commands: The commands of this PlayMediaControl.
        :param scheme: The scheme of this PlayMediaControl.
        """
        self.openapi_types = {
            'activity': PlayMediaControlActivity,
            'commands': PlayMediaControlCommandSet,
            'scheme': PlayMediaControlScheme
        }

        self.attribute_map = {
            'activity': 'activity',
            'commands': 'commands',
            'scheme': 'scheme'
        }

        self._activity = activity
        self._commands = commands
        self._scheme = scheme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayMediaControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayMediaControl of this PlayMediaControl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity(self):
        """Gets the activity of this PlayMediaControl.


        :return: The activity of this PlayMediaControl.
        :rtype: PlayMediaControlActivity
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this PlayMediaControl.


        :param activity: The activity of this PlayMediaControl.
        :type activity: PlayMediaControlActivity
        """

        self._activity = activity

    @property
    def commands(self):
        """Gets the commands of this PlayMediaControl.


        :return: The commands of this PlayMediaControl.
        :rtype: PlayMediaControlCommandSet
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this PlayMediaControl.


        :param commands: The commands of this PlayMediaControl.
        :type commands: PlayMediaControlCommandSet
        """

        self._commands = commands

    @property
    def scheme(self):
        """Gets the scheme of this PlayMediaControl.


        :return: The scheme of this PlayMediaControl.
        :rtype: PlayMediaControlScheme
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this PlayMediaControl.


        :param scheme: The scheme of this PlayMediaControl.
        :type scheme: PlayMediaControlScheme
        """
        if scheme is None:
            raise ValueError("Invalid value for `scheme`, must not be `None`")

        self._scheme = scheme
