# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_attributes import ContentAttributes
from openapi_server import util


class Content(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: ContentAttributes=None, control: str='default', identifier: str=None, is_live: bool=None, play_index: int=None, url: str=None):
        """Content - a model defined in OpenAPI

        :param attributes: The attributes of this Content.
        :param control: The control of this Content.
        :param identifier: The identifier of this Content.
        :param is_live: The is_live of this Content.
        :param play_index: The play_index of this Content.
        :param url: The url of this Content.
        """
        self.openapi_types = {
            'attributes': ContentAttributes,
            'control': str,
            'identifier': str,
            'is_live': bool,
            'play_index': int,
            'url': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'control': 'control',
            'identifier': 'identifier',
            'is_live': 'isLive',
            'play_index': 'playIndex',
            'url': 'url'
        }

        self._attributes = attributes
        self._control = control
        self._identifier = identifier
        self._is_live = is_live
        self._play_index = play_index
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Content':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Content of this Content.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Content.


        :return: The attributes of this Content.
        :rtype: ContentAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Content.


        :param attributes: The attributes of this Content.
        :type attributes: ContentAttributes
        """

        self._attributes = attributes

    @property
    def control(self):
        """Gets the control of this Content.


        :return: The control of this Content.
        :rtype: str
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this Content.


        :param control: The control of this Content.
        :type control: str
        """

        self._control = control

    @property
    def identifier(self):
        """Gets the identifier of this Content.


        :return: The identifier of this Content.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Content.


        :param identifier: The identifier of this Content.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and len(identifier) > 1000:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `1000`")
        if identifier is not None and len(identifier) < 1:
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `1`")

        self._identifier = identifier

    @property
    def is_live(self):
        """Gets the is_live of this Content.


        :return: The is_live of this Content.
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live):
        """Sets the is_live of this Content.


        :param is_live: The is_live of this Content.
        :type is_live: bool
        """

        self._is_live = is_live

    @property
    def play_index(self):
        """Gets the play_index of this Content.


        :return: The play_index of this Content.
        :rtype: int
        """
        return self._play_index

    @play_index.setter
    def play_index(self, play_index):
        """Sets the play_index of this Content.


        :param play_index: The play_index of this Content.
        :type play_index: int
        """

        self._play_index = play_index

    @property
    def url(self):
        """Gets the url of this Content.


        :return: The url of this Content.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Content.


        :param url: The url of this Content.
        :type url: str
        """
        if url is not None and len(url) > 2000:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2000`")

        self._url = url
