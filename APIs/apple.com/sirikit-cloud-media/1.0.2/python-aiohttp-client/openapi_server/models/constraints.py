# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Constraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_explicit_content: bool=True, maximum_queue_segment_item_count: int=1000, update_user_taste_profile: bool=True):
        """Constraints - a model defined in OpenAPI

        :param allow_explicit_content: The allow_explicit_content of this Constraints.
        :param maximum_queue_segment_item_count: The maximum_queue_segment_item_count of this Constraints.
        :param update_user_taste_profile: The update_user_taste_profile of this Constraints.
        """
        self.openapi_types = {
            'allow_explicit_content': bool,
            'maximum_queue_segment_item_count': int,
            'update_user_taste_profile': bool
        }

        self.attribute_map = {
            'allow_explicit_content': 'allowExplicitContent',
            'maximum_queue_segment_item_count': 'maximumQueueSegmentItemCount',
            'update_user_taste_profile': 'updateUserTasteProfile'
        }

        self._allow_explicit_content = allow_explicit_content
        self._maximum_queue_segment_item_count = maximum_queue_segment_item_count
        self._update_user_taste_profile = update_user_taste_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Constraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Constraints of this Constraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_explicit_content(self):
        """Gets the allow_explicit_content of this Constraints.


        :return: The allow_explicit_content of this Constraints.
        :rtype: bool
        """
        return self._allow_explicit_content

    @allow_explicit_content.setter
    def allow_explicit_content(self, allow_explicit_content):
        """Sets the allow_explicit_content of this Constraints.


        :param allow_explicit_content: The allow_explicit_content of this Constraints.
        :type allow_explicit_content: bool
        """

        self._allow_explicit_content = allow_explicit_content

    @property
    def maximum_queue_segment_item_count(self):
        """Gets the maximum_queue_segment_item_count of this Constraints.


        :return: The maximum_queue_segment_item_count of this Constraints.
        :rtype: int
        """
        return self._maximum_queue_segment_item_count

    @maximum_queue_segment_item_count.setter
    def maximum_queue_segment_item_count(self, maximum_queue_segment_item_count):
        """Sets the maximum_queue_segment_item_count of this Constraints.


        :param maximum_queue_segment_item_count: The maximum_queue_segment_item_count of this Constraints.
        :type maximum_queue_segment_item_count: int
        """
        if maximum_queue_segment_item_count is not None and maximum_queue_segment_item_count > 1000:
            raise ValueError("Invalid value for `maximum_queue_segment_item_count`, must be a value less than or equal to `1000`")
        if maximum_queue_segment_item_count is not None and maximum_queue_segment_item_count < 50:
            raise ValueError("Invalid value for `maximum_queue_segment_item_count`, must be a value greater than or equal to `50`")

        self._maximum_queue_segment_item_count = maximum_queue_segment_item_count

    @property
    def update_user_taste_profile(self):
        """Gets the update_user_taste_profile of this Constraints.


        :return: The update_user_taste_profile of this Constraints.
        :rtype: bool
        """
        return self._update_user_taste_profile

    @update_user_taste_profile.setter
    def update_user_taste_profile(self, update_user_taste_profile):
        """Sets the update_user_taste_profile of this Constraints.


        :param update_user_taste_profile: The update_user_taste_profile of this Constraints.
        :type update_user_taste_profile: bool
        """

        self._update_user_taste_profile = update_user_taste_profile
