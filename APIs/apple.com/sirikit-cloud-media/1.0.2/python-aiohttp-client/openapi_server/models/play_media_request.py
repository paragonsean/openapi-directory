# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.constraints import Constraints
from openapi_server.models.user_activity import UserActivity
import re
from openapi_server import util


class PlayMediaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constraints: Constraints=None, user_activity: UserActivity=None, version: str=None):
        """PlayMediaRequest - a model defined in OpenAPI

        :param constraints: The constraints of this PlayMediaRequest.
        :param user_activity: The user_activity of this PlayMediaRequest.
        :param version: The version of this PlayMediaRequest.
        """
        self.openapi_types = {
            'constraints': Constraints,
            'user_activity': UserActivity,
            'version': str
        }

        self.attribute_map = {
            'constraints': 'constraints',
            'user_activity': 'userActivity',
            'version': 'version'
        }

        self._constraints = constraints
        self._user_activity = user_activity
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayMediaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayMediaRequest of this PlayMediaRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constraints(self):
        """Gets the constraints of this PlayMediaRequest.


        :return: The constraints of this PlayMediaRequest.
        :rtype: Constraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this PlayMediaRequest.


        :param constraints: The constraints of this PlayMediaRequest.
        :type constraints: Constraints
        """
        if constraints is None:
            raise ValueError("Invalid value for `constraints`, must not be `None`")

        self._constraints = constraints

    @property
    def user_activity(self):
        """Gets the user_activity of this PlayMediaRequest.


        :return: The user_activity of this PlayMediaRequest.
        :rtype: UserActivity
        """
        return self._user_activity

    @user_activity.setter
    def user_activity(self, user_activity):
        """Sets the user_activity of this PlayMediaRequest.


        :param user_activity: The user_activity of this PlayMediaRequest.
        :type user_activity: UserActivity
        """
        if user_activity is None:
            raise ValueError("Invalid value for `user_activity`, must not be `None`")

        self._user_activity = user_activity

    @property
    def version(self):
        """Gets the version of this PlayMediaRequest.


        :return: The version of this PlayMediaRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PlayMediaRequest.


        :param version: The version of this PlayMediaRequest.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and not re.search(r'[0-9]+\.[0-9]+\.[0-9]+', version):
            raise ValueError("Invalid value for `version`, must be a follow pattern or equal to `/[0-9]+\.[0-9]+\.[0-9]+/`")

        self._version = version
