# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.intent import Intent
from openapi_server.models.media_affinity_type import MediaAffinityType
from openapi_server.models.media_item import MediaItem
from openapi_server.models.media_search import MediaSearch
from openapi_server import util


class UpdateMediaAffinityIntent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affinity_type: MediaAffinityType=None, _class: str=None, media_items: List[MediaItem]=None, media_search: MediaSearch=None, identifier: str=None):
        """UpdateMediaAffinityIntent - a model defined in OpenAPI

        :param affinity_type: The affinity_type of this UpdateMediaAffinityIntent.
        :param _class: The _class of this UpdateMediaAffinityIntent.
        :param media_items: The media_items of this UpdateMediaAffinityIntent.
        :param media_search: The media_search of this UpdateMediaAffinityIntent.
        :param identifier: The identifier of this UpdateMediaAffinityIntent.
        """
        self.openapi_types = {
            'affinity_type': MediaAffinityType,
            '_class': str,
            'media_items': List[MediaItem],
            'media_search': MediaSearch,
            'identifier': str
        }

        self.attribute_map = {
            'affinity_type': 'affinityType',
            '_class': 'class',
            'media_items': 'mediaItems',
            'media_search': 'mediaSearch',
            'identifier': 'identifier'
        }

        self._affinity_type = affinity_type
        self.__class = _class
        self._media_items = media_items
        self._media_search = media_search
        self._identifier = identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMediaAffinityIntent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMediaAffinityIntent of this UpdateMediaAffinityIntent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affinity_type(self):
        """Gets the affinity_type of this UpdateMediaAffinityIntent.


        :return: The affinity_type of this UpdateMediaAffinityIntent.
        :rtype: MediaAffinityType
        """
        return self._affinity_type

    @affinity_type.setter
    def affinity_type(self, affinity_type):
        """Sets the affinity_type of this UpdateMediaAffinityIntent.


        :param affinity_type: The affinity_type of this UpdateMediaAffinityIntent.
        :type affinity_type: MediaAffinityType
        """

        self._affinity_type = affinity_type

    @property
    def _class(self):
        """Gets the _class of this UpdateMediaAffinityIntent.


        :return: The _class of this UpdateMediaAffinityIntent.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this UpdateMediaAffinityIntent.


        :param _class: The _class of this UpdateMediaAffinityIntent.
        :type _class: str
        """
        allowed_values = ["UpdateMediaAffinityIntent"]  # noqa: E501
        if _class not in allowed_values:
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def media_items(self):
        """Gets the media_items of this UpdateMediaAffinityIntent.


        :return: The media_items of this UpdateMediaAffinityIntent.
        :rtype: List[MediaItem]
        """
        return self._media_items

    @media_items.setter
    def media_items(self, media_items):
        """Sets the media_items of this UpdateMediaAffinityIntent.


        :param media_items: The media_items of this UpdateMediaAffinityIntent.
        :type media_items: List[MediaItem]
        """

        self._media_items = media_items

    @property
    def media_search(self):
        """Gets the media_search of this UpdateMediaAffinityIntent.


        :return: The media_search of this UpdateMediaAffinityIntent.
        :rtype: MediaSearch
        """
        return self._media_search

    @media_search.setter
    def media_search(self, media_search):
        """Sets the media_search of this UpdateMediaAffinityIntent.


        :param media_search: The media_search of this UpdateMediaAffinityIntent.
        :type media_search: MediaSearch
        """

        self._media_search = media_search

    @property
    def identifier(self):
        """Gets the identifier of this UpdateMediaAffinityIntent.


        :return: The identifier of this UpdateMediaAffinityIntent.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this UpdateMediaAffinityIntent.


        :param identifier: The identifier of this UpdateMediaAffinityIntent.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier
