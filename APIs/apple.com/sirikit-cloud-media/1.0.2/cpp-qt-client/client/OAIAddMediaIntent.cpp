/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddMediaIntent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddMediaIntent::OAIAddMediaIntent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddMediaIntent::OAIAddMediaIntent() {
    this->initializeModel();
}

OAIAddMediaIntent::~OAIAddMediaIntent() {}

void OAIAddMediaIntent::initializeModel() {

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_media_destination_isSet = false;
    m_media_destination_isValid = false;

    m_media_items_isSet = false;
    m_media_items_isValid = false;

    m_media_search_isSet = false;
    m_media_search_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;
}

void OAIAddMediaIntent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddMediaIntent::fromJsonObject(QJsonObject json) {

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_media_destination_isValid = ::OpenAPI::fromJsonValue(m_media_destination, json[QString("mediaDestination")]);
    m_media_destination_isSet = !json[QString("mediaDestination")].isNull() && m_media_destination_isValid;

    m_media_items_isValid = ::OpenAPI::fromJsonValue(m_media_items, json[QString("mediaItems")]);
    m_media_items_isSet = !json[QString("mediaItems")].isNull() && m_media_items_isValid;

    m_media_search_isValid = ::OpenAPI::fromJsonValue(m_media_search, json[QString("mediaSearch")]);
    m_media_search_isSet = !json[QString("mediaSearch")].isNull() && m_media_search_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;
}

QString OAIAddMediaIntent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddMediaIntent::asJsonObject() const {
    QJsonObject obj;
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_media_destination.isSet()) {
        obj.insert(QString("mediaDestination"), ::OpenAPI::toJsonValue(m_media_destination));
    }
    if (m_media_items.size() > 0) {
        obj.insert(QString("mediaItems"), ::OpenAPI::toJsonValue(m_media_items));
    }
    if (m_media_search.isSet()) {
        obj.insert(QString("mediaSearch"), ::OpenAPI::toJsonValue(m_media_search));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    return obj;
}

QString OAIAddMediaIntent::getRClass() const {
    return m_r_class;
}
void OAIAddMediaIntent::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIAddMediaIntent::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIAddMediaIntent::is_r_class_Valid() const{
    return m_r_class_isValid;
}

OAIMediaDestination OAIAddMediaIntent::getMediaDestination() const {
    return m_media_destination;
}
void OAIAddMediaIntent::setMediaDestination(const OAIMediaDestination &media_destination) {
    m_media_destination = media_destination;
    m_media_destination_isSet = true;
}

bool OAIAddMediaIntent::is_media_destination_Set() const{
    return m_media_destination_isSet;
}

bool OAIAddMediaIntent::is_media_destination_Valid() const{
    return m_media_destination_isValid;
}

QList<OAIMediaItem> OAIAddMediaIntent::getMediaItems() const {
    return m_media_items;
}
void OAIAddMediaIntent::setMediaItems(const QList<OAIMediaItem> &media_items) {
    m_media_items = media_items;
    m_media_items_isSet = true;
}

bool OAIAddMediaIntent::is_media_items_Set() const{
    return m_media_items_isSet;
}

bool OAIAddMediaIntent::is_media_items_Valid() const{
    return m_media_items_isValid;
}

OAIMediaSearch OAIAddMediaIntent::getMediaSearch() const {
    return m_media_search;
}
void OAIAddMediaIntent::setMediaSearch(const OAIMediaSearch &media_search) {
    m_media_search = media_search;
    m_media_search_isSet = true;
}

bool OAIAddMediaIntent::is_media_search_Set() const{
    return m_media_search_isSet;
}

bool OAIAddMediaIntent::is_media_search_Valid() const{
    return m_media_search_isValid;
}

QString OAIAddMediaIntent::getIdentifier() const {
    return m_identifier;
}
void OAIAddMediaIntent::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIAddMediaIntent::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIAddMediaIntent::is_identifier_Valid() const{
    return m_identifier_isValid;
}

bool OAIAddMediaIntent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_search.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddMediaIntent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_class_isValid && m_identifier_isValid && true;
}

} // namespace OpenAPI
