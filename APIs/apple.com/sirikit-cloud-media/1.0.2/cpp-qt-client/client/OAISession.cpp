/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_deadline_isSet = false;
    m_deadline_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_player_context_isSet = false;
    m_player_context_isValid = false;

    m_requested_isSet = false;
    m_requested_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_deadline_isValid = ::OpenAPI::fromJsonValue(m_deadline, json[QString("deadline")]);
    m_deadline_isSet = !json[QString("deadline")].isNull() && m_deadline_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_player_context_isValid = ::OpenAPI::fromJsonValue(m_player_context, json[QString("playerContext")]);
    m_player_context_isSet = !json[QString("playerContext")].isNull() && m_player_context_isValid;

    m_requested_isValid = ::OpenAPI::fromJsonValue(m_requested, json[QString("requested")]);
    m_requested_isSet = !json[QString("requested")].isNull() && m_requested_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_constraints.isSet()) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_deadline_isSet) {
        obj.insert(QString("deadline"), ::OpenAPI::toJsonValue(m_deadline));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_player_context.isSet()) {
        obj.insert(QString("playerContext"), ::OpenAPI::toJsonValue(m_player_context));
    }
    if (m_requested_isSet) {
        obj.insert(QString("requested"), ::OpenAPI::toJsonValue(m_requested));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIConstraints OAISession::getConstraints() const {
    return m_constraints;
}
void OAISession::setConstraints(const OAIConstraints &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAISession::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAISession::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QDateTime OAISession::getDeadline() const {
    return m_deadline;
}
void OAISession::setDeadline(const QDateTime &deadline) {
    m_deadline = deadline;
    m_deadline_isSet = true;
}

bool OAISession::is_deadline_Set() const{
    return m_deadline_isSet;
}

bool OAISession::is_deadline_Valid() const{
    return m_deadline_isValid;
}

QString OAISession::getIdentifier() const {
    return m_identifier;
}
void OAISession::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAISession::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAISession::is_identifier_Valid() const{
    return m_identifier_isValid;
}

OAIPlayerContext OAISession::getPlayerContext() const {
    return m_player_context;
}
void OAISession::setPlayerContext(const OAIPlayerContext &player_context) {
    m_player_context = player_context;
    m_player_context_isSet = true;
}

bool OAISession::is_player_context_Set() const{
    return m_player_context_isSet;
}

bool OAISession::is_player_context_Valid() const{
    return m_player_context_isValid;
}

QDateTime OAISession::getRequested() const {
    return m_requested;
}
void OAISession::setRequested(const QDateTime &requested) {
    m_requested = requested;
    m_requested_isSet = true;
}

bool OAISession::is_requested_Set() const{
    return m_requested_isSet;
}

bool OAISession::is_requested_Valid() const{
    return m_requested_isValid;
}

QString OAISession::getVersion() const {
    return m_version;
}
void OAISession::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISession::is_version_Set() const{
    return m_version_isSet;
}

bool OAISession::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_constraints_isValid && m_deadline_isValid && m_identifier_isValid && m_requested_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
