/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtocolExceptionReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtocolExceptionReason::OAIProtocolExceptionReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtocolExceptionReason::OAIProtocolExceptionReason() {
    this->initializeModel();
}

OAIProtocolExceptionReason::~OAIProtocolExceptionReason() {}

void OAIProtocolExceptionReason::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProtocolExceptionReason::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProtocolExceptionReason::fromJson(QString jsonString) {
    
    if ( jsonString.compare("unsupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProtocolExceptionReason::UNSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unauthorized", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProtocolExceptionReason::UNAUTHORIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unexpected", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProtocolExceptionReason::UNEXPECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProtocolExceptionReason::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unparseable", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProtocolExceptionReason::UNPARSEABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("deprecated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProtocolExceptionReason::DEPRECATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("internal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProtocolExceptionReason::INTERNAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("complex", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProtocolExceptionReason::COMPLEX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("busy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProtocolExceptionReason::BUSY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProtocolExceptionReason::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProtocolExceptionReason::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProtocolExceptionReason::UNSUPPORTED:
            val = "unsupported";
            break;
        case eOAIProtocolExceptionReason::UNAUTHORIZED:
            val = "unauthorized";
            break;
        case eOAIProtocolExceptionReason::UNEXPECTED:
            val = "unexpected";
            break;
        case eOAIProtocolExceptionReason::INVALID:
            val = "invalid";
            break;
        case eOAIProtocolExceptionReason::UNPARSEABLE:
            val = "unparseable";
            break;
        case eOAIProtocolExceptionReason::DEPRECATED:
            val = "deprecated";
            break;
        case eOAIProtocolExceptionReason::INTERNAL:
            val = "internal";
            break;
        case eOAIProtocolExceptionReason::COMPLEX:
            val = "complex";
            break;
        case eOAIProtocolExceptionReason::BUSY:
            val = "busy";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProtocolExceptionReason::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProtocolExceptionReason::eOAIProtocolExceptionReason OAIProtocolExceptionReason::getValue() const {
    return m_value;
}

void OAIProtocolExceptionReason::setValue(const OAIProtocolExceptionReason::eOAIProtocolExceptionReason& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProtocolExceptionReason::isSet() const {
    
    return m_value_isSet;
}

bool OAIProtocolExceptionReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
