/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse() {
    this->initializeModel();
}

OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::~OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse() {}

void OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::initializeModel() {

    m_method_isSet = false;
    m_method_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_debug_isSet = false;
    m_debug_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::fromJsonObject(QJsonObject json) {

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_debug_isValid = ::OpenAPI::fromJsonValue(m_debug, json[QString("debug")]);
    m_debug_isSet = !json[QString("debug")].isNull() && m_debug_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;
}

QString OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_debug_isSet) {
        obj.insert(QString("debug"), ::OpenAPI::toJsonValue(m_debug));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

QString OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::getMethod() const {
    return m_method;
}
void OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::is_method_Set() const{
    return m_method_isSet;
}

bool OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::is_method_Valid() const{
    return m_method_isValid;
}

OAIObject OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::getResult() const {
    return m_result;
}
void OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::setResult(const OAIObject &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::is_result_Set() const{
    return m_result_isSet;
}

bool OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::getDebug() const {
    return m_debug;
}
void OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::setDebug(const QString &debug) {
    m_debug = debug;
    m_debug_isSet = true;
}

bool OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::is_debug_Set() const{
    return m_debug_isSet;
}

bool OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::is_debug_Valid() const{
    return m_debug_isValid;
}

OAIExecutionMetrics OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::getMetrics() const {
    return m_metrics;
}
void OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::setMetrics(const OAIExecutionMetrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayMediaIntentHandlingResolveResumePlaybackInvocationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_method_isValid && m_result_isValid && true;
}

} // namespace OpenAPI
