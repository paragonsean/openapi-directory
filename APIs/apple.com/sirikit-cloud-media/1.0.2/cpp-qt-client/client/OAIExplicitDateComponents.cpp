/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExplicitDateComponents.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExplicitDateComponents::OAIExplicitDateComponents(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExplicitDateComponents::OAIExplicitDateComponents() {
    this->initializeModel();
}

OAIExplicitDateComponents::~OAIExplicitDateComponents() {}

void OAIExplicitDateComponents::initializeModel() {

    m_calendar_identifier_isSet = false;
    m_calendar_identifier_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_era_isSet = false;
    m_era_isValid = false;

    m_hour_isSet = false;
    m_hour_isValid = false;

    m_minute_isSet = false;
    m_minute_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_nanosecond_isSet = false;
    m_nanosecond_isValid = false;

    m_second_isSet = false;
    m_second_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIExplicitDateComponents::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExplicitDateComponents::fromJsonObject(QJsonObject json) {

    m_calendar_identifier_isValid = ::OpenAPI::fromJsonValue(m_calendar_identifier, json[QString("calendarIdentifier")]);
    m_calendar_identifier_isSet = !json[QString("calendarIdentifier")].isNull() && m_calendar_identifier_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_era_isValid = ::OpenAPI::fromJsonValue(m_era, json[QString("era")]);
    m_era_isSet = !json[QString("era")].isNull() && m_era_isValid;

    m_hour_isValid = ::OpenAPI::fromJsonValue(m_hour, json[QString("hour")]);
    m_hour_isSet = !json[QString("hour")].isNull() && m_hour_isValid;

    m_minute_isValid = ::OpenAPI::fromJsonValue(m_minute, json[QString("minute")]);
    m_minute_isSet = !json[QString("minute")].isNull() && m_minute_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_nanosecond_isValid = ::OpenAPI::fromJsonValue(m_nanosecond, json[QString("nanosecond")]);
    m_nanosecond_isSet = !json[QString("nanosecond")].isNull() && m_nanosecond_isValid;

    m_second_isValid = ::OpenAPI::fromJsonValue(m_second, json[QString("second")]);
    m_second_isSet = !json[QString("second")].isNull() && m_second_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIExplicitDateComponents::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExplicitDateComponents::asJsonObject() const {
    QJsonObject obj;
    if (m_calendar_identifier_isSet) {
        obj.insert(QString("calendarIdentifier"), ::OpenAPI::toJsonValue(m_calendar_identifier));
    }
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_era_isSet) {
        obj.insert(QString("era"), ::OpenAPI::toJsonValue(m_era));
    }
    if (m_hour_isSet) {
        obj.insert(QString("hour"), ::OpenAPI::toJsonValue(m_hour));
    }
    if (m_minute_isSet) {
        obj.insert(QString("minute"), ::OpenAPI::toJsonValue(m_minute));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_nanosecond_isSet) {
        obj.insert(QString("nanosecond"), ::OpenAPI::toJsonValue(m_nanosecond));
    }
    if (m_second_isSet) {
        obj.insert(QString("second"), ::OpenAPI::toJsonValue(m_second));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIExplicitDateComponents::getCalendarIdentifier() const {
    return m_calendar_identifier;
}
void OAIExplicitDateComponents::setCalendarIdentifier(const QString &calendar_identifier) {
    m_calendar_identifier = calendar_identifier;
    m_calendar_identifier_isSet = true;
}

bool OAIExplicitDateComponents::is_calendar_identifier_Set() const{
    return m_calendar_identifier_isSet;
}

bool OAIExplicitDateComponents::is_calendar_identifier_Valid() const{
    return m_calendar_identifier_isValid;
}

qint32 OAIExplicitDateComponents::getDay() const {
    return m_day;
}
void OAIExplicitDateComponents::setDay(const qint32 &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIExplicitDateComponents::is_day_Set() const{
    return m_day_isSet;
}

bool OAIExplicitDateComponents::is_day_Valid() const{
    return m_day_isValid;
}

qint32 OAIExplicitDateComponents::getEra() const {
    return m_era;
}
void OAIExplicitDateComponents::setEra(const qint32 &era) {
    m_era = era;
    m_era_isSet = true;
}

bool OAIExplicitDateComponents::is_era_Set() const{
    return m_era_isSet;
}

bool OAIExplicitDateComponents::is_era_Valid() const{
    return m_era_isValid;
}

qint32 OAIExplicitDateComponents::getHour() const {
    return m_hour;
}
void OAIExplicitDateComponents::setHour(const qint32 &hour) {
    m_hour = hour;
    m_hour_isSet = true;
}

bool OAIExplicitDateComponents::is_hour_Set() const{
    return m_hour_isSet;
}

bool OAIExplicitDateComponents::is_hour_Valid() const{
    return m_hour_isValid;
}

qint32 OAIExplicitDateComponents::getMinute() const {
    return m_minute;
}
void OAIExplicitDateComponents::setMinute(const qint32 &minute) {
    m_minute = minute;
    m_minute_isSet = true;
}

bool OAIExplicitDateComponents::is_minute_Set() const{
    return m_minute_isSet;
}

bool OAIExplicitDateComponents::is_minute_Valid() const{
    return m_minute_isValid;
}

qint32 OAIExplicitDateComponents::getMonth() const {
    return m_month;
}
void OAIExplicitDateComponents::setMonth(const qint32 &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIExplicitDateComponents::is_month_Set() const{
    return m_month_isSet;
}

bool OAIExplicitDateComponents::is_month_Valid() const{
    return m_month_isValid;
}

qint32 OAIExplicitDateComponents::getNanosecond() const {
    return m_nanosecond;
}
void OAIExplicitDateComponents::setNanosecond(const qint32 &nanosecond) {
    m_nanosecond = nanosecond;
    m_nanosecond_isSet = true;
}

bool OAIExplicitDateComponents::is_nanosecond_Set() const{
    return m_nanosecond_isSet;
}

bool OAIExplicitDateComponents::is_nanosecond_Valid() const{
    return m_nanosecond_isValid;
}

qint32 OAIExplicitDateComponents::getSecond() const {
    return m_second;
}
void OAIExplicitDateComponents::setSecond(const qint32 &second) {
    m_second = second;
    m_second_isSet = true;
}

bool OAIExplicitDateComponents::is_second_Set() const{
    return m_second_isSet;
}

bool OAIExplicitDateComponents::is_second_Valid() const{
    return m_second_isValid;
}

QString OAIExplicitDateComponents::getTimeZone() const {
    return m_time_zone;
}
void OAIExplicitDateComponents::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIExplicitDateComponents::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIExplicitDateComponents::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

qint32 OAIExplicitDateComponents::getYear() const {
    return m_year;
}
void OAIExplicitDateComponents::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIExplicitDateComponents::is_year_Set() const{
    return m_year_isSet;
}

bool OAIExplicitDateComponents::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIExplicitDateComponents::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calendar_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_era_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nanosecond_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExplicitDateComponents::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
