/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayMediaControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayMediaControl::OAIPlayMediaControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayMediaControl::OAIPlayMediaControl() {
    this->initializeModel();
}

OAIPlayMediaControl::~OAIPlayMediaControl() {}

void OAIPlayMediaControl::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_commands_isSet = false;
    m_commands_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;
}

void OAIPlayMediaControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayMediaControl::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_commands_isValid = ::OpenAPI::fromJsonValue(m_commands, json[QString("commands")]);
    m_commands_isSet = !json[QString("commands")].isNull() && m_commands_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;
}

QString OAIPlayMediaControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayMediaControl::asJsonObject() const {
    QJsonObject obj;
    if (m_activity.isSet()) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_commands.isSet()) {
        obj.insert(QString("commands"), ::OpenAPI::toJsonValue(m_commands));
    }
    if (m_scheme.isSet()) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    return obj;
}

OAIPlayMediaControlActivity OAIPlayMediaControl::getActivity() const {
    return m_activity;
}
void OAIPlayMediaControl::setActivity(const OAIPlayMediaControlActivity &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAIPlayMediaControl::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAIPlayMediaControl::is_activity_Valid() const{
    return m_activity_isValid;
}

OAIPlayMediaControlCommandSet OAIPlayMediaControl::getCommands() const {
    return m_commands;
}
void OAIPlayMediaControl::setCommands(const OAIPlayMediaControlCommandSet &commands) {
    m_commands = commands;
    m_commands_isSet = true;
}

bool OAIPlayMediaControl::is_commands_Set() const{
    return m_commands_isSet;
}

bool OAIPlayMediaControl::is_commands_Valid() const{
    return m_commands_isValid;
}

OAIPlayMediaControlScheme OAIPlayMediaControl::getScheme() const {
    return m_scheme;
}
void OAIPlayMediaControl::setScheme(const OAIPlayMediaControlScheme &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIPlayMediaControl::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIPlayMediaControl::is_scheme_Valid() const{
    return m_scheme_isValid;
}

bool OAIPlayMediaControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commands.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayMediaControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_scheme_isValid && true;
}

} // namespace OpenAPI
