/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtensionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtensionConfig::OAIExtensionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtensionConfig::OAIExtensionConfig() {
    this->initializeModel();
}

OAIExtensionConfig::~OAIExtensionConfig() {}

void OAIExtensionConfig::initializeModel() {

    m_hdr_isSet = false;
    m_hdr_isValid = false;

    m_intent_isSet = false;
    m_intent_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIExtensionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtensionConfig::fromJsonObject(QJsonObject json) {

    m_hdr_isValid = ::OpenAPI::fromJsonValue(m_hdr, json[QString("hdr")]);
    m_hdr_isSet = !json[QString("hdr")].isNull() && m_hdr_isValid;

    m_intent_isValid = ::OpenAPI::fromJsonValue(m_intent, json[QString("intent")]);
    m_intent_isSet = !json[QString("intent")].isNull() && m_intent_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIExtensionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtensionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_hdr_isSet) {
        obj.insert(QString("hdr"), ::OpenAPI::toJsonValue(m_hdr));
    }
    if (m_intent.isSet()) {
        obj.insert(QString("intent"), ::OpenAPI::toJsonValue(m_intent));
    }
    if (m_media.isSet()) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIObject OAIExtensionConfig::getHdr() const {
    return m_hdr;
}
void OAIExtensionConfig::setHdr(const OAIObject &hdr) {
    m_hdr = hdr;
    m_hdr_isSet = true;
}

bool OAIExtensionConfig::is_hdr_Set() const{
    return m_hdr_isSet;
}

bool OAIExtensionConfig::is_hdr_Valid() const{
    return m_hdr_isValid;
}

OAIExtensionConfig_intent OAIExtensionConfig::getIntent() const {
    return m_intent;
}
void OAIExtensionConfig::setIntent(const OAIExtensionConfig_intent &intent) {
    m_intent = intent;
    m_intent_isSet = true;
}

bool OAIExtensionConfig::is_intent_Set() const{
    return m_intent_isSet;
}

bool OAIExtensionConfig::is_intent_Valid() const{
    return m_intent_isValid;
}

OAIExtensionConfig_media OAIExtensionConfig::getMedia() const {
    return m_media;
}
void OAIExtensionConfig::setMedia(const OAIExtensionConfig_media &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIExtensionConfig::is_media_Set() const{
    return m_media_isSet;
}

bool OAIExtensionConfig::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIExtensionConfig::getUrl() const {
    return m_url;
}
void OAIExtensionConfig::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIExtensionConfig::is_url_Set() const{
    return m_url_isSet;
}

bool OAIExtensionConfig::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIExtensionConfig::getVersion() const {
    return m_version;
}
void OAIExtensionConfig::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIExtensionConfig::is_version_Set() const{
    return m_version_isSet;
}

bool OAIExtensionConfig::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIExtensionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hdr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtensionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_intent_isValid && m_media_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
