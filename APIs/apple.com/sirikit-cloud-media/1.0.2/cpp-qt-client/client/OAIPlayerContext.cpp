/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerContext::OAIPlayerContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerContext::OAIPlayerContext() {
    this->initializeModel();
}

OAIPlayerContext::~OAIPlayerContext() {}

void OAIPlayerContext::initializeModel() {

    m_activity_identifier_isSet = false;
    m_activity_identifier_isValid = false;

    m_content_identifier_isSet = false;
    m_content_identifier_isValid = false;

    m_offset_in_millis_isSet = false;
    m_offset_in_millis_isValid = false;

    m_playback_speed_isSet = false;
    m_playback_speed_isValid = false;

    m_queue_identifier_isSet = false;
    m_queue_identifier_isValid = false;
}

void OAIPlayerContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerContext::fromJsonObject(QJsonObject json) {

    m_activity_identifier_isValid = ::OpenAPI::fromJsonValue(m_activity_identifier, json[QString("activityIdentifier")]);
    m_activity_identifier_isSet = !json[QString("activityIdentifier")].isNull() && m_activity_identifier_isValid;

    m_content_identifier_isValid = ::OpenAPI::fromJsonValue(m_content_identifier, json[QString("contentIdentifier")]);
    m_content_identifier_isSet = !json[QString("contentIdentifier")].isNull() && m_content_identifier_isValid;

    m_offset_in_millis_isValid = ::OpenAPI::fromJsonValue(m_offset_in_millis, json[QString("offsetInMillis")]);
    m_offset_in_millis_isSet = !json[QString("offsetInMillis")].isNull() && m_offset_in_millis_isValid;

    m_playback_speed_isValid = ::OpenAPI::fromJsonValue(m_playback_speed, json[QString("playbackSpeed")]);
    m_playback_speed_isSet = !json[QString("playbackSpeed")].isNull() && m_playback_speed_isValid;

    m_queue_identifier_isValid = ::OpenAPI::fromJsonValue(m_queue_identifier, json[QString("queueIdentifier")]);
    m_queue_identifier_isSet = !json[QString("queueIdentifier")].isNull() && m_queue_identifier_isValid;
}

QString OAIPlayerContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerContext::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_identifier_isSet) {
        obj.insert(QString("activityIdentifier"), ::OpenAPI::toJsonValue(m_activity_identifier));
    }
    if (m_content_identifier_isSet) {
        obj.insert(QString("contentIdentifier"), ::OpenAPI::toJsonValue(m_content_identifier));
    }
    if (m_offset_in_millis_isSet) {
        obj.insert(QString("offsetInMillis"), ::OpenAPI::toJsonValue(m_offset_in_millis));
    }
    if (m_playback_speed_isSet) {
        obj.insert(QString("playbackSpeed"), ::OpenAPI::toJsonValue(m_playback_speed));
    }
    if (m_queue_identifier_isSet) {
        obj.insert(QString("queueIdentifier"), ::OpenAPI::toJsonValue(m_queue_identifier));
    }
    return obj;
}

QString OAIPlayerContext::getActivityIdentifier() const {
    return m_activity_identifier;
}
void OAIPlayerContext::setActivityIdentifier(const QString &activity_identifier) {
    m_activity_identifier = activity_identifier;
    m_activity_identifier_isSet = true;
}

bool OAIPlayerContext::is_activity_identifier_Set() const{
    return m_activity_identifier_isSet;
}

bool OAIPlayerContext::is_activity_identifier_Valid() const{
    return m_activity_identifier_isValid;
}

QString OAIPlayerContext::getContentIdentifier() const {
    return m_content_identifier;
}
void OAIPlayerContext::setContentIdentifier(const QString &content_identifier) {
    m_content_identifier = content_identifier;
    m_content_identifier_isSet = true;
}

bool OAIPlayerContext::is_content_identifier_Set() const{
    return m_content_identifier_isSet;
}

bool OAIPlayerContext::is_content_identifier_Valid() const{
    return m_content_identifier_isValid;
}

qint64 OAIPlayerContext::getOffsetInMillis() const {
    return m_offset_in_millis;
}
void OAIPlayerContext::setOffsetInMillis(const qint64 &offset_in_millis) {
    m_offset_in_millis = offset_in_millis;
    m_offset_in_millis_isSet = true;
}

bool OAIPlayerContext::is_offset_in_millis_Set() const{
    return m_offset_in_millis_isSet;
}

bool OAIPlayerContext::is_offset_in_millis_Valid() const{
    return m_offset_in_millis_isValid;
}

double OAIPlayerContext::getPlaybackSpeed() const {
    return m_playback_speed;
}
void OAIPlayerContext::setPlaybackSpeed(const double &playback_speed) {
    m_playback_speed = playback_speed;
    m_playback_speed_isSet = true;
}

bool OAIPlayerContext::is_playback_speed_Set() const{
    return m_playback_speed_isSet;
}

bool OAIPlayerContext::is_playback_speed_Valid() const{
    return m_playback_speed_isValid;
}

QString OAIPlayerContext::getQueueIdentifier() const {
    return m_queue_identifier;
}
void OAIPlayerContext::setQueueIdentifier(const QString &queue_identifier) {
    m_queue_identifier = queue_identifier;
    m_queue_identifier_isSet = true;
}

bool OAIPlayerContext::is_queue_identifier_Set() const{
    return m_queue_identifier_isSet;
}

bool OAIPlayerContext::is_queue_identifier_Valid() const{
    return m_queue_identifier_isValid;
}

bool OAIPlayerContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_in_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
