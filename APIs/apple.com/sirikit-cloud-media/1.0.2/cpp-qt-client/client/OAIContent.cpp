/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent::OAIContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent::OAIContent() {
    this->initializeModel();
}

OAIContent::~OAIContent() {}

void OAIContent::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_control_isSet = false;
    m_control_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_is_live_isSet = false;
    m_is_live_isValid = false;

    m_play_index_isSet = false;
    m_play_index_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_control_isValid = ::OpenAPI::fromJsonValue(m_control, json[QString("control")]);
    m_control_isSet = !json[QString("control")].isNull() && m_control_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_is_live_isValid = ::OpenAPI::fromJsonValue(m_is_live, json[QString("isLive")]);
    m_is_live_isSet = !json[QString("isLive")].isNull() && m_is_live_isValid;

    m_play_index_isValid = ::OpenAPI::fromJsonValue(m_play_index, json[QString("playIndex")]);
    m_play_index_isSet = !json[QString("playIndex")].isNull() && m_play_index_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_control_isSet) {
        obj.insert(QString("control"), ::OpenAPI::toJsonValue(m_control));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_is_live_isSet) {
        obj.insert(QString("isLive"), ::OpenAPI::toJsonValue(m_is_live));
    }
    if (m_play_index_isSet) {
        obj.insert(QString("playIndex"), ::OpenAPI::toJsonValue(m_play_index));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIContentAttributes OAIContent::getAttributes() const {
    return m_attributes;
}
void OAIContent::setAttributes(const OAIContentAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIContent::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIContent::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIContent::getControl() const {
    return m_control;
}
void OAIContent::setControl(const QString &control) {
    m_control = control;
    m_control_isSet = true;
}

bool OAIContent::is_control_Set() const{
    return m_control_isSet;
}

bool OAIContent::is_control_Valid() const{
    return m_control_isValid;
}

QString OAIContent::getIdentifier() const {
    return m_identifier;
}
void OAIContent::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIContent::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIContent::is_identifier_Valid() const{
    return m_identifier_isValid;
}

bool OAIContent::isIsLive() const {
    return m_is_live;
}
void OAIContent::setIsLive(const bool &is_live) {
    m_is_live = is_live;
    m_is_live_isSet = true;
}

bool OAIContent::is_is_live_Set() const{
    return m_is_live_isSet;
}

bool OAIContent::is_is_live_Valid() const{
    return m_is_live_isValid;
}

qint32 OAIContent::getPlayIndex() const {
    return m_play_index;
}
void OAIContent::setPlayIndex(const qint32 &play_index) {
    m_play_index = play_index;
    m_play_index_isSet = true;
}

bool OAIContent::is_play_index_Set() const{
    return m_play_index_isSet;
}

bool OAIContent::is_play_index_Valid() const{
    return m_play_index_isValid;
}

QString OAIContent::getUrl() const {
    return m_url;
}
void OAIContent::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIContent::is_url_Set() const{
    return m_url_isSet;
}

bool OAIContent::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && true;
}

} // namespace OpenAPI
