/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtensionConfig_intent_playMedia.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtensionConfig_intent_playMedia::OAIExtensionConfig_intent_playMedia(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtensionConfig_intent_playMedia::OAIExtensionConfig_intent_playMedia() {
    this->initializeModel();
}

OAIExtensionConfig_intent_playMedia::~OAIExtensionConfig_intent_playMedia() {}

void OAIExtensionConfig_intent_playMedia::initializeModel() {

    m_opt_isSet = false;
    m_opt_isValid = false;

    m_hdr_isSet = false;
    m_hdr_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIExtensionConfig_intent_playMedia::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtensionConfig_intent_playMedia::fromJsonObject(QJsonObject json) {

    m_opt_isValid = ::OpenAPI::fromJsonValue(m_opt, json[QString("opt")]);
    m_opt_isSet = !json[QString("opt")].isNull() && m_opt_isValid;

    m_hdr_isValid = ::OpenAPI::fromJsonValue(m_hdr, json[QString("hdr")]);
    m_hdr_isSet = !json[QString("hdr")].isNull() && m_hdr_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIExtensionConfig_intent_playMedia::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtensionConfig_intent_playMedia::asJsonObject() const {
    QJsonObject obj;
    if (m_opt.size() > 0) {
        obj.insert(QString("opt"), ::OpenAPI::toJsonValue(m_opt));
    }
    if (m_hdr_isSet) {
        obj.insert(QString("hdr"), ::OpenAPI::toJsonValue(m_hdr));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<QString> OAIExtensionConfig_intent_playMedia::getOpt() const {
    return m_opt;
}
void OAIExtensionConfig_intent_playMedia::setOpt(const QList<QString> &opt) {
    m_opt = opt;
    m_opt_isSet = true;
}

bool OAIExtensionConfig_intent_playMedia::is_opt_Set() const{
    return m_opt_isSet;
}

bool OAIExtensionConfig_intent_playMedia::is_opt_Valid() const{
    return m_opt_isValid;
}

OAIObject OAIExtensionConfig_intent_playMedia::getHdr() const {
    return m_hdr;
}
void OAIExtensionConfig_intent_playMedia::setHdr(const OAIObject &hdr) {
    m_hdr = hdr;
    m_hdr_isSet = true;
}

bool OAIExtensionConfig_intent_playMedia::is_hdr_Set() const{
    return m_hdr_isSet;
}

bool OAIExtensionConfig_intent_playMedia::is_hdr_Valid() const{
    return m_hdr_isValid;
}

QString OAIExtensionConfig_intent_playMedia::getUrl() const {
    return m_url;
}
void OAIExtensionConfig_intent_playMedia::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIExtensionConfig_intent_playMedia::is_url_Set() const{
    return m_url_isSet;
}

bool OAIExtensionConfig_intent_playMedia::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIExtensionConfig_intent_playMedia::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_opt.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtensionConfig_intent_playMedia::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
