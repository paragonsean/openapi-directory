/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayMediaControlActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayMediaControlActivity::OAIPlayMediaControlActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayMediaControlActivity::OAIPlayMediaControlActivity() {
    this->initializeModel();
}

OAIPlayMediaControlActivity::~OAIPlayMediaControlActivity() {}

void OAIPlayMediaControlActivity::initializeModel() {

    m_play_elapsed_isSet = false;
    m_play_elapsed_isValid = false;

    m_play_elapsed_interval_isSet = false;
    m_play_elapsed_interval_isValid = false;

    m_play_paused_isSet = false;
    m_play_paused_isValid = false;
}

void OAIPlayMediaControlActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayMediaControlActivity::fromJsonObject(QJsonObject json) {

    m_play_elapsed_isValid = ::OpenAPI::fromJsonValue(m_play_elapsed, json[QString("playElapsed")]);
    m_play_elapsed_isSet = !json[QString("playElapsed")].isNull() && m_play_elapsed_isValid;

    m_play_elapsed_interval_isValid = ::OpenAPI::fromJsonValue(m_play_elapsed_interval, json[QString("playElapsedInterval")]);
    m_play_elapsed_interval_isSet = !json[QString("playElapsedInterval")].isNull() && m_play_elapsed_interval_isValid;

    m_play_paused_isValid = ::OpenAPI::fromJsonValue(m_play_paused, json[QString("playPaused")]);
    m_play_paused_isSet = !json[QString("playPaused")].isNull() && m_play_paused_isValid;
}

QString OAIPlayMediaControlActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayMediaControlActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_play_elapsed_isSet) {
        obj.insert(QString("playElapsed"), ::OpenAPI::toJsonValue(m_play_elapsed));
    }
    if (m_play_elapsed_interval_isSet) {
        obj.insert(QString("playElapsedInterval"), ::OpenAPI::toJsonValue(m_play_elapsed_interval));
    }
    if (m_play_paused_isSet) {
        obj.insert(QString("playPaused"), ::OpenAPI::toJsonValue(m_play_paused));
    }
    return obj;
}

qint32 OAIPlayMediaControlActivity::getPlayElapsed() const {
    return m_play_elapsed;
}
void OAIPlayMediaControlActivity::setPlayElapsed(const qint32 &play_elapsed) {
    m_play_elapsed = play_elapsed;
    m_play_elapsed_isSet = true;
}

bool OAIPlayMediaControlActivity::is_play_elapsed_Set() const{
    return m_play_elapsed_isSet;
}

bool OAIPlayMediaControlActivity::is_play_elapsed_Valid() const{
    return m_play_elapsed_isValid;
}

qint32 OAIPlayMediaControlActivity::getPlayElapsedInterval() const {
    return m_play_elapsed_interval;
}
void OAIPlayMediaControlActivity::setPlayElapsedInterval(const qint32 &play_elapsed_interval) {
    m_play_elapsed_interval = play_elapsed_interval;
    m_play_elapsed_interval_isSet = true;
}

bool OAIPlayMediaControlActivity::is_play_elapsed_interval_Set() const{
    return m_play_elapsed_interval_isSet;
}

bool OAIPlayMediaControlActivity::is_play_elapsed_interval_Valid() const{
    return m_play_elapsed_interval_isValid;
}

qint32 OAIPlayMediaControlActivity::getPlayPaused() const {
    return m_play_paused;
}
void OAIPlayMediaControlActivity::setPlayPaused(const qint32 &play_paused) {
    m_play_paused = play_paused;
    m_play_paused_isSet = true;
}

bool OAIPlayMediaControlActivity::is_play_paused_Set() const{
    return m_play_paused_isSet;
}

bool OAIPlayMediaControlActivity::is_play_paused_Valid() const{
    return m_play_paused_isValid;
}

bool OAIPlayMediaControlActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_play_elapsed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_elapsed_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_paused_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayMediaControlActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
