/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaybackRepeatModeResolutionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaybackRepeatModeResolutionResult::OAIPlaybackRepeatModeResolutionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaybackRepeatModeResolutionResult::OAIPlaybackRepeatModeResolutionResult() {
    this->initializeModel();
}

OAIPlaybackRepeatModeResolutionResult::~OAIPlaybackRepeatModeResolutionResult() {}

void OAIPlaybackRepeatModeResolutionResult::initializeModel() {

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_confirmation_required_isSet = false;
    m_confirmation_required_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_needs_value_isSet = false;
    m_needs_value_isValid = false;

    m_not_required_isSet = false;
    m_not_required_isValid = false;

    m_unsupported_isSet = false;
    m_unsupported_isValid = false;
}

void OAIPlaybackRepeatModeResolutionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaybackRepeatModeResolutionResult::fromJsonObject(QJsonObject json) {

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_confirmation_required_isValid = ::OpenAPI::fromJsonValue(m_confirmation_required, json[QString("confirmationRequired")]);
    m_confirmation_required_isSet = !json[QString("confirmationRequired")].isNull() && m_confirmation_required_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_needs_value_isValid = ::OpenAPI::fromJsonValue(m_needs_value, json[QString("needsValue")]);
    m_needs_value_isSet = !json[QString("needsValue")].isNull() && m_needs_value_isValid;

    m_not_required_isValid = ::OpenAPI::fromJsonValue(m_not_required, json[QString("notRequired")]);
    m_not_required_isSet = !json[QString("notRequired")].isNull() && m_not_required_isValid;

    m_unsupported_isValid = ::OpenAPI::fromJsonValue(m_unsupported, json[QString("unsupported")]);
    m_unsupported_isSet = !json[QString("unsupported")].isNull() && m_unsupported_isValid;
}

QString OAIPlaybackRepeatModeResolutionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaybackRepeatModeResolutionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_confirmation_required.isSet()) {
        obj.insert(QString("confirmationRequired"), ::OpenAPI::toJsonValue(m_confirmation_required));
    }
    if (m_success.isSet()) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_needs_value_isSet) {
        obj.insert(QString("needsValue"), ::OpenAPI::toJsonValue(m_needs_value));
    }
    if (m_not_required_isSet) {
        obj.insert(QString("notRequired"), ::OpenAPI::toJsonValue(m_not_required));
    }
    if (m_unsupported_isSet) {
        obj.insert(QString("unsupported"), ::OpenAPI::toJsonValue(m_unsupported));
    }
    return obj;
}

QString OAIPlaybackRepeatModeResolutionResult::getRClass() const {
    return m_r_class;
}
void OAIPlaybackRepeatModeResolutionResult::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIPlaybackRepeatModeResolutionResult::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIPlaybackRepeatModeResolutionResult::is_r_class_Valid() const{
    return m_r_class_isValid;
}

OAIObject OAIPlaybackRepeatModeResolutionResult::getConfirmationRequired() const {
    return m_confirmation_required;
}
void OAIPlaybackRepeatModeResolutionResult::setConfirmationRequired(const OAIObject &confirmation_required) {
    m_confirmation_required = confirmation_required;
    m_confirmation_required_isSet = true;
}

bool OAIPlaybackRepeatModeResolutionResult::is_confirmation_required_Set() const{
    return m_confirmation_required_isSet;
}

bool OAIPlaybackRepeatModeResolutionResult::is_confirmation_required_Valid() const{
    return m_confirmation_required_isValid;
}

OAIObject OAIPlaybackRepeatModeResolutionResult::getSuccess() const {
    return m_success;
}
void OAIPlaybackRepeatModeResolutionResult::setSuccess(const OAIObject &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIPlaybackRepeatModeResolutionResult::is_success_Set() const{
    return m_success_isSet;
}

bool OAIPlaybackRepeatModeResolutionResult::is_success_Valid() const{
    return m_success_isValid;
}

OAIObject OAIPlaybackRepeatModeResolutionResult::getNeedsValue() const {
    return m_needs_value;
}
void OAIPlaybackRepeatModeResolutionResult::setNeedsValue(const OAIObject &needs_value) {
    m_needs_value = needs_value;
    m_needs_value_isSet = true;
}

bool OAIPlaybackRepeatModeResolutionResult::is_needs_value_Set() const{
    return m_needs_value_isSet;
}

bool OAIPlaybackRepeatModeResolutionResult::is_needs_value_Valid() const{
    return m_needs_value_isValid;
}

OAIObject OAIPlaybackRepeatModeResolutionResult::getNotRequired() const {
    return m_not_required;
}
void OAIPlaybackRepeatModeResolutionResult::setNotRequired(const OAIObject &not_required) {
    m_not_required = not_required;
    m_not_required_isSet = true;
}

bool OAIPlaybackRepeatModeResolutionResult::is_not_required_Set() const{
    return m_not_required_isSet;
}

bool OAIPlaybackRepeatModeResolutionResult::is_not_required_Valid() const{
    return m_not_required_isValid;
}

OAIObject OAIPlaybackRepeatModeResolutionResult::getUnsupported() const {
    return m_unsupported;
}
void OAIPlaybackRepeatModeResolutionResult::setUnsupported(const OAIObject &unsupported) {
    m_unsupported = unsupported;
    m_unsupported_isSet = true;
}

bool OAIPlaybackRepeatModeResolutionResult::is_unsupported_Set() const{
    return m_unsupported_isSet;
}

bool OAIPlaybackRepeatModeResolutionResult::is_unsupported_Valid() const{
    return m_unsupported_isValid;
}

bool OAIPlaybackRepeatModeResolutionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_required.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_success.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_needs_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsupported_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaybackRepeatModeResolutionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
