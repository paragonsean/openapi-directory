/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueueActivityReportEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueueActivityReportEvent::OAIQueueActivityReportEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueueActivityReportEvent::OAIQueueActivityReportEvent() {
    this->initializeModel();
}

OAIQueueActivityReportEvent::~OAIQueueActivityReportEvent() {}

void OAIQueueActivityReportEvent::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIQueueActivityReportEvent::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIQueueActivityReportEvent::fromJson(QString jsonString) {
    
    if ( jsonString.compare("local.playing.elapsed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::PLAYING_ELAPSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.playing.paused", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::PLAYING_PAUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.playing.continued", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::PLAYING_CONTINUED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.playing.scrub", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::PLAYING_SCRUB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.playing.fastForward", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::PLAYING_FASTFORWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.playing.fastRewind", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::PLAYING_FASTREWIND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.playing.transitioned.naturally", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::PLAYING_TRANSITIONED_NATURALLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.playing.transitioned.skip_next", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::PLAYING_TRANSITIONED_SKIP_NEXT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.playing.transitioned.skip_previous", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::PLAYING_TRANSITIONED_SKIP_PREVIOUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.playing.transitioned.queue_replaced", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::PLAYING_TRANSITIONED_QUEUE_REPLACED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.stopped.naturally", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::STOPPED_NATURALLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.stopped.skip_past_end", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::STOPPED_SKIP_PAST_END;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.command.like", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::COMMAND_LIKE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.command.dislike", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::COMMAND_DISLIKE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("local.command.bookmark", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueActivityReportEvent::COMMAND_BOOKMARK;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIQueueActivityReportEvent::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIQueueActivityReportEvent::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIQueueActivityReportEvent::PLAYING_ELAPSED:
            val = "local.playing.elapsed";
            break;
        case eOAIQueueActivityReportEvent::PLAYING_PAUSED:
            val = "local.playing.paused";
            break;
        case eOAIQueueActivityReportEvent::PLAYING_CONTINUED:
            val = "local.playing.continued";
            break;
        case eOAIQueueActivityReportEvent::PLAYING_SCRUB:
            val = "local.playing.scrub";
            break;
        case eOAIQueueActivityReportEvent::PLAYING_FASTFORWARD:
            val = "local.playing.fastForward";
            break;
        case eOAIQueueActivityReportEvent::PLAYING_FASTREWIND:
            val = "local.playing.fastRewind";
            break;
        case eOAIQueueActivityReportEvent::PLAYING_TRANSITIONED_NATURALLY:
            val = "local.playing.transitioned.naturally";
            break;
        case eOAIQueueActivityReportEvent::PLAYING_TRANSITIONED_SKIP_NEXT:
            val = "local.playing.transitioned.skip_next";
            break;
        case eOAIQueueActivityReportEvent::PLAYING_TRANSITIONED_SKIP_PREVIOUS:
            val = "local.playing.transitioned.skip_previous";
            break;
        case eOAIQueueActivityReportEvent::PLAYING_TRANSITIONED_QUEUE_REPLACED:
            val = "local.playing.transitioned.queue_replaced";
            break;
        case eOAIQueueActivityReportEvent::STOPPED_NATURALLY:
            val = "local.stopped.naturally";
            break;
        case eOAIQueueActivityReportEvent::STOPPED_SKIP_PAST_END:
            val = "local.stopped.skip_past_end";
            break;
        case eOAIQueueActivityReportEvent::COMMAND_LIKE:
            val = "local.command.like";
            break;
        case eOAIQueueActivityReportEvent::COMMAND_DISLIKE:
            val = "local.command.dislike";
            break;
        case eOAIQueueActivityReportEvent::COMMAND_BOOKMARK:
            val = "local.command.bookmark";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIQueueActivityReportEvent::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIQueueActivityReportEvent::eOAIQueueActivityReportEvent OAIQueueActivityReportEvent::getValue() const {
    return m_value;
}

void OAIQueueActivityReportEvent::setValue(const OAIQueueActivityReportEvent::eOAIQueueActivityReportEvent& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIQueueActivityReportEvent::isSet() const {
    
    return m_value_isSet;
}

bool OAIQueueActivityReportEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
