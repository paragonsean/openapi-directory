/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueueInsertPointer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueueInsertPointer::OAIQueueInsertPointer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueueInsertPointer::OAIQueueInsertPointer() {
    this->initializeModel();
}

OAIQueueInsertPointer::~OAIQueueInsertPointer() {}

void OAIQueueInsertPointer::initializeModel() {

    m_after_identifier_isSet = false;
    m_after_identifier_isValid = false;

    m_replace_isSet = false;
    m_replace_isValid = false;
}

void OAIQueueInsertPointer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueueInsertPointer::fromJsonObject(QJsonObject json) {

    m_after_identifier_isValid = ::OpenAPI::fromJsonValue(m_after_identifier, json[QString("afterIdentifier")]);
    m_after_identifier_isSet = !json[QString("afterIdentifier")].isNull() && m_after_identifier_isValid;

    m_replace_isValid = ::OpenAPI::fromJsonValue(m_replace, json[QString("replace")]);
    m_replace_isSet = !json[QString("replace")].isNull() && m_replace_isValid;
}

QString OAIQueueInsertPointer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueueInsertPointer::asJsonObject() const {
    QJsonObject obj;
    if (m_after_identifier_isSet) {
        obj.insert(QString("afterIdentifier"), ::OpenAPI::toJsonValue(m_after_identifier));
    }
    if (m_replace_isSet) {
        obj.insert(QString("replace"), ::OpenAPI::toJsonValue(m_replace));
    }
    return obj;
}

QString OAIQueueInsertPointer::getAfterIdentifier() const {
    return m_after_identifier;
}
void OAIQueueInsertPointer::setAfterIdentifier(const QString &after_identifier) {
    m_after_identifier = after_identifier;
    m_after_identifier_isSet = true;
}

bool OAIQueueInsertPointer::is_after_identifier_Set() const{
    return m_after_identifier_isSet;
}

bool OAIQueueInsertPointer::is_after_identifier_Valid() const{
    return m_after_identifier_isValid;
}

bool OAIQueueInsertPointer::isReplace() const {
    return m_replace;
}
void OAIQueueInsertPointer::setReplace(const bool &replace) {
    m_replace = replace;
    m_replace_isSet = true;
}

bool OAIQueueInsertPointer::is_replace_Set() const{
    return m_replace_isSet;
}

bool OAIQueueInsertPointer::is_replace_Valid() const{
    return m_replace_isValid;
}

bool OAIQueueInsertPointer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueueInsertPointer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
