/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayMediaRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayMediaRequest::OAIPlayMediaRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayMediaRequest::OAIPlayMediaRequest() {
    this->initializeModel();
}

OAIPlayMediaRequest::~OAIPlayMediaRequest() {}

void OAIPlayMediaRequest::initializeModel() {

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_user_activity_isSet = false;
    m_user_activity_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPlayMediaRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayMediaRequest::fromJsonObject(QJsonObject json) {

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_user_activity_isValid = ::OpenAPI::fromJsonValue(m_user_activity, json[QString("userActivity")]);
    m_user_activity_isSet = !json[QString("userActivity")].isNull() && m_user_activity_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPlayMediaRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayMediaRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_constraints.isSet()) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_user_activity.isSet()) {
        obj.insert(QString("userActivity"), ::OpenAPI::toJsonValue(m_user_activity));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIConstraints OAIPlayMediaRequest::getConstraints() const {
    return m_constraints;
}
void OAIPlayMediaRequest::setConstraints(const OAIConstraints &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAIPlayMediaRequest::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAIPlayMediaRequest::is_constraints_Valid() const{
    return m_constraints_isValid;
}

OAIUserActivity OAIPlayMediaRequest::getUserActivity() const {
    return m_user_activity;
}
void OAIPlayMediaRequest::setUserActivity(const OAIUserActivity &user_activity) {
    m_user_activity = user_activity;
    m_user_activity_isSet = true;
}

bool OAIPlayMediaRequest::is_user_activity_Set() const{
    return m_user_activity_isSet;
}

bool OAIPlayMediaRequest::is_user_activity_Valid() const{
    return m_user_activity_isValid;
}

QString OAIPlayMediaRequest::getVersion() const {
    return m_version;
}
void OAIPlayMediaRequest::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPlayMediaRequest::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPlayMediaRequest::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPlayMediaRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayMediaRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_constraints_isValid && m_user_activity_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
