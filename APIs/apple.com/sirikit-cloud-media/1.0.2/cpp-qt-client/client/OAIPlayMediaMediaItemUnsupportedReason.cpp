/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayMediaMediaItemUnsupportedReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayMediaMediaItemUnsupportedReason::OAIPlayMediaMediaItemUnsupportedReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayMediaMediaItemUnsupportedReason::OAIPlayMediaMediaItemUnsupportedReason() {
    this->initializeModel();
}

OAIPlayMediaMediaItemUnsupportedReason::~OAIPlayMediaMediaItemUnsupportedReason() {}

void OAIPlayMediaMediaItemUnsupportedReason::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPlayMediaMediaItemUnsupportedReason::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPlayMediaMediaItemUnsupportedReason::fromJson(QString jsonString) {
    
    if ( jsonString.compare("loginRequired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaMediaItemUnsupportedReason::LOGINREQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("subscriptionRequired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaMediaItemUnsupportedReason::SUBSCRIPTIONREQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unsupportedMediaType", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaMediaItemUnsupportedReason::UNSUPPORTEDMEDIATYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("explicitContentSettings", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaMediaItemUnsupportedReason::EXPLICITCONTENTSETTINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("restrictedContent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaMediaItemUnsupportedReason::RESTRICTEDCONTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("regionRestriction", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaMediaItemUnsupportedReason::REGIONRESTRICTION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPlayMediaMediaItemUnsupportedReason::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPlayMediaMediaItemUnsupportedReason::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPlayMediaMediaItemUnsupportedReason::LOGINREQUIRED:
            val = "loginRequired";
            break;
        case eOAIPlayMediaMediaItemUnsupportedReason::SUBSCRIPTIONREQUIRED:
            val = "subscriptionRequired";
            break;
        case eOAIPlayMediaMediaItemUnsupportedReason::UNSUPPORTEDMEDIATYPE:
            val = "unsupportedMediaType";
            break;
        case eOAIPlayMediaMediaItemUnsupportedReason::EXPLICITCONTENTSETTINGS:
            val = "explicitContentSettings";
            break;
        case eOAIPlayMediaMediaItemUnsupportedReason::RESTRICTEDCONTENT:
            val = "restrictedContent";
            break;
        case eOAIPlayMediaMediaItemUnsupportedReason::REGIONRESTRICTION:
            val = "regionRestriction";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPlayMediaMediaItemUnsupportedReason::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPlayMediaMediaItemUnsupportedReason::eOAIPlayMediaMediaItemUnsupportedReason OAIPlayMediaMediaItemUnsupportedReason::getValue() const {
    return m_value;
}

void OAIPlayMediaMediaItemUnsupportedReason::setValue(const OAIPlayMediaMediaItemUnsupportedReason::eOAIPlayMediaMediaItemUnsupportedReason& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPlayMediaMediaItemUnsupportedReason::isSet() const {
    
    return m_value_isSet;
}

bool OAIPlayMediaMediaItemUnsupportedReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
