/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaSearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaSearch::OAIMediaSearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaSearch::OAIMediaSearch() {
    this->initializeModel();
}

OAIMediaSearch::~OAIMediaSearch() {}

void OAIMediaSearch::initializeModel() {

    m_album_name_isSet = false;
    m_album_name_isValid = false;

    m_artist_name_isSet = false;
    m_artist_name_isValid = false;

    m_genre_names_isSet = false;
    m_genre_names_isValid = false;

    m_media_identifier_isSet = false;
    m_media_identifier_isValid = false;

    m_media_name_isSet = false;
    m_media_name_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_mood_names_isSet = false;
    m_mood_names_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIMediaSearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaSearch::fromJsonObject(QJsonObject json) {

    m_album_name_isValid = ::OpenAPI::fromJsonValue(m_album_name, json[QString("albumName")]);
    m_album_name_isSet = !json[QString("albumName")].isNull() && m_album_name_isValid;

    m_artist_name_isValid = ::OpenAPI::fromJsonValue(m_artist_name, json[QString("artistName")]);
    m_artist_name_isSet = !json[QString("artistName")].isNull() && m_artist_name_isValid;

    m_genre_names_isValid = ::OpenAPI::fromJsonValue(m_genre_names, json[QString("genreNames")]);
    m_genre_names_isSet = !json[QString("genreNames")].isNull() && m_genre_names_isValid;

    m_media_identifier_isValid = ::OpenAPI::fromJsonValue(m_media_identifier, json[QString("mediaIdentifier")]);
    m_media_identifier_isSet = !json[QString("mediaIdentifier")].isNull() && m_media_identifier_isValid;

    m_media_name_isValid = ::OpenAPI::fromJsonValue(m_media_name, json[QString("mediaName")]);
    m_media_name_isSet = !json[QString("mediaName")].isNull() && m_media_name_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_mood_names_isValid = ::OpenAPI::fromJsonValue(m_mood_names, json[QString("moodNames")]);
    m_mood_names_isSet = !json[QString("moodNames")].isNull() && m_mood_names_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("releaseDate")]);
    m_release_date_isSet = !json[QString("releaseDate")].isNull() && m_release_date_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIMediaSearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaSearch::asJsonObject() const {
    QJsonObject obj;
    if (m_album_name_isSet) {
        obj.insert(QString("albumName"), ::OpenAPI::toJsonValue(m_album_name));
    }
    if (m_artist_name_isSet) {
        obj.insert(QString("artistName"), ::OpenAPI::toJsonValue(m_artist_name));
    }
    if (m_genre_names.size() > 0) {
        obj.insert(QString("genreNames"), ::OpenAPI::toJsonValue(m_genre_names));
    }
    if (m_media_identifier_isSet) {
        obj.insert(QString("mediaIdentifier"), ::OpenAPI::toJsonValue(m_media_identifier));
    }
    if (m_media_name_isSet) {
        obj.insert(QString("mediaName"), ::OpenAPI::toJsonValue(m_media_name));
    }
    if (m_media_type.isSet()) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_mood_names.size() > 0) {
        obj.insert(QString("moodNames"), ::OpenAPI::toJsonValue(m_mood_names));
    }
    if (m_reference.isSet()) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_release_date.isSet()) {
        obj.insert(QString("releaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QString OAIMediaSearch::getAlbumName() const {
    return m_album_name;
}
void OAIMediaSearch::setAlbumName(const QString &album_name) {
    m_album_name = album_name;
    m_album_name_isSet = true;
}

bool OAIMediaSearch::is_album_name_Set() const{
    return m_album_name_isSet;
}

bool OAIMediaSearch::is_album_name_Valid() const{
    return m_album_name_isValid;
}

QString OAIMediaSearch::getArtistName() const {
    return m_artist_name;
}
void OAIMediaSearch::setArtistName(const QString &artist_name) {
    m_artist_name = artist_name;
    m_artist_name_isSet = true;
}

bool OAIMediaSearch::is_artist_name_Set() const{
    return m_artist_name_isSet;
}

bool OAIMediaSearch::is_artist_name_Valid() const{
    return m_artist_name_isValid;
}

QList<QString> OAIMediaSearch::getGenreNames() const {
    return m_genre_names;
}
void OAIMediaSearch::setGenreNames(const QList<QString> &genre_names) {
    m_genre_names = genre_names;
    m_genre_names_isSet = true;
}

bool OAIMediaSearch::is_genre_names_Set() const{
    return m_genre_names_isSet;
}

bool OAIMediaSearch::is_genre_names_Valid() const{
    return m_genre_names_isValid;
}

QString OAIMediaSearch::getMediaIdentifier() const {
    return m_media_identifier;
}
void OAIMediaSearch::setMediaIdentifier(const QString &media_identifier) {
    m_media_identifier = media_identifier;
    m_media_identifier_isSet = true;
}

bool OAIMediaSearch::is_media_identifier_Set() const{
    return m_media_identifier_isSet;
}

bool OAIMediaSearch::is_media_identifier_Valid() const{
    return m_media_identifier_isValid;
}

QString OAIMediaSearch::getMediaName() const {
    return m_media_name;
}
void OAIMediaSearch::setMediaName(const QString &media_name) {
    m_media_name = media_name;
    m_media_name_isSet = true;
}

bool OAIMediaSearch::is_media_name_Set() const{
    return m_media_name_isSet;
}

bool OAIMediaSearch::is_media_name_Valid() const{
    return m_media_name_isValid;
}

OAIMediaItemType OAIMediaSearch::getMediaType() const {
    return m_media_type;
}
void OAIMediaSearch::setMediaType(const OAIMediaItemType &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIMediaSearch::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIMediaSearch::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QList<QString> OAIMediaSearch::getMoodNames() const {
    return m_mood_names;
}
void OAIMediaSearch::setMoodNames(const QList<QString> &mood_names) {
    m_mood_names = mood_names;
    m_mood_names_isSet = true;
}

bool OAIMediaSearch::is_mood_names_Set() const{
    return m_mood_names_isSet;
}

bool OAIMediaSearch::is_mood_names_Valid() const{
    return m_mood_names_isValid;
}

OAIMediaReference OAIMediaSearch::getReference() const {
    return m_reference;
}
void OAIMediaSearch::setReference(const OAIMediaReference &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIMediaSearch::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIMediaSearch::is_reference_Valid() const{
    return m_reference_isValid;
}

OAIDateComponentsRange OAIMediaSearch::getReleaseDate() const {
    return m_release_date;
}
void OAIMediaSearch::setReleaseDate(const OAIDateComponentsRange &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIMediaSearch::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIMediaSearch::is_release_date_Valid() const{
    return m_release_date_isValid;
}

OAIMediaSortOrder OAIMediaSearch::getSortOrder() const {
    return m_sort_order;
}
void OAIMediaSearch::setSortOrder(const OAIMediaSortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIMediaSearch::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIMediaSearch::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIMediaSearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mood_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaSearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
