/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaItemType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaItemType::OAIMediaItemType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaItemType::OAIMediaItemType() {
    this->initializeModel();
}

OAIMediaItemType::~OAIMediaItemType() {}

void OAIMediaItemType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMediaItemType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMediaItemType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("song", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::SONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("album", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::ALBUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("artist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::ARTIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("genre", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::GENRE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("playlist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::PLAYLIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("podcastShow", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::PODCASTSHOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("podcastEpisode", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::PODCASTEPISODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("podcastPlaylist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::PODCASTPLAYLIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("musicStation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::MUSICSTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("audioBook", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::AUDIOBOOK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("movie", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::MOVIE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tvShow", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::TVSHOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tvShowEpisode", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::TVSHOWEPISODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("musicVideo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::MUSICVIDEO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("podcastStation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::PODCASTSTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("radioStation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::RADIOSTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("station", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::STATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("music", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::MUSIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("algorithmicRadioStation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::ALGORITHMICRADIOSTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("news", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaItemType::NEWS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMediaItemType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMediaItemType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMediaItemType::UNKNOWN:
            val = "unknown";
            break;
        case eOAIMediaItemType::SONG:
            val = "song";
            break;
        case eOAIMediaItemType::ALBUM:
            val = "album";
            break;
        case eOAIMediaItemType::ARTIST:
            val = "artist";
            break;
        case eOAIMediaItemType::GENRE:
            val = "genre";
            break;
        case eOAIMediaItemType::PLAYLIST:
            val = "playlist";
            break;
        case eOAIMediaItemType::PODCASTSHOW:
            val = "podcastShow";
            break;
        case eOAIMediaItemType::PODCASTEPISODE:
            val = "podcastEpisode";
            break;
        case eOAIMediaItemType::PODCASTPLAYLIST:
            val = "podcastPlaylist";
            break;
        case eOAIMediaItemType::MUSICSTATION:
            val = "musicStation";
            break;
        case eOAIMediaItemType::AUDIOBOOK:
            val = "audioBook";
            break;
        case eOAIMediaItemType::MOVIE:
            val = "movie";
            break;
        case eOAIMediaItemType::TVSHOW:
            val = "tvShow";
            break;
        case eOAIMediaItemType::TVSHOWEPISODE:
            val = "tvShowEpisode";
            break;
        case eOAIMediaItemType::MUSICVIDEO:
            val = "musicVideo";
            break;
        case eOAIMediaItemType::PODCASTSTATION:
            val = "podcastStation";
            break;
        case eOAIMediaItemType::RADIOSTATION:
            val = "radioStation";
            break;
        case eOAIMediaItemType::STATION:
            val = "station";
            break;
        case eOAIMediaItemType::MUSIC:
            val = "music";
            break;
        case eOAIMediaItemType::ALGORITHMICRADIOSTATION:
            val = "algorithmicRadioStation";
            break;
        case eOAIMediaItemType::NEWS:
            val = "news";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMediaItemType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMediaItemType::eOAIMediaItemType OAIMediaItemType::getValue() const {
    return m_value;
}

void OAIMediaItemType::setValue(const OAIMediaItemType::eOAIMediaItemType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMediaItemType::isSet() const {
    
    return m_value_isSet;
}

bool OAIMediaItemType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
