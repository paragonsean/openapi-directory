/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayMediaIntent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayMediaIntent::OAIPlayMediaIntent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayMediaIntent::OAIPlayMediaIntent() {
    this->initializeModel();
}

OAIPlayMediaIntent::~OAIPlayMediaIntent() {}

void OAIPlayMediaIntent::initializeModel() {

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_media_items_isSet = false;
    m_media_items_isValid = false;

    m_media_search_isSet = false;
    m_media_search_isValid = false;

    m_play_shuffled_isSet = false;
    m_play_shuffled_isValid = false;

    m_playback_queue_location_isSet = false;
    m_playback_queue_location_isValid = false;

    m_playback_repeat_mode_isSet = false;
    m_playback_repeat_mode_isValid = false;

    m_playback_speed_isSet = false;
    m_playback_speed_isValid = false;

    m_resume_playback_isSet = false;
    m_resume_playback_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;
}

void OAIPlayMediaIntent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayMediaIntent::fromJsonObject(QJsonObject json) {

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_media_items_isValid = ::OpenAPI::fromJsonValue(m_media_items, json[QString("mediaItems")]);
    m_media_items_isSet = !json[QString("mediaItems")].isNull() && m_media_items_isValid;

    m_media_search_isValid = ::OpenAPI::fromJsonValue(m_media_search, json[QString("mediaSearch")]);
    m_media_search_isSet = !json[QString("mediaSearch")].isNull() && m_media_search_isValid;

    m_play_shuffled_isValid = ::OpenAPI::fromJsonValue(m_play_shuffled, json[QString("playShuffled")]);
    m_play_shuffled_isSet = !json[QString("playShuffled")].isNull() && m_play_shuffled_isValid;

    m_playback_queue_location_isValid = ::OpenAPI::fromJsonValue(m_playback_queue_location, json[QString("playbackQueueLocation")]);
    m_playback_queue_location_isSet = !json[QString("playbackQueueLocation")].isNull() && m_playback_queue_location_isValid;

    m_playback_repeat_mode_isValid = ::OpenAPI::fromJsonValue(m_playback_repeat_mode, json[QString("playbackRepeatMode")]);
    m_playback_repeat_mode_isSet = !json[QString("playbackRepeatMode")].isNull() && m_playback_repeat_mode_isValid;

    m_playback_speed_isValid = ::OpenAPI::fromJsonValue(m_playback_speed, json[QString("playbackSpeed")]);
    m_playback_speed_isSet = !json[QString("playbackSpeed")].isNull() && m_playback_speed_isValid;

    m_resume_playback_isValid = ::OpenAPI::fromJsonValue(m_resume_playback, json[QString("resumePlayback")]);
    m_resume_playback_isSet = !json[QString("resumePlayback")].isNull() && m_resume_playback_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;
}

QString OAIPlayMediaIntent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayMediaIntent::asJsonObject() const {
    QJsonObject obj;
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_media_items.size() > 0) {
        obj.insert(QString("mediaItems"), ::OpenAPI::toJsonValue(m_media_items));
    }
    if (m_media_search.isSet()) {
        obj.insert(QString("mediaSearch"), ::OpenAPI::toJsonValue(m_media_search));
    }
    if (m_play_shuffled_isSet) {
        obj.insert(QString("playShuffled"), ::OpenAPI::toJsonValue(m_play_shuffled));
    }
    if (m_playback_queue_location.isSet()) {
        obj.insert(QString("playbackQueueLocation"), ::OpenAPI::toJsonValue(m_playback_queue_location));
    }
    if (m_playback_repeat_mode.isSet()) {
        obj.insert(QString("playbackRepeatMode"), ::OpenAPI::toJsonValue(m_playback_repeat_mode));
    }
    if (m_playback_speed_isSet) {
        obj.insert(QString("playbackSpeed"), ::OpenAPI::toJsonValue(m_playback_speed));
    }
    if (m_resume_playback_isSet) {
        obj.insert(QString("resumePlayback"), ::OpenAPI::toJsonValue(m_resume_playback));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    return obj;
}

QString OAIPlayMediaIntent::getRClass() const {
    return m_r_class;
}
void OAIPlayMediaIntent::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIPlayMediaIntent::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIPlayMediaIntent::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QList<OAIMediaItem> OAIPlayMediaIntent::getMediaItems() const {
    return m_media_items;
}
void OAIPlayMediaIntent::setMediaItems(const QList<OAIMediaItem> &media_items) {
    m_media_items = media_items;
    m_media_items_isSet = true;
}

bool OAIPlayMediaIntent::is_media_items_Set() const{
    return m_media_items_isSet;
}

bool OAIPlayMediaIntent::is_media_items_Valid() const{
    return m_media_items_isValid;
}

OAIMediaSearch OAIPlayMediaIntent::getMediaSearch() const {
    return m_media_search;
}
void OAIPlayMediaIntent::setMediaSearch(const OAIMediaSearch &media_search) {
    m_media_search = media_search;
    m_media_search_isSet = true;
}

bool OAIPlayMediaIntent::is_media_search_Set() const{
    return m_media_search_isSet;
}

bool OAIPlayMediaIntent::is_media_search_Valid() const{
    return m_media_search_isValid;
}

bool OAIPlayMediaIntent::isPlayShuffled() const {
    return m_play_shuffled;
}
void OAIPlayMediaIntent::setPlayShuffled(const bool &play_shuffled) {
    m_play_shuffled = play_shuffled;
    m_play_shuffled_isSet = true;
}

bool OAIPlayMediaIntent::is_play_shuffled_Set() const{
    return m_play_shuffled_isSet;
}

bool OAIPlayMediaIntent::is_play_shuffled_Valid() const{
    return m_play_shuffled_isValid;
}

OAIPlaybackQueueLocation OAIPlayMediaIntent::getPlaybackQueueLocation() const {
    return m_playback_queue_location;
}
void OAIPlayMediaIntent::setPlaybackQueueLocation(const OAIPlaybackQueueLocation &playback_queue_location) {
    m_playback_queue_location = playback_queue_location;
    m_playback_queue_location_isSet = true;
}

bool OAIPlayMediaIntent::is_playback_queue_location_Set() const{
    return m_playback_queue_location_isSet;
}

bool OAIPlayMediaIntent::is_playback_queue_location_Valid() const{
    return m_playback_queue_location_isValid;
}

OAIPlaybackRepeatMode OAIPlayMediaIntent::getPlaybackRepeatMode() const {
    return m_playback_repeat_mode;
}
void OAIPlayMediaIntent::setPlaybackRepeatMode(const OAIPlaybackRepeatMode &playback_repeat_mode) {
    m_playback_repeat_mode = playback_repeat_mode;
    m_playback_repeat_mode_isSet = true;
}

bool OAIPlayMediaIntent::is_playback_repeat_mode_Set() const{
    return m_playback_repeat_mode_isSet;
}

bool OAIPlayMediaIntent::is_playback_repeat_mode_Valid() const{
    return m_playback_repeat_mode_isValid;
}

double OAIPlayMediaIntent::getPlaybackSpeed() const {
    return m_playback_speed;
}
void OAIPlayMediaIntent::setPlaybackSpeed(const double &playback_speed) {
    m_playback_speed = playback_speed;
    m_playback_speed_isSet = true;
}

bool OAIPlayMediaIntent::is_playback_speed_Set() const{
    return m_playback_speed_isSet;
}

bool OAIPlayMediaIntent::is_playback_speed_Valid() const{
    return m_playback_speed_isValid;
}

bool OAIPlayMediaIntent::isResumePlayback() const {
    return m_resume_playback;
}
void OAIPlayMediaIntent::setResumePlayback(const bool &resume_playback) {
    m_resume_playback = resume_playback;
    m_resume_playback_isSet = true;
}

bool OAIPlayMediaIntent::is_resume_playback_Set() const{
    return m_resume_playback_isSet;
}

bool OAIPlayMediaIntent::is_resume_playback_Valid() const{
    return m_resume_playback_isValid;
}

QString OAIPlayMediaIntent::getIdentifier() const {
    return m_identifier;
}
void OAIPlayMediaIntent::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIPlayMediaIntent::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIPlayMediaIntent::is_identifier_Valid() const{
    return m_identifier_isValid;
}

bool OAIPlayMediaIntent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_search.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_shuffled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_queue_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_repeat_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_playback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayMediaIntent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && true;
}

} // namespace OpenAPI
