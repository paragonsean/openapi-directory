/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentAttributes::OAIContentAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentAttributes::OAIContentAttributes() {
    this->initializeModel();
}

OAIContentAttributes::~OAIContentAttributes() {}

void OAIContentAttributes::initializeModel() {

    m_album_name_isSet = false;
    m_album_name_isValid = false;

    m_artist_name_isSet = false;
    m_artist_name_isValid = false;

    m_artwork_isSet = false;
    m_artwork_isValid = false;

    m_composer_name_isSet = false;
    m_composer_name_isValid = false;

    m_duration_in_millis_isSet = false;
    m_duration_in_millis_isValid = false;

    m_genre_names_isSet = false;
    m_genre_names_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_track_number_isSet = false;
    m_track_number_isValid = false;
}

void OAIContentAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentAttributes::fromJsonObject(QJsonObject json) {

    m_album_name_isValid = ::OpenAPI::fromJsonValue(m_album_name, json[QString("albumName")]);
    m_album_name_isSet = !json[QString("albumName")].isNull() && m_album_name_isValid;

    m_artist_name_isValid = ::OpenAPI::fromJsonValue(m_artist_name, json[QString("artistName")]);
    m_artist_name_isSet = !json[QString("artistName")].isNull() && m_artist_name_isValid;

    m_artwork_isValid = ::OpenAPI::fromJsonValue(m_artwork, json[QString("artwork")]);
    m_artwork_isSet = !json[QString("artwork")].isNull() && m_artwork_isValid;

    m_composer_name_isValid = ::OpenAPI::fromJsonValue(m_composer_name, json[QString("composerName")]);
    m_composer_name_isSet = !json[QString("composerName")].isNull() && m_composer_name_isValid;

    m_duration_in_millis_isValid = ::OpenAPI::fromJsonValue(m_duration_in_millis, json[QString("durationInMillis")]);
    m_duration_in_millis_isSet = !json[QString("durationInMillis")].isNull() && m_duration_in_millis_isValid;

    m_genre_names_isValid = ::OpenAPI::fromJsonValue(m_genre_names, json[QString("genreNames")]);
    m_genre_names_isSet = !json[QString("genreNames")].isNull() && m_genre_names_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_track_number_isValid = ::OpenAPI::fromJsonValue(m_track_number, json[QString("trackNumber")]);
    m_track_number_isSet = !json[QString("trackNumber")].isNull() && m_track_number_isValid;
}

QString OAIContentAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_album_name_isSet) {
        obj.insert(QString("albumName"), ::OpenAPI::toJsonValue(m_album_name));
    }
    if (m_artist_name_isSet) {
        obj.insert(QString("artistName"), ::OpenAPI::toJsonValue(m_artist_name));
    }
    if (m_artwork.isSet()) {
        obj.insert(QString("artwork"), ::OpenAPI::toJsonValue(m_artwork));
    }
    if (m_composer_name_isSet) {
        obj.insert(QString("composerName"), ::OpenAPI::toJsonValue(m_composer_name));
    }
    if (m_duration_in_millis_isSet) {
        obj.insert(QString("durationInMillis"), ::OpenAPI::toJsonValue(m_duration_in_millis));
    }
    if (m_genre_names.size() > 0) {
        obj.insert(QString("genreNames"), ::OpenAPI::toJsonValue(m_genre_names));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_track_number_isSet) {
        obj.insert(QString("trackNumber"), ::OpenAPI::toJsonValue(m_track_number));
    }
    return obj;
}

QString OAIContentAttributes::getAlbumName() const {
    return m_album_name;
}
void OAIContentAttributes::setAlbumName(const QString &album_name) {
    m_album_name = album_name;
    m_album_name_isSet = true;
}

bool OAIContentAttributes::is_album_name_Set() const{
    return m_album_name_isSet;
}

bool OAIContentAttributes::is_album_name_Valid() const{
    return m_album_name_isValid;
}

QString OAIContentAttributes::getArtistName() const {
    return m_artist_name;
}
void OAIContentAttributes::setArtistName(const QString &artist_name) {
    m_artist_name = artist_name;
    m_artist_name_isSet = true;
}

bool OAIContentAttributes::is_artist_name_Set() const{
    return m_artist_name_isSet;
}

bool OAIContentAttributes::is_artist_name_Valid() const{
    return m_artist_name_isValid;
}

OAIContentAttributes_artwork OAIContentAttributes::getArtwork() const {
    return m_artwork;
}
void OAIContentAttributes::setArtwork(const OAIContentAttributes_artwork &artwork) {
    m_artwork = artwork;
    m_artwork_isSet = true;
}

bool OAIContentAttributes::is_artwork_Set() const{
    return m_artwork_isSet;
}

bool OAIContentAttributes::is_artwork_Valid() const{
    return m_artwork_isValid;
}

QString OAIContentAttributes::getComposerName() const {
    return m_composer_name;
}
void OAIContentAttributes::setComposerName(const QString &composer_name) {
    m_composer_name = composer_name;
    m_composer_name_isSet = true;
}

bool OAIContentAttributes::is_composer_name_Set() const{
    return m_composer_name_isSet;
}

bool OAIContentAttributes::is_composer_name_Valid() const{
    return m_composer_name_isValid;
}

qint32 OAIContentAttributes::getDurationInMillis() const {
    return m_duration_in_millis;
}
void OAIContentAttributes::setDurationInMillis(const qint32 &duration_in_millis) {
    m_duration_in_millis = duration_in_millis;
    m_duration_in_millis_isSet = true;
}

bool OAIContentAttributes::is_duration_in_millis_Set() const{
    return m_duration_in_millis_isSet;
}

bool OAIContentAttributes::is_duration_in_millis_Valid() const{
    return m_duration_in_millis_isValid;
}

QList<QString> OAIContentAttributes::getGenreNames() const {
    return m_genre_names;
}
void OAIContentAttributes::setGenreNames(const QList<QString> &genre_names) {
    m_genre_names = genre_names;
    m_genre_names_isSet = true;
}

bool OAIContentAttributes::is_genre_names_Set() const{
    return m_genre_names_isSet;
}

bool OAIContentAttributes::is_genre_names_Valid() const{
    return m_genre_names_isValid;
}

QString OAIContentAttributes::getName() const {
    return m_name;
}
void OAIContentAttributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContentAttributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContentAttributes::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIContentAttributes::getTrackNumber() const {
    return m_track_number;
}
void OAIContentAttributes::setTrackNumber(const qint32 &track_number) {
    m_track_number = track_number;
    m_track_number_isSet = true;
}

bool OAIContentAttributes::is_track_number_Set() const{
    return m_track_number_isSet;
}

bool OAIContentAttributes::is_track_number_Valid() const{
    return m_track_number_isValid;
}

bool OAIContentAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artwork.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_composer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
