/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateActivityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateActivityRequest::OAIUpdateActivityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateActivityRequest::OAIUpdateActivityRequest() {
    this->initializeModel();
}

OAIUpdateActivityRequest::~OAIUpdateActivityRequest() {}

void OAIUpdateActivityRequest::initializeModel() {

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_now_playing_isSet = false;
    m_now_playing_isValid = false;

    m_previously_playing_isSet = false;
    m_previously_playing_isValid = false;

    m_report_isSet = false;
    m_report_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_activity_isSet = false;
    m_user_activity_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUpdateActivityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateActivityRequest::fromJsonObject(QJsonObject json) {

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_now_playing_isValid = ::OpenAPI::fromJsonValue(m_now_playing, json[QString("nowPlaying")]);
    m_now_playing_isSet = !json[QString("nowPlaying")].isNull() && m_now_playing_isValid;

    m_previously_playing_isValid = ::OpenAPI::fromJsonValue(m_previously_playing, json[QString("previouslyPlaying")]);
    m_previously_playing_isSet = !json[QString("previouslyPlaying")].isNull() && m_previously_playing_isValid;

    m_report_isValid = ::OpenAPI::fromJsonValue(m_report, json[QString("report")]);
    m_report_isSet = !json[QString("report")].isNull() && m_report_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_activity_isValid = ::OpenAPI::fromJsonValue(m_user_activity, json[QString("userActivity")]);
    m_user_activity_isSet = !json[QString("userActivity")].isNull() && m_user_activity_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUpdateActivityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateActivityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_constraints.isSet()) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_now_playing.isSet()) {
        obj.insert(QString("nowPlaying"), ::OpenAPI::toJsonValue(m_now_playing));
    }
    if (m_previously_playing.isSet()) {
        obj.insert(QString("previouslyPlaying"), ::OpenAPI::toJsonValue(m_previously_playing));
    }
    if (m_report.isSet()) {
        obj.insert(QString("report"), ::OpenAPI::toJsonValue(m_report));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user_activity.isSet()) {
        obj.insert(QString("userActivity"), ::OpenAPI::toJsonValue(m_user_activity));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIConstraints OAIUpdateActivityRequest::getConstraints() const {
    return m_constraints;
}
void OAIUpdateActivityRequest::setConstraints(const OAIConstraints &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAIUpdateActivityRequest::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAIUpdateActivityRequest::is_constraints_Valid() const{
    return m_constraints_isValid;
}

OAIPlayerContext OAIUpdateActivityRequest::getNowPlaying() const {
    return m_now_playing;
}
void OAIUpdateActivityRequest::setNowPlaying(const OAIPlayerContext &now_playing) {
    m_now_playing = now_playing;
    m_now_playing_isSet = true;
}

bool OAIUpdateActivityRequest::is_now_playing_Set() const{
    return m_now_playing_isSet;
}

bool OAIUpdateActivityRequest::is_now_playing_Valid() const{
    return m_now_playing_isValid;
}

OAIPlayerContext OAIUpdateActivityRequest::getPreviouslyPlaying() const {
    return m_previously_playing;
}
void OAIUpdateActivityRequest::setPreviouslyPlaying(const OAIPlayerContext &previously_playing) {
    m_previously_playing = previously_playing;
    m_previously_playing_isSet = true;
}

bool OAIUpdateActivityRequest::is_previously_playing_Set() const{
    return m_previously_playing_isSet;
}

bool OAIUpdateActivityRequest::is_previously_playing_Valid() const{
    return m_previously_playing_isValid;
}

OAIQueueActivityReportEvent OAIUpdateActivityRequest::getReport() const {
    return m_report;
}
void OAIUpdateActivityRequest::setReport(const OAIQueueActivityReportEvent &report) {
    m_report = report;
    m_report_isSet = true;
}

bool OAIUpdateActivityRequest::is_report_Set() const{
    return m_report_isSet;
}

bool OAIUpdateActivityRequest::is_report_Valid() const{
    return m_report_isValid;
}

QDateTime OAIUpdateActivityRequest::getTimestamp() const {
    return m_timestamp;
}
void OAIUpdateActivityRequest::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIUpdateActivityRequest::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIUpdateActivityRequest::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIUserActivity OAIUpdateActivityRequest::getUserActivity() const {
    return m_user_activity;
}
void OAIUpdateActivityRequest::setUserActivity(const OAIUserActivity &user_activity) {
    m_user_activity = user_activity;
    m_user_activity_isSet = true;
}

bool OAIUpdateActivityRequest::is_user_activity_Set() const{
    return m_user_activity_isSet;
}

bool OAIUpdateActivityRequest::is_user_activity_Valid() const{
    return m_user_activity_isValid;
}

QString OAIUpdateActivityRequest::getVersion() const {
    return m_version;
}
void OAIUpdateActivityRequest::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUpdateActivityRequest::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUpdateActivityRequest::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUpdateActivityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_now_playing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previously_playing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateActivityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_report_isValid && m_timestamp_isValid && m_user_activity_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
