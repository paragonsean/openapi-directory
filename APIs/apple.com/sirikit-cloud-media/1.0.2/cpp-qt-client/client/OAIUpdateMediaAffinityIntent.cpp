/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMediaAffinityIntent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMediaAffinityIntent::OAIUpdateMediaAffinityIntent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMediaAffinityIntent::OAIUpdateMediaAffinityIntent() {
    this->initializeModel();
}

OAIUpdateMediaAffinityIntent::~OAIUpdateMediaAffinityIntent() {}

void OAIUpdateMediaAffinityIntent::initializeModel() {

    m_affinity_type_isSet = false;
    m_affinity_type_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_media_items_isSet = false;
    m_media_items_isValid = false;

    m_media_search_isSet = false;
    m_media_search_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;
}

void OAIUpdateMediaAffinityIntent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMediaAffinityIntent::fromJsonObject(QJsonObject json) {

    m_affinity_type_isValid = ::OpenAPI::fromJsonValue(m_affinity_type, json[QString("affinityType")]);
    m_affinity_type_isSet = !json[QString("affinityType")].isNull() && m_affinity_type_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_media_items_isValid = ::OpenAPI::fromJsonValue(m_media_items, json[QString("mediaItems")]);
    m_media_items_isSet = !json[QString("mediaItems")].isNull() && m_media_items_isValid;

    m_media_search_isValid = ::OpenAPI::fromJsonValue(m_media_search, json[QString("mediaSearch")]);
    m_media_search_isSet = !json[QString("mediaSearch")].isNull() && m_media_search_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;
}

QString OAIUpdateMediaAffinityIntent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMediaAffinityIntent::asJsonObject() const {
    QJsonObject obj;
    if (m_affinity_type.isSet()) {
        obj.insert(QString("affinityType"), ::OpenAPI::toJsonValue(m_affinity_type));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_media_items.size() > 0) {
        obj.insert(QString("mediaItems"), ::OpenAPI::toJsonValue(m_media_items));
    }
    if (m_media_search.isSet()) {
        obj.insert(QString("mediaSearch"), ::OpenAPI::toJsonValue(m_media_search));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    return obj;
}

OAIMediaAffinityType OAIUpdateMediaAffinityIntent::getAffinityType() const {
    return m_affinity_type;
}
void OAIUpdateMediaAffinityIntent::setAffinityType(const OAIMediaAffinityType &affinity_type) {
    m_affinity_type = affinity_type;
    m_affinity_type_isSet = true;
}

bool OAIUpdateMediaAffinityIntent::is_affinity_type_Set() const{
    return m_affinity_type_isSet;
}

bool OAIUpdateMediaAffinityIntent::is_affinity_type_Valid() const{
    return m_affinity_type_isValid;
}

QString OAIUpdateMediaAffinityIntent::getRClass() const {
    return m_r_class;
}
void OAIUpdateMediaAffinityIntent::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIUpdateMediaAffinityIntent::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIUpdateMediaAffinityIntent::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QList<OAIMediaItem> OAIUpdateMediaAffinityIntent::getMediaItems() const {
    return m_media_items;
}
void OAIUpdateMediaAffinityIntent::setMediaItems(const QList<OAIMediaItem> &media_items) {
    m_media_items = media_items;
    m_media_items_isSet = true;
}

bool OAIUpdateMediaAffinityIntent::is_media_items_Set() const{
    return m_media_items_isSet;
}

bool OAIUpdateMediaAffinityIntent::is_media_items_Valid() const{
    return m_media_items_isValid;
}

OAIMediaSearch OAIUpdateMediaAffinityIntent::getMediaSearch() const {
    return m_media_search;
}
void OAIUpdateMediaAffinityIntent::setMediaSearch(const OAIMediaSearch &media_search) {
    m_media_search = media_search;
    m_media_search_isSet = true;
}

bool OAIUpdateMediaAffinityIntent::is_media_search_Set() const{
    return m_media_search_isSet;
}

bool OAIUpdateMediaAffinityIntent::is_media_search_Valid() const{
    return m_media_search_isValid;
}

QString OAIUpdateMediaAffinityIntent::getIdentifier() const {
    return m_identifier;
}
void OAIUpdateMediaAffinityIntent::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIUpdateMediaAffinityIntent::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIUpdateMediaAffinityIntent::is_identifier_Valid() const{
    return m_identifier_isValid;
}

bool OAIUpdateMediaAffinityIntent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affinity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_search.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMediaAffinityIntent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_class_isValid && m_identifier_isValid && true;
}

} // namespace OpenAPI
