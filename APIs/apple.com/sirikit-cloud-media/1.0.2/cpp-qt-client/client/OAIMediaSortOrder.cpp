/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaSortOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaSortOrder::OAIMediaSortOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaSortOrder::OAIMediaSortOrder() {
    this->initializeModel();
}

OAIMediaSortOrder::~OAIMediaSortOrder() {}

void OAIMediaSortOrder::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMediaSortOrder::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMediaSortOrder::fromJson(QString jsonString) {
    
    if ( jsonString.compare("unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaSortOrder::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("newest", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaSortOrder::NEWEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("oldest", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaSortOrder::OLDEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("best", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaSortOrder::BEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("worst", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaSortOrder::WORST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("popular", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaSortOrder::POPULAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unpopular", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaSortOrder::UNPOPULAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("trending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaSortOrder::TRENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("recommended", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaSortOrder::RECOMMENDED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMediaSortOrder::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMediaSortOrder::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMediaSortOrder::UNKNOWN:
            val = "unknown";
            break;
        case eOAIMediaSortOrder::NEWEST:
            val = "newest";
            break;
        case eOAIMediaSortOrder::OLDEST:
            val = "oldest";
            break;
        case eOAIMediaSortOrder::BEST:
            val = "best";
            break;
        case eOAIMediaSortOrder::WORST:
            val = "worst";
            break;
        case eOAIMediaSortOrder::POPULAR:
            val = "popular";
            break;
        case eOAIMediaSortOrder::UNPOPULAR:
            val = "unpopular";
            break;
        case eOAIMediaSortOrder::TRENDING:
            val = "trending";
            break;
        case eOAIMediaSortOrder::RECOMMENDED:
            val = "recommended";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMediaSortOrder::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMediaSortOrder::eOAIMediaSortOrder OAIMediaSortOrder::getValue() const {
    return m_value;
}

void OAIMediaSortOrder::setValue(const OAIMediaSortOrder::eOAIMediaSortOrder& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMediaSortOrder::isSet() const {
    
    return m_value_isSet;
}

bool OAIMediaSortOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
