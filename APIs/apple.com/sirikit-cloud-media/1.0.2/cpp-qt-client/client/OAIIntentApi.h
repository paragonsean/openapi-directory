/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntentApi_H
#define OAI_OAIIntentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddMediaIntentHandlingInvocation.h"
#include "OAIAddMediaIntentHandlingInvocationResponse.h"
#include "OAIPlayMediaIntentHandlingInvocation.h"
#include "OAIPlayMediaIntentHandlingInvocationResponse.h"
#include "OAIUpdateMediaAffinityIntentHandlingInvocation.h"
#include "OAIUpdateMediaAffinityIntentHandlingInvocationResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntentApi : public QObject {
    Q_OBJECT

public:
    OAIIntentApi(const int timeOut = 0);
    ~OAIIntentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_applecloudextension_session_id QString [required]
    * @param[in]  request_timeout double [required]
    * @param[in]  user_agent QString [required]
    * @param[in]  accept_language QString [required]
    * @param[in]  x_applecloudextension_retry_count double [optional]
    * @param[in]  oai_add_media_intent_handling_invocation QList<OAIAddMediaIntentHandlingInvocation> [optional]
    */
    virtual void addMediaIntentHandling(const QString &x_applecloudextension_session_id, const double &request_timeout, const QString &user_agent, const QString &accept_language, const ::OpenAPI::OptionalParam<double> &x_applecloudextension_retry_count = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<OAIAddMediaIntentHandlingInvocation>> &oai_add_media_intent_handling_invocation = ::OpenAPI::OptionalParam<QList<OAIAddMediaIntentHandlingInvocation>>());

    /**
    * @param[in]  x_applecloudextension_session_id QString [required]
    * @param[in]  request_timeout double [required]
    * @param[in]  user_agent QString [required]
    * @param[in]  accept_language QString [required]
    * @param[in]  x_applecloudextension_retry_count double [optional]
    * @param[in]  oai_play_media_intent_handling_invocation QList<OAIPlayMediaIntentHandlingInvocation> [optional]
    */
    virtual void playMediaIntentHandling(const QString &x_applecloudextension_session_id, const double &request_timeout, const QString &user_agent, const QString &accept_language, const ::OpenAPI::OptionalParam<double> &x_applecloudextension_retry_count = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<OAIPlayMediaIntentHandlingInvocation>> &oai_play_media_intent_handling_invocation = ::OpenAPI::OptionalParam<QList<OAIPlayMediaIntentHandlingInvocation>>());

    /**
    * @param[in]  x_applecloudextension_session_id QString [required]
    * @param[in]  request_timeout double [required]
    * @param[in]  user_agent QString [required]
    * @param[in]  accept_language QString [required]
    * @param[in]  x_applecloudextension_retry_count double [optional]
    * @param[in]  oai_update_media_affinity_intent_handling_invocation QList<OAIUpdateMediaAffinityIntentHandlingInvocation> [optional]
    */
    virtual void updateMediaAffinityIntentHandling(const QString &x_applecloudextension_session_id, const double &request_timeout, const QString &user_agent, const QString &accept_language, const ::OpenAPI::OptionalParam<double> &x_applecloudextension_retry_count = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<OAIUpdateMediaAffinityIntentHandlingInvocation>> &oai_update_media_affinity_intent_handling_invocation = ::OpenAPI::OptionalParam<QList<OAIUpdateMediaAffinityIntentHandlingInvocation>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addMediaIntentHandlingCallback(OAIHttpRequestWorker *worker);
    void playMediaIntentHandlingCallback(OAIHttpRequestWorker *worker);
    void updateMediaAffinityIntentHandlingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addMediaIntentHandlingSignal(QList<OAIAddMediaIntentHandlingInvocationResponse> summary);
    void playMediaIntentHandlingSignal(QList<OAIPlayMediaIntentHandlingInvocationResponse> summary);
    void updateMediaAffinityIntentHandlingSignal(QList<OAIUpdateMediaAffinityIntentHandlingInvocationResponse> summary);


    void addMediaIntentHandlingSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddMediaIntentHandlingInvocationResponse> summary);
    void playMediaIntentHandlingSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayMediaIntentHandlingInvocationResponse> summary);
    void updateMediaAffinityIntentHandlingSignalFull(OAIHttpRequestWorker *worker, QList<OAIUpdateMediaAffinityIntentHandlingInvocationResponse> summary);

    Q_DECL_DEPRECATED_X("Use addMediaIntentHandlingSignalError() instead")
    void addMediaIntentHandlingSignalE(QList<OAIAddMediaIntentHandlingInvocationResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addMediaIntentHandlingSignalError(QList<OAIAddMediaIntentHandlingInvocationResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playMediaIntentHandlingSignalError() instead")
    void playMediaIntentHandlingSignalE(QList<OAIPlayMediaIntentHandlingInvocationResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playMediaIntentHandlingSignalError(QList<OAIPlayMediaIntentHandlingInvocationResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMediaAffinityIntentHandlingSignalError() instead")
    void updateMediaAffinityIntentHandlingSignalE(QList<OAIUpdateMediaAffinityIntentHandlingInvocationResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMediaAffinityIntentHandlingSignalError(QList<OAIUpdateMediaAffinityIntentHandlingInvocationResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addMediaIntentHandlingSignalErrorFull() instead")
    void addMediaIntentHandlingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addMediaIntentHandlingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playMediaIntentHandlingSignalErrorFull() instead")
    void playMediaIntentHandlingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playMediaIntentHandlingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMediaAffinityIntentHandlingSignalErrorFull() instead")
    void updateMediaAffinityIntentHandlingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMediaAffinityIntentHandlingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
