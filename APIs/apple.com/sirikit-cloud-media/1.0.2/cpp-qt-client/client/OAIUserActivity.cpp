/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserActivity::OAIUserActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserActivity::OAIUserActivity() {
    this->initializeModel();
}

OAIUserActivity::~OAIUserActivity() {}

void OAIUserActivity::initializeModel() {

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_persistent_identifier_isSet = false;
    m_persistent_identifier_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_info_isSet = false;
    m_user_info_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUserActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserActivity::fromJsonObject(QJsonObject json) {

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_persistent_identifier_isValid = ::OpenAPI::fromJsonValue(m_persistent_identifier, json[QString("persistentIdentifier")]);
    m_persistent_identifier_isSet = !json[QString("persistentIdentifier")].isNull() && m_persistent_identifier_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_info_isValid = ::OpenAPI::fromJsonValue(m_user_info, json[QString("userInfo")]);
    m_user_info_isSet = !json[QString("userInfo")].isNull() && m_user_info_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUserActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_type_isSet) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_persistent_identifier_isSet) {
        obj.insert(QString("persistentIdentifier"), ::OpenAPI::toJsonValue(m_persistent_identifier));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_info_isSet) {
        obj.insert(QString("userInfo"), ::OpenAPI::toJsonValue(m_user_info));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIUserActivity::getActivityType() const {
    return m_activity_type;
}
void OAIUserActivity::setActivityType(const QString &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIUserActivity::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIUserActivity::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

QString OAIUserActivity::getPersistentIdentifier() const {
    return m_persistent_identifier;
}
void OAIUserActivity::setPersistentIdentifier(const QString &persistent_identifier) {
    m_persistent_identifier = persistent_identifier;
    m_persistent_identifier_isSet = true;
}

bool OAIUserActivity::is_persistent_identifier_Set() const{
    return m_persistent_identifier_isSet;
}

bool OAIUserActivity::is_persistent_identifier_Valid() const{
    return m_persistent_identifier_isValid;
}

QString OAIUserActivity::getTitle() const {
    return m_title;
}
void OAIUserActivity::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUserActivity::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUserActivity::is_title_Valid() const{
    return m_title_isValid;
}

OAIObject OAIUserActivity::getUserInfo() const {
    return m_user_info;
}
void OAIUserActivity::setUserInfo(const OAIObject &user_info) {
    m_user_info = user_info;
    m_user_info_isSet = true;
}

bool OAIUserActivity::is_user_info_Set() const{
    return m_user_info_isSet;
}

bool OAIUserActivity::is_user_info_Valid() const{
    return m_user_info_isValid;
}

QString OAIUserActivity::getVersion() const {
    return m_version;
}
void OAIUserActivity::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUserActivity::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUserActivity::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUserActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_type_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
