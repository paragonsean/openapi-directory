/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddMediaMediaItemUnsupportedReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddMediaMediaItemUnsupportedReason::OAIAddMediaMediaItemUnsupportedReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddMediaMediaItemUnsupportedReason::OAIAddMediaMediaItemUnsupportedReason() {
    this->initializeModel();
}

OAIAddMediaMediaItemUnsupportedReason::~OAIAddMediaMediaItemUnsupportedReason() {}

void OAIAddMediaMediaItemUnsupportedReason::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAddMediaMediaItemUnsupportedReason::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAddMediaMediaItemUnsupportedReason::fromJson(QString jsonString) {
    
    if ( jsonString.compare("loginRequired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddMediaMediaItemUnsupportedReason::LOGINREQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("subscriptionRequired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddMediaMediaItemUnsupportedReason::SUBSCRIPTIONREQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unsupportedMediaType", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddMediaMediaItemUnsupportedReason::UNSUPPORTEDMEDIATYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("explicitContentSettings", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddMediaMediaItemUnsupportedReason::EXPLICITCONTENTSETTINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("restrictedContent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddMediaMediaItemUnsupportedReason::RESTRICTEDCONTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("regionRestriction", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddMediaMediaItemUnsupportedReason::REGIONRESTRICTION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAddMediaMediaItemUnsupportedReason::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAddMediaMediaItemUnsupportedReason::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAddMediaMediaItemUnsupportedReason::LOGINREQUIRED:
            val = "loginRequired";
            break;
        case eOAIAddMediaMediaItemUnsupportedReason::SUBSCRIPTIONREQUIRED:
            val = "subscriptionRequired";
            break;
        case eOAIAddMediaMediaItemUnsupportedReason::UNSUPPORTEDMEDIATYPE:
            val = "unsupportedMediaType";
            break;
        case eOAIAddMediaMediaItemUnsupportedReason::EXPLICITCONTENTSETTINGS:
            val = "explicitContentSettings";
            break;
        case eOAIAddMediaMediaItemUnsupportedReason::RESTRICTEDCONTENT:
            val = "restrictedContent";
            break;
        case eOAIAddMediaMediaItemUnsupportedReason::REGIONRESTRICTION:
            val = "regionRestriction";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAddMediaMediaItemUnsupportedReason::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAddMediaMediaItemUnsupportedReason::eOAIAddMediaMediaItemUnsupportedReason OAIAddMediaMediaItemUnsupportedReason::getValue() const {
    return m_value;
}

void OAIAddMediaMediaItemUnsupportedReason::setValue(const OAIAddMediaMediaItemUnsupportedReason::eOAIAddMediaMediaItemUnsupportedReason& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAddMediaMediaItemUnsupportedReason::isSet() const {
    
    return m_value_isSet;
}

bool OAIAddMediaMediaItemUnsupportedReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
