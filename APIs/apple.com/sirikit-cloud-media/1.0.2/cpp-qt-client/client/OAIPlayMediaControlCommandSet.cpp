/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayMediaControlCommandSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayMediaControlCommandSet::OAIPlayMediaControlCommandSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayMediaControlCommandSet::OAIPlayMediaControlCommandSet() {
    this->initializeModel();
}

OAIPlayMediaControlCommandSet::~OAIPlayMediaControlCommandSet() {}

void OAIPlayMediaControlCommandSet::initializeModel() {

    m_bookmark_track_isSet = false;
    m_bookmark_track_isValid = false;

    m_dislike_track_isSet = false;
    m_dislike_track_isValid = false;

    m_like_track_isSet = false;
    m_like_track_isValid = false;

    m_next_track_isSet = false;
    m_next_track_isValid = false;

    m_prefer_skip_backward_isSet = false;
    m_prefer_skip_backward_isValid = false;

    m_prefer_skip_forward_isSet = false;
    m_prefer_skip_forward_isValid = false;

    m_previous_track_isSet = false;
    m_previous_track_isValid = false;

    m_seek_to_playback_position_isSet = false;
    m_seek_to_playback_position_isValid = false;

    m_skip_backward_isSet = false;
    m_skip_backward_isValid = false;

    m_skip_forward_isSet = false;
    m_skip_forward_isValid = false;
}

void OAIPlayMediaControlCommandSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayMediaControlCommandSet::fromJsonObject(QJsonObject json) {

    m_bookmark_track_isValid = ::OpenAPI::fromJsonValue(m_bookmark_track, json[QString("bookmarkTrack")]);
    m_bookmark_track_isSet = !json[QString("bookmarkTrack")].isNull() && m_bookmark_track_isValid;

    m_dislike_track_isValid = ::OpenAPI::fromJsonValue(m_dislike_track, json[QString("dislikeTrack")]);
    m_dislike_track_isSet = !json[QString("dislikeTrack")].isNull() && m_dislike_track_isValid;

    m_like_track_isValid = ::OpenAPI::fromJsonValue(m_like_track, json[QString("likeTrack")]);
    m_like_track_isSet = !json[QString("likeTrack")].isNull() && m_like_track_isValid;

    m_next_track_isValid = ::OpenAPI::fromJsonValue(m_next_track, json[QString("nextTrack")]);
    m_next_track_isSet = !json[QString("nextTrack")].isNull() && m_next_track_isValid;

    m_prefer_skip_backward_isValid = ::OpenAPI::fromJsonValue(m_prefer_skip_backward, json[QString("preferSkipBackward")]);
    m_prefer_skip_backward_isSet = !json[QString("preferSkipBackward")].isNull() && m_prefer_skip_backward_isValid;

    m_prefer_skip_forward_isValid = ::OpenAPI::fromJsonValue(m_prefer_skip_forward, json[QString("preferSkipForward")]);
    m_prefer_skip_forward_isSet = !json[QString("preferSkipForward")].isNull() && m_prefer_skip_forward_isValid;

    m_previous_track_isValid = ::OpenAPI::fromJsonValue(m_previous_track, json[QString("previousTrack")]);
    m_previous_track_isSet = !json[QString("previousTrack")].isNull() && m_previous_track_isValid;

    m_seek_to_playback_position_isValid = ::OpenAPI::fromJsonValue(m_seek_to_playback_position, json[QString("seekToPlaybackPosition")]);
    m_seek_to_playback_position_isSet = !json[QString("seekToPlaybackPosition")].isNull() && m_seek_to_playback_position_isValid;

    m_skip_backward_isValid = ::OpenAPI::fromJsonValue(m_skip_backward, json[QString("skipBackward")]);
    m_skip_backward_isSet = !json[QString("skipBackward")].isNull() && m_skip_backward_isValid;

    m_skip_forward_isValid = ::OpenAPI::fromJsonValue(m_skip_forward, json[QString("skipForward")]);
    m_skip_forward_isSet = !json[QString("skipForward")].isNull() && m_skip_forward_isValid;
}

QString OAIPlayMediaControlCommandSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayMediaControlCommandSet::asJsonObject() const {
    QJsonObject obj;
    if (m_bookmark_track_isSet) {
        obj.insert(QString("bookmarkTrack"), ::OpenAPI::toJsonValue(m_bookmark_track));
    }
    if (m_dislike_track_isSet) {
        obj.insert(QString("dislikeTrack"), ::OpenAPI::toJsonValue(m_dislike_track));
    }
    if (m_like_track_isSet) {
        obj.insert(QString("likeTrack"), ::OpenAPI::toJsonValue(m_like_track));
    }
    if (m_next_track_isSet) {
        obj.insert(QString("nextTrack"), ::OpenAPI::toJsonValue(m_next_track));
    }
    if (m_prefer_skip_backward_isSet) {
        obj.insert(QString("preferSkipBackward"), ::OpenAPI::toJsonValue(m_prefer_skip_backward));
    }
    if (m_prefer_skip_forward_isSet) {
        obj.insert(QString("preferSkipForward"), ::OpenAPI::toJsonValue(m_prefer_skip_forward));
    }
    if (m_previous_track_isSet) {
        obj.insert(QString("previousTrack"), ::OpenAPI::toJsonValue(m_previous_track));
    }
    if (m_seek_to_playback_position_isSet) {
        obj.insert(QString("seekToPlaybackPosition"), ::OpenAPI::toJsonValue(m_seek_to_playback_position));
    }
    if (m_skip_backward_isSet) {
        obj.insert(QString("skipBackward"), ::OpenAPI::toJsonValue(m_skip_backward));
    }
    if (m_skip_forward_isSet) {
        obj.insert(QString("skipForward"), ::OpenAPI::toJsonValue(m_skip_forward));
    }
    return obj;
}

bool OAIPlayMediaControlCommandSet::isBookmarkTrack() const {
    return m_bookmark_track;
}
void OAIPlayMediaControlCommandSet::setBookmarkTrack(const bool &bookmark_track) {
    m_bookmark_track = bookmark_track;
    m_bookmark_track_isSet = true;
}

bool OAIPlayMediaControlCommandSet::is_bookmark_track_Set() const{
    return m_bookmark_track_isSet;
}

bool OAIPlayMediaControlCommandSet::is_bookmark_track_Valid() const{
    return m_bookmark_track_isValid;
}

bool OAIPlayMediaControlCommandSet::isDislikeTrack() const {
    return m_dislike_track;
}
void OAIPlayMediaControlCommandSet::setDislikeTrack(const bool &dislike_track) {
    m_dislike_track = dislike_track;
    m_dislike_track_isSet = true;
}

bool OAIPlayMediaControlCommandSet::is_dislike_track_Set() const{
    return m_dislike_track_isSet;
}

bool OAIPlayMediaControlCommandSet::is_dislike_track_Valid() const{
    return m_dislike_track_isValid;
}

bool OAIPlayMediaControlCommandSet::isLikeTrack() const {
    return m_like_track;
}
void OAIPlayMediaControlCommandSet::setLikeTrack(const bool &like_track) {
    m_like_track = like_track;
    m_like_track_isSet = true;
}

bool OAIPlayMediaControlCommandSet::is_like_track_Set() const{
    return m_like_track_isSet;
}

bool OAIPlayMediaControlCommandSet::is_like_track_Valid() const{
    return m_like_track_isValid;
}

bool OAIPlayMediaControlCommandSet::isNextTrack() const {
    return m_next_track;
}
void OAIPlayMediaControlCommandSet::setNextTrack(const bool &next_track) {
    m_next_track = next_track;
    m_next_track_isSet = true;
}

bool OAIPlayMediaControlCommandSet::is_next_track_Set() const{
    return m_next_track_isSet;
}

bool OAIPlayMediaControlCommandSet::is_next_track_Valid() const{
    return m_next_track_isValid;
}

bool OAIPlayMediaControlCommandSet::isPreferSkipBackward() const {
    return m_prefer_skip_backward;
}
void OAIPlayMediaControlCommandSet::setPreferSkipBackward(const bool &prefer_skip_backward) {
    m_prefer_skip_backward = prefer_skip_backward;
    m_prefer_skip_backward_isSet = true;
}

bool OAIPlayMediaControlCommandSet::is_prefer_skip_backward_Set() const{
    return m_prefer_skip_backward_isSet;
}

bool OAIPlayMediaControlCommandSet::is_prefer_skip_backward_Valid() const{
    return m_prefer_skip_backward_isValid;
}

bool OAIPlayMediaControlCommandSet::isPreferSkipForward() const {
    return m_prefer_skip_forward;
}
void OAIPlayMediaControlCommandSet::setPreferSkipForward(const bool &prefer_skip_forward) {
    m_prefer_skip_forward = prefer_skip_forward;
    m_prefer_skip_forward_isSet = true;
}

bool OAIPlayMediaControlCommandSet::is_prefer_skip_forward_Set() const{
    return m_prefer_skip_forward_isSet;
}

bool OAIPlayMediaControlCommandSet::is_prefer_skip_forward_Valid() const{
    return m_prefer_skip_forward_isValid;
}

bool OAIPlayMediaControlCommandSet::isPreviousTrack() const {
    return m_previous_track;
}
void OAIPlayMediaControlCommandSet::setPreviousTrack(const bool &previous_track) {
    m_previous_track = previous_track;
    m_previous_track_isSet = true;
}

bool OAIPlayMediaControlCommandSet::is_previous_track_Set() const{
    return m_previous_track_isSet;
}

bool OAIPlayMediaControlCommandSet::is_previous_track_Valid() const{
    return m_previous_track_isValid;
}

bool OAIPlayMediaControlCommandSet::isSeekToPlaybackPosition() const {
    return m_seek_to_playback_position;
}
void OAIPlayMediaControlCommandSet::setSeekToPlaybackPosition(const bool &seek_to_playback_position) {
    m_seek_to_playback_position = seek_to_playback_position;
    m_seek_to_playback_position_isSet = true;
}

bool OAIPlayMediaControlCommandSet::is_seek_to_playback_position_Set() const{
    return m_seek_to_playback_position_isSet;
}

bool OAIPlayMediaControlCommandSet::is_seek_to_playback_position_Valid() const{
    return m_seek_to_playback_position_isValid;
}

bool OAIPlayMediaControlCommandSet::isSkipBackward() const {
    return m_skip_backward;
}
void OAIPlayMediaControlCommandSet::setSkipBackward(const bool &skip_backward) {
    m_skip_backward = skip_backward;
    m_skip_backward_isSet = true;
}

bool OAIPlayMediaControlCommandSet::is_skip_backward_Set() const{
    return m_skip_backward_isSet;
}

bool OAIPlayMediaControlCommandSet::is_skip_backward_Valid() const{
    return m_skip_backward_isValid;
}

bool OAIPlayMediaControlCommandSet::isSkipForward() const {
    return m_skip_forward;
}
void OAIPlayMediaControlCommandSet::setSkipForward(const bool &skip_forward) {
    m_skip_forward = skip_forward;
    m_skip_forward_isSet = true;
}

bool OAIPlayMediaControlCommandSet::is_skip_forward_Set() const{
    return m_skip_forward_isSet;
}

bool OAIPlayMediaControlCommandSet::is_skip_forward_Valid() const{
    return m_skip_forward_isValid;
}

bool OAIPlayMediaControlCommandSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bookmark_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dislike_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_like_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefer_skip_backward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefer_skip_forward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seek_to_playback_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_backward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_forward_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayMediaControlCommandSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
