/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtocolException.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtocolException::OAIProtocolException(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtocolException::OAIProtocolException() {
    this->initializeModel();
}

OAIProtocolException::~OAIProtocolException() {}

void OAIProtocolException::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_method_index_isSet = false;
    m_method_index_isValid = false;

    m_method_name_isSet = false;
    m_method_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_retry_with_delay_isSet = false;
    m_retry_with_delay_isValid = false;

    m_trace_isSet = false;
    m_trace_isValid = false;
}

void OAIProtocolException::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtocolException::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_method_index_isValid = ::OpenAPI::fromJsonValue(m_method_index, json[QString("methodIndex")]);
    m_method_index_isSet = !json[QString("methodIndex")].isNull() && m_method_index_isValid;

    m_method_name_isValid = ::OpenAPI::fromJsonValue(m_method_name, json[QString("methodName")]);
    m_method_name_isSet = !json[QString("methodName")].isNull() && m_method_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_retry_with_delay_isValid = ::OpenAPI::fromJsonValue(m_retry_with_delay, json[QString("retryWithDelay")]);
    m_retry_with_delay_isSet = !json[QString("retryWithDelay")].isNull() && m_retry_with_delay_isValid;

    m_trace_isValid = ::OpenAPI::fromJsonValue(m_trace, json[QString("trace")]);
    m_trace_isSet = !json[QString("trace")].isNull() && m_trace_isValid;
}

QString OAIProtocolException::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtocolException::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_method_index_isSet) {
        obj.insert(QString("methodIndex"), ::OpenAPI::toJsonValue(m_method_index));
    }
    if (m_method_name_isSet) {
        obj.insert(QString("methodName"), ::OpenAPI::toJsonValue(m_method_name));
    }
    if (m_reason.isSet()) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_retry_with_delay_isSet) {
        obj.insert(QString("retryWithDelay"), ::OpenAPI::toJsonValue(m_retry_with_delay));
    }
    if (m_trace.size() > 0) {
        obj.insert(QString("trace"), ::OpenAPI::toJsonValue(m_trace));
    }
    return obj;
}

qint64 OAIProtocolException::getCode() const {
    return m_code;
}
void OAIProtocolException::setCode(const qint64 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIProtocolException::is_code_Set() const{
    return m_code_isSet;
}

bool OAIProtocolException::is_code_Valid() const{
    return m_code_isValid;
}

qint32 OAIProtocolException::getMethodIndex() const {
    return m_method_index;
}
void OAIProtocolException::setMethodIndex(const qint32 &method_index) {
    m_method_index = method_index;
    m_method_index_isSet = true;
}

bool OAIProtocolException::is_method_index_Set() const{
    return m_method_index_isSet;
}

bool OAIProtocolException::is_method_index_Valid() const{
    return m_method_index_isValid;
}

QString OAIProtocolException::getMethodName() const {
    return m_method_name;
}
void OAIProtocolException::setMethodName(const QString &method_name) {
    m_method_name = method_name;
    m_method_name_isSet = true;
}

bool OAIProtocolException::is_method_name_Set() const{
    return m_method_name_isSet;
}

bool OAIProtocolException::is_method_name_Valid() const{
    return m_method_name_isValid;
}

OAIProtocolExceptionReason OAIProtocolException::getReason() const {
    return m_reason;
}
void OAIProtocolException::setReason(const OAIProtocolExceptionReason &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIProtocolException::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIProtocolException::is_reason_Valid() const{
    return m_reason_isValid;
}

float OAIProtocolException::getRetryWithDelay() const {
    return m_retry_with_delay;
}
void OAIProtocolException::setRetryWithDelay(const float &retry_with_delay) {
    m_retry_with_delay = retry_with_delay;
    m_retry_with_delay_isSet = true;
}

bool OAIProtocolException::is_retry_with_delay_Set() const{
    return m_retry_with_delay_isSet;
}

bool OAIProtocolException::is_retry_with_delay_Valid() const{
    return m_retry_with_delay_isValid;
}

QList<QString> OAIProtocolException::getTrace() const {
    return m_trace;
}
void OAIProtocolException::setTrace(const QList<QString> &trace) {
    m_trace = trace;
    m_trace_isSet = true;
}

bool OAIProtocolException::is_trace_Set() const{
    return m_trace_isSet;
}

bool OAIProtocolException::is_trace_Valid() const{
    return m_trace_isValid;
}

bool OAIProtocolException::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_with_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtocolException::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reason_isValid && true;
}

} // namespace OpenAPI
