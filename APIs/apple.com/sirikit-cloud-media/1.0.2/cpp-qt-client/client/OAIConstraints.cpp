/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConstraints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConstraints::OAIConstraints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConstraints::OAIConstraints() {
    this->initializeModel();
}

OAIConstraints::~OAIConstraints() {}

void OAIConstraints::initializeModel() {

    m_allow_explicit_content_isSet = false;
    m_allow_explicit_content_isValid = false;

    m_maximum_queue_segment_item_count_isSet = false;
    m_maximum_queue_segment_item_count_isValid = false;

    m_update_user_taste_profile_isSet = false;
    m_update_user_taste_profile_isValid = false;
}

void OAIConstraints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConstraints::fromJsonObject(QJsonObject json) {

    m_allow_explicit_content_isValid = ::OpenAPI::fromJsonValue(m_allow_explicit_content, json[QString("allowExplicitContent")]);
    m_allow_explicit_content_isSet = !json[QString("allowExplicitContent")].isNull() && m_allow_explicit_content_isValid;

    m_maximum_queue_segment_item_count_isValid = ::OpenAPI::fromJsonValue(m_maximum_queue_segment_item_count, json[QString("maximumQueueSegmentItemCount")]);
    m_maximum_queue_segment_item_count_isSet = !json[QString("maximumQueueSegmentItemCount")].isNull() && m_maximum_queue_segment_item_count_isValid;

    m_update_user_taste_profile_isValid = ::OpenAPI::fromJsonValue(m_update_user_taste_profile, json[QString("updateUserTasteProfile")]);
    m_update_user_taste_profile_isSet = !json[QString("updateUserTasteProfile")].isNull() && m_update_user_taste_profile_isValid;
}

QString OAIConstraints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConstraints::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_explicit_content_isSet) {
        obj.insert(QString("allowExplicitContent"), ::OpenAPI::toJsonValue(m_allow_explicit_content));
    }
    if (m_maximum_queue_segment_item_count_isSet) {
        obj.insert(QString("maximumQueueSegmentItemCount"), ::OpenAPI::toJsonValue(m_maximum_queue_segment_item_count));
    }
    if (m_update_user_taste_profile_isSet) {
        obj.insert(QString("updateUserTasteProfile"), ::OpenAPI::toJsonValue(m_update_user_taste_profile));
    }
    return obj;
}

bool OAIConstraints::isAllowExplicitContent() const {
    return m_allow_explicit_content;
}
void OAIConstraints::setAllowExplicitContent(const bool &allow_explicit_content) {
    m_allow_explicit_content = allow_explicit_content;
    m_allow_explicit_content_isSet = true;
}

bool OAIConstraints::is_allow_explicit_content_Set() const{
    return m_allow_explicit_content_isSet;
}

bool OAIConstraints::is_allow_explicit_content_Valid() const{
    return m_allow_explicit_content_isValid;
}

qint32 OAIConstraints::getMaximumQueueSegmentItemCount() const {
    return m_maximum_queue_segment_item_count;
}
void OAIConstraints::setMaximumQueueSegmentItemCount(const qint32 &maximum_queue_segment_item_count) {
    m_maximum_queue_segment_item_count = maximum_queue_segment_item_count;
    m_maximum_queue_segment_item_count_isSet = true;
}

bool OAIConstraints::is_maximum_queue_segment_item_count_Set() const{
    return m_maximum_queue_segment_item_count_isSet;
}

bool OAIConstraints::is_maximum_queue_segment_item_count_Valid() const{
    return m_maximum_queue_segment_item_count_isValid;
}

bool OAIConstraints::isUpdateUserTasteProfile() const {
    return m_update_user_taste_profile;
}
void OAIConstraints::setUpdateUserTasteProfile(const bool &update_user_taste_profile) {
    m_update_user_taste_profile = update_user_taste_profile;
    m_update_user_taste_profile_isSet = true;
}

bool OAIConstraints::is_update_user_taste_profile_Set() const{
    return m_update_user_taste_profile_isSet;
}

bool OAIConstraints::is_update_user_taste_profile_Valid() const{
    return m_update_user_taste_profile_isValid;
}

bool OAIConstraints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_explicit_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_queue_segment_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_user_taste_profile_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConstraints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
