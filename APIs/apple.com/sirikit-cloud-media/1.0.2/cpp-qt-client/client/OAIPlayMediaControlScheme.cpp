/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayMediaControlScheme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayMediaControlScheme::OAIPlayMediaControlScheme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayMediaControlScheme::OAIPlayMediaControlScheme() {
    this->initializeModel();
}

OAIPlayMediaControlScheme::~OAIPlayMediaControlScheme() {}

void OAIPlayMediaControlScheme::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPlayMediaControlScheme::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPlayMediaControlScheme::fromJson(QString jsonString) {
    
    if ( jsonString.compare("custom", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaControlScheme::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("onDemand", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaControlScheme::ONDEMAND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("internetRadio", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaControlScheme::INTERNETRADIO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("liveStreaming", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaControlScheme::LIVESTREAMING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("audioBook", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaControlScheme::AUDIOBOOK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("podcast", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaControlScheme::PODCAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("advertisement", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayMediaControlScheme::ADVERTISEMENT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPlayMediaControlScheme::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPlayMediaControlScheme::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPlayMediaControlScheme::CUSTOM:
            val = "custom";
            break;
        case eOAIPlayMediaControlScheme::ONDEMAND:
            val = "onDemand";
            break;
        case eOAIPlayMediaControlScheme::INTERNETRADIO:
            val = "internetRadio";
            break;
        case eOAIPlayMediaControlScheme::LIVESTREAMING:
            val = "liveStreaming";
            break;
        case eOAIPlayMediaControlScheme::AUDIOBOOK:
            val = "audioBook";
            break;
        case eOAIPlayMediaControlScheme::PODCAST:
            val = "podcast";
            break;
        case eOAIPlayMediaControlScheme::ADVERTISEMENT:
            val = "advertisement";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPlayMediaControlScheme::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPlayMediaControlScheme::eOAIPlayMediaControlScheme OAIPlayMediaControlScheme::getValue() const {
    return m_value;
}

void OAIPlayMediaControlScheme::setValue(const OAIPlayMediaControlScheme::eOAIPlayMediaControlScheme& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPlayMediaControlScheme::isSet() const {
    
    return m_value_isSet;
}

bool OAIPlayMediaControlScheme::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
