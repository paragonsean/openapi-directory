/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaItem::OAIMediaItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaItem::OAIMediaItem() {
    this->initializeModel();
}

OAIMediaItem::~OAIMediaItem() {}

void OAIMediaItem::initializeModel() {

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMediaItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaItem::fromJsonObject(QJsonObject json) {

    m_artist_isValid = ::OpenAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMediaItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaItem::asJsonObject() const {
    QJsonObject obj;
    if (m_artist_isSet) {
        obj.insert(QString("artist"), ::OpenAPI::toJsonValue(m_artist));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIMediaItem::getArtist() const {
    return m_artist;
}
void OAIMediaItem::setArtist(const QString &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool OAIMediaItem::is_artist_Set() const{
    return m_artist_isSet;
}

bool OAIMediaItem::is_artist_Valid() const{
    return m_artist_isValid;
}

QString OAIMediaItem::getIdentifier() const {
    return m_identifier;
}
void OAIMediaItem::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIMediaItem::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIMediaItem::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIMediaItem::getTitle() const {
    return m_title;
}
void OAIMediaItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMediaItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMediaItem::is_title_Valid() const{
    return m_title_isValid;
}

OAIMediaItemType OAIMediaItem::getType() const {
    return m_type;
}
void OAIMediaItem::setType(const OAIMediaItemType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMediaItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMediaItem::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMediaItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
