/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueue.h
 *
 * 
 */

#ifndef OAIQueue_H
#define OAIQueue_H

#include <QJsonObject>

#include "OAIContent.h"
#include "OAIQueueControlMapping.h"
#include "OAIQueueInsertPointer.h"
#include "OAIQueuePlayPointer.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContent;
class OAIQueueInsertPointer;
class OAIQueuePlayPointer;

class OAIQueue : public OAIObject {
public:
    OAIQueue();
    OAIQueue(QString json);
    ~OAIQueue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIContent> getContent() const;
    void setContent(const QList<OAIContent> &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    qint32 getContentItemsCount() const;
    void setContentItemsCount(const qint32 &content_items_count);
    bool is_content_items_count_Set() const;
    bool is_content_items_count_Valid() const;

    OAIQueueControlMapping getControls() const;
    void setControls(const OAIQueueControlMapping &controls);
    bool is_controls_Set() const;
    bool is_controls_Valid() const;

    QString getIdentifier() const;
    void setIdentifier(const QString &identifier);
    bool is_identifier_Set() const;
    bool is_identifier_Valid() const;

    OAIQueueInsertPointer getInsertPointer() const;
    void setInsertPointer(const OAIQueueInsertPointer &insert_pointer);
    bool is_insert_pointer_Set() const;
    bool is_insert_pointer_Valid() const;

    QString getNextContentUrl() const;
    void setNextContentUrl(const QString &next_content_url);
    bool is_next_content_url_Set() const;
    bool is_next_content_url_Valid() const;

    OAIQueuePlayPointer getPlayPointer() const;
    void setPlayPointer(const OAIQueuePlayPointer &play_pointer);
    bool is_play_pointer_Set() const;
    bool is_play_pointer_Valid() const;

    double getPrerollSeconds() const;
    void setPrerollSeconds(const double &preroll_seconds);
    bool is_preroll_seconds_Set() const;
    bool is_preroll_seconds_Valid() const;

    QString getPreviousContentUrl() const;
    void setPreviousContentUrl(const QString &previous_content_url);
    bool is_previous_content_url_Set() const;
    bool is_previous_content_url_Valid() const;

    qint32 getSkipsRemaining() const;
    void setSkipsRemaining(const qint32 &skips_remaining);
    bool is_skips_remaining_Set() const;
    bool is_skips_remaining_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIContent> m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    qint32 m_content_items_count;
    bool m_content_items_count_isSet;
    bool m_content_items_count_isValid;

    OAIQueueControlMapping m_controls;
    bool m_controls_isSet;
    bool m_controls_isValid;

    QString m_identifier;
    bool m_identifier_isSet;
    bool m_identifier_isValid;

    OAIQueueInsertPointer m_insert_pointer;
    bool m_insert_pointer_isSet;
    bool m_insert_pointer_isValid;

    QString m_next_content_url;
    bool m_next_content_url_isSet;
    bool m_next_content_url_isValid;

    OAIQueuePlayPointer m_play_pointer;
    bool m_play_pointer_isSet;
    bool m_play_pointer_isValid;

    double m_preroll_seconds;
    bool m_preroll_seconds_isSet;
    bool m_preroll_seconds_isValid;

    QString m_previous_content_url;
    bool m_previous_content_url_isSet;
    bool m_previous_content_url_isValid;

    qint32 m_skips_remaining;
    bool m_skips_remaining_isSet;
    bool m_skips_remaining_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueue)

#endif // OAIQueue_H
