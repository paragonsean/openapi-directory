/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddMediaIntentHandlingInvocation from '../model/AddMediaIntentHandlingInvocation';
import AddMediaIntentHandlingInvocationResponse from '../model/AddMediaIntentHandlingInvocationResponse';
import PlayMediaIntentHandlingInvocation from '../model/PlayMediaIntentHandlingInvocation';
import PlayMediaIntentHandlingInvocationResponse from '../model/PlayMediaIntentHandlingInvocationResponse';
import UpdateMediaAffinityIntentHandlingInvocation from '../model/UpdateMediaAffinityIntentHandlingInvocation';
import UpdateMediaAffinityIntentHandlingInvocationResponse from '../model/UpdateMediaAffinityIntentHandlingInvocationResponse';

/**
* Intent service.
* @module api/IntentApi
* @version 1.0.2
*/
export default class IntentApi {

    /**
    * Constructs a new IntentApi. 
    * @alias module:api/IntentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addMediaIntentHandling operation.
     * @callback module:api/IntentApi~addMediaIntentHandlingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddMediaIntentHandlingInvocationResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addMedia
     * @param {String} xApplecloudextensionSessionId 
     * @param {Number} requestTimeout 
     * @param {String} userAgent 
     * @param {String} acceptLanguage 
     * @param {Object} opts Optional parameters
     * @param {Number} [xApplecloudextensionRetryCount] 
     * @param {Array.<module:model/AddMediaIntentHandlingInvocation>} [addMediaIntentHandlingInvocation] 
     * @param {module:api/IntentApi~addMediaIntentHandlingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddMediaIntentHandlingInvocationResponse>}
     */
    addMediaIntentHandling(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, opts, callback) {
      opts = opts || {};
      let postBody = opts['addMediaIntentHandlingInvocation'];
      // verify the required parameter 'xApplecloudextensionSessionId' is set
      if (xApplecloudextensionSessionId === undefined || xApplecloudextensionSessionId === null) {
        throw new Error("Missing the required parameter 'xApplecloudextensionSessionId' when calling addMediaIntentHandling");
      }
      // verify the required parameter 'requestTimeout' is set
      if (requestTimeout === undefined || requestTimeout === null) {
        throw new Error("Missing the required parameter 'requestTimeout' when calling addMediaIntentHandling");
      }
      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling addMediaIntentHandling");
      }
      // verify the required parameter 'acceptLanguage' is set
      if (acceptLanguage === undefined || acceptLanguage === null) {
        throw new Error("Missing the required parameter 'acceptLanguage' when calling addMediaIntentHandling");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-applecloudextension-session-id': xApplecloudextensionSessionId,
        'x-applecloudextension-retry-count': opts['xApplecloudextensionRetryCount'],
        'Request-Timeout': requestTimeout,
        'User-Agent': userAgent,
        'Accept-Language': acceptLanguage
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AddMediaIntentHandlingInvocationResponse];
      return this.apiClient.callApi(
        '/intent/addMedia', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playMediaIntentHandling operation.
     * @callback module:api/IntentApi~playMediaIntentHandlingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayMediaIntentHandlingInvocationResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * playMedia
     * @param {String} xApplecloudextensionSessionId 
     * @param {Number} requestTimeout 
     * @param {String} userAgent 
     * @param {String} acceptLanguage 
     * @param {Object} opts Optional parameters
     * @param {Number} [xApplecloudextensionRetryCount] 
     * @param {Array.<module:model/PlayMediaIntentHandlingInvocation>} [playMediaIntentHandlingInvocation] 
     * @param {module:api/IntentApi~playMediaIntentHandlingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayMediaIntentHandlingInvocationResponse>}
     */
    playMediaIntentHandling(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, opts, callback) {
      opts = opts || {};
      let postBody = opts['playMediaIntentHandlingInvocation'];
      // verify the required parameter 'xApplecloudextensionSessionId' is set
      if (xApplecloudextensionSessionId === undefined || xApplecloudextensionSessionId === null) {
        throw new Error("Missing the required parameter 'xApplecloudextensionSessionId' when calling playMediaIntentHandling");
      }
      // verify the required parameter 'requestTimeout' is set
      if (requestTimeout === undefined || requestTimeout === null) {
        throw new Error("Missing the required parameter 'requestTimeout' when calling playMediaIntentHandling");
      }
      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling playMediaIntentHandling");
      }
      // verify the required parameter 'acceptLanguage' is set
      if (acceptLanguage === undefined || acceptLanguage === null) {
        throw new Error("Missing the required parameter 'acceptLanguage' when calling playMediaIntentHandling");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-applecloudextension-session-id': xApplecloudextensionSessionId,
        'x-applecloudextension-retry-count': opts['xApplecloudextensionRetryCount'],
        'Request-Timeout': requestTimeout,
        'User-Agent': userAgent,
        'Accept-Language': acceptLanguage
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PlayMediaIntentHandlingInvocationResponse];
      return this.apiClient.callApi(
        '/intent/playMedia', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMediaAffinityIntentHandling operation.
     * @callback module:api/IntentApi~updateMediaAffinityIntentHandlingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpdateMediaAffinityIntentHandlingInvocationResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMediaAffinity
     * @param {String} xApplecloudextensionSessionId 
     * @param {Number} requestTimeout 
     * @param {String} userAgent 
     * @param {String} acceptLanguage 
     * @param {Object} opts Optional parameters
     * @param {Number} [xApplecloudextensionRetryCount] 
     * @param {Array.<module:model/UpdateMediaAffinityIntentHandlingInvocation>} [updateMediaAffinityIntentHandlingInvocation] 
     * @param {module:api/IntentApi~updateMediaAffinityIntentHandlingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpdateMediaAffinityIntentHandlingInvocationResponse>}
     */
    updateMediaAffinityIntentHandling(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateMediaAffinityIntentHandlingInvocation'];
      // verify the required parameter 'xApplecloudextensionSessionId' is set
      if (xApplecloudextensionSessionId === undefined || xApplecloudextensionSessionId === null) {
        throw new Error("Missing the required parameter 'xApplecloudextensionSessionId' when calling updateMediaAffinityIntentHandling");
      }
      // verify the required parameter 'requestTimeout' is set
      if (requestTimeout === undefined || requestTimeout === null) {
        throw new Error("Missing the required parameter 'requestTimeout' when calling updateMediaAffinityIntentHandling");
      }
      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling updateMediaAffinityIntentHandling");
      }
      // verify the required parameter 'acceptLanguage' is set
      if (acceptLanguage === undefined || acceptLanguage === null) {
        throw new Error("Missing the required parameter 'acceptLanguage' when calling updateMediaAffinityIntentHandling");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-applecloudextension-session-id': xApplecloudextensionSessionId,
        'x-applecloudextension-retry-count': opts['xApplecloudextensionRetryCount'],
        'Request-Timeout': requestTimeout,
        'User-Agent': userAgent,
        'Accept-Language': acceptLanguage
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [UpdateMediaAffinityIntentHandlingInvocationResponse];
      return this.apiClient.callApi(
        '/intent/updateMediaAffinity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
