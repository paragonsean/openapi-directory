/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExtensionConfig from '../model/ExtensionConfig';

/**
* Config service.
* @module api/ConfigApi
* @version 1.0.2
*/
export default class ConfigApi {

    /**
    * Constructs a new ConfigApi. 
    * @alias module:api/ConfigApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the extensionConfiguration operation.
     * @callback module:api/ConfigApi~extensionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtensionConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configuration Resource
     * @param {String} xApplecloudextensionSessionId 
     * @param {Number} requestTimeout 
     * @param {String} userAgent 
     * @param {String} acceptLanguage 
     * @param {String} cacheControl 
     * @param {Object} opts Optional parameters
     * @param {Number} [xApplecloudextensionRetryCount] 
     * @param {String} [ifNoneMatch] 
     * @param {module:api/ConfigApi~extensionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtensionConfig}
     */
    extensionConfiguration(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, cacheControl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xApplecloudextensionSessionId' is set
      if (xApplecloudextensionSessionId === undefined || xApplecloudextensionSessionId === null) {
        throw new Error("Missing the required parameter 'xApplecloudextensionSessionId' when calling extensionConfiguration");
      }
      // verify the required parameter 'requestTimeout' is set
      if (requestTimeout === undefined || requestTimeout === null) {
        throw new Error("Missing the required parameter 'requestTimeout' when calling extensionConfiguration");
      }
      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling extensionConfiguration");
      }
      // verify the required parameter 'acceptLanguage' is set
      if (acceptLanguage === undefined || acceptLanguage === null) {
        throw new Error("Missing the required parameter 'acceptLanguage' when calling extensionConfiguration");
      }
      // verify the required parameter 'cacheControl' is set
      if (cacheControl === undefined || cacheControl === null) {
        throw new Error("Missing the required parameter 'cacheControl' when calling extensionConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-applecloudextension-session-id': xApplecloudextensionSessionId,
        'x-applecloudextension-retry-count': opts['xApplecloudextensionRetryCount'],
        'Request-Timeout': requestTimeout,
        'User-Agent': userAgent,
        'Accept-Language': acceptLanguage,
        'If-None-Match': opts['ifNoneMatch'],
        'Cache-Control': cacheControl
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/jose'];
      let returnType = ExtensionConfig;
      return this.apiClient.callApi(
        '/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
