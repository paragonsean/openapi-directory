/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExplicitDateComponents from './ExplicitDateComponents';

/**
 * The DateComponents model module.
 * @module model/DateComponents
 * @version 1.0.2
 */
class DateComponents {
    /**
     * Constructs a new <code>DateComponents</code>.
     * @alias module:model/DateComponents
     * @param {(module:model/Date|module:model/ExplicitDateComponents|module:model/String)} instance The actual instance to initialize DateComponents.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            // validate string
            if (!(typeof instance === 'string')) {
                throw new Error("Invalid value. Must be string. Input: " + JSON.stringify(instance));
            }
            if (!/[0-9]{4}/.test(instance)) {
                throw new Error("Invalid string value. Must conform to /[0-9]{4}/. Input: " + JSON.stringify(instance));
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into String
            errorMessages.push("Failed to construct String: " + err)
        }

        try {
            // validate string
            if (!(typeof instance === 'string')) {
                throw new Error("Invalid value. Must be string. Input: " + JSON.stringify(instance));
            }
            if (!/[0-9]{4}-[0-9]{2}/.test(instance)) {
                throw new Error("Invalid string value. Must conform to /[0-9]{4}-[0-9]{2}/. Input: " + JSON.stringify(instance));
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into String
            errorMessages.push("Failed to construct String: " + err)
        }

        try {
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into Date
            errorMessages.push("Failed to construct Date: " + err)
        }

        try {
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into Date
            errorMessages.push("Failed to construct Date: " + err)
        }

        try {
            if (typeof instance === "ExplicitDateComponents") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ExplicitDateComponents.validateJSON(instance); // throw an exception if no match
                // create ExplicitDateComponents from JS object
                this.actualInstance = ExplicitDateComponents.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ExplicitDateComponents
            errorMessages.push("Failed to construct ExplicitDateComponents: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `DateComponents` with oneOf schemas Date, ExplicitDateComponents, String. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `DateComponents` with oneOf schemas Date, ExplicitDateComponents, String. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>DateComponents</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DateComponents} obj Optional instance to populate.
     * @return {module:model/DateComponents} The populated <code>DateComponents</code> instance.
     */
    static constructFromObject(data, obj) {
        return new DateComponents(data);
    }

    /**
     * Gets the actual instance, which can be <code>Date</code>, <code>ExplicitDateComponents</code>, <code>String</code>.
     * @return {(module:model/Date|module:model/ExplicitDateComponents|module:model/String)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Date</code>, <code>ExplicitDateComponents</code>, <code>String</code>.
     * @param {(module:model/Date|module:model/ExplicitDateComponents|module:model/String)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = DateComponents.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of DateComponents from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/DateComponents} An instance of DateComponents.
     */
    static fromJSON = function(json_string){
        return DateComponents.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} calendarIdentifier
 */
DateComponents.prototype['calendarIdentifier'] = undefined;

/**
 * @member {Number} day
 */
DateComponents.prototype['day'] = undefined;

/**
 * @member {Number} era
 */
DateComponents.prototype['era'] = undefined;

/**
 * @member {Number} hour
 */
DateComponents.prototype['hour'] = undefined;

/**
 * @member {Number} minute
 */
DateComponents.prototype['minute'] = undefined;

/**
 * @member {Number} month
 */
DateComponents.prototype['month'] = undefined;

/**
 * @member {Number} nanosecond
 */
DateComponents.prototype['nanosecond'] = undefined;

/**
 * @member {Number} second
 */
DateComponents.prototype['second'] = undefined;

/**
 * @member {String} timeZone
 */
DateComponents.prototype['timeZone'] = undefined;

/**
 * @member {Number} year
 */
DateComponents.prototype['year'] = undefined;


DateComponents.OneOf = ["Date", "ExplicitDateComponents", "String"];

export default DateComponents;

