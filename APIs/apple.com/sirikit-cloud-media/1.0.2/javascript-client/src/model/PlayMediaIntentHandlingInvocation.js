/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Invocation from './Invocation';
import PlayMediaIntent from './PlayMediaIntent';
import Session from './Session';

/**
 * The PlayMediaIntentHandlingInvocation model module.
 * @module model/PlayMediaIntentHandlingInvocation
 * @version 1.0.2
 */
class PlayMediaIntentHandlingInvocation {
    /**
     * Constructs a new <code>PlayMediaIntentHandlingInvocation</code>.
     * @alias module:model/PlayMediaIntentHandlingInvocation
     * @extends module:model/Invocation
     * @implements module:model/Invocation
     * @param method {module:model/PlayMediaIntentHandlingInvocation.MethodEnum} 
     * @param params {Object} 
     */
    constructor(method, params) { 
        Invocation.initialize(this, method, params);
        PlayMediaIntentHandlingInvocation.initialize(this, method, params);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, method, params) { 
        obj['method'] = method;
        obj['params'] = params;
    }

    /**
     * Constructs a <code>PlayMediaIntentHandlingInvocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayMediaIntentHandlingInvocation} obj Optional instance to populate.
     * @return {module:model/PlayMediaIntentHandlingInvocation} The populated <code>PlayMediaIntentHandlingInvocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayMediaIntentHandlingInvocation();
            Invocation.constructFromObject(data, obj);
            Invocation.constructFromObject(data, obj);

            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayMediaIntentHandlingInvocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayMediaIntentHandlingInvocation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PlayMediaIntentHandlingInvocation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // validate the optional field `params`
        if (data['params']) { // data not null
          Object.validateJSON(data['params']);
        }

        return true;
    }


}

PlayMediaIntentHandlingInvocation.RequiredProperties = ["method", "params"];

/**
 * @member {module:model/PlayMediaIntentHandlingInvocation.MethodEnum} method
 */
PlayMediaIntentHandlingInvocation.prototype['method'] = undefined;

/**
 * @member {Object} params
 */
PlayMediaIntentHandlingInvocation.prototype['params'] = undefined;


// Implement Invocation interface:
/**
 * @member {String} method
 */
Invocation.prototype['method'] = undefined;
/**
 * @member {Object} params
 */
Invocation.prototype['params'] = undefined;
/**
 * @member {module:model/Session} session
 */
Invocation.prototype['session'] = undefined;



/**
 * Allowed values for the <code>method</code> property.
 * @enum {String}
 * @readonly
 */
PlayMediaIntentHandlingInvocation['MethodEnum'] = {

    /**
     * value: "PlayMediaIntentHandling.resolveMediaItems"
     * @const
     */
    "resolveMediaItems": "PlayMediaIntentHandling.resolveMediaItems",

    /**
     * value: "PlayMediaIntentHandling.resolvePlayShuffled"
     * @const
     */
    "resolvePlayShuffled": "PlayMediaIntentHandling.resolvePlayShuffled",

    /**
     * value: "PlayMediaIntentHandling.resolvePlaybackQueueLocation"
     * @const
     */
    "resolvePlaybackQueueLocation": "PlayMediaIntentHandling.resolvePlaybackQueueLocation",

    /**
     * value: "PlayMediaIntentHandling.resolvePlaybackRepeatMode"
     * @const
     */
    "resolvePlaybackRepeatMode": "PlayMediaIntentHandling.resolvePlaybackRepeatMode",

    /**
     * value: "PlayMediaIntentHandling.resolveResumePlayback"
     * @const
     */
    "resolveResumePlayback": "PlayMediaIntentHandling.resolveResumePlayback",

    /**
     * value: "PlayMediaIntentHandling.handle"
     * @const
     */
    "handle": "PlayMediaIntentHandling.handle"
};



export default PlayMediaIntentHandlingInvocation;

