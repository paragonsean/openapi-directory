/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentAttributesArtwork from './ContentAttributesArtwork';

/**
 * The ContentAttributes model module.
 * @module model/ContentAttributes
 * @version 1.0.2
 */
class ContentAttributes {
    /**
     * Constructs a new <code>ContentAttributes</code>.
     * @alias module:model/ContentAttributes
     */
    constructor() { 
        
        ContentAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContentAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentAttributes} obj Optional instance to populate.
     * @return {module:model/ContentAttributes} The populated <code>ContentAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentAttributes();

            if (data.hasOwnProperty('albumName')) {
                obj['albumName'] = ApiClient.convertToType(data['albumName'], 'String');
            }
            if (data.hasOwnProperty('artistName')) {
                obj['artistName'] = ApiClient.convertToType(data['artistName'], 'String');
            }
            if (data.hasOwnProperty('artwork')) {
                obj['artwork'] = ContentAttributesArtwork.constructFromObject(data['artwork']);
            }
            if (data.hasOwnProperty('composerName')) {
                obj['composerName'] = ApiClient.convertToType(data['composerName'], 'String');
            }
            if (data.hasOwnProperty('durationInMillis')) {
                obj['durationInMillis'] = ApiClient.convertToType(data['durationInMillis'], 'Number');
            }
            if (data.hasOwnProperty('genreNames')) {
                obj['genreNames'] = ApiClient.convertToType(data['genreNames'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('trackNumber')) {
                obj['trackNumber'] = ApiClient.convertToType(data['trackNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['albumName'] && !(typeof data['albumName'] === 'string' || data['albumName'] instanceof String)) {
            throw new Error("Expected the field `albumName` to be a primitive type in the JSON string but got " + data['albumName']);
        }
        // ensure the json data is a string
        if (data['artistName'] && !(typeof data['artistName'] === 'string' || data['artistName'] instanceof String)) {
            throw new Error("Expected the field `artistName` to be a primitive type in the JSON string but got " + data['artistName']);
        }
        // validate the optional field `artwork`
        if (data['artwork']) { // data not null
          ContentAttributesArtwork.validateJSON(data['artwork']);
        }
        // ensure the json data is a string
        if (data['composerName'] && !(typeof data['composerName'] === 'string' || data['composerName'] instanceof String)) {
            throw new Error("Expected the field `composerName` to be a primitive type in the JSON string but got " + data['composerName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['genreNames'])) {
            throw new Error("Expected the field `genreNames` to be an array in the JSON data but got " + data['genreNames']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {String} albumName
 */
ContentAttributes.prototype['albumName'] = undefined;

/**
 * @member {String} artistName
 */
ContentAttributes.prototype['artistName'] = undefined;

/**
 * @member {module:model/ContentAttributesArtwork} artwork
 */
ContentAttributes.prototype['artwork'] = undefined;

/**
 * @member {String} composerName
 */
ContentAttributes.prototype['composerName'] = undefined;

/**
 * @member {Number} durationInMillis
 */
ContentAttributes.prototype['durationInMillis'] = undefined;

/**
 * @member {Array.<String>} genreNames
 */
ContentAttributes.prototype['genreNames'] = undefined;

/**
 * @member {String} name
 */
ContentAttributes.prototype['name'] = undefined;

/**
 * @member {Number} trackNumber
 */
ContentAttributes.prototype['trackNumber'] = undefined;






export default ContentAttributes;

