/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Content from './Content';
import QueueControlMapping from './QueueControlMapping';
import QueueInsertPointer from './QueueInsertPointer';
import QueuePlayPointer from './QueuePlayPointer';

/**
 * The Queue model module.
 * @module model/Queue
 * @version 1.0.2
 */
class Queue {
    /**
     * Constructs a new <code>Queue</code>.
     * @alias module:model/Queue
     * @param content {Array.<module:model/Content>} 
     * @param identifier {String} 
     * @param version {String} 
     */
    constructor(content, identifier, version) { 
        
        Queue.initialize(this, content, identifier, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, identifier, version) { 
        obj['content'] = content;
        obj['identifier'] = identifier;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>Queue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Queue} obj Optional instance to populate.
     * @return {module:model/Queue} The populated <code>Queue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Queue();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], [Content]);
            }
            if (data.hasOwnProperty('contentItemsCount')) {
                obj['contentItemsCount'] = ApiClient.convertToType(data['contentItemsCount'], 'Number');
            }
            if (data.hasOwnProperty('controls')) {
                obj['controls'] = QueueControlMapping.constructFromObject(data['controls']);
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('insertPointer')) {
                obj['insertPointer'] = QueueInsertPointer.constructFromObject(data['insertPointer']);
            }
            if (data.hasOwnProperty('nextContentUrl')) {
                obj['nextContentUrl'] = ApiClient.convertToType(data['nextContentUrl'], 'String');
            }
            if (data.hasOwnProperty('playPointer')) {
                obj['playPointer'] = QueuePlayPointer.constructFromObject(data['playPointer']);
            }
            if (data.hasOwnProperty('prerollSeconds')) {
                obj['prerollSeconds'] = ApiClient.convertToType(data['prerollSeconds'], 'Number');
            }
            if (data.hasOwnProperty('previousContentUrl')) {
                obj['previousContentUrl'] = ApiClient.convertToType(data['previousContentUrl'], 'String');
            }
            if (data.hasOwnProperty('skipsRemaining')) {
                obj['skipsRemaining'] = ApiClient.convertToType(data['skipsRemaining'], 'Number');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Queue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Queue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Queue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['content']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['content'])) {
                throw new Error("Expected the field `content` to be an array in the JSON data but got " + data['content']);
            }
            // validate the optional field `content` (array)
            for (const item of data['content']) {
                Content.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // validate the optional field `insertPointer`
        if (data['insertPointer']) { // data not null
          QueueInsertPointer.validateJSON(data['insertPointer']);
        }
        // ensure the json data is a string
        if (data['nextContentUrl'] && !(typeof data['nextContentUrl'] === 'string' || data['nextContentUrl'] instanceof String)) {
            throw new Error("Expected the field `nextContentUrl` to be a primitive type in the JSON string but got " + data['nextContentUrl']);
        }
        // validate the optional field `playPointer`
        if (data['playPointer']) { // data not null
          QueuePlayPointer.validateJSON(data['playPointer']);
        }
        // ensure the json data is a string
        if (data['previousContentUrl'] && !(typeof data['previousContentUrl'] === 'string' || data['previousContentUrl'] instanceof String)) {
            throw new Error("Expected the field `previousContentUrl` to be a primitive type in the JSON string but got " + data['previousContentUrl']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

Queue.RequiredProperties = ["content", "identifier", "version"];

/**
 * @member {Array.<module:model/Content>} content
 */
Queue.prototype['content'] = undefined;

/**
 * @member {Number} contentItemsCount
 */
Queue.prototype['contentItemsCount'] = undefined;

/**
 * @member {module:model/QueueControlMapping} controls
 */
Queue.prototype['controls'] = undefined;

/**
 * @member {String} identifier
 */
Queue.prototype['identifier'] = undefined;

/**
 * @member {module:model/QueueInsertPointer} insertPointer
 */
Queue.prototype['insertPointer'] = undefined;

/**
 * @member {String} nextContentUrl
 */
Queue.prototype['nextContentUrl'] = undefined;

/**
 * @member {module:model/QueuePlayPointer} playPointer
 */
Queue.prototype['playPointer'] = undefined;

/**
 * @member {Number} prerollSeconds
 */
Queue.prototype['prerollSeconds'] = undefined;

/**
 * @member {String} previousContentUrl
 */
Queue.prototype['previousContentUrl'] = undefined;

/**
 * @member {Number} skipsRemaining
 */
Queue.prototype['skipsRemaining'] = undefined;

/**
 * @member {String} version
 */
Queue.prototype['version'] = undefined;






export default Queue;

