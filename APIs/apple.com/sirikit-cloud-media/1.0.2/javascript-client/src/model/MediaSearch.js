/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateComponentsRange from './DateComponentsRange';
import MediaItemType from './MediaItemType';
import MediaReference from './MediaReference';
import MediaSortOrder from './MediaSortOrder';

/**
 * The MediaSearch model module.
 * @module model/MediaSearch
 * @version 1.0.2
 */
class MediaSearch {
    /**
     * Constructs a new <code>MediaSearch</code>.
     * @alias module:model/MediaSearch
     */
    constructor() { 
        
        MediaSearch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaSearch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaSearch} obj Optional instance to populate.
     * @return {module:model/MediaSearch} The populated <code>MediaSearch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaSearch();

            if (data.hasOwnProperty('albumName')) {
                obj['albumName'] = ApiClient.convertToType(data['albumName'], 'String');
            }
            if (data.hasOwnProperty('artistName')) {
                obj['artistName'] = ApiClient.convertToType(data['artistName'], 'String');
            }
            if (data.hasOwnProperty('genreNames')) {
                obj['genreNames'] = ApiClient.convertToType(data['genreNames'], ['String']);
            }
            if (data.hasOwnProperty('mediaIdentifier')) {
                obj['mediaIdentifier'] = ApiClient.convertToType(data['mediaIdentifier'], 'String');
            }
            if (data.hasOwnProperty('mediaName')) {
                obj['mediaName'] = ApiClient.convertToType(data['mediaName'], 'String');
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = MediaItemType.constructFromObject(data['mediaType']);
            }
            if (data.hasOwnProperty('moodNames')) {
                obj['moodNames'] = ApiClient.convertToType(data['moodNames'], ['String']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = MediaReference.constructFromObject(data['reference']);
            }
            if (data.hasOwnProperty('releaseDate')) {
                obj['releaseDate'] = DateComponentsRange.constructFromObject(data['releaseDate']);
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = MediaSortOrder.constructFromObject(data['sortOrder']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaSearch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaSearch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['albumName'] && !(typeof data['albumName'] === 'string' || data['albumName'] instanceof String)) {
            throw new Error("Expected the field `albumName` to be a primitive type in the JSON string but got " + data['albumName']);
        }
        // ensure the json data is a string
        if (data['artistName'] && !(typeof data['artistName'] === 'string' || data['artistName'] instanceof String)) {
            throw new Error("Expected the field `artistName` to be a primitive type in the JSON string but got " + data['artistName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['genreNames'])) {
            throw new Error("Expected the field `genreNames` to be an array in the JSON data but got " + data['genreNames']);
        }
        // ensure the json data is a string
        if (data['mediaIdentifier'] && !(typeof data['mediaIdentifier'] === 'string' || data['mediaIdentifier'] instanceof String)) {
            throw new Error("Expected the field `mediaIdentifier` to be a primitive type in the JSON string but got " + data['mediaIdentifier']);
        }
        // ensure the json data is a string
        if (data['mediaName'] && !(typeof data['mediaName'] === 'string' || data['mediaName'] instanceof String)) {
            throw new Error("Expected the field `mediaName` to be a primitive type in the JSON string but got " + data['mediaName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['moodNames'])) {
            throw new Error("Expected the field `moodNames` to be an array in the JSON data but got " + data['moodNames']);
        }
        // validate the optional field `releaseDate`
        if (data['releaseDate']) { // data not null
          DateComponentsRange.validateJSON(data['releaseDate']);
        }

        return true;
    }


}



/**
 * @member {String} albumName
 */
MediaSearch.prototype['albumName'] = undefined;

/**
 * @member {String} artistName
 */
MediaSearch.prototype['artistName'] = undefined;

/**
 * @member {Array.<String>} genreNames
 */
MediaSearch.prototype['genreNames'] = undefined;

/**
 * @member {String} mediaIdentifier
 */
MediaSearch.prototype['mediaIdentifier'] = undefined;

/**
 * @member {String} mediaName
 */
MediaSearch.prototype['mediaName'] = undefined;

/**
 * @member {module:model/MediaItemType} mediaType
 */
MediaSearch.prototype['mediaType'] = undefined;

/**
 * @member {Array.<String>} moodNames
 */
MediaSearch.prototype['moodNames'] = undefined;

/**
 * @member {module:model/MediaReference} reference
 */
MediaSearch.prototype['reference'] = undefined;

/**
 * @member {module:model/DateComponentsRange} releaseDate
 */
MediaSearch.prototype['releaseDate'] = undefined;

/**
 * @member {module:model/MediaSortOrder} sortOrder
 */
MediaSearch.prototype['sortOrder'] = undefined;






export default MediaSearch;

