/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExplicitDateComponents model module.
 * @module model/ExplicitDateComponents
 * @version 1.0.2
 */
class ExplicitDateComponents {
    /**
     * Constructs a new <code>ExplicitDateComponents</code>.
     * @alias module:model/ExplicitDateComponents
     */
    constructor() { 
        
        ExplicitDateComponents.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExplicitDateComponents</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExplicitDateComponents} obj Optional instance to populate.
     * @return {module:model/ExplicitDateComponents} The populated <code>ExplicitDateComponents</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExplicitDateComponents();

            if (data.hasOwnProperty('calendarIdentifier')) {
                obj['calendarIdentifier'] = ApiClient.convertToType(data['calendarIdentifier'], 'String');
            }
            if (data.hasOwnProperty('day')) {
                obj['day'] = ApiClient.convertToType(data['day'], 'Number');
            }
            if (data.hasOwnProperty('era')) {
                obj['era'] = ApiClient.convertToType(data['era'], 'Number');
            }
            if (data.hasOwnProperty('hour')) {
                obj['hour'] = ApiClient.convertToType(data['hour'], 'Number');
            }
            if (data.hasOwnProperty('minute')) {
                obj['minute'] = ApiClient.convertToType(data['minute'], 'Number');
            }
            if (data.hasOwnProperty('month')) {
                obj['month'] = ApiClient.convertToType(data['month'], 'Number');
            }
            if (data.hasOwnProperty('nanosecond')) {
                obj['nanosecond'] = ApiClient.convertToType(data['nanosecond'], 'Number');
            }
            if (data.hasOwnProperty('second')) {
                obj['second'] = ApiClient.convertToType(data['second'], 'Number');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExplicitDateComponents</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExplicitDateComponents</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['calendarIdentifier'] && !(typeof data['calendarIdentifier'] === 'string' || data['calendarIdentifier'] instanceof String)) {
            throw new Error("Expected the field `calendarIdentifier` to be a primitive type in the JSON string but got " + data['calendarIdentifier']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * @member {String} calendarIdentifier
 */
ExplicitDateComponents.prototype['calendarIdentifier'] = undefined;

/**
 * @member {Number} day
 */
ExplicitDateComponents.prototype['day'] = undefined;

/**
 * @member {Number} era
 */
ExplicitDateComponents.prototype['era'] = undefined;

/**
 * @member {Number} hour
 */
ExplicitDateComponents.prototype['hour'] = undefined;

/**
 * @member {Number} minute
 */
ExplicitDateComponents.prototype['minute'] = undefined;

/**
 * @member {Number} month
 */
ExplicitDateComponents.prototype['month'] = undefined;

/**
 * @member {Number} nanosecond
 */
ExplicitDateComponents.prototype['nanosecond'] = undefined;

/**
 * @member {Number} second
 */
ExplicitDateComponents.prototype['second'] = undefined;

/**
 * @member {String} timeZone
 */
ExplicitDateComponents.prototype['timeZone'] = undefined;

/**
 * @member {Number} year
 */
ExplicitDateComponents.prototype['year'] = undefined;






export default ExplicitDateComponents;

