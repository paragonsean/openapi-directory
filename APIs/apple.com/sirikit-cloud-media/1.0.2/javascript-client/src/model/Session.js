/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Constraints from './Constraints';
import PlayerContext from './PlayerContext';

/**
 * The Session model module.
 * @module model/Session
 * @version 1.0.2
 */
class Session {
    /**
     * Constructs a new <code>Session</code>.
     * @alias module:model/Session
     * @param constraints {module:model/Constraints} 
     * @param deadline {Date} 
     * @param identifier {String} 
     * @param requested {Date} 
     * @param version {String} 
     */
    constructor(constraints, deadline, identifier, requested, version) { 
        
        Session.initialize(this, constraints, deadline, identifier, requested, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, constraints, deadline, identifier, requested, version) { 
        obj['constraints'] = constraints;
        obj['deadline'] = deadline;
        obj['identifier'] = identifier;
        obj['requested'] = requested;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Session} obj Optional instance to populate.
     * @return {module:model/Session} The populated <code>Session</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Session();

            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = Constraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('deadline')) {
                obj['deadline'] = ApiClient.convertToType(data['deadline'], 'Date');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('playerContext')) {
                obj['playerContext'] = PlayerContext.constructFromObject(data['playerContext']);
            }
            if (data.hasOwnProperty('requested')) {
                obj['requested'] = ApiClient.convertToType(data['requested'], 'Date');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Session</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Session</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Session.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          Constraints.validateJSON(data['constraints']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // validate the optional field `playerContext`
        if (data['playerContext']) { // data not null
          PlayerContext.validateJSON(data['playerContext']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

Session.RequiredProperties = ["constraints", "deadline", "identifier", "requested", "version"];

/**
 * @member {module:model/Constraints} constraints
 */
Session.prototype['constraints'] = undefined;

/**
 * @member {Date} deadline
 */
Session.prototype['deadline'] = undefined;

/**
 * @member {String} identifier
 */
Session.prototype['identifier'] = undefined;

/**
 * @member {module:model/PlayerContext} playerContext
 */
Session.prototype['playerContext'] = undefined;

/**
 * @member {Date} requested
 */
Session.prototype['requested'] = undefined;

/**
 * @member {String} version
 */
Session.prototype['version'] = undefined;






export default Session;

