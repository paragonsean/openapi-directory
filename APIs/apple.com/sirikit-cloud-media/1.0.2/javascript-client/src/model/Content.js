/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentAttributes from './ContentAttributes';

/**
 * The Content model module.
 * @module model/Content
 * @version 1.0.2
 */
class Content {
    /**
     * Constructs a new <code>Content</code>.
     * @alias module:model/Content
     * @param identifier {String} 
     */
    constructor(identifier) { 
        
        Content.initialize(this, identifier);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identifier) { 
        obj['control'] = 'default';
        obj['identifier'] = identifier;
    }

    /**
     * Constructs a <code>Content</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Content} obj Optional instance to populate.
     * @return {module:model/Content} The populated <code>Content</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Content();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ContentAttributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('control')) {
                obj['control'] = ApiClient.convertToType(data['control'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('isLive')) {
                obj['isLive'] = ApiClient.convertToType(data['isLive'], 'Boolean');
            }
            if (data.hasOwnProperty('playIndex')) {
                obj['playIndex'] = ApiClient.convertToType(data['playIndex'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Content</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Content</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Content.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          ContentAttributes.validateJSON(data['attributes']);
        }
        // ensure the json data is a string
        if (data['control'] && !(typeof data['control'] === 'string' || data['control'] instanceof String)) {
            throw new Error("Expected the field `control` to be a primitive type in the JSON string but got " + data['control']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Content.RequiredProperties = ["identifier"];

/**
 * @member {module:model/ContentAttributes} attributes
 */
Content.prototype['attributes'] = undefined;

/**
 * @member {String} control
 * @default 'default'
 */
Content.prototype['control'] = 'default';

/**
 * @member {String} identifier
 */
Content.prototype['identifier'] = undefined;

/**
 * @member {Boolean} isLive
 */
Content.prototype['isLive'] = undefined;

/**
 * @member {Number} playIndex
 */
Content.prototype['playIndex'] = undefined;

/**
 * @member {String} url
 */
Content.prototype['url'] = undefined;






export default Content;

