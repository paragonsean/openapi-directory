/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Intent from './Intent';
import MediaItem from './MediaItem';
import MediaSearch from './MediaSearch';
import PlaybackQueueLocation from './PlaybackQueueLocation';
import PlaybackRepeatMode from './PlaybackRepeatMode';

/**
 * The PlayMediaIntent model module.
 * @module model/PlayMediaIntent
 * @version 1.0.2
 */
class PlayMediaIntent {
    /**
     * Constructs a new <code>PlayMediaIntent</code>.
     * @alias module:model/PlayMediaIntent
     * @extends module:model/Intent
     * @implements module:model/Intent
     * @param identifier {String} 
     */
    constructor(identifier) { 
        Intent.initialize(this, _class, identifier);
        PlayMediaIntent.initialize(this, identifier);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identifier) { 
    }

    /**
     * Constructs a <code>PlayMediaIntent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayMediaIntent} obj Optional instance to populate.
     * @return {module:model/PlayMediaIntent} The populated <code>PlayMediaIntent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayMediaIntent();
            Intent.constructFromObject(data, obj);
            Intent.constructFromObject(data, obj);

            if (data.hasOwnProperty('class')) {
                obj['class'] = ApiClient.convertToType(data['class'], 'String');
            }
            if (data.hasOwnProperty('mediaItems')) {
                obj['mediaItems'] = ApiClient.convertToType(data['mediaItems'], [MediaItem]);
            }
            if (data.hasOwnProperty('mediaSearch')) {
                obj['mediaSearch'] = MediaSearch.constructFromObject(data['mediaSearch']);
            }
            if (data.hasOwnProperty('playShuffled')) {
                obj['playShuffled'] = ApiClient.convertToType(data['playShuffled'], 'Boolean');
            }
            if (data.hasOwnProperty('playbackQueueLocation')) {
                obj['playbackQueueLocation'] = PlaybackQueueLocation.constructFromObject(data['playbackQueueLocation']);
            }
            if (data.hasOwnProperty('playbackRepeatMode')) {
                obj['playbackRepeatMode'] = PlaybackRepeatMode.constructFromObject(data['playbackRepeatMode']);
            }
            if (data.hasOwnProperty('playbackSpeed')) {
                obj['playbackSpeed'] = ApiClient.convertToType(data['playbackSpeed'], 'Number');
            }
            if (data.hasOwnProperty('resumePlayback')) {
                obj['resumePlayback'] = ApiClient.convertToType(data['resumePlayback'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayMediaIntent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayMediaIntent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PlayMediaIntent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['class'] && !(typeof data['class'] === 'string' || data['class'] instanceof String)) {
            throw new Error("Expected the field `class` to be a primitive type in the JSON string but got " + data['class']);
        }
        if (data['mediaItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mediaItems'])) {
                throw new Error("Expected the field `mediaItems` to be an array in the JSON data but got " + data['mediaItems']);
            }
            // validate the optional field `mediaItems` (array)
            for (const item of data['mediaItems']) {
                MediaItem.validateJSON(item);
            };
        }
        // validate the optional field `mediaSearch`
        if (data['mediaSearch']) { // data not null
          MediaSearch.validateJSON(data['mediaSearch']);
        }

        return true;
    }


}

PlayMediaIntent.RequiredProperties = ["identifier"];

/**
 * @member {module:model/PlayMediaIntent.ClassEnum} class
 */
PlayMediaIntent.prototype['class'] = undefined;

/**
 * @member {Array.<module:model/MediaItem>} mediaItems
 */
PlayMediaIntent.prototype['mediaItems'] = undefined;

/**
 * @member {module:model/MediaSearch} mediaSearch
 */
PlayMediaIntent.prototype['mediaSearch'] = undefined;

/**
 * @member {Boolean} playShuffled
 */
PlayMediaIntent.prototype['playShuffled'] = undefined;

/**
 * @member {module:model/PlaybackQueueLocation} playbackQueueLocation
 */
PlayMediaIntent.prototype['playbackQueueLocation'] = undefined;

/**
 * @member {module:model/PlaybackRepeatMode} playbackRepeatMode
 */
PlayMediaIntent.prototype['playbackRepeatMode'] = undefined;

/**
 * @member {Number} playbackSpeed
 */
PlayMediaIntent.prototype['playbackSpeed'] = undefined;

/**
 * @member {Boolean} resumePlayback
 */
PlayMediaIntent.prototype['resumePlayback'] = undefined;


// Implement Intent interface:
/**
 * @member {String} class
 */
Intent.prototype['class'] = undefined;
/**
 * @member {String} identifier
 */
Intent.prototype['identifier'] = undefined;



/**
 * Allowed values for the <code>class</code> property.
 * @enum {String}
 * @readonly
 */
PlayMediaIntent['ClassEnum'] = {

    /**
     * value: "PlayMediaIntent"
     * @const
     */
    "PlayMediaIntent": "PlayMediaIntent"
};



export default PlayMediaIntent;

