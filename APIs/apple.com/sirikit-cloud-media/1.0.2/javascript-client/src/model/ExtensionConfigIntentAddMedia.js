/**
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtensionEndpointConfig from './ExtensionEndpointConfig';

/**
 * The ExtensionConfigIntentAddMedia model module.
 * @module model/ExtensionConfigIntentAddMedia
 * @version 1.0.2
 */
class ExtensionConfigIntentAddMedia {
    /**
     * Constructs a new <code>ExtensionConfigIntentAddMedia</code>.
     * @alias module:model/ExtensionConfigIntentAddMedia
     * @implements module:model/ExtensionEndpointConfig
     */
    constructor() { 
        ExtensionEndpointConfig.initialize(this);
        ExtensionConfigIntentAddMedia.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtensionConfigIntentAddMedia</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtensionConfigIntentAddMedia} obj Optional instance to populate.
     * @return {module:model/ExtensionConfigIntentAddMedia} The populated <code>ExtensionConfigIntentAddMedia</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtensionConfigIntentAddMedia();
            ExtensionEndpointConfig.constructFromObject(data, obj);

            if (data.hasOwnProperty('opt')) {
                obj['opt'] = ApiClient.convertToType(data['opt'], ['String']);
            }
            if (data.hasOwnProperty('hdr')) {
                obj['hdr'] = ApiClient.convertToType(data['hdr'], Object);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtensionConfigIntentAddMedia</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtensionConfigIntentAddMedia</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['opt'])) {
            throw new Error("Expected the field `opt` to be an array in the JSON data but got " + data['opt']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ExtensionConfigIntentAddMedia.OptEnum>} opt
 */
ExtensionConfigIntentAddMedia.prototype['opt'] = undefined;

/**
 * @member {Object} hdr
 */
ExtensionConfigIntentAddMedia.prototype['hdr'] = undefined;

/**
 * @member {String} url
 */
ExtensionConfigIntentAddMedia.prototype['url'] = undefined;


// Implement ExtensionEndpointConfig interface:
/**
 * @member {Object} hdr
 */
ExtensionEndpointConfig.prototype['hdr'] = undefined;
/**
 * @member {String} url
 */
ExtensionEndpointConfig.prototype['url'] = undefined;



/**
 * Allowed values for the <code>opt</code> property.
 * @enum {String}
 * @readonly
 */
ExtensionConfigIntentAddMedia['OptEnum'] = {

    /**
     * value: "resolveMediaDestination"
     * @const
     */
    "resolveMediaDestination": "resolveMediaDestination",

    /**
     * value: "confirm"
     * @const
     */
    "confirm": "confirm"
};



export default ExtensionConfigIntentAddMedia;

