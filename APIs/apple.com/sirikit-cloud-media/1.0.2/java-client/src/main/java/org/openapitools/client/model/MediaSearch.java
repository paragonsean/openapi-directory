/*
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateComponentsRange;
import org.openapitools.client.model.MediaItemType;
import org.openapitools.client.model.MediaReference;
import org.openapitools.client.model.MediaSortOrder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MediaSearch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.502657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaSearch {
  public static final String SERIALIZED_NAME_ALBUM_NAME = "albumName";
  @SerializedName(SERIALIZED_NAME_ALBUM_NAME)
  private String albumName;

  public static final String SERIALIZED_NAME_ARTIST_NAME = "artistName";
  @SerializedName(SERIALIZED_NAME_ARTIST_NAME)
  private String artistName;

  public static final String SERIALIZED_NAME_GENRE_NAMES = "genreNames";
  @SerializedName(SERIALIZED_NAME_GENRE_NAMES)
  private List<String> genreNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_IDENTIFIER = "mediaIdentifier";
  @SerializedName(SERIALIZED_NAME_MEDIA_IDENTIFIER)
  private String mediaIdentifier;

  public static final String SERIALIZED_NAME_MEDIA_NAME = "mediaName";
  @SerializedName(SERIALIZED_NAME_MEDIA_NAME)
  private String mediaName;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "mediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private MediaItemType mediaType;

  public static final String SERIALIZED_NAME_MOOD_NAMES = "moodNames";
  @SerializedName(SERIALIZED_NAME_MOOD_NAMES)
  private List<String> moodNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private MediaReference reference;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private DateComponentsRange releaseDate;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private MediaSortOrder sortOrder;

  public MediaSearch() {
  }

  public MediaSearch albumName(String albumName) {
    this.albumName = albumName;
    return this;
  }

  /**
   * Get albumName
   * @return albumName
   */
  @javax.annotation.Nullable
  public String getAlbumName() {
    return albumName;
  }

  public void setAlbumName(String albumName) {
    this.albumName = albumName;
  }


  public MediaSearch artistName(String artistName) {
    this.artistName = artistName;
    return this;
  }

  /**
   * Get artistName
   * @return artistName
   */
  @javax.annotation.Nullable
  public String getArtistName() {
    return artistName;
  }

  public void setArtistName(String artistName) {
    this.artistName = artistName;
  }


  public MediaSearch genreNames(List<String> genreNames) {
    this.genreNames = genreNames;
    return this;
  }

  public MediaSearch addGenreNamesItem(String genreNamesItem) {
    if (this.genreNames == null) {
      this.genreNames = new ArrayList<>();
    }
    this.genreNames.add(genreNamesItem);
    return this;
  }

  /**
   * Get genreNames
   * @return genreNames
   */
  @javax.annotation.Nullable
  public List<String> getGenreNames() {
    return genreNames;
  }

  public void setGenreNames(List<String> genreNames) {
    this.genreNames = genreNames;
  }


  public MediaSearch mediaIdentifier(String mediaIdentifier) {
    this.mediaIdentifier = mediaIdentifier;
    return this;
  }

  /**
   * Get mediaIdentifier
   * @return mediaIdentifier
   */
  @javax.annotation.Nullable
  public String getMediaIdentifier() {
    return mediaIdentifier;
  }

  public void setMediaIdentifier(String mediaIdentifier) {
    this.mediaIdentifier = mediaIdentifier;
  }


  public MediaSearch mediaName(String mediaName) {
    this.mediaName = mediaName;
    return this;
  }

  /**
   * Get mediaName
   * @return mediaName
   */
  @javax.annotation.Nullable
  public String getMediaName() {
    return mediaName;
  }

  public void setMediaName(String mediaName) {
    this.mediaName = mediaName;
  }


  public MediaSearch mediaType(MediaItemType mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Get mediaType
   * @return mediaType
   */
  @javax.annotation.Nullable
  public MediaItemType getMediaType() {
    return mediaType;
  }

  public void setMediaType(MediaItemType mediaType) {
    this.mediaType = mediaType;
  }


  public MediaSearch moodNames(List<String> moodNames) {
    this.moodNames = moodNames;
    return this;
  }

  public MediaSearch addMoodNamesItem(String moodNamesItem) {
    if (this.moodNames == null) {
      this.moodNames = new ArrayList<>();
    }
    this.moodNames.add(moodNamesItem);
    return this;
  }

  /**
   * Get moodNames
   * @return moodNames
   */
  @javax.annotation.Nullable
  public List<String> getMoodNames() {
    return moodNames;
  }

  public void setMoodNames(List<String> moodNames) {
    this.moodNames = moodNames;
  }


  public MediaSearch reference(MediaReference reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nullable
  public MediaReference getReference() {
    return reference;
  }

  public void setReference(MediaReference reference) {
    this.reference = reference;
  }


  public MediaSearch releaseDate(DateComponentsRange releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Get releaseDate
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public DateComponentsRange getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(DateComponentsRange releaseDate) {
    this.releaseDate = releaseDate;
  }


  public MediaSearch sortOrder(MediaSortOrder sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public MediaSortOrder getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(MediaSortOrder sortOrder) {
    this.sortOrder = sortOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaSearch mediaSearch = (MediaSearch) o;
    return Objects.equals(this.albumName, mediaSearch.albumName) &&
        Objects.equals(this.artistName, mediaSearch.artistName) &&
        Objects.equals(this.genreNames, mediaSearch.genreNames) &&
        Objects.equals(this.mediaIdentifier, mediaSearch.mediaIdentifier) &&
        Objects.equals(this.mediaName, mediaSearch.mediaName) &&
        Objects.equals(this.mediaType, mediaSearch.mediaType) &&
        Objects.equals(this.moodNames, mediaSearch.moodNames) &&
        Objects.equals(this.reference, mediaSearch.reference) &&
        Objects.equals(this.releaseDate, mediaSearch.releaseDate) &&
        Objects.equals(this.sortOrder, mediaSearch.sortOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(albumName, artistName, genreNames, mediaIdentifier, mediaName, mediaType, moodNames, reference, releaseDate, sortOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaSearch {\n");
    sb.append("    albumName: ").append(toIndentedString(albumName)).append("\n");
    sb.append("    artistName: ").append(toIndentedString(artistName)).append("\n");
    sb.append("    genreNames: ").append(toIndentedString(genreNames)).append("\n");
    sb.append("    mediaIdentifier: ").append(toIndentedString(mediaIdentifier)).append("\n");
    sb.append("    mediaName: ").append(toIndentedString(mediaName)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    moodNames: ").append(toIndentedString(moodNames)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("albumName");
    openapiFields.add("artistName");
    openapiFields.add("genreNames");
    openapiFields.add("mediaIdentifier");
    openapiFields.add("mediaName");
    openapiFields.add("mediaType");
    openapiFields.add("moodNames");
    openapiFields.add("reference");
    openapiFields.add("releaseDate");
    openapiFields.add("sortOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaSearch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaSearch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaSearch is not found in the empty JSON string", MediaSearch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaSearch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaSearch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("albumName") != null && !jsonObj.get("albumName").isJsonNull()) && !jsonObj.get("albumName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `albumName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("albumName").toString()));
      }
      if ((jsonObj.get("artistName") != null && !jsonObj.get("artistName").isJsonNull()) && !jsonObj.get("artistName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artistName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artistName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("genreNames") != null && !jsonObj.get("genreNames").isJsonNull() && !jsonObj.get("genreNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `genreNames` to be an array in the JSON string but got `%s`", jsonObj.get("genreNames").toString()));
      }
      if ((jsonObj.get("mediaIdentifier") != null && !jsonObj.get("mediaIdentifier").isJsonNull()) && !jsonObj.get("mediaIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaIdentifier").toString()));
      }
      if ((jsonObj.get("mediaName") != null && !jsonObj.get("mediaName").isJsonNull()) && !jsonObj.get("mediaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaName").toString()));
      }
      // validate the optional field `mediaType`
      if (jsonObj.get("mediaType") != null && !jsonObj.get("mediaType").isJsonNull()) {
        MediaItemType.validateJsonElement(jsonObj.get("mediaType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("moodNames") != null && !jsonObj.get("moodNames").isJsonNull() && !jsonObj.get("moodNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `moodNames` to be an array in the JSON string but got `%s`", jsonObj.get("moodNames").toString()));
      }
      // validate the optional field `reference`
      if (jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) {
        MediaReference.validateJsonElement(jsonObj.get("reference"));
      }
      // validate the optional field `releaseDate`
      if (jsonObj.get("releaseDate") != null && !jsonObj.get("releaseDate").isJsonNull()) {
        DateComponentsRange.validateJsonElement(jsonObj.get("releaseDate"));
      }
      // validate the optional field `sortOrder`
      if (jsonObj.get("sortOrder") != null && !jsonObj.get("sortOrder").isJsonNull()) {
        MediaSortOrder.validateJsonElement(jsonObj.get("sortOrder"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaSearch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaSearch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaSearch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaSearch.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaSearch>() {
           @Override
           public void write(JsonWriter out, MediaSearch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaSearch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaSearch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaSearch
   * @throws IOException if the JSON string is invalid with respect to MediaSearch
   */
  public static MediaSearch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaSearch.class);
  }

  /**
   * Convert an instance of MediaSearch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

