/*
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ExplicitDateComponents;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.502657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DateComponents extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(DateComponents.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DateComponents.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DateComponents' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<String> adapterString = gson.getDelegateAdapter(this, TypeToken.get(String.class));
            final TypeAdapter<LocalDate> adapterLocalDate = gson.getDelegateAdapter(this, TypeToken.get(LocalDate.class));
            final TypeAdapter<OffsetDateTime> adapterOffsetDateTime = gson.getDelegateAdapter(this, TypeToken.get(OffsetDateTime.class));
            final TypeAdapter<ExplicitDateComponents> adapterExplicitDateComponents = gson.getDelegateAdapter(this, TypeToken.get(ExplicitDateComponents.class));

            return (TypeAdapter<T>) new TypeAdapter<DateComponents>() {
                @Override
                public void write(JsonWriter out, DateComponents value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `String`
                    if (value.getActualInstance() instanceof String) {
                        JsonPrimitive primitive = adapterString.toJsonTree((String)value.getActualInstance()).getAsJsonPrimitive();
                        elementAdapter.write(out, primitive);
                        return;
                    }
                    // check if the actual instance is of the type `LocalDate`
                    if (value.getActualInstance() instanceof LocalDate) {
                        JsonElement element = adapterLocalDate.toJsonTree((LocalDate)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OffsetDateTime`
                    if (value.getActualInstance() instanceof OffsetDateTime) {
                        JsonElement element = adapterOffsetDateTime.toJsonTree((OffsetDateTime)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ExplicitDateComponents`
                    if (value.getActualInstance() instanceof ExplicitDateComponents) {
                        JsonElement element = adapterExplicitDateComponents.toJsonTree((ExplicitDateComponents)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ExplicitDateComponents, LocalDate, OffsetDateTime, String");
                }

                @Override
                public DateComponents read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize String
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.getAsJsonPrimitive().isString()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be of type String in the JSON string but got `%s`", jsonElement.toString()));
                        }
                        actualAdapter = adapterString;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'String'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for String failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'String'", e);
                    }
                    // deserialize LocalDate
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LocalDate.validateJsonElement(jsonElement);
                        actualAdapter = adapterLocalDate;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LocalDate'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LocalDate failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LocalDate'", e);
                    }
                    // deserialize OffsetDateTime
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OffsetDateTime.validateJsonElement(jsonElement);
                        actualAdapter = adapterOffsetDateTime;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OffsetDateTime'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OffsetDateTime failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OffsetDateTime'", e);
                    }
                    // deserialize ExplicitDateComponents
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ExplicitDateComponents.validateJsonElement(jsonElement);
                        actualAdapter = adapterExplicitDateComponents;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ExplicitDateComponents'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ExplicitDateComponents failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ExplicitDateComponents'", e);
                    }

                    if (match == 1) {
                        DateComponents ret = new DateComponents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for DateComponents: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public DateComponents() {
        super("oneOf", Boolean.FALSE);
    }

    public DateComponents(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("String", String.class);
        schemas.put("LocalDate", LocalDate.class);
        schemas.put("OffsetDateTime", OffsetDateTime.class);
        schemas.put("ExplicitDateComponents", ExplicitDateComponents.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return DateComponents.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ExplicitDateComponents, LocalDate, OffsetDateTime, String
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof String) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LocalDate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OffsetDateTime) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExplicitDateComponents) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ExplicitDateComponents, LocalDate, OffsetDateTime, String");
    }

    /**
     * Get the actual instance, which can be the following:
     * ExplicitDateComponents, LocalDate, OffsetDateTime, String
     *
     * @return The actual instance (ExplicitDateComponents, LocalDate, OffsetDateTime, String)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `String`. If the actual instance is not `String`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `String`
     * @throws ClassCastException if the instance is not `String`
     */
    public String getString() throws ClassCastException {
        return (String)super.getActualInstance();
    }
    /**
     * Get the actual instance of `LocalDate`. If the actual instance is not `LocalDate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LocalDate`
     * @throws ClassCastException if the instance is not `LocalDate`
     */
    public LocalDate getLocalDate() throws ClassCastException {
        return (LocalDate)super.getActualInstance();
    }
    /**
     * Get the actual instance of `OffsetDateTime`. If the actual instance is not `OffsetDateTime`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OffsetDateTime`
     * @throws ClassCastException if the instance is not `OffsetDateTime`
     */
    public OffsetDateTime getOffsetDateTime() throws ClassCastException {
        return (OffsetDateTime)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExplicitDateComponents`. If the actual instance is not `ExplicitDateComponents`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExplicitDateComponents`
     * @throws ClassCastException if the instance is not `ExplicitDateComponents`
     */
    public ExplicitDateComponents getExplicitDateComponents() throws ClassCastException {
        return (ExplicitDateComponents)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to DateComponents
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with String
        try {
            if (!jsonElement.getAsJsonPrimitive().isString()) {
                throw new IllegalArgumentException(String.format("Expected json element to be of type String in the JSON string but got `%s`", jsonElement.toString()));
            }
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for String failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LocalDate
        try {
            LocalDate.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LocalDate failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OffsetDateTime
        try {
            OffsetDateTime.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OffsetDateTime failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ExplicitDateComponents
        try {
            ExplicitDateComponents.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ExplicitDateComponents failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for DateComponents with oneOf schemas: ExplicitDateComponents, LocalDate, OffsetDateTime, String. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of DateComponents given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DateComponents
     * @throws IOException if the JSON string is invalid with respect to DateComponents
     */
    public static DateComponents fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DateComponents.class);
    }

    /**
     * Convert an instance of DateComponents to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

