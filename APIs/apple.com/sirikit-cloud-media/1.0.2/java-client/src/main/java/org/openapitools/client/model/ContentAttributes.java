/*
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContentAttributesArtwork;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContentAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.502657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentAttributes {
  public static final String SERIALIZED_NAME_ALBUM_NAME = "albumName";
  @SerializedName(SERIALIZED_NAME_ALBUM_NAME)
  private String albumName;

  public static final String SERIALIZED_NAME_ARTIST_NAME = "artistName";
  @SerializedName(SERIALIZED_NAME_ARTIST_NAME)
  private String artistName;

  public static final String SERIALIZED_NAME_ARTWORK = "artwork";
  @SerializedName(SERIALIZED_NAME_ARTWORK)
  private ContentAttributesArtwork artwork;

  public static final String SERIALIZED_NAME_COMPOSER_NAME = "composerName";
  @SerializedName(SERIALIZED_NAME_COMPOSER_NAME)
  private String composerName;

  public static final String SERIALIZED_NAME_DURATION_IN_MILLIS = "durationInMillis";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_MILLIS)
  private Integer durationInMillis;

  public static final String SERIALIZED_NAME_GENRE_NAMES = "genreNames";
  @SerializedName(SERIALIZED_NAME_GENRE_NAMES)
  private List<String> genreNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TRACK_NUMBER = "trackNumber";
  @SerializedName(SERIALIZED_NAME_TRACK_NUMBER)
  private Integer trackNumber;

  public ContentAttributes() {
  }

  public ContentAttributes albumName(String albumName) {
    this.albumName = albumName;
    return this;
  }

  /**
   * Get albumName
   * @return albumName
   */
  @javax.annotation.Nullable
  public String getAlbumName() {
    return albumName;
  }

  public void setAlbumName(String albumName) {
    this.albumName = albumName;
  }


  public ContentAttributes artistName(String artistName) {
    this.artistName = artistName;
    return this;
  }

  /**
   * Get artistName
   * @return artistName
   */
  @javax.annotation.Nullable
  public String getArtistName() {
    return artistName;
  }

  public void setArtistName(String artistName) {
    this.artistName = artistName;
  }


  public ContentAttributes artwork(ContentAttributesArtwork artwork) {
    this.artwork = artwork;
    return this;
  }

  /**
   * Get artwork
   * @return artwork
   */
  @javax.annotation.Nullable
  public ContentAttributesArtwork getArtwork() {
    return artwork;
  }

  public void setArtwork(ContentAttributesArtwork artwork) {
    this.artwork = artwork;
  }


  public ContentAttributes composerName(String composerName) {
    this.composerName = composerName;
    return this;
  }

  /**
   * Get composerName
   * @return composerName
   */
  @javax.annotation.Nullable
  public String getComposerName() {
    return composerName;
  }

  public void setComposerName(String composerName) {
    this.composerName = composerName;
  }


  public ContentAttributes durationInMillis(Integer durationInMillis) {
    this.durationInMillis = durationInMillis;
    return this;
  }

  /**
   * Get durationInMillis
   * @return durationInMillis
   */
  @javax.annotation.Nullable
  public Integer getDurationInMillis() {
    return durationInMillis;
  }

  public void setDurationInMillis(Integer durationInMillis) {
    this.durationInMillis = durationInMillis;
  }


  public ContentAttributes genreNames(List<String> genreNames) {
    this.genreNames = genreNames;
    return this;
  }

  public ContentAttributes addGenreNamesItem(String genreNamesItem) {
    if (this.genreNames == null) {
      this.genreNames = new ArrayList<>();
    }
    this.genreNames.add(genreNamesItem);
    return this;
  }

  /**
   * Get genreNames
   * @return genreNames
   */
  @javax.annotation.Nullable
  public List<String> getGenreNames() {
    return genreNames;
  }

  public void setGenreNames(List<String> genreNames) {
    this.genreNames = genreNames;
  }


  public ContentAttributes name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContentAttributes trackNumber(Integer trackNumber) {
    this.trackNumber = trackNumber;
    return this;
  }

  /**
   * Get trackNumber
   * @return trackNumber
   */
  @javax.annotation.Nullable
  public Integer getTrackNumber() {
    return trackNumber;
  }

  public void setTrackNumber(Integer trackNumber) {
    this.trackNumber = trackNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentAttributes contentAttributes = (ContentAttributes) o;
    return Objects.equals(this.albumName, contentAttributes.albumName) &&
        Objects.equals(this.artistName, contentAttributes.artistName) &&
        Objects.equals(this.artwork, contentAttributes.artwork) &&
        Objects.equals(this.composerName, contentAttributes.composerName) &&
        Objects.equals(this.durationInMillis, contentAttributes.durationInMillis) &&
        Objects.equals(this.genreNames, contentAttributes.genreNames) &&
        Objects.equals(this.name, contentAttributes.name) &&
        Objects.equals(this.trackNumber, contentAttributes.trackNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(albumName, artistName, artwork, composerName, durationInMillis, genreNames, name, trackNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentAttributes {\n");
    sb.append("    albumName: ").append(toIndentedString(albumName)).append("\n");
    sb.append("    artistName: ").append(toIndentedString(artistName)).append("\n");
    sb.append("    artwork: ").append(toIndentedString(artwork)).append("\n");
    sb.append("    composerName: ").append(toIndentedString(composerName)).append("\n");
    sb.append("    durationInMillis: ").append(toIndentedString(durationInMillis)).append("\n");
    sb.append("    genreNames: ").append(toIndentedString(genreNames)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    trackNumber: ").append(toIndentedString(trackNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("albumName");
    openapiFields.add("artistName");
    openapiFields.add("artwork");
    openapiFields.add("composerName");
    openapiFields.add("durationInMillis");
    openapiFields.add("genreNames");
    openapiFields.add("name");
    openapiFields.add("trackNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentAttributes is not found in the empty JSON string", ContentAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("albumName") != null && !jsonObj.get("albumName").isJsonNull()) && !jsonObj.get("albumName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `albumName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("albumName").toString()));
      }
      if ((jsonObj.get("artistName") != null && !jsonObj.get("artistName").isJsonNull()) && !jsonObj.get("artistName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artistName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artistName").toString()));
      }
      // validate the optional field `artwork`
      if (jsonObj.get("artwork") != null && !jsonObj.get("artwork").isJsonNull()) {
        ContentAttributesArtwork.validateJsonElement(jsonObj.get("artwork"));
      }
      if ((jsonObj.get("composerName") != null && !jsonObj.get("composerName").isJsonNull()) && !jsonObj.get("composerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `composerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("composerName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("genreNames") != null && !jsonObj.get("genreNames").isJsonNull() && !jsonObj.get("genreNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `genreNames` to be an array in the JSON string but got `%s`", jsonObj.get("genreNames").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentAttributes>() {
           @Override
           public void write(JsonWriter out, ContentAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentAttributes
   * @throws IOException if the JSON string is invalid with respect to ContentAttributes
   */
  public static ContentAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentAttributes.class);
  }

  /**
   * Convert an instance of ContentAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

