/*
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Constraints;
import org.openapitools.client.model.PlayerContext;
import org.openapitools.client.model.QueueActivityReportEvent;
import org.openapitools.client.model.UserActivity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateActivityRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.502657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateActivityRequest {
  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private Constraints constraints;

  public static final String SERIALIZED_NAME_NOW_PLAYING = "nowPlaying";
  @SerializedName(SERIALIZED_NAME_NOW_PLAYING)
  private PlayerContext nowPlaying;

  public static final String SERIALIZED_NAME_PREVIOUSLY_PLAYING = "previouslyPlaying";
  @SerializedName(SERIALIZED_NAME_PREVIOUSLY_PLAYING)
  private PlayerContext previouslyPlaying;

  public static final String SERIALIZED_NAME_REPORT = "report";
  @SerializedName(SERIALIZED_NAME_REPORT)
  private QueueActivityReportEvent report;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_USER_ACTIVITY = "userActivity";
  @SerializedName(SERIALIZED_NAME_USER_ACTIVITY)
  private UserActivity userActivity;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public UpdateActivityRequest() {
  }

  public UpdateActivityRequest constraints(Constraints constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  public Constraints getConstraints() {
    return constraints;
  }

  public void setConstraints(Constraints constraints) {
    this.constraints = constraints;
  }


  public UpdateActivityRequest nowPlaying(PlayerContext nowPlaying) {
    this.nowPlaying = nowPlaying;
    return this;
  }

  /**
   * Get nowPlaying
   * @return nowPlaying
   */
  @javax.annotation.Nullable
  public PlayerContext getNowPlaying() {
    return nowPlaying;
  }

  public void setNowPlaying(PlayerContext nowPlaying) {
    this.nowPlaying = nowPlaying;
  }


  public UpdateActivityRequest previouslyPlaying(PlayerContext previouslyPlaying) {
    this.previouslyPlaying = previouslyPlaying;
    return this;
  }

  /**
   * Get previouslyPlaying
   * @return previouslyPlaying
   */
  @javax.annotation.Nullable
  public PlayerContext getPreviouslyPlaying() {
    return previouslyPlaying;
  }

  public void setPreviouslyPlaying(PlayerContext previouslyPlaying) {
    this.previouslyPlaying = previouslyPlaying;
  }


  public UpdateActivityRequest report(QueueActivityReportEvent report) {
    this.report = report;
    return this;
  }

  /**
   * Get report
   * @return report
   */
  @javax.annotation.Nonnull
  public QueueActivityReportEvent getReport() {
    return report;
  }

  public void setReport(QueueActivityReportEvent report) {
    this.report = report;
  }


  public UpdateActivityRequest timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public UpdateActivityRequest userActivity(UserActivity userActivity) {
    this.userActivity = userActivity;
    return this;
  }

  /**
   * Get userActivity
   * @return userActivity
   */
  @javax.annotation.Nullable
  public UserActivity getUserActivity() {
    return userActivity;
  }

  public void setUserActivity(UserActivity userActivity) {
    this.userActivity = userActivity;
  }


  public UpdateActivityRequest version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateActivityRequest updateActivityRequest = (UpdateActivityRequest) o;
    return Objects.equals(this.constraints, updateActivityRequest.constraints) &&
        Objects.equals(this.nowPlaying, updateActivityRequest.nowPlaying) &&
        Objects.equals(this.previouslyPlaying, updateActivityRequest.previouslyPlaying) &&
        Objects.equals(this.report, updateActivityRequest.report) &&
        Objects.equals(this.timestamp, updateActivityRequest.timestamp) &&
        Objects.equals(this.userActivity, updateActivityRequest.userActivity) &&
        Objects.equals(this.version, updateActivityRequest.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(constraints, nowPlaying, previouslyPlaying, report, timestamp, userActivity, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateActivityRequest {\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    nowPlaying: ").append(toIndentedString(nowPlaying)).append("\n");
    sb.append("    previouslyPlaying: ").append(toIndentedString(previouslyPlaying)).append("\n");
    sb.append("    report: ").append(toIndentedString(report)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    userActivity: ").append(toIndentedString(userActivity)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("constraints");
    openapiFields.add("nowPlaying");
    openapiFields.add("previouslyPlaying");
    openapiFields.add("report");
    openapiFields.add("timestamp");
    openapiFields.add("userActivity");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("report");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("userActivity");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateActivityRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateActivityRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateActivityRequest is not found in the empty JSON string", UpdateActivityRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateActivityRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateActivityRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateActivityRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `constraints`
      if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
        Constraints.validateJsonElement(jsonObj.get("constraints"));
      }
      // validate the optional field `nowPlaying`
      if (jsonObj.get("nowPlaying") != null && !jsonObj.get("nowPlaying").isJsonNull()) {
        PlayerContext.validateJsonElement(jsonObj.get("nowPlaying"));
      }
      // validate the optional field `previouslyPlaying`
      if (jsonObj.get("previouslyPlaying") != null && !jsonObj.get("previouslyPlaying").isJsonNull()) {
        PlayerContext.validateJsonElement(jsonObj.get("previouslyPlaying"));
      }
      // validate the required field `report`
      QueueActivityReportEvent.validateJsonElement(jsonObj.get("report"));
      // validate the required field `userActivity`
      UserActivity.validateJsonElement(jsonObj.get("userActivity"));
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateActivityRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateActivityRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateActivityRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateActivityRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateActivityRequest>() {
           @Override
           public void write(JsonWriter out, UpdateActivityRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateActivityRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateActivityRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateActivityRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateActivityRequest
   */
  public static UpdateActivityRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateActivityRequest.class);
  }

  /**
   * Convert an instance of UpdateActivityRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

