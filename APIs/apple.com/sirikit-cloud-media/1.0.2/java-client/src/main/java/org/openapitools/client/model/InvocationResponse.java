/*
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.ExecutionMetrics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvocationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.502657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvocationResponse {
  public static final String SERIALIZED_NAME_DEBUG = "debug";
  @SerializedName(SERIALIZED_NAME_DEBUG)
  private URI debug;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  protected String method;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private ExecutionMetrics metrics;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private Object result;

  public InvocationResponse() {
    this.method = this.getClass().getSimpleName();
  }

  public InvocationResponse debug(URI debug) {
    this.debug = debug;
    return this;
  }

  /**
   * Get debug
   * @return debug
   */
  @javax.annotation.Nullable
  public URI getDebug() {
    return debug;
  }

  public void setDebug(URI debug) {
    this.debug = debug;
  }


  public InvocationResponse method(String method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nonnull
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public InvocationResponse metrics(ExecutionMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public ExecutionMetrics getMetrics() {
    return metrics;
  }

  public void setMetrics(ExecutionMetrics metrics) {
    this.metrics = metrics;
  }


  public InvocationResponse result(Object result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public Object getResult() {
    return result;
  }

  public void setResult(Object result) {
    this.result = result;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvocationResponse invocationResponse = (InvocationResponse) o;
    return Objects.equals(this.debug, invocationResponse.debug) &&
        Objects.equals(this.method, invocationResponse.method) &&
        Objects.equals(this.metrics, invocationResponse.metrics) &&
        Objects.equals(this.result, invocationResponse.result);
  }

  @Override
  public int hashCode() {
    return Objects.hash(debug, method, metrics, result);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvocationResponse {\n");
    sb.append("    debug: ").append(toIndentedString(debug)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("debug");
    openapiFields.add("method");
    openapiFields.add("metrics");
    openapiFields.add("result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("result");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvocationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvocationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvocationResponse is not found in the empty JSON string", InvocationResponse.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("method").getAsString();
      switch (discriminatorValue) {
        case "AddMediaIntentHandling.confirm":
          AddMediaIntentHandlingConfirmInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "AddMediaIntentHandling.handle":
          AddMediaIntentHandlingHandleInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "AddMediaIntentHandling.resolveMediaDestination":
          AddMediaIntentHandlingResolveMediaDestinationInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "AddMediaIntentHandling.resolveMediaItems":
          AddMediaIntentHandlingResolveMediaItemsInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "PlayMediaIntentHandling.handle":
          PlayMediaIntentHandlingHandleInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "PlayMediaIntentHandling.resolveMediaItems":
          PlayMediaIntentHandlingResolveMediaItemsInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "PlayMediaIntentHandling.resolvePlayShuffled":
          PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "PlayMediaIntentHandling.resolvePlaybackQueueLocation":
          PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "PlayMediaIntentHandling.resolvePlaybackRepeatMode":
          PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "PlayMediaIntentHandling.resolveResumePlayback":
          PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "ProtocolException":
          ProtocolExceptionInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "UpdateMediaAffinityIntentHandling.handle":
          UpdateMediaAffinityIntentHandlingHandleInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "UpdateMediaAffinityIntentHandling.resolveAffinityType":
          UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse.validateJsonElement(jsonElement);
          break;
        case "UpdateMediaAffinityIntentHandling.resolveMediaItems":
          UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `method` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of InvocationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvocationResponse
   * @throws IOException if the JSON string is invalid with respect to InvocationResponse
   */
  public static InvocationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvocationResponse.class);
  }

  /**
   * Convert an instance of InvocationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

