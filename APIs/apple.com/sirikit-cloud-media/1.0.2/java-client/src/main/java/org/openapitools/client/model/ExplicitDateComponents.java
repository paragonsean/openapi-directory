/*
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExplicitDateComponents
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.502657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExplicitDateComponents {
  public static final String SERIALIZED_NAME_CALENDAR_IDENTIFIER = "calendarIdentifier";
  @SerializedName(SERIALIZED_NAME_CALENDAR_IDENTIFIER)
  private String calendarIdentifier;

  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private Integer day;

  public static final String SERIALIZED_NAME_ERA = "era";
  @SerializedName(SERIALIZED_NAME_ERA)
  private Integer era;

  public static final String SERIALIZED_NAME_HOUR = "hour";
  @SerializedName(SERIALIZED_NAME_HOUR)
  private Integer hour;

  public static final String SERIALIZED_NAME_MINUTE = "minute";
  @SerializedName(SERIALIZED_NAME_MINUTE)
  private Integer minute;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private Integer month;

  public static final String SERIALIZED_NAME_NANOSECOND = "nanosecond";
  @SerializedName(SERIALIZED_NAME_NANOSECOND)
  private Integer nanosecond;

  public static final String SERIALIZED_NAME_SECOND = "second";
  @SerializedName(SERIALIZED_NAME_SECOND)
  private Integer second;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public ExplicitDateComponents() {
  }

  public ExplicitDateComponents calendarIdentifier(String calendarIdentifier) {
    this.calendarIdentifier = calendarIdentifier;
    return this;
  }

  /**
   * Get calendarIdentifier
   * @return calendarIdentifier
   */
  @javax.annotation.Nullable
  public String getCalendarIdentifier() {
    return calendarIdentifier;
  }

  public void setCalendarIdentifier(String calendarIdentifier) {
    this.calendarIdentifier = calendarIdentifier;
  }


  public ExplicitDateComponents day(Integer day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public Integer getDay() {
    return day;
  }

  public void setDay(Integer day) {
    this.day = day;
  }


  public ExplicitDateComponents era(Integer era) {
    this.era = era;
    return this;
  }

  /**
   * Get era
   * @return era
   */
  @javax.annotation.Nullable
  public Integer getEra() {
    return era;
  }

  public void setEra(Integer era) {
    this.era = era;
  }


  public ExplicitDateComponents hour(Integer hour) {
    this.hour = hour;
    return this;
  }

  /**
   * Get hour
   * @return hour
   */
  @javax.annotation.Nullable
  public Integer getHour() {
    return hour;
  }

  public void setHour(Integer hour) {
    this.hour = hour;
  }


  public ExplicitDateComponents minute(Integer minute) {
    this.minute = minute;
    return this;
  }

  /**
   * Get minute
   * @return minute
   */
  @javax.annotation.Nullable
  public Integer getMinute() {
    return minute;
  }

  public void setMinute(Integer minute) {
    this.minute = minute;
  }


  public ExplicitDateComponents month(Integer month) {
    this.month = month;
    return this;
  }

  /**
   * Get month
   * @return month
   */
  @javax.annotation.Nullable
  public Integer getMonth() {
    return month;
  }

  public void setMonth(Integer month) {
    this.month = month;
  }


  public ExplicitDateComponents nanosecond(Integer nanosecond) {
    this.nanosecond = nanosecond;
    return this;
  }

  /**
   * Get nanosecond
   * @return nanosecond
   */
  @javax.annotation.Nullable
  public Integer getNanosecond() {
    return nanosecond;
  }

  public void setNanosecond(Integer nanosecond) {
    this.nanosecond = nanosecond;
  }


  public ExplicitDateComponents second(Integer second) {
    this.second = second;
    return this;
  }

  /**
   * Get second
   * @return second
   */
  @javax.annotation.Nullable
  public Integer getSecond() {
    return second;
  }

  public void setSecond(Integer second) {
    this.second = second;
  }


  public ExplicitDateComponents timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public ExplicitDateComponents year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExplicitDateComponents explicitDateComponents = (ExplicitDateComponents) o;
    return Objects.equals(this.calendarIdentifier, explicitDateComponents.calendarIdentifier) &&
        Objects.equals(this.day, explicitDateComponents.day) &&
        Objects.equals(this.era, explicitDateComponents.era) &&
        Objects.equals(this.hour, explicitDateComponents.hour) &&
        Objects.equals(this.minute, explicitDateComponents.minute) &&
        Objects.equals(this.month, explicitDateComponents.month) &&
        Objects.equals(this.nanosecond, explicitDateComponents.nanosecond) &&
        Objects.equals(this.second, explicitDateComponents.second) &&
        Objects.equals(this.timeZone, explicitDateComponents.timeZone) &&
        Objects.equals(this.year, explicitDateComponents.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calendarIdentifier, day, era, hour, minute, month, nanosecond, second, timeZone, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExplicitDateComponents {\n");
    sb.append("    calendarIdentifier: ").append(toIndentedString(calendarIdentifier)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    era: ").append(toIndentedString(era)).append("\n");
    sb.append("    hour: ").append(toIndentedString(hour)).append("\n");
    sb.append("    minute: ").append(toIndentedString(minute)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    nanosecond: ").append(toIndentedString(nanosecond)).append("\n");
    sb.append("    second: ").append(toIndentedString(second)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calendarIdentifier");
    openapiFields.add("day");
    openapiFields.add("era");
    openapiFields.add("hour");
    openapiFields.add("minute");
    openapiFields.add("month");
    openapiFields.add("nanosecond");
    openapiFields.add("second");
    openapiFields.add("timeZone");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExplicitDateComponents
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExplicitDateComponents.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExplicitDateComponents is not found in the empty JSON string", ExplicitDateComponents.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExplicitDateComponents.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExplicitDateComponents` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("calendarIdentifier") != null && !jsonObj.get("calendarIdentifier").isJsonNull()) && !jsonObj.get("calendarIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calendarIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calendarIdentifier").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExplicitDateComponents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExplicitDateComponents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExplicitDateComponents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExplicitDateComponents.class));

       return (TypeAdapter<T>) new TypeAdapter<ExplicitDateComponents>() {
           @Override
           public void write(JsonWriter out, ExplicitDateComponents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExplicitDateComponents read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExplicitDateComponents given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExplicitDateComponents
   * @throws IOException if the JSON string is invalid with respect to ExplicitDateComponents
   */
  public static ExplicitDateComponents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExplicitDateComponents.class);
  }

  /**
   * Convert an instance of ExplicitDateComponents to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

