/*
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.ExecutionMetrics;
import org.openapitools.client.model.ProtocolException;
import org.openapitools.client.model.ProtocolExceptionInvocationResponse;
import org.openapitools.client.model.UpdateMediaAffinityIntentHandlingHandleInvocationResponse;
import org.openapitools.client.model.UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse;
import org.openapitools.client.model.UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.502657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateMediaAffinityIntentHandlingInvocationResponse extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(UpdateMediaAffinityIntentHandlingInvocationResponse.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateMediaAffinityIntentHandlingInvocationResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateMediaAffinityIntentHandlingInvocationResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse> adapterUpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse = gson.getDelegateAdapter(this, TypeToken.get(UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse.class));
            final TypeAdapter<UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse> adapterUpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse = gson.getDelegateAdapter(this, TypeToken.get(UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse.class));
            final TypeAdapter<UpdateMediaAffinityIntentHandlingHandleInvocationResponse> adapterUpdateMediaAffinityIntentHandlingHandleInvocationResponse = gson.getDelegateAdapter(this, TypeToken.get(UpdateMediaAffinityIntentHandlingHandleInvocationResponse.class));
            final TypeAdapter<ProtocolExceptionInvocationResponse> adapterProtocolExceptionInvocationResponse = gson.getDelegateAdapter(this, TypeToken.get(ProtocolExceptionInvocationResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<UpdateMediaAffinityIntentHandlingInvocationResponse>() {
                @Override
                public void write(JsonWriter out, UpdateMediaAffinityIntentHandlingInvocationResponse value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse`
                    if (value.getActualInstance() instanceof UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse) {
                        JsonElement element = adapterUpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse.toJsonTree((UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse`
                    if (value.getActualInstance() instanceof UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse) {
                        JsonElement element = adapterUpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse.toJsonTree((UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UpdateMediaAffinityIntentHandlingHandleInvocationResponse`
                    if (value.getActualInstance() instanceof UpdateMediaAffinityIntentHandlingHandleInvocationResponse) {
                        JsonElement element = adapterUpdateMediaAffinityIntentHandlingHandleInvocationResponse.toJsonTree((UpdateMediaAffinityIntentHandlingHandleInvocationResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ProtocolExceptionInvocationResponse`
                    if (value.getActualInstance() instanceof ProtocolExceptionInvocationResponse) {
                        JsonElement element = adapterProtocolExceptionInvocationResponse.toJsonTree((ProtocolExceptionInvocationResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ProtocolExceptionInvocationResponse, UpdateMediaAffinityIntentHandlingHandleInvocationResponse, UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse, UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse");
                }

                @Override
                public UpdateMediaAffinityIntentHandlingInvocationResponse read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse'", e);
                    }
                    // deserialize UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse'", e);
                    }
                    // deserialize UpdateMediaAffinityIntentHandlingHandleInvocationResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdateMediaAffinityIntentHandlingHandleInvocationResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdateMediaAffinityIntentHandlingHandleInvocationResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdateMediaAffinityIntentHandlingHandleInvocationResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdateMediaAffinityIntentHandlingHandleInvocationResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdateMediaAffinityIntentHandlingHandleInvocationResponse'", e);
                    }
                    // deserialize ProtocolExceptionInvocationResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProtocolExceptionInvocationResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterProtocolExceptionInvocationResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ProtocolExceptionInvocationResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProtocolExceptionInvocationResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProtocolExceptionInvocationResponse'", e);
                    }

                    if (match == 1) {
                        UpdateMediaAffinityIntentHandlingInvocationResponse ret = new UpdateMediaAffinityIntentHandlingInvocationResponse();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for UpdateMediaAffinityIntentHandlingInvocationResponse: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public UpdateMediaAffinityIntentHandlingInvocationResponse() {
        super("oneOf", Boolean.FALSE);
    }

    public UpdateMediaAffinityIntentHandlingInvocationResponse(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse", UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse.class);
        schemas.put("UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse", UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse.class);
        schemas.put("UpdateMediaAffinityIntentHandlingHandleInvocationResponse", UpdateMediaAffinityIntentHandlingHandleInvocationResponse.class);
        schemas.put("ProtocolExceptionInvocationResponse", ProtocolExceptionInvocationResponse.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return UpdateMediaAffinityIntentHandlingInvocationResponse.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ProtocolExceptionInvocationResponse, UpdateMediaAffinityIntentHandlingHandleInvocationResponse, UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse, UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UpdateMediaAffinityIntentHandlingHandleInvocationResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProtocolExceptionInvocationResponse) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ProtocolExceptionInvocationResponse, UpdateMediaAffinityIntentHandlingHandleInvocationResponse, UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse, UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse");
    }

    /**
     * Get the actual instance, which can be the following:
     * ProtocolExceptionInvocationResponse, UpdateMediaAffinityIntentHandlingHandleInvocationResponse, UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse, UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse
     *
     * @return The actual instance (ProtocolExceptionInvocationResponse, UpdateMediaAffinityIntentHandlingHandleInvocationResponse, UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse, UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse`. If the actual instance is not `UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse`
     * @throws ClassCastException if the instance is not `UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse`
     */
    public UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse getUpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse() throws ClassCastException {
        return (UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse`. If the actual instance is not `UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse`
     * @throws ClassCastException if the instance is not `UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse`
     */
    public UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse getUpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse() throws ClassCastException {
        return (UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UpdateMediaAffinityIntentHandlingHandleInvocationResponse`. If the actual instance is not `UpdateMediaAffinityIntentHandlingHandleInvocationResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdateMediaAffinityIntentHandlingHandleInvocationResponse`
     * @throws ClassCastException if the instance is not `UpdateMediaAffinityIntentHandlingHandleInvocationResponse`
     */
    public UpdateMediaAffinityIntentHandlingHandleInvocationResponse getUpdateMediaAffinityIntentHandlingHandleInvocationResponse() throws ClassCastException {
        return (UpdateMediaAffinityIntentHandlingHandleInvocationResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ProtocolExceptionInvocationResponse`. If the actual instance is not `ProtocolExceptionInvocationResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProtocolExceptionInvocationResponse`
     * @throws ClassCastException if the instance is not `ProtocolExceptionInvocationResponse`
     */
    public ProtocolExceptionInvocationResponse getProtocolExceptionInvocationResponse() throws ClassCastException {
        return (ProtocolExceptionInvocationResponse)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to UpdateMediaAffinityIntentHandlingInvocationResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse
        try {
            UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse
        try {
            UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UpdateMediaAffinityIntentHandlingHandleInvocationResponse
        try {
            UpdateMediaAffinityIntentHandlingHandleInvocationResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdateMediaAffinityIntentHandlingHandleInvocationResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ProtocolExceptionInvocationResponse
        try {
            ProtocolExceptionInvocationResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ProtocolExceptionInvocationResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for UpdateMediaAffinityIntentHandlingInvocationResponse with oneOf schemas: ProtocolExceptionInvocationResponse, UpdateMediaAffinityIntentHandlingHandleInvocationResponse, UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse, UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of UpdateMediaAffinityIntentHandlingInvocationResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateMediaAffinityIntentHandlingInvocationResponse
     * @throws IOException if the JSON string is invalid with respect to UpdateMediaAffinityIntentHandlingInvocationResponse
     */
    public static UpdateMediaAffinityIntentHandlingInvocationResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateMediaAffinityIntentHandlingInvocationResponse.class);
    }

    /**
     * Convert an instance of UpdateMediaAffinityIntentHandlingInvocationResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

