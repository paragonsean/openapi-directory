/*
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProtocolExceptionReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProtocolException
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.502657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProtocolException {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private Long code;

  public static final String SERIALIZED_NAME_METHOD_INDEX = "methodIndex";
  @SerializedName(SERIALIZED_NAME_METHOD_INDEX)
  private Integer methodIndex;

  public static final String SERIALIZED_NAME_METHOD_NAME = "methodName";
  @SerializedName(SERIALIZED_NAME_METHOD_NAME)
  private String methodName;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private ProtocolExceptionReason reason;

  public static final String SERIALIZED_NAME_RETRY_WITH_DELAY = "retryWithDelay";
  @SerializedName(SERIALIZED_NAME_RETRY_WITH_DELAY)
  private Float retryWithDelay = -1f;

  public static final String SERIALIZED_NAME_TRACE = "trace";
  @SerializedName(SERIALIZED_NAME_TRACE)
  private List<String> trace = new ArrayList<>();

  public ProtocolException() {
  }

  public ProtocolException code(Long code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public Long getCode() {
    return code;
  }

  public void setCode(Long code) {
    this.code = code;
  }


  public ProtocolException methodIndex(Integer methodIndex) {
    this.methodIndex = methodIndex;
    return this;
  }

  /**
   * Get methodIndex
   * @return methodIndex
   */
  @javax.annotation.Nullable
  public Integer getMethodIndex() {
    return methodIndex;
  }

  public void setMethodIndex(Integer methodIndex) {
    this.methodIndex = methodIndex;
  }


  public ProtocolException methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

  /**
   * Get methodName
   * @return methodName
   */
  @javax.annotation.Nullable
  public String getMethodName() {
    return methodName;
  }

  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public ProtocolException reason(ProtocolExceptionReason reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nonnull
  public ProtocolExceptionReason getReason() {
    return reason;
  }

  public void setReason(ProtocolExceptionReason reason) {
    this.reason = reason;
  }


  public ProtocolException retryWithDelay(Float retryWithDelay) {
    this.retryWithDelay = retryWithDelay;
    return this;
  }

  /**
   * Get retryWithDelay
   * @return retryWithDelay
   */
  @javax.annotation.Nullable
  public Float getRetryWithDelay() {
    return retryWithDelay;
  }

  public void setRetryWithDelay(Float retryWithDelay) {
    this.retryWithDelay = retryWithDelay;
  }


  public ProtocolException trace(List<String> trace) {
    this.trace = trace;
    return this;
  }

  public ProtocolException addTraceItem(String traceItem) {
    if (this.trace == null) {
      this.trace = new ArrayList<>();
    }
    this.trace.add(traceItem);
    return this;
  }

  /**
   * Get trace
   * @return trace
   */
  @javax.annotation.Nullable
  public List<String> getTrace() {
    return trace;
  }

  public void setTrace(List<String> trace) {
    this.trace = trace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtocolException protocolException = (ProtocolException) o;
    return Objects.equals(this.code, protocolException.code) &&
        Objects.equals(this.methodIndex, protocolException.methodIndex) &&
        Objects.equals(this.methodName, protocolException.methodName) &&
        Objects.equals(this.reason, protocolException.reason) &&
        Objects.equals(this.retryWithDelay, protocolException.retryWithDelay) &&
        Objects.equals(this.trace, protocolException.trace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, methodIndex, methodName, reason, retryWithDelay, trace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtocolException {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    methodIndex: ").append(toIndentedString(methodIndex)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    retryWithDelay: ").append(toIndentedString(retryWithDelay)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("methodIndex");
    openapiFields.add("methodName");
    openapiFields.add("reason");
    openapiFields.add("retryWithDelay");
    openapiFields.add("trace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reason");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtocolException
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtocolException.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtocolException is not found in the empty JSON string", ProtocolException.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProtocolException.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtocolException` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProtocolException.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("methodName") != null && !jsonObj.get("methodName").isJsonNull()) && !jsonObj.get("methodName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `methodName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("methodName").toString()));
      }
      // validate the required field `reason`
      ProtocolExceptionReason.validateJsonElement(jsonObj.get("reason"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("trace") != null && !jsonObj.get("trace").isJsonNull() && !jsonObj.get("trace").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trace` to be an array in the JSON string but got `%s`", jsonObj.get("trace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtocolException.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtocolException' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtocolException> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtocolException.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtocolException>() {
           @Override
           public void write(JsonWriter out, ProtocolException value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtocolException read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProtocolException given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtocolException
   * @throws IOException if the JSON string is invalid with respect to ProtocolException
   */
  public static ProtocolException fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtocolException.class);
  }

  /**
   * Convert an instance of ProtocolException to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

