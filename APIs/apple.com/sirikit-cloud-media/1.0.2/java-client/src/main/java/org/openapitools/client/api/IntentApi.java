/*
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddMediaIntentHandlingInvocation;
import org.openapitools.client.model.AddMediaIntentHandlingInvocationResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.PlayMediaIntentHandlingInvocation;
import org.openapitools.client.model.PlayMediaIntentHandlingInvocationResponse;
import org.openapitools.client.model.UpdateMediaAffinityIntentHandlingInvocation;
import org.openapitools.client.model.UpdateMediaAffinityIntentHandlingInvocationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addMediaIntentHandling
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param addMediaIntentHandlingInvocation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addMediaIntentHandlingCall(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<AddMediaIntentHandlingInvocation> addMediaIntentHandlingInvocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addMediaIntentHandlingInvocation;

        // create path and map variables
        String localVarPath = "/intent/addMedia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApplecloudextensionSessionId != null) {
            localVarHeaderParams.put("x-applecloudextension-session-id", localVarApiClient.parameterToString(xApplecloudextensionSessionId));
        }

        if (xApplecloudextensionRetryCount != null) {
            localVarHeaderParams.put("x-applecloudextension-retry-count", localVarApiClient.parameterToString(xApplecloudextensionRetryCount));
        }

        if (requestTimeout != null) {
            localVarHeaderParams.put("Request-Timeout", localVarApiClient.parameterToString(requestTimeout));
        }

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMediaIntentHandlingValidateBeforeCall(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<AddMediaIntentHandlingInvocation> addMediaIntentHandlingInvocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApplecloudextensionSessionId' is set
        if (xApplecloudextensionSessionId == null) {
            throw new ApiException("Missing the required parameter 'xApplecloudextensionSessionId' when calling addMediaIntentHandling(Async)");
        }

        // verify the required parameter 'requestTimeout' is set
        if (requestTimeout == null) {
            throw new ApiException("Missing the required parameter 'requestTimeout' when calling addMediaIntentHandling(Async)");
        }

        // verify the required parameter 'userAgent' is set
        if (userAgent == null) {
            throw new ApiException("Missing the required parameter 'userAgent' when calling addMediaIntentHandling(Async)");
        }

        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling addMediaIntentHandling(Async)");
        }

        return addMediaIntentHandlingCall(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, addMediaIntentHandlingInvocation, _callback);

    }

    /**
     * addMedia
     * 
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param addMediaIntentHandlingInvocation  (optional)
     * @return List&lt;AddMediaIntentHandlingInvocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public List<AddMediaIntentHandlingInvocationResponse> addMediaIntentHandling(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<AddMediaIntentHandlingInvocation> addMediaIntentHandlingInvocation) throws ApiException {
        ApiResponse<List<AddMediaIntentHandlingInvocationResponse>> localVarResp = addMediaIntentHandlingWithHttpInfo(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, addMediaIntentHandlingInvocation);
        return localVarResp.getData();
    }

    /**
     * addMedia
     * 
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param addMediaIntentHandlingInvocation  (optional)
     * @return ApiResponse&lt;List&lt;AddMediaIntentHandlingInvocationResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<AddMediaIntentHandlingInvocationResponse>> addMediaIntentHandlingWithHttpInfo(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<AddMediaIntentHandlingInvocation> addMediaIntentHandlingInvocation) throws ApiException {
        okhttp3.Call localVarCall = addMediaIntentHandlingValidateBeforeCall(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, addMediaIntentHandlingInvocation, null);
        Type localVarReturnType = new TypeToken<List<AddMediaIntentHandlingInvocationResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * addMedia (asynchronously)
     * 
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param addMediaIntentHandlingInvocation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addMediaIntentHandlingAsync(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<AddMediaIntentHandlingInvocation> addMediaIntentHandlingInvocation, final ApiCallback<List<AddMediaIntentHandlingInvocationResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMediaIntentHandlingValidateBeforeCall(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, addMediaIntentHandlingInvocation, _callback);
        Type localVarReturnType = new TypeToken<List<AddMediaIntentHandlingInvocationResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for playMediaIntentHandling
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param playMediaIntentHandlingInvocation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call playMediaIntentHandlingCall(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<PlayMediaIntentHandlingInvocation> playMediaIntentHandlingInvocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = playMediaIntentHandlingInvocation;

        // create path and map variables
        String localVarPath = "/intent/playMedia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApplecloudextensionSessionId != null) {
            localVarHeaderParams.put("x-applecloudextension-session-id", localVarApiClient.parameterToString(xApplecloudextensionSessionId));
        }

        if (xApplecloudextensionRetryCount != null) {
            localVarHeaderParams.put("x-applecloudextension-retry-count", localVarApiClient.parameterToString(xApplecloudextensionRetryCount));
        }

        if (requestTimeout != null) {
            localVarHeaderParams.put("Request-Timeout", localVarApiClient.parameterToString(requestTimeout));
        }

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playMediaIntentHandlingValidateBeforeCall(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<PlayMediaIntentHandlingInvocation> playMediaIntentHandlingInvocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApplecloudextensionSessionId' is set
        if (xApplecloudextensionSessionId == null) {
            throw new ApiException("Missing the required parameter 'xApplecloudextensionSessionId' when calling playMediaIntentHandling(Async)");
        }

        // verify the required parameter 'requestTimeout' is set
        if (requestTimeout == null) {
            throw new ApiException("Missing the required parameter 'requestTimeout' when calling playMediaIntentHandling(Async)");
        }

        // verify the required parameter 'userAgent' is set
        if (userAgent == null) {
            throw new ApiException("Missing the required parameter 'userAgent' when calling playMediaIntentHandling(Async)");
        }

        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling playMediaIntentHandling(Async)");
        }

        return playMediaIntentHandlingCall(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, playMediaIntentHandlingInvocation, _callback);

    }

    /**
     * playMedia
     * 
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param playMediaIntentHandlingInvocation  (optional)
     * @return List&lt;PlayMediaIntentHandlingInvocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public List<PlayMediaIntentHandlingInvocationResponse> playMediaIntentHandling(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<PlayMediaIntentHandlingInvocation> playMediaIntentHandlingInvocation) throws ApiException {
        ApiResponse<List<PlayMediaIntentHandlingInvocationResponse>> localVarResp = playMediaIntentHandlingWithHttpInfo(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, playMediaIntentHandlingInvocation);
        return localVarResp.getData();
    }

    /**
     * playMedia
     * 
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param playMediaIntentHandlingInvocation  (optional)
     * @return ApiResponse&lt;List&lt;PlayMediaIntentHandlingInvocationResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<PlayMediaIntentHandlingInvocationResponse>> playMediaIntentHandlingWithHttpInfo(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<PlayMediaIntentHandlingInvocation> playMediaIntentHandlingInvocation) throws ApiException {
        okhttp3.Call localVarCall = playMediaIntentHandlingValidateBeforeCall(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, playMediaIntentHandlingInvocation, null);
        Type localVarReturnType = new TypeToken<List<PlayMediaIntentHandlingInvocationResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * playMedia (asynchronously)
     * 
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param playMediaIntentHandlingInvocation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call playMediaIntentHandlingAsync(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<PlayMediaIntentHandlingInvocation> playMediaIntentHandlingInvocation, final ApiCallback<List<PlayMediaIntentHandlingInvocationResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = playMediaIntentHandlingValidateBeforeCall(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, playMediaIntentHandlingInvocation, _callback);
        Type localVarReturnType = new TypeToken<List<PlayMediaIntentHandlingInvocationResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMediaAffinityIntentHandling
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param updateMediaAffinityIntentHandlingInvocation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateMediaAffinityIntentHandlingCall(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<UpdateMediaAffinityIntentHandlingInvocation> updateMediaAffinityIntentHandlingInvocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMediaAffinityIntentHandlingInvocation;

        // create path and map variables
        String localVarPath = "/intent/updateMediaAffinity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApplecloudextensionSessionId != null) {
            localVarHeaderParams.put("x-applecloudextension-session-id", localVarApiClient.parameterToString(xApplecloudextensionSessionId));
        }

        if (xApplecloudextensionRetryCount != null) {
            localVarHeaderParams.put("x-applecloudextension-retry-count", localVarApiClient.parameterToString(xApplecloudextensionRetryCount));
        }

        if (requestTimeout != null) {
            localVarHeaderParams.put("Request-Timeout", localVarApiClient.parameterToString(requestTimeout));
        }

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMediaAffinityIntentHandlingValidateBeforeCall(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<UpdateMediaAffinityIntentHandlingInvocation> updateMediaAffinityIntentHandlingInvocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApplecloudextensionSessionId' is set
        if (xApplecloudextensionSessionId == null) {
            throw new ApiException("Missing the required parameter 'xApplecloudextensionSessionId' when calling updateMediaAffinityIntentHandling(Async)");
        }

        // verify the required parameter 'requestTimeout' is set
        if (requestTimeout == null) {
            throw new ApiException("Missing the required parameter 'requestTimeout' when calling updateMediaAffinityIntentHandling(Async)");
        }

        // verify the required parameter 'userAgent' is set
        if (userAgent == null) {
            throw new ApiException("Missing the required parameter 'userAgent' when calling updateMediaAffinityIntentHandling(Async)");
        }

        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling updateMediaAffinityIntentHandling(Async)");
        }

        return updateMediaAffinityIntentHandlingCall(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, updateMediaAffinityIntentHandlingInvocation, _callback);

    }

    /**
     * updateMediaAffinity
     * 
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param updateMediaAffinityIntentHandlingInvocation  (optional)
     * @return List&lt;UpdateMediaAffinityIntentHandlingInvocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public List<UpdateMediaAffinityIntentHandlingInvocationResponse> updateMediaAffinityIntentHandling(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<UpdateMediaAffinityIntentHandlingInvocation> updateMediaAffinityIntentHandlingInvocation) throws ApiException {
        ApiResponse<List<UpdateMediaAffinityIntentHandlingInvocationResponse>> localVarResp = updateMediaAffinityIntentHandlingWithHttpInfo(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, updateMediaAffinityIntentHandlingInvocation);
        return localVarResp.getData();
    }

    /**
     * updateMediaAffinity
     * 
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param updateMediaAffinityIntentHandlingInvocation  (optional)
     * @return ApiResponse&lt;List&lt;UpdateMediaAffinityIntentHandlingInvocationResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<UpdateMediaAffinityIntentHandlingInvocationResponse>> updateMediaAffinityIntentHandlingWithHttpInfo(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<UpdateMediaAffinityIntentHandlingInvocation> updateMediaAffinityIntentHandlingInvocation) throws ApiException {
        okhttp3.Call localVarCall = updateMediaAffinityIntentHandlingValidateBeforeCall(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, updateMediaAffinityIntentHandlingInvocation, null);
        Type localVarReturnType = new TypeToken<List<UpdateMediaAffinityIntentHandlingInvocationResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * updateMediaAffinity (asynchronously)
     * 
     * @param xApplecloudextensionSessionId  (required)
     * @param requestTimeout  (required)
     * @param userAgent  (required)
     * @param acceptLanguage  (required)
     * @param xApplecloudextensionRetryCount  (optional)
     * @param updateMediaAffinityIntentHandlingInvocation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-applecloudextension-session-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateMediaAffinityIntentHandlingAsync(String xApplecloudextensionSessionId, BigDecimal requestTimeout, String userAgent, String acceptLanguage, BigDecimal xApplecloudextensionRetryCount, List<UpdateMediaAffinityIntentHandlingInvocation> updateMediaAffinityIntentHandlingInvocation, final ApiCallback<List<UpdateMediaAffinityIntentHandlingInvocationResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMediaAffinityIntentHandlingValidateBeforeCall(xApplecloudextensionSessionId, requestTimeout, userAgent, acceptLanguage, xApplecloudextensionRetryCount, updateMediaAffinityIntentHandlingInvocation, _callback);
        Type localVarReturnType = new TypeToken<List<UpdateMediaAffinityIntentHandlingInvocationResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
