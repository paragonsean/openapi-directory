/*
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Content;
import org.openapitools.client.model.QueueControlMapping;
import org.openapitools.client.model.QueueInsertPointer;
import org.openapitools.client.model.QueuePlayPointer;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Queue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.502657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Queue {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private List<Content> content = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT_ITEMS_COUNT = "contentItemsCount";
  @SerializedName(SERIALIZED_NAME_CONTENT_ITEMS_COUNT)
  private Integer contentItemsCount;

  public static final String SERIALIZED_NAME_CONTROLS = "controls";
  @SerializedName(SERIALIZED_NAME_CONTROLS)
  private QueueControlMapping controls;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_INSERT_POINTER = "insertPointer";
  @SerializedName(SERIALIZED_NAME_INSERT_POINTER)
  private QueueInsertPointer insertPointer;

  public static final String SERIALIZED_NAME_NEXT_CONTENT_URL = "nextContentUrl";
  @SerializedName(SERIALIZED_NAME_NEXT_CONTENT_URL)
  private String nextContentUrl;

  public static final String SERIALIZED_NAME_PLAY_POINTER = "playPointer";
  @SerializedName(SERIALIZED_NAME_PLAY_POINTER)
  private QueuePlayPointer playPointer;

  public static final String SERIALIZED_NAME_PREROLL_SECONDS = "prerollSeconds";
  @SerializedName(SERIALIZED_NAME_PREROLL_SECONDS)
  private Double prerollSeconds;

  public static final String SERIALIZED_NAME_PREVIOUS_CONTENT_URL = "previousContentUrl";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_CONTENT_URL)
  private String previousContentUrl;

  public static final String SERIALIZED_NAME_SKIPS_REMAINING = "skipsRemaining";
  @SerializedName(SERIALIZED_NAME_SKIPS_REMAINING)
  private Integer skipsRemaining;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Queue() {
  }

  public Queue content(List<Content> content) {
    this.content = content;
    return this;
  }

  public Queue addContentItem(Content contentItem) {
    if (this.content == null) {
      this.content = new ArrayList<>();
    }
    this.content.add(contentItem);
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nonnull
  public List<Content> getContent() {
    return content;
  }

  public void setContent(List<Content> content) {
    this.content = content;
  }


  public Queue contentItemsCount(Integer contentItemsCount) {
    this.contentItemsCount = contentItemsCount;
    return this;
  }

  /**
   * Get contentItemsCount
   * @return contentItemsCount
   */
  @javax.annotation.Nullable
  public Integer getContentItemsCount() {
    return contentItemsCount;
  }

  public void setContentItemsCount(Integer contentItemsCount) {
    this.contentItemsCount = contentItemsCount;
  }


  public Queue controls(QueueControlMapping controls) {
    this.controls = controls;
    return this;
  }

  /**
   * Get controls
   * @return controls
   */
  @javax.annotation.Nullable
  public QueueControlMapping getControls() {
    return controls;
  }

  public void setControls(QueueControlMapping controls) {
    this.controls = controls;
  }


  public Queue identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nonnull
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public Queue insertPointer(QueueInsertPointer insertPointer) {
    this.insertPointer = insertPointer;
    return this;
  }

  /**
   * Get insertPointer
   * @return insertPointer
   */
  @javax.annotation.Nullable
  public QueueInsertPointer getInsertPointer() {
    return insertPointer;
  }

  public void setInsertPointer(QueueInsertPointer insertPointer) {
    this.insertPointer = insertPointer;
  }


  public Queue nextContentUrl(String nextContentUrl) {
    this.nextContentUrl = nextContentUrl;
    return this;
  }

  /**
   * Get nextContentUrl
   * @return nextContentUrl
   */
  @javax.annotation.Nullable
  public String getNextContentUrl() {
    return nextContentUrl;
  }

  public void setNextContentUrl(String nextContentUrl) {
    this.nextContentUrl = nextContentUrl;
  }


  public Queue playPointer(QueuePlayPointer playPointer) {
    this.playPointer = playPointer;
    return this;
  }

  /**
   * Get playPointer
   * @return playPointer
   */
  @javax.annotation.Nullable
  public QueuePlayPointer getPlayPointer() {
    return playPointer;
  }

  public void setPlayPointer(QueuePlayPointer playPointer) {
    this.playPointer = playPointer;
  }


  public Queue prerollSeconds(Double prerollSeconds) {
    this.prerollSeconds = prerollSeconds;
    return this;
  }

  /**
   * Get prerollSeconds
   * @return prerollSeconds
   */
  @javax.annotation.Nullable
  public Double getPrerollSeconds() {
    return prerollSeconds;
  }

  public void setPrerollSeconds(Double prerollSeconds) {
    this.prerollSeconds = prerollSeconds;
  }


  public Queue previousContentUrl(String previousContentUrl) {
    this.previousContentUrl = previousContentUrl;
    return this;
  }

  /**
   * Get previousContentUrl
   * @return previousContentUrl
   */
  @javax.annotation.Nullable
  public String getPreviousContentUrl() {
    return previousContentUrl;
  }

  public void setPreviousContentUrl(String previousContentUrl) {
    this.previousContentUrl = previousContentUrl;
  }


  public Queue skipsRemaining(Integer skipsRemaining) {
    this.skipsRemaining = skipsRemaining;
    return this;
  }

  /**
   * Get skipsRemaining
   * @return skipsRemaining
   */
  @javax.annotation.Nullable
  public Integer getSkipsRemaining() {
    return skipsRemaining;
  }

  public void setSkipsRemaining(Integer skipsRemaining) {
    this.skipsRemaining = skipsRemaining;
  }


  public Queue version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Queue queue = (Queue) o;
    return Objects.equals(this.content, queue.content) &&
        Objects.equals(this.contentItemsCount, queue.contentItemsCount) &&
        Objects.equals(this.controls, queue.controls) &&
        Objects.equals(this.identifier, queue.identifier) &&
        Objects.equals(this.insertPointer, queue.insertPointer) &&
        Objects.equals(this.nextContentUrl, queue.nextContentUrl) &&
        Objects.equals(this.playPointer, queue.playPointer) &&
        Objects.equals(this.prerollSeconds, queue.prerollSeconds) &&
        Objects.equals(this.previousContentUrl, queue.previousContentUrl) &&
        Objects.equals(this.skipsRemaining, queue.skipsRemaining) &&
        Objects.equals(this.version, queue.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, contentItemsCount, controls, identifier, insertPointer, nextContentUrl, playPointer, prerollSeconds, previousContentUrl, skipsRemaining, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Queue {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentItemsCount: ").append(toIndentedString(contentItemsCount)).append("\n");
    sb.append("    controls: ").append(toIndentedString(controls)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    insertPointer: ").append(toIndentedString(insertPointer)).append("\n");
    sb.append("    nextContentUrl: ").append(toIndentedString(nextContentUrl)).append("\n");
    sb.append("    playPointer: ").append(toIndentedString(playPointer)).append("\n");
    sb.append("    prerollSeconds: ").append(toIndentedString(prerollSeconds)).append("\n");
    sb.append("    previousContentUrl: ").append(toIndentedString(previousContentUrl)).append("\n");
    sb.append("    skipsRemaining: ").append(toIndentedString(skipsRemaining)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("contentItemsCount");
    openapiFields.add("controls");
    openapiFields.add("identifier");
    openapiFields.add("insertPointer");
    openapiFields.add("nextContentUrl");
    openapiFields.add("playPointer");
    openapiFields.add("prerollSeconds");
    openapiFields.add("previousContentUrl");
    openapiFields.add("skipsRemaining");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("identifier");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Queue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Queue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Queue is not found in the empty JSON string", Queue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Queue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Queue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Queue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("content").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be an array in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }

      JsonArray jsonArraycontent = jsonObj.getAsJsonArray("content");
      // validate the required field `content` (array)
      for (int i = 0; i < jsonArraycontent.size(); i++) {
        Content.validateJsonElement(jsonArraycontent.get(i));
      };
      if (!jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      // validate the optional field `insertPointer`
      if (jsonObj.get("insertPointer") != null && !jsonObj.get("insertPointer").isJsonNull()) {
        QueueInsertPointer.validateJsonElement(jsonObj.get("insertPointer"));
      }
      if ((jsonObj.get("nextContentUrl") != null && !jsonObj.get("nextContentUrl").isJsonNull()) && !jsonObj.get("nextContentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextContentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextContentUrl").toString()));
      }
      // validate the optional field `playPointer`
      if (jsonObj.get("playPointer") != null && !jsonObj.get("playPointer").isJsonNull()) {
        QueuePlayPointer.validateJsonElement(jsonObj.get("playPointer"));
      }
      if ((jsonObj.get("previousContentUrl") != null && !jsonObj.get("previousContentUrl").isJsonNull()) && !jsonObj.get("previousContentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousContentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousContentUrl").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Queue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Queue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Queue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Queue.class));

       return (TypeAdapter<T>) new TypeAdapter<Queue>() {
           @Override
           public void write(JsonWriter out, Queue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Queue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Queue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Queue
   * @throws IOException if the JSON string is invalid with respect to Queue
   */
  public static Queue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Queue.class);
  }

  /**
   * Convert an instance of Queue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

