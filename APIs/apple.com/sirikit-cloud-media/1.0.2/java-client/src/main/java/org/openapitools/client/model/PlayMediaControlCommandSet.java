/*
 * SiriKit Cloud Media
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayMediaControlCommandSet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.502657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayMediaControlCommandSet {
  public static final String SERIALIZED_NAME_BOOKMARK_TRACK = "bookmarkTrack";
  @SerializedName(SERIALIZED_NAME_BOOKMARK_TRACK)
  private Boolean bookmarkTrack;

  public static final String SERIALIZED_NAME_DISLIKE_TRACK = "dislikeTrack";
  @SerializedName(SERIALIZED_NAME_DISLIKE_TRACK)
  private Boolean dislikeTrack;

  public static final String SERIALIZED_NAME_LIKE_TRACK = "likeTrack";
  @SerializedName(SERIALIZED_NAME_LIKE_TRACK)
  private Boolean likeTrack;

  public static final String SERIALIZED_NAME_NEXT_TRACK = "nextTrack";
  @SerializedName(SERIALIZED_NAME_NEXT_TRACK)
  private Boolean nextTrack;

  public static final String SERIALIZED_NAME_PREFER_SKIP_BACKWARD = "preferSkipBackward";
  @SerializedName(SERIALIZED_NAME_PREFER_SKIP_BACKWARD)
  private Boolean preferSkipBackward;

  public static final String SERIALIZED_NAME_PREFER_SKIP_FORWARD = "preferSkipForward";
  @SerializedName(SERIALIZED_NAME_PREFER_SKIP_FORWARD)
  private Boolean preferSkipForward;

  public static final String SERIALIZED_NAME_PREVIOUS_TRACK = "previousTrack";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_TRACK)
  private Boolean previousTrack;

  public static final String SERIALIZED_NAME_SEEK_TO_PLAYBACK_POSITION = "seekToPlaybackPosition";
  @SerializedName(SERIALIZED_NAME_SEEK_TO_PLAYBACK_POSITION)
  private Boolean seekToPlaybackPosition;

  public static final String SERIALIZED_NAME_SKIP_BACKWARD = "skipBackward";
  @SerializedName(SERIALIZED_NAME_SKIP_BACKWARD)
  private Boolean skipBackward;

  public static final String SERIALIZED_NAME_SKIP_FORWARD = "skipForward";
  @SerializedName(SERIALIZED_NAME_SKIP_FORWARD)
  private Boolean skipForward;

  public PlayMediaControlCommandSet() {
  }

  public PlayMediaControlCommandSet bookmarkTrack(Boolean bookmarkTrack) {
    this.bookmarkTrack = bookmarkTrack;
    return this;
  }

  /**
   * Get bookmarkTrack
   * @return bookmarkTrack
   */
  @javax.annotation.Nullable
  public Boolean getBookmarkTrack() {
    return bookmarkTrack;
  }

  public void setBookmarkTrack(Boolean bookmarkTrack) {
    this.bookmarkTrack = bookmarkTrack;
  }


  public PlayMediaControlCommandSet dislikeTrack(Boolean dislikeTrack) {
    this.dislikeTrack = dislikeTrack;
    return this;
  }

  /**
   * Get dislikeTrack
   * @return dislikeTrack
   */
  @javax.annotation.Nullable
  public Boolean getDislikeTrack() {
    return dislikeTrack;
  }

  public void setDislikeTrack(Boolean dislikeTrack) {
    this.dislikeTrack = dislikeTrack;
  }


  public PlayMediaControlCommandSet likeTrack(Boolean likeTrack) {
    this.likeTrack = likeTrack;
    return this;
  }

  /**
   * Get likeTrack
   * @return likeTrack
   */
  @javax.annotation.Nullable
  public Boolean getLikeTrack() {
    return likeTrack;
  }

  public void setLikeTrack(Boolean likeTrack) {
    this.likeTrack = likeTrack;
  }


  public PlayMediaControlCommandSet nextTrack(Boolean nextTrack) {
    this.nextTrack = nextTrack;
    return this;
  }

  /**
   * Get nextTrack
   * @return nextTrack
   */
  @javax.annotation.Nullable
  public Boolean getNextTrack() {
    return nextTrack;
  }

  public void setNextTrack(Boolean nextTrack) {
    this.nextTrack = nextTrack;
  }


  public PlayMediaControlCommandSet preferSkipBackward(Boolean preferSkipBackward) {
    this.preferSkipBackward = preferSkipBackward;
    return this;
  }

  /**
   * Get preferSkipBackward
   * @return preferSkipBackward
   */
  @javax.annotation.Nullable
  public Boolean getPreferSkipBackward() {
    return preferSkipBackward;
  }

  public void setPreferSkipBackward(Boolean preferSkipBackward) {
    this.preferSkipBackward = preferSkipBackward;
  }


  public PlayMediaControlCommandSet preferSkipForward(Boolean preferSkipForward) {
    this.preferSkipForward = preferSkipForward;
    return this;
  }

  /**
   * Get preferSkipForward
   * @return preferSkipForward
   */
  @javax.annotation.Nullable
  public Boolean getPreferSkipForward() {
    return preferSkipForward;
  }

  public void setPreferSkipForward(Boolean preferSkipForward) {
    this.preferSkipForward = preferSkipForward;
  }


  public PlayMediaControlCommandSet previousTrack(Boolean previousTrack) {
    this.previousTrack = previousTrack;
    return this;
  }

  /**
   * Get previousTrack
   * @return previousTrack
   */
  @javax.annotation.Nullable
  public Boolean getPreviousTrack() {
    return previousTrack;
  }

  public void setPreviousTrack(Boolean previousTrack) {
    this.previousTrack = previousTrack;
  }


  public PlayMediaControlCommandSet seekToPlaybackPosition(Boolean seekToPlaybackPosition) {
    this.seekToPlaybackPosition = seekToPlaybackPosition;
    return this;
  }

  /**
   * Get seekToPlaybackPosition
   * @return seekToPlaybackPosition
   */
  @javax.annotation.Nullable
  public Boolean getSeekToPlaybackPosition() {
    return seekToPlaybackPosition;
  }

  public void setSeekToPlaybackPosition(Boolean seekToPlaybackPosition) {
    this.seekToPlaybackPosition = seekToPlaybackPosition;
  }


  public PlayMediaControlCommandSet skipBackward(Boolean skipBackward) {
    this.skipBackward = skipBackward;
    return this;
  }

  /**
   * Get skipBackward
   * @return skipBackward
   */
  @javax.annotation.Nullable
  public Boolean getSkipBackward() {
    return skipBackward;
  }

  public void setSkipBackward(Boolean skipBackward) {
    this.skipBackward = skipBackward;
  }


  public PlayMediaControlCommandSet skipForward(Boolean skipForward) {
    this.skipForward = skipForward;
    return this;
  }

  /**
   * Get skipForward
   * @return skipForward
   */
  @javax.annotation.Nullable
  public Boolean getSkipForward() {
    return skipForward;
  }

  public void setSkipForward(Boolean skipForward) {
    this.skipForward = skipForward;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayMediaControlCommandSet playMediaControlCommandSet = (PlayMediaControlCommandSet) o;
    return Objects.equals(this.bookmarkTrack, playMediaControlCommandSet.bookmarkTrack) &&
        Objects.equals(this.dislikeTrack, playMediaControlCommandSet.dislikeTrack) &&
        Objects.equals(this.likeTrack, playMediaControlCommandSet.likeTrack) &&
        Objects.equals(this.nextTrack, playMediaControlCommandSet.nextTrack) &&
        Objects.equals(this.preferSkipBackward, playMediaControlCommandSet.preferSkipBackward) &&
        Objects.equals(this.preferSkipForward, playMediaControlCommandSet.preferSkipForward) &&
        Objects.equals(this.previousTrack, playMediaControlCommandSet.previousTrack) &&
        Objects.equals(this.seekToPlaybackPosition, playMediaControlCommandSet.seekToPlaybackPosition) &&
        Objects.equals(this.skipBackward, playMediaControlCommandSet.skipBackward) &&
        Objects.equals(this.skipForward, playMediaControlCommandSet.skipForward);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookmarkTrack, dislikeTrack, likeTrack, nextTrack, preferSkipBackward, preferSkipForward, previousTrack, seekToPlaybackPosition, skipBackward, skipForward);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayMediaControlCommandSet {\n");
    sb.append("    bookmarkTrack: ").append(toIndentedString(bookmarkTrack)).append("\n");
    sb.append("    dislikeTrack: ").append(toIndentedString(dislikeTrack)).append("\n");
    sb.append("    likeTrack: ").append(toIndentedString(likeTrack)).append("\n");
    sb.append("    nextTrack: ").append(toIndentedString(nextTrack)).append("\n");
    sb.append("    preferSkipBackward: ").append(toIndentedString(preferSkipBackward)).append("\n");
    sb.append("    preferSkipForward: ").append(toIndentedString(preferSkipForward)).append("\n");
    sb.append("    previousTrack: ").append(toIndentedString(previousTrack)).append("\n");
    sb.append("    seekToPlaybackPosition: ").append(toIndentedString(seekToPlaybackPosition)).append("\n");
    sb.append("    skipBackward: ").append(toIndentedString(skipBackward)).append("\n");
    sb.append("    skipForward: ").append(toIndentedString(skipForward)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bookmarkTrack");
    openapiFields.add("dislikeTrack");
    openapiFields.add("likeTrack");
    openapiFields.add("nextTrack");
    openapiFields.add("preferSkipBackward");
    openapiFields.add("preferSkipForward");
    openapiFields.add("previousTrack");
    openapiFields.add("seekToPlaybackPosition");
    openapiFields.add("skipBackward");
    openapiFields.add("skipForward");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayMediaControlCommandSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayMediaControlCommandSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayMediaControlCommandSet is not found in the empty JSON string", PlayMediaControlCommandSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayMediaControlCommandSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayMediaControlCommandSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayMediaControlCommandSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayMediaControlCommandSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayMediaControlCommandSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayMediaControlCommandSet.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayMediaControlCommandSet>() {
           @Override
           public void write(JsonWriter out, PlayMediaControlCommandSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayMediaControlCommandSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayMediaControlCommandSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayMediaControlCommandSet
   * @throws IOException if the JSON string is invalid with respect to PlayMediaControlCommandSet
   */
  public static PlayMediaControlCommandSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayMediaControlCommandSet.class);
  }

  /**
   * Convert an instance of PlayMediaControlCommandSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

