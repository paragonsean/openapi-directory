# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BetaBuildLocalizationCreateRequestDataAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locale: str=None, whats_new: str=None):
        """BetaBuildLocalizationCreateRequestDataAttributes - a model defined in OpenAPI

        :param locale: The locale of this BetaBuildLocalizationCreateRequestDataAttributes.
        :param whats_new: The whats_new of this BetaBuildLocalizationCreateRequestDataAttributes.
        """
        self.openapi_types = {
            'locale': str,
            'whats_new': str
        }

        self.attribute_map = {
            'locale': 'locale',
            'whats_new': 'whatsNew'
        }

        self._locale = locale
        self._whats_new = whats_new

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BetaBuildLocalizationCreateRequestDataAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BetaBuildLocalizationCreateRequest_data_attributes of this BetaBuildLocalizationCreateRequestDataAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locale(self):
        """Gets the locale of this BetaBuildLocalizationCreateRequestDataAttributes.


        :return: The locale of this BetaBuildLocalizationCreateRequestDataAttributes.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this BetaBuildLocalizationCreateRequestDataAttributes.


        :param locale: The locale of this BetaBuildLocalizationCreateRequestDataAttributes.
        :type locale: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")

        self._locale = locale

    @property
    def whats_new(self):
        """Gets the whats_new of this BetaBuildLocalizationCreateRequestDataAttributes.


        :return: The whats_new of this BetaBuildLocalizationCreateRequestDataAttributes.
        :rtype: str
        """
        return self._whats_new

    @whats_new.setter
    def whats_new(self, whats_new):
        """Sets the whats_new of this BetaBuildLocalizationCreateRequestDataAttributes.


        :param whats_new: The whats_new of this BetaBuildLocalizationCreateRequestDataAttributes.
        :type whats_new: str
        """

        self._whats_new = whats_new
