# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.profile_relationships_bundle_id import ProfileRelationshipsBundleId
from openapi_server.models.profile_relationships_certificates import ProfileRelationshipsCertificates
from openapi_server.models.profile_relationships_devices import ProfileRelationshipsDevices
from openapi_server import util


class ProfileRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundle_id: ProfileRelationshipsBundleId=None, certificates: ProfileRelationshipsCertificates=None, devices: ProfileRelationshipsDevices=None):
        """ProfileRelationships - a model defined in OpenAPI

        :param bundle_id: The bundle_id of this ProfileRelationships.
        :param certificates: The certificates of this ProfileRelationships.
        :param devices: The devices of this ProfileRelationships.
        """
        self.openapi_types = {
            'bundle_id': ProfileRelationshipsBundleId,
            'certificates': ProfileRelationshipsCertificates,
            'devices': ProfileRelationshipsDevices
        }

        self.attribute_map = {
            'bundle_id': 'bundleId',
            'certificates': 'certificates',
            'devices': 'devices'
        }

        self._bundle_id = bundle_id
        self._certificates = certificates
        self._devices = devices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Profile_relationships of this ProfileRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundle_id(self):
        """Gets the bundle_id of this ProfileRelationships.


        :return: The bundle_id of this ProfileRelationships.
        :rtype: ProfileRelationshipsBundleId
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this ProfileRelationships.


        :param bundle_id: The bundle_id of this ProfileRelationships.
        :type bundle_id: ProfileRelationshipsBundleId
        """

        self._bundle_id = bundle_id

    @property
    def certificates(self):
        """Gets the certificates of this ProfileRelationships.


        :return: The certificates of this ProfileRelationships.
        :rtype: ProfileRelationshipsCertificates
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this ProfileRelationships.


        :param certificates: The certificates of this ProfileRelationships.
        :type certificates: ProfileRelationshipsCertificates
        """

        self._certificates = certificates

    @property
    def devices(self):
        """Gets the devices of this ProfileRelationships.


        :return: The devices of this ProfileRelationships.
        :rtype: ProfileRelationshipsDevices
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this ProfileRelationships.


        :param devices: The devices of this ProfileRelationships.
        :type devices: ProfileRelationshipsDevices
        """

        self._devices = devices
