# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_encryption_declaration_relationships_app import AppEncryptionDeclarationRelationshipsApp
from openapi_server.models.app_relationships_available_territories import AppRelationshipsAvailableTerritories
from openapi_server import util


class EndUserLicenseAgreementRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: AppEncryptionDeclarationRelationshipsApp=None, territories: AppRelationshipsAvailableTerritories=None):
        """EndUserLicenseAgreementRelationships - a model defined in OpenAPI

        :param app: The app of this EndUserLicenseAgreementRelationships.
        :param territories: The territories of this EndUserLicenseAgreementRelationships.
        """
        self.openapi_types = {
            'app': AppEncryptionDeclarationRelationshipsApp,
            'territories': AppRelationshipsAvailableTerritories
        }

        self.attribute_map = {
            'app': 'app',
            'territories': 'territories'
        }

        self._app = app
        self._territories = territories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndUserLicenseAgreementRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndUserLicenseAgreement_relationships of this EndUserLicenseAgreementRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this EndUserLicenseAgreementRelationships.


        :return: The app of this EndUserLicenseAgreementRelationships.
        :rtype: AppEncryptionDeclarationRelationshipsApp
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this EndUserLicenseAgreementRelationships.


        :param app: The app of this EndUserLicenseAgreementRelationships.
        :type app: AppEncryptionDeclarationRelationshipsApp
        """

        self._app = app

    @property
    def territories(self):
        """Gets the territories of this EndUserLicenseAgreementRelationships.


        :return: The territories of this EndUserLicenseAgreementRelationships.
        :rtype: AppRelationshipsAvailableTerritories
        """
        return self._territories

    @territories.setter
    def territories(self, territories):
        """Sets the territories of this EndUserLicenseAgreementRelationships.


        :param territories: The territories of this EndUserLicenseAgreementRelationships.
        :type territories: AppRelationshipsAvailableTerritories
        """

        self._territories = territories
