# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdfaDeclarationCreateRequestDataAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes_action_with_previous_ad: bool=None, attributes_app_installation_to_previous_ad: bool=None, honors_limited_ad_tracking: bool=None, serves_ads: bool=None):
        """IdfaDeclarationCreateRequestDataAttributes - a model defined in OpenAPI

        :param attributes_action_with_previous_ad: The attributes_action_with_previous_ad of this IdfaDeclarationCreateRequestDataAttributes.
        :param attributes_app_installation_to_previous_ad: The attributes_app_installation_to_previous_ad of this IdfaDeclarationCreateRequestDataAttributes.
        :param honors_limited_ad_tracking: The honors_limited_ad_tracking of this IdfaDeclarationCreateRequestDataAttributes.
        :param serves_ads: The serves_ads of this IdfaDeclarationCreateRequestDataAttributes.
        """
        self.openapi_types = {
            'attributes_action_with_previous_ad': bool,
            'attributes_app_installation_to_previous_ad': bool,
            'honors_limited_ad_tracking': bool,
            'serves_ads': bool
        }

        self.attribute_map = {
            'attributes_action_with_previous_ad': 'attributesActionWithPreviousAd',
            'attributes_app_installation_to_previous_ad': 'attributesAppInstallationToPreviousAd',
            'honors_limited_ad_tracking': 'honorsLimitedAdTracking',
            'serves_ads': 'servesAds'
        }

        self._attributes_action_with_previous_ad = attributes_action_with_previous_ad
        self._attributes_app_installation_to_previous_ad = attributes_app_installation_to_previous_ad
        self._honors_limited_ad_tracking = honors_limited_ad_tracking
        self._serves_ads = serves_ads

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdfaDeclarationCreateRequestDataAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdfaDeclarationCreateRequest_data_attributes of this IdfaDeclarationCreateRequestDataAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes_action_with_previous_ad(self):
        """Gets the attributes_action_with_previous_ad of this IdfaDeclarationCreateRequestDataAttributes.


        :return: The attributes_action_with_previous_ad of this IdfaDeclarationCreateRequestDataAttributes.
        :rtype: bool
        """
        return self._attributes_action_with_previous_ad

    @attributes_action_with_previous_ad.setter
    def attributes_action_with_previous_ad(self, attributes_action_with_previous_ad):
        """Sets the attributes_action_with_previous_ad of this IdfaDeclarationCreateRequestDataAttributes.


        :param attributes_action_with_previous_ad: The attributes_action_with_previous_ad of this IdfaDeclarationCreateRequestDataAttributes.
        :type attributes_action_with_previous_ad: bool
        """
        if attributes_action_with_previous_ad is None:
            raise ValueError("Invalid value for `attributes_action_with_previous_ad`, must not be `None`")

        self._attributes_action_with_previous_ad = attributes_action_with_previous_ad

    @property
    def attributes_app_installation_to_previous_ad(self):
        """Gets the attributes_app_installation_to_previous_ad of this IdfaDeclarationCreateRequestDataAttributes.


        :return: The attributes_app_installation_to_previous_ad of this IdfaDeclarationCreateRequestDataAttributes.
        :rtype: bool
        """
        return self._attributes_app_installation_to_previous_ad

    @attributes_app_installation_to_previous_ad.setter
    def attributes_app_installation_to_previous_ad(self, attributes_app_installation_to_previous_ad):
        """Sets the attributes_app_installation_to_previous_ad of this IdfaDeclarationCreateRequestDataAttributes.


        :param attributes_app_installation_to_previous_ad: The attributes_app_installation_to_previous_ad of this IdfaDeclarationCreateRequestDataAttributes.
        :type attributes_app_installation_to_previous_ad: bool
        """
        if attributes_app_installation_to_previous_ad is None:
            raise ValueError("Invalid value for `attributes_app_installation_to_previous_ad`, must not be `None`")

        self._attributes_app_installation_to_previous_ad = attributes_app_installation_to_previous_ad

    @property
    def honors_limited_ad_tracking(self):
        """Gets the honors_limited_ad_tracking of this IdfaDeclarationCreateRequestDataAttributes.


        :return: The honors_limited_ad_tracking of this IdfaDeclarationCreateRequestDataAttributes.
        :rtype: bool
        """
        return self._honors_limited_ad_tracking

    @honors_limited_ad_tracking.setter
    def honors_limited_ad_tracking(self, honors_limited_ad_tracking):
        """Sets the honors_limited_ad_tracking of this IdfaDeclarationCreateRequestDataAttributes.


        :param honors_limited_ad_tracking: The honors_limited_ad_tracking of this IdfaDeclarationCreateRequestDataAttributes.
        :type honors_limited_ad_tracking: bool
        """
        if honors_limited_ad_tracking is None:
            raise ValueError("Invalid value for `honors_limited_ad_tracking`, must not be `None`")

        self._honors_limited_ad_tracking = honors_limited_ad_tracking

    @property
    def serves_ads(self):
        """Gets the serves_ads of this IdfaDeclarationCreateRequestDataAttributes.


        :return: The serves_ads of this IdfaDeclarationCreateRequestDataAttributes.
        :rtype: bool
        """
        return self._serves_ads

    @serves_ads.setter
    def serves_ads(self, serves_ads):
        """Sets the serves_ads of this IdfaDeclarationCreateRequestDataAttributes.


        :param serves_ads: The serves_ads of this IdfaDeclarationCreateRequestDataAttributes.
        :type serves_ads: bool
        """
        if serves_ads is None:
            raise ValueError("Invalid value for `serves_ads`, must not be `None`")

        self._serves_ads = serves_ads
