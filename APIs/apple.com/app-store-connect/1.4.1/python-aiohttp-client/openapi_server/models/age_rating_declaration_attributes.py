# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kids_age_band import KidsAgeBand
from openapi_server import util


class AgeRatingDeclarationAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alcohol_tobacco_or_drug_use_or_references: str=None, contests: str=None, gambling: bool=None, gambling_and_contests: bool=None, gambling_simulated: str=None, horror_or_fear_themes: str=None, kids_age_band: KidsAgeBand=None, mature_or_suggestive_themes: str=None, medical_or_treatment_information: str=None, profanity_or_crude_humor: str=None, seventeen_plus: bool=None, sexual_content_graphic_and_nudity: str=None, sexual_content_or_nudity: str=None, unrestricted_web_access: bool=None, violence_cartoon_or_fantasy: str=None, violence_realistic: str=None, violence_realistic_prolonged_graphic_or_sadistic: str=None):
        """AgeRatingDeclarationAttributes - a model defined in OpenAPI

        :param alcohol_tobacco_or_drug_use_or_references: The alcohol_tobacco_or_drug_use_or_references of this AgeRatingDeclarationAttributes.
        :param contests: The contests of this AgeRatingDeclarationAttributes.
        :param gambling: The gambling of this AgeRatingDeclarationAttributes.
        :param gambling_and_contests: The gambling_and_contests of this AgeRatingDeclarationAttributes.
        :param gambling_simulated: The gambling_simulated of this AgeRatingDeclarationAttributes.
        :param horror_or_fear_themes: The horror_or_fear_themes of this AgeRatingDeclarationAttributes.
        :param kids_age_band: The kids_age_band of this AgeRatingDeclarationAttributes.
        :param mature_or_suggestive_themes: The mature_or_suggestive_themes of this AgeRatingDeclarationAttributes.
        :param medical_or_treatment_information: The medical_or_treatment_information of this AgeRatingDeclarationAttributes.
        :param profanity_or_crude_humor: The profanity_or_crude_humor of this AgeRatingDeclarationAttributes.
        :param seventeen_plus: The seventeen_plus of this AgeRatingDeclarationAttributes.
        :param sexual_content_graphic_and_nudity: The sexual_content_graphic_and_nudity of this AgeRatingDeclarationAttributes.
        :param sexual_content_or_nudity: The sexual_content_or_nudity of this AgeRatingDeclarationAttributes.
        :param unrestricted_web_access: The unrestricted_web_access of this AgeRatingDeclarationAttributes.
        :param violence_cartoon_or_fantasy: The violence_cartoon_or_fantasy of this AgeRatingDeclarationAttributes.
        :param violence_realistic: The violence_realistic of this AgeRatingDeclarationAttributes.
        :param violence_realistic_prolonged_graphic_or_sadistic: The violence_realistic_prolonged_graphic_or_sadistic of this AgeRatingDeclarationAttributes.
        """
        self.openapi_types = {
            'alcohol_tobacco_or_drug_use_or_references': str,
            'contests': str,
            'gambling': bool,
            'gambling_and_contests': bool,
            'gambling_simulated': str,
            'horror_or_fear_themes': str,
            'kids_age_band': KidsAgeBand,
            'mature_or_suggestive_themes': str,
            'medical_or_treatment_information': str,
            'profanity_or_crude_humor': str,
            'seventeen_plus': bool,
            'sexual_content_graphic_and_nudity': str,
            'sexual_content_or_nudity': str,
            'unrestricted_web_access': bool,
            'violence_cartoon_or_fantasy': str,
            'violence_realistic': str,
            'violence_realistic_prolonged_graphic_or_sadistic': str
        }

        self.attribute_map = {
            'alcohol_tobacco_or_drug_use_or_references': 'alcoholTobaccoOrDrugUseOrReferences',
            'contests': 'contests',
            'gambling': 'gambling',
            'gambling_and_contests': 'gamblingAndContests',
            'gambling_simulated': 'gamblingSimulated',
            'horror_or_fear_themes': 'horrorOrFearThemes',
            'kids_age_band': 'kidsAgeBand',
            'mature_or_suggestive_themes': 'matureOrSuggestiveThemes',
            'medical_or_treatment_information': 'medicalOrTreatmentInformation',
            'profanity_or_crude_humor': 'profanityOrCrudeHumor',
            'seventeen_plus': 'seventeenPlus',
            'sexual_content_graphic_and_nudity': 'sexualContentGraphicAndNudity',
            'sexual_content_or_nudity': 'sexualContentOrNudity',
            'unrestricted_web_access': 'unrestrictedWebAccess',
            'violence_cartoon_or_fantasy': 'violenceCartoonOrFantasy',
            'violence_realistic': 'violenceRealistic',
            'violence_realistic_prolonged_graphic_or_sadistic': 'violenceRealisticProlongedGraphicOrSadistic'
        }

        self._alcohol_tobacco_or_drug_use_or_references = alcohol_tobacco_or_drug_use_or_references
        self._contests = contests
        self._gambling = gambling
        self._gambling_and_contests = gambling_and_contests
        self._gambling_simulated = gambling_simulated
        self._horror_or_fear_themes = horror_or_fear_themes
        self._kids_age_band = kids_age_band
        self._mature_or_suggestive_themes = mature_or_suggestive_themes
        self._medical_or_treatment_information = medical_or_treatment_information
        self._profanity_or_crude_humor = profanity_or_crude_humor
        self._seventeen_plus = seventeen_plus
        self._sexual_content_graphic_and_nudity = sexual_content_graphic_and_nudity
        self._sexual_content_or_nudity = sexual_content_or_nudity
        self._unrestricted_web_access = unrestricted_web_access
        self._violence_cartoon_or_fantasy = violence_cartoon_or_fantasy
        self._violence_realistic = violence_realistic
        self._violence_realistic_prolonged_graphic_or_sadistic = violence_realistic_prolonged_graphic_or_sadistic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgeRatingDeclarationAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgeRatingDeclaration_attributes of this AgeRatingDeclarationAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alcohol_tobacco_or_drug_use_or_references(self):
        """Gets the alcohol_tobacco_or_drug_use_or_references of this AgeRatingDeclarationAttributes.


        :return: The alcohol_tobacco_or_drug_use_or_references of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._alcohol_tobacco_or_drug_use_or_references

    @alcohol_tobacco_or_drug_use_or_references.setter
    def alcohol_tobacco_or_drug_use_or_references(self, alcohol_tobacco_or_drug_use_or_references):
        """Sets the alcohol_tobacco_or_drug_use_or_references of this AgeRatingDeclarationAttributes.


        :param alcohol_tobacco_or_drug_use_or_references: The alcohol_tobacco_or_drug_use_or_references of this AgeRatingDeclarationAttributes.
        :type alcohol_tobacco_or_drug_use_or_references: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if alcohol_tobacco_or_drug_use_or_references not in allowed_values:
            raise ValueError(
                "Invalid value for `alcohol_tobacco_or_drug_use_or_references` ({0}), must be one of {1}"
                .format(alcohol_tobacco_or_drug_use_or_references, allowed_values)
            )

        self._alcohol_tobacco_or_drug_use_or_references = alcohol_tobacco_or_drug_use_or_references

    @property
    def contests(self):
        """Gets the contests of this AgeRatingDeclarationAttributes.


        :return: The contests of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._contests

    @contests.setter
    def contests(self, contests):
        """Sets the contests of this AgeRatingDeclarationAttributes.


        :param contests: The contests of this AgeRatingDeclarationAttributes.
        :type contests: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if contests not in allowed_values:
            raise ValueError(
                "Invalid value for `contests` ({0}), must be one of {1}"
                .format(contests, allowed_values)
            )

        self._contests = contests

    @property
    def gambling(self):
        """Gets the gambling of this AgeRatingDeclarationAttributes.


        :return: The gambling of this AgeRatingDeclarationAttributes.
        :rtype: bool
        """
        return self._gambling

    @gambling.setter
    def gambling(self, gambling):
        """Sets the gambling of this AgeRatingDeclarationAttributes.


        :param gambling: The gambling of this AgeRatingDeclarationAttributes.
        :type gambling: bool
        """

        self._gambling = gambling

    @property
    def gambling_and_contests(self):
        """Gets the gambling_and_contests of this AgeRatingDeclarationAttributes.


        :return: The gambling_and_contests of this AgeRatingDeclarationAttributes.
        :rtype: bool
        """
        return self._gambling_and_contests

    @gambling_and_contests.setter
    def gambling_and_contests(self, gambling_and_contests):
        """Sets the gambling_and_contests of this AgeRatingDeclarationAttributes.


        :param gambling_and_contests: The gambling_and_contests of this AgeRatingDeclarationAttributes.
        :type gambling_and_contests: bool
        """

        self._gambling_and_contests = gambling_and_contests

    @property
    def gambling_simulated(self):
        """Gets the gambling_simulated of this AgeRatingDeclarationAttributes.


        :return: The gambling_simulated of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._gambling_simulated

    @gambling_simulated.setter
    def gambling_simulated(self, gambling_simulated):
        """Sets the gambling_simulated of this AgeRatingDeclarationAttributes.


        :param gambling_simulated: The gambling_simulated of this AgeRatingDeclarationAttributes.
        :type gambling_simulated: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if gambling_simulated not in allowed_values:
            raise ValueError(
                "Invalid value for `gambling_simulated` ({0}), must be one of {1}"
                .format(gambling_simulated, allowed_values)
            )

        self._gambling_simulated = gambling_simulated

    @property
    def horror_or_fear_themes(self):
        """Gets the horror_or_fear_themes of this AgeRatingDeclarationAttributes.


        :return: The horror_or_fear_themes of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._horror_or_fear_themes

    @horror_or_fear_themes.setter
    def horror_or_fear_themes(self, horror_or_fear_themes):
        """Sets the horror_or_fear_themes of this AgeRatingDeclarationAttributes.


        :param horror_or_fear_themes: The horror_or_fear_themes of this AgeRatingDeclarationAttributes.
        :type horror_or_fear_themes: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if horror_or_fear_themes not in allowed_values:
            raise ValueError(
                "Invalid value for `horror_or_fear_themes` ({0}), must be one of {1}"
                .format(horror_or_fear_themes, allowed_values)
            )

        self._horror_or_fear_themes = horror_or_fear_themes

    @property
    def kids_age_band(self):
        """Gets the kids_age_band of this AgeRatingDeclarationAttributes.


        :return: The kids_age_band of this AgeRatingDeclarationAttributes.
        :rtype: KidsAgeBand
        """
        return self._kids_age_band

    @kids_age_band.setter
    def kids_age_band(self, kids_age_band):
        """Sets the kids_age_band of this AgeRatingDeclarationAttributes.


        :param kids_age_band: The kids_age_band of this AgeRatingDeclarationAttributes.
        :type kids_age_band: KidsAgeBand
        """

        self._kids_age_band = kids_age_band

    @property
    def mature_or_suggestive_themes(self):
        """Gets the mature_or_suggestive_themes of this AgeRatingDeclarationAttributes.


        :return: The mature_or_suggestive_themes of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._mature_or_suggestive_themes

    @mature_or_suggestive_themes.setter
    def mature_or_suggestive_themes(self, mature_or_suggestive_themes):
        """Sets the mature_or_suggestive_themes of this AgeRatingDeclarationAttributes.


        :param mature_or_suggestive_themes: The mature_or_suggestive_themes of this AgeRatingDeclarationAttributes.
        :type mature_or_suggestive_themes: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if mature_or_suggestive_themes not in allowed_values:
            raise ValueError(
                "Invalid value for `mature_or_suggestive_themes` ({0}), must be one of {1}"
                .format(mature_or_suggestive_themes, allowed_values)
            )

        self._mature_or_suggestive_themes = mature_or_suggestive_themes

    @property
    def medical_or_treatment_information(self):
        """Gets the medical_or_treatment_information of this AgeRatingDeclarationAttributes.


        :return: The medical_or_treatment_information of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._medical_or_treatment_information

    @medical_or_treatment_information.setter
    def medical_or_treatment_information(self, medical_or_treatment_information):
        """Sets the medical_or_treatment_information of this AgeRatingDeclarationAttributes.


        :param medical_or_treatment_information: The medical_or_treatment_information of this AgeRatingDeclarationAttributes.
        :type medical_or_treatment_information: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if medical_or_treatment_information not in allowed_values:
            raise ValueError(
                "Invalid value for `medical_or_treatment_information` ({0}), must be one of {1}"
                .format(medical_or_treatment_information, allowed_values)
            )

        self._medical_or_treatment_information = medical_or_treatment_information

    @property
    def profanity_or_crude_humor(self):
        """Gets the profanity_or_crude_humor of this AgeRatingDeclarationAttributes.


        :return: The profanity_or_crude_humor of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._profanity_or_crude_humor

    @profanity_or_crude_humor.setter
    def profanity_or_crude_humor(self, profanity_or_crude_humor):
        """Sets the profanity_or_crude_humor of this AgeRatingDeclarationAttributes.


        :param profanity_or_crude_humor: The profanity_or_crude_humor of this AgeRatingDeclarationAttributes.
        :type profanity_or_crude_humor: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if profanity_or_crude_humor not in allowed_values:
            raise ValueError(
                "Invalid value for `profanity_or_crude_humor` ({0}), must be one of {1}"
                .format(profanity_or_crude_humor, allowed_values)
            )

        self._profanity_or_crude_humor = profanity_or_crude_humor

    @property
    def seventeen_plus(self):
        """Gets the seventeen_plus of this AgeRatingDeclarationAttributes.


        :return: The seventeen_plus of this AgeRatingDeclarationAttributes.
        :rtype: bool
        """
        return self._seventeen_plus

    @seventeen_plus.setter
    def seventeen_plus(self, seventeen_plus):
        """Sets the seventeen_plus of this AgeRatingDeclarationAttributes.


        :param seventeen_plus: The seventeen_plus of this AgeRatingDeclarationAttributes.
        :type seventeen_plus: bool
        """

        self._seventeen_plus = seventeen_plus

    @property
    def sexual_content_graphic_and_nudity(self):
        """Gets the sexual_content_graphic_and_nudity of this AgeRatingDeclarationAttributes.


        :return: The sexual_content_graphic_and_nudity of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._sexual_content_graphic_and_nudity

    @sexual_content_graphic_and_nudity.setter
    def sexual_content_graphic_and_nudity(self, sexual_content_graphic_and_nudity):
        """Sets the sexual_content_graphic_and_nudity of this AgeRatingDeclarationAttributes.


        :param sexual_content_graphic_and_nudity: The sexual_content_graphic_and_nudity of this AgeRatingDeclarationAttributes.
        :type sexual_content_graphic_and_nudity: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if sexual_content_graphic_and_nudity not in allowed_values:
            raise ValueError(
                "Invalid value for `sexual_content_graphic_and_nudity` ({0}), must be one of {1}"
                .format(sexual_content_graphic_and_nudity, allowed_values)
            )

        self._sexual_content_graphic_and_nudity = sexual_content_graphic_and_nudity

    @property
    def sexual_content_or_nudity(self):
        """Gets the sexual_content_or_nudity of this AgeRatingDeclarationAttributes.


        :return: The sexual_content_or_nudity of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._sexual_content_or_nudity

    @sexual_content_or_nudity.setter
    def sexual_content_or_nudity(self, sexual_content_or_nudity):
        """Sets the sexual_content_or_nudity of this AgeRatingDeclarationAttributes.


        :param sexual_content_or_nudity: The sexual_content_or_nudity of this AgeRatingDeclarationAttributes.
        :type sexual_content_or_nudity: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if sexual_content_or_nudity not in allowed_values:
            raise ValueError(
                "Invalid value for `sexual_content_or_nudity` ({0}), must be one of {1}"
                .format(sexual_content_or_nudity, allowed_values)
            )

        self._sexual_content_or_nudity = sexual_content_or_nudity

    @property
    def unrestricted_web_access(self):
        """Gets the unrestricted_web_access of this AgeRatingDeclarationAttributes.


        :return: The unrestricted_web_access of this AgeRatingDeclarationAttributes.
        :rtype: bool
        """
        return self._unrestricted_web_access

    @unrestricted_web_access.setter
    def unrestricted_web_access(self, unrestricted_web_access):
        """Sets the unrestricted_web_access of this AgeRatingDeclarationAttributes.


        :param unrestricted_web_access: The unrestricted_web_access of this AgeRatingDeclarationAttributes.
        :type unrestricted_web_access: bool
        """

        self._unrestricted_web_access = unrestricted_web_access

    @property
    def violence_cartoon_or_fantasy(self):
        """Gets the violence_cartoon_or_fantasy of this AgeRatingDeclarationAttributes.


        :return: The violence_cartoon_or_fantasy of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._violence_cartoon_or_fantasy

    @violence_cartoon_or_fantasy.setter
    def violence_cartoon_or_fantasy(self, violence_cartoon_or_fantasy):
        """Sets the violence_cartoon_or_fantasy of this AgeRatingDeclarationAttributes.


        :param violence_cartoon_or_fantasy: The violence_cartoon_or_fantasy of this AgeRatingDeclarationAttributes.
        :type violence_cartoon_or_fantasy: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if violence_cartoon_or_fantasy not in allowed_values:
            raise ValueError(
                "Invalid value for `violence_cartoon_or_fantasy` ({0}), must be one of {1}"
                .format(violence_cartoon_or_fantasy, allowed_values)
            )

        self._violence_cartoon_or_fantasy = violence_cartoon_or_fantasy

    @property
    def violence_realistic(self):
        """Gets the violence_realistic of this AgeRatingDeclarationAttributes.


        :return: The violence_realistic of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._violence_realistic

    @violence_realistic.setter
    def violence_realistic(self, violence_realistic):
        """Sets the violence_realistic of this AgeRatingDeclarationAttributes.


        :param violence_realistic: The violence_realistic of this AgeRatingDeclarationAttributes.
        :type violence_realistic: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if violence_realistic not in allowed_values:
            raise ValueError(
                "Invalid value for `violence_realistic` ({0}), must be one of {1}"
                .format(violence_realistic, allowed_values)
            )

        self._violence_realistic = violence_realistic

    @property
    def violence_realistic_prolonged_graphic_or_sadistic(self):
        """Gets the violence_realistic_prolonged_graphic_or_sadistic of this AgeRatingDeclarationAttributes.


        :return: The violence_realistic_prolonged_graphic_or_sadistic of this AgeRatingDeclarationAttributes.
        :rtype: str
        """
        return self._violence_realistic_prolonged_graphic_or_sadistic

    @violence_realistic_prolonged_graphic_or_sadistic.setter
    def violence_realistic_prolonged_graphic_or_sadistic(self, violence_realistic_prolonged_graphic_or_sadistic):
        """Sets the violence_realistic_prolonged_graphic_or_sadistic of this AgeRatingDeclarationAttributes.


        :param violence_realistic_prolonged_graphic_or_sadistic: The violence_realistic_prolonged_graphic_or_sadistic of this AgeRatingDeclarationAttributes.
        :type violence_realistic_prolonged_graphic_or_sadistic: str
        """
        allowed_values = ["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]  # noqa: E501
        if violence_realistic_prolonged_graphic_or_sadistic not in allowed_values:
            raise ValueError(
                "Invalid value for `violence_realistic_prolonged_graphic_or_sadistic` ({0}), must be one of {1}"
                .format(violence_realistic_prolonged_graphic_or_sadistic, allowed_values)
            )

        self._violence_realistic_prolonged_graphic_or_sadistic = violence_realistic_prolonged_graphic_or_sadistic
