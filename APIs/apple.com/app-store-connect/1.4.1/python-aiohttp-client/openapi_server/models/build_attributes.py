# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_asset import ImageAsset
from openapi_server import util


class BuildAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_date: datetime=None, expired: bool=None, icon_asset_token: ImageAsset=None, min_os_version: str=None, processing_state: str=None, uploaded_date: datetime=None, uses_non_exempt_encryption: bool=None, version: str=None):
        """BuildAttributes - a model defined in OpenAPI

        :param expiration_date: The expiration_date of this BuildAttributes.
        :param expired: The expired of this BuildAttributes.
        :param icon_asset_token: The icon_asset_token of this BuildAttributes.
        :param min_os_version: The min_os_version of this BuildAttributes.
        :param processing_state: The processing_state of this BuildAttributes.
        :param uploaded_date: The uploaded_date of this BuildAttributes.
        :param uses_non_exempt_encryption: The uses_non_exempt_encryption of this BuildAttributes.
        :param version: The version of this BuildAttributes.
        """
        self.openapi_types = {
            'expiration_date': datetime,
            'expired': bool,
            'icon_asset_token': ImageAsset,
            'min_os_version': str,
            'processing_state': str,
            'uploaded_date': datetime,
            'uses_non_exempt_encryption': bool,
            'version': str
        }

        self.attribute_map = {
            'expiration_date': 'expirationDate',
            'expired': 'expired',
            'icon_asset_token': 'iconAssetToken',
            'min_os_version': 'minOsVersion',
            'processing_state': 'processingState',
            'uploaded_date': 'uploadedDate',
            'uses_non_exempt_encryption': 'usesNonExemptEncryption',
            'version': 'version'
        }

        self._expiration_date = expiration_date
        self._expired = expired
        self._icon_asset_token = icon_asset_token
        self._min_os_version = min_os_version
        self._processing_state = processing_state
        self._uploaded_date = uploaded_date
        self._uses_non_exempt_encryption = uses_non_exempt_encryption
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Build_attributes of this BuildAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_date(self):
        """Gets the expiration_date of this BuildAttributes.


        :return: The expiration_date of this BuildAttributes.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this BuildAttributes.


        :param expiration_date: The expiration_date of this BuildAttributes.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def expired(self):
        """Gets the expired of this BuildAttributes.


        :return: The expired of this BuildAttributes.
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this BuildAttributes.


        :param expired: The expired of this BuildAttributes.
        :type expired: bool
        """

        self._expired = expired

    @property
    def icon_asset_token(self):
        """Gets the icon_asset_token of this BuildAttributes.


        :return: The icon_asset_token of this BuildAttributes.
        :rtype: ImageAsset
        """
        return self._icon_asset_token

    @icon_asset_token.setter
    def icon_asset_token(self, icon_asset_token):
        """Sets the icon_asset_token of this BuildAttributes.


        :param icon_asset_token: The icon_asset_token of this BuildAttributes.
        :type icon_asset_token: ImageAsset
        """

        self._icon_asset_token = icon_asset_token

    @property
    def min_os_version(self):
        """Gets the min_os_version of this BuildAttributes.


        :return: The min_os_version of this BuildAttributes.
        :rtype: str
        """
        return self._min_os_version

    @min_os_version.setter
    def min_os_version(self, min_os_version):
        """Sets the min_os_version of this BuildAttributes.


        :param min_os_version: The min_os_version of this BuildAttributes.
        :type min_os_version: str
        """

        self._min_os_version = min_os_version

    @property
    def processing_state(self):
        """Gets the processing_state of this BuildAttributes.


        :return: The processing_state of this BuildAttributes.
        :rtype: str
        """
        return self._processing_state

    @processing_state.setter
    def processing_state(self, processing_state):
        """Sets the processing_state of this BuildAttributes.


        :param processing_state: The processing_state of this BuildAttributes.
        :type processing_state: str
        """
        allowed_values = ["PROCESSING", "FAILED", "INVALID", "VALID"]  # noqa: E501
        if processing_state not in allowed_values:
            raise ValueError(
                "Invalid value for `processing_state` ({0}), must be one of {1}"
                .format(processing_state, allowed_values)
            )

        self._processing_state = processing_state

    @property
    def uploaded_date(self):
        """Gets the uploaded_date of this BuildAttributes.


        :return: The uploaded_date of this BuildAttributes.
        :rtype: datetime
        """
        return self._uploaded_date

    @uploaded_date.setter
    def uploaded_date(self, uploaded_date):
        """Sets the uploaded_date of this BuildAttributes.


        :param uploaded_date: The uploaded_date of this BuildAttributes.
        :type uploaded_date: datetime
        """

        self._uploaded_date = uploaded_date

    @property
    def uses_non_exempt_encryption(self):
        """Gets the uses_non_exempt_encryption of this BuildAttributes.


        :return: The uses_non_exempt_encryption of this BuildAttributes.
        :rtype: bool
        """
        return self._uses_non_exempt_encryption

    @uses_non_exempt_encryption.setter
    def uses_non_exempt_encryption(self, uses_non_exempt_encryption):
        """Sets the uses_non_exempt_encryption of this BuildAttributes.


        :param uses_non_exempt_encryption: The uses_non_exempt_encryption of this BuildAttributes.
        :type uses_non_exempt_encryption: bool
        """

        self._uses_non_exempt_encryption = uses_non_exempt_encryption

    @property
    def version(self):
        """Gets the version of this BuildAttributes.


        :return: The version of this BuildAttributes.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BuildAttributes.


        :param version: The version of this BuildAttributes.
        :type version: str
        """

        self._version = version
