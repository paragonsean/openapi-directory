# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiagnosticSignatureAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, diagnostic_type: str=None, signature: str=None, weight: float=None):
        """DiagnosticSignatureAttributes - a model defined in OpenAPI

        :param diagnostic_type: The diagnostic_type of this DiagnosticSignatureAttributes.
        :param signature: The signature of this DiagnosticSignatureAttributes.
        :param weight: The weight of this DiagnosticSignatureAttributes.
        """
        self.openapi_types = {
            'diagnostic_type': str,
            'signature': str,
            'weight': float
        }

        self.attribute_map = {
            'diagnostic_type': 'diagnosticType',
            'signature': 'signature',
            'weight': 'weight'
        }

        self._diagnostic_type = diagnostic_type
        self._signature = signature
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosticSignatureAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosticSignature_attributes of this DiagnosticSignatureAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def diagnostic_type(self):
        """Gets the diagnostic_type of this DiagnosticSignatureAttributes.


        :return: The diagnostic_type of this DiagnosticSignatureAttributes.
        :rtype: str
        """
        return self._diagnostic_type

    @diagnostic_type.setter
    def diagnostic_type(self, diagnostic_type):
        """Sets the diagnostic_type of this DiagnosticSignatureAttributes.


        :param diagnostic_type: The diagnostic_type of this DiagnosticSignatureAttributes.
        :type diagnostic_type: str
        """
        allowed_values = ["DISK_WRITES"]  # noqa: E501
        if diagnostic_type not in allowed_values:
            raise ValueError(
                "Invalid value for `diagnostic_type` ({0}), must be one of {1}"
                .format(diagnostic_type, allowed_values)
            )

        self._diagnostic_type = diagnostic_type

    @property
    def signature(self):
        """Gets the signature of this DiagnosticSignatureAttributes.


        :return: The signature of this DiagnosticSignatureAttributes.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this DiagnosticSignatureAttributes.


        :param signature: The signature of this DiagnosticSignatureAttributes.
        :type signature: str
        """

        self._signature = signature

    @property
    def weight(self):
        """Gets the weight of this DiagnosticSignatureAttributes.


        :return: The weight of this DiagnosticSignatureAttributes.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this DiagnosticSignatureAttributes.


        :param weight: The weight of this DiagnosticSignatureAttributes.
        :type weight: float
        """

        self._weight = weight
