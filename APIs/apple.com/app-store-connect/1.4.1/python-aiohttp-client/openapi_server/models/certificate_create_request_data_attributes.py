# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_type import CertificateType
from openapi_server import util


class CertificateCreateRequestDataAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_type: CertificateType=None, csr_content: str=None):
        """CertificateCreateRequestDataAttributes - a model defined in OpenAPI

        :param certificate_type: The certificate_type of this CertificateCreateRequestDataAttributes.
        :param csr_content: The csr_content of this CertificateCreateRequestDataAttributes.
        """
        self.openapi_types = {
            'certificate_type': CertificateType,
            'csr_content': str
        }

        self.attribute_map = {
            'certificate_type': 'certificateType',
            'csr_content': 'csrContent'
        }

        self._certificate_type = certificate_type
        self._csr_content = csr_content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateCreateRequestDataAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateCreateRequest_data_attributes of this CertificateCreateRequestDataAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_type(self):
        """Gets the certificate_type of this CertificateCreateRequestDataAttributes.


        :return: The certificate_type of this CertificateCreateRequestDataAttributes.
        :rtype: CertificateType
        """
        return self._certificate_type

    @certificate_type.setter
    def certificate_type(self, certificate_type):
        """Sets the certificate_type of this CertificateCreateRequestDataAttributes.


        :param certificate_type: The certificate_type of this CertificateCreateRequestDataAttributes.
        :type certificate_type: CertificateType
        """
        if certificate_type is None:
            raise ValueError("Invalid value for `certificate_type`, must not be `None`")

        self._certificate_type = certificate_type

    @property
    def csr_content(self):
        """Gets the csr_content of this CertificateCreateRequestDataAttributes.


        :return: The csr_content of this CertificateCreateRequestDataAttributes.
        :rtype: str
        """
        return self._csr_content

    @csr_content.setter
    def csr_content(self, csr_content):
        """Sets the csr_content of this CertificateCreateRequestDataAttributes.


        :param csr_content: The csr_content of this CertificateCreateRequestDataAttributes.
        :type csr_content: str
        """
        if csr_content is None:
            raise ValueError("Invalid value for `csr_content`, must not be `None`")

        self._csr_content = csr_content
