# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_encryption_declaration_relationships_app import AppEncryptionDeclarationRelationshipsApp
from openapi_server.models.bundle_id_relationships_bundle_id_capabilities import BundleIdRelationshipsBundleIdCapabilities
from openapi_server.models.bundle_id_relationships_profiles import BundleIdRelationshipsProfiles
from openapi_server import util


class BundleIdRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: AppEncryptionDeclarationRelationshipsApp=None, bundle_id_capabilities: BundleIdRelationshipsBundleIdCapabilities=None, profiles: BundleIdRelationshipsProfiles=None):
        """BundleIdRelationships - a model defined in OpenAPI

        :param app: The app of this BundleIdRelationships.
        :param bundle_id_capabilities: The bundle_id_capabilities of this BundleIdRelationships.
        :param profiles: The profiles of this BundleIdRelationships.
        """
        self.openapi_types = {
            'app': AppEncryptionDeclarationRelationshipsApp,
            'bundle_id_capabilities': BundleIdRelationshipsBundleIdCapabilities,
            'profiles': BundleIdRelationshipsProfiles
        }

        self.attribute_map = {
            'app': 'app',
            'bundle_id_capabilities': 'bundleIdCapabilities',
            'profiles': 'profiles'
        }

        self._app = app
        self._bundle_id_capabilities = bundle_id_capabilities
        self._profiles = profiles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BundleIdRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BundleId_relationships of this BundleIdRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this BundleIdRelationships.


        :return: The app of this BundleIdRelationships.
        :rtype: AppEncryptionDeclarationRelationshipsApp
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this BundleIdRelationships.


        :param app: The app of this BundleIdRelationships.
        :type app: AppEncryptionDeclarationRelationshipsApp
        """

        self._app = app

    @property
    def bundle_id_capabilities(self):
        """Gets the bundle_id_capabilities of this BundleIdRelationships.


        :return: The bundle_id_capabilities of this BundleIdRelationships.
        :rtype: BundleIdRelationshipsBundleIdCapabilities
        """
        return self._bundle_id_capabilities

    @bundle_id_capabilities.setter
    def bundle_id_capabilities(self, bundle_id_capabilities):
        """Sets the bundle_id_capabilities of this BundleIdRelationships.


        :param bundle_id_capabilities: The bundle_id_capabilities of this BundleIdRelationships.
        :type bundle_id_capabilities: BundleIdRelationshipsBundleIdCapabilities
        """

        self._bundle_id_capabilities = bundle_id_capabilities

    @property
    def profiles(self):
        """Gets the profiles of this BundleIdRelationships.


        :return: The profiles of this BundleIdRelationships.
        :rtype: BundleIdRelationshipsProfiles
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this BundleIdRelationships.


        :param profiles: The profiles of this BundleIdRelationships.
        :type profiles: BundleIdRelationshipsProfiles
        """

        self._profiles = profiles
