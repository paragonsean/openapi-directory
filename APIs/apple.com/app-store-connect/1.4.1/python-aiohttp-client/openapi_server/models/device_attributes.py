# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bundle_id_platform import BundleIdPlatform
from openapi_server import util


class DeviceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_date: datetime=None, device_class: str=None, model: str=None, name: str=None, platform: BundleIdPlatform=None, status: str=None, udid: str=None):
        """DeviceAttributes - a model defined in OpenAPI

        :param added_date: The added_date of this DeviceAttributes.
        :param device_class: The device_class of this DeviceAttributes.
        :param model: The model of this DeviceAttributes.
        :param name: The name of this DeviceAttributes.
        :param platform: The platform of this DeviceAttributes.
        :param status: The status of this DeviceAttributes.
        :param udid: The udid of this DeviceAttributes.
        """
        self.openapi_types = {
            'added_date': datetime,
            'device_class': str,
            'model': str,
            'name': str,
            'platform': BundleIdPlatform,
            'status': str,
            'udid': str
        }

        self.attribute_map = {
            'added_date': 'addedDate',
            'device_class': 'deviceClass',
            'model': 'model',
            'name': 'name',
            'platform': 'platform',
            'status': 'status',
            'udid': 'udid'
        }

        self._added_date = added_date
        self._device_class = device_class
        self._model = model
        self._name = name
        self._platform = platform
        self._status = status
        self._udid = udid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device_attributes of this DeviceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_date(self):
        """Gets the added_date of this DeviceAttributes.


        :return: The added_date of this DeviceAttributes.
        :rtype: datetime
        """
        return self._added_date

    @added_date.setter
    def added_date(self, added_date):
        """Sets the added_date of this DeviceAttributes.


        :param added_date: The added_date of this DeviceAttributes.
        :type added_date: datetime
        """

        self._added_date = added_date

    @property
    def device_class(self):
        """Gets the device_class of this DeviceAttributes.


        :return: The device_class of this DeviceAttributes.
        :rtype: str
        """
        return self._device_class

    @device_class.setter
    def device_class(self, device_class):
        """Sets the device_class of this DeviceAttributes.


        :param device_class: The device_class of this DeviceAttributes.
        :type device_class: str
        """
        allowed_values = ["APPLE_WATCH", "IPAD", "IPHONE", "IPOD", "APPLE_TV", "MAC"]  # noqa: E501
        if device_class not in allowed_values:
            raise ValueError(
                "Invalid value for `device_class` ({0}), must be one of {1}"
                .format(device_class, allowed_values)
            )

        self._device_class = device_class

    @property
    def model(self):
        """Gets the model of this DeviceAttributes.


        :return: The model of this DeviceAttributes.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceAttributes.


        :param model: The model of this DeviceAttributes.
        :type model: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this DeviceAttributes.


        :return: The name of this DeviceAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceAttributes.


        :param name: The name of this DeviceAttributes.
        :type name: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this DeviceAttributes.


        :return: The platform of this DeviceAttributes.
        :rtype: BundleIdPlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DeviceAttributes.


        :param platform: The platform of this DeviceAttributes.
        :type platform: BundleIdPlatform
        """

        self._platform = platform

    @property
    def status(self):
        """Gets the status of this DeviceAttributes.


        :return: The status of this DeviceAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceAttributes.


        :param status: The status of this DeviceAttributes.
        :type status: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def udid(self):
        """Gets the udid of this DeviceAttributes.


        :return: The udid of this DeviceAttributes.
        :rtype: str
        """
        return self._udid

    @udid.setter
    def udid(self, udid):
        """Sets the udid of this DeviceAttributes.


        :param udid: The udid of this DeviceAttributes.
        :type udid: str
        """

        self._udid = udid
