/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AgeRatingDeclarationResponse from '../model/AgeRatingDeclarationResponse';
import AppCategoryResponse from '../model/AppCategoryResponse';
import AppInfoLocalizationsResponse from '../model/AppInfoLocalizationsResponse';
import AppInfoResponse from '../model/AppInfoResponse';
import AppInfoUpdateRequest from '../model/AppInfoUpdateRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppInfos service.
* @module api/AppInfosApi
* @version 1.4.1
*/
export default class AppInfosApi {

    /**
    * Constructs a new AppInfosApi. 
    * @alias module:api/AppInfosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appInfosAgeRatingDeclarationGetToOneRelated operation.
     * @callback module:api/AppInfosApi~appInfosAgeRatingDeclarationGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgeRatingDeclarationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAgeRatingDeclarations] the fields to include for returned resources of type ageRatingDeclarations
     * @param {module:api/AppInfosApi~appInfosAgeRatingDeclarationGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgeRatingDeclarationResponse}
     */
    appInfosAgeRatingDeclarationGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appInfosAgeRatingDeclarationGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ageRatingDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAgeRatingDeclarations'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgeRatingDeclarationResponse;
      return this.apiClient.callApi(
        '/v1/appInfos/{id}/ageRatingDeclaration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInfosAppInfoLocalizationsGetToManyRelated operation.
     * @callback module:api/AppInfosApi~appInfosAppInfoLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppInfoLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterLocale] filter by attribute 'locale'
     * @param {Array.<module:model/String>} [fieldsAppInfos] the fields to include for returned resources of type appInfos
     * @param {Array.<module:model/String>} [fieldsAppInfoLocalizations] the fields to include for returned resources of type appInfoLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppInfosApi~appInfosAppInfoLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppInfoLocalizationsResponse}
     */
    appInfosAppInfoLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appInfosAppInfoLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[locale]': this.apiClient.buildCollectionParam(opts['filterLocale'], 'csv'),
        'fields[appInfos]': this.apiClient.buildCollectionParam(opts['fieldsAppInfos'], 'csv'),
        'fields[appInfoLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppInfoLocalizations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppInfoLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/appInfos/{id}/appInfoLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInfosGetInstance operation.
     * @callback module:api/AppInfosApi~appInfosGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppInfos] the fields to include for returned resources of type appInfos
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsAgeRatingDeclarations] the fields to include for returned resources of type ageRatingDeclarations
     * @param {Array.<module:model/String>} [fieldsAppCategories] the fields to include for returned resources of type appCategories
     * @param {Array.<module:model/String>} [fieldsAppInfoLocalizations] the fields to include for returned resources of type appInfoLocalizations
     * @param {Number} [limitAppInfoLocalizations] maximum number of related appInfoLocalizations returned (when they are included)
     * @param {module:api/AppInfosApi~appInfosGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppInfoResponse}
     */
    appInfosGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appInfosGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appInfos]': this.apiClient.buildCollectionParam(opts['fieldsAppInfos'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[ageRatingDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAgeRatingDeclarations'], 'csv'),
        'fields[appCategories]': this.apiClient.buildCollectionParam(opts['fieldsAppCategories'], 'csv'),
        'fields[appInfoLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppInfoLocalizations'], 'csv'),
        'limit[appInfoLocalizations]': opts['limitAppInfoLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppInfoResponse;
      return this.apiClient.callApi(
        '/v1/appInfos/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInfosPrimaryCategoryGetToOneRelated operation.
     * @callback module:api/AppInfosApi~appInfosPrimaryCategoryGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppCategories] the fields to include for returned resources of type appCategories
     * @param {module:api/AppInfosApi~appInfosPrimaryCategoryGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppCategoryResponse}
     */
    appInfosPrimaryCategoryGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appInfosPrimaryCategoryGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appCategories]': this.apiClient.buildCollectionParam(opts['fieldsAppCategories'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppCategoryResponse;
      return this.apiClient.callApi(
        '/v1/appInfos/{id}/primaryCategory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInfosPrimarySubcategoryOneGetToOneRelated operation.
     * @callback module:api/AppInfosApi~appInfosPrimarySubcategoryOneGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppCategories] the fields to include for returned resources of type appCategories
     * @param {module:api/AppInfosApi~appInfosPrimarySubcategoryOneGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppCategoryResponse}
     */
    appInfosPrimarySubcategoryOneGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appInfosPrimarySubcategoryOneGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appCategories]': this.apiClient.buildCollectionParam(opts['fieldsAppCategories'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppCategoryResponse;
      return this.apiClient.callApi(
        '/v1/appInfos/{id}/primarySubcategoryOne', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInfosPrimarySubcategoryTwoGetToOneRelated operation.
     * @callback module:api/AppInfosApi~appInfosPrimarySubcategoryTwoGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppCategories] the fields to include for returned resources of type appCategories
     * @param {module:api/AppInfosApi~appInfosPrimarySubcategoryTwoGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppCategoryResponse}
     */
    appInfosPrimarySubcategoryTwoGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appInfosPrimarySubcategoryTwoGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appCategories]': this.apiClient.buildCollectionParam(opts['fieldsAppCategories'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppCategoryResponse;
      return this.apiClient.callApi(
        '/v1/appInfos/{id}/primarySubcategoryTwo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInfosSecondaryCategoryGetToOneRelated operation.
     * @callback module:api/AppInfosApi~appInfosSecondaryCategoryGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppCategories] the fields to include for returned resources of type appCategories
     * @param {module:api/AppInfosApi~appInfosSecondaryCategoryGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppCategoryResponse}
     */
    appInfosSecondaryCategoryGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appInfosSecondaryCategoryGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appCategories]': this.apiClient.buildCollectionParam(opts['fieldsAppCategories'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppCategoryResponse;
      return this.apiClient.callApi(
        '/v1/appInfos/{id}/secondaryCategory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInfosSecondarySubcategoryOneGetToOneRelated operation.
     * @callback module:api/AppInfosApi~appInfosSecondarySubcategoryOneGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppCategories] the fields to include for returned resources of type appCategories
     * @param {module:api/AppInfosApi~appInfosSecondarySubcategoryOneGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppCategoryResponse}
     */
    appInfosSecondarySubcategoryOneGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appInfosSecondarySubcategoryOneGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appCategories]': this.apiClient.buildCollectionParam(opts['fieldsAppCategories'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppCategoryResponse;
      return this.apiClient.callApi(
        '/v1/appInfos/{id}/secondarySubcategoryOne', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInfosSecondarySubcategoryTwoGetToOneRelated operation.
     * @callback module:api/AppInfosApi~appInfosSecondarySubcategoryTwoGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppCategories] the fields to include for returned resources of type appCategories
     * @param {module:api/AppInfosApi~appInfosSecondarySubcategoryTwoGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppCategoryResponse}
     */
    appInfosSecondarySubcategoryTwoGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appInfosSecondarySubcategoryTwoGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appCategories]': this.apiClient.buildCollectionParam(opts['fieldsAppCategories'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppCategoryResponse;
      return this.apiClient.callApi(
        '/v1/appInfos/{id}/secondarySubcategoryTwo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInfosUpdateInstance operation.
     * @callback module:api/AppInfosApi~appInfosUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppInfoUpdateRequest} appInfoUpdateRequest AppInfo representation
     * @param {module:api/AppInfosApi~appInfosUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppInfoResponse}
     */
    appInfosUpdateInstance(id, appInfoUpdateRequest, callback) {
      let postBody = appInfoUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appInfosUpdateInstance");
      }
      // verify the required parameter 'appInfoUpdateRequest' is set
      if (appInfoUpdateRequest === undefined || appInfoUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appInfoUpdateRequest' when calling appInfosUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppInfoResponse;
      return this.apiClient.callApi(
        '/v1/appInfos/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
