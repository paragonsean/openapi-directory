/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppResponse from '../model/AppResponse';
import BundleIdCapabilitiesResponse from '../model/BundleIdCapabilitiesResponse';
import BundleIdCreateRequest from '../model/BundleIdCreateRequest';
import BundleIdResponse from '../model/BundleIdResponse';
import BundleIdUpdateRequest from '../model/BundleIdUpdateRequest';
import BundleIdsResponse from '../model/BundleIdsResponse';
import ErrorResponse from '../model/ErrorResponse';
import ProfilesResponse from '../model/ProfilesResponse';

/**
* BundleIds service.
* @module api/BundleIdsApi
* @version 1.4.1
*/
export default class BundleIdsApi {

    /**
    * Constructs a new BundleIdsApi. 
    * @alias module:api/BundleIdsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bundleIdsAppGetToOneRelated operation.
     * @callback module:api/BundleIdsApi~bundleIdsAppGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {module:api/BundleIdsApi~bundleIdsAppGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    bundleIdsAppGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bundleIdsAppGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/v1/bundleIds/{id}/app', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bundleIdsBundleIdCapabilitiesGetToManyRelated operation.
     * @callback module:api/BundleIdsApi~bundleIdsBundleIdCapabilitiesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BundleIdCapabilitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBundleIdCapabilities] the fields to include for returned resources of type bundleIdCapabilities
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BundleIdsApi~bundleIdsBundleIdCapabilitiesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BundleIdCapabilitiesResponse}
     */
    bundleIdsBundleIdCapabilitiesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bundleIdsBundleIdCapabilitiesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[bundleIdCapabilities]': this.apiClient.buildCollectionParam(opts['fieldsBundleIdCapabilities'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BundleIdCapabilitiesResponse;
      return this.apiClient.callApi(
        '/v1/bundleIds/{id}/bundleIdCapabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bundleIdsCreateInstance operation.
     * @callback module:api/BundleIdsApi~bundleIdsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BundleIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BundleIdCreateRequest} bundleIdCreateRequest BundleId representation
     * @param {module:api/BundleIdsApi~bundleIdsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BundleIdResponse}
     */
    bundleIdsCreateInstance(bundleIdCreateRequest, callback) {
      let postBody = bundleIdCreateRequest;
      // verify the required parameter 'bundleIdCreateRequest' is set
      if (bundleIdCreateRequest === undefined || bundleIdCreateRequest === null) {
        throw new Error("Missing the required parameter 'bundleIdCreateRequest' when calling bundleIdsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BundleIdResponse;
      return this.apiClient.callApi(
        '/v1/bundleIds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bundleIdsDeleteInstance operation.
     * @callback module:api/BundleIdsApi~bundleIdsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BundleIdsApi~bundleIdsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bundleIdsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bundleIdsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/bundleIds/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bundleIdsGetCollection operation.
     * @callback module:api/BundleIdsApi~bundleIdsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BundleIdsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterIdentifier] filter by attribute 'identifier'
     * @param {Array.<String>} [filterName] filter by attribute 'name'
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {Array.<String>} [filterSeedId] filter by attribute 'seedId'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsBundleIds] the fields to include for returned resources of type bundleIds
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsBundleIdCapabilities] the fields to include for returned resources of type bundleIdCapabilities
     * @param {Array.<module:model/String>} [fieldsProfiles] the fields to include for returned resources of type profiles
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitBundleIdCapabilities] maximum number of related bundleIdCapabilities returned (when they are included)
     * @param {Number} [limitProfiles] maximum number of related profiles returned (when they are included)
     * @param {module:api/BundleIdsApi~bundleIdsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BundleIdsResponse}
     */
    bundleIdsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[identifier]': this.apiClient.buildCollectionParam(opts['filterIdentifier'], 'csv'),
        'filter[name]': this.apiClient.buildCollectionParam(opts['filterName'], 'csv'),
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[seedId]': this.apiClient.buildCollectionParam(opts['filterSeedId'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[bundleIds]': this.apiClient.buildCollectionParam(opts['fieldsBundleIds'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[bundleIdCapabilities]': this.apiClient.buildCollectionParam(opts['fieldsBundleIdCapabilities'], 'csv'),
        'fields[profiles]': this.apiClient.buildCollectionParam(opts['fieldsProfiles'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[bundleIdCapabilities]': opts['limitBundleIdCapabilities'],
        'limit[profiles]': opts['limitProfiles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BundleIdsResponse;
      return this.apiClient.callApi(
        '/v1/bundleIds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bundleIdsGetInstance operation.
     * @callback module:api/BundleIdsApi~bundleIdsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BundleIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBundleIds] the fields to include for returned resources of type bundleIds
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsBundleIdCapabilities] the fields to include for returned resources of type bundleIdCapabilities
     * @param {Array.<module:model/String>} [fieldsProfiles] the fields to include for returned resources of type profiles
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitBundleIdCapabilities] maximum number of related bundleIdCapabilities returned (when they are included)
     * @param {Number} [limitProfiles] maximum number of related profiles returned (when they are included)
     * @param {module:api/BundleIdsApi~bundleIdsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BundleIdResponse}
     */
    bundleIdsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bundleIdsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[bundleIds]': this.apiClient.buildCollectionParam(opts['fieldsBundleIds'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[bundleIdCapabilities]': this.apiClient.buildCollectionParam(opts['fieldsBundleIdCapabilities'], 'csv'),
        'fields[profiles]': this.apiClient.buildCollectionParam(opts['fieldsProfiles'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[bundleIdCapabilities]': opts['limitBundleIdCapabilities'],
        'limit[profiles]': opts['limitProfiles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BundleIdResponse;
      return this.apiClient.callApi(
        '/v1/bundleIds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bundleIdsProfilesGetToManyRelated operation.
     * @callback module:api/BundleIdsApi~bundleIdsProfilesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsProfiles] the fields to include for returned resources of type profiles
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BundleIdsApi~bundleIdsProfilesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfilesResponse}
     */
    bundleIdsProfilesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bundleIdsProfilesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[profiles]': this.apiClient.buildCollectionParam(opts['fieldsProfiles'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfilesResponse;
      return this.apiClient.callApi(
        '/v1/bundleIds/{id}/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bundleIdsUpdateInstance operation.
     * @callback module:api/BundleIdsApi~bundleIdsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BundleIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BundleIdUpdateRequest} bundleIdUpdateRequest BundleId representation
     * @param {module:api/BundleIdsApi~bundleIdsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BundleIdResponse}
     */
    bundleIdsUpdateInstance(id, bundleIdUpdateRequest, callback) {
      let postBody = bundleIdUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bundleIdsUpdateInstance");
      }
      // verify the required parameter 'bundleIdUpdateRequest' is set
      if (bundleIdUpdateRequest === undefined || bundleIdUpdateRequest === null) {
        throw new Error("Missing the required parameter 'bundleIdUpdateRequest' when calling bundleIdsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BundleIdResponse;
      return this.apiClient.callApi(
        '/v1/bundleIds/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
