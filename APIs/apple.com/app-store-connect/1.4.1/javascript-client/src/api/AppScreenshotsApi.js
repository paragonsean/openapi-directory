/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppScreenshotCreateRequest from '../model/AppScreenshotCreateRequest';
import AppScreenshotResponse from '../model/AppScreenshotResponse';
import AppScreenshotUpdateRequest from '../model/AppScreenshotUpdateRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppScreenshots service.
* @module api/AppScreenshotsApi
* @version 1.4.1
*/
export default class AppScreenshotsApi {

    /**
    * Constructs a new AppScreenshotsApi. 
    * @alias module:api/AppScreenshotsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appScreenshotsCreateInstance operation.
     * @callback module:api/AppScreenshotsApi~appScreenshotsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppScreenshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppScreenshotCreateRequest} appScreenshotCreateRequest AppScreenshot representation
     * @param {module:api/AppScreenshotsApi~appScreenshotsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppScreenshotResponse}
     */
    appScreenshotsCreateInstance(appScreenshotCreateRequest, callback) {
      let postBody = appScreenshotCreateRequest;
      // verify the required parameter 'appScreenshotCreateRequest' is set
      if (appScreenshotCreateRequest === undefined || appScreenshotCreateRequest === null) {
        throw new Error("Missing the required parameter 'appScreenshotCreateRequest' when calling appScreenshotsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppScreenshotResponse;
      return this.apiClient.callApi(
        '/v1/appScreenshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appScreenshotsDeleteInstance operation.
     * @callback module:api/AppScreenshotsApi~appScreenshotsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppScreenshotsApi~appScreenshotsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appScreenshotsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appScreenshotsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appScreenshots/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appScreenshotsGetInstance operation.
     * @callback module:api/AppScreenshotsApi~appScreenshotsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppScreenshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppScreenshots] the fields to include for returned resources of type appScreenshots
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppScreenshotsApi~appScreenshotsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppScreenshotResponse}
     */
    appScreenshotsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appScreenshotsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appScreenshots]': this.apiClient.buildCollectionParam(opts['fieldsAppScreenshots'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppScreenshotResponse;
      return this.apiClient.callApi(
        '/v1/appScreenshots/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appScreenshotsUpdateInstance operation.
     * @callback module:api/AppScreenshotsApi~appScreenshotsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppScreenshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppScreenshotUpdateRequest} appScreenshotUpdateRequest AppScreenshot representation
     * @param {module:api/AppScreenshotsApi~appScreenshotsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppScreenshotResponse}
     */
    appScreenshotsUpdateInstance(id, appScreenshotUpdateRequest, callback) {
      let postBody = appScreenshotUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appScreenshotsUpdateInstance");
      }
      // verify the required parameter 'appScreenshotUpdateRequest' is set
      if (appScreenshotUpdateRequest === undefined || appScreenshotUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appScreenshotUpdateRequest' when calling appScreenshotsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppScreenshotResponse;
      return this.apiClient.callApi(
        '/v1/appScreenshots/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
