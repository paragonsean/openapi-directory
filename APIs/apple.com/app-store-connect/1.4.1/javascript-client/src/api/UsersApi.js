/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppsResponse from '../model/AppsResponse';
import ErrorResponse from '../model/ErrorResponse';
import UserResponse from '../model/UserResponse';
import UserUpdateRequest from '../model/UserUpdateRequest';
import UserVisibleAppsLinkagesRequest from '../model/UserVisibleAppsLinkagesRequest';
import UserVisibleAppsLinkagesResponse from '../model/UserVisibleAppsLinkagesResponse';
import UsersResponse from '../model/UsersResponse';

/**
* Users service.
* @module api/UsersApi
* @version 1.4.1
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersDeleteInstance operation.
     * @callback module:api/UsersApi~usersDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/UsersApi~usersDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetCollection operation.
     * @callback module:api/UsersApi~usersGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterRoles] filter by attribute 'roles'
     * @param {Array.<String>} [filterUsername] filter by attribute 'username'
     * @param {Array.<String>} [filterVisibleApps] filter by id(s) of related 'visibleApps'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsUsers] the fields to include for returned resources of type users
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitVisibleApps] maximum number of related visibleApps returned (when they are included)
     * @param {module:api/UsersApi~usersGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersResponse}
     */
    usersGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[roles]': this.apiClient.buildCollectionParam(opts['filterRoles'], 'csv'),
        'filter[username]': this.apiClient.buildCollectionParam(opts['filterUsername'], 'csv'),
        'filter[visibleApps]': this.apiClient.buildCollectionParam(opts['filterVisibleApps'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[users]': this.apiClient.buildCollectionParam(opts['fieldsUsers'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[visibleApps]': opts['limitVisibleApps']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersResponse;
      return this.apiClient.callApi(
        '/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetInstance operation.
     * @callback module:api/UsersApi~usersGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsUsers] the fields to include for returned resources of type users
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitVisibleApps] maximum number of related visibleApps returned (when they are included)
     * @param {module:api/UsersApi~usersGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    usersGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[users]': this.apiClient.buildCollectionParam(opts['fieldsUsers'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[visibleApps]': opts['limitVisibleApps']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/v1/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdateInstance operation.
     * @callback module:api/UsersApi~usersUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/UserUpdateRequest} userUpdateRequest User representation
     * @param {module:api/UsersApi~usersUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    usersUpdateInstance(id, userUpdateRequest, callback) {
      let postBody = userUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersUpdateInstance");
      }
      // verify the required parameter 'userUpdateRequest' is set
      if (userUpdateRequest === undefined || userUpdateRequest === null) {
        throw new Error("Missing the required parameter 'userUpdateRequest' when calling usersUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/v1/users/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersVisibleAppsCreateToManyRelationship operation.
     * @callback module:api/UsersApi~usersVisibleAppsCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/UserVisibleAppsLinkagesRequest} userVisibleAppsLinkagesRequest List of related linkages
     * @param {module:api/UsersApi~usersVisibleAppsCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersVisibleAppsCreateToManyRelationship(id, userVisibleAppsLinkagesRequest, callback) {
      let postBody = userVisibleAppsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersVisibleAppsCreateToManyRelationship");
      }
      // verify the required parameter 'userVisibleAppsLinkagesRequest' is set
      if (userVisibleAppsLinkagesRequest === undefined || userVisibleAppsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'userVisibleAppsLinkagesRequest' when calling usersVisibleAppsCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{id}/relationships/visibleApps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersVisibleAppsDeleteToManyRelationship operation.
     * @callback module:api/UsersApi~usersVisibleAppsDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/UserVisibleAppsLinkagesRequest} userVisibleAppsLinkagesRequest List of related linkages
     * @param {module:api/UsersApi~usersVisibleAppsDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersVisibleAppsDeleteToManyRelationship(id, userVisibleAppsLinkagesRequest, callback) {
      let postBody = userVisibleAppsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersVisibleAppsDeleteToManyRelationship");
      }
      // verify the required parameter 'userVisibleAppsLinkagesRequest' is set
      if (userVisibleAppsLinkagesRequest === undefined || userVisibleAppsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'userVisibleAppsLinkagesRequest' when calling usersVisibleAppsDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{id}/relationships/visibleApps', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersVisibleAppsGetToManyRelated operation.
     * @callback module:api/UsersApi~usersVisibleAppsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/UsersApi~usersVisibleAppsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsResponse}
     */
    usersVisibleAppsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersVisibleAppsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsResponse;
      return this.apiClient.callApi(
        '/v1/users/{id}/visibleApps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersVisibleAppsGetToManyRelationship operation.
     * @callback module:api/UsersApi~usersVisibleAppsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserVisibleAppsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/UsersApi~usersVisibleAppsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserVisibleAppsLinkagesResponse}
     */
    usersVisibleAppsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersVisibleAppsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserVisibleAppsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/users/{id}/relationships/visibleApps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersVisibleAppsReplaceToManyRelationship operation.
     * @callback module:api/UsersApi~usersVisibleAppsReplaceToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/UserVisibleAppsLinkagesRequest} userVisibleAppsLinkagesRequest List of related linkages
     * @param {module:api/UsersApi~usersVisibleAppsReplaceToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersVisibleAppsReplaceToManyRelationship(id, userVisibleAppsLinkagesRequest, callback) {
      let postBody = userVisibleAppsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersVisibleAppsReplaceToManyRelationship");
      }
      // verify the required parameter 'userVisibleAppsLinkagesRequest' is set
      if (userVisibleAppsLinkagesRequest === undefined || userVisibleAppsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'userVisibleAppsLinkagesRequest' when calling usersVisibleAppsReplaceToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{id}/relationships/visibleApps', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
