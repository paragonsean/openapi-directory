/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppsResponse from '../model/AppsResponse';
import ErrorResponse from '../model/ErrorResponse';
import UserInvitationCreateRequest from '../model/UserInvitationCreateRequest';
import UserInvitationResponse from '../model/UserInvitationResponse';
import UserInvitationsResponse from '../model/UserInvitationsResponse';

/**
* UserInvitations service.
* @module api/UserInvitationsApi
* @version 1.4.1
*/
export default class UserInvitationsApi {

    /**
    * Constructs a new UserInvitationsApi. 
    * @alias module:api/UserInvitationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userInvitationsCreateInstance operation.
     * @callback module:api/UserInvitationsApi~userInvitationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInvitationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UserInvitationCreateRequest} userInvitationCreateRequest UserInvitation representation
     * @param {module:api/UserInvitationsApi~userInvitationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInvitationResponse}
     */
    userInvitationsCreateInstance(userInvitationCreateRequest, callback) {
      let postBody = userInvitationCreateRequest;
      // verify the required parameter 'userInvitationCreateRequest' is set
      if (userInvitationCreateRequest === undefined || userInvitationCreateRequest === null) {
        throw new Error("Missing the required parameter 'userInvitationCreateRequest' when calling userInvitationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserInvitationResponse;
      return this.apiClient.callApi(
        '/v1/userInvitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInvitationsDeleteInstance operation.
     * @callback module:api/UserInvitationsApi~userInvitationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/UserInvitationsApi~userInvitationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userInvitationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userInvitationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/userInvitations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInvitationsGetCollection operation.
     * @callback module:api/UserInvitationsApi~userInvitationsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInvitationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterEmail] filter by attribute 'email'
     * @param {Array.<module:model/String>} [filterRoles] filter by attribute 'roles'
     * @param {Array.<String>} [filterVisibleApps] filter by id(s) of related 'visibleApps'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsUserInvitations] the fields to include for returned resources of type userInvitations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitVisibleApps] maximum number of related visibleApps returned (when they are included)
     * @param {module:api/UserInvitationsApi~userInvitationsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInvitationsResponse}
     */
    userInvitationsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[email]': this.apiClient.buildCollectionParam(opts['filterEmail'], 'csv'),
        'filter[roles]': this.apiClient.buildCollectionParam(opts['filterRoles'], 'csv'),
        'filter[visibleApps]': this.apiClient.buildCollectionParam(opts['filterVisibleApps'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[userInvitations]': this.apiClient.buildCollectionParam(opts['fieldsUserInvitations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[visibleApps]': opts['limitVisibleApps']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserInvitationsResponse;
      return this.apiClient.callApi(
        '/v1/userInvitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInvitationsGetInstance operation.
     * @callback module:api/UserInvitationsApi~userInvitationsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInvitationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsUserInvitations] the fields to include for returned resources of type userInvitations
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitVisibleApps] maximum number of related visibleApps returned (when they are included)
     * @param {module:api/UserInvitationsApi~userInvitationsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInvitationResponse}
     */
    userInvitationsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userInvitationsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[userInvitations]': this.apiClient.buildCollectionParam(opts['fieldsUserInvitations'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[visibleApps]': opts['limitVisibleApps']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserInvitationResponse;
      return this.apiClient.callApi(
        '/v1/userInvitations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInvitationsVisibleAppsGetToManyRelated operation.
     * @callback module:api/UserInvitationsApi~userInvitationsVisibleAppsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/UserInvitationsApi~userInvitationsVisibleAppsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsResponse}
     */
    userInvitationsVisibleAppsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userInvitationsVisibleAppsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsResponse;
      return this.apiClient.callApi(
        '/v1/userInvitations/{id}/visibleApps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
