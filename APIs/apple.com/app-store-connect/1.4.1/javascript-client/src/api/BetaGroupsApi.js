/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppResponse from '../model/AppResponse';
import BetaGroupBetaTestersLinkagesRequest from '../model/BetaGroupBetaTestersLinkagesRequest';
import BetaGroupBetaTestersLinkagesResponse from '../model/BetaGroupBetaTestersLinkagesResponse';
import BetaGroupBuildsLinkagesRequest from '../model/BetaGroupBuildsLinkagesRequest';
import BetaGroupBuildsLinkagesResponse from '../model/BetaGroupBuildsLinkagesResponse';
import BetaGroupCreateRequest from '../model/BetaGroupCreateRequest';
import BetaGroupResponse from '../model/BetaGroupResponse';
import BetaGroupUpdateRequest from '../model/BetaGroupUpdateRequest';
import BetaGroupsResponse from '../model/BetaGroupsResponse';
import BetaTestersResponse from '../model/BetaTestersResponse';
import BuildsResponse from '../model/BuildsResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* BetaGroups service.
* @module api/BetaGroupsApi
* @version 1.4.1
*/
export default class BetaGroupsApi {

    /**
    * Constructs a new BetaGroupsApi. 
    * @alias module:api/BetaGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the betaGroupsAppGetToOneRelated operation.
     * @callback module:api/BetaGroupsApi~betaGroupsAppGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {module:api/BetaGroupsApi~betaGroupsAppGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    betaGroupsAppGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsAppGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}/app', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsBetaTestersCreateToManyRelationship operation.
     * @callback module:api/BetaGroupsApi~betaGroupsBetaTestersCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BetaGroupBetaTestersLinkagesRequest} betaGroupBetaTestersLinkagesRequest List of related linkages
     * @param {module:api/BetaGroupsApi~betaGroupsBetaTestersCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaGroupsBetaTestersCreateToManyRelationship(id, betaGroupBetaTestersLinkagesRequest, callback) {
      let postBody = betaGroupBetaTestersLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsBetaTestersCreateToManyRelationship");
      }
      // verify the required parameter 'betaGroupBetaTestersLinkagesRequest' is set
      if (betaGroupBetaTestersLinkagesRequest === undefined || betaGroupBetaTestersLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'betaGroupBetaTestersLinkagesRequest' when calling betaGroupsBetaTestersCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}/relationships/betaTesters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsBetaTestersDeleteToManyRelationship operation.
     * @callback module:api/BetaGroupsApi~betaGroupsBetaTestersDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BetaGroupBetaTestersLinkagesRequest} betaGroupBetaTestersLinkagesRequest List of related linkages
     * @param {module:api/BetaGroupsApi~betaGroupsBetaTestersDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaGroupsBetaTestersDeleteToManyRelationship(id, betaGroupBetaTestersLinkagesRequest, callback) {
      let postBody = betaGroupBetaTestersLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsBetaTestersDeleteToManyRelationship");
      }
      // verify the required parameter 'betaGroupBetaTestersLinkagesRequest' is set
      if (betaGroupBetaTestersLinkagesRequest === undefined || betaGroupBetaTestersLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'betaGroupBetaTestersLinkagesRequest' when calling betaGroupsBetaTestersDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}/relationships/betaTesters', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsBetaTestersGetToManyRelated operation.
     * @callback module:api/BetaGroupsApi~betaGroupsBetaTestersGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaTestersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BetaGroupsApi~betaGroupsBetaTestersGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaTestersResponse}
     */
    betaGroupsBetaTestersGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsBetaTestersGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaTestersResponse;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}/betaTesters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsBetaTestersGetToManyRelationship operation.
     * @callback module:api/BetaGroupsApi~betaGroupsBetaTestersGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaGroupBetaTestersLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BetaGroupsApi~betaGroupsBetaTestersGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaGroupBetaTestersLinkagesResponse}
     */
    betaGroupsBetaTestersGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsBetaTestersGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaGroupBetaTestersLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}/relationships/betaTesters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsBuildsCreateToManyRelationship operation.
     * @callback module:api/BetaGroupsApi~betaGroupsBuildsCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BetaGroupBuildsLinkagesRequest} betaGroupBuildsLinkagesRequest List of related linkages
     * @param {module:api/BetaGroupsApi~betaGroupsBuildsCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaGroupsBuildsCreateToManyRelationship(id, betaGroupBuildsLinkagesRequest, callback) {
      let postBody = betaGroupBuildsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsBuildsCreateToManyRelationship");
      }
      // verify the required parameter 'betaGroupBuildsLinkagesRequest' is set
      if (betaGroupBuildsLinkagesRequest === undefined || betaGroupBuildsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'betaGroupBuildsLinkagesRequest' when calling betaGroupsBuildsCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}/relationships/builds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsBuildsDeleteToManyRelationship operation.
     * @callback module:api/BetaGroupsApi~betaGroupsBuildsDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BetaGroupBuildsLinkagesRequest} betaGroupBuildsLinkagesRequest List of related linkages
     * @param {module:api/BetaGroupsApi~betaGroupsBuildsDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaGroupsBuildsDeleteToManyRelationship(id, betaGroupBuildsLinkagesRequest, callback) {
      let postBody = betaGroupBuildsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsBuildsDeleteToManyRelationship");
      }
      // verify the required parameter 'betaGroupBuildsLinkagesRequest' is set
      if (betaGroupBuildsLinkagesRequest === undefined || betaGroupBuildsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'betaGroupBuildsLinkagesRequest' when calling betaGroupsBuildsDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}/relationships/builds', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsBuildsGetToManyRelated operation.
     * @callback module:api/BetaGroupsApi~betaGroupsBuildsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BetaGroupsApi~betaGroupsBuildsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsResponse}
     */
    betaGroupsBuildsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsBuildsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsResponse;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsBuildsGetToManyRelationship operation.
     * @callback module:api/BetaGroupsApi~betaGroupsBuildsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaGroupBuildsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BetaGroupsApi~betaGroupsBuildsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaGroupBuildsLinkagesResponse}
     */
    betaGroupsBuildsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsBuildsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaGroupBuildsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}/relationships/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsCreateInstance operation.
     * @callback module:api/BetaGroupsApi~betaGroupsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BetaGroupCreateRequest} betaGroupCreateRequest BetaGroup representation
     * @param {module:api/BetaGroupsApi~betaGroupsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaGroupResponse}
     */
    betaGroupsCreateInstance(betaGroupCreateRequest, callback) {
      let postBody = betaGroupCreateRequest;
      // verify the required parameter 'betaGroupCreateRequest' is set
      if (betaGroupCreateRequest === undefined || betaGroupCreateRequest === null) {
        throw new Error("Missing the required parameter 'betaGroupCreateRequest' when calling betaGroupsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BetaGroupResponse;
      return this.apiClient.callApi(
        '/v1/betaGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsDeleteInstance operation.
     * @callback module:api/BetaGroupsApi~betaGroupsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BetaGroupsApi~betaGroupsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaGroupsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsGetCollection operation.
     * @callback module:api/BetaGroupsApi~betaGroupsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterIsInternalGroup] filter by attribute 'isInternalGroup'
     * @param {Array.<String>} [filterName] filter by attribute 'name'
     * @param {Array.<String>} [filterPublicLink] filter by attribute 'publicLink'
     * @param {Array.<String>} [filterPublicLinkEnabled] filter by attribute 'publicLinkEnabled'
     * @param {Array.<String>} [filterPublicLinkLimitEnabled] filter by attribute 'publicLinkLimitEnabled'
     * @param {Array.<String>} [filterApp] filter by id(s) of related 'app'
     * @param {Array.<String>} [filterBuilds] filter by id(s) of related 'builds'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsBetaGroups] the fields to include for returned resources of type betaGroups
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitBetaTesters] maximum number of related betaTesters returned (when they are included)
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {module:api/BetaGroupsApi~betaGroupsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaGroupsResponse}
     */
    betaGroupsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[isInternalGroup]': this.apiClient.buildCollectionParam(opts['filterIsInternalGroup'], 'csv'),
        'filter[name]': this.apiClient.buildCollectionParam(opts['filterName'], 'csv'),
        'filter[publicLink]': this.apiClient.buildCollectionParam(opts['filterPublicLink'], 'csv'),
        'filter[publicLinkEnabled]': this.apiClient.buildCollectionParam(opts['filterPublicLinkEnabled'], 'csv'),
        'filter[publicLinkLimitEnabled]': this.apiClient.buildCollectionParam(opts['filterPublicLinkLimitEnabled'], 'csv'),
        'filter[app]': this.apiClient.buildCollectionParam(opts['filterApp'], 'csv'),
        'filter[builds]': this.apiClient.buildCollectionParam(opts['filterBuilds'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[betaGroups]': this.apiClient.buildCollectionParam(opts['fieldsBetaGroups'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[betaTesters]': opts['limitBetaTesters'],
        'limit[builds]': opts['limitBuilds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaGroupsResponse;
      return this.apiClient.callApi(
        '/v1/betaGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsGetInstance operation.
     * @callback module:api/BetaGroupsApi~betaGroupsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaGroups] the fields to include for returned resources of type betaGroups
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitBetaTesters] maximum number of related betaTesters returned (when they are included)
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {module:api/BetaGroupsApi~betaGroupsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaGroupResponse}
     */
    betaGroupsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaGroups]': this.apiClient.buildCollectionParam(opts['fieldsBetaGroups'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[betaTesters]': opts['limitBetaTesters'],
        'limit[builds]': opts['limitBuilds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaGroupResponse;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsUpdateInstance operation.
     * @callback module:api/BetaGroupsApi~betaGroupsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BetaGroupUpdateRequest} betaGroupUpdateRequest BetaGroup representation
     * @param {module:api/BetaGroupsApi~betaGroupsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaGroupResponse}
     */
    betaGroupsUpdateInstance(id, betaGroupUpdateRequest, callback) {
      let postBody = betaGroupUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsUpdateInstance");
      }
      // verify the required parameter 'betaGroupUpdateRequest' is set
      if (betaGroupUpdateRequest === undefined || betaGroupUpdateRequest === null) {
        throw new Error("Missing the required parameter 'betaGroupUpdateRequest' when calling betaGroupsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BetaGroupResponse;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
