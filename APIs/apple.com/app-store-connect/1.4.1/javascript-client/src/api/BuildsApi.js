/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppEncryptionDeclarationResponse from '../model/AppEncryptionDeclarationResponse';
import AppResponse from '../model/AppResponse';
import AppStoreVersionResponse from '../model/AppStoreVersionResponse';
import BetaAppReviewSubmissionResponse from '../model/BetaAppReviewSubmissionResponse';
import BetaBuildLocalizationsResponse from '../model/BetaBuildLocalizationsResponse';
import BetaTestersResponse from '../model/BetaTestersResponse';
import BuildAppEncryptionDeclarationLinkageRequest from '../model/BuildAppEncryptionDeclarationLinkageRequest';
import BuildAppEncryptionDeclarationLinkageResponse from '../model/BuildAppEncryptionDeclarationLinkageResponse';
import BuildBetaDetailResponse from '../model/BuildBetaDetailResponse';
import BuildBetaGroupsLinkagesRequest from '../model/BuildBetaGroupsLinkagesRequest';
import BuildIconsResponse from '../model/BuildIconsResponse';
import BuildIndividualTestersLinkagesRequest from '../model/BuildIndividualTestersLinkagesRequest';
import BuildIndividualTestersLinkagesResponse from '../model/BuildIndividualTestersLinkagesResponse';
import BuildResponse from '../model/BuildResponse';
import BuildUpdateRequest from '../model/BuildUpdateRequest';
import BuildsResponse from '../model/BuildsResponse';
import DiagnosticSignaturesResponse from '../model/DiagnosticSignaturesResponse';
import ErrorResponse from '../model/ErrorResponse';
import PerfPowerMetricsResponse from '../model/PerfPowerMetricsResponse';
import PrereleaseVersionResponse from '../model/PrereleaseVersionResponse';

/**
* Builds service.
* @module api/BuildsApi
* @version 1.4.1
*/
export default class BuildsApi {

    /**
    * Constructs a new BuildsApi. 
    * @alias module:api/BuildsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the buildsAppEncryptionDeclarationGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsAppEncryptionDeclarationGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEncryptionDeclarationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {module:api/BuildsApi~buildsAppEncryptionDeclarationGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEncryptionDeclarationResponse}
     */
    buildsAppEncryptionDeclarationGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppEncryptionDeclarationGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEncryptionDeclarationResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/appEncryptionDeclaration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsAppEncryptionDeclarationGetToOneRelationship operation.
     * @callback module:api/BuildsApi~buildsAppEncryptionDeclarationGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildAppEncryptionDeclarationLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BuildsApi~buildsAppEncryptionDeclarationGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildAppEncryptionDeclarationLinkageResponse}
     */
    buildsAppEncryptionDeclarationGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppEncryptionDeclarationGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildAppEncryptionDeclarationLinkageResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/appEncryptionDeclaration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsAppEncryptionDeclarationUpdateToOneRelationship operation.
     * @callback module:api/BuildsApi~buildsAppEncryptionDeclarationUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildAppEncryptionDeclarationLinkageRequest} buildAppEncryptionDeclarationLinkageRequest Related linkage
     * @param {module:api/BuildsApi~buildsAppEncryptionDeclarationUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsAppEncryptionDeclarationUpdateToOneRelationship(id, buildAppEncryptionDeclarationLinkageRequest, callback) {
      let postBody = buildAppEncryptionDeclarationLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppEncryptionDeclarationUpdateToOneRelationship");
      }
      // verify the required parameter 'buildAppEncryptionDeclarationLinkageRequest' is set
      if (buildAppEncryptionDeclarationLinkageRequest === undefined || buildAppEncryptionDeclarationLinkageRequest === null) {
        throw new Error("Missing the required parameter 'buildAppEncryptionDeclarationLinkageRequest' when calling buildsAppEncryptionDeclarationUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/appEncryptionDeclaration', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsAppGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsAppGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {module:api/BuildsApi~buildsAppGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    buildsAppGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/app', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsAppStoreVersionGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsAppStoreVersionGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {module:api/BuildsApi~buildsAppStoreVersionGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionResponse}
     */
    buildsAppStoreVersionGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppStoreVersionGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/appStoreVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaAppReviewSubmissionGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsBetaAppReviewSubmissionGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaAppReviewSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewSubmissions] the fields to include for returned resources of type betaAppReviewSubmissions
     * @param {module:api/BuildsApi~buildsBetaAppReviewSubmissionGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaAppReviewSubmissionResponse}
     */
    buildsBetaAppReviewSubmissionGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaAppReviewSubmissionGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaAppReviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewSubmissions'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaAppReviewSubmissionResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/betaAppReviewSubmission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaBuildLocalizationsGetToManyRelated operation.
     * @callback module:api/BuildsApi~buildsBetaBuildLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaBuildLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaBuildLocalizations] the fields to include for returned resources of type betaBuildLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsBetaBuildLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaBuildLocalizationsResponse}
     */
    buildsBetaBuildLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaBuildLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaBuildLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaBuildLocalizations'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaBuildLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/betaBuildLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaGroupsCreateToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsBetaGroupsCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildBetaGroupsLinkagesRequest} buildBetaGroupsLinkagesRequest List of related linkages
     * @param {module:api/BuildsApi~buildsBetaGroupsCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsBetaGroupsCreateToManyRelationship(id, buildBetaGroupsLinkagesRequest, callback) {
      let postBody = buildBetaGroupsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaGroupsCreateToManyRelationship");
      }
      // verify the required parameter 'buildBetaGroupsLinkagesRequest' is set
      if (buildBetaGroupsLinkagesRequest === undefined || buildBetaGroupsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'buildBetaGroupsLinkagesRequest' when calling buildsBetaGroupsCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/betaGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaGroupsDeleteToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsBetaGroupsDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildBetaGroupsLinkagesRequest} buildBetaGroupsLinkagesRequest List of related linkages
     * @param {module:api/BuildsApi~buildsBetaGroupsDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsBetaGroupsDeleteToManyRelationship(id, buildBetaGroupsLinkagesRequest, callback) {
      let postBody = buildBetaGroupsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaGroupsDeleteToManyRelationship");
      }
      // verify the required parameter 'buildBetaGroupsLinkagesRequest' is set
      if (buildBetaGroupsLinkagesRequest === undefined || buildBetaGroupsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'buildBetaGroupsLinkagesRequest' when calling buildsBetaGroupsDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/betaGroups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBuildBetaDetailGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsBuildBetaDetailGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildBetaDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuildBetaDetails] the fields to include for returned resources of type buildBetaDetails
     * @param {module:api/BuildsApi~buildsBuildBetaDetailGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildBetaDetailResponse}
     */
    buildsBuildBetaDetailGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBuildBetaDetailGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[buildBetaDetails]': this.apiClient.buildCollectionParam(opts['fieldsBuildBetaDetails'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildBetaDetailResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/buildBetaDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsDiagnosticSignaturesGetToManyRelated operation.
     * @callback module:api/BuildsApi~buildsDiagnosticSignaturesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticSignaturesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterDiagnosticType] filter by attribute 'diagnosticType'
     * @param {Array.<module:model/String>} [fieldsDiagnosticSignatures] the fields to include for returned resources of type diagnosticSignatures
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsDiagnosticSignaturesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticSignaturesResponse}
     */
    buildsDiagnosticSignaturesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsDiagnosticSignaturesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[diagnosticType]': this.apiClient.buildCollectionParam(opts['filterDiagnosticType'], 'csv'),
        'fields[diagnosticSignatures]': this.apiClient.buildCollectionParam(opts['fieldsDiagnosticSignatures'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticSignaturesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/diagnosticSignatures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsGetCollection operation.
     * @callback module:api/BuildsApi~buildsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterBetaAppReviewSubmissionBetaReviewState] filter by attribute 'betaAppReviewSubmission.betaReviewState'
     * @param {Array.<String>} [filterExpired] filter by attribute 'expired'
     * @param {Array.<module:model/String>} [filterPreReleaseVersionPlatform] filter by attribute 'preReleaseVersion.platform'
     * @param {Array.<String>} [filterPreReleaseVersionVersion] filter by attribute 'preReleaseVersion.version'
     * @param {Array.<module:model/String>} [filterProcessingState] filter by attribute 'processingState'
     * @param {Array.<String>} [filterUsesNonExemptEncryption] filter by attribute 'usesNonExemptEncryption'
     * @param {Array.<String>} [filterVersion] filter by attribute 'version'
     * @param {Array.<String>} [filterApp] filter by id(s) of related 'app'
     * @param {Array.<String>} [filterAppStoreVersion] filter by id(s) of related 'appStoreVersion'
     * @param {Array.<String>} [filterBetaGroups] filter by id(s) of related 'betaGroups'
     * @param {Array.<String>} [filterPreReleaseVersion] filter by id(s) of related 'preReleaseVersion'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewSubmissions] the fields to include for returned resources of type betaAppReviewSubmissions
     * @param {Array.<module:model/String>} [fieldsBuildBetaDetails] the fields to include for returned resources of type buildBetaDetails
     * @param {Array.<module:model/String>} [fieldsBuildIcons] the fields to include for returned resources of type buildIcons
     * @param {Array.<module:model/String>} [fieldsPerfPowerMetrics] the fields to include for returned resources of type perfPowerMetrics
     * @param {Array.<module:model/String>} [fieldsPreReleaseVersions] the fields to include for returned resources of type preReleaseVersions
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsDiagnosticSignatures] the fields to include for returned resources of type diagnosticSignatures
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Array.<module:model/String>} [fieldsBetaBuildLocalizations] the fields to include for returned resources of type betaBuildLocalizations
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitBetaBuildLocalizations] maximum number of related betaBuildLocalizations returned (when they are included)
     * @param {Number} [limitIcons] maximum number of related icons returned (when they are included)
     * @param {Number} [limitIndividualTesters] maximum number of related individualTesters returned (when they are included)
     * @param {module:api/BuildsApi~buildsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsResponse}
     */
    buildsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[betaAppReviewSubmission.betaReviewState]': this.apiClient.buildCollectionParam(opts['filterBetaAppReviewSubmissionBetaReviewState'], 'csv'),
        'filter[expired]': this.apiClient.buildCollectionParam(opts['filterExpired'], 'csv'),
        'filter[preReleaseVersion.platform]': this.apiClient.buildCollectionParam(opts['filterPreReleaseVersionPlatform'], 'csv'),
        'filter[preReleaseVersion.version]': this.apiClient.buildCollectionParam(opts['filterPreReleaseVersionVersion'], 'csv'),
        'filter[processingState]': this.apiClient.buildCollectionParam(opts['filterProcessingState'], 'csv'),
        'filter[usesNonExemptEncryption]': this.apiClient.buildCollectionParam(opts['filterUsesNonExemptEncryption'], 'csv'),
        'filter[version]': this.apiClient.buildCollectionParam(opts['filterVersion'], 'csv'),
        'filter[app]': this.apiClient.buildCollectionParam(opts['filterApp'], 'csv'),
        'filter[appStoreVersion]': this.apiClient.buildCollectionParam(opts['filterAppStoreVersion'], 'csv'),
        'filter[betaGroups]': this.apiClient.buildCollectionParam(opts['filterBetaGroups'], 'csv'),
        'filter[preReleaseVersion]': this.apiClient.buildCollectionParam(opts['filterPreReleaseVersion'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv'),
        'fields[betaAppReviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewSubmissions'], 'csv'),
        'fields[buildBetaDetails]': this.apiClient.buildCollectionParam(opts['fieldsBuildBetaDetails'], 'csv'),
        'fields[buildIcons]': this.apiClient.buildCollectionParam(opts['fieldsBuildIcons'], 'csv'),
        'fields[perfPowerMetrics]': this.apiClient.buildCollectionParam(opts['fieldsPerfPowerMetrics'], 'csv'),
        'fields[preReleaseVersions]': this.apiClient.buildCollectionParam(opts['fieldsPreReleaseVersions'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[diagnosticSignatures]': this.apiClient.buildCollectionParam(opts['fieldsDiagnosticSignatures'], 'csv'),
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'fields[betaBuildLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaBuildLocalizations'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[betaBuildLocalizations]': opts['limitBetaBuildLocalizations'],
        'limit[icons]': opts['limitIcons'],
        'limit[individualTesters]': opts['limitIndividualTesters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsResponse;
      return this.apiClient.callApi(
        '/v1/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsGetInstance operation.
     * @callback module:api/BuildsApi~buildsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewSubmissions] the fields to include for returned resources of type betaAppReviewSubmissions
     * @param {Array.<module:model/String>} [fieldsBuildBetaDetails] the fields to include for returned resources of type buildBetaDetails
     * @param {Array.<module:model/String>} [fieldsBuildIcons] the fields to include for returned resources of type buildIcons
     * @param {Array.<module:model/String>} [fieldsPerfPowerMetrics] the fields to include for returned resources of type perfPowerMetrics
     * @param {Array.<module:model/String>} [fieldsPreReleaseVersions] the fields to include for returned resources of type preReleaseVersions
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsDiagnosticSignatures] the fields to include for returned resources of type diagnosticSignatures
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Array.<module:model/String>} [fieldsBetaBuildLocalizations] the fields to include for returned resources of type betaBuildLocalizations
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitBetaBuildLocalizations] maximum number of related betaBuildLocalizations returned (when they are included)
     * @param {Number} [limitIcons] maximum number of related icons returned (when they are included)
     * @param {Number} [limitIndividualTesters] maximum number of related individualTesters returned (when they are included)
     * @param {module:api/BuildsApi~buildsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildResponse}
     */
    buildsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv'),
        'fields[betaAppReviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewSubmissions'], 'csv'),
        'fields[buildBetaDetails]': this.apiClient.buildCollectionParam(opts['fieldsBuildBetaDetails'], 'csv'),
        'fields[buildIcons]': this.apiClient.buildCollectionParam(opts['fieldsBuildIcons'], 'csv'),
        'fields[perfPowerMetrics]': this.apiClient.buildCollectionParam(opts['fieldsPerfPowerMetrics'], 'csv'),
        'fields[preReleaseVersions]': this.apiClient.buildCollectionParam(opts['fieldsPreReleaseVersions'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[diagnosticSignatures]': this.apiClient.buildCollectionParam(opts['fieldsDiagnosticSignatures'], 'csv'),
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'fields[betaBuildLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaBuildLocalizations'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[betaBuildLocalizations]': opts['limitBetaBuildLocalizations'],
        'limit[icons]': opts['limitIcons'],
        'limit[individualTesters]': opts['limitIndividualTesters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsIconsGetToManyRelated operation.
     * @callback module:api/BuildsApi~buildsIconsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildIconsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuildIcons] the fields to include for returned resources of type buildIcons
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsIconsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildIconsResponse}
     */
    buildsIconsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsIconsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[buildIcons]': this.apiClient.buildCollectionParam(opts['fieldsBuildIcons'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildIconsResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/icons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsIndividualTestersCreateToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsIndividualTestersCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildIndividualTestersLinkagesRequest} buildIndividualTestersLinkagesRequest List of related linkages
     * @param {module:api/BuildsApi~buildsIndividualTestersCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsIndividualTestersCreateToManyRelationship(id, buildIndividualTestersLinkagesRequest, callback) {
      let postBody = buildIndividualTestersLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsIndividualTestersCreateToManyRelationship");
      }
      // verify the required parameter 'buildIndividualTestersLinkagesRequest' is set
      if (buildIndividualTestersLinkagesRequest === undefined || buildIndividualTestersLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'buildIndividualTestersLinkagesRequest' when calling buildsIndividualTestersCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/individualTesters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsIndividualTestersDeleteToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsIndividualTestersDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildIndividualTestersLinkagesRequest} buildIndividualTestersLinkagesRequest List of related linkages
     * @param {module:api/BuildsApi~buildsIndividualTestersDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsIndividualTestersDeleteToManyRelationship(id, buildIndividualTestersLinkagesRequest, callback) {
      let postBody = buildIndividualTestersLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsIndividualTestersDeleteToManyRelationship");
      }
      // verify the required parameter 'buildIndividualTestersLinkagesRequest' is set
      if (buildIndividualTestersLinkagesRequest === undefined || buildIndividualTestersLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'buildIndividualTestersLinkagesRequest' when calling buildsIndividualTestersDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/individualTesters', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsIndividualTestersGetToManyRelated operation.
     * @callback module:api/BuildsApi~buildsIndividualTestersGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaTestersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsIndividualTestersGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaTestersResponse}
     */
    buildsIndividualTestersGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsIndividualTestersGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaTestersResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/individualTesters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsIndividualTestersGetToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsIndividualTestersGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildIndividualTestersLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsIndividualTestersGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildIndividualTestersLinkagesResponse}
     */
    buildsIndividualTestersGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsIndividualTestersGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildIndividualTestersLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/individualTesters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsPerfPowerMetricsGetToManyRelated operation.
     * @callback module:api/BuildsApi~buildsPerfPowerMetricsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerfPowerMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterDeviceType] filter by attribute 'deviceType'
     * @param {Array.<module:model/String>} [filterMetricType] filter by attribute 'metricType'
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {module:api/BuildsApi~buildsPerfPowerMetricsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerfPowerMetricsResponse}
     */
    buildsPerfPowerMetricsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsPerfPowerMetricsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[deviceType]': this.apiClient.buildCollectionParam(opts['filterDeviceType'], 'csv'),
        'filter[metricType]': this.apiClient.buildCollectionParam(opts['filterMetricType'], 'csv'),
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PerfPowerMetricsResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/perfPowerMetrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsPreReleaseVersionGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsPreReleaseVersionGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrereleaseVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsPreReleaseVersions] the fields to include for returned resources of type preReleaseVersions
     * @param {module:api/BuildsApi~buildsPreReleaseVersionGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrereleaseVersionResponse}
     */
    buildsPreReleaseVersionGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsPreReleaseVersionGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[preReleaseVersions]': this.apiClient.buildCollectionParam(opts['fieldsPreReleaseVersions'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrereleaseVersionResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/preReleaseVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsUpdateInstance operation.
     * @callback module:api/BuildsApi~buildsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildUpdateRequest} buildUpdateRequest Build representation
     * @param {module:api/BuildsApi~buildsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildResponse}
     */
    buildsUpdateInstance(id, buildUpdateRequest, callback) {
      let postBody = buildUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsUpdateInstance");
      }
      // verify the required parameter 'buildUpdateRequest' is set
      if (buildUpdateRequest === undefined || buildUpdateRequest === null) {
        throw new Error("Missing the required parameter 'buildUpdateRequest' when calling buildsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BuildResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
