/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import RoutingAppCoverageCreateRequest from '../model/RoutingAppCoverageCreateRequest';
import RoutingAppCoverageResponse from '../model/RoutingAppCoverageResponse';
import RoutingAppCoverageUpdateRequest from '../model/RoutingAppCoverageUpdateRequest';

/**
* RoutingAppCoverages service.
* @module api/RoutingAppCoveragesApi
* @version 1.4.1
*/
export default class RoutingAppCoveragesApi {

    /**
    * Constructs a new RoutingAppCoveragesApi. 
    * @alias module:api/RoutingAppCoveragesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the routingAppCoveragesCreateInstance operation.
     * @callback module:api/RoutingAppCoveragesApi~routingAppCoveragesCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutingAppCoverageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RoutingAppCoverageCreateRequest} routingAppCoverageCreateRequest RoutingAppCoverage representation
     * @param {module:api/RoutingAppCoveragesApi~routingAppCoveragesCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutingAppCoverageResponse}
     */
    routingAppCoveragesCreateInstance(routingAppCoverageCreateRequest, callback) {
      let postBody = routingAppCoverageCreateRequest;
      // verify the required parameter 'routingAppCoverageCreateRequest' is set
      if (routingAppCoverageCreateRequest === undefined || routingAppCoverageCreateRequest === null) {
        throw new Error("Missing the required parameter 'routingAppCoverageCreateRequest' when calling routingAppCoveragesCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoutingAppCoverageResponse;
      return this.apiClient.callApi(
        '/v1/routingAppCoverages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routingAppCoveragesDeleteInstance operation.
     * @callback module:api/RoutingAppCoveragesApi~routingAppCoveragesDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/RoutingAppCoveragesApi~routingAppCoveragesDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    routingAppCoveragesDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routingAppCoveragesDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/routingAppCoverages/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routingAppCoveragesGetInstance operation.
     * @callback module:api/RoutingAppCoveragesApi~routingAppCoveragesGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutingAppCoverageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsRoutingAppCoverages] the fields to include for returned resources of type routingAppCoverages
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/RoutingAppCoveragesApi~routingAppCoveragesGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutingAppCoverageResponse}
     */
    routingAppCoveragesGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routingAppCoveragesGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[routingAppCoverages]': this.apiClient.buildCollectionParam(opts['fieldsRoutingAppCoverages'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoutingAppCoverageResponse;
      return this.apiClient.callApi(
        '/v1/routingAppCoverages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routingAppCoveragesUpdateInstance operation.
     * @callback module:api/RoutingAppCoveragesApi~routingAppCoveragesUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutingAppCoverageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/RoutingAppCoverageUpdateRequest} routingAppCoverageUpdateRequest RoutingAppCoverage representation
     * @param {module:api/RoutingAppCoveragesApi~routingAppCoveragesUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutingAppCoverageResponse}
     */
    routingAppCoveragesUpdateInstance(id, routingAppCoverageUpdateRequest, callback) {
      let postBody = routingAppCoverageUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routingAppCoveragesUpdateInstance");
      }
      // verify the required parameter 'routingAppCoverageUpdateRequest' is set
      if (routingAppCoverageUpdateRequest === undefined || routingAppCoverageUpdateRequest === null) {
        throw new Error("Missing the required parameter 'routingAppCoverageUpdateRequest' when calling routingAppCoveragesUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoutingAppCoverageResponse;
      return this.apiClient.callApi(
        '/v1/routingAppCoverages/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
