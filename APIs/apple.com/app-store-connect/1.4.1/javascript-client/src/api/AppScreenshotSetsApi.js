/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppScreenshotSetAppScreenshotsLinkagesRequest from '../model/AppScreenshotSetAppScreenshotsLinkagesRequest';
import AppScreenshotSetAppScreenshotsLinkagesResponse from '../model/AppScreenshotSetAppScreenshotsLinkagesResponse';
import AppScreenshotSetCreateRequest from '../model/AppScreenshotSetCreateRequest';
import AppScreenshotSetResponse from '../model/AppScreenshotSetResponse';
import AppScreenshotsResponse from '../model/AppScreenshotsResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppScreenshotSets service.
* @module api/AppScreenshotSetsApi
* @version 1.4.1
*/
export default class AppScreenshotSetsApi {

    /**
    * Constructs a new AppScreenshotSetsApi. 
    * @alias module:api/AppScreenshotSetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appScreenshotSetsAppScreenshotsGetToManyRelated operation.
     * @callback module:api/AppScreenshotSetsApi~appScreenshotSetsAppScreenshotsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppScreenshotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppScreenshotSets] the fields to include for returned resources of type appScreenshotSets
     * @param {Array.<module:model/String>} [fieldsAppScreenshots] the fields to include for returned resources of type appScreenshots
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppScreenshotSetsApi~appScreenshotSetsAppScreenshotsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppScreenshotsResponse}
     */
    appScreenshotSetsAppScreenshotsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appScreenshotSetsAppScreenshotsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appScreenshotSets]': this.apiClient.buildCollectionParam(opts['fieldsAppScreenshotSets'], 'csv'),
        'fields[appScreenshots]': this.apiClient.buildCollectionParam(opts['fieldsAppScreenshots'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppScreenshotsResponse;
      return this.apiClient.callApi(
        '/v1/appScreenshotSets/{id}/appScreenshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appScreenshotSetsAppScreenshotsGetToManyRelationship operation.
     * @callback module:api/AppScreenshotSetsApi~appScreenshotSetsAppScreenshotsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppScreenshotSetAppScreenshotsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppScreenshotSetsApi~appScreenshotSetsAppScreenshotsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppScreenshotSetAppScreenshotsLinkagesResponse}
     */
    appScreenshotSetsAppScreenshotsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appScreenshotSetsAppScreenshotsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppScreenshotSetAppScreenshotsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appScreenshotSets/{id}/relationships/appScreenshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appScreenshotSetsAppScreenshotsReplaceToManyRelationship operation.
     * @callback module:api/AppScreenshotSetsApi~appScreenshotSetsAppScreenshotsReplaceToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppScreenshotSetAppScreenshotsLinkagesRequest} appScreenshotSetAppScreenshotsLinkagesRequest List of related linkages
     * @param {module:api/AppScreenshotSetsApi~appScreenshotSetsAppScreenshotsReplaceToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appScreenshotSetsAppScreenshotsReplaceToManyRelationship(id, appScreenshotSetAppScreenshotsLinkagesRequest, callback) {
      let postBody = appScreenshotSetAppScreenshotsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appScreenshotSetsAppScreenshotsReplaceToManyRelationship");
      }
      // verify the required parameter 'appScreenshotSetAppScreenshotsLinkagesRequest' is set
      if (appScreenshotSetAppScreenshotsLinkagesRequest === undefined || appScreenshotSetAppScreenshotsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'appScreenshotSetAppScreenshotsLinkagesRequest' when calling appScreenshotSetsAppScreenshotsReplaceToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appScreenshotSets/{id}/relationships/appScreenshots', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appScreenshotSetsCreateInstance operation.
     * @callback module:api/AppScreenshotSetsApi~appScreenshotSetsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppScreenshotSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppScreenshotSetCreateRequest} appScreenshotSetCreateRequest AppScreenshotSet representation
     * @param {module:api/AppScreenshotSetsApi~appScreenshotSetsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppScreenshotSetResponse}
     */
    appScreenshotSetsCreateInstance(appScreenshotSetCreateRequest, callback) {
      let postBody = appScreenshotSetCreateRequest;
      // verify the required parameter 'appScreenshotSetCreateRequest' is set
      if (appScreenshotSetCreateRequest === undefined || appScreenshotSetCreateRequest === null) {
        throw new Error("Missing the required parameter 'appScreenshotSetCreateRequest' when calling appScreenshotSetsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppScreenshotSetResponse;
      return this.apiClient.callApi(
        '/v1/appScreenshotSets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appScreenshotSetsDeleteInstance operation.
     * @callback module:api/AppScreenshotSetsApi~appScreenshotSetsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppScreenshotSetsApi~appScreenshotSetsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appScreenshotSetsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appScreenshotSetsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appScreenshotSets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appScreenshotSetsGetInstance operation.
     * @callback module:api/AppScreenshotSetsApi~appScreenshotSetsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppScreenshotSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppScreenshotSets] the fields to include for returned resources of type appScreenshotSets
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsAppScreenshots] the fields to include for returned resources of type appScreenshots
     * @param {Number} [limitAppScreenshots] maximum number of related appScreenshots returned (when they are included)
     * @param {module:api/AppScreenshotSetsApi~appScreenshotSetsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppScreenshotSetResponse}
     */
    appScreenshotSetsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appScreenshotSetsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appScreenshotSets]': this.apiClient.buildCollectionParam(opts['fieldsAppScreenshotSets'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[appScreenshots]': this.apiClient.buildCollectionParam(opts['fieldsAppScreenshots'], 'csv'),
        'limit[appScreenshots]': opts['limitAppScreenshots']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppScreenshotSetResponse;
      return this.apiClient.callApi(
        '/v1/appScreenshotSets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
