/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceCreateRequest from '../model/DeviceCreateRequest';
import DeviceResponse from '../model/DeviceResponse';
import DeviceUpdateRequest from '../model/DeviceUpdateRequest';
import DevicesResponse from '../model/DevicesResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* Devices service.
* @module api/DevicesApi
* @version 1.4.1
*/
export default class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the devicesCreateInstance operation.
     * @callback module:api/DevicesApi~devicesCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeviceCreateRequest} deviceCreateRequest Device representation
     * @param {module:api/DevicesApi~devicesCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceResponse}
     */
    devicesCreateInstance(deviceCreateRequest, callback) {
      let postBody = deviceCreateRequest;
      // verify the required parameter 'deviceCreateRequest' is set
      if (deviceCreateRequest === undefined || deviceCreateRequest === null) {
        throw new Error("Missing the required parameter 'deviceCreateRequest' when calling devicesCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceResponse;
      return this.apiClient.callApi(
        '/v1/devices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetCollection operation.
     * @callback module:api/DevicesApi~devicesGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterName] filter by attribute 'name'
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {Array.<module:model/String>} [filterStatus] filter by attribute 'status'
     * @param {Array.<String>} [filterUdid] filter by attribute 'udid'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsDevices] the fields to include for returned resources of type devices
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/DevicesApi~devicesGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicesResponse}
     */
    devicesGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[name]': this.apiClient.buildCollectionParam(opts['filterName'], 'csv'),
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[status]': this.apiClient.buildCollectionParam(opts['filterStatus'], 'csv'),
        'filter[udid]': this.apiClient.buildCollectionParam(opts['filterUdid'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[devices]': this.apiClient.buildCollectionParam(opts['fieldsDevices'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DevicesResponse;
      return this.apiClient.callApi(
        '/v1/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetInstance operation.
     * @callback module:api/DevicesApi~devicesGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsDevices] the fields to include for returned resources of type devices
     * @param {module:api/DevicesApi~devicesGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceResponse}
     */
    devicesGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[devices]': this.apiClient.buildCollectionParam(opts['fieldsDevices'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceResponse;
      return this.apiClient.callApi(
        '/v1/devices/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesUpdateInstance operation.
     * @callback module:api/DevicesApi~devicesUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/DeviceUpdateRequest} deviceUpdateRequest Device representation
     * @param {module:api/DevicesApi~devicesUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceResponse}
     */
    devicesUpdateInstance(id, deviceUpdateRequest, callback) {
      let postBody = deviceUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesUpdateInstance");
      }
      // verify the required parameter 'deviceUpdateRequest' is set
      if (deviceUpdateRequest === undefined || deviceUpdateRequest === null) {
        throw new Error("Missing the required parameter 'deviceUpdateRequest' when calling devicesUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceResponse;
      return this.apiClient.callApi(
        '/v1/devices/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
