/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import IdfaDeclarationCreateRequest from '../model/IdfaDeclarationCreateRequest';
import IdfaDeclarationResponse from '../model/IdfaDeclarationResponse';
import IdfaDeclarationUpdateRequest from '../model/IdfaDeclarationUpdateRequest';

/**
* IdfaDeclarations service.
* @module api/IdfaDeclarationsApi
* @version 1.4.1
*/
export default class IdfaDeclarationsApi {

    /**
    * Constructs a new IdfaDeclarationsApi. 
    * @alias module:api/IdfaDeclarationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the idfaDeclarationsCreateInstance operation.
     * @callback module:api/IdfaDeclarationsApi~idfaDeclarationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdfaDeclarationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IdfaDeclarationCreateRequest} idfaDeclarationCreateRequest IdfaDeclaration representation
     * @param {module:api/IdfaDeclarationsApi~idfaDeclarationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdfaDeclarationResponse}
     */
    idfaDeclarationsCreateInstance(idfaDeclarationCreateRequest, callback) {
      let postBody = idfaDeclarationCreateRequest;
      // verify the required parameter 'idfaDeclarationCreateRequest' is set
      if (idfaDeclarationCreateRequest === undefined || idfaDeclarationCreateRequest === null) {
        throw new Error("Missing the required parameter 'idfaDeclarationCreateRequest' when calling idfaDeclarationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdfaDeclarationResponse;
      return this.apiClient.callApi(
        '/v1/idfaDeclarations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idfaDeclarationsDeleteInstance operation.
     * @callback module:api/IdfaDeclarationsApi~idfaDeclarationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/IdfaDeclarationsApi~idfaDeclarationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idfaDeclarationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idfaDeclarationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/idfaDeclarations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idfaDeclarationsUpdateInstance operation.
     * @callback module:api/IdfaDeclarationsApi~idfaDeclarationsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdfaDeclarationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/IdfaDeclarationUpdateRequest} idfaDeclarationUpdateRequest IdfaDeclaration representation
     * @param {module:api/IdfaDeclarationsApi~idfaDeclarationsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdfaDeclarationResponse}
     */
    idfaDeclarationsUpdateInstance(id, idfaDeclarationUpdateRequest, callback) {
      let postBody = idfaDeclarationUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idfaDeclarationsUpdateInstance");
      }
      // verify the required parameter 'idfaDeclarationUpdateRequest' is set
      if (idfaDeclarationUpdateRequest === undefined || idfaDeclarationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'idfaDeclarationUpdateRequest' when calling idfaDeclarationsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdfaDeclarationResponse;
      return this.apiClient.callApi(
        '/v1/idfaDeclarations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
