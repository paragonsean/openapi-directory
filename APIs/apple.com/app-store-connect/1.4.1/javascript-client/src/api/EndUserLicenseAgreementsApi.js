/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EndUserLicenseAgreementCreateRequest from '../model/EndUserLicenseAgreementCreateRequest';
import EndUserLicenseAgreementResponse from '../model/EndUserLicenseAgreementResponse';
import EndUserLicenseAgreementUpdateRequest from '../model/EndUserLicenseAgreementUpdateRequest';
import ErrorResponse from '../model/ErrorResponse';
import TerritoriesResponse from '../model/TerritoriesResponse';

/**
* EndUserLicenseAgreements service.
* @module api/EndUserLicenseAgreementsApi
* @version 1.4.1
*/
export default class EndUserLicenseAgreementsApi {

    /**
    * Constructs a new EndUserLicenseAgreementsApi. 
    * @alias module:api/EndUserLicenseAgreementsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the endUserLicenseAgreementsCreateInstance operation.
     * @callback module:api/EndUserLicenseAgreementsApi~endUserLicenseAgreementsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndUserLicenseAgreementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/EndUserLicenseAgreementCreateRequest} endUserLicenseAgreementCreateRequest EndUserLicenseAgreement representation
     * @param {module:api/EndUserLicenseAgreementsApi~endUserLicenseAgreementsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndUserLicenseAgreementResponse}
     */
    endUserLicenseAgreementsCreateInstance(endUserLicenseAgreementCreateRequest, callback) {
      let postBody = endUserLicenseAgreementCreateRequest;
      // verify the required parameter 'endUserLicenseAgreementCreateRequest' is set
      if (endUserLicenseAgreementCreateRequest === undefined || endUserLicenseAgreementCreateRequest === null) {
        throw new Error("Missing the required parameter 'endUserLicenseAgreementCreateRequest' when calling endUserLicenseAgreementsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EndUserLicenseAgreementResponse;
      return this.apiClient.callApi(
        '/v1/endUserLicenseAgreements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the endUserLicenseAgreementsDeleteInstance operation.
     * @callback module:api/EndUserLicenseAgreementsApi~endUserLicenseAgreementsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/EndUserLicenseAgreementsApi~endUserLicenseAgreementsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    endUserLicenseAgreementsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endUserLicenseAgreementsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/endUserLicenseAgreements/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the endUserLicenseAgreementsGetInstance operation.
     * @callback module:api/EndUserLicenseAgreementsApi~endUserLicenseAgreementsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndUserLicenseAgreementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsEndUserLicenseAgreements] the fields to include for returned resources of type endUserLicenseAgreements
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Number} [limitTerritories] maximum number of related territories returned (when they are included)
     * @param {module:api/EndUserLicenseAgreementsApi~endUserLicenseAgreementsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndUserLicenseAgreementResponse}
     */
    endUserLicenseAgreementsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endUserLicenseAgreementsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[endUserLicenseAgreements]': this.apiClient.buildCollectionParam(opts['fieldsEndUserLicenseAgreements'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'limit[territories]': opts['limitTerritories']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndUserLicenseAgreementResponse;
      return this.apiClient.callApi(
        '/v1/endUserLicenseAgreements/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the endUserLicenseAgreementsTerritoriesGetToManyRelated operation.
     * @callback module:api/EndUserLicenseAgreementsApi~endUserLicenseAgreementsTerritoriesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TerritoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/EndUserLicenseAgreementsApi~endUserLicenseAgreementsTerritoriesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TerritoriesResponse}
     */
    endUserLicenseAgreementsTerritoriesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endUserLicenseAgreementsTerritoriesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TerritoriesResponse;
      return this.apiClient.callApi(
        '/v1/endUserLicenseAgreements/{id}/territories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the endUserLicenseAgreementsUpdateInstance operation.
     * @callback module:api/EndUserLicenseAgreementsApi~endUserLicenseAgreementsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndUserLicenseAgreementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/EndUserLicenseAgreementUpdateRequest} endUserLicenseAgreementUpdateRequest EndUserLicenseAgreement representation
     * @param {module:api/EndUserLicenseAgreementsApi~endUserLicenseAgreementsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndUserLicenseAgreementResponse}
     */
    endUserLicenseAgreementsUpdateInstance(id, endUserLicenseAgreementUpdateRequest, callback) {
      let postBody = endUserLicenseAgreementUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endUserLicenseAgreementsUpdateInstance");
      }
      // verify the required parameter 'endUserLicenseAgreementUpdateRequest' is set
      if (endUserLicenseAgreementUpdateRequest === undefined || endUserLicenseAgreementUpdateRequest === null) {
        throw new Error("Missing the required parameter 'endUserLicenseAgreementUpdateRequest' when calling endUserLicenseAgreementsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EndUserLicenseAgreementResponse;
      return this.apiClient.callApi(
        '/v1/endUserLicenseAgreements/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
