/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AgeRatingDeclarationResponse from '../model/AgeRatingDeclarationResponse';
import AppStoreReviewDetailResponse from '../model/AppStoreReviewDetailResponse';
import AppStoreVersionBuildLinkageRequest from '../model/AppStoreVersionBuildLinkageRequest';
import AppStoreVersionBuildLinkageResponse from '../model/AppStoreVersionBuildLinkageResponse';
import AppStoreVersionCreateRequest from '../model/AppStoreVersionCreateRequest';
import AppStoreVersionLocalizationsResponse from '../model/AppStoreVersionLocalizationsResponse';
import AppStoreVersionPhasedReleaseResponse from '../model/AppStoreVersionPhasedReleaseResponse';
import AppStoreVersionResponse from '../model/AppStoreVersionResponse';
import AppStoreVersionSubmissionResponse from '../model/AppStoreVersionSubmissionResponse';
import AppStoreVersionUpdateRequest from '../model/AppStoreVersionUpdateRequest';
import BuildResponse from '../model/BuildResponse';
import ErrorResponse from '../model/ErrorResponse';
import IdfaDeclarationResponse from '../model/IdfaDeclarationResponse';
import RoutingAppCoverageResponse from '../model/RoutingAppCoverageResponse';

/**
* AppStoreVersions service.
* @module api/AppStoreVersionsApi
* @version 1.4.1
*/
export default class AppStoreVersionsApi {

    /**
    * Constructs a new AppStoreVersionsApi. 
    * @alias module:api/AppStoreVersionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appStoreVersionsAgeRatingDeclarationGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAgeRatingDeclarationGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgeRatingDeclarationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAgeRatingDeclarations] the fields to include for returned resources of type ageRatingDeclarations
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAgeRatingDeclarationGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgeRatingDeclarationResponse}
     */
    appStoreVersionsAgeRatingDeclarationGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAgeRatingDeclarationGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ageRatingDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAgeRatingDeclarations'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgeRatingDeclarationResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/ageRatingDeclaration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreReviewDetailGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreReviewDetailGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreReviewDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreReviewDetails] the fields to include for returned resources of type appStoreReviewDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAppStoreReviewAttachments] the fields to include for returned resources of type appStoreReviewAttachments
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreReviewDetailGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreReviewDetailResponse}
     */
    appStoreVersionsAppStoreReviewDetailGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreReviewDetailGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreReviewDetails'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[appStoreReviewAttachments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreReviewAttachments'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreReviewDetailResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/appStoreReviewDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionLocalizations] the fields to include for returned resources of type appStoreVersionLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionLocalizationsResponse}
     */
    appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersionLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionLocalizations'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/appStoreVersionLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionPhasedReleaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionPhasedReleases] the fields to include for returned resources of type appStoreVersionPhasedReleases
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionPhasedReleaseResponse}
     */
    appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersionPhasedReleases]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionPhasedReleases'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionPhasedReleaseResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionSubmissionGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionSubmissions] the fields to include for returned resources of type appStoreVersionSubmissions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionSubmissionResponse}
     */
    appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionSubmissionGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[appStoreVersionSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionSubmissions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionSubmissionResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/appStoreVersionSubmission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsBuildGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsBuildGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsBuildGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildResponse}
     */
    appStoreVersionsBuildGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsBuildGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/build', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsBuildGetToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsBuildGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionBuildLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsBuildGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionBuildLinkageResponse}
     */
    appStoreVersionsBuildGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsBuildGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionBuildLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/build', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsBuildUpdateToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsBuildUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppStoreVersionBuildLinkageRequest} appStoreVersionBuildLinkageRequest Related linkage
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsBuildUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appStoreVersionsBuildUpdateToOneRelationship(id, appStoreVersionBuildLinkageRequest, callback) {
      let postBody = appStoreVersionBuildLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsBuildUpdateToOneRelationship");
      }
      // verify the required parameter 'appStoreVersionBuildLinkageRequest' is set
      if (appStoreVersionBuildLinkageRequest === undefined || appStoreVersionBuildLinkageRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionBuildLinkageRequest' when calling appStoreVersionsBuildUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/build', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsCreateInstance operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppStoreVersionCreateRequest} appStoreVersionCreateRequest AppStoreVersion representation
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionResponse}
     */
    appStoreVersionsCreateInstance(appStoreVersionCreateRequest, callback) {
      let postBody = appStoreVersionCreateRequest;
      // verify the required parameter 'appStoreVersionCreateRequest' is set
      if (appStoreVersionCreateRequest === undefined || appStoreVersionCreateRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionCreateRequest' when calling appStoreVersionsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsDeleteInstance operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appStoreVersionsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsGetInstance operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionLocalizations] the fields to include for returned resources of type appStoreVersionLocalizations
     * @param {Array.<module:model/String>} [fieldsIdfaDeclarations] the fields to include for returned resources of type idfaDeclarations
     * @param {Array.<module:model/String>} [fieldsRoutingAppCoverages] the fields to include for returned resources of type routingAppCoverages
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionPhasedReleases] the fields to include for returned resources of type appStoreVersionPhasedReleases
     * @param {Array.<module:model/String>} [fieldsAgeRatingDeclarations] the fields to include for returned resources of type ageRatingDeclarations
     * @param {Array.<module:model/String>} [fieldsAppStoreReviewDetails] the fields to include for returned resources of type appStoreReviewDetails
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionSubmissions] the fields to include for returned resources of type appStoreVersionSubmissions
     * @param {Number} [limitAppStoreVersionLocalizations] maximum number of related appStoreVersionLocalizations returned (when they are included)
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionResponse}
     */
    appStoreVersionsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[appStoreVersionLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionLocalizations'], 'csv'),
        'fields[idfaDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsIdfaDeclarations'], 'csv'),
        'fields[routingAppCoverages]': this.apiClient.buildCollectionParam(opts['fieldsRoutingAppCoverages'], 'csv'),
        'fields[appStoreVersionPhasedReleases]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionPhasedReleases'], 'csv'),
        'fields[ageRatingDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAgeRatingDeclarations'], 'csv'),
        'fields[appStoreReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreReviewDetails'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[appStoreVersionSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionSubmissions'], 'csv'),
        'limit[appStoreVersionLocalizations]': opts['limitAppStoreVersionLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsIdfaDeclarationGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsIdfaDeclarationGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdfaDeclarationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsIdfaDeclarations] the fields to include for returned resources of type idfaDeclarations
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsIdfaDeclarationGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdfaDeclarationResponse}
     */
    appStoreVersionsIdfaDeclarationGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsIdfaDeclarationGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[idfaDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsIdfaDeclarations'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IdfaDeclarationResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/idfaDeclaration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsRoutingAppCoverageGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsRoutingAppCoverageGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutingAppCoverageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsRoutingAppCoverages] the fields to include for returned resources of type routingAppCoverages
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsRoutingAppCoverageGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutingAppCoverageResponse}
     */
    appStoreVersionsRoutingAppCoverageGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsRoutingAppCoverageGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[routingAppCoverages]': this.apiClient.buildCollectionParam(opts['fieldsRoutingAppCoverages'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoutingAppCoverageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/routingAppCoverage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsUpdateInstance operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppStoreVersionUpdateRequest} appStoreVersionUpdateRequest AppStoreVersion representation
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionResponse}
     */
    appStoreVersionsUpdateInstance(id, appStoreVersionUpdateRequest, callback) {
      let postBody = appStoreVersionUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsUpdateInstance");
      }
      // verify the required parameter 'appStoreVersionUpdateRequest' is set
      if (appStoreVersionUpdateRequest === undefined || appStoreVersionUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionUpdateRequest' when calling appStoreVersionsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
