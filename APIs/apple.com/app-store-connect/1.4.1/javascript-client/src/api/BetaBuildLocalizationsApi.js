/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BetaBuildLocalizationCreateRequest from '../model/BetaBuildLocalizationCreateRequest';
import BetaBuildLocalizationResponse from '../model/BetaBuildLocalizationResponse';
import BetaBuildLocalizationUpdateRequest from '../model/BetaBuildLocalizationUpdateRequest';
import BetaBuildLocalizationsResponse from '../model/BetaBuildLocalizationsResponse';
import BuildResponse from '../model/BuildResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* BetaBuildLocalizations service.
* @module api/BetaBuildLocalizationsApi
* @version 1.4.1
*/
export default class BetaBuildLocalizationsApi {

    /**
    * Constructs a new BetaBuildLocalizationsApi. 
    * @alias module:api/BetaBuildLocalizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the betaBuildLocalizationsBuildGetToOneRelated operation.
     * @callback module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsBuildGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsBuildGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildResponse}
     */
    betaBuildLocalizationsBuildGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaBuildLocalizationsBuildGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildResponse;
      return this.apiClient.callApi(
        '/v1/betaBuildLocalizations/{id}/build', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaBuildLocalizationsCreateInstance operation.
     * @callback module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaBuildLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BetaBuildLocalizationCreateRequest} betaBuildLocalizationCreateRequest BetaBuildLocalization representation
     * @param {module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaBuildLocalizationResponse}
     */
    betaBuildLocalizationsCreateInstance(betaBuildLocalizationCreateRequest, callback) {
      let postBody = betaBuildLocalizationCreateRequest;
      // verify the required parameter 'betaBuildLocalizationCreateRequest' is set
      if (betaBuildLocalizationCreateRequest === undefined || betaBuildLocalizationCreateRequest === null) {
        throw new Error("Missing the required parameter 'betaBuildLocalizationCreateRequest' when calling betaBuildLocalizationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BetaBuildLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/betaBuildLocalizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaBuildLocalizationsDeleteInstance operation.
     * @callback module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaBuildLocalizationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaBuildLocalizationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaBuildLocalizations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaBuildLocalizationsGetCollection operation.
     * @callback module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaBuildLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterLocale] filter by attribute 'locale'
     * @param {Array.<String>} [filterBuild] filter by id(s) of related 'build'
     * @param {Array.<module:model/String>} [fieldsBetaBuildLocalizations] the fields to include for returned resources of type betaBuildLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaBuildLocalizationsResponse}
     */
    betaBuildLocalizationsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[locale]': this.apiClient.buildCollectionParam(opts['filterLocale'], 'csv'),
        'filter[build]': this.apiClient.buildCollectionParam(opts['filterBuild'], 'csv'),
        'fields[betaBuildLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaBuildLocalizations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaBuildLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/betaBuildLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaBuildLocalizationsGetInstance operation.
     * @callback module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaBuildLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaBuildLocalizations] the fields to include for returned resources of type betaBuildLocalizations
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaBuildLocalizationResponse}
     */
    betaBuildLocalizationsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaBuildLocalizationsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaBuildLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaBuildLocalizations'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaBuildLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/betaBuildLocalizations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaBuildLocalizationsUpdateInstance operation.
     * @callback module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaBuildLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BetaBuildLocalizationUpdateRequest} betaBuildLocalizationUpdateRequest BetaBuildLocalization representation
     * @param {module:api/BetaBuildLocalizationsApi~betaBuildLocalizationsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaBuildLocalizationResponse}
     */
    betaBuildLocalizationsUpdateInstance(id, betaBuildLocalizationUpdateRequest, callback) {
      let postBody = betaBuildLocalizationUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaBuildLocalizationsUpdateInstance");
      }
      // verify the required parameter 'betaBuildLocalizationUpdateRequest' is set
      if (betaBuildLocalizationUpdateRequest === undefined || betaBuildLocalizationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'betaBuildLocalizationUpdateRequest' when calling betaBuildLocalizationsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BetaBuildLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/betaBuildLocalizations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
