/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BetaAppReviewSubmissionCreateRequest from '../model/BetaAppReviewSubmissionCreateRequest';
import BetaAppReviewSubmissionResponse from '../model/BetaAppReviewSubmissionResponse';
import BetaAppReviewSubmissionsResponse from '../model/BetaAppReviewSubmissionsResponse';
import BuildResponse from '../model/BuildResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* BetaAppReviewSubmissions service.
* @module api/BetaAppReviewSubmissionsApi
* @version 1.4.1
*/
export default class BetaAppReviewSubmissionsApi {

    /**
    * Constructs a new BetaAppReviewSubmissionsApi. 
    * @alias module:api/BetaAppReviewSubmissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the betaAppReviewSubmissionsBuildGetToOneRelated operation.
     * @callback module:api/BetaAppReviewSubmissionsApi~betaAppReviewSubmissionsBuildGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {module:api/BetaAppReviewSubmissionsApi~betaAppReviewSubmissionsBuildGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildResponse}
     */
    betaAppReviewSubmissionsBuildGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaAppReviewSubmissionsBuildGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildResponse;
      return this.apiClient.callApi(
        '/v1/betaAppReviewSubmissions/{id}/build', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaAppReviewSubmissionsCreateInstance operation.
     * @callback module:api/BetaAppReviewSubmissionsApi~betaAppReviewSubmissionsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaAppReviewSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BetaAppReviewSubmissionCreateRequest} betaAppReviewSubmissionCreateRequest BetaAppReviewSubmission representation
     * @param {module:api/BetaAppReviewSubmissionsApi~betaAppReviewSubmissionsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaAppReviewSubmissionResponse}
     */
    betaAppReviewSubmissionsCreateInstance(betaAppReviewSubmissionCreateRequest, callback) {
      let postBody = betaAppReviewSubmissionCreateRequest;
      // verify the required parameter 'betaAppReviewSubmissionCreateRequest' is set
      if (betaAppReviewSubmissionCreateRequest === undefined || betaAppReviewSubmissionCreateRequest === null) {
        throw new Error("Missing the required parameter 'betaAppReviewSubmissionCreateRequest' when calling betaAppReviewSubmissionsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BetaAppReviewSubmissionResponse;
      return this.apiClient.callApi(
        '/v1/betaAppReviewSubmissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaAppReviewSubmissionsGetCollection operation.
     * @callback module:api/BetaAppReviewSubmissionsApi~betaAppReviewSubmissionsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaAppReviewSubmissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<String>} filterBuild filter by id(s) of related 'build'
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterBetaReviewState] filter by attribute 'betaReviewState'
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewSubmissions] the fields to include for returned resources of type betaAppReviewSubmissions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {module:api/BetaAppReviewSubmissionsApi~betaAppReviewSubmissionsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaAppReviewSubmissionsResponse}
     */
    betaAppReviewSubmissionsGetCollection(filterBuild, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterBuild' is set
      if (filterBuild === undefined || filterBuild === null) {
        throw new Error("Missing the required parameter 'filterBuild' when calling betaAppReviewSubmissionsGetCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter[betaReviewState]': this.apiClient.buildCollectionParam(opts['filterBetaReviewState'], 'csv'),
        'filter[build]': this.apiClient.buildCollectionParam(filterBuild, 'csv'),
        'fields[betaAppReviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewSubmissions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaAppReviewSubmissionsResponse;
      return this.apiClient.callApi(
        '/v1/betaAppReviewSubmissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaAppReviewSubmissionsGetInstance operation.
     * @callback module:api/BetaAppReviewSubmissionsApi~betaAppReviewSubmissionsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaAppReviewSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewSubmissions] the fields to include for returned resources of type betaAppReviewSubmissions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {module:api/BetaAppReviewSubmissionsApi~betaAppReviewSubmissionsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaAppReviewSubmissionResponse}
     */
    betaAppReviewSubmissionsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaAppReviewSubmissionsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaAppReviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewSubmissions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaAppReviewSubmissionResponse;
      return this.apiClient.callApi(
        '/v1/betaAppReviewSubmissions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
