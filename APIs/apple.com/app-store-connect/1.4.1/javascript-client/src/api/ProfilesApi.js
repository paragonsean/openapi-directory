/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BundleIdResponse from '../model/BundleIdResponse';
import CertificatesResponse from '../model/CertificatesResponse';
import DevicesResponse from '../model/DevicesResponse';
import ErrorResponse from '../model/ErrorResponse';
import ProfileCreateRequest from '../model/ProfileCreateRequest';
import ProfileResponse from '../model/ProfileResponse';
import ProfilesResponse from '../model/ProfilesResponse';

/**
* Profiles service.
* @module api/ProfilesApi
* @version 1.4.1
*/
export default class ProfilesApi {

    /**
    * Constructs a new ProfilesApi. 
    * @alias module:api/ProfilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the profilesBundleIdGetToOneRelated operation.
     * @callback module:api/ProfilesApi~profilesBundleIdGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BundleIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBundleIds] the fields to include for returned resources of type bundleIds
     * @param {module:api/ProfilesApi~profilesBundleIdGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BundleIdResponse}
     */
    profilesBundleIdGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesBundleIdGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[bundleIds]': this.apiClient.buildCollectionParam(opts['fieldsBundleIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BundleIdResponse;
      return this.apiClient.callApi(
        '/v1/profiles/{id}/bundleId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesCertificatesGetToManyRelated operation.
     * @callback module:api/ProfilesApi~profilesCertificatesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCertificates] the fields to include for returned resources of type certificates
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/ProfilesApi~profilesCertificatesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificatesResponse}
     */
    profilesCertificatesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesCertificatesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[certificates]': this.apiClient.buildCollectionParam(opts['fieldsCertificates'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificatesResponse;
      return this.apiClient.callApi(
        '/v1/profiles/{id}/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesCreateInstance operation.
     * @callback module:api/ProfilesApi~profilesCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProfileCreateRequest} profileCreateRequest Profile representation
     * @param {module:api/ProfilesApi~profilesCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResponse}
     */
    profilesCreateInstance(profileCreateRequest, callback) {
      let postBody = profileCreateRequest;
      // verify the required parameter 'profileCreateRequest' is set
      if (profileCreateRequest === undefined || profileCreateRequest === null) {
        throw new Error("Missing the required parameter 'profileCreateRequest' when calling profilesCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProfileResponse;
      return this.apiClient.callApi(
        '/v1/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesDeleteInstance operation.
     * @callback module:api/ProfilesApi~profilesDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/ProfilesApi~profilesDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    profilesDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/profiles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesDevicesGetToManyRelated operation.
     * @callback module:api/ProfilesApi~profilesDevicesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsDevices] the fields to include for returned resources of type devices
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/ProfilesApi~profilesDevicesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicesResponse}
     */
    profilesDevicesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesDevicesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[devices]': this.apiClient.buildCollectionParam(opts['fieldsDevices'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DevicesResponse;
      return this.apiClient.callApi(
        '/v1/profiles/{id}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesGetCollection operation.
     * @callback module:api/ProfilesApi~profilesGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterName] filter by attribute 'name'
     * @param {Array.<module:model/String>} [filterProfileState] filter by attribute 'profileState'
     * @param {Array.<module:model/String>} [filterProfileType] filter by attribute 'profileType'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsProfiles] the fields to include for returned resources of type profiles
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsCertificates] the fields to include for returned resources of type certificates
     * @param {Array.<module:model/String>} [fieldsDevices] the fields to include for returned resources of type devices
     * @param {Array.<module:model/String>} [fieldsBundleIds] the fields to include for returned resources of type bundleIds
     * @param {Number} [limitCertificates] maximum number of related certificates returned (when they are included)
     * @param {Number} [limitDevices] maximum number of related devices returned (when they are included)
     * @param {module:api/ProfilesApi~profilesGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfilesResponse}
     */
    profilesGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[name]': this.apiClient.buildCollectionParam(opts['filterName'], 'csv'),
        'filter[profileState]': this.apiClient.buildCollectionParam(opts['filterProfileState'], 'csv'),
        'filter[profileType]': this.apiClient.buildCollectionParam(opts['filterProfileType'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[profiles]': this.apiClient.buildCollectionParam(opts['fieldsProfiles'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[certificates]': this.apiClient.buildCollectionParam(opts['fieldsCertificates'], 'csv'),
        'fields[devices]': this.apiClient.buildCollectionParam(opts['fieldsDevices'], 'csv'),
        'fields[bundleIds]': this.apiClient.buildCollectionParam(opts['fieldsBundleIds'], 'csv'),
        'limit[certificates]': opts['limitCertificates'],
        'limit[devices]': opts['limitDevices']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfilesResponse;
      return this.apiClient.callApi(
        '/v1/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesGetInstance operation.
     * @callback module:api/ProfilesApi~profilesGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsProfiles] the fields to include for returned resources of type profiles
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsCertificates] the fields to include for returned resources of type certificates
     * @param {Array.<module:model/String>} [fieldsDevices] the fields to include for returned resources of type devices
     * @param {Array.<module:model/String>} [fieldsBundleIds] the fields to include for returned resources of type bundleIds
     * @param {Number} [limitCertificates] maximum number of related certificates returned (when they are included)
     * @param {Number} [limitDevices] maximum number of related devices returned (when they are included)
     * @param {module:api/ProfilesApi~profilesGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResponse}
     */
    profilesGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[profiles]': this.apiClient.buildCollectionParam(opts['fieldsProfiles'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[certificates]': this.apiClient.buildCollectionParam(opts['fieldsCertificates'], 'csv'),
        'fields[devices]': this.apiClient.buildCollectionParam(opts['fieldsDevices'], 'csv'),
        'fields[bundleIds]': this.apiClient.buildCollectionParam(opts['fieldsBundleIds'], 'csv'),
        'limit[certificates]': opts['limitCertificates'],
        'limit[devices]': opts['limitDevices']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfileResponse;
      return this.apiClient.callApi(
        '/v1/profiles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
