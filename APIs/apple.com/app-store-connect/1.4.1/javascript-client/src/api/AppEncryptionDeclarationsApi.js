/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppEncryptionDeclarationBuildsLinkagesRequest from '../model/AppEncryptionDeclarationBuildsLinkagesRequest';
import AppEncryptionDeclarationResponse from '../model/AppEncryptionDeclarationResponse';
import AppEncryptionDeclarationsResponse from '../model/AppEncryptionDeclarationsResponse';
import AppResponse from '../model/AppResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppEncryptionDeclarations service.
* @module api/AppEncryptionDeclarationsApi
* @version 1.4.1
*/
export default class AppEncryptionDeclarationsApi {

    /**
    * Constructs a new AppEncryptionDeclarationsApi. 
    * @alias module:api/AppEncryptionDeclarationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appEncryptionDeclarationsAppGetToOneRelated operation.
     * @callback module:api/AppEncryptionDeclarationsApi~appEncryptionDeclarationsAppGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {module:api/AppEncryptionDeclarationsApi~appEncryptionDeclarationsAppGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    appEncryptionDeclarationsAppGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEncryptionDeclarationsAppGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/v1/appEncryptionDeclarations/{id}/app', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEncryptionDeclarationsBuildsCreateToManyRelationship operation.
     * @callback module:api/AppEncryptionDeclarationsApi~appEncryptionDeclarationsBuildsCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppEncryptionDeclarationBuildsLinkagesRequest} appEncryptionDeclarationBuildsLinkagesRequest List of related linkages
     * @param {module:api/AppEncryptionDeclarationsApi~appEncryptionDeclarationsBuildsCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appEncryptionDeclarationsBuildsCreateToManyRelationship(id, appEncryptionDeclarationBuildsLinkagesRequest, callback) {
      let postBody = appEncryptionDeclarationBuildsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEncryptionDeclarationsBuildsCreateToManyRelationship");
      }
      // verify the required parameter 'appEncryptionDeclarationBuildsLinkagesRequest' is set
      if (appEncryptionDeclarationBuildsLinkagesRequest === undefined || appEncryptionDeclarationBuildsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'appEncryptionDeclarationBuildsLinkagesRequest' when calling appEncryptionDeclarationsBuildsCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appEncryptionDeclarations/{id}/relationships/builds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEncryptionDeclarationsGetCollection operation.
     * @callback module:api/AppEncryptionDeclarationsApi~appEncryptionDeclarationsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEncryptionDeclarationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {Array.<String>} [filterApp] filter by id(s) of related 'app'
     * @param {Array.<String>} [filterBuilds] filter by id(s) of related 'builds'
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {module:api/AppEncryptionDeclarationsApi~appEncryptionDeclarationsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEncryptionDeclarationsResponse}
     */
    appEncryptionDeclarationsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[app]': this.apiClient.buildCollectionParam(opts['filterApp'], 'csv'),
        'filter[builds]': this.apiClient.buildCollectionParam(opts['filterBuilds'], 'csv'),
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEncryptionDeclarationsResponse;
      return this.apiClient.callApi(
        '/v1/appEncryptionDeclarations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEncryptionDeclarationsGetInstance operation.
     * @callback module:api/AppEncryptionDeclarationsApi~appEncryptionDeclarationsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEncryptionDeclarationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {module:api/AppEncryptionDeclarationsApi~appEncryptionDeclarationsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEncryptionDeclarationResponse}
     */
    appEncryptionDeclarationsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEncryptionDeclarationsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEncryptionDeclarationResponse;
      return this.apiClient.callApi(
        '/v1/appEncryptionDeclarations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
