/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppsResponse from '../model/AppsResponse';
import BetaGroupsResponse from '../model/BetaGroupsResponse';
import BetaTesterAppsLinkagesRequest from '../model/BetaTesterAppsLinkagesRequest';
import BetaTesterAppsLinkagesResponse from '../model/BetaTesterAppsLinkagesResponse';
import BetaTesterBetaGroupsLinkagesRequest from '../model/BetaTesterBetaGroupsLinkagesRequest';
import BetaTesterBetaGroupsLinkagesResponse from '../model/BetaTesterBetaGroupsLinkagesResponse';
import BetaTesterBuildsLinkagesRequest from '../model/BetaTesterBuildsLinkagesRequest';
import BetaTesterBuildsLinkagesResponse from '../model/BetaTesterBuildsLinkagesResponse';
import BetaTesterCreateRequest from '../model/BetaTesterCreateRequest';
import BetaTesterResponse from '../model/BetaTesterResponse';
import BetaTestersResponse from '../model/BetaTestersResponse';
import BuildsResponse from '../model/BuildsResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* BetaTesters service.
* @module api/BetaTestersApi
* @version 1.4.1
*/
export default class BetaTestersApi {

    /**
    * Constructs a new BetaTestersApi. 
    * @alias module:api/BetaTestersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the betaTestersAppsDeleteToManyRelationship operation.
     * @callback module:api/BetaTestersApi~betaTestersAppsDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BetaTesterAppsLinkagesRequest} betaTesterAppsLinkagesRequest List of related linkages
     * @param {module:api/BetaTestersApi~betaTestersAppsDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaTestersAppsDeleteToManyRelationship(id, betaTesterAppsLinkagesRequest, callback) {
      let postBody = betaTesterAppsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersAppsDeleteToManyRelationship");
      }
      // verify the required parameter 'betaTesterAppsLinkagesRequest' is set
      if (betaTesterAppsLinkagesRequest === undefined || betaTesterAppsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'betaTesterAppsLinkagesRequest' when calling betaTestersAppsDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/relationships/apps', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersAppsGetToManyRelated operation.
     * @callback module:api/BetaTestersApi~betaTestersAppsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BetaTestersApi~betaTestersAppsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsResponse}
     */
    betaTestersAppsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersAppsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsResponse;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersAppsGetToManyRelationship operation.
     * @callback module:api/BetaTestersApi~betaTestersAppsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaTesterAppsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BetaTestersApi~betaTestersAppsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaTesterAppsLinkagesResponse}
     */
    betaTestersAppsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersAppsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaTesterAppsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/relationships/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersBetaGroupsCreateToManyRelationship operation.
     * @callback module:api/BetaTestersApi~betaTestersBetaGroupsCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BetaTesterBetaGroupsLinkagesRequest} betaTesterBetaGroupsLinkagesRequest List of related linkages
     * @param {module:api/BetaTestersApi~betaTestersBetaGroupsCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaTestersBetaGroupsCreateToManyRelationship(id, betaTesterBetaGroupsLinkagesRequest, callback) {
      let postBody = betaTesterBetaGroupsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersBetaGroupsCreateToManyRelationship");
      }
      // verify the required parameter 'betaTesterBetaGroupsLinkagesRequest' is set
      if (betaTesterBetaGroupsLinkagesRequest === undefined || betaTesterBetaGroupsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'betaTesterBetaGroupsLinkagesRequest' when calling betaTestersBetaGroupsCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/relationships/betaGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersBetaGroupsDeleteToManyRelationship operation.
     * @callback module:api/BetaTestersApi~betaTestersBetaGroupsDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BetaTesterBetaGroupsLinkagesRequest} betaTesterBetaGroupsLinkagesRequest List of related linkages
     * @param {module:api/BetaTestersApi~betaTestersBetaGroupsDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaTestersBetaGroupsDeleteToManyRelationship(id, betaTesterBetaGroupsLinkagesRequest, callback) {
      let postBody = betaTesterBetaGroupsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersBetaGroupsDeleteToManyRelationship");
      }
      // verify the required parameter 'betaTesterBetaGroupsLinkagesRequest' is set
      if (betaTesterBetaGroupsLinkagesRequest === undefined || betaTesterBetaGroupsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'betaTesterBetaGroupsLinkagesRequest' when calling betaTestersBetaGroupsDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/relationships/betaGroups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersBetaGroupsGetToManyRelated operation.
     * @callback module:api/BetaTestersApi~betaTestersBetaGroupsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaGroups] the fields to include for returned resources of type betaGroups
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BetaTestersApi~betaTestersBetaGroupsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaGroupsResponse}
     */
    betaTestersBetaGroupsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersBetaGroupsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaGroups]': this.apiClient.buildCollectionParam(opts['fieldsBetaGroups'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaGroupsResponse;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/betaGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersBetaGroupsGetToManyRelationship operation.
     * @callback module:api/BetaTestersApi~betaTestersBetaGroupsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaTesterBetaGroupsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BetaTestersApi~betaTestersBetaGroupsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaTesterBetaGroupsLinkagesResponse}
     */
    betaTestersBetaGroupsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersBetaGroupsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaTesterBetaGroupsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/relationships/betaGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersBuildsCreateToManyRelationship operation.
     * @callback module:api/BetaTestersApi~betaTestersBuildsCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BetaTesterBuildsLinkagesRequest} betaTesterBuildsLinkagesRequest List of related linkages
     * @param {module:api/BetaTestersApi~betaTestersBuildsCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaTestersBuildsCreateToManyRelationship(id, betaTesterBuildsLinkagesRequest, callback) {
      let postBody = betaTesterBuildsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersBuildsCreateToManyRelationship");
      }
      // verify the required parameter 'betaTesterBuildsLinkagesRequest' is set
      if (betaTesterBuildsLinkagesRequest === undefined || betaTesterBuildsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'betaTesterBuildsLinkagesRequest' when calling betaTestersBuildsCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/relationships/builds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersBuildsDeleteToManyRelationship operation.
     * @callback module:api/BetaTestersApi~betaTestersBuildsDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BetaTesterBuildsLinkagesRequest} betaTesterBuildsLinkagesRequest List of related linkages
     * @param {module:api/BetaTestersApi~betaTestersBuildsDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaTestersBuildsDeleteToManyRelationship(id, betaTesterBuildsLinkagesRequest, callback) {
      let postBody = betaTesterBuildsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersBuildsDeleteToManyRelationship");
      }
      // verify the required parameter 'betaTesterBuildsLinkagesRequest' is set
      if (betaTesterBuildsLinkagesRequest === undefined || betaTesterBuildsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'betaTesterBuildsLinkagesRequest' when calling betaTestersBuildsDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/relationships/builds', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersBuildsGetToManyRelated operation.
     * @callback module:api/BetaTestersApi~betaTestersBuildsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BetaTestersApi~betaTestersBuildsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsResponse}
     */
    betaTestersBuildsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersBuildsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsResponse;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersBuildsGetToManyRelationship operation.
     * @callback module:api/BetaTestersApi~betaTestersBuildsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaTesterBuildsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BetaTestersApi~betaTestersBuildsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaTesterBuildsLinkagesResponse}
     */
    betaTestersBuildsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersBuildsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaTesterBuildsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/relationships/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersCreateInstance operation.
     * @callback module:api/BetaTestersApi~betaTestersCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaTesterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BetaTesterCreateRequest} betaTesterCreateRequest BetaTester representation
     * @param {module:api/BetaTestersApi~betaTestersCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaTesterResponse}
     */
    betaTestersCreateInstance(betaTesterCreateRequest, callback) {
      let postBody = betaTesterCreateRequest;
      // verify the required parameter 'betaTesterCreateRequest' is set
      if (betaTesterCreateRequest === undefined || betaTesterCreateRequest === null) {
        throw new Error("Missing the required parameter 'betaTesterCreateRequest' when calling betaTestersCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BetaTesterResponse;
      return this.apiClient.callApi(
        '/v1/betaTesters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersDeleteInstance operation.
     * @callback module:api/BetaTestersApi~betaTestersDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BetaTestersApi~betaTestersDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaTestersDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersGetCollection operation.
     * @callback module:api/BetaTestersApi~betaTestersGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaTestersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterEmail] filter by attribute 'email'
     * @param {Array.<String>} [filterFirstName] filter by attribute 'firstName'
     * @param {Array.<module:model/String>} [filterInviteType] filter by attribute 'inviteType'
     * @param {Array.<String>} [filterLastName] filter by attribute 'lastName'
     * @param {Array.<String>} [filterApps] filter by id(s) of related 'apps'
     * @param {Array.<String>} [filterBetaGroups] filter by id(s) of related 'betaGroups'
     * @param {Array.<String>} [filterBuilds] filter by id(s) of related 'builds'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsBetaGroups] the fields to include for returned resources of type betaGroups
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitApps] maximum number of related apps returned (when they are included)
     * @param {Number} [limitBetaGroups] maximum number of related betaGroups returned (when they are included)
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {module:api/BetaTestersApi~betaTestersGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaTestersResponse}
     */
    betaTestersGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[email]': this.apiClient.buildCollectionParam(opts['filterEmail'], 'csv'),
        'filter[firstName]': this.apiClient.buildCollectionParam(opts['filterFirstName'], 'csv'),
        'filter[inviteType]': this.apiClient.buildCollectionParam(opts['filterInviteType'], 'csv'),
        'filter[lastName]': this.apiClient.buildCollectionParam(opts['filterLastName'], 'csv'),
        'filter[apps]': this.apiClient.buildCollectionParam(opts['filterApps'], 'csv'),
        'filter[betaGroups]': this.apiClient.buildCollectionParam(opts['filterBetaGroups'], 'csv'),
        'filter[builds]': this.apiClient.buildCollectionParam(opts['filterBuilds'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[betaGroups]': this.apiClient.buildCollectionParam(opts['fieldsBetaGroups'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[apps]': opts['limitApps'],
        'limit[betaGroups]': opts['limitBetaGroups'],
        'limit[builds]': opts['limitBuilds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaTestersResponse;
      return this.apiClient.callApi(
        '/v1/betaTesters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersGetInstance operation.
     * @callback module:api/BetaTestersApi~betaTestersGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaTesterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Array.<module:model/String>} [fieldsBetaGroups] the fields to include for returned resources of type betaGroups
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limitApps] maximum number of related apps returned (when they are included)
     * @param {Number} [limitBetaGroups] maximum number of related betaGroups returned (when they are included)
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {module:api/BetaTestersApi~betaTestersGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaTesterResponse}
     */
    betaTestersGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'fields[betaGroups]': this.apiClient.buildCollectionParam(opts['fieldsBetaGroups'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit[apps]': opts['limitApps'],
        'limit[betaGroups]': opts['limitBetaGroups'],
        'limit[builds]': opts['limitBuilds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaTesterResponse;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
