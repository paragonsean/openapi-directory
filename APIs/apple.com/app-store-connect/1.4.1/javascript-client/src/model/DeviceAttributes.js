/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BundleIdPlatform from './BundleIdPlatform';

/**
 * The DeviceAttributes model module.
 * @module model/DeviceAttributes
 * @version 1.4.1
 */
class DeviceAttributes {
    /**
     * Constructs a new <code>DeviceAttributes</code>.
     * @alias module:model/DeviceAttributes
     */
    constructor() { 
        
        DeviceAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceAttributes} obj Optional instance to populate.
     * @return {module:model/DeviceAttributes} The populated <code>DeviceAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceAttributes();

            if (data.hasOwnProperty('addedDate')) {
                obj['addedDate'] = ApiClient.convertToType(data['addedDate'], 'Date');
            }
            if (data.hasOwnProperty('deviceClass')) {
                obj['deviceClass'] = ApiClient.convertToType(data['deviceClass'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = BundleIdPlatform.constructFromObject(data['platform']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('udid')) {
                obj['udid'] = ApiClient.convertToType(data['udid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceClass'] && !(typeof data['deviceClass'] === 'string' || data['deviceClass'] instanceof String)) {
            throw new Error("Expected the field `deviceClass` to be a primitive type in the JSON string but got " + data['deviceClass']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['udid'] && !(typeof data['udid'] === 'string' || data['udid'] instanceof String)) {
            throw new Error("Expected the field `udid` to be a primitive type in the JSON string but got " + data['udid']);
        }

        return true;
    }


}



/**
 * @member {Date} addedDate
 */
DeviceAttributes.prototype['addedDate'] = undefined;

/**
 * @member {module:model/DeviceAttributes.DeviceClassEnum} deviceClass
 */
DeviceAttributes.prototype['deviceClass'] = undefined;

/**
 * @member {String} model
 */
DeviceAttributes.prototype['model'] = undefined;

/**
 * @member {String} name
 */
DeviceAttributes.prototype['name'] = undefined;

/**
 * @member {module:model/BundleIdPlatform} platform
 */
DeviceAttributes.prototype['platform'] = undefined;

/**
 * @member {module:model/DeviceAttributes.StatusEnum} status
 */
DeviceAttributes.prototype['status'] = undefined;

/**
 * @member {String} udid
 */
DeviceAttributes.prototype['udid'] = undefined;





/**
 * Allowed values for the <code>deviceClass</code> property.
 * @enum {String}
 * @readonly
 */
DeviceAttributes['DeviceClassEnum'] = {

    /**
     * value: "APPLE_WATCH"
     * @const
     */
    "APPLE_WATCH": "APPLE_WATCH",

    /**
     * value: "IPAD"
     * @const
     */
    "IPAD": "IPAD",

    /**
     * value: "IPHONE"
     * @const
     */
    "IPHONE": "IPHONE",

    /**
     * value: "IPOD"
     * @const
     */
    "IPOD": "IPOD",

    /**
     * value: "APPLE_TV"
     * @const
     */
    "APPLE_TV": "APPLE_TV",

    /**
     * value: "MAC"
     * @const
     */
    "MAC": "MAC"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DeviceAttributes['StatusEnum'] = {

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};



export default DeviceAttributes;

