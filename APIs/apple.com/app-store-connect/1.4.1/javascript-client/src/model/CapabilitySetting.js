/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CapabilityOption from './CapabilityOption';

/**
 * The CapabilitySetting model module.
 * @module model/CapabilitySetting
 * @version 1.4.1
 */
class CapabilitySetting {
    /**
     * Constructs a new <code>CapabilitySetting</code>.
     * @alias module:model/CapabilitySetting
     */
    constructor() { 
        
        CapabilitySetting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CapabilitySetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CapabilitySetting} obj Optional instance to populate.
     * @return {module:model/CapabilitySetting} The populated <code>CapabilitySetting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CapabilitySetting();

            if (data.hasOwnProperty('allowedInstances')) {
                obj['allowedInstances'] = ApiClient.convertToType(data['allowedInstances'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabledByDefault')) {
                obj['enabledByDefault'] = ApiClient.convertToType(data['enabledByDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('minInstances')) {
                obj['minInstances'] = ApiClient.convertToType(data['minInstances'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [CapabilityOption]);
            }
            if (data.hasOwnProperty('visible')) {
                obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CapabilitySetting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CapabilitySetting</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allowedInstances'] && !(typeof data['allowedInstances'] === 'string' || data['allowedInstances'] instanceof String)) {
            throw new Error("Expected the field `allowedInstances` to be a primitive type in the JSON string but got " + data['allowedInstances']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                CapabilityOption.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/CapabilitySetting.AllowedInstancesEnum} allowedInstances
 */
CapabilitySetting.prototype['allowedInstances'] = undefined;

/**
 * @member {String} description
 */
CapabilitySetting.prototype['description'] = undefined;

/**
 * @member {Boolean} enabledByDefault
 */
CapabilitySetting.prototype['enabledByDefault'] = undefined;

/**
 * @member {module:model/CapabilitySetting.KeyEnum} key
 */
CapabilitySetting.prototype['key'] = undefined;

/**
 * @member {Number} minInstances
 */
CapabilitySetting.prototype['minInstances'] = undefined;

/**
 * @member {String} name
 */
CapabilitySetting.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/CapabilityOption>} options
 */
CapabilitySetting.prototype['options'] = undefined;

/**
 * @member {Boolean} visible
 */
CapabilitySetting.prototype['visible'] = undefined;





/**
 * Allowed values for the <code>allowedInstances</code> property.
 * @enum {String}
 * @readonly
 */
CapabilitySetting['AllowedInstancesEnum'] = {

    /**
     * value: "ENTRY"
     * @const
     */
    "ENTRY": "ENTRY",

    /**
     * value: "SINGLE"
     * @const
     */
    "SINGLE": "SINGLE",

    /**
     * value: "MULTIPLE"
     * @const
     */
    "MULTIPLE": "MULTIPLE"
};


/**
 * Allowed values for the <code>key</code> property.
 * @enum {String}
 * @readonly
 */
CapabilitySetting['KeyEnum'] = {

    /**
     * value: "ICLOUD_VERSION"
     * @const
     */
    "ICLOUD_VERSION": "ICLOUD_VERSION",

    /**
     * value: "DATA_PROTECTION_PERMISSION_LEVEL"
     * @const
     */
    "DATA_PROTECTION_PERMISSION_LEVEL": "DATA_PROTECTION_PERMISSION_LEVEL",

    /**
     * value: "APPLE_ID_AUTH_APP_CONSENT"
     * @const
     */
    "APPLE_ID_AUTH_APP_CONSENT": "APPLE_ID_AUTH_APP_CONSENT"
};



export default CapabilitySetting;

