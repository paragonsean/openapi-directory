/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageAsset from './ImageAsset';

/**
 * The BuildAttributes model module.
 * @module model/BuildAttributes
 * @version 1.4.1
 */
class BuildAttributes {
    /**
     * Constructs a new <code>BuildAttributes</code>.
     * @alias module:model/BuildAttributes
     */
    constructor() { 
        
        BuildAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildAttributes} obj Optional instance to populate.
     * @return {module:model/BuildAttributes} The populated <code>BuildAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildAttributes();

            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('expired')) {
                obj['expired'] = ApiClient.convertToType(data['expired'], 'Boolean');
            }
            if (data.hasOwnProperty('iconAssetToken')) {
                obj['iconAssetToken'] = ImageAsset.constructFromObject(data['iconAssetToken']);
            }
            if (data.hasOwnProperty('minOsVersion')) {
                obj['minOsVersion'] = ApiClient.convertToType(data['minOsVersion'], 'String');
            }
            if (data.hasOwnProperty('processingState')) {
                obj['processingState'] = ApiClient.convertToType(data['processingState'], 'String');
            }
            if (data.hasOwnProperty('uploadedDate')) {
                obj['uploadedDate'] = ApiClient.convertToType(data['uploadedDate'], 'Date');
            }
            if (data.hasOwnProperty('usesNonExemptEncryption')) {
                obj['usesNonExemptEncryption'] = ApiClient.convertToType(data['usesNonExemptEncryption'], 'Boolean');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildAttributes</code>.
     */
    static validateJSON(data) {
        // validate the optional field `iconAssetToken`
        if (data['iconAssetToken']) { // data not null
          ImageAsset.validateJSON(data['iconAssetToken']);
        }
        // ensure the json data is a string
        if (data['minOsVersion'] && !(typeof data['minOsVersion'] === 'string' || data['minOsVersion'] instanceof String)) {
            throw new Error("Expected the field `minOsVersion` to be a primitive type in the JSON string but got " + data['minOsVersion']);
        }
        // ensure the json data is a string
        if (data['processingState'] && !(typeof data['processingState'] === 'string' || data['processingState'] instanceof String)) {
            throw new Error("Expected the field `processingState` to be a primitive type in the JSON string but got " + data['processingState']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {Date} expirationDate
 */
BuildAttributes.prototype['expirationDate'] = undefined;

/**
 * @member {Boolean} expired
 */
BuildAttributes.prototype['expired'] = undefined;

/**
 * @member {module:model/ImageAsset} iconAssetToken
 */
BuildAttributes.prototype['iconAssetToken'] = undefined;

/**
 * @member {String} minOsVersion
 */
BuildAttributes.prototype['minOsVersion'] = undefined;

/**
 * @member {module:model/BuildAttributes.ProcessingStateEnum} processingState
 */
BuildAttributes.prototype['processingState'] = undefined;

/**
 * @member {Date} uploadedDate
 */
BuildAttributes.prototype['uploadedDate'] = undefined;

/**
 * @member {Boolean} usesNonExemptEncryption
 */
BuildAttributes.prototype['usesNonExemptEncryption'] = undefined;

/**
 * @member {String} version
 */
BuildAttributes.prototype['version'] = undefined;





/**
 * Allowed values for the <code>processingState</code> property.
 * @enum {String}
 * @readonly
 */
BuildAttributes['ProcessingStateEnum'] = {

    /**
     * value: "PROCESSING"
     * @const
     */
    "PROCESSING": "PROCESSING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID",

    /**
     * value: "VALID"
     * @const
     */
    "VALID": "VALID"
};



export default BuildAttributes;

