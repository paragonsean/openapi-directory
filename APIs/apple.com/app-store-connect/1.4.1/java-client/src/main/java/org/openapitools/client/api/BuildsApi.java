/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppEncryptionDeclarationResponse;
import org.openapitools.client.model.AppResponse;
import org.openapitools.client.model.AppStoreVersionResponse;
import org.openapitools.client.model.BetaAppReviewSubmissionResponse;
import org.openapitools.client.model.BetaBuildLocalizationsResponse;
import org.openapitools.client.model.BetaTestersResponse;
import org.openapitools.client.model.BuildAppEncryptionDeclarationLinkageRequest;
import org.openapitools.client.model.BuildAppEncryptionDeclarationLinkageResponse;
import org.openapitools.client.model.BuildBetaDetailResponse;
import org.openapitools.client.model.BuildBetaGroupsLinkagesRequest;
import org.openapitools.client.model.BuildIconsResponse;
import org.openapitools.client.model.BuildIndividualTestersLinkagesRequest;
import org.openapitools.client.model.BuildIndividualTestersLinkagesResponse;
import org.openapitools.client.model.BuildResponse;
import org.openapitools.client.model.BuildUpdateRequest;
import org.openapitools.client.model.BuildsResponse;
import org.openapitools.client.model.DiagnosticSignaturesResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PerfPowerMetricsResponse;
import org.openapitools.client.model.PrereleaseVersionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuildsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BuildsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuildsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for buildsAppEncryptionDeclarationGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsAppEncryptionDeclarationGetToOneRelatedCall(String id, List<String> fieldsAppEncryptionDeclarations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/appEncryptionDeclaration"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsAppEncryptionDeclarations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsAppEncryptionDeclarationGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsAppEncryptionDeclarations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsAppEncryptionDeclarationGetToOneRelated(Async)");
        }

        return buildsAppEncryptionDeclarationGetToOneRelatedCall(id, fieldsAppEncryptionDeclarations, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @return AppEncryptionDeclarationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppEncryptionDeclarationResponse buildsAppEncryptionDeclarationGetToOneRelated(String id, List<String> fieldsAppEncryptionDeclarations) throws ApiException {
        ApiResponse<AppEncryptionDeclarationResponse> localVarResp = buildsAppEncryptionDeclarationGetToOneRelatedWithHttpInfo(id, fieldsAppEncryptionDeclarations);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @return ApiResponse&lt;AppEncryptionDeclarationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppEncryptionDeclarationResponse> buildsAppEncryptionDeclarationGetToOneRelatedWithHttpInfo(String id, List<String> fieldsAppEncryptionDeclarations) throws ApiException {
        okhttp3.Call localVarCall = buildsAppEncryptionDeclarationGetToOneRelatedValidateBeforeCall(id, fieldsAppEncryptionDeclarations, null);
        Type localVarReturnType = new TypeToken<AppEncryptionDeclarationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsAppEncryptionDeclarationGetToOneRelatedAsync(String id, List<String> fieldsAppEncryptionDeclarations, final ApiCallback<AppEncryptionDeclarationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsAppEncryptionDeclarationGetToOneRelatedValidateBeforeCall(id, fieldsAppEncryptionDeclarations, _callback);
        Type localVarReturnType = new TypeToken<AppEncryptionDeclarationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsAppEncryptionDeclarationGetToOneRelationship
     * @param id the id of the requested resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related linkage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsAppEncryptionDeclarationGetToOneRelationshipCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/relationships/appEncryptionDeclaration"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsAppEncryptionDeclarationGetToOneRelationshipValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsAppEncryptionDeclarationGetToOneRelationship(Async)");
        }

        return buildsAppEncryptionDeclarationGetToOneRelationshipCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @return BuildAppEncryptionDeclarationLinkageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related linkage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BuildAppEncryptionDeclarationLinkageResponse buildsAppEncryptionDeclarationGetToOneRelationship(String id) throws ApiException {
        ApiResponse<BuildAppEncryptionDeclarationLinkageResponse> localVarResp = buildsAppEncryptionDeclarationGetToOneRelationshipWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @return ApiResponse&lt;BuildAppEncryptionDeclarationLinkageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related linkage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildAppEncryptionDeclarationLinkageResponse> buildsAppEncryptionDeclarationGetToOneRelationshipWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = buildsAppEncryptionDeclarationGetToOneRelationshipValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BuildAppEncryptionDeclarationLinkageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related linkage </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsAppEncryptionDeclarationGetToOneRelationshipAsync(String id, final ApiCallback<BuildAppEncryptionDeclarationLinkageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsAppEncryptionDeclarationGetToOneRelationshipValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BuildAppEncryptionDeclarationLinkageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsAppEncryptionDeclarationUpdateToOneRelationship
     * @param id the id of the requested resource (required)
     * @param buildAppEncryptionDeclarationLinkageRequest Related linkage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsAppEncryptionDeclarationUpdateToOneRelationshipCall(String id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildAppEncryptionDeclarationLinkageRequest;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/relationships/appEncryptionDeclaration"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsAppEncryptionDeclarationUpdateToOneRelationshipValidateBeforeCall(String id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsAppEncryptionDeclarationUpdateToOneRelationship(Async)");
        }

        // verify the required parameter 'buildAppEncryptionDeclarationLinkageRequest' is set
        if (buildAppEncryptionDeclarationLinkageRequest == null) {
            throw new ApiException("Missing the required parameter 'buildAppEncryptionDeclarationLinkageRequest' when calling buildsAppEncryptionDeclarationUpdateToOneRelationship(Async)");
        }

        return buildsAppEncryptionDeclarationUpdateToOneRelationshipCall(id, buildAppEncryptionDeclarationLinkageRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildAppEncryptionDeclarationLinkageRequest Related linkage (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void buildsAppEncryptionDeclarationUpdateToOneRelationship(String id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest) throws ApiException {
        buildsAppEncryptionDeclarationUpdateToOneRelationshipWithHttpInfo(id, buildAppEncryptionDeclarationLinkageRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildAppEncryptionDeclarationLinkageRequest Related linkage (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> buildsAppEncryptionDeclarationUpdateToOneRelationshipWithHttpInfo(String id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest) throws ApiException {
        okhttp3.Call localVarCall = buildsAppEncryptionDeclarationUpdateToOneRelationshipValidateBeforeCall(id, buildAppEncryptionDeclarationLinkageRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param buildAppEncryptionDeclarationLinkageRequest Related linkage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsAppEncryptionDeclarationUpdateToOneRelationshipAsync(String id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsAppEncryptionDeclarationUpdateToOneRelationshipValidateBeforeCall(id, buildAppEncryptionDeclarationLinkageRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsAppGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsAppGetToOneRelatedCall(String id, List<String> fieldsApps, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/app"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsAppGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsApps, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsAppGetToOneRelated(Async)");
        }

        return buildsAppGetToOneRelatedCall(id, fieldsApps, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return AppResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppResponse buildsAppGetToOneRelated(String id, List<String> fieldsApps) throws ApiException {
        ApiResponse<AppResponse> localVarResp = buildsAppGetToOneRelatedWithHttpInfo(id, fieldsApps);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return ApiResponse&lt;AppResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppResponse> buildsAppGetToOneRelatedWithHttpInfo(String id, List<String> fieldsApps) throws ApiException {
        okhttp3.Call localVarCall = buildsAppGetToOneRelatedValidateBeforeCall(id, fieldsApps, null);
        Type localVarReturnType = new TypeToken<AppResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsAppGetToOneRelatedAsync(String id, List<String> fieldsApps, final ApiCallback<AppResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsAppGetToOneRelatedValidateBeforeCall(id, fieldsApps, _callback);
        Type localVarReturnType = new TypeToken<AppResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsAppStoreVersionGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsAppStoreVersionGetToOneRelatedCall(String id, List<String> fieldsAppStoreVersions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/appStoreVersion"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsAppStoreVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsAppStoreVersionGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsAppStoreVersions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsAppStoreVersionGetToOneRelated(Async)");
        }

        return buildsAppStoreVersionGetToOneRelatedCall(id, fieldsAppStoreVersions, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @return AppStoreVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppStoreVersionResponse buildsAppStoreVersionGetToOneRelated(String id, List<String> fieldsAppStoreVersions) throws ApiException {
        ApiResponse<AppStoreVersionResponse> localVarResp = buildsAppStoreVersionGetToOneRelatedWithHttpInfo(id, fieldsAppStoreVersions);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @return ApiResponse&lt;AppStoreVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppStoreVersionResponse> buildsAppStoreVersionGetToOneRelatedWithHttpInfo(String id, List<String> fieldsAppStoreVersions) throws ApiException {
        okhttp3.Call localVarCall = buildsAppStoreVersionGetToOneRelatedValidateBeforeCall(id, fieldsAppStoreVersions, null);
        Type localVarReturnType = new TypeToken<AppStoreVersionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsAppStoreVersionGetToOneRelatedAsync(String id, List<String> fieldsAppStoreVersions, final ApiCallback<AppStoreVersionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsAppStoreVersionGetToOneRelatedValidateBeforeCall(id, fieldsAppStoreVersions, _callback);
        Type localVarReturnType = new TypeToken<AppStoreVersionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsBetaAppReviewSubmissionGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsBetaAppReviewSubmissionGetToOneRelatedCall(String id, List<String> fieldsBetaAppReviewSubmissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/betaAppReviewSubmission"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBetaAppReviewSubmissions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaAppReviewSubmissions]", fieldsBetaAppReviewSubmissions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsBetaAppReviewSubmissionGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsBetaAppReviewSubmissions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsBetaAppReviewSubmissionGetToOneRelated(Async)");
        }

        return buildsBetaAppReviewSubmissionGetToOneRelatedCall(id, fieldsBetaAppReviewSubmissions, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @return BetaAppReviewSubmissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaAppReviewSubmissionResponse buildsBetaAppReviewSubmissionGetToOneRelated(String id, List<String> fieldsBetaAppReviewSubmissions) throws ApiException {
        ApiResponse<BetaAppReviewSubmissionResponse> localVarResp = buildsBetaAppReviewSubmissionGetToOneRelatedWithHttpInfo(id, fieldsBetaAppReviewSubmissions);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @return ApiResponse&lt;BetaAppReviewSubmissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaAppReviewSubmissionResponse> buildsBetaAppReviewSubmissionGetToOneRelatedWithHttpInfo(String id, List<String> fieldsBetaAppReviewSubmissions) throws ApiException {
        okhttp3.Call localVarCall = buildsBetaAppReviewSubmissionGetToOneRelatedValidateBeforeCall(id, fieldsBetaAppReviewSubmissions, null);
        Type localVarReturnType = new TypeToken<BetaAppReviewSubmissionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsBetaAppReviewSubmissionGetToOneRelatedAsync(String id, List<String> fieldsBetaAppReviewSubmissions, final ApiCallback<BetaAppReviewSubmissionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsBetaAppReviewSubmissionGetToOneRelatedValidateBeforeCall(id, fieldsBetaAppReviewSubmissions, _callback);
        Type localVarReturnType = new TypeToken<BetaAppReviewSubmissionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsBetaBuildLocalizationsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsBetaBuildLocalizationsGetToManyRelatedCall(String id, List<String> fieldsBetaBuildLocalizations, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/betaBuildLocalizations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBetaBuildLocalizations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaBuildLocalizations]", fieldsBetaBuildLocalizations));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsBetaBuildLocalizationsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsBetaBuildLocalizations, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsBetaBuildLocalizationsGetToManyRelated(Async)");
        }

        return buildsBetaBuildLocalizationsGetToManyRelatedCall(id, fieldsBetaBuildLocalizations, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @return BetaBuildLocalizationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaBuildLocalizationsResponse buildsBetaBuildLocalizationsGetToManyRelated(String id, List<String> fieldsBetaBuildLocalizations, Integer limit) throws ApiException {
        ApiResponse<BetaBuildLocalizationsResponse> localVarResp = buildsBetaBuildLocalizationsGetToManyRelatedWithHttpInfo(id, fieldsBetaBuildLocalizations, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BetaBuildLocalizationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaBuildLocalizationsResponse> buildsBetaBuildLocalizationsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsBetaBuildLocalizations, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = buildsBetaBuildLocalizationsGetToManyRelatedValidateBeforeCall(id, fieldsBetaBuildLocalizations, limit, null);
        Type localVarReturnType = new TypeToken<BetaBuildLocalizationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsBetaBuildLocalizationsGetToManyRelatedAsync(String id, List<String> fieldsBetaBuildLocalizations, Integer limit, final ApiCallback<BetaBuildLocalizationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsBetaBuildLocalizationsGetToManyRelatedValidateBeforeCall(id, fieldsBetaBuildLocalizations, limit, _callback);
        Type localVarReturnType = new TypeToken<BetaBuildLocalizationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsBetaGroupsCreateToManyRelationship
     * @param id the id of the requested resource (required)
     * @param buildBetaGroupsLinkagesRequest List of related linkages (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsBetaGroupsCreateToManyRelationshipCall(String id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildBetaGroupsLinkagesRequest;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/relationships/betaGroups"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsBetaGroupsCreateToManyRelationshipValidateBeforeCall(String id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsBetaGroupsCreateToManyRelationship(Async)");
        }

        // verify the required parameter 'buildBetaGroupsLinkagesRequest' is set
        if (buildBetaGroupsLinkagesRequest == null) {
            throw new ApiException("Missing the required parameter 'buildBetaGroupsLinkagesRequest' when calling buildsBetaGroupsCreateToManyRelationship(Async)");
        }

        return buildsBetaGroupsCreateToManyRelationshipCall(id, buildBetaGroupsLinkagesRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildBetaGroupsLinkagesRequest List of related linkages (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void buildsBetaGroupsCreateToManyRelationship(String id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest) throws ApiException {
        buildsBetaGroupsCreateToManyRelationshipWithHttpInfo(id, buildBetaGroupsLinkagesRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildBetaGroupsLinkagesRequest List of related linkages (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> buildsBetaGroupsCreateToManyRelationshipWithHttpInfo(String id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest) throws ApiException {
        okhttp3.Call localVarCall = buildsBetaGroupsCreateToManyRelationshipValidateBeforeCall(id, buildBetaGroupsLinkagesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param buildBetaGroupsLinkagesRequest List of related linkages (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsBetaGroupsCreateToManyRelationshipAsync(String id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsBetaGroupsCreateToManyRelationshipValidateBeforeCall(id, buildBetaGroupsLinkagesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsBetaGroupsDeleteToManyRelationship
     * @param id the id of the requested resource (required)
     * @param buildBetaGroupsLinkagesRequest List of related linkages (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsBetaGroupsDeleteToManyRelationshipCall(String id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildBetaGroupsLinkagesRequest;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/relationships/betaGroups"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsBetaGroupsDeleteToManyRelationshipValidateBeforeCall(String id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsBetaGroupsDeleteToManyRelationship(Async)");
        }

        // verify the required parameter 'buildBetaGroupsLinkagesRequest' is set
        if (buildBetaGroupsLinkagesRequest == null) {
            throw new ApiException("Missing the required parameter 'buildBetaGroupsLinkagesRequest' when calling buildsBetaGroupsDeleteToManyRelationship(Async)");
        }

        return buildsBetaGroupsDeleteToManyRelationshipCall(id, buildBetaGroupsLinkagesRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildBetaGroupsLinkagesRequest List of related linkages (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void buildsBetaGroupsDeleteToManyRelationship(String id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest) throws ApiException {
        buildsBetaGroupsDeleteToManyRelationshipWithHttpInfo(id, buildBetaGroupsLinkagesRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildBetaGroupsLinkagesRequest List of related linkages (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> buildsBetaGroupsDeleteToManyRelationshipWithHttpInfo(String id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest) throws ApiException {
        okhttp3.Call localVarCall = buildsBetaGroupsDeleteToManyRelationshipValidateBeforeCall(id, buildBetaGroupsLinkagesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param buildBetaGroupsLinkagesRequest List of related linkages (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsBetaGroupsDeleteToManyRelationshipAsync(String id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsBetaGroupsDeleteToManyRelationshipValidateBeforeCall(id, buildBetaGroupsLinkagesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsBuildBetaDetailGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsBuildBetaDetailGetToOneRelatedCall(String id, List<String> fieldsBuildBetaDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/buildBetaDetail"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBuildBetaDetails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[buildBetaDetails]", fieldsBuildBetaDetails));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsBuildBetaDetailGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsBuildBetaDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsBuildBetaDetailGetToOneRelated(Async)");
        }

        return buildsBuildBetaDetailGetToOneRelatedCall(id, fieldsBuildBetaDetails, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @return BuildBetaDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BuildBetaDetailResponse buildsBuildBetaDetailGetToOneRelated(String id, List<String> fieldsBuildBetaDetails) throws ApiException {
        ApiResponse<BuildBetaDetailResponse> localVarResp = buildsBuildBetaDetailGetToOneRelatedWithHttpInfo(id, fieldsBuildBetaDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @return ApiResponse&lt;BuildBetaDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildBetaDetailResponse> buildsBuildBetaDetailGetToOneRelatedWithHttpInfo(String id, List<String> fieldsBuildBetaDetails) throws ApiException {
        okhttp3.Call localVarCall = buildsBuildBetaDetailGetToOneRelatedValidateBeforeCall(id, fieldsBuildBetaDetails, null);
        Type localVarReturnType = new TypeToken<BuildBetaDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsBuildBetaDetailGetToOneRelatedAsync(String id, List<String> fieldsBuildBetaDetails, final ApiCallback<BuildBetaDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsBuildBetaDetailGetToOneRelatedValidateBeforeCall(id, fieldsBuildBetaDetails, _callback);
        Type localVarReturnType = new TypeToken<BuildBetaDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsDiagnosticSignaturesGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param filterDiagnosticType filter by attribute &#39;diagnosticType&#39; (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsDiagnosticSignaturesGetToManyRelatedCall(String id, List<String> filterDiagnosticType, List<String> fieldsDiagnosticSignatures, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/diagnosticSignatures"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterDiagnosticType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[diagnosticType]", filterDiagnosticType));
        }

        if (fieldsDiagnosticSignatures != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[diagnosticSignatures]", fieldsDiagnosticSignatures));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsDiagnosticSignaturesGetToManyRelatedValidateBeforeCall(String id, List<String> filterDiagnosticType, List<String> fieldsDiagnosticSignatures, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsDiagnosticSignaturesGetToManyRelated(Async)");
        }

        return buildsDiagnosticSignaturesGetToManyRelatedCall(id, filterDiagnosticType, fieldsDiagnosticSignatures, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterDiagnosticType filter by attribute &#39;diagnosticType&#39; (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param limit maximum resources per page (optional)
     * @return DiagnosticSignaturesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticSignaturesResponse buildsDiagnosticSignaturesGetToManyRelated(String id, List<String> filterDiagnosticType, List<String> fieldsDiagnosticSignatures, Integer limit) throws ApiException {
        ApiResponse<DiagnosticSignaturesResponse> localVarResp = buildsDiagnosticSignaturesGetToManyRelatedWithHttpInfo(id, filterDiagnosticType, fieldsDiagnosticSignatures, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterDiagnosticType filter by attribute &#39;diagnosticType&#39; (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;DiagnosticSignaturesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticSignaturesResponse> buildsDiagnosticSignaturesGetToManyRelatedWithHttpInfo(String id, List<String> filterDiagnosticType, List<String> fieldsDiagnosticSignatures, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = buildsDiagnosticSignaturesGetToManyRelatedValidateBeforeCall(id, filterDiagnosticType, fieldsDiagnosticSignatures, limit, null);
        Type localVarReturnType = new TypeToken<DiagnosticSignaturesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param filterDiagnosticType filter by attribute &#39;diagnosticType&#39; (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsDiagnosticSignaturesGetToManyRelatedAsync(String id, List<String> filterDiagnosticType, List<String> fieldsDiagnosticSignatures, Integer limit, final ApiCallback<DiagnosticSignaturesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsDiagnosticSignaturesGetToManyRelatedValidateBeforeCall(id, filterDiagnosticType, fieldsDiagnosticSignatures, limit, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticSignaturesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsGetCollection
     * @param filterBetaAppReviewSubmissionBetaReviewState filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     * @param filterExpired filter by attribute &#39;expired&#39; (optional)
     * @param filterPreReleaseVersionPlatform filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     * @param filterPreReleaseVersionVersion filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     * @param filterProcessingState filter by attribute &#39;processingState&#39; (optional)
     * @param filterUsesNonExemptEncryption filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     * @param filterVersion filter by attribute &#39;version&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterAppStoreVersion filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     * @param filterBetaGroups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param filterPreReleaseVersion filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaBuildLocalizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param limitIcons maximum number of related icons returned (when they are included) (optional)
     * @param limitIndividualTesters maximum number of related individualTesters returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Builds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetCollectionCall(List<String> filterBetaAppReviewSubmissionBetaReviewState, List<String> filterExpired, List<String> filterPreReleaseVersionPlatform, List<String> filterPreReleaseVersionVersion, List<String> filterProcessingState, List<String> filterUsesNonExemptEncryption, List<String> filterVersion, List<String> filterApp, List<String> filterAppStoreVersion, List<String> filterBetaGroups, List<String> filterPreReleaseVersion, List<String> filterId, List<String> sort, List<String> fieldsBuilds, Integer limit, List<String> include, List<String> fieldsAppEncryptionDeclarations, List<String> fieldsBetaAppReviewSubmissions, List<String> fieldsBuildBetaDetails, List<String> fieldsBuildIcons, List<String> fieldsPerfPowerMetrics, List<String> fieldsPreReleaseVersions, List<String> fieldsAppStoreVersions, List<String> fieldsDiagnosticSignatures, List<String> fieldsBetaTesters, List<String> fieldsBetaBuildLocalizations, List<String> fieldsApps, Integer limitBetaBuildLocalizations, Integer limitIcons, Integer limitIndividualTesters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterBetaAppReviewSubmissionBetaReviewState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[betaAppReviewSubmission.betaReviewState]", filterBetaAppReviewSubmissionBetaReviewState));
        }

        if (filterExpired != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[expired]", filterExpired));
        }

        if (filterPreReleaseVersionPlatform != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[preReleaseVersion.platform]", filterPreReleaseVersionPlatform));
        }

        if (filterPreReleaseVersionVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[preReleaseVersion.version]", filterPreReleaseVersionVersion));
        }

        if (filterProcessingState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[processingState]", filterProcessingState));
        }

        if (filterUsesNonExemptEncryption != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[usesNonExemptEncryption]", filterUsesNonExemptEncryption));
        }

        if (filterVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[version]", filterVersion));
        }

        if (filterApp != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[app]", filterApp));
        }

        if (filterAppStoreVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[appStoreVersion]", filterAppStoreVersion));
        }

        if (filterBetaGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[betaGroups]", filterBetaGroups));
        }

        if (filterPreReleaseVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[preReleaseVersion]", filterPreReleaseVersion));
        }

        if (filterId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[id]", filterId));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sort", sort));
        }

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsAppEncryptionDeclarations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
        }

        if (fieldsBetaAppReviewSubmissions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaAppReviewSubmissions]", fieldsBetaAppReviewSubmissions));
        }

        if (fieldsBuildBetaDetails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[buildBetaDetails]", fieldsBuildBetaDetails));
        }

        if (fieldsBuildIcons != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[buildIcons]", fieldsBuildIcons));
        }

        if (fieldsPerfPowerMetrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[perfPowerMetrics]", fieldsPerfPowerMetrics));
        }

        if (fieldsPreReleaseVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
        }

        if (fieldsAppStoreVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
        }

        if (fieldsDiagnosticSignatures != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[diagnosticSignatures]", fieldsDiagnosticSignatures));
        }

        if (fieldsBetaTesters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaTesters]", fieldsBetaTesters));
        }

        if (fieldsBetaBuildLocalizations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaBuildLocalizations]", fieldsBetaBuildLocalizations));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limitBetaBuildLocalizations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[betaBuildLocalizations]", limitBetaBuildLocalizations));
        }

        if (limitIcons != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[icons]", limitIcons));
        }

        if (limitIndividualTesters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[individualTesters]", limitIndividualTesters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsGetCollectionValidateBeforeCall(List<String> filterBetaAppReviewSubmissionBetaReviewState, List<String> filterExpired, List<String> filterPreReleaseVersionPlatform, List<String> filterPreReleaseVersionVersion, List<String> filterProcessingState, List<String> filterUsesNonExemptEncryption, List<String> filterVersion, List<String> filterApp, List<String> filterAppStoreVersion, List<String> filterBetaGroups, List<String> filterPreReleaseVersion, List<String> filterId, List<String> sort, List<String> fieldsBuilds, Integer limit, List<String> include, List<String> fieldsAppEncryptionDeclarations, List<String> fieldsBetaAppReviewSubmissions, List<String> fieldsBuildBetaDetails, List<String> fieldsBuildIcons, List<String> fieldsPerfPowerMetrics, List<String> fieldsPreReleaseVersions, List<String> fieldsAppStoreVersions, List<String> fieldsDiagnosticSignatures, List<String> fieldsBetaTesters, List<String> fieldsBetaBuildLocalizations, List<String> fieldsApps, Integer limitBetaBuildLocalizations, Integer limitIcons, Integer limitIndividualTesters, final ApiCallback _callback) throws ApiException {
        return buildsGetCollectionCall(filterBetaAppReviewSubmissionBetaReviewState, filterExpired, filterPreReleaseVersionPlatform, filterPreReleaseVersionVersion, filterProcessingState, filterUsesNonExemptEncryption, filterVersion, filterApp, filterAppStoreVersion, filterBetaGroups, filterPreReleaseVersion, filterId, sort, fieldsBuilds, limit, include, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails, fieldsBuildIcons, fieldsPerfPowerMetrics, fieldsPreReleaseVersions, fieldsAppStoreVersions, fieldsDiagnosticSignatures, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsApps, limitBetaBuildLocalizations, limitIcons, limitIndividualTesters, _callback);

    }

    /**
     * 
     * 
     * @param filterBetaAppReviewSubmissionBetaReviewState filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     * @param filterExpired filter by attribute &#39;expired&#39; (optional)
     * @param filterPreReleaseVersionPlatform filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     * @param filterPreReleaseVersionVersion filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     * @param filterProcessingState filter by attribute &#39;processingState&#39; (optional)
     * @param filterUsesNonExemptEncryption filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     * @param filterVersion filter by attribute &#39;version&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterAppStoreVersion filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     * @param filterBetaGroups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param filterPreReleaseVersion filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaBuildLocalizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param limitIcons maximum number of related icons returned (when they are included) (optional)
     * @param limitIndividualTesters maximum number of related individualTesters returned (when they are included) (optional)
     * @return BuildsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Builds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public BuildsResponse buildsGetCollection(List<String> filterBetaAppReviewSubmissionBetaReviewState, List<String> filterExpired, List<String> filterPreReleaseVersionPlatform, List<String> filterPreReleaseVersionVersion, List<String> filterProcessingState, List<String> filterUsesNonExemptEncryption, List<String> filterVersion, List<String> filterApp, List<String> filterAppStoreVersion, List<String> filterBetaGroups, List<String> filterPreReleaseVersion, List<String> filterId, List<String> sort, List<String> fieldsBuilds, Integer limit, List<String> include, List<String> fieldsAppEncryptionDeclarations, List<String> fieldsBetaAppReviewSubmissions, List<String> fieldsBuildBetaDetails, List<String> fieldsBuildIcons, List<String> fieldsPerfPowerMetrics, List<String> fieldsPreReleaseVersions, List<String> fieldsAppStoreVersions, List<String> fieldsDiagnosticSignatures, List<String> fieldsBetaTesters, List<String> fieldsBetaBuildLocalizations, List<String> fieldsApps, Integer limitBetaBuildLocalizations, Integer limitIcons, Integer limitIndividualTesters) throws ApiException {
        ApiResponse<BuildsResponse> localVarResp = buildsGetCollectionWithHttpInfo(filterBetaAppReviewSubmissionBetaReviewState, filterExpired, filterPreReleaseVersionPlatform, filterPreReleaseVersionVersion, filterProcessingState, filterUsesNonExemptEncryption, filterVersion, filterApp, filterAppStoreVersion, filterBetaGroups, filterPreReleaseVersion, filterId, sort, fieldsBuilds, limit, include, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails, fieldsBuildIcons, fieldsPerfPowerMetrics, fieldsPreReleaseVersions, fieldsAppStoreVersions, fieldsDiagnosticSignatures, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsApps, limitBetaBuildLocalizations, limitIcons, limitIndividualTesters);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param filterBetaAppReviewSubmissionBetaReviewState filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     * @param filterExpired filter by attribute &#39;expired&#39; (optional)
     * @param filterPreReleaseVersionPlatform filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     * @param filterPreReleaseVersionVersion filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     * @param filterProcessingState filter by attribute &#39;processingState&#39; (optional)
     * @param filterUsesNonExemptEncryption filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     * @param filterVersion filter by attribute &#39;version&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterAppStoreVersion filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     * @param filterBetaGroups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param filterPreReleaseVersion filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaBuildLocalizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param limitIcons maximum number of related icons returned (when they are included) (optional)
     * @param limitIndividualTesters maximum number of related individualTesters returned (when they are included) (optional)
     * @return ApiResponse&lt;BuildsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Builds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsResponse> buildsGetCollectionWithHttpInfo(List<String> filterBetaAppReviewSubmissionBetaReviewState, List<String> filterExpired, List<String> filterPreReleaseVersionPlatform, List<String> filterPreReleaseVersionVersion, List<String> filterProcessingState, List<String> filterUsesNonExemptEncryption, List<String> filterVersion, List<String> filterApp, List<String> filterAppStoreVersion, List<String> filterBetaGroups, List<String> filterPreReleaseVersion, List<String> filterId, List<String> sort, List<String> fieldsBuilds, Integer limit, List<String> include, List<String> fieldsAppEncryptionDeclarations, List<String> fieldsBetaAppReviewSubmissions, List<String> fieldsBuildBetaDetails, List<String> fieldsBuildIcons, List<String> fieldsPerfPowerMetrics, List<String> fieldsPreReleaseVersions, List<String> fieldsAppStoreVersions, List<String> fieldsDiagnosticSignatures, List<String> fieldsBetaTesters, List<String> fieldsBetaBuildLocalizations, List<String> fieldsApps, Integer limitBetaBuildLocalizations, Integer limitIcons, Integer limitIndividualTesters) throws ApiException {
        okhttp3.Call localVarCall = buildsGetCollectionValidateBeforeCall(filterBetaAppReviewSubmissionBetaReviewState, filterExpired, filterPreReleaseVersionPlatform, filterPreReleaseVersionVersion, filterProcessingState, filterUsesNonExemptEncryption, filterVersion, filterApp, filterAppStoreVersion, filterBetaGroups, filterPreReleaseVersion, filterId, sort, fieldsBuilds, limit, include, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails, fieldsBuildIcons, fieldsPerfPowerMetrics, fieldsPreReleaseVersions, fieldsAppStoreVersions, fieldsDiagnosticSignatures, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsApps, limitBetaBuildLocalizations, limitIcons, limitIndividualTesters, null);
        Type localVarReturnType = new TypeToken<BuildsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param filterBetaAppReviewSubmissionBetaReviewState filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     * @param filterExpired filter by attribute &#39;expired&#39; (optional)
     * @param filterPreReleaseVersionPlatform filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     * @param filterPreReleaseVersionVersion filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     * @param filterProcessingState filter by attribute &#39;processingState&#39; (optional)
     * @param filterUsesNonExemptEncryption filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     * @param filterVersion filter by attribute &#39;version&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterAppStoreVersion filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     * @param filterBetaGroups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param filterPreReleaseVersion filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaBuildLocalizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param limitIcons maximum number of related icons returned (when they are included) (optional)
     * @param limitIndividualTesters maximum number of related individualTesters returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Builds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetCollectionAsync(List<String> filterBetaAppReviewSubmissionBetaReviewState, List<String> filterExpired, List<String> filterPreReleaseVersionPlatform, List<String> filterPreReleaseVersionVersion, List<String> filterProcessingState, List<String> filterUsesNonExemptEncryption, List<String> filterVersion, List<String> filterApp, List<String> filterAppStoreVersion, List<String> filterBetaGroups, List<String> filterPreReleaseVersion, List<String> filterId, List<String> sort, List<String> fieldsBuilds, Integer limit, List<String> include, List<String> fieldsAppEncryptionDeclarations, List<String> fieldsBetaAppReviewSubmissions, List<String> fieldsBuildBetaDetails, List<String> fieldsBuildIcons, List<String> fieldsPerfPowerMetrics, List<String> fieldsPreReleaseVersions, List<String> fieldsAppStoreVersions, List<String> fieldsDiagnosticSignatures, List<String> fieldsBetaTesters, List<String> fieldsBetaBuildLocalizations, List<String> fieldsApps, Integer limitBetaBuildLocalizations, Integer limitIcons, Integer limitIndividualTesters, final ApiCallback<BuildsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsGetCollectionValidateBeforeCall(filterBetaAppReviewSubmissionBetaReviewState, filterExpired, filterPreReleaseVersionPlatform, filterPreReleaseVersionVersion, filterProcessingState, filterUsesNonExemptEncryption, filterVersion, filterApp, filterAppStoreVersion, filterBetaGroups, filterPreReleaseVersion, filterId, sort, fieldsBuilds, limit, include, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails, fieldsBuildIcons, fieldsPerfPowerMetrics, fieldsPreReleaseVersions, fieldsAppStoreVersions, fieldsDiagnosticSignatures, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsApps, limitBetaBuildLocalizations, limitIcons, limitIndividualTesters, _callback);
        Type localVarReturnType = new TypeToken<BuildsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsGetInstance
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaBuildLocalizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param limitIcons maximum number of related icons returned (when they are included) (optional)
     * @param limitIndividualTesters maximum number of related individualTesters returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Build </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetInstanceCall(String id, List<String> fieldsBuilds, List<String> include, List<String> fieldsAppEncryptionDeclarations, List<String> fieldsBetaAppReviewSubmissions, List<String> fieldsBuildBetaDetails, List<String> fieldsBuildIcons, List<String> fieldsPerfPowerMetrics, List<String> fieldsPreReleaseVersions, List<String> fieldsAppStoreVersions, List<String> fieldsDiagnosticSignatures, List<String> fieldsBetaTesters, List<String> fieldsBetaBuildLocalizations, List<String> fieldsApps, Integer limitBetaBuildLocalizations, Integer limitIcons, Integer limitIndividualTesters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsAppEncryptionDeclarations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
        }

        if (fieldsBetaAppReviewSubmissions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaAppReviewSubmissions]", fieldsBetaAppReviewSubmissions));
        }

        if (fieldsBuildBetaDetails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[buildBetaDetails]", fieldsBuildBetaDetails));
        }

        if (fieldsBuildIcons != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[buildIcons]", fieldsBuildIcons));
        }

        if (fieldsPerfPowerMetrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[perfPowerMetrics]", fieldsPerfPowerMetrics));
        }

        if (fieldsPreReleaseVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
        }

        if (fieldsAppStoreVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
        }

        if (fieldsDiagnosticSignatures != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[diagnosticSignatures]", fieldsDiagnosticSignatures));
        }

        if (fieldsBetaTesters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaTesters]", fieldsBetaTesters));
        }

        if (fieldsBetaBuildLocalizations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaBuildLocalizations]", fieldsBetaBuildLocalizations));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limitBetaBuildLocalizations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[betaBuildLocalizations]", limitBetaBuildLocalizations));
        }

        if (limitIcons != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[icons]", limitIcons));
        }

        if (limitIndividualTesters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[individualTesters]", limitIndividualTesters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsGetInstanceValidateBeforeCall(String id, List<String> fieldsBuilds, List<String> include, List<String> fieldsAppEncryptionDeclarations, List<String> fieldsBetaAppReviewSubmissions, List<String> fieldsBuildBetaDetails, List<String> fieldsBuildIcons, List<String> fieldsPerfPowerMetrics, List<String> fieldsPreReleaseVersions, List<String> fieldsAppStoreVersions, List<String> fieldsDiagnosticSignatures, List<String> fieldsBetaTesters, List<String> fieldsBetaBuildLocalizations, List<String> fieldsApps, Integer limitBetaBuildLocalizations, Integer limitIcons, Integer limitIndividualTesters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsGetInstance(Async)");
        }

        return buildsGetInstanceCall(id, fieldsBuilds, include, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails, fieldsBuildIcons, fieldsPerfPowerMetrics, fieldsPreReleaseVersions, fieldsAppStoreVersions, fieldsDiagnosticSignatures, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsApps, limitBetaBuildLocalizations, limitIcons, limitIndividualTesters, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaBuildLocalizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param limitIcons maximum number of related icons returned (when they are included) (optional)
     * @param limitIndividualTesters maximum number of related individualTesters returned (when they are included) (optional)
     * @return BuildResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Build </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BuildResponse buildsGetInstance(String id, List<String> fieldsBuilds, List<String> include, List<String> fieldsAppEncryptionDeclarations, List<String> fieldsBetaAppReviewSubmissions, List<String> fieldsBuildBetaDetails, List<String> fieldsBuildIcons, List<String> fieldsPerfPowerMetrics, List<String> fieldsPreReleaseVersions, List<String> fieldsAppStoreVersions, List<String> fieldsDiagnosticSignatures, List<String> fieldsBetaTesters, List<String> fieldsBetaBuildLocalizations, List<String> fieldsApps, Integer limitBetaBuildLocalizations, Integer limitIcons, Integer limitIndividualTesters) throws ApiException {
        ApiResponse<BuildResponse> localVarResp = buildsGetInstanceWithHttpInfo(id, fieldsBuilds, include, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails, fieldsBuildIcons, fieldsPerfPowerMetrics, fieldsPreReleaseVersions, fieldsAppStoreVersions, fieldsDiagnosticSignatures, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsApps, limitBetaBuildLocalizations, limitIcons, limitIndividualTesters);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaBuildLocalizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param limitIcons maximum number of related icons returned (when they are included) (optional)
     * @param limitIndividualTesters maximum number of related individualTesters returned (when they are included) (optional)
     * @return ApiResponse&lt;BuildResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Build </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildResponse> buildsGetInstanceWithHttpInfo(String id, List<String> fieldsBuilds, List<String> include, List<String> fieldsAppEncryptionDeclarations, List<String> fieldsBetaAppReviewSubmissions, List<String> fieldsBuildBetaDetails, List<String> fieldsBuildIcons, List<String> fieldsPerfPowerMetrics, List<String> fieldsPreReleaseVersions, List<String> fieldsAppStoreVersions, List<String> fieldsDiagnosticSignatures, List<String> fieldsBetaTesters, List<String> fieldsBetaBuildLocalizations, List<String> fieldsApps, Integer limitBetaBuildLocalizations, Integer limitIcons, Integer limitIndividualTesters) throws ApiException {
        okhttp3.Call localVarCall = buildsGetInstanceValidateBeforeCall(id, fieldsBuilds, include, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails, fieldsBuildIcons, fieldsPerfPowerMetrics, fieldsPreReleaseVersions, fieldsAppStoreVersions, fieldsDiagnosticSignatures, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsApps, limitBetaBuildLocalizations, limitIcons, limitIndividualTesters, null);
        Type localVarReturnType = new TypeToken<BuildResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaBuildLocalizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param limitIcons maximum number of related icons returned (when they are included) (optional)
     * @param limitIndividualTesters maximum number of related individualTesters returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Build </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetInstanceAsync(String id, List<String> fieldsBuilds, List<String> include, List<String> fieldsAppEncryptionDeclarations, List<String> fieldsBetaAppReviewSubmissions, List<String> fieldsBuildBetaDetails, List<String> fieldsBuildIcons, List<String> fieldsPerfPowerMetrics, List<String> fieldsPreReleaseVersions, List<String> fieldsAppStoreVersions, List<String> fieldsDiagnosticSignatures, List<String> fieldsBetaTesters, List<String> fieldsBetaBuildLocalizations, List<String> fieldsApps, Integer limitBetaBuildLocalizations, Integer limitIcons, Integer limitIndividualTesters, final ApiCallback<BuildResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsGetInstanceValidateBeforeCall(id, fieldsBuilds, include, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails, fieldsBuildIcons, fieldsPerfPowerMetrics, fieldsPreReleaseVersions, fieldsAppStoreVersions, fieldsDiagnosticSignatures, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsApps, limitBetaBuildLocalizations, limitIcons, limitIndividualTesters, _callback);
        Type localVarReturnType = new TypeToken<BuildResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsIconsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsIconsGetToManyRelatedCall(String id, List<String> fieldsBuildIcons, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/icons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBuildIcons != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[buildIcons]", fieldsBuildIcons));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsIconsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsBuildIcons, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsIconsGetToManyRelated(Async)");
        }

        return buildsIconsGetToManyRelatedCall(id, fieldsBuildIcons, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param limit maximum resources per page (optional)
     * @return BuildIconsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BuildIconsResponse buildsIconsGetToManyRelated(String id, List<String> fieldsBuildIcons, Integer limit) throws ApiException {
        ApiResponse<BuildIconsResponse> localVarResp = buildsIconsGetToManyRelatedWithHttpInfo(id, fieldsBuildIcons, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BuildIconsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildIconsResponse> buildsIconsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsBuildIcons, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = buildsIconsGetToManyRelatedValidateBeforeCall(id, fieldsBuildIcons, limit, null);
        Type localVarReturnType = new TypeToken<BuildIconsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsIconsGetToManyRelatedAsync(String id, List<String> fieldsBuildIcons, Integer limit, final ApiCallback<BuildIconsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsIconsGetToManyRelatedValidateBeforeCall(id, fieldsBuildIcons, limit, _callback);
        Type localVarReturnType = new TypeToken<BuildIconsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsIndividualTestersCreateToManyRelationship
     * @param id the id of the requested resource (required)
     * @param buildIndividualTestersLinkagesRequest List of related linkages (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsIndividualTestersCreateToManyRelationshipCall(String id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildIndividualTestersLinkagesRequest;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/relationships/individualTesters"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsIndividualTestersCreateToManyRelationshipValidateBeforeCall(String id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsIndividualTestersCreateToManyRelationship(Async)");
        }

        // verify the required parameter 'buildIndividualTestersLinkagesRequest' is set
        if (buildIndividualTestersLinkagesRequest == null) {
            throw new ApiException("Missing the required parameter 'buildIndividualTestersLinkagesRequest' when calling buildsIndividualTestersCreateToManyRelationship(Async)");
        }

        return buildsIndividualTestersCreateToManyRelationshipCall(id, buildIndividualTestersLinkagesRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildIndividualTestersLinkagesRequest List of related linkages (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void buildsIndividualTestersCreateToManyRelationship(String id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest) throws ApiException {
        buildsIndividualTestersCreateToManyRelationshipWithHttpInfo(id, buildIndividualTestersLinkagesRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildIndividualTestersLinkagesRequest List of related linkages (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> buildsIndividualTestersCreateToManyRelationshipWithHttpInfo(String id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest) throws ApiException {
        okhttp3.Call localVarCall = buildsIndividualTestersCreateToManyRelationshipValidateBeforeCall(id, buildIndividualTestersLinkagesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param buildIndividualTestersLinkagesRequest List of related linkages (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsIndividualTestersCreateToManyRelationshipAsync(String id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsIndividualTestersCreateToManyRelationshipValidateBeforeCall(id, buildIndividualTestersLinkagesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsIndividualTestersDeleteToManyRelationship
     * @param id the id of the requested resource (required)
     * @param buildIndividualTestersLinkagesRequest List of related linkages (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsIndividualTestersDeleteToManyRelationshipCall(String id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildIndividualTestersLinkagesRequest;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/relationships/individualTesters"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsIndividualTestersDeleteToManyRelationshipValidateBeforeCall(String id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsIndividualTestersDeleteToManyRelationship(Async)");
        }

        // verify the required parameter 'buildIndividualTestersLinkagesRequest' is set
        if (buildIndividualTestersLinkagesRequest == null) {
            throw new ApiException("Missing the required parameter 'buildIndividualTestersLinkagesRequest' when calling buildsIndividualTestersDeleteToManyRelationship(Async)");
        }

        return buildsIndividualTestersDeleteToManyRelationshipCall(id, buildIndividualTestersLinkagesRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildIndividualTestersLinkagesRequest List of related linkages (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void buildsIndividualTestersDeleteToManyRelationship(String id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest) throws ApiException {
        buildsIndividualTestersDeleteToManyRelationshipWithHttpInfo(id, buildIndividualTestersLinkagesRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildIndividualTestersLinkagesRequest List of related linkages (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> buildsIndividualTestersDeleteToManyRelationshipWithHttpInfo(String id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest) throws ApiException {
        okhttp3.Call localVarCall = buildsIndividualTestersDeleteToManyRelationshipValidateBeforeCall(id, buildIndividualTestersLinkagesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param buildIndividualTestersLinkagesRequest List of related linkages (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsIndividualTestersDeleteToManyRelationshipAsync(String id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsIndividualTestersDeleteToManyRelationshipValidateBeforeCall(id, buildIndividualTestersLinkagesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsIndividualTestersGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsIndividualTestersGetToManyRelatedCall(String id, List<String> fieldsBetaTesters, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/individualTesters"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBetaTesters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaTesters]", fieldsBetaTesters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsIndividualTestersGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsBetaTesters, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsIndividualTestersGetToManyRelated(Async)");
        }

        return buildsIndividualTestersGetToManyRelatedCall(id, fieldsBetaTesters, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param limit maximum resources per page (optional)
     * @return BetaTestersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaTestersResponse buildsIndividualTestersGetToManyRelated(String id, List<String> fieldsBetaTesters, Integer limit) throws ApiException {
        ApiResponse<BetaTestersResponse> localVarResp = buildsIndividualTestersGetToManyRelatedWithHttpInfo(id, fieldsBetaTesters, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BetaTestersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaTestersResponse> buildsIndividualTestersGetToManyRelatedWithHttpInfo(String id, List<String> fieldsBetaTesters, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = buildsIndividualTestersGetToManyRelatedValidateBeforeCall(id, fieldsBetaTesters, limit, null);
        Type localVarReturnType = new TypeToken<BetaTestersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsIndividualTestersGetToManyRelatedAsync(String id, List<String> fieldsBetaTesters, Integer limit, final ApiCallback<BetaTestersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsIndividualTestersGetToManyRelatedValidateBeforeCall(id, fieldsBetaTesters, limit, _callback);
        Type localVarReturnType = new TypeToken<BetaTestersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsIndividualTestersGetToManyRelationship
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsIndividualTestersGetToManyRelationshipCall(String id, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/relationships/individualTesters"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsIndividualTestersGetToManyRelationshipValidateBeforeCall(String id, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsIndividualTestersGetToManyRelationship(Async)");
        }

        return buildsIndividualTestersGetToManyRelationshipCall(id, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return BuildIndividualTestersLinkagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BuildIndividualTestersLinkagesResponse buildsIndividualTestersGetToManyRelationship(String id, Integer limit) throws ApiException {
        ApiResponse<BuildIndividualTestersLinkagesResponse> localVarResp = buildsIndividualTestersGetToManyRelationshipWithHttpInfo(id, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BuildIndividualTestersLinkagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildIndividualTestersLinkagesResponse> buildsIndividualTestersGetToManyRelationshipWithHttpInfo(String id, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = buildsIndividualTestersGetToManyRelationshipValidateBeforeCall(id, limit, null);
        Type localVarReturnType = new TypeToken<BuildIndividualTestersLinkagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsIndividualTestersGetToManyRelationshipAsync(String id, Integer limit, final ApiCallback<BuildIndividualTestersLinkagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsIndividualTestersGetToManyRelationshipValidateBeforeCall(id, limit, _callback);
        Type localVarReturnType = new TypeToken<BuildIndividualTestersLinkagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsPerfPowerMetricsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param filterDeviceType filter by attribute &#39;deviceType&#39; (optional)
     * @param filterMetricType filter by attribute &#39;metricType&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsPerfPowerMetricsGetToManyRelatedCall(String id, List<String> filterDeviceType, List<String> filterMetricType, List<String> filterPlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/perfPowerMetrics"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterDeviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[deviceType]", filterDeviceType));
        }

        if (filterMetricType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[metricType]", filterMetricType));
        }

        if (filterPlatform != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[platform]", filterPlatform));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsPerfPowerMetricsGetToManyRelatedValidateBeforeCall(String id, List<String> filterDeviceType, List<String> filterMetricType, List<String> filterPlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsPerfPowerMetricsGetToManyRelated(Async)");
        }

        return buildsPerfPowerMetricsGetToManyRelatedCall(id, filterDeviceType, filterMetricType, filterPlatform, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterDeviceType filter by attribute &#39;deviceType&#39; (optional)
     * @param filterMetricType filter by attribute &#39;metricType&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @return PerfPowerMetricsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public PerfPowerMetricsResponse buildsPerfPowerMetricsGetToManyRelated(String id, List<String> filterDeviceType, List<String> filterMetricType, List<String> filterPlatform) throws ApiException {
        ApiResponse<PerfPowerMetricsResponse> localVarResp = buildsPerfPowerMetricsGetToManyRelatedWithHttpInfo(id, filterDeviceType, filterMetricType, filterPlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterDeviceType filter by attribute &#39;deviceType&#39; (optional)
     * @param filterMetricType filter by attribute &#39;metricType&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @return ApiResponse&lt;PerfPowerMetricsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PerfPowerMetricsResponse> buildsPerfPowerMetricsGetToManyRelatedWithHttpInfo(String id, List<String> filterDeviceType, List<String> filterMetricType, List<String> filterPlatform) throws ApiException {
        okhttp3.Call localVarCall = buildsPerfPowerMetricsGetToManyRelatedValidateBeforeCall(id, filterDeviceType, filterMetricType, filterPlatform, null);
        Type localVarReturnType = new TypeToken<PerfPowerMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param filterDeviceType filter by attribute &#39;deviceType&#39; (optional)
     * @param filterMetricType filter by attribute &#39;metricType&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsPerfPowerMetricsGetToManyRelatedAsync(String id, List<String> filterDeviceType, List<String> filterMetricType, List<String> filterPlatform, final ApiCallback<PerfPowerMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsPerfPowerMetricsGetToManyRelatedValidateBeforeCall(id, filterDeviceType, filterMetricType, filterPlatform, _callback);
        Type localVarReturnType = new TypeToken<PerfPowerMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsPreReleaseVersionGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsPreReleaseVersionGetToOneRelatedCall(String id, List<String> fieldsPreReleaseVersions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}/preReleaseVersion"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsPreReleaseVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsPreReleaseVersionGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsPreReleaseVersions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsPreReleaseVersionGetToOneRelated(Async)");
        }

        return buildsPreReleaseVersionGetToOneRelatedCall(id, fieldsPreReleaseVersions, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @return PrereleaseVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public PrereleaseVersionResponse buildsPreReleaseVersionGetToOneRelated(String id, List<String> fieldsPreReleaseVersions) throws ApiException {
        ApiResponse<PrereleaseVersionResponse> localVarResp = buildsPreReleaseVersionGetToOneRelatedWithHttpInfo(id, fieldsPreReleaseVersions);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @return ApiResponse&lt;PrereleaseVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrereleaseVersionResponse> buildsPreReleaseVersionGetToOneRelatedWithHttpInfo(String id, List<String> fieldsPreReleaseVersions) throws ApiException {
        okhttp3.Call localVarCall = buildsPreReleaseVersionGetToOneRelatedValidateBeforeCall(id, fieldsPreReleaseVersions, null);
        Type localVarReturnType = new TypeToken<PrereleaseVersionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsPreReleaseVersionGetToOneRelatedAsync(String id, List<String> fieldsPreReleaseVersions, final ApiCallback<PrereleaseVersionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsPreReleaseVersionGetToOneRelatedValidateBeforeCall(id, fieldsPreReleaseVersions, _callback);
        Type localVarReturnType = new TypeToken<PrereleaseVersionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsUpdateInstance
     * @param id the id of the requested resource (required)
     * @param buildUpdateRequest Build representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Build </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsUpdateInstanceCall(String id, BuildUpdateRequest buildUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/builds/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsUpdateInstanceValidateBeforeCall(String id, BuildUpdateRequest buildUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buildsUpdateInstance(Async)");
        }

        // verify the required parameter 'buildUpdateRequest' is set
        if (buildUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'buildUpdateRequest' when calling buildsUpdateInstance(Async)");
        }

        return buildsUpdateInstanceCall(id, buildUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildUpdateRequest Build representation (required)
     * @return BuildResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Build </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public BuildResponse buildsUpdateInstance(String id, BuildUpdateRequest buildUpdateRequest) throws ApiException {
        ApiResponse<BuildResponse> localVarResp = buildsUpdateInstanceWithHttpInfo(id, buildUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param buildUpdateRequest Build representation (required)
     * @return ApiResponse&lt;BuildResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Build </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildResponse> buildsUpdateInstanceWithHttpInfo(String id, BuildUpdateRequest buildUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = buildsUpdateInstanceValidateBeforeCall(id, buildUpdateRequest, null);
        Type localVarReturnType = new TypeToken<BuildResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param buildUpdateRequest Build representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Build </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsUpdateInstanceAsync(String id, BuildUpdateRequest buildUpdateRequest, final ApiCallback<BuildResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsUpdateInstanceValidateBeforeCall(id, buildUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<BuildResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
