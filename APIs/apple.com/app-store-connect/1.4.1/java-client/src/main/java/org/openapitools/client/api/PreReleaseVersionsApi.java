/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppResponse;
import org.openapitools.client.model.BuildsResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PreReleaseVersionsResponse;
import org.openapitools.client.model.PrereleaseVersionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreReleaseVersionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PreReleaseVersionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PreReleaseVersionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for preReleaseVersionsAppGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preReleaseVersionsAppGetToOneRelatedCall(String id, List<String> fieldsApps, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/preReleaseVersions/{id}/app"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preReleaseVersionsAppGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsApps, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling preReleaseVersionsAppGetToOneRelated(Async)");
        }

        return preReleaseVersionsAppGetToOneRelatedCall(id, fieldsApps, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return AppResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppResponse preReleaseVersionsAppGetToOneRelated(String id, List<String> fieldsApps) throws ApiException {
        ApiResponse<AppResponse> localVarResp = preReleaseVersionsAppGetToOneRelatedWithHttpInfo(id, fieldsApps);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return ApiResponse&lt;AppResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppResponse> preReleaseVersionsAppGetToOneRelatedWithHttpInfo(String id, List<String> fieldsApps) throws ApiException {
        okhttp3.Call localVarCall = preReleaseVersionsAppGetToOneRelatedValidateBeforeCall(id, fieldsApps, null);
        Type localVarReturnType = new TypeToken<AppResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preReleaseVersionsAppGetToOneRelatedAsync(String id, List<String> fieldsApps, final ApiCallback<AppResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = preReleaseVersionsAppGetToOneRelatedValidateBeforeCall(id, fieldsApps, _callback);
        Type localVarReturnType = new TypeToken<AppResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preReleaseVersionsBuildsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preReleaseVersionsBuildsGetToManyRelatedCall(String id, List<String> fieldsBuilds, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/preReleaseVersions/{id}/builds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preReleaseVersionsBuildsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsBuilds, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling preReleaseVersionsBuildsGetToManyRelated(Async)");
        }

        return preReleaseVersionsBuildsGetToManyRelatedCall(id, fieldsBuilds, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @return BuildsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BuildsResponse preReleaseVersionsBuildsGetToManyRelated(String id, List<String> fieldsBuilds, Integer limit) throws ApiException {
        ApiResponse<BuildsResponse> localVarResp = preReleaseVersionsBuildsGetToManyRelatedWithHttpInfo(id, fieldsBuilds, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BuildsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsResponse> preReleaseVersionsBuildsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsBuilds, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = preReleaseVersionsBuildsGetToManyRelatedValidateBeforeCall(id, fieldsBuilds, limit, null);
        Type localVarReturnType = new TypeToken<BuildsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preReleaseVersionsBuildsGetToManyRelatedAsync(String id, List<String> fieldsBuilds, Integer limit, final ApiCallback<BuildsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = preReleaseVersionsBuildsGetToManyRelatedValidateBeforeCall(id, fieldsBuilds, limit, _callback);
        Type localVarReturnType = new TypeToken<BuildsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preReleaseVersionsGetCollection
     * @param filterBuildsExpired filter by attribute &#39;builds.expired&#39; (optional)
     * @param filterBuildsProcessingState filter by attribute &#39;builds.processingState&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersion filter by attribute &#39;version&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of PreReleaseVersions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preReleaseVersionsGetCollectionCall(List<String> filterBuildsExpired, List<String> filterBuildsProcessingState, List<String> filterPlatform, List<String> filterVersion, List<String> filterApp, List<String> filterBuilds, List<String> sort, List<String> fieldsPreReleaseVersions, Integer limit, List<String> include, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitBuilds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/preReleaseVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterBuildsExpired != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[builds.expired]", filterBuildsExpired));
        }

        if (filterBuildsProcessingState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[builds.processingState]", filterBuildsProcessingState));
        }

        if (filterPlatform != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[platform]", filterPlatform));
        }

        if (filterVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[version]", filterVersion));
        }

        if (filterApp != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[app]", filterApp));
        }

        if (filterBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[builds]", filterBuilds));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sort", sort));
        }

        if (fieldsPreReleaseVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limitBuilds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[builds]", limitBuilds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preReleaseVersionsGetCollectionValidateBeforeCall(List<String> filterBuildsExpired, List<String> filterBuildsProcessingState, List<String> filterPlatform, List<String> filterVersion, List<String> filterApp, List<String> filterBuilds, List<String> sort, List<String> fieldsPreReleaseVersions, Integer limit, List<String> include, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitBuilds, final ApiCallback _callback) throws ApiException {
        return preReleaseVersionsGetCollectionCall(filterBuildsExpired, filterBuildsProcessingState, filterPlatform, filterVersion, filterApp, filterBuilds, sort, fieldsPreReleaseVersions, limit, include, fieldsBuilds, fieldsApps, limitBuilds, _callback);

    }

    /**
     * 
     * 
     * @param filterBuildsExpired filter by attribute &#39;builds.expired&#39; (optional)
     * @param filterBuildsProcessingState filter by attribute &#39;builds.processingState&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersion filter by attribute &#39;version&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return PreReleaseVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of PreReleaseVersions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public PreReleaseVersionsResponse preReleaseVersionsGetCollection(List<String> filterBuildsExpired, List<String> filterBuildsProcessingState, List<String> filterPlatform, List<String> filterVersion, List<String> filterApp, List<String> filterBuilds, List<String> sort, List<String> fieldsPreReleaseVersions, Integer limit, List<String> include, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitBuilds) throws ApiException {
        ApiResponse<PreReleaseVersionsResponse> localVarResp = preReleaseVersionsGetCollectionWithHttpInfo(filterBuildsExpired, filterBuildsProcessingState, filterPlatform, filterVersion, filterApp, filterBuilds, sort, fieldsPreReleaseVersions, limit, include, fieldsBuilds, fieldsApps, limitBuilds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param filterBuildsExpired filter by attribute &#39;builds.expired&#39; (optional)
     * @param filterBuildsProcessingState filter by attribute &#39;builds.processingState&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersion filter by attribute &#39;version&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return ApiResponse&lt;PreReleaseVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of PreReleaseVersions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreReleaseVersionsResponse> preReleaseVersionsGetCollectionWithHttpInfo(List<String> filterBuildsExpired, List<String> filterBuildsProcessingState, List<String> filterPlatform, List<String> filterVersion, List<String> filterApp, List<String> filterBuilds, List<String> sort, List<String> fieldsPreReleaseVersions, Integer limit, List<String> include, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitBuilds) throws ApiException {
        okhttp3.Call localVarCall = preReleaseVersionsGetCollectionValidateBeforeCall(filterBuildsExpired, filterBuildsProcessingState, filterPlatform, filterVersion, filterApp, filterBuilds, sort, fieldsPreReleaseVersions, limit, include, fieldsBuilds, fieldsApps, limitBuilds, null);
        Type localVarReturnType = new TypeToken<PreReleaseVersionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param filterBuildsExpired filter by attribute &#39;builds.expired&#39; (optional)
     * @param filterBuildsProcessingState filter by attribute &#39;builds.processingState&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersion filter by attribute &#39;version&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of PreReleaseVersions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preReleaseVersionsGetCollectionAsync(List<String> filterBuildsExpired, List<String> filterBuildsProcessingState, List<String> filterPlatform, List<String> filterVersion, List<String> filterApp, List<String> filterBuilds, List<String> sort, List<String> fieldsPreReleaseVersions, Integer limit, List<String> include, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitBuilds, final ApiCallback<PreReleaseVersionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = preReleaseVersionsGetCollectionValidateBeforeCall(filterBuildsExpired, filterBuildsProcessingState, filterPlatform, filterVersion, filterApp, filterBuilds, sort, fieldsPreReleaseVersions, limit, include, fieldsBuilds, fieldsApps, limitBuilds, _callback);
        Type localVarReturnType = new TypeToken<PreReleaseVersionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preReleaseVersionsGetInstance
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single PrereleaseVersion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preReleaseVersionsGetInstanceCall(String id, List<String> fieldsPreReleaseVersions, List<String> include, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitBuilds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/preReleaseVersions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsPreReleaseVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limitBuilds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[builds]", limitBuilds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preReleaseVersionsGetInstanceValidateBeforeCall(String id, List<String> fieldsPreReleaseVersions, List<String> include, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitBuilds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling preReleaseVersionsGetInstance(Async)");
        }

        return preReleaseVersionsGetInstanceCall(id, fieldsPreReleaseVersions, include, fieldsBuilds, fieldsApps, limitBuilds, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return PrereleaseVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single PrereleaseVersion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public PrereleaseVersionResponse preReleaseVersionsGetInstance(String id, List<String> fieldsPreReleaseVersions, List<String> include, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitBuilds) throws ApiException {
        ApiResponse<PrereleaseVersionResponse> localVarResp = preReleaseVersionsGetInstanceWithHttpInfo(id, fieldsPreReleaseVersions, include, fieldsBuilds, fieldsApps, limitBuilds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return ApiResponse&lt;PrereleaseVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single PrereleaseVersion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrereleaseVersionResponse> preReleaseVersionsGetInstanceWithHttpInfo(String id, List<String> fieldsPreReleaseVersions, List<String> include, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitBuilds) throws ApiException {
        okhttp3.Call localVarCall = preReleaseVersionsGetInstanceValidateBeforeCall(id, fieldsPreReleaseVersions, include, fieldsBuilds, fieldsApps, limitBuilds, null);
        Type localVarReturnType = new TypeToken<PrereleaseVersionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single PrereleaseVersion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preReleaseVersionsGetInstanceAsync(String id, List<String> fieldsPreReleaseVersions, List<String> include, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitBuilds, final ApiCallback<PrereleaseVersionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = preReleaseVersionsGetInstanceValidateBeforeCall(id, fieldsPreReleaseVersions, include, fieldsBuilds, fieldsApps, limitBuilds, _callback);
        Type localVarReturnType = new TypeToken<PrereleaseVersionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
