/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppBetaTestersLinkagesRequest;
import org.openapitools.client.model.AppInfosResponse;
import org.openapitools.client.model.AppPreOrderResponse;
import org.openapitools.client.model.AppPricesResponse;
import org.openapitools.client.model.AppResponse;
import org.openapitools.client.model.AppStoreVersionsResponse;
import org.openapitools.client.model.AppUpdateRequest;
import org.openapitools.client.model.AppsResponse;
import org.openapitools.client.model.BetaAppLocalizationsResponse;
import org.openapitools.client.model.BetaAppReviewDetailResponse;
import org.openapitools.client.model.BetaGroupsResponse;
import org.openapitools.client.model.BetaLicenseAgreementResponse;
import org.openapitools.client.model.BuildsResponse;
import org.openapitools.client.model.EndUserLicenseAgreementResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GameCenterEnabledVersionsResponse;
import org.openapitools.client.model.InAppPurchasesResponse;
import org.openapitools.client.model.PerfPowerMetricsResponse;
import org.openapitools.client.model.PreReleaseVersionsResponse;
import org.openapitools.client.model.TerritoriesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appsAppInfosGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @param fieldsAppInfoLocalizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppInfosGetToManyRelatedCall(String id, List<String> fieldsAgeRatingDeclarations, List<String> fieldsAppInfos, List<String> fieldsAppCategories, List<String> fieldsAppInfoLocalizations, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/appInfos"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsAgeRatingDeclarations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
        }

        if (fieldsAppInfos != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appInfos]", fieldsAppInfos));
        }

        if (fieldsAppCategories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appCategories]", fieldsAppCategories));
        }

        if (fieldsAppInfoLocalizations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appInfoLocalizations]", fieldsAppInfoLocalizations));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAppInfosGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsAgeRatingDeclarations, List<String> fieldsAppInfos, List<String> fieldsAppCategories, List<String> fieldsAppInfoLocalizations, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsAppInfosGetToManyRelated(Async)");
        }

        return appsAppInfosGetToManyRelatedCall(id, fieldsAgeRatingDeclarations, fieldsAppInfos, fieldsAppCategories, fieldsAppInfoLocalizations, fieldsApps, limit, include, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @param fieldsAppInfoLocalizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return AppInfosResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppInfosResponse appsAppInfosGetToManyRelated(String id, List<String> fieldsAgeRatingDeclarations, List<String> fieldsAppInfos, List<String> fieldsAppCategories, List<String> fieldsAppInfoLocalizations, List<String> fieldsApps, Integer limit, List<String> include) throws ApiException {
        ApiResponse<AppInfosResponse> localVarResp = appsAppInfosGetToManyRelatedWithHttpInfo(id, fieldsAgeRatingDeclarations, fieldsAppInfos, fieldsAppCategories, fieldsAppInfoLocalizations, fieldsApps, limit, include);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @param fieldsAppInfoLocalizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return ApiResponse&lt;AppInfosResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppInfosResponse> appsAppInfosGetToManyRelatedWithHttpInfo(String id, List<String> fieldsAgeRatingDeclarations, List<String> fieldsAppInfos, List<String> fieldsAppCategories, List<String> fieldsAppInfoLocalizations, List<String> fieldsApps, Integer limit, List<String> include) throws ApiException {
        okhttp3.Call localVarCall = appsAppInfosGetToManyRelatedValidateBeforeCall(id, fieldsAgeRatingDeclarations, fieldsAppInfos, fieldsAppCategories, fieldsAppInfoLocalizations, fieldsApps, limit, include, null);
        Type localVarReturnType = new TypeToken<AppInfosResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @param fieldsAppInfoLocalizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppInfosGetToManyRelatedAsync(String id, List<String> fieldsAgeRatingDeclarations, List<String> fieldsAppInfos, List<String> fieldsAppCategories, List<String> fieldsAppInfoLocalizations, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback<AppInfosResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAppInfosGetToManyRelatedValidateBeforeCall(id, fieldsAgeRatingDeclarations, fieldsAppInfos, fieldsAppCategories, fieldsAppInfoLocalizations, fieldsApps, limit, include, _callback);
        Type localVarReturnType = new TypeToken<AppInfosResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsAppStoreVersionsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param filterAppStoreState filter by attribute &#39;appStoreState&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersionString filter by attribute &#39;versionString&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param fieldsIdfaDeclarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsRoutingAppCoverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param fieldsAppStoreVersionPhasedReleases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsAppStoreVersionSubmissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppStoreVersionsGetToManyRelatedCall(String id, List<String> filterAppStoreState, List<String> filterPlatform, List<String> filterVersionString, List<String> filterId, List<String> fieldsIdfaDeclarations, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsRoutingAppCoverages, List<String> fieldsAppStoreVersionPhasedReleases, List<String> fieldsAgeRatingDeclarations, List<String> fieldsAppStoreReviewDetails, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsAppStoreVersionSubmissions, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/appStoreVersions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterAppStoreState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[appStoreState]", filterAppStoreState));
        }

        if (filterPlatform != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[platform]", filterPlatform));
        }

        if (filterVersionString != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[versionString]", filterVersionString));
        }

        if (filterId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[id]", filterId));
        }

        if (fieldsIdfaDeclarations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[idfaDeclarations]", fieldsIdfaDeclarations));
        }

        if (fieldsAppStoreVersionLocalizations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
        }

        if (fieldsRoutingAppCoverages != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
        }

        if (fieldsAppStoreVersionPhasedReleases != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
        }

        if (fieldsAgeRatingDeclarations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
        }

        if (fieldsAppStoreReviewDetails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
        }

        if (fieldsAppStoreVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
        }

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (fieldsAppStoreVersionSubmissions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAppStoreVersionsGetToManyRelatedValidateBeforeCall(String id, List<String> filterAppStoreState, List<String> filterPlatform, List<String> filterVersionString, List<String> filterId, List<String> fieldsIdfaDeclarations, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsRoutingAppCoverages, List<String> fieldsAppStoreVersionPhasedReleases, List<String> fieldsAgeRatingDeclarations, List<String> fieldsAppStoreReviewDetails, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsAppStoreVersionSubmissions, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsAppStoreVersionsGetToManyRelated(Async)");
        }

        return appsAppStoreVersionsGetToManyRelatedCall(id, filterAppStoreState, filterPlatform, filterVersionString, filterId, fieldsIdfaDeclarations, fieldsAppStoreVersionLocalizations, fieldsRoutingAppCoverages, fieldsAppStoreVersionPhasedReleases, fieldsAgeRatingDeclarations, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsBuilds, fieldsAppStoreVersionSubmissions, fieldsApps, limit, include, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterAppStoreState filter by attribute &#39;appStoreState&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersionString filter by attribute &#39;versionString&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param fieldsIdfaDeclarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsRoutingAppCoverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param fieldsAppStoreVersionPhasedReleases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsAppStoreVersionSubmissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return AppStoreVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppStoreVersionsResponse appsAppStoreVersionsGetToManyRelated(String id, List<String> filterAppStoreState, List<String> filterPlatform, List<String> filterVersionString, List<String> filterId, List<String> fieldsIdfaDeclarations, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsRoutingAppCoverages, List<String> fieldsAppStoreVersionPhasedReleases, List<String> fieldsAgeRatingDeclarations, List<String> fieldsAppStoreReviewDetails, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsAppStoreVersionSubmissions, List<String> fieldsApps, Integer limit, List<String> include) throws ApiException {
        ApiResponse<AppStoreVersionsResponse> localVarResp = appsAppStoreVersionsGetToManyRelatedWithHttpInfo(id, filterAppStoreState, filterPlatform, filterVersionString, filterId, fieldsIdfaDeclarations, fieldsAppStoreVersionLocalizations, fieldsRoutingAppCoverages, fieldsAppStoreVersionPhasedReleases, fieldsAgeRatingDeclarations, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsBuilds, fieldsAppStoreVersionSubmissions, fieldsApps, limit, include);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterAppStoreState filter by attribute &#39;appStoreState&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersionString filter by attribute &#39;versionString&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param fieldsIdfaDeclarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsRoutingAppCoverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param fieldsAppStoreVersionPhasedReleases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsAppStoreVersionSubmissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return ApiResponse&lt;AppStoreVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppStoreVersionsResponse> appsAppStoreVersionsGetToManyRelatedWithHttpInfo(String id, List<String> filterAppStoreState, List<String> filterPlatform, List<String> filterVersionString, List<String> filterId, List<String> fieldsIdfaDeclarations, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsRoutingAppCoverages, List<String> fieldsAppStoreVersionPhasedReleases, List<String> fieldsAgeRatingDeclarations, List<String> fieldsAppStoreReviewDetails, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsAppStoreVersionSubmissions, List<String> fieldsApps, Integer limit, List<String> include) throws ApiException {
        okhttp3.Call localVarCall = appsAppStoreVersionsGetToManyRelatedValidateBeforeCall(id, filterAppStoreState, filterPlatform, filterVersionString, filterId, fieldsIdfaDeclarations, fieldsAppStoreVersionLocalizations, fieldsRoutingAppCoverages, fieldsAppStoreVersionPhasedReleases, fieldsAgeRatingDeclarations, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsBuilds, fieldsAppStoreVersionSubmissions, fieldsApps, limit, include, null);
        Type localVarReturnType = new TypeToken<AppStoreVersionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param filterAppStoreState filter by attribute &#39;appStoreState&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersionString filter by attribute &#39;versionString&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param fieldsIdfaDeclarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsRoutingAppCoverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param fieldsAppStoreVersionPhasedReleases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsAppStoreVersionSubmissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppStoreVersionsGetToManyRelatedAsync(String id, List<String> filterAppStoreState, List<String> filterPlatform, List<String> filterVersionString, List<String> filterId, List<String> fieldsIdfaDeclarations, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsRoutingAppCoverages, List<String> fieldsAppStoreVersionPhasedReleases, List<String> fieldsAgeRatingDeclarations, List<String> fieldsAppStoreReviewDetails, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsAppStoreVersionSubmissions, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback<AppStoreVersionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAppStoreVersionsGetToManyRelatedValidateBeforeCall(id, filterAppStoreState, filterPlatform, filterVersionString, filterId, fieldsIdfaDeclarations, fieldsAppStoreVersionLocalizations, fieldsRoutingAppCoverages, fieldsAppStoreVersionPhasedReleases, fieldsAgeRatingDeclarations, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsBuilds, fieldsAppStoreVersionSubmissions, fieldsApps, limit, include, _callback);
        Type localVarReturnType = new TypeToken<AppStoreVersionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsAvailableTerritoriesGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAvailableTerritoriesGetToManyRelatedCall(String id, List<String> fieldsTerritories, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/availableTerritories"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsTerritories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[territories]", fieldsTerritories));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAvailableTerritoriesGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsTerritories, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsAvailableTerritoriesGetToManyRelated(Async)");
        }

        return appsAvailableTerritoriesGetToManyRelatedCall(id, fieldsTerritories, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param limit maximum resources per page (optional)
     * @return TerritoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public TerritoriesResponse appsAvailableTerritoriesGetToManyRelated(String id, List<String> fieldsTerritories, Integer limit) throws ApiException {
        ApiResponse<TerritoriesResponse> localVarResp = appsAvailableTerritoriesGetToManyRelatedWithHttpInfo(id, fieldsTerritories, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;TerritoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TerritoriesResponse> appsAvailableTerritoriesGetToManyRelatedWithHttpInfo(String id, List<String> fieldsTerritories, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = appsAvailableTerritoriesGetToManyRelatedValidateBeforeCall(id, fieldsTerritories, limit, null);
        Type localVarReturnType = new TypeToken<TerritoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAvailableTerritoriesGetToManyRelatedAsync(String id, List<String> fieldsTerritories, Integer limit, final ApiCallback<TerritoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAvailableTerritoriesGetToManyRelatedValidateBeforeCall(id, fieldsTerritories, limit, _callback);
        Type localVarReturnType = new TypeToken<TerritoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsBetaAppLocalizationsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBetaAppLocalizationsGetToManyRelatedCall(String id, List<String> fieldsBetaAppLocalizations, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/betaAppLocalizations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBetaAppLocalizations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaAppLocalizations]", fieldsBetaAppLocalizations));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsBetaAppLocalizationsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsBetaAppLocalizations, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsBetaAppLocalizationsGetToManyRelated(Async)");
        }

        return appsBetaAppLocalizationsGetToManyRelatedCall(id, fieldsBetaAppLocalizations, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @return BetaAppLocalizationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaAppLocalizationsResponse appsBetaAppLocalizationsGetToManyRelated(String id, List<String> fieldsBetaAppLocalizations, Integer limit) throws ApiException {
        ApiResponse<BetaAppLocalizationsResponse> localVarResp = appsBetaAppLocalizationsGetToManyRelatedWithHttpInfo(id, fieldsBetaAppLocalizations, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BetaAppLocalizationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaAppLocalizationsResponse> appsBetaAppLocalizationsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsBetaAppLocalizations, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = appsBetaAppLocalizationsGetToManyRelatedValidateBeforeCall(id, fieldsBetaAppLocalizations, limit, null);
        Type localVarReturnType = new TypeToken<BetaAppLocalizationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBetaAppLocalizationsGetToManyRelatedAsync(String id, List<String> fieldsBetaAppLocalizations, Integer limit, final ApiCallback<BetaAppLocalizationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsBetaAppLocalizationsGetToManyRelatedValidateBeforeCall(id, fieldsBetaAppLocalizations, limit, _callback);
        Type localVarReturnType = new TypeToken<BetaAppLocalizationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsBetaAppReviewDetailGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBetaAppReviewDetailGetToOneRelatedCall(String id, List<String> fieldsBetaAppReviewDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/betaAppReviewDetail"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBetaAppReviewDetails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaAppReviewDetails]", fieldsBetaAppReviewDetails));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsBetaAppReviewDetailGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsBetaAppReviewDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsBetaAppReviewDetailGetToOneRelated(Async)");
        }

        return appsBetaAppReviewDetailGetToOneRelatedCall(id, fieldsBetaAppReviewDetails, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @return BetaAppReviewDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaAppReviewDetailResponse appsBetaAppReviewDetailGetToOneRelated(String id, List<String> fieldsBetaAppReviewDetails) throws ApiException {
        ApiResponse<BetaAppReviewDetailResponse> localVarResp = appsBetaAppReviewDetailGetToOneRelatedWithHttpInfo(id, fieldsBetaAppReviewDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @return ApiResponse&lt;BetaAppReviewDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaAppReviewDetailResponse> appsBetaAppReviewDetailGetToOneRelatedWithHttpInfo(String id, List<String> fieldsBetaAppReviewDetails) throws ApiException {
        okhttp3.Call localVarCall = appsBetaAppReviewDetailGetToOneRelatedValidateBeforeCall(id, fieldsBetaAppReviewDetails, null);
        Type localVarReturnType = new TypeToken<BetaAppReviewDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBetaAppReviewDetailGetToOneRelatedAsync(String id, List<String> fieldsBetaAppReviewDetails, final ApiCallback<BetaAppReviewDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsBetaAppReviewDetailGetToOneRelatedValidateBeforeCall(id, fieldsBetaAppReviewDetails, _callback);
        Type localVarReturnType = new TypeToken<BetaAppReviewDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsBetaGroupsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBetaGroupsGetToManyRelatedCall(String id, List<String> fieldsBetaGroups, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/betaGroups"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBetaGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaGroups]", fieldsBetaGroups));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsBetaGroupsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsBetaGroups, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsBetaGroupsGetToManyRelated(Async)");
        }

        return appsBetaGroupsGetToManyRelatedCall(id, fieldsBetaGroups, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param limit maximum resources per page (optional)
     * @return BetaGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaGroupsResponse appsBetaGroupsGetToManyRelated(String id, List<String> fieldsBetaGroups, Integer limit) throws ApiException {
        ApiResponse<BetaGroupsResponse> localVarResp = appsBetaGroupsGetToManyRelatedWithHttpInfo(id, fieldsBetaGroups, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BetaGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaGroupsResponse> appsBetaGroupsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsBetaGroups, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = appsBetaGroupsGetToManyRelatedValidateBeforeCall(id, fieldsBetaGroups, limit, null);
        Type localVarReturnType = new TypeToken<BetaGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBetaGroupsGetToManyRelatedAsync(String id, List<String> fieldsBetaGroups, Integer limit, final ApiCallback<BetaGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsBetaGroupsGetToManyRelatedValidateBeforeCall(id, fieldsBetaGroups, limit, _callback);
        Type localVarReturnType = new TypeToken<BetaGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsBetaLicenseAgreementGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBetaLicenseAgreementGetToOneRelatedCall(String id, List<String> fieldsBetaLicenseAgreements, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/betaLicenseAgreement"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBetaLicenseAgreements != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaLicenseAgreements]", fieldsBetaLicenseAgreements));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsBetaLicenseAgreementGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsBetaLicenseAgreements, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsBetaLicenseAgreementGetToOneRelated(Async)");
        }

        return appsBetaLicenseAgreementGetToOneRelatedCall(id, fieldsBetaLicenseAgreements, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @return BetaLicenseAgreementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaLicenseAgreementResponse appsBetaLicenseAgreementGetToOneRelated(String id, List<String> fieldsBetaLicenseAgreements) throws ApiException {
        ApiResponse<BetaLicenseAgreementResponse> localVarResp = appsBetaLicenseAgreementGetToOneRelatedWithHttpInfo(id, fieldsBetaLicenseAgreements);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @return ApiResponse&lt;BetaLicenseAgreementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaLicenseAgreementResponse> appsBetaLicenseAgreementGetToOneRelatedWithHttpInfo(String id, List<String> fieldsBetaLicenseAgreements) throws ApiException {
        okhttp3.Call localVarCall = appsBetaLicenseAgreementGetToOneRelatedValidateBeforeCall(id, fieldsBetaLicenseAgreements, null);
        Type localVarReturnType = new TypeToken<BetaLicenseAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBetaLicenseAgreementGetToOneRelatedAsync(String id, List<String> fieldsBetaLicenseAgreements, final ApiCallback<BetaLicenseAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsBetaLicenseAgreementGetToOneRelatedValidateBeforeCall(id, fieldsBetaLicenseAgreements, _callback);
        Type localVarReturnType = new TypeToken<BetaLicenseAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsBetaTestersDeleteToManyRelationship
     * @param id the id of the requested resource (required)
     * @param appBetaTestersLinkagesRequest List of related linkages (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBetaTestersDeleteToManyRelationshipCall(String id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appBetaTestersLinkagesRequest;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/relationships/betaTesters"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsBetaTestersDeleteToManyRelationshipValidateBeforeCall(String id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsBetaTestersDeleteToManyRelationship(Async)");
        }

        // verify the required parameter 'appBetaTestersLinkagesRequest' is set
        if (appBetaTestersLinkagesRequest == null) {
            throw new ApiException("Missing the required parameter 'appBetaTestersLinkagesRequest' when calling appsBetaTestersDeleteToManyRelationship(Async)");
        }

        return appsBetaTestersDeleteToManyRelationshipCall(id, appBetaTestersLinkagesRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param appBetaTestersLinkagesRequest List of related linkages (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void appsBetaTestersDeleteToManyRelationship(String id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest) throws ApiException {
        appsBetaTestersDeleteToManyRelationshipWithHttpInfo(id, appBetaTestersLinkagesRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param appBetaTestersLinkagesRequest List of related linkages (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appsBetaTestersDeleteToManyRelationshipWithHttpInfo(String id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest) throws ApiException {
        okhttp3.Call localVarCall = appsBetaTestersDeleteToManyRelationshipValidateBeforeCall(id, appBetaTestersLinkagesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param appBetaTestersLinkagesRequest List of related linkages (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBetaTestersDeleteToManyRelationshipAsync(String id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsBetaTestersDeleteToManyRelationshipValidateBeforeCall(id, appBetaTestersLinkagesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsBuildsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBuildsGetToManyRelatedCall(String id, List<String> fieldsBuilds, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/builds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsBuildsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsBuilds, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsBuildsGetToManyRelated(Async)");
        }

        return appsBuildsGetToManyRelatedCall(id, fieldsBuilds, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @return BuildsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BuildsResponse appsBuildsGetToManyRelated(String id, List<String> fieldsBuilds, Integer limit) throws ApiException {
        ApiResponse<BuildsResponse> localVarResp = appsBuildsGetToManyRelatedWithHttpInfo(id, fieldsBuilds, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BuildsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsResponse> appsBuildsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsBuilds, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = appsBuildsGetToManyRelatedValidateBeforeCall(id, fieldsBuilds, limit, null);
        Type localVarReturnType = new TypeToken<BuildsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBuildsGetToManyRelatedAsync(String id, List<String> fieldsBuilds, Integer limit, final ApiCallback<BuildsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsBuildsGetToManyRelatedValidateBeforeCall(id, fieldsBuilds, limit, _callback);
        Type localVarReturnType = new TypeToken<BuildsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsEndUserLicenseAgreementGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsEndUserLicenseAgreementGetToOneRelatedCall(String id, List<String> fieldsEndUserLicenseAgreements, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/endUserLicenseAgreement"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsEndUserLicenseAgreements != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[endUserLicenseAgreements]", fieldsEndUserLicenseAgreements));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsEndUserLicenseAgreementGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsEndUserLicenseAgreements, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsEndUserLicenseAgreementGetToOneRelated(Async)");
        }

        return appsEndUserLicenseAgreementGetToOneRelatedCall(id, fieldsEndUserLicenseAgreements, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @return EndUserLicenseAgreementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public EndUserLicenseAgreementResponse appsEndUserLicenseAgreementGetToOneRelated(String id, List<String> fieldsEndUserLicenseAgreements) throws ApiException {
        ApiResponse<EndUserLicenseAgreementResponse> localVarResp = appsEndUserLicenseAgreementGetToOneRelatedWithHttpInfo(id, fieldsEndUserLicenseAgreements);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @return ApiResponse&lt;EndUserLicenseAgreementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndUserLicenseAgreementResponse> appsEndUserLicenseAgreementGetToOneRelatedWithHttpInfo(String id, List<String> fieldsEndUserLicenseAgreements) throws ApiException {
        okhttp3.Call localVarCall = appsEndUserLicenseAgreementGetToOneRelatedValidateBeforeCall(id, fieldsEndUserLicenseAgreements, null);
        Type localVarReturnType = new TypeToken<EndUserLicenseAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsEndUserLicenseAgreementGetToOneRelatedAsync(String id, List<String> fieldsEndUserLicenseAgreements, final ApiCallback<EndUserLicenseAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsEndUserLicenseAgreementGetToOneRelatedValidateBeforeCall(id, fieldsEndUserLicenseAgreements, _callback);
        Type localVarReturnType = new TypeToken<EndUserLicenseAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsGameCenterEnabledVersionsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersionString filter by attribute &#39;versionString&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGameCenterEnabledVersionsGetToManyRelatedCall(String id, List<String> filterPlatform, List<String> filterVersionString, List<String> filterId, List<String> sort, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/gameCenterEnabledVersions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPlatform != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[platform]", filterPlatform));
        }

        if (filterVersionString != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[versionString]", filterVersionString));
        }

        if (filterId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[id]", filterId));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sort", sort));
        }

        if (fieldsGameCenterEnabledVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[gameCenterEnabledVersions]", fieldsGameCenterEnabledVersions));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsGameCenterEnabledVersionsGetToManyRelatedValidateBeforeCall(String id, List<String> filterPlatform, List<String> filterVersionString, List<String> filterId, List<String> sort, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsGameCenterEnabledVersionsGetToManyRelated(Async)");
        }

        return appsGameCenterEnabledVersionsGetToManyRelatedCall(id, filterPlatform, filterVersionString, filterId, sort, fieldsGameCenterEnabledVersions, fieldsApps, limit, include, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersionString filter by attribute &#39;versionString&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return GameCenterEnabledVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public GameCenterEnabledVersionsResponse appsGameCenterEnabledVersionsGetToManyRelated(String id, List<String> filterPlatform, List<String> filterVersionString, List<String> filterId, List<String> sort, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsApps, Integer limit, List<String> include) throws ApiException {
        ApiResponse<GameCenterEnabledVersionsResponse> localVarResp = appsGameCenterEnabledVersionsGetToManyRelatedWithHttpInfo(id, filterPlatform, filterVersionString, filterId, sort, fieldsGameCenterEnabledVersions, fieldsApps, limit, include);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersionString filter by attribute &#39;versionString&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return ApiResponse&lt;GameCenterEnabledVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GameCenterEnabledVersionsResponse> appsGameCenterEnabledVersionsGetToManyRelatedWithHttpInfo(String id, List<String> filterPlatform, List<String> filterVersionString, List<String> filterId, List<String> sort, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsApps, Integer limit, List<String> include) throws ApiException {
        okhttp3.Call localVarCall = appsGameCenterEnabledVersionsGetToManyRelatedValidateBeforeCall(id, filterPlatform, filterVersionString, filterId, sort, fieldsGameCenterEnabledVersions, fieldsApps, limit, include, null);
        Type localVarReturnType = new TypeToken<GameCenterEnabledVersionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersionString filter by attribute &#39;versionString&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGameCenterEnabledVersionsGetToManyRelatedAsync(String id, List<String> filterPlatform, List<String> filterVersionString, List<String> filterId, List<String> sort, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback<GameCenterEnabledVersionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsGameCenterEnabledVersionsGetToManyRelatedValidateBeforeCall(id, filterPlatform, filterVersionString, filterId, sort, fieldsGameCenterEnabledVersions, fieldsApps, limit, include, _callback);
        Type localVarReturnType = new TypeToken<GameCenterEnabledVersionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsGetCollection
     * @param filterAppStoreVersionsAppStoreState filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     * @param filterAppStoreVersionsPlatform filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     * @param filterBundleId filter by attribute &#39;bundleId&#39; (optional)
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterSku filter by attribute &#39;sku&#39; (optional)
     * @param filterAppStoreVersions filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param existsGameCenterEnabledVersions filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param limitAppInfos maximum number of related appInfos returned (when they are included) (optional)
     * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param limitPrices maximum number of related prices returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Apps </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetCollectionCall(List<String> filterAppStoreVersionsAppStoreState, List<String> filterAppStoreVersionsPlatform, List<String> filterBundleId, List<String> filterName, List<String> filterSku, List<String> filterAppStoreVersions, List<String> filterId, List<String> existsGameCenterEnabledVersions, List<String> sort, List<String> fieldsApps, Integer limit, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsPerfPowerMetrics, List<String> fieldsAppInfos, List<String> fieldsAppPreOrders, List<String> fieldsPreReleaseVersions, List<String> fieldsAppPrices, List<String> fieldsInAppPurchases, List<String> fieldsBetaAppReviewDetails, List<String> fieldsTerritories, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsBetaAppLocalizations, List<String> fieldsBetaLicenseAgreements, List<String> fieldsEndUserLicenseAgreements, Integer limitAppInfos, Integer limitAppStoreVersions, Integer limitAvailableTerritories, Integer limitBetaAppLocalizations, Integer limitBetaGroups, Integer limitBuilds, Integer limitGameCenterEnabledVersions, Integer limitInAppPurchases, Integer limitPreReleaseVersions, Integer limitPrices, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterAppStoreVersionsAppStoreState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[appStoreVersions.appStoreState]", filterAppStoreVersionsAppStoreState));
        }

        if (filterAppStoreVersionsPlatform != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[appStoreVersions.platform]", filterAppStoreVersionsPlatform));
        }

        if (filterBundleId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[bundleId]", filterBundleId));
        }

        if (filterName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[name]", filterName));
        }

        if (filterSku != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[sku]", filterSku));
        }

        if (filterAppStoreVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[appStoreVersions]", filterAppStoreVersions));
        }

        if (filterId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[id]", filterId));
        }

        if (existsGameCenterEnabledVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exists[gameCenterEnabledVersions]", existsGameCenterEnabledVersions));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sort", sort));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsBetaGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaGroups]", fieldsBetaGroups));
        }

        if (fieldsPerfPowerMetrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[perfPowerMetrics]", fieldsPerfPowerMetrics));
        }

        if (fieldsAppInfos != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appInfos]", fieldsAppInfos));
        }

        if (fieldsAppPreOrders != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appPreOrders]", fieldsAppPreOrders));
        }

        if (fieldsPreReleaseVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
        }

        if (fieldsAppPrices != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appPrices]", fieldsAppPrices));
        }

        if (fieldsInAppPurchases != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
        }

        if (fieldsBetaAppReviewDetails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaAppReviewDetails]", fieldsBetaAppReviewDetails));
        }

        if (fieldsTerritories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[territories]", fieldsTerritories));
        }

        if (fieldsGameCenterEnabledVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[gameCenterEnabledVersions]", fieldsGameCenterEnabledVersions));
        }

        if (fieldsAppStoreVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
        }

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (fieldsBetaAppLocalizations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaAppLocalizations]", fieldsBetaAppLocalizations));
        }

        if (fieldsBetaLicenseAgreements != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaLicenseAgreements]", fieldsBetaLicenseAgreements));
        }

        if (fieldsEndUserLicenseAgreements != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[endUserLicenseAgreements]", fieldsEndUserLicenseAgreements));
        }

        if (limitAppInfos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[appInfos]", limitAppInfos));
        }

        if (limitAppStoreVersions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[appStoreVersions]", limitAppStoreVersions));
        }

        if (limitAvailableTerritories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[availableTerritories]", limitAvailableTerritories));
        }

        if (limitBetaAppLocalizations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[betaAppLocalizations]", limitBetaAppLocalizations));
        }

        if (limitBetaGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[betaGroups]", limitBetaGroups));
        }

        if (limitBuilds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[builds]", limitBuilds));
        }

        if (limitGameCenterEnabledVersions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[gameCenterEnabledVersions]", limitGameCenterEnabledVersions));
        }

        if (limitInAppPurchases != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[inAppPurchases]", limitInAppPurchases));
        }

        if (limitPreReleaseVersions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[preReleaseVersions]", limitPreReleaseVersions));
        }

        if (limitPrices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[prices]", limitPrices));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsGetCollectionValidateBeforeCall(List<String> filterAppStoreVersionsAppStoreState, List<String> filterAppStoreVersionsPlatform, List<String> filterBundleId, List<String> filterName, List<String> filterSku, List<String> filterAppStoreVersions, List<String> filterId, List<String> existsGameCenterEnabledVersions, List<String> sort, List<String> fieldsApps, Integer limit, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsPerfPowerMetrics, List<String> fieldsAppInfos, List<String> fieldsAppPreOrders, List<String> fieldsPreReleaseVersions, List<String> fieldsAppPrices, List<String> fieldsInAppPurchases, List<String> fieldsBetaAppReviewDetails, List<String> fieldsTerritories, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsBetaAppLocalizations, List<String> fieldsBetaLicenseAgreements, List<String> fieldsEndUserLicenseAgreements, Integer limitAppInfos, Integer limitAppStoreVersions, Integer limitAvailableTerritories, Integer limitBetaAppLocalizations, Integer limitBetaGroups, Integer limitBuilds, Integer limitGameCenterEnabledVersions, Integer limitInAppPurchases, Integer limitPreReleaseVersions, Integer limitPrices, final ApiCallback _callback) throws ApiException {
        return appsGetCollectionCall(filterAppStoreVersionsAppStoreState, filterAppStoreVersionsPlatform, filterBundleId, filterName, filterSku, filterAppStoreVersions, filterId, existsGameCenterEnabledVersions, sort, fieldsApps, limit, include, fieldsBetaGroups, fieldsPerfPowerMetrics, fieldsAppInfos, fieldsAppPreOrders, fieldsPreReleaseVersions, fieldsAppPrices, fieldsInAppPurchases, fieldsBetaAppReviewDetails, fieldsTerritories, fieldsGameCenterEnabledVersions, fieldsAppStoreVersions, fieldsBuilds, fieldsBetaAppLocalizations, fieldsBetaLicenseAgreements, fieldsEndUserLicenseAgreements, limitAppInfos, limitAppStoreVersions, limitAvailableTerritories, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitPreReleaseVersions, limitPrices, _callback);

    }

    /**
     * 
     * 
     * @param filterAppStoreVersionsAppStoreState filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     * @param filterAppStoreVersionsPlatform filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     * @param filterBundleId filter by attribute &#39;bundleId&#39; (optional)
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterSku filter by attribute &#39;sku&#39; (optional)
     * @param filterAppStoreVersions filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param existsGameCenterEnabledVersions filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param limitAppInfos maximum number of related appInfos returned (when they are included) (optional)
     * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param limitPrices maximum number of related prices returned (when they are included) (optional)
     * @return AppsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Apps </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public AppsResponse appsGetCollection(List<String> filterAppStoreVersionsAppStoreState, List<String> filterAppStoreVersionsPlatform, List<String> filterBundleId, List<String> filterName, List<String> filterSku, List<String> filterAppStoreVersions, List<String> filterId, List<String> existsGameCenterEnabledVersions, List<String> sort, List<String> fieldsApps, Integer limit, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsPerfPowerMetrics, List<String> fieldsAppInfos, List<String> fieldsAppPreOrders, List<String> fieldsPreReleaseVersions, List<String> fieldsAppPrices, List<String> fieldsInAppPurchases, List<String> fieldsBetaAppReviewDetails, List<String> fieldsTerritories, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsBetaAppLocalizations, List<String> fieldsBetaLicenseAgreements, List<String> fieldsEndUserLicenseAgreements, Integer limitAppInfos, Integer limitAppStoreVersions, Integer limitAvailableTerritories, Integer limitBetaAppLocalizations, Integer limitBetaGroups, Integer limitBuilds, Integer limitGameCenterEnabledVersions, Integer limitInAppPurchases, Integer limitPreReleaseVersions, Integer limitPrices) throws ApiException {
        ApiResponse<AppsResponse> localVarResp = appsGetCollectionWithHttpInfo(filterAppStoreVersionsAppStoreState, filterAppStoreVersionsPlatform, filterBundleId, filterName, filterSku, filterAppStoreVersions, filterId, existsGameCenterEnabledVersions, sort, fieldsApps, limit, include, fieldsBetaGroups, fieldsPerfPowerMetrics, fieldsAppInfos, fieldsAppPreOrders, fieldsPreReleaseVersions, fieldsAppPrices, fieldsInAppPurchases, fieldsBetaAppReviewDetails, fieldsTerritories, fieldsGameCenterEnabledVersions, fieldsAppStoreVersions, fieldsBuilds, fieldsBetaAppLocalizations, fieldsBetaLicenseAgreements, fieldsEndUserLicenseAgreements, limitAppInfos, limitAppStoreVersions, limitAvailableTerritories, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitPreReleaseVersions, limitPrices);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param filterAppStoreVersionsAppStoreState filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     * @param filterAppStoreVersionsPlatform filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     * @param filterBundleId filter by attribute &#39;bundleId&#39; (optional)
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterSku filter by attribute &#39;sku&#39; (optional)
     * @param filterAppStoreVersions filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param existsGameCenterEnabledVersions filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param limitAppInfos maximum number of related appInfos returned (when they are included) (optional)
     * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param limitPrices maximum number of related prices returned (when they are included) (optional)
     * @return ApiResponse&lt;AppsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Apps </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsResponse> appsGetCollectionWithHttpInfo(List<String> filterAppStoreVersionsAppStoreState, List<String> filterAppStoreVersionsPlatform, List<String> filterBundleId, List<String> filterName, List<String> filterSku, List<String> filterAppStoreVersions, List<String> filterId, List<String> existsGameCenterEnabledVersions, List<String> sort, List<String> fieldsApps, Integer limit, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsPerfPowerMetrics, List<String> fieldsAppInfos, List<String> fieldsAppPreOrders, List<String> fieldsPreReleaseVersions, List<String> fieldsAppPrices, List<String> fieldsInAppPurchases, List<String> fieldsBetaAppReviewDetails, List<String> fieldsTerritories, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsBetaAppLocalizations, List<String> fieldsBetaLicenseAgreements, List<String> fieldsEndUserLicenseAgreements, Integer limitAppInfos, Integer limitAppStoreVersions, Integer limitAvailableTerritories, Integer limitBetaAppLocalizations, Integer limitBetaGroups, Integer limitBuilds, Integer limitGameCenterEnabledVersions, Integer limitInAppPurchases, Integer limitPreReleaseVersions, Integer limitPrices) throws ApiException {
        okhttp3.Call localVarCall = appsGetCollectionValidateBeforeCall(filterAppStoreVersionsAppStoreState, filterAppStoreVersionsPlatform, filterBundleId, filterName, filterSku, filterAppStoreVersions, filterId, existsGameCenterEnabledVersions, sort, fieldsApps, limit, include, fieldsBetaGroups, fieldsPerfPowerMetrics, fieldsAppInfos, fieldsAppPreOrders, fieldsPreReleaseVersions, fieldsAppPrices, fieldsInAppPurchases, fieldsBetaAppReviewDetails, fieldsTerritories, fieldsGameCenterEnabledVersions, fieldsAppStoreVersions, fieldsBuilds, fieldsBetaAppLocalizations, fieldsBetaLicenseAgreements, fieldsEndUserLicenseAgreements, limitAppInfos, limitAppStoreVersions, limitAvailableTerritories, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitPreReleaseVersions, limitPrices, null);
        Type localVarReturnType = new TypeToken<AppsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param filterAppStoreVersionsAppStoreState filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     * @param filterAppStoreVersionsPlatform filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     * @param filterBundleId filter by attribute &#39;bundleId&#39; (optional)
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterSku filter by attribute &#39;sku&#39; (optional)
     * @param filterAppStoreVersions filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param existsGameCenterEnabledVersions filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param limitAppInfos maximum number of related appInfos returned (when they are included) (optional)
     * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param limitPrices maximum number of related prices returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Apps </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetCollectionAsync(List<String> filterAppStoreVersionsAppStoreState, List<String> filterAppStoreVersionsPlatform, List<String> filterBundleId, List<String> filterName, List<String> filterSku, List<String> filterAppStoreVersions, List<String> filterId, List<String> existsGameCenterEnabledVersions, List<String> sort, List<String> fieldsApps, Integer limit, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsPerfPowerMetrics, List<String> fieldsAppInfos, List<String> fieldsAppPreOrders, List<String> fieldsPreReleaseVersions, List<String> fieldsAppPrices, List<String> fieldsInAppPurchases, List<String> fieldsBetaAppReviewDetails, List<String> fieldsTerritories, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsBetaAppLocalizations, List<String> fieldsBetaLicenseAgreements, List<String> fieldsEndUserLicenseAgreements, Integer limitAppInfos, Integer limitAppStoreVersions, Integer limitAvailableTerritories, Integer limitBetaAppLocalizations, Integer limitBetaGroups, Integer limitBuilds, Integer limitGameCenterEnabledVersions, Integer limitInAppPurchases, Integer limitPreReleaseVersions, Integer limitPrices, final ApiCallback<AppsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsGetCollectionValidateBeforeCall(filterAppStoreVersionsAppStoreState, filterAppStoreVersionsPlatform, filterBundleId, filterName, filterSku, filterAppStoreVersions, filterId, existsGameCenterEnabledVersions, sort, fieldsApps, limit, include, fieldsBetaGroups, fieldsPerfPowerMetrics, fieldsAppInfos, fieldsAppPreOrders, fieldsPreReleaseVersions, fieldsAppPrices, fieldsInAppPurchases, fieldsBetaAppReviewDetails, fieldsTerritories, fieldsGameCenterEnabledVersions, fieldsAppStoreVersions, fieldsBuilds, fieldsBetaAppLocalizations, fieldsBetaLicenseAgreements, fieldsEndUserLicenseAgreements, limitAppInfos, limitAppStoreVersions, limitAvailableTerritories, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitPreReleaseVersions, limitPrices, _callback);
        Type localVarReturnType = new TypeToken<AppsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsGetInstance
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param limitAppInfos maximum number of related appInfos returned (when they are included) (optional)
     * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param limitPrices maximum number of related prices returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single App </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetInstanceCall(String id, List<String> fieldsApps, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsPerfPowerMetrics, List<String> fieldsAppInfos, List<String> fieldsAppPreOrders, List<String> fieldsPreReleaseVersions, List<String> fieldsAppPrices, List<String> fieldsInAppPurchases, List<String> fieldsBetaAppReviewDetails, List<String> fieldsTerritories, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsBetaAppLocalizations, List<String> fieldsBetaLicenseAgreements, List<String> fieldsEndUserLicenseAgreements, Integer limitAppInfos, Integer limitAppStoreVersions, Integer limitAvailableTerritories, Integer limitBetaAppLocalizations, Integer limitBetaGroups, Integer limitBuilds, Integer limitGameCenterEnabledVersions, Integer limitInAppPurchases, Integer limitPreReleaseVersions, Integer limitPrices, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsBetaGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaGroups]", fieldsBetaGroups));
        }

        if (fieldsPerfPowerMetrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[perfPowerMetrics]", fieldsPerfPowerMetrics));
        }

        if (fieldsAppInfos != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appInfos]", fieldsAppInfos));
        }

        if (fieldsAppPreOrders != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appPreOrders]", fieldsAppPreOrders));
        }

        if (fieldsPreReleaseVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
        }

        if (fieldsAppPrices != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appPrices]", fieldsAppPrices));
        }

        if (fieldsInAppPurchases != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
        }

        if (fieldsBetaAppReviewDetails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaAppReviewDetails]", fieldsBetaAppReviewDetails));
        }

        if (fieldsTerritories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[territories]", fieldsTerritories));
        }

        if (fieldsGameCenterEnabledVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[gameCenterEnabledVersions]", fieldsGameCenterEnabledVersions));
        }

        if (fieldsAppStoreVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
        }

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (fieldsBetaAppLocalizations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaAppLocalizations]", fieldsBetaAppLocalizations));
        }

        if (fieldsBetaLicenseAgreements != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaLicenseAgreements]", fieldsBetaLicenseAgreements));
        }

        if (fieldsEndUserLicenseAgreements != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[endUserLicenseAgreements]", fieldsEndUserLicenseAgreements));
        }

        if (limitAppInfos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[appInfos]", limitAppInfos));
        }

        if (limitAppStoreVersions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[appStoreVersions]", limitAppStoreVersions));
        }

        if (limitAvailableTerritories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[availableTerritories]", limitAvailableTerritories));
        }

        if (limitBetaAppLocalizations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[betaAppLocalizations]", limitBetaAppLocalizations));
        }

        if (limitBetaGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[betaGroups]", limitBetaGroups));
        }

        if (limitBuilds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[builds]", limitBuilds));
        }

        if (limitGameCenterEnabledVersions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[gameCenterEnabledVersions]", limitGameCenterEnabledVersions));
        }

        if (limitInAppPurchases != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[inAppPurchases]", limitInAppPurchases));
        }

        if (limitPreReleaseVersions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[preReleaseVersions]", limitPreReleaseVersions));
        }

        if (limitPrices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[prices]", limitPrices));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsGetInstanceValidateBeforeCall(String id, List<String> fieldsApps, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsPerfPowerMetrics, List<String> fieldsAppInfos, List<String> fieldsAppPreOrders, List<String> fieldsPreReleaseVersions, List<String> fieldsAppPrices, List<String> fieldsInAppPurchases, List<String> fieldsBetaAppReviewDetails, List<String> fieldsTerritories, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsBetaAppLocalizations, List<String> fieldsBetaLicenseAgreements, List<String> fieldsEndUserLicenseAgreements, Integer limitAppInfos, Integer limitAppStoreVersions, Integer limitAvailableTerritories, Integer limitBetaAppLocalizations, Integer limitBetaGroups, Integer limitBuilds, Integer limitGameCenterEnabledVersions, Integer limitInAppPurchases, Integer limitPreReleaseVersions, Integer limitPrices, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsGetInstance(Async)");
        }

        return appsGetInstanceCall(id, fieldsApps, include, fieldsBetaGroups, fieldsPerfPowerMetrics, fieldsAppInfos, fieldsAppPreOrders, fieldsPreReleaseVersions, fieldsAppPrices, fieldsInAppPurchases, fieldsBetaAppReviewDetails, fieldsTerritories, fieldsGameCenterEnabledVersions, fieldsAppStoreVersions, fieldsBuilds, fieldsBetaAppLocalizations, fieldsBetaLicenseAgreements, fieldsEndUserLicenseAgreements, limitAppInfos, limitAppStoreVersions, limitAvailableTerritories, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitPreReleaseVersions, limitPrices, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param limitAppInfos maximum number of related appInfos returned (when they are included) (optional)
     * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param limitPrices maximum number of related prices returned (when they are included) (optional)
     * @return AppResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single App </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppResponse appsGetInstance(String id, List<String> fieldsApps, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsPerfPowerMetrics, List<String> fieldsAppInfos, List<String> fieldsAppPreOrders, List<String> fieldsPreReleaseVersions, List<String> fieldsAppPrices, List<String> fieldsInAppPurchases, List<String> fieldsBetaAppReviewDetails, List<String> fieldsTerritories, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsBetaAppLocalizations, List<String> fieldsBetaLicenseAgreements, List<String> fieldsEndUserLicenseAgreements, Integer limitAppInfos, Integer limitAppStoreVersions, Integer limitAvailableTerritories, Integer limitBetaAppLocalizations, Integer limitBetaGroups, Integer limitBuilds, Integer limitGameCenterEnabledVersions, Integer limitInAppPurchases, Integer limitPreReleaseVersions, Integer limitPrices) throws ApiException {
        ApiResponse<AppResponse> localVarResp = appsGetInstanceWithHttpInfo(id, fieldsApps, include, fieldsBetaGroups, fieldsPerfPowerMetrics, fieldsAppInfos, fieldsAppPreOrders, fieldsPreReleaseVersions, fieldsAppPrices, fieldsInAppPurchases, fieldsBetaAppReviewDetails, fieldsTerritories, fieldsGameCenterEnabledVersions, fieldsAppStoreVersions, fieldsBuilds, fieldsBetaAppLocalizations, fieldsBetaLicenseAgreements, fieldsEndUserLicenseAgreements, limitAppInfos, limitAppStoreVersions, limitAvailableTerritories, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitPreReleaseVersions, limitPrices);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param limitAppInfos maximum number of related appInfos returned (when they are included) (optional)
     * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param limitPrices maximum number of related prices returned (when they are included) (optional)
     * @return ApiResponse&lt;AppResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single App </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppResponse> appsGetInstanceWithHttpInfo(String id, List<String> fieldsApps, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsPerfPowerMetrics, List<String> fieldsAppInfos, List<String> fieldsAppPreOrders, List<String> fieldsPreReleaseVersions, List<String> fieldsAppPrices, List<String> fieldsInAppPurchases, List<String> fieldsBetaAppReviewDetails, List<String> fieldsTerritories, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsBetaAppLocalizations, List<String> fieldsBetaLicenseAgreements, List<String> fieldsEndUserLicenseAgreements, Integer limitAppInfos, Integer limitAppStoreVersions, Integer limitAvailableTerritories, Integer limitBetaAppLocalizations, Integer limitBetaGroups, Integer limitBuilds, Integer limitGameCenterEnabledVersions, Integer limitInAppPurchases, Integer limitPreReleaseVersions, Integer limitPrices) throws ApiException {
        okhttp3.Call localVarCall = appsGetInstanceValidateBeforeCall(id, fieldsApps, include, fieldsBetaGroups, fieldsPerfPowerMetrics, fieldsAppInfos, fieldsAppPreOrders, fieldsPreReleaseVersions, fieldsAppPrices, fieldsInAppPurchases, fieldsBetaAppReviewDetails, fieldsTerritories, fieldsGameCenterEnabledVersions, fieldsAppStoreVersions, fieldsBuilds, fieldsBetaAppLocalizations, fieldsBetaLicenseAgreements, fieldsEndUserLicenseAgreements, limitAppInfos, limitAppStoreVersions, limitAvailableTerritories, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitPreReleaseVersions, limitPrices, null);
        Type localVarReturnType = new TypeToken<AppResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param limitAppInfos maximum number of related appInfos returned (when they are included) (optional)
     * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param limitPrices maximum number of related prices returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single App </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetInstanceAsync(String id, List<String> fieldsApps, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsPerfPowerMetrics, List<String> fieldsAppInfos, List<String> fieldsAppPreOrders, List<String> fieldsPreReleaseVersions, List<String> fieldsAppPrices, List<String> fieldsInAppPurchases, List<String> fieldsBetaAppReviewDetails, List<String> fieldsTerritories, List<String> fieldsGameCenterEnabledVersions, List<String> fieldsAppStoreVersions, List<String> fieldsBuilds, List<String> fieldsBetaAppLocalizations, List<String> fieldsBetaLicenseAgreements, List<String> fieldsEndUserLicenseAgreements, Integer limitAppInfos, Integer limitAppStoreVersions, Integer limitAvailableTerritories, Integer limitBetaAppLocalizations, Integer limitBetaGroups, Integer limitBuilds, Integer limitGameCenterEnabledVersions, Integer limitInAppPurchases, Integer limitPreReleaseVersions, Integer limitPrices, final ApiCallback<AppResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsGetInstanceValidateBeforeCall(id, fieldsApps, include, fieldsBetaGroups, fieldsPerfPowerMetrics, fieldsAppInfos, fieldsAppPreOrders, fieldsPreReleaseVersions, fieldsAppPrices, fieldsInAppPurchases, fieldsBetaAppReviewDetails, fieldsTerritories, fieldsGameCenterEnabledVersions, fieldsAppStoreVersions, fieldsBuilds, fieldsBetaAppLocalizations, fieldsBetaLicenseAgreements, fieldsEndUserLicenseAgreements, limitAppInfos, limitAppStoreVersions, limitAvailableTerritories, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitPreReleaseVersions, limitPrices, _callback);
        Type localVarReturnType = new TypeToken<AppResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsInAppPurchasesGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param filterInAppPurchaseType filter by attribute &#39;inAppPurchaseType&#39; (optional)
     * @param filterCanBeSubmitted filter by canBeSubmitted (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsInAppPurchasesGetToManyRelatedCall(String id, List<String> filterInAppPurchaseType, List<String> filterCanBeSubmitted, List<String> sort, List<String> fieldsInAppPurchases, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/inAppPurchases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterInAppPurchaseType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[inAppPurchaseType]", filterInAppPurchaseType));
        }

        if (filterCanBeSubmitted != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[canBeSubmitted]", filterCanBeSubmitted));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sort", sort));
        }

        if (fieldsInAppPurchases != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsInAppPurchasesGetToManyRelatedValidateBeforeCall(String id, List<String> filterInAppPurchaseType, List<String> filterCanBeSubmitted, List<String> sort, List<String> fieldsInAppPurchases, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsInAppPurchasesGetToManyRelated(Async)");
        }

        return appsInAppPurchasesGetToManyRelatedCall(id, filterInAppPurchaseType, filterCanBeSubmitted, sort, fieldsInAppPurchases, fieldsApps, limit, include, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterInAppPurchaseType filter by attribute &#39;inAppPurchaseType&#39; (optional)
     * @param filterCanBeSubmitted filter by canBeSubmitted (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return InAppPurchasesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public InAppPurchasesResponse appsInAppPurchasesGetToManyRelated(String id, List<String> filterInAppPurchaseType, List<String> filterCanBeSubmitted, List<String> sort, List<String> fieldsInAppPurchases, List<String> fieldsApps, Integer limit, List<String> include) throws ApiException {
        ApiResponse<InAppPurchasesResponse> localVarResp = appsInAppPurchasesGetToManyRelatedWithHttpInfo(id, filterInAppPurchaseType, filterCanBeSubmitted, sort, fieldsInAppPurchases, fieldsApps, limit, include);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterInAppPurchaseType filter by attribute &#39;inAppPurchaseType&#39; (optional)
     * @param filterCanBeSubmitted filter by canBeSubmitted (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return ApiResponse&lt;InAppPurchasesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InAppPurchasesResponse> appsInAppPurchasesGetToManyRelatedWithHttpInfo(String id, List<String> filterInAppPurchaseType, List<String> filterCanBeSubmitted, List<String> sort, List<String> fieldsInAppPurchases, List<String> fieldsApps, Integer limit, List<String> include) throws ApiException {
        okhttp3.Call localVarCall = appsInAppPurchasesGetToManyRelatedValidateBeforeCall(id, filterInAppPurchaseType, filterCanBeSubmitted, sort, fieldsInAppPurchases, fieldsApps, limit, include, null);
        Type localVarReturnType = new TypeToken<InAppPurchasesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param filterInAppPurchaseType filter by attribute &#39;inAppPurchaseType&#39; (optional)
     * @param filterCanBeSubmitted filter by canBeSubmitted (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsInAppPurchasesGetToManyRelatedAsync(String id, List<String> filterInAppPurchaseType, List<String> filterCanBeSubmitted, List<String> sort, List<String> fieldsInAppPurchases, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback<InAppPurchasesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsInAppPurchasesGetToManyRelatedValidateBeforeCall(id, filterInAppPurchaseType, filterCanBeSubmitted, sort, fieldsInAppPurchases, fieldsApps, limit, include, _callback);
        Type localVarReturnType = new TypeToken<InAppPurchasesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsPerfPowerMetricsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param filterDeviceType filter by attribute &#39;deviceType&#39; (optional)
     * @param filterMetricType filter by attribute &#39;metricType&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPerfPowerMetricsGetToManyRelatedCall(String id, List<String> filterDeviceType, List<String> filterMetricType, List<String> filterPlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/perfPowerMetrics"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterDeviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[deviceType]", filterDeviceType));
        }

        if (filterMetricType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[metricType]", filterMetricType));
        }

        if (filterPlatform != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[platform]", filterPlatform));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsPerfPowerMetricsGetToManyRelatedValidateBeforeCall(String id, List<String> filterDeviceType, List<String> filterMetricType, List<String> filterPlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsPerfPowerMetricsGetToManyRelated(Async)");
        }

        return appsPerfPowerMetricsGetToManyRelatedCall(id, filterDeviceType, filterMetricType, filterPlatform, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterDeviceType filter by attribute &#39;deviceType&#39; (optional)
     * @param filterMetricType filter by attribute &#39;metricType&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @return PerfPowerMetricsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public PerfPowerMetricsResponse appsPerfPowerMetricsGetToManyRelated(String id, List<String> filterDeviceType, List<String> filterMetricType, List<String> filterPlatform) throws ApiException {
        ApiResponse<PerfPowerMetricsResponse> localVarResp = appsPerfPowerMetricsGetToManyRelatedWithHttpInfo(id, filterDeviceType, filterMetricType, filterPlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterDeviceType filter by attribute &#39;deviceType&#39; (optional)
     * @param filterMetricType filter by attribute &#39;metricType&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @return ApiResponse&lt;PerfPowerMetricsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PerfPowerMetricsResponse> appsPerfPowerMetricsGetToManyRelatedWithHttpInfo(String id, List<String> filterDeviceType, List<String> filterMetricType, List<String> filterPlatform) throws ApiException {
        okhttp3.Call localVarCall = appsPerfPowerMetricsGetToManyRelatedValidateBeforeCall(id, filterDeviceType, filterMetricType, filterPlatform, null);
        Type localVarReturnType = new TypeToken<PerfPowerMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param filterDeviceType filter by attribute &#39;deviceType&#39; (optional)
     * @param filterMetricType filter by attribute &#39;metricType&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPerfPowerMetricsGetToManyRelatedAsync(String id, List<String> filterDeviceType, List<String> filterMetricType, List<String> filterPlatform, final ApiCallback<PerfPowerMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsPerfPowerMetricsGetToManyRelatedValidateBeforeCall(id, filterDeviceType, filterMetricType, filterPlatform, _callback);
        Type localVarReturnType = new TypeToken<PerfPowerMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsPreOrderGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPreOrderGetToOneRelatedCall(String id, List<String> fieldsAppPreOrders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/preOrder"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsAppPreOrders != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appPreOrders]", fieldsAppPreOrders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsPreOrderGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsAppPreOrders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsPreOrderGetToOneRelated(Async)");
        }

        return appsPreOrderGetToOneRelatedCall(id, fieldsAppPreOrders, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @return AppPreOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppPreOrderResponse appsPreOrderGetToOneRelated(String id, List<String> fieldsAppPreOrders) throws ApiException {
        ApiResponse<AppPreOrderResponse> localVarResp = appsPreOrderGetToOneRelatedWithHttpInfo(id, fieldsAppPreOrders);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @return ApiResponse&lt;AppPreOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppPreOrderResponse> appsPreOrderGetToOneRelatedWithHttpInfo(String id, List<String> fieldsAppPreOrders) throws ApiException {
        okhttp3.Call localVarCall = appsPreOrderGetToOneRelatedValidateBeforeCall(id, fieldsAppPreOrders, null);
        Type localVarReturnType = new TypeToken<AppPreOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPreOrderGetToOneRelatedAsync(String id, List<String> fieldsAppPreOrders, final ApiCallback<AppPreOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsPreOrderGetToOneRelatedValidateBeforeCall(id, fieldsAppPreOrders, _callback);
        Type localVarReturnType = new TypeToken<AppPreOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsPreReleaseVersionsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPreReleaseVersionsGetToManyRelatedCall(String id, List<String> fieldsPreReleaseVersions, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/preReleaseVersions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsPreReleaseVersions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsPreReleaseVersionsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsPreReleaseVersions, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsPreReleaseVersionsGetToManyRelated(Async)");
        }

        return appsPreReleaseVersionsGetToManyRelatedCall(id, fieldsPreReleaseVersions, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param limit maximum resources per page (optional)
     * @return PreReleaseVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public PreReleaseVersionsResponse appsPreReleaseVersionsGetToManyRelated(String id, List<String> fieldsPreReleaseVersions, Integer limit) throws ApiException {
        ApiResponse<PreReleaseVersionsResponse> localVarResp = appsPreReleaseVersionsGetToManyRelatedWithHttpInfo(id, fieldsPreReleaseVersions, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;PreReleaseVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreReleaseVersionsResponse> appsPreReleaseVersionsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsPreReleaseVersions, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = appsPreReleaseVersionsGetToManyRelatedValidateBeforeCall(id, fieldsPreReleaseVersions, limit, null);
        Type localVarReturnType = new TypeToken<PreReleaseVersionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPreReleaseVersionsGetToManyRelatedAsync(String id, List<String> fieldsPreReleaseVersions, Integer limit, final ApiCallback<PreReleaseVersionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsPreReleaseVersionsGetToManyRelatedValidateBeforeCall(id, fieldsPreReleaseVersions, limit, _callback);
        Type localVarReturnType = new TypeToken<PreReleaseVersionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsPricesGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsAppPriceTiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPricesGetToManyRelatedCall(String id, List<String> fieldsAppPrices, List<String> fieldsAppPriceTiers, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}/prices"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsAppPrices != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appPrices]", fieldsAppPrices));
        }

        if (fieldsAppPriceTiers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appPriceTiers]", fieldsAppPriceTiers));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsPricesGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsAppPrices, List<String> fieldsAppPriceTiers, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsPricesGetToManyRelated(Async)");
        }

        return appsPricesGetToManyRelatedCall(id, fieldsAppPrices, fieldsAppPriceTiers, fieldsApps, limit, include, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsAppPriceTiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return AppPricesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppPricesResponse appsPricesGetToManyRelated(String id, List<String> fieldsAppPrices, List<String> fieldsAppPriceTiers, List<String> fieldsApps, Integer limit, List<String> include) throws ApiException {
        ApiResponse<AppPricesResponse> localVarResp = appsPricesGetToManyRelatedWithHttpInfo(id, fieldsAppPrices, fieldsAppPriceTiers, fieldsApps, limit, include);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsAppPriceTiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return ApiResponse&lt;AppPricesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppPricesResponse> appsPricesGetToManyRelatedWithHttpInfo(String id, List<String> fieldsAppPrices, List<String> fieldsAppPriceTiers, List<String> fieldsApps, Integer limit, List<String> include) throws ApiException {
        okhttp3.Call localVarCall = appsPricesGetToManyRelatedValidateBeforeCall(id, fieldsAppPrices, fieldsAppPriceTiers, fieldsApps, limit, include, null);
        Type localVarReturnType = new TypeToken<AppPricesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsAppPriceTiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPricesGetToManyRelatedAsync(String id, List<String> fieldsAppPrices, List<String> fieldsAppPriceTiers, List<String> fieldsApps, Integer limit, List<String> include, final ApiCallback<AppPricesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsPricesGetToManyRelatedValidateBeforeCall(id, fieldsAppPrices, fieldsAppPriceTiers, fieldsApps, limit, include, _callback);
        Type localVarReturnType = new TypeToken<AppPricesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsUpdateInstance
     * @param id the id of the requested resource (required)
     * @param appUpdateRequest App representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single App </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateInstanceCall(String id, AppUpdateRequest appUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/apps/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsUpdateInstanceValidateBeforeCall(String id, AppUpdateRequest appUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsUpdateInstance(Async)");
        }

        // verify the required parameter 'appUpdateRequest' is set
        if (appUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'appUpdateRequest' when calling appsUpdateInstance(Async)");
        }

        return appsUpdateInstanceCall(id, appUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param appUpdateRequest App representation (required)
     * @return AppResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single App </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public AppResponse appsUpdateInstance(String id, AppUpdateRequest appUpdateRequest) throws ApiException {
        ApiResponse<AppResponse> localVarResp = appsUpdateInstanceWithHttpInfo(id, appUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param appUpdateRequest App representation (required)
     * @return ApiResponse&lt;AppResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single App </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppResponse> appsUpdateInstanceWithHttpInfo(String id, AppUpdateRequest appUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = appsUpdateInstanceValidateBeforeCall(id, appUpdateRequest, null);
        Type localVarReturnType = new TypeToken<AppResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param appUpdateRequest App representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single App </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateInstanceAsync(String id, AppUpdateRequest appUpdateRequest, final ApiCallback<AppResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsUpdateInstanceValidateBeforeCall(id, appUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
