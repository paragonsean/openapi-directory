/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppPreviewSetsResponse;
import org.openapitools.client.model.AppScreenshotSetsResponse;
import org.openapitools.client.model.AppStoreVersionLocalizationCreateRequest;
import org.openapitools.client.model.AppStoreVersionLocalizationResponse;
import org.openapitools.client.model.AppStoreVersionLocalizationUpdateRequest;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppStoreVersionLocalizationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppStoreVersionLocalizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppStoreVersionLocalizationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appStoreVersionLocalizationsAppPreviewSetsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param filterPreviewType filter by attribute &#39;previewType&#39; (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsAppPreviews the fields to include for returned resources of type appPreviews (optional)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedCall(String id, List<String> filterPreviewType, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsAppPreviews, List<String> fieldsAppPreviewSets, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/appStoreVersionLocalizations/{id}/appPreviewSets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPreviewType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[previewType]", filterPreviewType));
        }

        if (fieldsAppStoreVersionLocalizations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
        }

        if (fieldsAppPreviews != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appPreviews]", fieldsAppPreviews));
        }

        if (fieldsAppPreviewSets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appPreviewSets]", fieldsAppPreviewSets));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedValidateBeforeCall(String id, List<String> filterPreviewType, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsAppPreviews, List<String> fieldsAppPreviewSets, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appStoreVersionLocalizationsAppPreviewSetsGetToManyRelated(Async)");
        }

        return appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedCall(id, filterPreviewType, fieldsAppStoreVersionLocalizations, fieldsAppPreviews, fieldsAppPreviewSets, limit, include, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterPreviewType filter by attribute &#39;previewType&#39; (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsAppPreviews the fields to include for returned resources of type appPreviews (optional)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return AppPreviewSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppPreviewSetsResponse appStoreVersionLocalizationsAppPreviewSetsGetToManyRelated(String id, List<String> filterPreviewType, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsAppPreviews, List<String> fieldsAppPreviewSets, Integer limit, List<String> include) throws ApiException {
        ApiResponse<AppPreviewSetsResponse> localVarResp = appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedWithHttpInfo(id, filterPreviewType, fieldsAppStoreVersionLocalizations, fieldsAppPreviews, fieldsAppPreviewSets, limit, include);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterPreviewType filter by attribute &#39;previewType&#39; (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsAppPreviews the fields to include for returned resources of type appPreviews (optional)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return ApiResponse&lt;AppPreviewSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppPreviewSetsResponse> appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedWithHttpInfo(String id, List<String> filterPreviewType, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsAppPreviews, List<String> fieldsAppPreviewSets, Integer limit, List<String> include) throws ApiException {
        okhttp3.Call localVarCall = appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedValidateBeforeCall(id, filterPreviewType, fieldsAppStoreVersionLocalizations, fieldsAppPreviews, fieldsAppPreviewSets, limit, include, null);
        Type localVarReturnType = new TypeToken<AppPreviewSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param filterPreviewType filter by attribute &#39;previewType&#39; (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsAppPreviews the fields to include for returned resources of type appPreviews (optional)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedAsync(String id, List<String> filterPreviewType, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsAppPreviews, List<String> fieldsAppPreviewSets, Integer limit, List<String> include, final ApiCallback<AppPreviewSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedValidateBeforeCall(id, filterPreviewType, fieldsAppStoreVersionLocalizations, fieldsAppPreviews, fieldsAppPreviewSets, limit, include, _callback);
        Type localVarReturnType = new TypeToken<AppPreviewSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param filterScreenshotDisplayType filter by attribute &#39;screenshotDisplayType&#39; (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedCall(String id, List<String> filterScreenshotDisplayType, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsAppScreenshotSets, List<String> fieldsAppScreenshots, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/appStoreVersionLocalizations/{id}/appScreenshotSets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterScreenshotDisplayType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[screenshotDisplayType]", filterScreenshotDisplayType));
        }

        if (fieldsAppStoreVersionLocalizations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
        }

        if (fieldsAppScreenshotSets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appScreenshotSets]", fieldsAppScreenshotSets));
        }

        if (fieldsAppScreenshots != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appScreenshots]", fieldsAppScreenshots));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedValidateBeforeCall(String id, List<String> filterScreenshotDisplayType, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsAppScreenshotSets, List<String> fieldsAppScreenshots, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated(Async)");
        }

        return appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedCall(id, filterScreenshotDisplayType, fieldsAppStoreVersionLocalizations, fieldsAppScreenshotSets, fieldsAppScreenshots, limit, include, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterScreenshotDisplayType filter by attribute &#39;screenshotDisplayType&#39; (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return AppScreenshotSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppScreenshotSetsResponse appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated(String id, List<String> filterScreenshotDisplayType, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsAppScreenshotSets, List<String> fieldsAppScreenshots, Integer limit, List<String> include) throws ApiException {
        ApiResponse<AppScreenshotSetsResponse> localVarResp = appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedWithHttpInfo(id, filterScreenshotDisplayType, fieldsAppStoreVersionLocalizations, fieldsAppScreenshotSets, fieldsAppScreenshots, limit, include);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param filterScreenshotDisplayType filter by attribute &#39;screenshotDisplayType&#39; (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return ApiResponse&lt;AppScreenshotSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppScreenshotSetsResponse> appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedWithHttpInfo(String id, List<String> filterScreenshotDisplayType, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsAppScreenshotSets, List<String> fieldsAppScreenshots, Integer limit, List<String> include) throws ApiException {
        okhttp3.Call localVarCall = appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedValidateBeforeCall(id, filterScreenshotDisplayType, fieldsAppStoreVersionLocalizations, fieldsAppScreenshotSets, fieldsAppScreenshots, limit, include, null);
        Type localVarReturnType = new TypeToken<AppScreenshotSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param filterScreenshotDisplayType filter by attribute &#39;screenshotDisplayType&#39; (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedAsync(String id, List<String> filterScreenshotDisplayType, List<String> fieldsAppStoreVersionLocalizations, List<String> fieldsAppScreenshotSets, List<String> fieldsAppScreenshots, Integer limit, List<String> include, final ApiCallback<AppScreenshotSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedValidateBeforeCall(id, filterScreenshotDisplayType, fieldsAppStoreVersionLocalizations, fieldsAppScreenshotSets, fieldsAppScreenshots, limit, include, _callback);
        Type localVarReturnType = new TypeToken<AppScreenshotSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appStoreVersionLocalizationsCreateInstance
     * @param appStoreVersionLocalizationCreateRequest AppStoreVersionLocalization representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsCreateInstanceCall(AppStoreVersionLocalizationCreateRequest appStoreVersionLocalizationCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appStoreVersionLocalizationCreateRequest;

        // create path and map variables
        String localVarPath = "/v1/appStoreVersionLocalizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appStoreVersionLocalizationsCreateInstanceValidateBeforeCall(AppStoreVersionLocalizationCreateRequest appStoreVersionLocalizationCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appStoreVersionLocalizationCreateRequest' is set
        if (appStoreVersionLocalizationCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'appStoreVersionLocalizationCreateRequest' when calling appStoreVersionLocalizationsCreateInstance(Async)");
        }

        return appStoreVersionLocalizationsCreateInstanceCall(appStoreVersionLocalizationCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param appStoreVersionLocalizationCreateRequest AppStoreVersionLocalization representation (required)
     * @return AppStoreVersionLocalizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public AppStoreVersionLocalizationResponse appStoreVersionLocalizationsCreateInstance(AppStoreVersionLocalizationCreateRequest appStoreVersionLocalizationCreateRequest) throws ApiException {
        ApiResponse<AppStoreVersionLocalizationResponse> localVarResp = appStoreVersionLocalizationsCreateInstanceWithHttpInfo(appStoreVersionLocalizationCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appStoreVersionLocalizationCreateRequest AppStoreVersionLocalization representation (required)
     * @return ApiResponse&lt;AppStoreVersionLocalizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppStoreVersionLocalizationResponse> appStoreVersionLocalizationsCreateInstanceWithHttpInfo(AppStoreVersionLocalizationCreateRequest appStoreVersionLocalizationCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = appStoreVersionLocalizationsCreateInstanceValidateBeforeCall(appStoreVersionLocalizationCreateRequest, null);
        Type localVarReturnType = new TypeToken<AppStoreVersionLocalizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appStoreVersionLocalizationCreateRequest AppStoreVersionLocalization representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsCreateInstanceAsync(AppStoreVersionLocalizationCreateRequest appStoreVersionLocalizationCreateRequest, final ApiCallback<AppStoreVersionLocalizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appStoreVersionLocalizationsCreateInstanceValidateBeforeCall(appStoreVersionLocalizationCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppStoreVersionLocalizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appStoreVersionLocalizationsDeleteInstance
     * @param id the id of the requested resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsDeleteInstanceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/appStoreVersionLocalizations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appStoreVersionLocalizationsDeleteInstanceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appStoreVersionLocalizationsDeleteInstance(Async)");
        }

        return appStoreVersionLocalizationsDeleteInstanceCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void appStoreVersionLocalizationsDeleteInstance(String id) throws ApiException {
        appStoreVersionLocalizationsDeleteInstanceWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appStoreVersionLocalizationsDeleteInstanceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = appStoreVersionLocalizationsDeleteInstanceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsDeleteInstanceAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appStoreVersionLocalizationsDeleteInstanceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appStoreVersionLocalizationsGetInstance
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param limitAppPreviewSets maximum number of related appPreviewSets returned (when they are included) (optional)
     * @param limitAppScreenshotSets maximum number of related appScreenshotSets returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsGetInstanceCall(String id, List<String> fieldsAppStoreVersionLocalizations, List<String> include, List<String> fieldsAppScreenshotSets, List<String> fieldsAppPreviewSets, Integer limitAppPreviewSets, Integer limitAppScreenshotSets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/appStoreVersionLocalizations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsAppStoreVersionLocalizations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsAppScreenshotSets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appScreenshotSets]", fieldsAppScreenshotSets));
        }

        if (fieldsAppPreviewSets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appPreviewSets]", fieldsAppPreviewSets));
        }

        if (limitAppPreviewSets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[appPreviewSets]", limitAppPreviewSets));
        }

        if (limitAppScreenshotSets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[appScreenshotSets]", limitAppScreenshotSets));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appStoreVersionLocalizationsGetInstanceValidateBeforeCall(String id, List<String> fieldsAppStoreVersionLocalizations, List<String> include, List<String> fieldsAppScreenshotSets, List<String> fieldsAppPreviewSets, Integer limitAppPreviewSets, Integer limitAppScreenshotSets, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appStoreVersionLocalizationsGetInstance(Async)");
        }

        return appStoreVersionLocalizationsGetInstanceCall(id, fieldsAppStoreVersionLocalizations, include, fieldsAppScreenshotSets, fieldsAppPreviewSets, limitAppPreviewSets, limitAppScreenshotSets, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param limitAppPreviewSets maximum number of related appPreviewSets returned (when they are included) (optional)
     * @param limitAppScreenshotSets maximum number of related appScreenshotSets returned (when they are included) (optional)
     * @return AppStoreVersionLocalizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppStoreVersionLocalizationResponse appStoreVersionLocalizationsGetInstance(String id, List<String> fieldsAppStoreVersionLocalizations, List<String> include, List<String> fieldsAppScreenshotSets, List<String> fieldsAppPreviewSets, Integer limitAppPreviewSets, Integer limitAppScreenshotSets) throws ApiException {
        ApiResponse<AppStoreVersionLocalizationResponse> localVarResp = appStoreVersionLocalizationsGetInstanceWithHttpInfo(id, fieldsAppStoreVersionLocalizations, include, fieldsAppScreenshotSets, fieldsAppPreviewSets, limitAppPreviewSets, limitAppScreenshotSets);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param limitAppPreviewSets maximum number of related appPreviewSets returned (when they are included) (optional)
     * @param limitAppScreenshotSets maximum number of related appScreenshotSets returned (when they are included) (optional)
     * @return ApiResponse&lt;AppStoreVersionLocalizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppStoreVersionLocalizationResponse> appStoreVersionLocalizationsGetInstanceWithHttpInfo(String id, List<String> fieldsAppStoreVersionLocalizations, List<String> include, List<String> fieldsAppScreenshotSets, List<String> fieldsAppPreviewSets, Integer limitAppPreviewSets, Integer limitAppScreenshotSets) throws ApiException {
        okhttp3.Call localVarCall = appStoreVersionLocalizationsGetInstanceValidateBeforeCall(id, fieldsAppStoreVersionLocalizations, include, fieldsAppScreenshotSets, fieldsAppPreviewSets, limitAppPreviewSets, limitAppScreenshotSets, null);
        Type localVarReturnType = new TypeToken<AppStoreVersionLocalizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param limitAppPreviewSets maximum number of related appPreviewSets returned (when they are included) (optional)
     * @param limitAppScreenshotSets maximum number of related appScreenshotSets returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsGetInstanceAsync(String id, List<String> fieldsAppStoreVersionLocalizations, List<String> include, List<String> fieldsAppScreenshotSets, List<String> fieldsAppPreviewSets, Integer limitAppPreviewSets, Integer limitAppScreenshotSets, final ApiCallback<AppStoreVersionLocalizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appStoreVersionLocalizationsGetInstanceValidateBeforeCall(id, fieldsAppStoreVersionLocalizations, include, fieldsAppScreenshotSets, fieldsAppPreviewSets, limitAppPreviewSets, limitAppScreenshotSets, _callback);
        Type localVarReturnType = new TypeToken<AppStoreVersionLocalizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appStoreVersionLocalizationsUpdateInstance
     * @param id the id of the requested resource (required)
     * @param appStoreVersionLocalizationUpdateRequest AppStoreVersionLocalization representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsUpdateInstanceCall(String id, AppStoreVersionLocalizationUpdateRequest appStoreVersionLocalizationUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appStoreVersionLocalizationUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/appStoreVersionLocalizations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appStoreVersionLocalizationsUpdateInstanceValidateBeforeCall(String id, AppStoreVersionLocalizationUpdateRequest appStoreVersionLocalizationUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appStoreVersionLocalizationsUpdateInstance(Async)");
        }

        // verify the required parameter 'appStoreVersionLocalizationUpdateRequest' is set
        if (appStoreVersionLocalizationUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'appStoreVersionLocalizationUpdateRequest' when calling appStoreVersionLocalizationsUpdateInstance(Async)");
        }

        return appStoreVersionLocalizationsUpdateInstanceCall(id, appStoreVersionLocalizationUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param appStoreVersionLocalizationUpdateRequest AppStoreVersionLocalization representation (required)
     * @return AppStoreVersionLocalizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public AppStoreVersionLocalizationResponse appStoreVersionLocalizationsUpdateInstance(String id, AppStoreVersionLocalizationUpdateRequest appStoreVersionLocalizationUpdateRequest) throws ApiException {
        ApiResponse<AppStoreVersionLocalizationResponse> localVarResp = appStoreVersionLocalizationsUpdateInstanceWithHttpInfo(id, appStoreVersionLocalizationUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param appStoreVersionLocalizationUpdateRequest AppStoreVersionLocalization representation (required)
     * @return ApiResponse&lt;AppStoreVersionLocalizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppStoreVersionLocalizationResponse> appStoreVersionLocalizationsUpdateInstanceWithHttpInfo(String id, AppStoreVersionLocalizationUpdateRequest appStoreVersionLocalizationUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = appStoreVersionLocalizationsUpdateInstanceValidateBeforeCall(id, appStoreVersionLocalizationUpdateRequest, null);
        Type localVarReturnType = new TypeToken<AppStoreVersionLocalizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param appStoreVersionLocalizationUpdateRequest AppStoreVersionLocalization representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreVersionLocalization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreVersionLocalizationsUpdateInstanceAsync(String id, AppStoreVersionLocalizationUpdateRequest appStoreVersionLocalizationUpdateRequest, final ApiCallback<AppStoreVersionLocalizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appStoreVersionLocalizationsUpdateInstanceValidateBeforeCall(id, appStoreVersionLocalizationUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppStoreVersionLocalizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
