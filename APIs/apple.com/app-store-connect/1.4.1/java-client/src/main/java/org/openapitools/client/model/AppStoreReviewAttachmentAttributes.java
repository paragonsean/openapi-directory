/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppMediaAssetState;
import org.openapitools.client.model.UploadOperation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppStoreReviewAttachmentAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.423773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppStoreReviewAttachmentAttributes {
  public static final String SERIALIZED_NAME_ASSET_DELIVERY_STATE = "assetDeliveryState";
  @SerializedName(SERIALIZED_NAME_ASSET_DELIVERY_STATE)
  private AppMediaAssetState assetDeliveryState;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FILE_SIZE = "fileSize";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Integer fileSize;

  public static final String SERIALIZED_NAME_SOURCE_FILE_CHECKSUM = "sourceFileChecksum";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILE_CHECKSUM)
  private String sourceFileChecksum;

  public static final String SERIALIZED_NAME_UPLOAD_OPERATIONS = "uploadOperations";
  @SerializedName(SERIALIZED_NAME_UPLOAD_OPERATIONS)
  private List<UploadOperation> uploadOperations = new ArrayList<>();

  public AppStoreReviewAttachmentAttributes() {
  }

  public AppStoreReviewAttachmentAttributes assetDeliveryState(AppMediaAssetState assetDeliveryState) {
    this.assetDeliveryState = assetDeliveryState;
    return this;
  }

  /**
   * Get assetDeliveryState
   * @return assetDeliveryState
   */
  @javax.annotation.Nullable
  public AppMediaAssetState getAssetDeliveryState() {
    return assetDeliveryState;
  }

  public void setAssetDeliveryState(AppMediaAssetState assetDeliveryState) {
    this.assetDeliveryState = assetDeliveryState;
  }


  public AppStoreReviewAttachmentAttributes fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Get fileName
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public AppStoreReviewAttachmentAttributes fileSize(Integer fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * Get fileSize
   * @return fileSize
   */
  @javax.annotation.Nullable
  public Integer getFileSize() {
    return fileSize;
  }

  public void setFileSize(Integer fileSize) {
    this.fileSize = fileSize;
  }


  public AppStoreReviewAttachmentAttributes sourceFileChecksum(String sourceFileChecksum) {
    this.sourceFileChecksum = sourceFileChecksum;
    return this;
  }

  /**
   * Get sourceFileChecksum
   * @return sourceFileChecksum
   */
  @javax.annotation.Nullable
  public String getSourceFileChecksum() {
    return sourceFileChecksum;
  }

  public void setSourceFileChecksum(String sourceFileChecksum) {
    this.sourceFileChecksum = sourceFileChecksum;
  }


  public AppStoreReviewAttachmentAttributes uploadOperations(List<UploadOperation> uploadOperations) {
    this.uploadOperations = uploadOperations;
    return this;
  }

  public AppStoreReviewAttachmentAttributes addUploadOperationsItem(UploadOperation uploadOperationsItem) {
    if (this.uploadOperations == null) {
      this.uploadOperations = new ArrayList<>();
    }
    this.uploadOperations.add(uploadOperationsItem);
    return this;
  }

  /**
   * Get uploadOperations
   * @return uploadOperations
   */
  @javax.annotation.Nullable
  public List<UploadOperation> getUploadOperations() {
    return uploadOperations;
  }

  public void setUploadOperations(List<UploadOperation> uploadOperations) {
    this.uploadOperations = uploadOperations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppStoreReviewAttachmentAttributes appStoreReviewAttachmentAttributes = (AppStoreReviewAttachmentAttributes) o;
    return Objects.equals(this.assetDeliveryState, appStoreReviewAttachmentAttributes.assetDeliveryState) &&
        Objects.equals(this.fileName, appStoreReviewAttachmentAttributes.fileName) &&
        Objects.equals(this.fileSize, appStoreReviewAttachmentAttributes.fileSize) &&
        Objects.equals(this.sourceFileChecksum, appStoreReviewAttachmentAttributes.sourceFileChecksum) &&
        Objects.equals(this.uploadOperations, appStoreReviewAttachmentAttributes.uploadOperations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetDeliveryState, fileName, fileSize, sourceFileChecksum, uploadOperations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppStoreReviewAttachmentAttributes {\n");
    sb.append("    assetDeliveryState: ").append(toIndentedString(assetDeliveryState)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    sourceFileChecksum: ").append(toIndentedString(sourceFileChecksum)).append("\n");
    sb.append("    uploadOperations: ").append(toIndentedString(uploadOperations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetDeliveryState");
    openapiFields.add("fileName");
    openapiFields.add("fileSize");
    openapiFields.add("sourceFileChecksum");
    openapiFields.add("uploadOperations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppStoreReviewAttachmentAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppStoreReviewAttachmentAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppStoreReviewAttachmentAttributes is not found in the empty JSON string", AppStoreReviewAttachmentAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppStoreReviewAttachmentAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppStoreReviewAttachmentAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assetDeliveryState`
      if (jsonObj.get("assetDeliveryState") != null && !jsonObj.get("assetDeliveryState").isJsonNull()) {
        AppMediaAssetState.validateJsonElement(jsonObj.get("assetDeliveryState"));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if ((jsonObj.get("sourceFileChecksum") != null && !jsonObj.get("sourceFileChecksum").isJsonNull()) && !jsonObj.get("sourceFileChecksum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceFileChecksum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceFileChecksum").toString()));
      }
      if (jsonObj.get("uploadOperations") != null && !jsonObj.get("uploadOperations").isJsonNull()) {
        JsonArray jsonArrayuploadOperations = jsonObj.getAsJsonArray("uploadOperations");
        if (jsonArrayuploadOperations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uploadOperations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uploadOperations` to be an array in the JSON string but got `%s`", jsonObj.get("uploadOperations").toString()));
          }

          // validate the optional field `uploadOperations` (array)
          for (int i = 0; i < jsonArrayuploadOperations.size(); i++) {
            UploadOperation.validateJsonElement(jsonArrayuploadOperations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppStoreReviewAttachmentAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppStoreReviewAttachmentAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppStoreReviewAttachmentAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppStoreReviewAttachmentAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<AppStoreReviewAttachmentAttributes>() {
           @Override
           public void write(JsonWriter out, AppStoreReviewAttachmentAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppStoreReviewAttachmentAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppStoreReviewAttachmentAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppStoreReviewAttachmentAttributes
   * @throws IOException if the JSON string is invalid with respect to AppStoreReviewAttachmentAttributes
   */
  public static AppStoreReviewAttachmentAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppStoreReviewAttachmentAttributes.class);
  }

  /**
   * Convert an instance of AppStoreReviewAttachmentAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

