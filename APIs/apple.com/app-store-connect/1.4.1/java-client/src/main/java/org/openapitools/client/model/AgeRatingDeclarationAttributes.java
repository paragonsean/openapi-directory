/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.KidsAgeBand;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AgeRatingDeclarationAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.423773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgeRatingDeclarationAttributes {
  /**
   * Gets or Sets alcoholTobaccoOrDrugUseOrReferences
   */
  @JsonAdapter(AlcoholTobaccoOrDrugUseOrReferencesEnum.Adapter.class)
  public enum AlcoholTobaccoOrDrugUseOrReferencesEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    AlcoholTobaccoOrDrugUseOrReferencesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlcoholTobaccoOrDrugUseOrReferencesEnum fromValue(String value) {
      for (AlcoholTobaccoOrDrugUseOrReferencesEnum b : AlcoholTobaccoOrDrugUseOrReferencesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlcoholTobaccoOrDrugUseOrReferencesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlcoholTobaccoOrDrugUseOrReferencesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlcoholTobaccoOrDrugUseOrReferencesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlcoholTobaccoOrDrugUseOrReferencesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlcoholTobaccoOrDrugUseOrReferencesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALCOHOL_TOBACCO_OR_DRUG_USE_OR_REFERENCES = "alcoholTobaccoOrDrugUseOrReferences";
  @SerializedName(SERIALIZED_NAME_ALCOHOL_TOBACCO_OR_DRUG_USE_OR_REFERENCES)
  private AlcoholTobaccoOrDrugUseOrReferencesEnum alcoholTobaccoOrDrugUseOrReferences;

  /**
   * Gets or Sets contests
   */
  @JsonAdapter(ContestsEnum.Adapter.class)
  public enum ContestsEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    ContestsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContestsEnum fromValue(String value) {
      for (ContestsEnum b : ContestsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContestsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContestsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContestsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContestsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContestsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTESTS = "contests";
  @SerializedName(SERIALIZED_NAME_CONTESTS)
  private ContestsEnum contests;

  public static final String SERIALIZED_NAME_GAMBLING = "gambling";
  @SerializedName(SERIALIZED_NAME_GAMBLING)
  private Boolean gambling;

  public static final String SERIALIZED_NAME_GAMBLING_AND_CONTESTS = "gamblingAndContests";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_GAMBLING_AND_CONTESTS)
  private Boolean gamblingAndContests;

  /**
   * Gets or Sets gamblingSimulated
   */
  @JsonAdapter(GamblingSimulatedEnum.Adapter.class)
  public enum GamblingSimulatedEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    GamblingSimulatedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GamblingSimulatedEnum fromValue(String value) {
      for (GamblingSimulatedEnum b : GamblingSimulatedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GamblingSimulatedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GamblingSimulatedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GamblingSimulatedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GamblingSimulatedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GamblingSimulatedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GAMBLING_SIMULATED = "gamblingSimulated";
  @SerializedName(SERIALIZED_NAME_GAMBLING_SIMULATED)
  private GamblingSimulatedEnum gamblingSimulated;

  /**
   * Gets or Sets horrorOrFearThemes
   */
  @JsonAdapter(HorrorOrFearThemesEnum.Adapter.class)
  public enum HorrorOrFearThemesEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    HorrorOrFearThemesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HorrorOrFearThemesEnum fromValue(String value) {
      for (HorrorOrFearThemesEnum b : HorrorOrFearThemesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HorrorOrFearThemesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HorrorOrFearThemesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HorrorOrFearThemesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HorrorOrFearThemesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HorrorOrFearThemesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HORROR_OR_FEAR_THEMES = "horrorOrFearThemes";
  @SerializedName(SERIALIZED_NAME_HORROR_OR_FEAR_THEMES)
  private HorrorOrFearThemesEnum horrorOrFearThemes;

  public static final String SERIALIZED_NAME_KIDS_AGE_BAND = "kidsAgeBand";
  @SerializedName(SERIALIZED_NAME_KIDS_AGE_BAND)
  private KidsAgeBand kidsAgeBand;

  /**
   * Gets or Sets matureOrSuggestiveThemes
   */
  @JsonAdapter(MatureOrSuggestiveThemesEnum.Adapter.class)
  public enum MatureOrSuggestiveThemesEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    MatureOrSuggestiveThemesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatureOrSuggestiveThemesEnum fromValue(String value) {
      for (MatureOrSuggestiveThemesEnum b : MatureOrSuggestiveThemesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatureOrSuggestiveThemesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatureOrSuggestiveThemesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatureOrSuggestiveThemesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatureOrSuggestiveThemesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatureOrSuggestiveThemesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATURE_OR_SUGGESTIVE_THEMES = "matureOrSuggestiveThemes";
  @SerializedName(SERIALIZED_NAME_MATURE_OR_SUGGESTIVE_THEMES)
  private MatureOrSuggestiveThemesEnum matureOrSuggestiveThemes;

  /**
   * Gets or Sets medicalOrTreatmentInformation
   */
  @JsonAdapter(MedicalOrTreatmentInformationEnum.Adapter.class)
  public enum MedicalOrTreatmentInformationEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    MedicalOrTreatmentInformationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MedicalOrTreatmentInformationEnum fromValue(String value) {
      for (MedicalOrTreatmentInformationEnum b : MedicalOrTreatmentInformationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MedicalOrTreatmentInformationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MedicalOrTreatmentInformationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MedicalOrTreatmentInformationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MedicalOrTreatmentInformationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MedicalOrTreatmentInformationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEDICAL_OR_TREATMENT_INFORMATION = "medicalOrTreatmentInformation";
  @SerializedName(SERIALIZED_NAME_MEDICAL_OR_TREATMENT_INFORMATION)
  private MedicalOrTreatmentInformationEnum medicalOrTreatmentInformation;

  /**
   * Gets or Sets profanityOrCrudeHumor
   */
  @JsonAdapter(ProfanityOrCrudeHumorEnum.Adapter.class)
  public enum ProfanityOrCrudeHumorEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    ProfanityOrCrudeHumorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProfanityOrCrudeHumorEnum fromValue(String value) {
      for (ProfanityOrCrudeHumorEnum b : ProfanityOrCrudeHumorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProfanityOrCrudeHumorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProfanityOrCrudeHumorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProfanityOrCrudeHumorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProfanityOrCrudeHumorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProfanityOrCrudeHumorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROFANITY_OR_CRUDE_HUMOR = "profanityOrCrudeHumor";
  @SerializedName(SERIALIZED_NAME_PROFANITY_OR_CRUDE_HUMOR)
  private ProfanityOrCrudeHumorEnum profanityOrCrudeHumor;

  public static final String SERIALIZED_NAME_SEVENTEEN_PLUS = "seventeenPlus";
  @SerializedName(SERIALIZED_NAME_SEVENTEEN_PLUS)
  private Boolean seventeenPlus;

  /**
   * Gets or Sets sexualContentGraphicAndNudity
   */
  @JsonAdapter(SexualContentGraphicAndNudityEnum.Adapter.class)
  public enum SexualContentGraphicAndNudityEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    SexualContentGraphicAndNudityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SexualContentGraphicAndNudityEnum fromValue(String value) {
      for (SexualContentGraphicAndNudityEnum b : SexualContentGraphicAndNudityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SexualContentGraphicAndNudityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SexualContentGraphicAndNudityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SexualContentGraphicAndNudityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SexualContentGraphicAndNudityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SexualContentGraphicAndNudityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEXUAL_CONTENT_GRAPHIC_AND_NUDITY = "sexualContentGraphicAndNudity";
  @SerializedName(SERIALIZED_NAME_SEXUAL_CONTENT_GRAPHIC_AND_NUDITY)
  private SexualContentGraphicAndNudityEnum sexualContentGraphicAndNudity;

  /**
   * Gets or Sets sexualContentOrNudity
   */
  @JsonAdapter(SexualContentOrNudityEnum.Adapter.class)
  public enum SexualContentOrNudityEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    SexualContentOrNudityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SexualContentOrNudityEnum fromValue(String value) {
      for (SexualContentOrNudityEnum b : SexualContentOrNudityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SexualContentOrNudityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SexualContentOrNudityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SexualContentOrNudityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SexualContentOrNudityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SexualContentOrNudityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEXUAL_CONTENT_OR_NUDITY = "sexualContentOrNudity";
  @SerializedName(SERIALIZED_NAME_SEXUAL_CONTENT_OR_NUDITY)
  private SexualContentOrNudityEnum sexualContentOrNudity;

  public static final String SERIALIZED_NAME_UNRESTRICTED_WEB_ACCESS = "unrestrictedWebAccess";
  @SerializedName(SERIALIZED_NAME_UNRESTRICTED_WEB_ACCESS)
  private Boolean unrestrictedWebAccess;

  /**
   * Gets or Sets violenceCartoonOrFantasy
   */
  @JsonAdapter(ViolenceCartoonOrFantasyEnum.Adapter.class)
  public enum ViolenceCartoonOrFantasyEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    ViolenceCartoonOrFantasyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViolenceCartoonOrFantasyEnum fromValue(String value) {
      for (ViolenceCartoonOrFantasyEnum b : ViolenceCartoonOrFantasyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViolenceCartoonOrFantasyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViolenceCartoonOrFantasyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViolenceCartoonOrFantasyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViolenceCartoonOrFantasyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViolenceCartoonOrFantasyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIOLENCE_CARTOON_OR_FANTASY = "violenceCartoonOrFantasy";
  @SerializedName(SERIALIZED_NAME_VIOLENCE_CARTOON_OR_FANTASY)
  private ViolenceCartoonOrFantasyEnum violenceCartoonOrFantasy;

  /**
   * Gets or Sets violenceRealistic
   */
  @JsonAdapter(ViolenceRealisticEnum.Adapter.class)
  public enum ViolenceRealisticEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    ViolenceRealisticEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViolenceRealisticEnum fromValue(String value) {
      for (ViolenceRealisticEnum b : ViolenceRealisticEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViolenceRealisticEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViolenceRealisticEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViolenceRealisticEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViolenceRealisticEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViolenceRealisticEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIOLENCE_REALISTIC = "violenceRealistic";
  @SerializedName(SERIALIZED_NAME_VIOLENCE_REALISTIC)
  private ViolenceRealisticEnum violenceRealistic;

  /**
   * Gets or Sets violenceRealisticProlongedGraphicOrSadistic
   */
  @JsonAdapter(ViolenceRealisticProlongedGraphicOrSadisticEnum.Adapter.class)
  public enum ViolenceRealisticProlongedGraphicOrSadisticEnum {
    NONE("NONE"),
    
    INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),
    
    FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE");

    private String value;

    ViolenceRealisticProlongedGraphicOrSadisticEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViolenceRealisticProlongedGraphicOrSadisticEnum fromValue(String value) {
      for (ViolenceRealisticProlongedGraphicOrSadisticEnum b : ViolenceRealisticProlongedGraphicOrSadisticEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViolenceRealisticProlongedGraphicOrSadisticEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViolenceRealisticProlongedGraphicOrSadisticEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViolenceRealisticProlongedGraphicOrSadisticEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViolenceRealisticProlongedGraphicOrSadisticEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViolenceRealisticProlongedGraphicOrSadisticEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIOLENCE_REALISTIC_PROLONGED_GRAPHIC_OR_SADISTIC = "violenceRealisticProlongedGraphicOrSadistic";
  @SerializedName(SERIALIZED_NAME_VIOLENCE_REALISTIC_PROLONGED_GRAPHIC_OR_SADISTIC)
  private ViolenceRealisticProlongedGraphicOrSadisticEnum violenceRealisticProlongedGraphicOrSadistic;

  public AgeRatingDeclarationAttributes() {
  }

  public AgeRatingDeclarationAttributes alcoholTobaccoOrDrugUseOrReferences(AlcoholTobaccoOrDrugUseOrReferencesEnum alcoholTobaccoOrDrugUseOrReferences) {
    this.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences;
    return this;
  }

  /**
   * Get alcoholTobaccoOrDrugUseOrReferences
   * @return alcoholTobaccoOrDrugUseOrReferences
   */
  @javax.annotation.Nullable
  public AlcoholTobaccoOrDrugUseOrReferencesEnum getAlcoholTobaccoOrDrugUseOrReferences() {
    return alcoholTobaccoOrDrugUseOrReferences;
  }

  public void setAlcoholTobaccoOrDrugUseOrReferences(AlcoholTobaccoOrDrugUseOrReferencesEnum alcoholTobaccoOrDrugUseOrReferences) {
    this.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences;
  }


  public AgeRatingDeclarationAttributes contests(ContestsEnum contests) {
    this.contests = contests;
    return this;
  }

  /**
   * Get contests
   * @return contests
   */
  @javax.annotation.Nullable
  public ContestsEnum getContests() {
    return contests;
  }

  public void setContests(ContestsEnum contests) {
    this.contests = contests;
  }


  public AgeRatingDeclarationAttributes gambling(Boolean gambling) {
    this.gambling = gambling;
    return this;
  }

  /**
   * Get gambling
   * @return gambling
   */
  @javax.annotation.Nullable
  public Boolean getGambling() {
    return gambling;
  }

  public void setGambling(Boolean gambling) {
    this.gambling = gambling;
  }


  @Deprecated
  public AgeRatingDeclarationAttributes gamblingAndContests(Boolean gamblingAndContests) {
    this.gamblingAndContests = gamblingAndContests;
    return this;
  }

  /**
   * Get gamblingAndContests
   * @return gamblingAndContests
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getGamblingAndContests() {
    return gamblingAndContests;
  }

  @Deprecated
  public void setGamblingAndContests(Boolean gamblingAndContests) {
    this.gamblingAndContests = gamblingAndContests;
  }


  public AgeRatingDeclarationAttributes gamblingSimulated(GamblingSimulatedEnum gamblingSimulated) {
    this.gamblingSimulated = gamblingSimulated;
    return this;
  }

  /**
   * Get gamblingSimulated
   * @return gamblingSimulated
   */
  @javax.annotation.Nullable
  public GamblingSimulatedEnum getGamblingSimulated() {
    return gamblingSimulated;
  }

  public void setGamblingSimulated(GamblingSimulatedEnum gamblingSimulated) {
    this.gamblingSimulated = gamblingSimulated;
  }


  public AgeRatingDeclarationAttributes horrorOrFearThemes(HorrorOrFearThemesEnum horrorOrFearThemes) {
    this.horrorOrFearThemes = horrorOrFearThemes;
    return this;
  }

  /**
   * Get horrorOrFearThemes
   * @return horrorOrFearThemes
   */
  @javax.annotation.Nullable
  public HorrorOrFearThemesEnum getHorrorOrFearThemes() {
    return horrorOrFearThemes;
  }

  public void setHorrorOrFearThemes(HorrorOrFearThemesEnum horrorOrFearThemes) {
    this.horrorOrFearThemes = horrorOrFearThemes;
  }


  public AgeRatingDeclarationAttributes kidsAgeBand(KidsAgeBand kidsAgeBand) {
    this.kidsAgeBand = kidsAgeBand;
    return this;
  }

  /**
   * Get kidsAgeBand
   * @return kidsAgeBand
   */
  @javax.annotation.Nullable
  public KidsAgeBand getKidsAgeBand() {
    return kidsAgeBand;
  }

  public void setKidsAgeBand(KidsAgeBand kidsAgeBand) {
    this.kidsAgeBand = kidsAgeBand;
  }


  public AgeRatingDeclarationAttributes matureOrSuggestiveThemes(MatureOrSuggestiveThemesEnum matureOrSuggestiveThemes) {
    this.matureOrSuggestiveThemes = matureOrSuggestiveThemes;
    return this;
  }

  /**
   * Get matureOrSuggestiveThemes
   * @return matureOrSuggestiveThemes
   */
  @javax.annotation.Nullable
  public MatureOrSuggestiveThemesEnum getMatureOrSuggestiveThemes() {
    return matureOrSuggestiveThemes;
  }

  public void setMatureOrSuggestiveThemes(MatureOrSuggestiveThemesEnum matureOrSuggestiveThemes) {
    this.matureOrSuggestiveThemes = matureOrSuggestiveThemes;
  }


  public AgeRatingDeclarationAttributes medicalOrTreatmentInformation(MedicalOrTreatmentInformationEnum medicalOrTreatmentInformation) {
    this.medicalOrTreatmentInformation = medicalOrTreatmentInformation;
    return this;
  }

  /**
   * Get medicalOrTreatmentInformation
   * @return medicalOrTreatmentInformation
   */
  @javax.annotation.Nullable
  public MedicalOrTreatmentInformationEnum getMedicalOrTreatmentInformation() {
    return medicalOrTreatmentInformation;
  }

  public void setMedicalOrTreatmentInformation(MedicalOrTreatmentInformationEnum medicalOrTreatmentInformation) {
    this.medicalOrTreatmentInformation = medicalOrTreatmentInformation;
  }


  public AgeRatingDeclarationAttributes profanityOrCrudeHumor(ProfanityOrCrudeHumorEnum profanityOrCrudeHumor) {
    this.profanityOrCrudeHumor = profanityOrCrudeHumor;
    return this;
  }

  /**
   * Get profanityOrCrudeHumor
   * @return profanityOrCrudeHumor
   */
  @javax.annotation.Nullable
  public ProfanityOrCrudeHumorEnum getProfanityOrCrudeHumor() {
    return profanityOrCrudeHumor;
  }

  public void setProfanityOrCrudeHumor(ProfanityOrCrudeHumorEnum profanityOrCrudeHumor) {
    this.profanityOrCrudeHumor = profanityOrCrudeHumor;
  }


  public AgeRatingDeclarationAttributes seventeenPlus(Boolean seventeenPlus) {
    this.seventeenPlus = seventeenPlus;
    return this;
  }

  /**
   * Get seventeenPlus
   * @return seventeenPlus
   */
  @javax.annotation.Nullable
  public Boolean getSeventeenPlus() {
    return seventeenPlus;
  }

  public void setSeventeenPlus(Boolean seventeenPlus) {
    this.seventeenPlus = seventeenPlus;
  }


  public AgeRatingDeclarationAttributes sexualContentGraphicAndNudity(SexualContentGraphicAndNudityEnum sexualContentGraphicAndNudity) {
    this.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity;
    return this;
  }

  /**
   * Get sexualContentGraphicAndNudity
   * @return sexualContentGraphicAndNudity
   */
  @javax.annotation.Nullable
  public SexualContentGraphicAndNudityEnum getSexualContentGraphicAndNudity() {
    return sexualContentGraphicAndNudity;
  }

  public void setSexualContentGraphicAndNudity(SexualContentGraphicAndNudityEnum sexualContentGraphicAndNudity) {
    this.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity;
  }


  public AgeRatingDeclarationAttributes sexualContentOrNudity(SexualContentOrNudityEnum sexualContentOrNudity) {
    this.sexualContentOrNudity = sexualContentOrNudity;
    return this;
  }

  /**
   * Get sexualContentOrNudity
   * @return sexualContentOrNudity
   */
  @javax.annotation.Nullable
  public SexualContentOrNudityEnum getSexualContentOrNudity() {
    return sexualContentOrNudity;
  }

  public void setSexualContentOrNudity(SexualContentOrNudityEnum sexualContentOrNudity) {
    this.sexualContentOrNudity = sexualContentOrNudity;
  }


  public AgeRatingDeclarationAttributes unrestrictedWebAccess(Boolean unrestrictedWebAccess) {
    this.unrestrictedWebAccess = unrestrictedWebAccess;
    return this;
  }

  /**
   * Get unrestrictedWebAccess
   * @return unrestrictedWebAccess
   */
  @javax.annotation.Nullable
  public Boolean getUnrestrictedWebAccess() {
    return unrestrictedWebAccess;
  }

  public void setUnrestrictedWebAccess(Boolean unrestrictedWebAccess) {
    this.unrestrictedWebAccess = unrestrictedWebAccess;
  }


  public AgeRatingDeclarationAttributes violenceCartoonOrFantasy(ViolenceCartoonOrFantasyEnum violenceCartoonOrFantasy) {
    this.violenceCartoonOrFantasy = violenceCartoonOrFantasy;
    return this;
  }

  /**
   * Get violenceCartoonOrFantasy
   * @return violenceCartoonOrFantasy
   */
  @javax.annotation.Nullable
  public ViolenceCartoonOrFantasyEnum getViolenceCartoonOrFantasy() {
    return violenceCartoonOrFantasy;
  }

  public void setViolenceCartoonOrFantasy(ViolenceCartoonOrFantasyEnum violenceCartoonOrFantasy) {
    this.violenceCartoonOrFantasy = violenceCartoonOrFantasy;
  }


  public AgeRatingDeclarationAttributes violenceRealistic(ViolenceRealisticEnum violenceRealistic) {
    this.violenceRealistic = violenceRealistic;
    return this;
  }

  /**
   * Get violenceRealistic
   * @return violenceRealistic
   */
  @javax.annotation.Nullable
  public ViolenceRealisticEnum getViolenceRealistic() {
    return violenceRealistic;
  }

  public void setViolenceRealistic(ViolenceRealisticEnum violenceRealistic) {
    this.violenceRealistic = violenceRealistic;
  }


  public AgeRatingDeclarationAttributes violenceRealisticProlongedGraphicOrSadistic(ViolenceRealisticProlongedGraphicOrSadisticEnum violenceRealisticProlongedGraphicOrSadistic) {
    this.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic;
    return this;
  }

  /**
   * Get violenceRealisticProlongedGraphicOrSadistic
   * @return violenceRealisticProlongedGraphicOrSadistic
   */
  @javax.annotation.Nullable
  public ViolenceRealisticProlongedGraphicOrSadisticEnum getViolenceRealisticProlongedGraphicOrSadistic() {
    return violenceRealisticProlongedGraphicOrSadistic;
  }

  public void setViolenceRealisticProlongedGraphicOrSadistic(ViolenceRealisticProlongedGraphicOrSadisticEnum violenceRealisticProlongedGraphicOrSadistic) {
    this.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgeRatingDeclarationAttributes ageRatingDeclarationAttributes = (AgeRatingDeclarationAttributes) o;
    return Objects.equals(this.alcoholTobaccoOrDrugUseOrReferences, ageRatingDeclarationAttributes.alcoholTobaccoOrDrugUseOrReferences) &&
        Objects.equals(this.contests, ageRatingDeclarationAttributes.contests) &&
        Objects.equals(this.gambling, ageRatingDeclarationAttributes.gambling) &&
        Objects.equals(this.gamblingAndContests, ageRatingDeclarationAttributes.gamblingAndContests) &&
        Objects.equals(this.gamblingSimulated, ageRatingDeclarationAttributes.gamblingSimulated) &&
        Objects.equals(this.horrorOrFearThemes, ageRatingDeclarationAttributes.horrorOrFearThemes) &&
        Objects.equals(this.kidsAgeBand, ageRatingDeclarationAttributes.kidsAgeBand) &&
        Objects.equals(this.matureOrSuggestiveThemes, ageRatingDeclarationAttributes.matureOrSuggestiveThemes) &&
        Objects.equals(this.medicalOrTreatmentInformation, ageRatingDeclarationAttributes.medicalOrTreatmentInformation) &&
        Objects.equals(this.profanityOrCrudeHumor, ageRatingDeclarationAttributes.profanityOrCrudeHumor) &&
        Objects.equals(this.seventeenPlus, ageRatingDeclarationAttributes.seventeenPlus) &&
        Objects.equals(this.sexualContentGraphicAndNudity, ageRatingDeclarationAttributes.sexualContentGraphicAndNudity) &&
        Objects.equals(this.sexualContentOrNudity, ageRatingDeclarationAttributes.sexualContentOrNudity) &&
        Objects.equals(this.unrestrictedWebAccess, ageRatingDeclarationAttributes.unrestrictedWebAccess) &&
        Objects.equals(this.violenceCartoonOrFantasy, ageRatingDeclarationAttributes.violenceCartoonOrFantasy) &&
        Objects.equals(this.violenceRealistic, ageRatingDeclarationAttributes.violenceRealistic) &&
        Objects.equals(this.violenceRealisticProlongedGraphicOrSadistic, ageRatingDeclarationAttributes.violenceRealisticProlongedGraphicOrSadistic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alcoholTobaccoOrDrugUseOrReferences, contests, gambling, gamblingAndContests, gamblingSimulated, horrorOrFearThemes, kidsAgeBand, matureOrSuggestiveThemes, medicalOrTreatmentInformation, profanityOrCrudeHumor, seventeenPlus, sexualContentGraphicAndNudity, sexualContentOrNudity, unrestrictedWebAccess, violenceCartoonOrFantasy, violenceRealistic, violenceRealisticProlongedGraphicOrSadistic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgeRatingDeclarationAttributes {\n");
    sb.append("    alcoholTobaccoOrDrugUseOrReferences: ").append(toIndentedString(alcoholTobaccoOrDrugUseOrReferences)).append("\n");
    sb.append("    contests: ").append(toIndentedString(contests)).append("\n");
    sb.append("    gambling: ").append(toIndentedString(gambling)).append("\n");
    sb.append("    gamblingAndContests: ").append(toIndentedString(gamblingAndContests)).append("\n");
    sb.append("    gamblingSimulated: ").append(toIndentedString(gamblingSimulated)).append("\n");
    sb.append("    horrorOrFearThemes: ").append(toIndentedString(horrorOrFearThemes)).append("\n");
    sb.append("    kidsAgeBand: ").append(toIndentedString(kidsAgeBand)).append("\n");
    sb.append("    matureOrSuggestiveThemes: ").append(toIndentedString(matureOrSuggestiveThemes)).append("\n");
    sb.append("    medicalOrTreatmentInformation: ").append(toIndentedString(medicalOrTreatmentInformation)).append("\n");
    sb.append("    profanityOrCrudeHumor: ").append(toIndentedString(profanityOrCrudeHumor)).append("\n");
    sb.append("    seventeenPlus: ").append(toIndentedString(seventeenPlus)).append("\n");
    sb.append("    sexualContentGraphicAndNudity: ").append(toIndentedString(sexualContentGraphicAndNudity)).append("\n");
    sb.append("    sexualContentOrNudity: ").append(toIndentedString(sexualContentOrNudity)).append("\n");
    sb.append("    unrestrictedWebAccess: ").append(toIndentedString(unrestrictedWebAccess)).append("\n");
    sb.append("    violenceCartoonOrFantasy: ").append(toIndentedString(violenceCartoonOrFantasy)).append("\n");
    sb.append("    violenceRealistic: ").append(toIndentedString(violenceRealistic)).append("\n");
    sb.append("    violenceRealisticProlongedGraphicOrSadistic: ").append(toIndentedString(violenceRealisticProlongedGraphicOrSadistic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alcoholTobaccoOrDrugUseOrReferences");
    openapiFields.add("contests");
    openapiFields.add("gambling");
    openapiFields.add("gamblingAndContests");
    openapiFields.add("gamblingSimulated");
    openapiFields.add("horrorOrFearThemes");
    openapiFields.add("kidsAgeBand");
    openapiFields.add("matureOrSuggestiveThemes");
    openapiFields.add("medicalOrTreatmentInformation");
    openapiFields.add("profanityOrCrudeHumor");
    openapiFields.add("seventeenPlus");
    openapiFields.add("sexualContentGraphicAndNudity");
    openapiFields.add("sexualContentOrNudity");
    openapiFields.add("unrestrictedWebAccess");
    openapiFields.add("violenceCartoonOrFantasy");
    openapiFields.add("violenceRealistic");
    openapiFields.add("violenceRealisticProlongedGraphicOrSadistic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgeRatingDeclarationAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgeRatingDeclarationAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgeRatingDeclarationAttributes is not found in the empty JSON string", AgeRatingDeclarationAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgeRatingDeclarationAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgeRatingDeclarationAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alcoholTobaccoOrDrugUseOrReferences") != null && !jsonObj.get("alcoholTobaccoOrDrugUseOrReferences").isJsonNull()) && !jsonObj.get("alcoholTobaccoOrDrugUseOrReferences").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alcoholTobaccoOrDrugUseOrReferences` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alcoholTobaccoOrDrugUseOrReferences").toString()));
      }
      // validate the optional field `alcoholTobaccoOrDrugUseOrReferences`
      if (jsonObj.get("alcoholTobaccoOrDrugUseOrReferences") != null && !jsonObj.get("alcoholTobaccoOrDrugUseOrReferences").isJsonNull()) {
        AlcoholTobaccoOrDrugUseOrReferencesEnum.validateJsonElement(jsonObj.get("alcoholTobaccoOrDrugUseOrReferences"));
      }
      if ((jsonObj.get("contests") != null && !jsonObj.get("contests").isJsonNull()) && !jsonObj.get("contests").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contests` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contests").toString()));
      }
      // validate the optional field `contests`
      if (jsonObj.get("contests") != null && !jsonObj.get("contests").isJsonNull()) {
        ContestsEnum.validateJsonElement(jsonObj.get("contests"));
      }
      if ((jsonObj.get("gamblingSimulated") != null && !jsonObj.get("gamblingSimulated").isJsonNull()) && !jsonObj.get("gamblingSimulated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gamblingSimulated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gamblingSimulated").toString()));
      }
      // validate the optional field `gamblingSimulated`
      if (jsonObj.get("gamblingSimulated") != null && !jsonObj.get("gamblingSimulated").isJsonNull()) {
        GamblingSimulatedEnum.validateJsonElement(jsonObj.get("gamblingSimulated"));
      }
      if ((jsonObj.get("horrorOrFearThemes") != null && !jsonObj.get("horrorOrFearThemes").isJsonNull()) && !jsonObj.get("horrorOrFearThemes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `horrorOrFearThemes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("horrorOrFearThemes").toString()));
      }
      // validate the optional field `horrorOrFearThemes`
      if (jsonObj.get("horrorOrFearThemes") != null && !jsonObj.get("horrorOrFearThemes").isJsonNull()) {
        HorrorOrFearThemesEnum.validateJsonElement(jsonObj.get("horrorOrFearThemes"));
      }
      // validate the optional field `kidsAgeBand`
      if (jsonObj.get("kidsAgeBand") != null && !jsonObj.get("kidsAgeBand").isJsonNull()) {
        KidsAgeBand.validateJsonElement(jsonObj.get("kidsAgeBand"));
      }
      if ((jsonObj.get("matureOrSuggestiveThemes") != null && !jsonObj.get("matureOrSuggestiveThemes").isJsonNull()) && !jsonObj.get("matureOrSuggestiveThemes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matureOrSuggestiveThemes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matureOrSuggestiveThemes").toString()));
      }
      // validate the optional field `matureOrSuggestiveThemes`
      if (jsonObj.get("matureOrSuggestiveThemes") != null && !jsonObj.get("matureOrSuggestiveThemes").isJsonNull()) {
        MatureOrSuggestiveThemesEnum.validateJsonElement(jsonObj.get("matureOrSuggestiveThemes"));
      }
      if ((jsonObj.get("medicalOrTreatmentInformation") != null && !jsonObj.get("medicalOrTreatmentInformation").isJsonNull()) && !jsonObj.get("medicalOrTreatmentInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medicalOrTreatmentInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medicalOrTreatmentInformation").toString()));
      }
      // validate the optional field `medicalOrTreatmentInformation`
      if (jsonObj.get("medicalOrTreatmentInformation") != null && !jsonObj.get("medicalOrTreatmentInformation").isJsonNull()) {
        MedicalOrTreatmentInformationEnum.validateJsonElement(jsonObj.get("medicalOrTreatmentInformation"));
      }
      if ((jsonObj.get("profanityOrCrudeHumor") != null && !jsonObj.get("profanityOrCrudeHumor").isJsonNull()) && !jsonObj.get("profanityOrCrudeHumor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profanityOrCrudeHumor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profanityOrCrudeHumor").toString()));
      }
      // validate the optional field `profanityOrCrudeHumor`
      if (jsonObj.get("profanityOrCrudeHumor") != null && !jsonObj.get("profanityOrCrudeHumor").isJsonNull()) {
        ProfanityOrCrudeHumorEnum.validateJsonElement(jsonObj.get("profanityOrCrudeHumor"));
      }
      if ((jsonObj.get("sexualContentGraphicAndNudity") != null && !jsonObj.get("sexualContentGraphicAndNudity").isJsonNull()) && !jsonObj.get("sexualContentGraphicAndNudity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sexualContentGraphicAndNudity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sexualContentGraphicAndNudity").toString()));
      }
      // validate the optional field `sexualContentGraphicAndNudity`
      if (jsonObj.get("sexualContentGraphicAndNudity") != null && !jsonObj.get("sexualContentGraphicAndNudity").isJsonNull()) {
        SexualContentGraphicAndNudityEnum.validateJsonElement(jsonObj.get("sexualContentGraphicAndNudity"));
      }
      if ((jsonObj.get("sexualContentOrNudity") != null && !jsonObj.get("sexualContentOrNudity").isJsonNull()) && !jsonObj.get("sexualContentOrNudity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sexualContentOrNudity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sexualContentOrNudity").toString()));
      }
      // validate the optional field `sexualContentOrNudity`
      if (jsonObj.get("sexualContentOrNudity") != null && !jsonObj.get("sexualContentOrNudity").isJsonNull()) {
        SexualContentOrNudityEnum.validateJsonElement(jsonObj.get("sexualContentOrNudity"));
      }
      if ((jsonObj.get("violenceCartoonOrFantasy") != null && !jsonObj.get("violenceCartoonOrFantasy").isJsonNull()) && !jsonObj.get("violenceCartoonOrFantasy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `violenceCartoonOrFantasy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("violenceCartoonOrFantasy").toString()));
      }
      // validate the optional field `violenceCartoonOrFantasy`
      if (jsonObj.get("violenceCartoonOrFantasy") != null && !jsonObj.get("violenceCartoonOrFantasy").isJsonNull()) {
        ViolenceCartoonOrFantasyEnum.validateJsonElement(jsonObj.get("violenceCartoonOrFantasy"));
      }
      if ((jsonObj.get("violenceRealistic") != null && !jsonObj.get("violenceRealistic").isJsonNull()) && !jsonObj.get("violenceRealistic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `violenceRealistic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("violenceRealistic").toString()));
      }
      // validate the optional field `violenceRealistic`
      if (jsonObj.get("violenceRealistic") != null && !jsonObj.get("violenceRealistic").isJsonNull()) {
        ViolenceRealisticEnum.validateJsonElement(jsonObj.get("violenceRealistic"));
      }
      if ((jsonObj.get("violenceRealisticProlongedGraphicOrSadistic") != null && !jsonObj.get("violenceRealisticProlongedGraphicOrSadistic").isJsonNull()) && !jsonObj.get("violenceRealisticProlongedGraphicOrSadistic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `violenceRealisticProlongedGraphicOrSadistic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("violenceRealisticProlongedGraphicOrSadistic").toString()));
      }
      // validate the optional field `violenceRealisticProlongedGraphicOrSadistic`
      if (jsonObj.get("violenceRealisticProlongedGraphicOrSadistic") != null && !jsonObj.get("violenceRealisticProlongedGraphicOrSadistic").isJsonNull()) {
        ViolenceRealisticProlongedGraphicOrSadisticEnum.validateJsonElement(jsonObj.get("violenceRealisticProlongedGraphicOrSadistic"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgeRatingDeclarationAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgeRatingDeclarationAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgeRatingDeclarationAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgeRatingDeclarationAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<AgeRatingDeclarationAttributes>() {
           @Override
           public void write(JsonWriter out, AgeRatingDeclarationAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgeRatingDeclarationAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgeRatingDeclarationAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgeRatingDeclarationAttributes
   * @throws IOException if the JSON string is invalid with respect to AgeRatingDeclarationAttributes
   */
  public static AgeRatingDeclarationAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgeRatingDeclarationAttributes.class);
  }

  /**
   * Convert an instance of AgeRatingDeclarationAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

