/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppResponse;
import org.openapitools.client.model.BundleIdCapabilitiesResponse;
import org.openapitools.client.model.BundleIdCreateRequest;
import org.openapitools.client.model.BundleIdResponse;
import org.openapitools.client.model.BundleIdUpdateRequest;
import org.openapitools.client.model.BundleIdsResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ProfilesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BundleIdsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BundleIdsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BundleIdsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bundleIdsAppGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsAppGetToOneRelatedCall(String id, List<String> fieldsApps, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bundleIds/{id}/app"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bundleIdsAppGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsApps, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bundleIdsAppGetToOneRelated(Async)");
        }

        return bundleIdsAppGetToOneRelatedCall(id, fieldsApps, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return AppResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppResponse bundleIdsAppGetToOneRelated(String id, List<String> fieldsApps) throws ApiException {
        ApiResponse<AppResponse> localVarResp = bundleIdsAppGetToOneRelatedWithHttpInfo(id, fieldsApps);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return ApiResponse&lt;AppResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppResponse> bundleIdsAppGetToOneRelatedWithHttpInfo(String id, List<String> fieldsApps) throws ApiException {
        okhttp3.Call localVarCall = bundleIdsAppGetToOneRelatedValidateBeforeCall(id, fieldsApps, null);
        Type localVarReturnType = new TypeToken<AppResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsAppGetToOneRelatedAsync(String id, List<String> fieldsApps, final ApiCallback<AppResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bundleIdsAppGetToOneRelatedValidateBeforeCall(id, fieldsApps, _callback);
        Type localVarReturnType = new TypeToken<AppResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bundleIdsBundleIdCapabilitiesGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsBundleIdCapabilitiesGetToManyRelatedCall(String id, List<String> fieldsBundleIdCapabilities, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bundleIds/{id}/bundleIdCapabilities"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBundleIdCapabilities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[bundleIdCapabilities]", fieldsBundleIdCapabilities));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bundleIdsBundleIdCapabilitiesGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsBundleIdCapabilities, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bundleIdsBundleIdCapabilitiesGetToManyRelated(Async)");
        }

        return bundleIdsBundleIdCapabilitiesGetToManyRelatedCall(id, fieldsBundleIdCapabilities, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param limit maximum resources per page (optional)
     * @return BundleIdCapabilitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BundleIdCapabilitiesResponse bundleIdsBundleIdCapabilitiesGetToManyRelated(String id, List<String> fieldsBundleIdCapabilities, Integer limit) throws ApiException {
        ApiResponse<BundleIdCapabilitiesResponse> localVarResp = bundleIdsBundleIdCapabilitiesGetToManyRelatedWithHttpInfo(id, fieldsBundleIdCapabilities, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BundleIdCapabilitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleIdCapabilitiesResponse> bundleIdsBundleIdCapabilitiesGetToManyRelatedWithHttpInfo(String id, List<String> fieldsBundleIdCapabilities, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = bundleIdsBundleIdCapabilitiesGetToManyRelatedValidateBeforeCall(id, fieldsBundleIdCapabilities, limit, null);
        Type localVarReturnType = new TypeToken<BundleIdCapabilitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsBundleIdCapabilitiesGetToManyRelatedAsync(String id, List<String> fieldsBundleIdCapabilities, Integer limit, final ApiCallback<BundleIdCapabilitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bundleIdsBundleIdCapabilitiesGetToManyRelatedValidateBeforeCall(id, fieldsBundleIdCapabilities, limit, _callback);
        Type localVarReturnType = new TypeToken<BundleIdCapabilitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bundleIdsCreateInstance
     * @param bundleIdCreateRequest BundleId representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsCreateInstanceCall(BundleIdCreateRequest bundleIdCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bundleIdCreateRequest;

        // create path and map variables
        String localVarPath = "/v1/bundleIds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bundleIdsCreateInstanceValidateBeforeCall(BundleIdCreateRequest bundleIdCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bundleIdCreateRequest' is set
        if (bundleIdCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'bundleIdCreateRequest' when calling bundleIdsCreateInstance(Async)");
        }

        return bundleIdsCreateInstanceCall(bundleIdCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param bundleIdCreateRequest BundleId representation (required)
     * @return BundleIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public BundleIdResponse bundleIdsCreateInstance(BundleIdCreateRequest bundleIdCreateRequest) throws ApiException {
        ApiResponse<BundleIdResponse> localVarResp = bundleIdsCreateInstanceWithHttpInfo(bundleIdCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param bundleIdCreateRequest BundleId representation (required)
     * @return ApiResponse&lt;BundleIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleIdResponse> bundleIdsCreateInstanceWithHttpInfo(BundleIdCreateRequest bundleIdCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = bundleIdsCreateInstanceValidateBeforeCall(bundleIdCreateRequest, null);
        Type localVarReturnType = new TypeToken<BundleIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param bundleIdCreateRequest BundleId representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsCreateInstanceAsync(BundleIdCreateRequest bundleIdCreateRequest, final ApiCallback<BundleIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bundleIdsCreateInstanceValidateBeforeCall(bundleIdCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<BundleIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bundleIdsDeleteInstance
     * @param id the id of the requested resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsDeleteInstanceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bundleIds/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bundleIdsDeleteInstanceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bundleIdsDeleteInstance(Async)");
        }

        return bundleIdsDeleteInstanceCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void bundleIdsDeleteInstance(String id) throws ApiException {
        bundleIdsDeleteInstanceWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bundleIdsDeleteInstanceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = bundleIdsDeleteInstanceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsDeleteInstanceAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bundleIdsDeleteInstanceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bundleIdsGetCollection
     * @param filterIdentifier filter by attribute &#39;identifier&#39; (optional)
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterSeedId filter by attribute &#39;seedId&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBundleIdCapabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param limitProfiles maximum number of related profiles returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BundleIds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsGetCollectionCall(List<String> filterIdentifier, List<String> filterName, List<String> filterPlatform, List<String> filterSeedId, List<String> filterId, List<String> sort, List<String> fieldsBundleIds, Integer limit, List<String> include, List<String> fieldsBundleIdCapabilities, List<String> fieldsProfiles, List<String> fieldsApps, Integer limitBundleIdCapabilities, Integer limitProfiles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bundleIds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterIdentifier != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[identifier]", filterIdentifier));
        }

        if (filterName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[name]", filterName));
        }

        if (filterPlatform != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[platform]", filterPlatform));
        }

        if (filterSeedId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[seedId]", filterSeedId));
        }

        if (filterId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[id]", filterId));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sort", sort));
        }

        if (fieldsBundleIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[bundleIds]", fieldsBundleIds));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsBundleIdCapabilities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[bundleIdCapabilities]", fieldsBundleIdCapabilities));
        }

        if (fieldsProfiles != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[profiles]", fieldsProfiles));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limitBundleIdCapabilities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[bundleIdCapabilities]", limitBundleIdCapabilities));
        }

        if (limitProfiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[profiles]", limitProfiles));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bundleIdsGetCollectionValidateBeforeCall(List<String> filterIdentifier, List<String> filterName, List<String> filterPlatform, List<String> filterSeedId, List<String> filterId, List<String> sort, List<String> fieldsBundleIds, Integer limit, List<String> include, List<String> fieldsBundleIdCapabilities, List<String> fieldsProfiles, List<String> fieldsApps, Integer limitBundleIdCapabilities, Integer limitProfiles, final ApiCallback _callback) throws ApiException {
        return bundleIdsGetCollectionCall(filterIdentifier, filterName, filterPlatform, filterSeedId, filterId, sort, fieldsBundleIds, limit, include, fieldsBundleIdCapabilities, fieldsProfiles, fieldsApps, limitBundleIdCapabilities, limitProfiles, _callback);

    }

    /**
     * 
     * 
     * @param filterIdentifier filter by attribute &#39;identifier&#39; (optional)
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterSeedId filter by attribute &#39;seedId&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBundleIdCapabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param limitProfiles maximum number of related profiles returned (when they are included) (optional)
     * @return BundleIdsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BundleIds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public BundleIdsResponse bundleIdsGetCollection(List<String> filterIdentifier, List<String> filterName, List<String> filterPlatform, List<String> filterSeedId, List<String> filterId, List<String> sort, List<String> fieldsBundleIds, Integer limit, List<String> include, List<String> fieldsBundleIdCapabilities, List<String> fieldsProfiles, List<String> fieldsApps, Integer limitBundleIdCapabilities, Integer limitProfiles) throws ApiException {
        ApiResponse<BundleIdsResponse> localVarResp = bundleIdsGetCollectionWithHttpInfo(filterIdentifier, filterName, filterPlatform, filterSeedId, filterId, sort, fieldsBundleIds, limit, include, fieldsBundleIdCapabilities, fieldsProfiles, fieldsApps, limitBundleIdCapabilities, limitProfiles);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param filterIdentifier filter by attribute &#39;identifier&#39; (optional)
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterSeedId filter by attribute &#39;seedId&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBundleIdCapabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param limitProfiles maximum number of related profiles returned (when they are included) (optional)
     * @return ApiResponse&lt;BundleIdsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BundleIds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleIdsResponse> bundleIdsGetCollectionWithHttpInfo(List<String> filterIdentifier, List<String> filterName, List<String> filterPlatform, List<String> filterSeedId, List<String> filterId, List<String> sort, List<String> fieldsBundleIds, Integer limit, List<String> include, List<String> fieldsBundleIdCapabilities, List<String> fieldsProfiles, List<String> fieldsApps, Integer limitBundleIdCapabilities, Integer limitProfiles) throws ApiException {
        okhttp3.Call localVarCall = bundleIdsGetCollectionValidateBeforeCall(filterIdentifier, filterName, filterPlatform, filterSeedId, filterId, sort, fieldsBundleIds, limit, include, fieldsBundleIdCapabilities, fieldsProfiles, fieldsApps, limitBundleIdCapabilities, limitProfiles, null);
        Type localVarReturnType = new TypeToken<BundleIdsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param filterIdentifier filter by attribute &#39;identifier&#39; (optional)
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterSeedId filter by attribute &#39;seedId&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBundleIdCapabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param limitProfiles maximum number of related profiles returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BundleIds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsGetCollectionAsync(List<String> filterIdentifier, List<String> filterName, List<String> filterPlatform, List<String> filterSeedId, List<String> filterId, List<String> sort, List<String> fieldsBundleIds, Integer limit, List<String> include, List<String> fieldsBundleIdCapabilities, List<String> fieldsProfiles, List<String> fieldsApps, Integer limitBundleIdCapabilities, Integer limitProfiles, final ApiCallback<BundleIdsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bundleIdsGetCollectionValidateBeforeCall(filterIdentifier, filterName, filterPlatform, filterSeedId, filterId, sort, fieldsBundleIds, limit, include, fieldsBundleIdCapabilities, fieldsProfiles, fieldsApps, limitBundleIdCapabilities, limitProfiles, _callback);
        Type localVarReturnType = new TypeToken<BundleIdsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bundleIdsGetInstance
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBundleIdCapabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param limitProfiles maximum number of related profiles returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsGetInstanceCall(String id, List<String> fieldsBundleIds, List<String> include, List<String> fieldsBundleIdCapabilities, List<String> fieldsProfiles, List<String> fieldsApps, Integer limitBundleIdCapabilities, Integer limitProfiles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bundleIds/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBundleIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[bundleIds]", fieldsBundleIds));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsBundleIdCapabilities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[bundleIdCapabilities]", fieldsBundleIdCapabilities));
        }

        if (fieldsProfiles != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[profiles]", fieldsProfiles));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limitBundleIdCapabilities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[bundleIdCapabilities]", limitBundleIdCapabilities));
        }

        if (limitProfiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[profiles]", limitProfiles));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bundleIdsGetInstanceValidateBeforeCall(String id, List<String> fieldsBundleIds, List<String> include, List<String> fieldsBundleIdCapabilities, List<String> fieldsProfiles, List<String> fieldsApps, Integer limitBundleIdCapabilities, Integer limitProfiles, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bundleIdsGetInstance(Async)");
        }

        return bundleIdsGetInstanceCall(id, fieldsBundleIds, include, fieldsBundleIdCapabilities, fieldsProfiles, fieldsApps, limitBundleIdCapabilities, limitProfiles, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBundleIdCapabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param limitProfiles maximum number of related profiles returned (when they are included) (optional)
     * @return BundleIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BundleIdResponse bundleIdsGetInstance(String id, List<String> fieldsBundleIds, List<String> include, List<String> fieldsBundleIdCapabilities, List<String> fieldsProfiles, List<String> fieldsApps, Integer limitBundleIdCapabilities, Integer limitProfiles) throws ApiException {
        ApiResponse<BundleIdResponse> localVarResp = bundleIdsGetInstanceWithHttpInfo(id, fieldsBundleIds, include, fieldsBundleIdCapabilities, fieldsProfiles, fieldsApps, limitBundleIdCapabilities, limitProfiles);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBundleIdCapabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param limitProfiles maximum number of related profiles returned (when they are included) (optional)
     * @return ApiResponse&lt;BundleIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleIdResponse> bundleIdsGetInstanceWithHttpInfo(String id, List<String> fieldsBundleIds, List<String> include, List<String> fieldsBundleIdCapabilities, List<String> fieldsProfiles, List<String> fieldsApps, Integer limitBundleIdCapabilities, Integer limitProfiles) throws ApiException {
        okhttp3.Call localVarCall = bundleIdsGetInstanceValidateBeforeCall(id, fieldsBundleIds, include, fieldsBundleIdCapabilities, fieldsProfiles, fieldsApps, limitBundleIdCapabilities, limitProfiles, null);
        Type localVarReturnType = new TypeToken<BundleIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBundleIdCapabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param limitProfiles maximum number of related profiles returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsGetInstanceAsync(String id, List<String> fieldsBundleIds, List<String> include, List<String> fieldsBundleIdCapabilities, List<String> fieldsProfiles, List<String> fieldsApps, Integer limitBundleIdCapabilities, Integer limitProfiles, final ApiCallback<BundleIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bundleIdsGetInstanceValidateBeforeCall(id, fieldsBundleIds, include, fieldsBundleIdCapabilities, fieldsProfiles, fieldsApps, limitBundleIdCapabilities, limitProfiles, _callback);
        Type localVarReturnType = new TypeToken<BundleIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bundleIdsProfilesGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsProfilesGetToManyRelatedCall(String id, List<String> fieldsProfiles, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bundleIds/{id}/profiles"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsProfiles != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[profiles]", fieldsProfiles));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bundleIdsProfilesGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsProfiles, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bundleIdsProfilesGetToManyRelated(Async)");
        }

        return bundleIdsProfilesGetToManyRelatedCall(id, fieldsProfiles, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param limit maximum resources per page (optional)
     * @return ProfilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ProfilesResponse bundleIdsProfilesGetToManyRelated(String id, List<String> fieldsProfiles, Integer limit) throws ApiException {
        ApiResponse<ProfilesResponse> localVarResp = bundleIdsProfilesGetToManyRelatedWithHttpInfo(id, fieldsProfiles, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;ProfilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfilesResponse> bundleIdsProfilesGetToManyRelatedWithHttpInfo(String id, List<String> fieldsProfiles, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = bundleIdsProfilesGetToManyRelatedValidateBeforeCall(id, fieldsProfiles, limit, null);
        Type localVarReturnType = new TypeToken<ProfilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsProfilesGetToManyRelatedAsync(String id, List<String> fieldsProfiles, Integer limit, final ApiCallback<ProfilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bundleIdsProfilesGetToManyRelatedValidateBeforeCall(id, fieldsProfiles, limit, _callback);
        Type localVarReturnType = new TypeToken<ProfilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bundleIdsUpdateInstance
     * @param id the id of the requested resource (required)
     * @param bundleIdUpdateRequest BundleId representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsUpdateInstanceCall(String id, BundleIdUpdateRequest bundleIdUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bundleIdUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/bundleIds/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bundleIdsUpdateInstanceValidateBeforeCall(String id, BundleIdUpdateRequest bundleIdUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bundleIdsUpdateInstance(Async)");
        }

        // verify the required parameter 'bundleIdUpdateRequest' is set
        if (bundleIdUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'bundleIdUpdateRequest' when calling bundleIdsUpdateInstance(Async)");
        }

        return bundleIdsUpdateInstanceCall(id, bundleIdUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param bundleIdUpdateRequest BundleId representation (required)
     * @return BundleIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public BundleIdResponse bundleIdsUpdateInstance(String id, BundleIdUpdateRequest bundleIdUpdateRequest) throws ApiException {
        ApiResponse<BundleIdResponse> localVarResp = bundleIdsUpdateInstanceWithHttpInfo(id, bundleIdUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param bundleIdUpdateRequest BundleId representation (required)
     * @return ApiResponse&lt;BundleIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleIdResponse> bundleIdsUpdateInstanceWithHttpInfo(String id, BundleIdUpdateRequest bundleIdUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = bundleIdsUpdateInstanceValidateBeforeCall(id, bundleIdUpdateRequest, null);
        Type localVarReturnType = new TypeToken<BundleIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param bundleIdUpdateRequest BundleId representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BundleId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bundleIdsUpdateInstanceAsync(String id, BundleIdUpdateRequest bundleIdUpdateRequest, final ApiCallback<BundleIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bundleIdsUpdateInstanceValidateBeforeCall(id, bundleIdUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<BundleIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
