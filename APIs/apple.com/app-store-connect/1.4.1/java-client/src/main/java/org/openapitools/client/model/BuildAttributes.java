/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ImageAsset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BuildAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.423773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildAttributes {
  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private Boolean expired;

  public static final String SERIALIZED_NAME_ICON_ASSET_TOKEN = "iconAssetToken";
  @SerializedName(SERIALIZED_NAME_ICON_ASSET_TOKEN)
  private ImageAsset iconAssetToken;

  public static final String SERIALIZED_NAME_MIN_OS_VERSION = "minOsVersion";
  @SerializedName(SERIALIZED_NAME_MIN_OS_VERSION)
  private String minOsVersion;

  /**
   * Gets or Sets processingState
   */
  @JsonAdapter(ProcessingStateEnum.Adapter.class)
  public enum ProcessingStateEnum {
    PROCESSING("PROCESSING"),
    
    FAILED("FAILED"),
    
    INVALID("INVALID"),
    
    VALID("VALID");

    private String value;

    ProcessingStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessingStateEnum fromValue(String value) {
      for (ProcessingStateEnum b : ProcessingStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessingStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessingStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessingStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessingStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessingStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESSING_STATE = "processingState";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATE)
  private ProcessingStateEnum processingState;

  public static final String SERIALIZED_NAME_UPLOADED_DATE = "uploadedDate";
  @SerializedName(SERIALIZED_NAME_UPLOADED_DATE)
  private OffsetDateTime uploadedDate;

  public static final String SERIALIZED_NAME_USES_NON_EXEMPT_ENCRYPTION = "usesNonExemptEncryption";
  @SerializedName(SERIALIZED_NAME_USES_NON_EXEMPT_ENCRYPTION)
  private Boolean usesNonExemptEncryption;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public BuildAttributes() {
  }

  public BuildAttributes expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Get expirationDate
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public BuildAttributes expired(Boolean expired) {
    this.expired = expired;
    return this;
  }

  /**
   * Get expired
   * @return expired
   */
  @javax.annotation.Nullable
  public Boolean getExpired() {
    return expired;
  }

  public void setExpired(Boolean expired) {
    this.expired = expired;
  }


  public BuildAttributes iconAssetToken(ImageAsset iconAssetToken) {
    this.iconAssetToken = iconAssetToken;
    return this;
  }

  /**
   * Get iconAssetToken
   * @return iconAssetToken
   */
  @javax.annotation.Nullable
  public ImageAsset getIconAssetToken() {
    return iconAssetToken;
  }

  public void setIconAssetToken(ImageAsset iconAssetToken) {
    this.iconAssetToken = iconAssetToken;
  }


  public BuildAttributes minOsVersion(String minOsVersion) {
    this.minOsVersion = minOsVersion;
    return this;
  }

  /**
   * Get minOsVersion
   * @return minOsVersion
   */
  @javax.annotation.Nullable
  public String getMinOsVersion() {
    return minOsVersion;
  }

  public void setMinOsVersion(String minOsVersion) {
    this.minOsVersion = minOsVersion;
  }


  public BuildAttributes processingState(ProcessingStateEnum processingState) {
    this.processingState = processingState;
    return this;
  }

  /**
   * Get processingState
   * @return processingState
   */
  @javax.annotation.Nullable
  public ProcessingStateEnum getProcessingState() {
    return processingState;
  }

  public void setProcessingState(ProcessingStateEnum processingState) {
    this.processingState = processingState;
  }


  public BuildAttributes uploadedDate(OffsetDateTime uploadedDate) {
    this.uploadedDate = uploadedDate;
    return this;
  }

  /**
   * Get uploadedDate
   * @return uploadedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUploadedDate() {
    return uploadedDate;
  }

  public void setUploadedDate(OffsetDateTime uploadedDate) {
    this.uploadedDate = uploadedDate;
  }


  public BuildAttributes usesNonExemptEncryption(Boolean usesNonExemptEncryption) {
    this.usesNonExemptEncryption = usesNonExemptEncryption;
    return this;
  }

  /**
   * Get usesNonExemptEncryption
   * @return usesNonExemptEncryption
   */
  @javax.annotation.Nullable
  public Boolean getUsesNonExemptEncryption() {
    return usesNonExemptEncryption;
  }

  public void setUsesNonExemptEncryption(Boolean usesNonExemptEncryption) {
    this.usesNonExemptEncryption = usesNonExemptEncryption;
  }


  public BuildAttributes version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildAttributes buildAttributes = (BuildAttributes) o;
    return Objects.equals(this.expirationDate, buildAttributes.expirationDate) &&
        Objects.equals(this.expired, buildAttributes.expired) &&
        Objects.equals(this.iconAssetToken, buildAttributes.iconAssetToken) &&
        Objects.equals(this.minOsVersion, buildAttributes.minOsVersion) &&
        Objects.equals(this.processingState, buildAttributes.processingState) &&
        Objects.equals(this.uploadedDate, buildAttributes.uploadedDate) &&
        Objects.equals(this.usesNonExemptEncryption, buildAttributes.usesNonExemptEncryption) &&
        Objects.equals(this.version, buildAttributes.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expirationDate, expired, iconAssetToken, minOsVersion, processingState, uploadedDate, usesNonExemptEncryption, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildAttributes {\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    iconAssetToken: ").append(toIndentedString(iconAssetToken)).append("\n");
    sb.append("    minOsVersion: ").append(toIndentedString(minOsVersion)).append("\n");
    sb.append("    processingState: ").append(toIndentedString(processingState)).append("\n");
    sb.append("    uploadedDate: ").append(toIndentedString(uploadedDate)).append("\n");
    sb.append("    usesNonExemptEncryption: ").append(toIndentedString(usesNonExemptEncryption)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expirationDate");
    openapiFields.add("expired");
    openapiFields.add("iconAssetToken");
    openapiFields.add("minOsVersion");
    openapiFields.add("processingState");
    openapiFields.add("uploadedDate");
    openapiFields.add("usesNonExemptEncryption");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildAttributes is not found in the empty JSON string", BuildAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `iconAssetToken`
      if (jsonObj.get("iconAssetToken") != null && !jsonObj.get("iconAssetToken").isJsonNull()) {
        ImageAsset.validateJsonElement(jsonObj.get("iconAssetToken"));
      }
      if ((jsonObj.get("minOsVersion") != null && !jsonObj.get("minOsVersion").isJsonNull()) && !jsonObj.get("minOsVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minOsVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minOsVersion").toString()));
      }
      if ((jsonObj.get("processingState") != null && !jsonObj.get("processingState").isJsonNull()) && !jsonObj.get("processingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingState").toString()));
      }
      // validate the optional field `processingState`
      if (jsonObj.get("processingState") != null && !jsonObj.get("processingState").isJsonNull()) {
        ProcessingStateEnum.validateJsonElement(jsonObj.get("processingState"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildAttributes>() {
           @Override
           public void write(JsonWriter out, BuildAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildAttributes
   * @throws IOException if the JSON string is invalid with respect to BuildAttributes
   */
  public static BuildAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildAttributes.class);
  }

  /**
   * Convert an instance of BuildAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

