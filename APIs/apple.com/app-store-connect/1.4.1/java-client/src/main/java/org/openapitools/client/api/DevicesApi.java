/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeviceCreateRequest;
import org.openapitools.client.model.DeviceResponse;
import org.openapitools.client.model.DeviceUpdateRequest;
import org.openapitools.client.model.DevicesResponse;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DevicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DevicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DevicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for devicesCreateInstance
     * @param deviceCreateRequest Device representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesCreateInstanceCall(DeviceCreateRequest deviceCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceCreateRequest;

        // create path and map variables
        String localVarPath = "/v1/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesCreateInstanceValidateBeforeCall(DeviceCreateRequest deviceCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceCreateRequest' is set
        if (deviceCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'deviceCreateRequest' when calling devicesCreateInstance(Async)");
        }

        return devicesCreateInstanceCall(deviceCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param deviceCreateRequest Device representation (required)
     * @return DeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public DeviceResponse devicesCreateInstance(DeviceCreateRequest deviceCreateRequest) throws ApiException {
        ApiResponse<DeviceResponse> localVarResp = devicesCreateInstanceWithHttpInfo(deviceCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deviceCreateRequest Device representation (required)
     * @return ApiResponse&lt;DeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceResponse> devicesCreateInstanceWithHttpInfo(DeviceCreateRequest deviceCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = devicesCreateInstanceValidateBeforeCall(deviceCreateRequest, null);
        Type localVarReturnType = new TypeToken<DeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deviceCreateRequest Device representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesCreateInstanceAsync(DeviceCreateRequest deviceCreateRequest, final ApiCallback<DeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesCreateInstanceValidateBeforeCall(deviceCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetCollection
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterStatus filter by attribute &#39;status&#39; (optional)
     * @param filterUdid filter by attribute &#39;udid&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Devices </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetCollectionCall(List<String> filterName, List<String> filterPlatform, List<String> filterStatus, List<String> filterUdid, List<String> filterId, List<String> sort, List<String> fieldsDevices, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[name]", filterName));
        }

        if (filterPlatform != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[platform]", filterPlatform));
        }

        if (filterStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[status]", filterStatus));
        }

        if (filterUdid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[udid]", filterUdid));
        }

        if (filterId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[id]", filterId));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sort", sort));
        }

        if (fieldsDevices != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[devices]", fieldsDevices));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetCollectionValidateBeforeCall(List<String> filterName, List<String> filterPlatform, List<String> filterStatus, List<String> filterUdid, List<String> filterId, List<String> sort, List<String> fieldsDevices, Integer limit, final ApiCallback _callback) throws ApiException {
        return devicesGetCollectionCall(filterName, filterPlatform, filterStatus, filterUdid, filterId, sort, fieldsDevices, limit, _callback);

    }

    /**
     * 
     * 
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterStatus filter by attribute &#39;status&#39; (optional)
     * @param filterUdid filter by attribute &#39;udid&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param limit maximum resources per page (optional)
     * @return DevicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Devices </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public DevicesResponse devicesGetCollection(List<String> filterName, List<String> filterPlatform, List<String> filterStatus, List<String> filterUdid, List<String> filterId, List<String> sort, List<String> fieldsDevices, Integer limit) throws ApiException {
        ApiResponse<DevicesResponse> localVarResp = devicesGetCollectionWithHttpInfo(filterName, filterPlatform, filterStatus, filterUdid, filterId, sort, fieldsDevices, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterStatus filter by attribute &#39;status&#39; (optional)
     * @param filterUdid filter by attribute &#39;udid&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;DevicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Devices </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DevicesResponse> devicesGetCollectionWithHttpInfo(List<String> filterName, List<String> filterPlatform, List<String> filterStatus, List<String> filterUdid, List<String> filterId, List<String> sort, List<String> fieldsDevices, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = devicesGetCollectionValidateBeforeCall(filterName, filterPlatform, filterStatus, filterUdid, filterId, sort, fieldsDevices, limit, null);
        Type localVarReturnType = new TypeToken<DevicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterStatus filter by attribute &#39;status&#39; (optional)
     * @param filterUdid filter by attribute &#39;udid&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Devices </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetCollectionAsync(List<String> filterName, List<String> filterPlatform, List<String> filterStatus, List<String> filterUdid, List<String> filterId, List<String> sort, List<String> fieldsDevices, Integer limit, final ApiCallback<DevicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetCollectionValidateBeforeCall(filterName, filterPlatform, filterStatus, filterUdid, filterId, sort, fieldsDevices, limit, _callback);
        Type localVarReturnType = new TypeToken<DevicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetInstance
     * @param id the id of the requested resource (required)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetInstanceCall(String id, List<String> fieldsDevices, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsDevices != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[devices]", fieldsDevices));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetInstanceValidateBeforeCall(String id, List<String> fieldsDevices, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling devicesGetInstance(Async)");
        }

        return devicesGetInstanceCall(id, fieldsDevices, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @return DeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public DeviceResponse devicesGetInstance(String id, List<String> fieldsDevices) throws ApiException {
        ApiResponse<DeviceResponse> localVarResp = devicesGetInstanceWithHttpInfo(id, fieldsDevices);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @return ApiResponse&lt;DeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceResponse> devicesGetInstanceWithHttpInfo(String id, List<String> fieldsDevices) throws ApiException {
        okhttp3.Call localVarCall = devicesGetInstanceValidateBeforeCall(id, fieldsDevices, null);
        Type localVarReturnType = new TypeToken<DeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetInstanceAsync(String id, List<String> fieldsDevices, final ApiCallback<DeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetInstanceValidateBeforeCall(id, fieldsDevices, _callback);
        Type localVarReturnType = new TypeToken<DeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesUpdateInstance
     * @param id the id of the requested resource (required)
     * @param deviceUpdateRequest Device representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdateInstanceCall(String id, DeviceUpdateRequest deviceUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesUpdateInstanceValidateBeforeCall(String id, DeviceUpdateRequest deviceUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling devicesUpdateInstance(Async)");
        }

        // verify the required parameter 'deviceUpdateRequest' is set
        if (deviceUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'deviceUpdateRequest' when calling devicesUpdateInstance(Async)");
        }

        return devicesUpdateInstanceCall(id, deviceUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param deviceUpdateRequest Device representation (required)
     * @return DeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public DeviceResponse devicesUpdateInstance(String id, DeviceUpdateRequest deviceUpdateRequest) throws ApiException {
        ApiResponse<DeviceResponse> localVarResp = devicesUpdateInstanceWithHttpInfo(id, deviceUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param deviceUpdateRequest Device representation (required)
     * @return ApiResponse&lt;DeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceResponse> devicesUpdateInstanceWithHttpInfo(String id, DeviceUpdateRequest deviceUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = devicesUpdateInstanceValidateBeforeCall(id, deviceUpdateRequest, null);
        Type localVarReturnType = new TypeToken<DeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param deviceUpdateRequest Device representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Device </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdateInstanceAsync(String id, DeviceUpdateRequest deviceUpdateRequest, final ApiCallback<DeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesUpdateInstanceValidateBeforeCall(id, deviceUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
