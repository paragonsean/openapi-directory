/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppScreenshotSetAppScreenshotsLinkagesRequest;
import org.openapitools.client.model.AppScreenshotSetAppScreenshotsLinkagesResponse;
import org.openapitools.client.model.AppScreenshotSetCreateRequest;
import org.openapitools.client.model.AppScreenshotSetResponse;
import org.openapitools.client.model.AppScreenshotsResponse;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppScreenshotSetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppScreenshotSetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppScreenshotSetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appScreenshotSetsAppScreenshotsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsAppScreenshotsGetToManyRelatedCall(String id, List<String> fieldsAppScreenshotSets, List<String> fieldsAppScreenshots, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/appScreenshotSets/{id}/appScreenshots"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsAppScreenshotSets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appScreenshotSets]", fieldsAppScreenshotSets));
        }

        if (fieldsAppScreenshots != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appScreenshots]", fieldsAppScreenshots));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appScreenshotSetsAppScreenshotsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsAppScreenshotSets, List<String> fieldsAppScreenshots, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appScreenshotSetsAppScreenshotsGetToManyRelated(Async)");
        }

        return appScreenshotSetsAppScreenshotsGetToManyRelatedCall(id, fieldsAppScreenshotSets, fieldsAppScreenshots, limit, include, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return AppScreenshotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppScreenshotsResponse appScreenshotSetsAppScreenshotsGetToManyRelated(String id, List<String> fieldsAppScreenshotSets, List<String> fieldsAppScreenshots, Integer limit, List<String> include) throws ApiException {
        ApiResponse<AppScreenshotsResponse> localVarResp = appScreenshotSetsAppScreenshotsGetToManyRelatedWithHttpInfo(id, fieldsAppScreenshotSets, fieldsAppScreenshots, limit, include);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return ApiResponse&lt;AppScreenshotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppScreenshotsResponse> appScreenshotSetsAppScreenshotsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsAppScreenshotSets, List<String> fieldsAppScreenshots, Integer limit, List<String> include) throws ApiException {
        okhttp3.Call localVarCall = appScreenshotSetsAppScreenshotsGetToManyRelatedValidateBeforeCall(id, fieldsAppScreenshotSets, fieldsAppScreenshots, limit, include, null);
        Type localVarReturnType = new TypeToken<AppScreenshotsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsAppScreenshotsGetToManyRelatedAsync(String id, List<String> fieldsAppScreenshotSets, List<String> fieldsAppScreenshots, Integer limit, List<String> include, final ApiCallback<AppScreenshotsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appScreenshotSetsAppScreenshotsGetToManyRelatedValidateBeforeCall(id, fieldsAppScreenshotSets, fieldsAppScreenshots, limit, include, _callback);
        Type localVarReturnType = new TypeToken<AppScreenshotsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appScreenshotSetsAppScreenshotsGetToManyRelationship
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsAppScreenshotsGetToManyRelationshipCall(String id, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/appScreenshotSets/{id}/relationships/appScreenshots"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appScreenshotSetsAppScreenshotsGetToManyRelationshipValidateBeforeCall(String id, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appScreenshotSetsAppScreenshotsGetToManyRelationship(Async)");
        }

        return appScreenshotSetsAppScreenshotsGetToManyRelationshipCall(id, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return AppScreenshotSetAppScreenshotsLinkagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppScreenshotSetAppScreenshotsLinkagesResponse appScreenshotSetsAppScreenshotsGetToManyRelationship(String id, Integer limit) throws ApiException {
        ApiResponse<AppScreenshotSetAppScreenshotsLinkagesResponse> localVarResp = appScreenshotSetsAppScreenshotsGetToManyRelationshipWithHttpInfo(id, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;AppScreenshotSetAppScreenshotsLinkagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppScreenshotSetAppScreenshotsLinkagesResponse> appScreenshotSetsAppScreenshotsGetToManyRelationshipWithHttpInfo(String id, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = appScreenshotSetsAppScreenshotsGetToManyRelationshipValidateBeforeCall(id, limit, null);
        Type localVarReturnType = new TypeToken<AppScreenshotSetAppScreenshotsLinkagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsAppScreenshotsGetToManyRelationshipAsync(String id, Integer limit, final ApiCallback<AppScreenshotSetAppScreenshotsLinkagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appScreenshotSetsAppScreenshotsGetToManyRelationshipValidateBeforeCall(id, limit, _callback);
        Type localVarReturnType = new TypeToken<AppScreenshotSetAppScreenshotsLinkagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appScreenshotSetsAppScreenshotsReplaceToManyRelationship
     * @param id the id of the requested resource (required)
     * @param appScreenshotSetAppScreenshotsLinkagesRequest List of related linkages (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsAppScreenshotsReplaceToManyRelationshipCall(String id, AppScreenshotSetAppScreenshotsLinkagesRequest appScreenshotSetAppScreenshotsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appScreenshotSetAppScreenshotsLinkagesRequest;

        // create path and map variables
        String localVarPath = "/v1/appScreenshotSets/{id}/relationships/appScreenshots"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appScreenshotSetsAppScreenshotsReplaceToManyRelationshipValidateBeforeCall(String id, AppScreenshotSetAppScreenshotsLinkagesRequest appScreenshotSetAppScreenshotsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appScreenshotSetsAppScreenshotsReplaceToManyRelationship(Async)");
        }

        // verify the required parameter 'appScreenshotSetAppScreenshotsLinkagesRequest' is set
        if (appScreenshotSetAppScreenshotsLinkagesRequest == null) {
            throw new ApiException("Missing the required parameter 'appScreenshotSetAppScreenshotsLinkagesRequest' when calling appScreenshotSetsAppScreenshotsReplaceToManyRelationship(Async)");
        }

        return appScreenshotSetsAppScreenshotsReplaceToManyRelationshipCall(id, appScreenshotSetAppScreenshotsLinkagesRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param appScreenshotSetAppScreenshotsLinkagesRequest List of related linkages (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void appScreenshotSetsAppScreenshotsReplaceToManyRelationship(String id, AppScreenshotSetAppScreenshotsLinkagesRequest appScreenshotSetAppScreenshotsLinkagesRequest) throws ApiException {
        appScreenshotSetsAppScreenshotsReplaceToManyRelationshipWithHttpInfo(id, appScreenshotSetAppScreenshotsLinkagesRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param appScreenshotSetAppScreenshotsLinkagesRequest List of related linkages (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appScreenshotSetsAppScreenshotsReplaceToManyRelationshipWithHttpInfo(String id, AppScreenshotSetAppScreenshotsLinkagesRequest appScreenshotSetAppScreenshotsLinkagesRequest) throws ApiException {
        okhttp3.Call localVarCall = appScreenshotSetsAppScreenshotsReplaceToManyRelationshipValidateBeforeCall(id, appScreenshotSetAppScreenshotsLinkagesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param appScreenshotSetAppScreenshotsLinkagesRequest List of related linkages (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsAppScreenshotsReplaceToManyRelationshipAsync(String id, AppScreenshotSetAppScreenshotsLinkagesRequest appScreenshotSetAppScreenshotsLinkagesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appScreenshotSetsAppScreenshotsReplaceToManyRelationshipValidateBeforeCall(id, appScreenshotSetAppScreenshotsLinkagesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appScreenshotSetsCreateInstance
     * @param appScreenshotSetCreateRequest AppScreenshotSet representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppScreenshotSet </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsCreateInstanceCall(AppScreenshotSetCreateRequest appScreenshotSetCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appScreenshotSetCreateRequest;

        // create path and map variables
        String localVarPath = "/v1/appScreenshotSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appScreenshotSetsCreateInstanceValidateBeforeCall(AppScreenshotSetCreateRequest appScreenshotSetCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appScreenshotSetCreateRequest' is set
        if (appScreenshotSetCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'appScreenshotSetCreateRequest' when calling appScreenshotSetsCreateInstance(Async)");
        }

        return appScreenshotSetsCreateInstanceCall(appScreenshotSetCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param appScreenshotSetCreateRequest AppScreenshotSet representation (required)
     * @return AppScreenshotSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppScreenshotSet </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public AppScreenshotSetResponse appScreenshotSetsCreateInstance(AppScreenshotSetCreateRequest appScreenshotSetCreateRequest) throws ApiException {
        ApiResponse<AppScreenshotSetResponse> localVarResp = appScreenshotSetsCreateInstanceWithHttpInfo(appScreenshotSetCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appScreenshotSetCreateRequest AppScreenshotSet representation (required)
     * @return ApiResponse&lt;AppScreenshotSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppScreenshotSet </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppScreenshotSetResponse> appScreenshotSetsCreateInstanceWithHttpInfo(AppScreenshotSetCreateRequest appScreenshotSetCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = appScreenshotSetsCreateInstanceValidateBeforeCall(appScreenshotSetCreateRequest, null);
        Type localVarReturnType = new TypeToken<AppScreenshotSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appScreenshotSetCreateRequest AppScreenshotSet representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppScreenshotSet </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsCreateInstanceAsync(AppScreenshotSetCreateRequest appScreenshotSetCreateRequest, final ApiCallback<AppScreenshotSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appScreenshotSetsCreateInstanceValidateBeforeCall(appScreenshotSetCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppScreenshotSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appScreenshotSetsDeleteInstance
     * @param id the id of the requested resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsDeleteInstanceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/appScreenshotSets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appScreenshotSetsDeleteInstanceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appScreenshotSetsDeleteInstance(Async)");
        }

        return appScreenshotSetsDeleteInstanceCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void appScreenshotSetsDeleteInstance(String id) throws ApiException {
        appScreenshotSetsDeleteInstanceWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appScreenshotSetsDeleteInstanceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = appScreenshotSetsDeleteInstanceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsDeleteInstanceAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appScreenshotSetsDeleteInstanceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appScreenshotSetsGetInstance
     * @param id the id of the requested resource (required)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limitAppScreenshots maximum number of related appScreenshots returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppScreenshotSet </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsGetInstanceCall(String id, List<String> fieldsAppScreenshotSets, List<String> include, List<String> fieldsAppScreenshots, Integer limitAppScreenshots, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/appScreenshotSets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsAppScreenshotSets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appScreenshotSets]", fieldsAppScreenshotSets));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsAppScreenshots != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appScreenshots]", fieldsAppScreenshots));
        }

        if (limitAppScreenshots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[appScreenshots]", limitAppScreenshots));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appScreenshotSetsGetInstanceValidateBeforeCall(String id, List<String> fieldsAppScreenshotSets, List<String> include, List<String> fieldsAppScreenshots, Integer limitAppScreenshots, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appScreenshotSetsGetInstance(Async)");
        }

        return appScreenshotSetsGetInstanceCall(id, fieldsAppScreenshotSets, include, fieldsAppScreenshots, limitAppScreenshots, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limitAppScreenshots maximum number of related appScreenshots returned (when they are included) (optional)
     * @return AppScreenshotSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppScreenshotSet </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppScreenshotSetResponse appScreenshotSetsGetInstance(String id, List<String> fieldsAppScreenshotSets, List<String> include, List<String> fieldsAppScreenshots, Integer limitAppScreenshots) throws ApiException {
        ApiResponse<AppScreenshotSetResponse> localVarResp = appScreenshotSetsGetInstanceWithHttpInfo(id, fieldsAppScreenshotSets, include, fieldsAppScreenshots, limitAppScreenshots);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limitAppScreenshots maximum number of related appScreenshots returned (when they are included) (optional)
     * @return ApiResponse&lt;AppScreenshotSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppScreenshotSet </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppScreenshotSetResponse> appScreenshotSetsGetInstanceWithHttpInfo(String id, List<String> fieldsAppScreenshotSets, List<String> include, List<String> fieldsAppScreenshots, Integer limitAppScreenshots) throws ApiException {
        okhttp3.Call localVarCall = appScreenshotSetsGetInstanceValidateBeforeCall(id, fieldsAppScreenshotSets, include, fieldsAppScreenshots, limitAppScreenshots, null);
        Type localVarReturnType = new TypeToken<AppScreenshotSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limitAppScreenshots maximum number of related appScreenshots returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppScreenshotSet </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appScreenshotSetsGetInstanceAsync(String id, List<String> fieldsAppScreenshotSets, List<String> include, List<String> fieldsAppScreenshots, Integer limitAppScreenshots, final ApiCallback<AppScreenshotSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appScreenshotSetsGetInstanceValidateBeforeCall(id, fieldsAppScreenshotSets, include, fieldsAppScreenshots, limitAppScreenshots, _callback);
        Type localVarReturnType = new TypeToken<AppScreenshotSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
