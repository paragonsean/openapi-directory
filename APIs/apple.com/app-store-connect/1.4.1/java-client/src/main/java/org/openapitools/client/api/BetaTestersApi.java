/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppsResponse;
import org.openapitools.client.model.BetaGroupsResponse;
import org.openapitools.client.model.BetaTesterAppsLinkagesRequest;
import org.openapitools.client.model.BetaTesterAppsLinkagesResponse;
import org.openapitools.client.model.BetaTesterBetaGroupsLinkagesRequest;
import org.openapitools.client.model.BetaTesterBetaGroupsLinkagesResponse;
import org.openapitools.client.model.BetaTesterBuildsLinkagesRequest;
import org.openapitools.client.model.BetaTesterBuildsLinkagesResponse;
import org.openapitools.client.model.BetaTesterCreateRequest;
import org.openapitools.client.model.BetaTesterResponse;
import org.openapitools.client.model.BetaTestersResponse;
import org.openapitools.client.model.BuildsResponse;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BetaTestersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BetaTestersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BetaTestersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for betaTestersAppsDeleteToManyRelationship
     * @param id the id of the requested resource (required)
     * @param betaTesterAppsLinkagesRequest List of related linkages (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersAppsDeleteToManyRelationshipCall(String id, BetaTesterAppsLinkagesRequest betaTesterAppsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = betaTesterAppsLinkagesRequest;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}/relationships/apps"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersAppsDeleteToManyRelationshipValidateBeforeCall(String id, BetaTesterAppsLinkagesRequest betaTesterAppsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersAppsDeleteToManyRelationship(Async)");
        }

        // verify the required parameter 'betaTesterAppsLinkagesRequest' is set
        if (betaTesterAppsLinkagesRequest == null) {
            throw new ApiException("Missing the required parameter 'betaTesterAppsLinkagesRequest' when calling betaTestersAppsDeleteToManyRelationship(Async)");
        }

        return betaTestersAppsDeleteToManyRelationshipCall(id, betaTesterAppsLinkagesRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterAppsLinkagesRequest List of related linkages (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void betaTestersAppsDeleteToManyRelationship(String id, BetaTesterAppsLinkagesRequest betaTesterAppsLinkagesRequest) throws ApiException {
        betaTestersAppsDeleteToManyRelationshipWithHttpInfo(id, betaTesterAppsLinkagesRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterAppsLinkagesRequest List of related linkages (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> betaTestersAppsDeleteToManyRelationshipWithHttpInfo(String id, BetaTesterAppsLinkagesRequest betaTesterAppsLinkagesRequest) throws ApiException {
        okhttp3.Call localVarCall = betaTestersAppsDeleteToManyRelationshipValidateBeforeCall(id, betaTesterAppsLinkagesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterAppsLinkagesRequest List of related linkages (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersAppsDeleteToManyRelationshipAsync(String id, BetaTesterAppsLinkagesRequest betaTesterAppsLinkagesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersAppsDeleteToManyRelationshipValidateBeforeCall(id, betaTesterAppsLinkagesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersAppsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersAppsGetToManyRelatedCall(String id, List<String> fieldsApps, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}/apps"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersAppsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsApps, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersAppsGetToManyRelated(Async)");
        }

        return betaTestersAppsGetToManyRelatedCall(id, fieldsApps, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @return AppsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppsResponse betaTestersAppsGetToManyRelated(String id, List<String> fieldsApps, Integer limit) throws ApiException {
        ApiResponse<AppsResponse> localVarResp = betaTestersAppsGetToManyRelatedWithHttpInfo(id, fieldsApps, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;AppsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsResponse> betaTestersAppsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsApps, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = betaTestersAppsGetToManyRelatedValidateBeforeCall(id, fieldsApps, limit, null);
        Type localVarReturnType = new TypeToken<AppsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersAppsGetToManyRelatedAsync(String id, List<String> fieldsApps, Integer limit, final ApiCallback<AppsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersAppsGetToManyRelatedValidateBeforeCall(id, fieldsApps, limit, _callback);
        Type localVarReturnType = new TypeToken<AppsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersAppsGetToManyRelationship
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersAppsGetToManyRelationshipCall(String id, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}/relationships/apps"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersAppsGetToManyRelationshipValidateBeforeCall(String id, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersAppsGetToManyRelationship(Async)");
        }

        return betaTestersAppsGetToManyRelationshipCall(id, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return BetaTesterAppsLinkagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaTesterAppsLinkagesResponse betaTestersAppsGetToManyRelationship(String id, Integer limit) throws ApiException {
        ApiResponse<BetaTesterAppsLinkagesResponse> localVarResp = betaTestersAppsGetToManyRelationshipWithHttpInfo(id, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BetaTesterAppsLinkagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaTesterAppsLinkagesResponse> betaTestersAppsGetToManyRelationshipWithHttpInfo(String id, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = betaTestersAppsGetToManyRelationshipValidateBeforeCall(id, limit, null);
        Type localVarReturnType = new TypeToken<BetaTesterAppsLinkagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersAppsGetToManyRelationshipAsync(String id, Integer limit, final ApiCallback<BetaTesterAppsLinkagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersAppsGetToManyRelationshipValidateBeforeCall(id, limit, _callback);
        Type localVarReturnType = new TypeToken<BetaTesterAppsLinkagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersBetaGroupsCreateToManyRelationship
     * @param id the id of the requested resource (required)
     * @param betaTesterBetaGroupsLinkagesRequest List of related linkages (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBetaGroupsCreateToManyRelationshipCall(String id, BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = betaTesterBetaGroupsLinkagesRequest;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}/relationships/betaGroups"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersBetaGroupsCreateToManyRelationshipValidateBeforeCall(String id, BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersBetaGroupsCreateToManyRelationship(Async)");
        }

        // verify the required parameter 'betaTesterBetaGroupsLinkagesRequest' is set
        if (betaTesterBetaGroupsLinkagesRequest == null) {
            throw new ApiException("Missing the required parameter 'betaTesterBetaGroupsLinkagesRequest' when calling betaTestersBetaGroupsCreateToManyRelationship(Async)");
        }

        return betaTestersBetaGroupsCreateToManyRelationshipCall(id, betaTesterBetaGroupsLinkagesRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBetaGroupsLinkagesRequest List of related linkages (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void betaTestersBetaGroupsCreateToManyRelationship(String id, BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest) throws ApiException {
        betaTestersBetaGroupsCreateToManyRelationshipWithHttpInfo(id, betaTesterBetaGroupsLinkagesRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBetaGroupsLinkagesRequest List of related linkages (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> betaTestersBetaGroupsCreateToManyRelationshipWithHttpInfo(String id, BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest) throws ApiException {
        okhttp3.Call localVarCall = betaTestersBetaGroupsCreateToManyRelationshipValidateBeforeCall(id, betaTesterBetaGroupsLinkagesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBetaGroupsLinkagesRequest List of related linkages (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBetaGroupsCreateToManyRelationshipAsync(String id, BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersBetaGroupsCreateToManyRelationshipValidateBeforeCall(id, betaTesterBetaGroupsLinkagesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersBetaGroupsDeleteToManyRelationship
     * @param id the id of the requested resource (required)
     * @param betaTesterBetaGroupsLinkagesRequest List of related linkages (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBetaGroupsDeleteToManyRelationshipCall(String id, BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = betaTesterBetaGroupsLinkagesRequest;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}/relationships/betaGroups"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersBetaGroupsDeleteToManyRelationshipValidateBeforeCall(String id, BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersBetaGroupsDeleteToManyRelationship(Async)");
        }

        // verify the required parameter 'betaTesterBetaGroupsLinkagesRequest' is set
        if (betaTesterBetaGroupsLinkagesRequest == null) {
            throw new ApiException("Missing the required parameter 'betaTesterBetaGroupsLinkagesRequest' when calling betaTestersBetaGroupsDeleteToManyRelationship(Async)");
        }

        return betaTestersBetaGroupsDeleteToManyRelationshipCall(id, betaTesterBetaGroupsLinkagesRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBetaGroupsLinkagesRequest List of related linkages (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void betaTestersBetaGroupsDeleteToManyRelationship(String id, BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest) throws ApiException {
        betaTestersBetaGroupsDeleteToManyRelationshipWithHttpInfo(id, betaTesterBetaGroupsLinkagesRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBetaGroupsLinkagesRequest List of related linkages (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> betaTestersBetaGroupsDeleteToManyRelationshipWithHttpInfo(String id, BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest) throws ApiException {
        okhttp3.Call localVarCall = betaTestersBetaGroupsDeleteToManyRelationshipValidateBeforeCall(id, betaTesterBetaGroupsLinkagesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBetaGroupsLinkagesRequest List of related linkages (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBetaGroupsDeleteToManyRelationshipAsync(String id, BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersBetaGroupsDeleteToManyRelationshipValidateBeforeCall(id, betaTesterBetaGroupsLinkagesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersBetaGroupsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBetaGroupsGetToManyRelatedCall(String id, List<String> fieldsBetaGroups, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}/betaGroups"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBetaGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaGroups]", fieldsBetaGroups));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersBetaGroupsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsBetaGroups, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersBetaGroupsGetToManyRelated(Async)");
        }

        return betaTestersBetaGroupsGetToManyRelatedCall(id, fieldsBetaGroups, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param limit maximum resources per page (optional)
     * @return BetaGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaGroupsResponse betaTestersBetaGroupsGetToManyRelated(String id, List<String> fieldsBetaGroups, Integer limit) throws ApiException {
        ApiResponse<BetaGroupsResponse> localVarResp = betaTestersBetaGroupsGetToManyRelatedWithHttpInfo(id, fieldsBetaGroups, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BetaGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaGroupsResponse> betaTestersBetaGroupsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsBetaGroups, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = betaTestersBetaGroupsGetToManyRelatedValidateBeforeCall(id, fieldsBetaGroups, limit, null);
        Type localVarReturnType = new TypeToken<BetaGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBetaGroupsGetToManyRelatedAsync(String id, List<String> fieldsBetaGroups, Integer limit, final ApiCallback<BetaGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersBetaGroupsGetToManyRelatedValidateBeforeCall(id, fieldsBetaGroups, limit, _callback);
        Type localVarReturnType = new TypeToken<BetaGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersBetaGroupsGetToManyRelationship
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBetaGroupsGetToManyRelationshipCall(String id, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}/relationships/betaGroups"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersBetaGroupsGetToManyRelationshipValidateBeforeCall(String id, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersBetaGroupsGetToManyRelationship(Async)");
        }

        return betaTestersBetaGroupsGetToManyRelationshipCall(id, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return BetaTesterBetaGroupsLinkagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaTesterBetaGroupsLinkagesResponse betaTestersBetaGroupsGetToManyRelationship(String id, Integer limit) throws ApiException {
        ApiResponse<BetaTesterBetaGroupsLinkagesResponse> localVarResp = betaTestersBetaGroupsGetToManyRelationshipWithHttpInfo(id, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BetaTesterBetaGroupsLinkagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaTesterBetaGroupsLinkagesResponse> betaTestersBetaGroupsGetToManyRelationshipWithHttpInfo(String id, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = betaTestersBetaGroupsGetToManyRelationshipValidateBeforeCall(id, limit, null);
        Type localVarReturnType = new TypeToken<BetaTesterBetaGroupsLinkagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBetaGroupsGetToManyRelationshipAsync(String id, Integer limit, final ApiCallback<BetaTesterBetaGroupsLinkagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersBetaGroupsGetToManyRelationshipValidateBeforeCall(id, limit, _callback);
        Type localVarReturnType = new TypeToken<BetaTesterBetaGroupsLinkagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersBuildsCreateToManyRelationship
     * @param id the id of the requested resource (required)
     * @param betaTesterBuildsLinkagesRequest List of related linkages (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBuildsCreateToManyRelationshipCall(String id, BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = betaTesterBuildsLinkagesRequest;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}/relationships/builds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersBuildsCreateToManyRelationshipValidateBeforeCall(String id, BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersBuildsCreateToManyRelationship(Async)");
        }

        // verify the required parameter 'betaTesterBuildsLinkagesRequest' is set
        if (betaTesterBuildsLinkagesRequest == null) {
            throw new ApiException("Missing the required parameter 'betaTesterBuildsLinkagesRequest' when calling betaTestersBuildsCreateToManyRelationship(Async)");
        }

        return betaTestersBuildsCreateToManyRelationshipCall(id, betaTesterBuildsLinkagesRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBuildsLinkagesRequest List of related linkages (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void betaTestersBuildsCreateToManyRelationship(String id, BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest) throws ApiException {
        betaTestersBuildsCreateToManyRelationshipWithHttpInfo(id, betaTesterBuildsLinkagesRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBuildsLinkagesRequest List of related linkages (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> betaTestersBuildsCreateToManyRelationshipWithHttpInfo(String id, BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest) throws ApiException {
        okhttp3.Call localVarCall = betaTestersBuildsCreateToManyRelationshipValidateBeforeCall(id, betaTesterBuildsLinkagesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBuildsLinkagesRequest List of related linkages (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBuildsCreateToManyRelationshipAsync(String id, BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersBuildsCreateToManyRelationshipValidateBeforeCall(id, betaTesterBuildsLinkagesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersBuildsDeleteToManyRelationship
     * @param id the id of the requested resource (required)
     * @param betaTesterBuildsLinkagesRequest List of related linkages (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBuildsDeleteToManyRelationshipCall(String id, BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = betaTesterBuildsLinkagesRequest;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}/relationships/builds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersBuildsDeleteToManyRelationshipValidateBeforeCall(String id, BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersBuildsDeleteToManyRelationship(Async)");
        }

        // verify the required parameter 'betaTesterBuildsLinkagesRequest' is set
        if (betaTesterBuildsLinkagesRequest == null) {
            throw new ApiException("Missing the required parameter 'betaTesterBuildsLinkagesRequest' when calling betaTestersBuildsDeleteToManyRelationship(Async)");
        }

        return betaTestersBuildsDeleteToManyRelationshipCall(id, betaTesterBuildsLinkagesRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBuildsLinkagesRequest List of related linkages (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void betaTestersBuildsDeleteToManyRelationship(String id, BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest) throws ApiException {
        betaTestersBuildsDeleteToManyRelationshipWithHttpInfo(id, betaTesterBuildsLinkagesRequest);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBuildsLinkagesRequest List of related linkages (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> betaTestersBuildsDeleteToManyRelationshipWithHttpInfo(String id, BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest) throws ApiException {
        okhttp3.Call localVarCall = betaTestersBuildsDeleteToManyRelationshipValidateBeforeCall(id, betaTesterBuildsLinkagesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param betaTesterBuildsLinkagesRequest List of related linkages (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBuildsDeleteToManyRelationshipAsync(String id, BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersBuildsDeleteToManyRelationshipValidateBeforeCall(id, betaTesterBuildsLinkagesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersBuildsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBuildsGetToManyRelatedCall(String id, List<String> fieldsBuilds, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}/builds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersBuildsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsBuilds, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersBuildsGetToManyRelated(Async)");
        }

        return betaTestersBuildsGetToManyRelatedCall(id, fieldsBuilds, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @return BuildsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BuildsResponse betaTestersBuildsGetToManyRelated(String id, List<String> fieldsBuilds, Integer limit) throws ApiException {
        ApiResponse<BuildsResponse> localVarResp = betaTestersBuildsGetToManyRelatedWithHttpInfo(id, fieldsBuilds, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BuildsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsResponse> betaTestersBuildsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsBuilds, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = betaTestersBuildsGetToManyRelatedValidateBeforeCall(id, fieldsBuilds, limit, null);
        Type localVarReturnType = new TypeToken<BuildsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBuildsGetToManyRelatedAsync(String id, List<String> fieldsBuilds, Integer limit, final ApiCallback<BuildsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersBuildsGetToManyRelatedValidateBeforeCall(id, fieldsBuilds, limit, _callback);
        Type localVarReturnType = new TypeToken<BuildsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersBuildsGetToManyRelationship
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBuildsGetToManyRelationshipCall(String id, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}/relationships/builds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersBuildsGetToManyRelationshipValidateBeforeCall(String id, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersBuildsGetToManyRelationship(Async)");
        }

        return betaTestersBuildsGetToManyRelationshipCall(id, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return BetaTesterBuildsLinkagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaTesterBuildsLinkagesResponse betaTestersBuildsGetToManyRelationship(String id, Integer limit) throws ApiException {
        ApiResponse<BetaTesterBuildsLinkagesResponse> localVarResp = betaTestersBuildsGetToManyRelationshipWithHttpInfo(id, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;BetaTesterBuildsLinkagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaTesterBuildsLinkagesResponse> betaTestersBuildsGetToManyRelationshipWithHttpInfo(String id, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = betaTestersBuildsGetToManyRelationshipValidateBeforeCall(id, limit, null);
        Type localVarReturnType = new TypeToken<BetaTesterBuildsLinkagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related linkages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersBuildsGetToManyRelationshipAsync(String id, Integer limit, final ApiCallback<BetaTesterBuildsLinkagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersBuildsGetToManyRelationshipValidateBeforeCall(id, limit, _callback);
        Type localVarReturnType = new TypeToken<BetaTesterBuildsLinkagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersCreateInstance
     * @param betaTesterCreateRequest BetaTester representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single BetaTester </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersCreateInstanceCall(BetaTesterCreateRequest betaTesterCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = betaTesterCreateRequest;

        // create path and map variables
        String localVarPath = "/v1/betaTesters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersCreateInstanceValidateBeforeCall(BetaTesterCreateRequest betaTesterCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'betaTesterCreateRequest' is set
        if (betaTesterCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'betaTesterCreateRequest' when calling betaTestersCreateInstance(Async)");
        }

        return betaTestersCreateInstanceCall(betaTesterCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param betaTesterCreateRequest BetaTester representation (required)
     * @return BetaTesterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single BetaTester </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public BetaTesterResponse betaTestersCreateInstance(BetaTesterCreateRequest betaTesterCreateRequest) throws ApiException {
        ApiResponse<BetaTesterResponse> localVarResp = betaTestersCreateInstanceWithHttpInfo(betaTesterCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param betaTesterCreateRequest BetaTester representation (required)
     * @return ApiResponse&lt;BetaTesterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single BetaTester </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaTesterResponse> betaTestersCreateInstanceWithHttpInfo(BetaTesterCreateRequest betaTesterCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = betaTestersCreateInstanceValidateBeforeCall(betaTesterCreateRequest, null);
        Type localVarReturnType = new TypeToken<BetaTesterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param betaTesterCreateRequest BetaTester representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single BetaTester </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersCreateInstanceAsync(BetaTesterCreateRequest betaTesterCreateRequest, final ApiCallback<BetaTesterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersCreateInstanceValidateBeforeCall(betaTesterCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<BetaTesterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersDeleteInstance
     * @param id the id of the requested resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersDeleteInstanceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersDeleteInstanceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersDeleteInstance(Async)");
        }

        return betaTestersDeleteInstanceCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void betaTestersDeleteInstance(String id) throws ApiException {
        betaTestersDeleteInstanceWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> betaTestersDeleteInstanceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = betaTestersDeleteInstanceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersDeleteInstanceAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersDeleteInstanceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersGetCollection
     * @param filterEmail filter by attribute &#39;email&#39; (optional)
     * @param filterFirstName filter by attribute &#39;firstName&#39; (optional)
     * @param filterInviteType filter by attribute &#39;inviteType&#39; (optional)
     * @param filterLastName filter by attribute &#39;lastName&#39; (optional)
     * @param filterApps filter by id(s) of related &#39;apps&#39; (optional)
     * @param filterBetaGroups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitApps maximum number of related apps returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BetaTesters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersGetCollectionCall(List<String> filterEmail, List<String> filterFirstName, List<String> filterInviteType, List<String> filterLastName, List<String> filterApps, List<String> filterBetaGroups, List<String> filterBuilds, List<String> sort, List<String> fieldsBetaTesters, Integer limit, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitApps, Integer limitBetaGroups, Integer limitBuilds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/betaTesters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterEmail != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[email]", filterEmail));
        }

        if (filterFirstName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[firstName]", filterFirstName));
        }

        if (filterInviteType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[inviteType]", filterInviteType));
        }

        if (filterLastName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[lastName]", filterLastName));
        }

        if (filterApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[apps]", filterApps));
        }

        if (filterBetaGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[betaGroups]", filterBetaGroups));
        }

        if (filterBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[builds]", filterBuilds));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sort", sort));
        }

        if (fieldsBetaTesters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaTesters]", fieldsBetaTesters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsBetaGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaGroups]", fieldsBetaGroups));
        }

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limitApps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[apps]", limitApps));
        }

        if (limitBetaGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[betaGroups]", limitBetaGroups));
        }

        if (limitBuilds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[builds]", limitBuilds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersGetCollectionValidateBeforeCall(List<String> filterEmail, List<String> filterFirstName, List<String> filterInviteType, List<String> filterLastName, List<String> filterApps, List<String> filterBetaGroups, List<String> filterBuilds, List<String> sort, List<String> fieldsBetaTesters, Integer limit, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitApps, Integer limitBetaGroups, Integer limitBuilds, final ApiCallback _callback) throws ApiException {
        return betaTestersGetCollectionCall(filterEmail, filterFirstName, filterInviteType, filterLastName, filterApps, filterBetaGroups, filterBuilds, sort, fieldsBetaTesters, limit, include, fieldsBetaGroups, fieldsBuilds, fieldsApps, limitApps, limitBetaGroups, limitBuilds, _callback);

    }

    /**
     * 
     * 
     * @param filterEmail filter by attribute &#39;email&#39; (optional)
     * @param filterFirstName filter by attribute &#39;firstName&#39; (optional)
     * @param filterInviteType filter by attribute &#39;inviteType&#39; (optional)
     * @param filterLastName filter by attribute &#39;lastName&#39; (optional)
     * @param filterApps filter by id(s) of related &#39;apps&#39; (optional)
     * @param filterBetaGroups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitApps maximum number of related apps returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return BetaTestersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BetaTesters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public BetaTestersResponse betaTestersGetCollection(List<String> filterEmail, List<String> filterFirstName, List<String> filterInviteType, List<String> filterLastName, List<String> filterApps, List<String> filterBetaGroups, List<String> filterBuilds, List<String> sort, List<String> fieldsBetaTesters, Integer limit, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitApps, Integer limitBetaGroups, Integer limitBuilds) throws ApiException {
        ApiResponse<BetaTestersResponse> localVarResp = betaTestersGetCollectionWithHttpInfo(filterEmail, filterFirstName, filterInviteType, filterLastName, filterApps, filterBetaGroups, filterBuilds, sort, fieldsBetaTesters, limit, include, fieldsBetaGroups, fieldsBuilds, fieldsApps, limitApps, limitBetaGroups, limitBuilds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param filterEmail filter by attribute &#39;email&#39; (optional)
     * @param filterFirstName filter by attribute &#39;firstName&#39; (optional)
     * @param filterInviteType filter by attribute &#39;inviteType&#39; (optional)
     * @param filterLastName filter by attribute &#39;lastName&#39; (optional)
     * @param filterApps filter by id(s) of related &#39;apps&#39; (optional)
     * @param filterBetaGroups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitApps maximum number of related apps returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return ApiResponse&lt;BetaTestersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BetaTesters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaTestersResponse> betaTestersGetCollectionWithHttpInfo(List<String> filterEmail, List<String> filterFirstName, List<String> filterInviteType, List<String> filterLastName, List<String> filterApps, List<String> filterBetaGroups, List<String> filterBuilds, List<String> sort, List<String> fieldsBetaTesters, Integer limit, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitApps, Integer limitBetaGroups, Integer limitBuilds) throws ApiException {
        okhttp3.Call localVarCall = betaTestersGetCollectionValidateBeforeCall(filterEmail, filterFirstName, filterInviteType, filterLastName, filterApps, filterBetaGroups, filterBuilds, sort, fieldsBetaTesters, limit, include, fieldsBetaGroups, fieldsBuilds, fieldsApps, limitApps, limitBetaGroups, limitBuilds, null);
        Type localVarReturnType = new TypeToken<BetaTestersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param filterEmail filter by attribute &#39;email&#39; (optional)
     * @param filterFirstName filter by attribute &#39;firstName&#39; (optional)
     * @param filterInviteType filter by attribute &#39;inviteType&#39; (optional)
     * @param filterLastName filter by attribute &#39;lastName&#39; (optional)
     * @param filterApps filter by id(s) of related &#39;apps&#39; (optional)
     * @param filterBetaGroups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitApps maximum number of related apps returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BetaTesters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersGetCollectionAsync(List<String> filterEmail, List<String> filterFirstName, List<String> filterInviteType, List<String> filterLastName, List<String> filterApps, List<String> filterBetaGroups, List<String> filterBuilds, List<String> sort, List<String> fieldsBetaTesters, Integer limit, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitApps, Integer limitBetaGroups, Integer limitBuilds, final ApiCallback<BetaTestersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersGetCollectionValidateBeforeCall(filterEmail, filterFirstName, filterInviteType, filterLastName, filterApps, filterBetaGroups, filterBuilds, sort, fieldsBetaTesters, limit, include, fieldsBetaGroups, fieldsBuilds, fieldsApps, limitApps, limitBetaGroups, limitBuilds, _callback);
        Type localVarReturnType = new TypeToken<BetaTestersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for betaTestersGetInstance
     * @param id the id of the requested resource (required)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitApps maximum number of related apps returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BetaTester </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersGetInstanceCall(String id, List<String> fieldsBetaTesters, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitApps, Integer limitBetaGroups, Integer limitBuilds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/betaTesters/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBetaTesters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaTesters]", fieldsBetaTesters));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsBetaGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[betaGroups]", fieldsBetaGroups));
        }

        if (fieldsBuilds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[builds]", fieldsBuilds));
        }

        if (fieldsApps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[apps]", fieldsApps));
        }

        if (limitApps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[apps]", limitApps));
        }

        if (limitBetaGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[betaGroups]", limitBetaGroups));
        }

        if (limitBuilds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[builds]", limitBuilds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call betaTestersGetInstanceValidateBeforeCall(String id, List<String> fieldsBetaTesters, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitApps, Integer limitBetaGroups, Integer limitBuilds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling betaTestersGetInstance(Async)");
        }

        return betaTestersGetInstanceCall(id, fieldsBetaTesters, include, fieldsBetaGroups, fieldsBuilds, fieldsApps, limitApps, limitBetaGroups, limitBuilds, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitApps maximum number of related apps returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return BetaTesterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BetaTester </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BetaTesterResponse betaTestersGetInstance(String id, List<String> fieldsBetaTesters, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitApps, Integer limitBetaGroups, Integer limitBuilds) throws ApiException {
        ApiResponse<BetaTesterResponse> localVarResp = betaTestersGetInstanceWithHttpInfo(id, fieldsBetaTesters, include, fieldsBetaGroups, fieldsBuilds, fieldsApps, limitApps, limitBetaGroups, limitBuilds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitApps maximum number of related apps returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return ApiResponse&lt;BetaTesterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BetaTester </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetaTesterResponse> betaTestersGetInstanceWithHttpInfo(String id, List<String> fieldsBetaTesters, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitApps, Integer limitBetaGroups, Integer limitBuilds) throws ApiException {
        okhttp3.Call localVarCall = betaTestersGetInstanceValidateBeforeCall(id, fieldsBetaTesters, include, fieldsBetaGroups, fieldsBuilds, fieldsApps, limitApps, limitBetaGroups, limitBuilds, null);
        Type localVarReturnType = new TypeToken<BetaTesterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitApps maximum number of related apps returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single BetaTester </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call betaTestersGetInstanceAsync(String id, List<String> fieldsBetaTesters, List<String> include, List<String> fieldsBetaGroups, List<String> fieldsBuilds, List<String> fieldsApps, Integer limitApps, Integer limitBetaGroups, Integer limitBuilds, final ApiCallback<BetaTesterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = betaTestersGetInstanceValidateBeforeCall(id, fieldsBetaTesters, include, fieldsBetaGroups, fieldsBuilds, fieldsApps, limitApps, limitBetaGroups, limitBuilds, _callback);
        Type localVarReturnType = new TypeToken<BetaTesterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
