/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BundleIdResponse;
import org.openapitools.client.model.CertificatesResponse;
import org.openapitools.client.model.DevicesResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ProfileCreateRequest;
import org.openapitools.client.model.ProfileResponse;
import org.openapitools.client.model.ProfilesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProfilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProfilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for profilesBundleIdGetToOneRelated
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesBundleIdGetToOneRelatedCall(String id, List<String> fieldsBundleIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/profiles/{id}/bundleId"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsBundleIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[bundleIds]", fieldsBundleIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesBundleIdGetToOneRelatedValidateBeforeCall(String id, List<String> fieldsBundleIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling profilesBundleIdGetToOneRelated(Async)");
        }

        return profilesBundleIdGetToOneRelatedCall(id, fieldsBundleIds, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @return BundleIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public BundleIdResponse profilesBundleIdGetToOneRelated(String id, List<String> fieldsBundleIds) throws ApiException {
        ApiResponse<BundleIdResponse> localVarResp = profilesBundleIdGetToOneRelatedWithHttpInfo(id, fieldsBundleIds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @return ApiResponse&lt;BundleIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleIdResponse> profilesBundleIdGetToOneRelatedWithHttpInfo(String id, List<String> fieldsBundleIds) throws ApiException {
        okhttp3.Call localVarCall = profilesBundleIdGetToOneRelatedValidateBeforeCall(id, fieldsBundleIds, null);
        Type localVarReturnType = new TypeToken<BundleIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesBundleIdGetToOneRelatedAsync(String id, List<String> fieldsBundleIds, final ApiCallback<BundleIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesBundleIdGetToOneRelatedValidateBeforeCall(id, fieldsBundleIds, _callback);
        Type localVarReturnType = new TypeToken<BundleIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesCertificatesGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesCertificatesGetToManyRelatedCall(String id, List<String> fieldsCertificates, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/profiles/{id}/certificates"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsCertificates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[certificates]", fieldsCertificates));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesCertificatesGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsCertificates, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling profilesCertificatesGetToManyRelated(Async)");
        }

        return profilesCertificatesGetToManyRelatedCall(id, fieldsCertificates, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param limit maximum resources per page (optional)
     * @return CertificatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public CertificatesResponse profilesCertificatesGetToManyRelated(String id, List<String> fieldsCertificates, Integer limit) throws ApiException {
        ApiResponse<CertificatesResponse> localVarResp = profilesCertificatesGetToManyRelatedWithHttpInfo(id, fieldsCertificates, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;CertificatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificatesResponse> profilesCertificatesGetToManyRelatedWithHttpInfo(String id, List<String> fieldsCertificates, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = profilesCertificatesGetToManyRelatedValidateBeforeCall(id, fieldsCertificates, limit, null);
        Type localVarReturnType = new TypeToken<CertificatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesCertificatesGetToManyRelatedAsync(String id, List<String> fieldsCertificates, Integer limit, final ApiCallback<CertificatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesCertificatesGetToManyRelatedValidateBeforeCall(id, fieldsCertificates, limit, _callback);
        Type localVarReturnType = new TypeToken<CertificatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesCreateInstance
     * @param profileCreateRequest Profile representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single Profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesCreateInstanceCall(ProfileCreateRequest profileCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profileCreateRequest;

        // create path and map variables
        String localVarPath = "/v1/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesCreateInstanceValidateBeforeCall(ProfileCreateRequest profileCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileCreateRequest' is set
        if (profileCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'profileCreateRequest' when calling profilesCreateInstance(Async)");
        }

        return profilesCreateInstanceCall(profileCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param profileCreateRequest Profile representation (required)
     * @return ProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single Profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ProfileResponse profilesCreateInstance(ProfileCreateRequest profileCreateRequest) throws ApiException {
        ApiResponse<ProfileResponse> localVarResp = profilesCreateInstanceWithHttpInfo(profileCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param profileCreateRequest Profile representation (required)
     * @return ApiResponse&lt;ProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single Profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileResponse> profilesCreateInstanceWithHttpInfo(ProfileCreateRequest profileCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = profilesCreateInstanceValidateBeforeCall(profileCreateRequest, null);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param profileCreateRequest Profile representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single Profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesCreateInstanceAsync(ProfileCreateRequest profileCreateRequest, final ApiCallback<ProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesCreateInstanceValidateBeforeCall(profileCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesDeleteInstance
     * @param id the id of the requested resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesDeleteInstanceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/profiles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesDeleteInstanceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling profilesDeleteInstance(Async)");
        }

        return profilesDeleteInstanceCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public void profilesDeleteInstance(String id) throws ApiException {
        profilesDeleteInstanceWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> profilesDeleteInstanceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = profilesDeleteInstanceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success (no content) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesDeleteInstanceAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesDeleteInstanceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesDevicesGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesDevicesGetToManyRelatedCall(String id, List<String> fieldsDevices, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/profiles/{id}/devices"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsDevices != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[devices]", fieldsDevices));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesDevicesGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsDevices, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling profilesDevicesGetToManyRelated(Async)");
        }

        return profilesDevicesGetToManyRelatedCall(id, fieldsDevices, limit, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param limit maximum resources per page (optional)
     * @return DevicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public DevicesResponse profilesDevicesGetToManyRelated(String id, List<String> fieldsDevices, Integer limit) throws ApiException {
        ApiResponse<DevicesResponse> localVarResp = profilesDevicesGetToManyRelatedWithHttpInfo(id, fieldsDevices, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param limit maximum resources per page (optional)
     * @return ApiResponse&lt;DevicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DevicesResponse> profilesDevicesGetToManyRelatedWithHttpInfo(String id, List<String> fieldsDevices, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = profilesDevicesGetToManyRelatedValidateBeforeCall(id, fieldsDevices, limit, null);
        Type localVarReturnType = new TypeToken<DevicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param limit maximum resources per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesDevicesGetToManyRelatedAsync(String id, List<String> fieldsDevices, Integer limit, final ApiCallback<DevicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesDevicesGetToManyRelatedValidateBeforeCall(id, fieldsDevices, limit, _callback);
        Type localVarReturnType = new TypeToken<DevicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesGetCollection
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterProfileState filter by attribute &#39;profileState&#39; (optional)
     * @param filterProfileType filter by attribute &#39;profileType&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limitCertificates maximum number of related certificates returned (when they are included) (optional)
     * @param limitDevices maximum number of related devices returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Profiles </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetCollectionCall(List<String> filterName, List<String> filterProfileState, List<String> filterProfileType, List<String> filterId, List<String> sort, List<String> fieldsProfiles, Integer limit, List<String> include, List<String> fieldsCertificates, List<String> fieldsDevices, List<String> fieldsBundleIds, Integer limitCertificates, Integer limitDevices, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[name]", filterName));
        }

        if (filterProfileState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[profileState]", filterProfileState));
        }

        if (filterProfileType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[profileType]", filterProfileType));
        }

        if (filterId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filter[id]", filterId));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sort", sort));
        }

        if (fieldsProfiles != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[profiles]", fieldsProfiles));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsCertificates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[certificates]", fieldsCertificates));
        }

        if (fieldsDevices != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[devices]", fieldsDevices));
        }

        if (fieldsBundleIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[bundleIds]", fieldsBundleIds));
        }

        if (limitCertificates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[certificates]", limitCertificates));
        }

        if (limitDevices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[devices]", limitDevices));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesGetCollectionValidateBeforeCall(List<String> filterName, List<String> filterProfileState, List<String> filterProfileType, List<String> filterId, List<String> sort, List<String> fieldsProfiles, Integer limit, List<String> include, List<String> fieldsCertificates, List<String> fieldsDevices, List<String> fieldsBundleIds, Integer limitCertificates, Integer limitDevices, final ApiCallback _callback) throws ApiException {
        return profilesGetCollectionCall(filterName, filterProfileState, filterProfileType, filterId, sort, fieldsProfiles, limit, include, fieldsCertificates, fieldsDevices, fieldsBundleIds, limitCertificates, limitDevices, _callback);

    }

    /**
     * 
     * 
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterProfileState filter by attribute &#39;profileState&#39; (optional)
     * @param filterProfileType filter by attribute &#39;profileType&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limitCertificates maximum number of related certificates returned (when they are included) (optional)
     * @param limitDevices maximum number of related devices returned (when they are included) (optional)
     * @return ProfilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Profiles </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public ProfilesResponse profilesGetCollection(List<String> filterName, List<String> filterProfileState, List<String> filterProfileType, List<String> filterId, List<String> sort, List<String> fieldsProfiles, Integer limit, List<String> include, List<String> fieldsCertificates, List<String> fieldsDevices, List<String> fieldsBundleIds, Integer limitCertificates, Integer limitDevices) throws ApiException {
        ApiResponse<ProfilesResponse> localVarResp = profilesGetCollectionWithHttpInfo(filterName, filterProfileState, filterProfileType, filterId, sort, fieldsProfiles, limit, include, fieldsCertificates, fieldsDevices, fieldsBundleIds, limitCertificates, limitDevices);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterProfileState filter by attribute &#39;profileState&#39; (optional)
     * @param filterProfileType filter by attribute &#39;profileType&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limitCertificates maximum number of related certificates returned (when they are included) (optional)
     * @param limitDevices maximum number of related devices returned (when they are included) (optional)
     * @return ApiResponse&lt;ProfilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Profiles </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfilesResponse> profilesGetCollectionWithHttpInfo(List<String> filterName, List<String> filterProfileState, List<String> filterProfileType, List<String> filterId, List<String> sort, List<String> fieldsProfiles, Integer limit, List<String> include, List<String> fieldsCertificates, List<String> fieldsDevices, List<String> fieldsBundleIds, Integer limitCertificates, Integer limitDevices) throws ApiException {
        okhttp3.Call localVarCall = profilesGetCollectionValidateBeforeCall(filterName, filterProfileState, filterProfileType, filterId, sort, fieldsProfiles, limit, include, fieldsCertificates, fieldsDevices, fieldsBundleIds, limitCertificates, limitDevices, null);
        Type localVarReturnType = new TypeToken<ProfilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterProfileState filter by attribute &#39;profileState&#39; (optional)
     * @param filterProfileType filter by attribute &#39;profileType&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limitCertificates maximum number of related certificates returned (when they are included) (optional)
     * @param limitDevices maximum number of related devices returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Profiles </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetCollectionAsync(List<String> filterName, List<String> filterProfileState, List<String> filterProfileType, List<String> filterId, List<String> sort, List<String> fieldsProfiles, Integer limit, List<String> include, List<String> fieldsCertificates, List<String> fieldsDevices, List<String> fieldsBundleIds, Integer limitCertificates, Integer limitDevices, final ApiCallback<ProfilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesGetCollectionValidateBeforeCall(filterName, filterProfileState, filterProfileType, filterId, sort, fieldsProfiles, limit, include, fieldsCertificates, fieldsDevices, fieldsBundleIds, limitCertificates, limitDevices, _callback);
        Type localVarReturnType = new TypeToken<ProfilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesGetInstance
     * @param id the id of the requested resource (required)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limitCertificates maximum number of related certificates returned (when they are included) (optional)
     * @param limitDevices maximum number of related devices returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetInstanceCall(String id, List<String> fieldsProfiles, List<String> include, List<String> fieldsCertificates, List<String> fieldsDevices, List<String> fieldsBundleIds, Integer limitCertificates, Integer limitDevices, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/profiles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsProfiles != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[profiles]", fieldsProfiles));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsCertificates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[certificates]", fieldsCertificates));
        }

        if (fieldsDevices != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[devices]", fieldsDevices));
        }

        if (fieldsBundleIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[bundleIds]", fieldsBundleIds));
        }

        if (limitCertificates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[certificates]", limitCertificates));
        }

        if (limitDevices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[devices]", limitDevices));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesGetInstanceValidateBeforeCall(String id, List<String> fieldsProfiles, List<String> include, List<String> fieldsCertificates, List<String> fieldsDevices, List<String> fieldsBundleIds, Integer limitCertificates, Integer limitDevices, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling profilesGetInstance(Async)");
        }

        return profilesGetInstanceCall(id, fieldsProfiles, include, fieldsCertificates, fieldsDevices, fieldsBundleIds, limitCertificates, limitDevices, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limitCertificates maximum number of related certificates returned (when they are included) (optional)
     * @param limitDevices maximum number of related devices returned (when they are included) (optional)
     * @return ProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ProfileResponse profilesGetInstance(String id, List<String> fieldsProfiles, List<String> include, List<String> fieldsCertificates, List<String> fieldsDevices, List<String> fieldsBundleIds, Integer limitCertificates, Integer limitDevices) throws ApiException {
        ApiResponse<ProfileResponse> localVarResp = profilesGetInstanceWithHttpInfo(id, fieldsProfiles, include, fieldsCertificates, fieldsDevices, fieldsBundleIds, limitCertificates, limitDevices);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limitCertificates maximum number of related certificates returned (when they are included) (optional)
     * @param limitDevices maximum number of related devices returned (when they are included) (optional)
     * @return ApiResponse&lt;ProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileResponse> profilesGetInstanceWithHttpInfo(String id, List<String> fieldsProfiles, List<String> include, List<String> fieldsCertificates, List<String> fieldsDevices, List<String> fieldsBundleIds, Integer limitCertificates, Integer limitDevices) throws ApiException {
        okhttp3.Call localVarCall = profilesGetInstanceValidateBeforeCall(id, fieldsProfiles, include, fieldsCertificates, fieldsDevices, fieldsBundleIds, limitCertificates, limitDevices, null);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limitCertificates maximum number of related certificates returned (when they are included) (optional)
     * @param limitDevices maximum number of related devices returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single Profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetInstanceAsync(String id, List<String> fieldsProfiles, List<String> include, List<String> fieldsCertificates, List<String> fieldsDevices, List<String> fieldsBundleIds, Integer limitCertificates, Integer limitDevices, final ApiCallback<ProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesGetInstanceValidateBeforeCall(id, fieldsProfiles, include, fieldsCertificates, fieldsDevices, fieldsBundleIds, limitCertificates, limitDevices, _callback);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
