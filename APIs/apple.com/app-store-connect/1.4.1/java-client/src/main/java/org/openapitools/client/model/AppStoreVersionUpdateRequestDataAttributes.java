/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppStoreVersionUpdateRequestDataAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.423773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppStoreVersionUpdateRequestDataAttributes {
  public static final String SERIALIZED_NAME_COPYRIGHT = "copyright";
  @SerializedName(SERIALIZED_NAME_COPYRIGHT)
  private String copyright;

  public static final String SERIALIZED_NAME_DOWNLOADABLE = "downloadable";
  @SerializedName(SERIALIZED_NAME_DOWNLOADABLE)
  private Boolean downloadable;

  public static final String SERIALIZED_NAME_EARLIEST_RELEASE_DATE = "earliestReleaseDate";
  @SerializedName(SERIALIZED_NAME_EARLIEST_RELEASE_DATE)
  private OffsetDateTime earliestReleaseDate;

  /**
   * Gets or Sets releaseType
   */
  @JsonAdapter(ReleaseTypeEnum.Adapter.class)
  public enum ReleaseTypeEnum {
    MANUAL("MANUAL"),
    
    AFTER_APPROVAL("AFTER_APPROVAL"),
    
    SCHEDULED("SCHEDULED");

    private String value;

    ReleaseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReleaseTypeEnum fromValue(String value) {
      for (ReleaseTypeEnum b : ReleaseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReleaseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReleaseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReleaseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReleaseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReleaseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELEASE_TYPE = "releaseType";
  @SerializedName(SERIALIZED_NAME_RELEASE_TYPE)
  private ReleaseTypeEnum releaseType;

  public static final String SERIALIZED_NAME_USES_IDFA = "usesIdfa";
  @SerializedName(SERIALIZED_NAME_USES_IDFA)
  private Boolean usesIdfa;

  public static final String SERIALIZED_NAME_VERSION_STRING = "versionString";
  @SerializedName(SERIALIZED_NAME_VERSION_STRING)
  private String versionString;

  public AppStoreVersionUpdateRequestDataAttributes() {
  }

  public AppStoreVersionUpdateRequestDataAttributes copyright(String copyright) {
    this.copyright = copyright;
    return this;
  }

  /**
   * Get copyright
   * @return copyright
   */
  @javax.annotation.Nullable
  public String getCopyright() {
    return copyright;
  }

  public void setCopyright(String copyright) {
    this.copyright = copyright;
  }


  public AppStoreVersionUpdateRequestDataAttributes downloadable(Boolean downloadable) {
    this.downloadable = downloadable;
    return this;
  }

  /**
   * Get downloadable
   * @return downloadable
   */
  @javax.annotation.Nullable
  public Boolean getDownloadable() {
    return downloadable;
  }

  public void setDownloadable(Boolean downloadable) {
    this.downloadable = downloadable;
  }


  public AppStoreVersionUpdateRequestDataAttributes earliestReleaseDate(OffsetDateTime earliestReleaseDate) {
    this.earliestReleaseDate = earliestReleaseDate;
    return this;
  }

  /**
   * Get earliestReleaseDate
   * @return earliestReleaseDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEarliestReleaseDate() {
    return earliestReleaseDate;
  }

  public void setEarliestReleaseDate(OffsetDateTime earliestReleaseDate) {
    this.earliestReleaseDate = earliestReleaseDate;
  }


  public AppStoreVersionUpdateRequestDataAttributes releaseType(ReleaseTypeEnum releaseType) {
    this.releaseType = releaseType;
    return this;
  }

  /**
   * Get releaseType
   * @return releaseType
   */
  @javax.annotation.Nullable
  public ReleaseTypeEnum getReleaseType() {
    return releaseType;
  }

  public void setReleaseType(ReleaseTypeEnum releaseType) {
    this.releaseType = releaseType;
  }


  public AppStoreVersionUpdateRequestDataAttributes usesIdfa(Boolean usesIdfa) {
    this.usesIdfa = usesIdfa;
    return this;
  }

  /**
   * Get usesIdfa
   * @return usesIdfa
   */
  @javax.annotation.Nullable
  public Boolean getUsesIdfa() {
    return usesIdfa;
  }

  public void setUsesIdfa(Boolean usesIdfa) {
    this.usesIdfa = usesIdfa;
  }


  public AppStoreVersionUpdateRequestDataAttributes versionString(String versionString) {
    this.versionString = versionString;
    return this;
  }

  /**
   * Get versionString
   * @return versionString
   */
  @javax.annotation.Nullable
  public String getVersionString() {
    return versionString;
  }

  public void setVersionString(String versionString) {
    this.versionString = versionString;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppStoreVersionUpdateRequestDataAttributes appStoreVersionUpdateRequestDataAttributes = (AppStoreVersionUpdateRequestDataAttributes) o;
    return Objects.equals(this.copyright, appStoreVersionUpdateRequestDataAttributes.copyright) &&
        Objects.equals(this.downloadable, appStoreVersionUpdateRequestDataAttributes.downloadable) &&
        Objects.equals(this.earliestReleaseDate, appStoreVersionUpdateRequestDataAttributes.earliestReleaseDate) &&
        Objects.equals(this.releaseType, appStoreVersionUpdateRequestDataAttributes.releaseType) &&
        Objects.equals(this.usesIdfa, appStoreVersionUpdateRequestDataAttributes.usesIdfa) &&
        Objects.equals(this.versionString, appStoreVersionUpdateRequestDataAttributes.versionString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyright, downloadable, earliestReleaseDate, releaseType, usesIdfa, versionString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppStoreVersionUpdateRequestDataAttributes {\n");
    sb.append("    copyright: ").append(toIndentedString(copyright)).append("\n");
    sb.append("    downloadable: ").append(toIndentedString(downloadable)).append("\n");
    sb.append("    earliestReleaseDate: ").append(toIndentedString(earliestReleaseDate)).append("\n");
    sb.append("    releaseType: ").append(toIndentedString(releaseType)).append("\n");
    sb.append("    usesIdfa: ").append(toIndentedString(usesIdfa)).append("\n");
    sb.append("    versionString: ").append(toIndentedString(versionString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("copyright");
    openapiFields.add("downloadable");
    openapiFields.add("earliestReleaseDate");
    openapiFields.add("releaseType");
    openapiFields.add("usesIdfa");
    openapiFields.add("versionString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppStoreVersionUpdateRequestDataAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppStoreVersionUpdateRequestDataAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppStoreVersionUpdateRequestDataAttributes is not found in the empty JSON string", AppStoreVersionUpdateRequestDataAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppStoreVersionUpdateRequestDataAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppStoreVersionUpdateRequestDataAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("copyright") != null && !jsonObj.get("copyright").isJsonNull()) && !jsonObj.get("copyright").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `copyright` to be a primitive type in the JSON string but got `%s`", jsonObj.get("copyright").toString()));
      }
      if ((jsonObj.get("releaseType") != null && !jsonObj.get("releaseType").isJsonNull()) && !jsonObj.get("releaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseType").toString()));
      }
      // validate the optional field `releaseType`
      if (jsonObj.get("releaseType") != null && !jsonObj.get("releaseType").isJsonNull()) {
        ReleaseTypeEnum.validateJsonElement(jsonObj.get("releaseType"));
      }
      if ((jsonObj.get("versionString") != null && !jsonObj.get("versionString").isJsonNull()) && !jsonObj.get("versionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppStoreVersionUpdateRequestDataAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppStoreVersionUpdateRequestDataAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppStoreVersionUpdateRequestDataAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppStoreVersionUpdateRequestDataAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<AppStoreVersionUpdateRequestDataAttributes>() {
           @Override
           public void write(JsonWriter out, AppStoreVersionUpdateRequestDataAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppStoreVersionUpdateRequestDataAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppStoreVersionUpdateRequestDataAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppStoreVersionUpdateRequestDataAttributes
   * @throws IOException if the JSON string is invalid with respect to AppStoreVersionUpdateRequestDataAttributes
   */
  public static AppStoreVersionUpdateRequestDataAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppStoreVersionUpdateRequestDataAttributes.class);
  }

  /**
   * Convert an instance of AppStoreVersionUpdateRequestDataAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

