/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppStoreReviewAttachmentsResponse;
import org.openapitools.client.model.AppStoreReviewDetailCreateRequest;
import org.openapitools.client.model.AppStoreReviewDetailResponse;
import org.openapitools.client.model.AppStoreReviewDetailUpdateRequest;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppStoreReviewDetailsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppStoreReviewDetailsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppStoreReviewDetailsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedCall(String id, List<String> fieldsAppStoreReviewDetails, List<String> fieldsAppStoreReviewAttachments, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/appStoreReviewDetails/{id}/appStoreReviewAttachments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsAppStoreReviewDetails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
        }

        if (fieldsAppStoreReviewAttachments != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreReviewAttachments]", fieldsAppStoreReviewAttachments));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedValidateBeforeCall(String id, List<String> fieldsAppStoreReviewDetails, List<String> fieldsAppStoreReviewAttachments, Integer limit, List<String> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated(Async)");
        }

        return appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedCall(id, fieldsAppStoreReviewDetails, fieldsAppStoreReviewAttachments, limit, include, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return AppStoreReviewAttachmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppStoreReviewAttachmentsResponse appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated(String id, List<String> fieldsAppStoreReviewDetails, List<String> fieldsAppStoreReviewAttachments, Integer limit, List<String> include) throws ApiException {
        ApiResponse<AppStoreReviewAttachmentsResponse> localVarResp = appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedWithHttpInfo(id, fieldsAppStoreReviewDetails, fieldsAppStoreReviewAttachments, limit, include);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return ApiResponse&lt;AppStoreReviewAttachmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppStoreReviewAttachmentsResponse> appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedWithHttpInfo(String id, List<String> fieldsAppStoreReviewDetails, List<String> fieldsAppStoreReviewAttachments, Integer limit, List<String> include) throws ApiException {
        okhttp3.Call localVarCall = appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedValidateBeforeCall(id, fieldsAppStoreReviewDetails, fieldsAppStoreReviewAttachments, limit, include, null);
        Type localVarReturnType = new TypeToken<AppStoreReviewAttachmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of related resources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedAsync(String id, List<String> fieldsAppStoreReviewDetails, List<String> fieldsAppStoreReviewAttachments, Integer limit, List<String> include, final ApiCallback<AppStoreReviewAttachmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedValidateBeforeCall(id, fieldsAppStoreReviewDetails, fieldsAppStoreReviewAttachments, limit, include, _callback);
        Type localVarReturnType = new TypeToken<AppStoreReviewAttachmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appStoreReviewDetailsCreateInstance
     * @param appStoreReviewDetailCreateRequest AppStoreReviewDetail representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreReviewDetailsCreateInstanceCall(AppStoreReviewDetailCreateRequest appStoreReviewDetailCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appStoreReviewDetailCreateRequest;

        // create path and map variables
        String localVarPath = "/v1/appStoreReviewDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appStoreReviewDetailsCreateInstanceValidateBeforeCall(AppStoreReviewDetailCreateRequest appStoreReviewDetailCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appStoreReviewDetailCreateRequest' is set
        if (appStoreReviewDetailCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'appStoreReviewDetailCreateRequest' when calling appStoreReviewDetailsCreateInstance(Async)");
        }

        return appStoreReviewDetailsCreateInstanceCall(appStoreReviewDetailCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param appStoreReviewDetailCreateRequest AppStoreReviewDetail representation (required)
     * @return AppStoreReviewDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public AppStoreReviewDetailResponse appStoreReviewDetailsCreateInstance(AppStoreReviewDetailCreateRequest appStoreReviewDetailCreateRequest) throws ApiException {
        ApiResponse<AppStoreReviewDetailResponse> localVarResp = appStoreReviewDetailsCreateInstanceWithHttpInfo(appStoreReviewDetailCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appStoreReviewDetailCreateRequest AppStoreReviewDetail representation (required)
     * @return ApiResponse&lt;AppStoreReviewDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppStoreReviewDetailResponse> appStoreReviewDetailsCreateInstanceWithHttpInfo(AppStoreReviewDetailCreateRequest appStoreReviewDetailCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = appStoreReviewDetailsCreateInstanceValidateBeforeCall(appStoreReviewDetailCreateRequest, null);
        Type localVarReturnType = new TypeToken<AppStoreReviewDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appStoreReviewDetailCreateRequest AppStoreReviewDetail representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreReviewDetailsCreateInstanceAsync(AppStoreReviewDetailCreateRequest appStoreReviewDetailCreateRequest, final ApiCallback<AppStoreReviewDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appStoreReviewDetailsCreateInstanceValidateBeforeCall(appStoreReviewDetailCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppStoreReviewDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appStoreReviewDetailsGetInstance
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param limitAppStoreReviewAttachments maximum number of related appStoreReviewAttachments returned (when they are included) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreReviewDetailsGetInstanceCall(String id, List<String> fieldsAppStoreReviewDetails, List<String> include, List<String> fieldsAppStoreReviewAttachments, Integer limitAppStoreReviewAttachments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/appStoreReviewDetails/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldsAppStoreReviewDetails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fieldsAppStoreReviewAttachments != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[appStoreReviewAttachments]", fieldsAppStoreReviewAttachments));
        }

        if (limitAppStoreReviewAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit[appStoreReviewAttachments]", limitAppStoreReviewAttachments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appStoreReviewDetailsGetInstanceValidateBeforeCall(String id, List<String> fieldsAppStoreReviewDetails, List<String> include, List<String> fieldsAppStoreReviewAttachments, Integer limitAppStoreReviewAttachments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appStoreReviewDetailsGetInstance(Async)");
        }

        return appStoreReviewDetailsGetInstanceCall(id, fieldsAppStoreReviewDetails, include, fieldsAppStoreReviewAttachments, limitAppStoreReviewAttachments, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param limitAppStoreReviewAttachments maximum number of related appStoreReviewAttachments returned (when they are included) (optional)
     * @return AppStoreReviewDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public AppStoreReviewDetailResponse appStoreReviewDetailsGetInstance(String id, List<String> fieldsAppStoreReviewDetails, List<String> include, List<String> fieldsAppStoreReviewAttachments, Integer limitAppStoreReviewAttachments) throws ApiException {
        ApiResponse<AppStoreReviewDetailResponse> localVarResp = appStoreReviewDetailsGetInstanceWithHttpInfo(id, fieldsAppStoreReviewDetails, include, fieldsAppStoreReviewAttachments, limitAppStoreReviewAttachments);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param limitAppStoreReviewAttachments maximum number of related appStoreReviewAttachments returned (when they are included) (optional)
     * @return ApiResponse&lt;AppStoreReviewDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppStoreReviewDetailResponse> appStoreReviewDetailsGetInstanceWithHttpInfo(String id, List<String> fieldsAppStoreReviewDetails, List<String> include, List<String> fieldsAppStoreReviewAttachments, Integer limitAppStoreReviewAttachments) throws ApiException {
        okhttp3.Call localVarCall = appStoreReviewDetailsGetInstanceValidateBeforeCall(id, fieldsAppStoreReviewDetails, include, fieldsAppStoreReviewAttachments, limitAppStoreReviewAttachments, null);
        Type localVarReturnType = new TypeToken<AppStoreReviewDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param limitAppStoreReviewAttachments maximum number of related appStoreReviewAttachments returned (when they are included) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreReviewDetailsGetInstanceAsync(String id, List<String> fieldsAppStoreReviewDetails, List<String> include, List<String> fieldsAppStoreReviewAttachments, Integer limitAppStoreReviewAttachments, final ApiCallback<AppStoreReviewDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appStoreReviewDetailsGetInstanceValidateBeforeCall(id, fieldsAppStoreReviewDetails, include, fieldsAppStoreReviewAttachments, limitAppStoreReviewAttachments, _callback);
        Type localVarReturnType = new TypeToken<AppStoreReviewDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appStoreReviewDetailsUpdateInstance
     * @param id the id of the requested resource (required)
     * @param appStoreReviewDetailUpdateRequest AppStoreReviewDetail representation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreReviewDetailsUpdateInstanceCall(String id, AppStoreReviewDetailUpdateRequest appStoreReviewDetailUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appStoreReviewDetailUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/appStoreReviewDetails/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "itc-bearer-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appStoreReviewDetailsUpdateInstanceValidateBeforeCall(String id, AppStoreReviewDetailUpdateRequest appStoreReviewDetailUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appStoreReviewDetailsUpdateInstance(Async)");
        }

        // verify the required parameter 'appStoreReviewDetailUpdateRequest' is set
        if (appStoreReviewDetailUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'appStoreReviewDetailUpdateRequest' when calling appStoreReviewDetailsUpdateInstance(Async)");
        }

        return appStoreReviewDetailsUpdateInstanceCall(id, appStoreReviewDetailUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param appStoreReviewDetailUpdateRequest AppStoreReviewDetail representation (required)
     * @return AppStoreReviewDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public AppStoreReviewDetailResponse appStoreReviewDetailsUpdateInstance(String id, AppStoreReviewDetailUpdateRequest appStoreReviewDetailUpdateRequest) throws ApiException {
        ApiResponse<AppStoreReviewDetailResponse> localVarResp = appStoreReviewDetailsUpdateInstanceWithHttpInfo(id, appStoreReviewDetailUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id the id of the requested resource (required)
     * @param appStoreReviewDetailUpdateRequest AppStoreReviewDetail representation (required)
     * @return ApiResponse&lt;AppStoreReviewDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppStoreReviewDetailResponse> appStoreReviewDetailsUpdateInstanceWithHttpInfo(String id, AppStoreReviewDetailUpdateRequest appStoreReviewDetailUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = appStoreReviewDetailsUpdateInstanceValidateBeforeCall(id, appStoreReviewDetailUpdateRequest, null);
        Type localVarReturnType = new TypeToken<AppStoreReviewDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id the id of the requested resource (required)
     * @param appStoreReviewDetailUpdateRequest AppStoreReviewDetail representation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single AppStoreReviewDetail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameter error(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Request entity error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appStoreReviewDetailsUpdateInstanceAsync(String id, AppStoreReviewDetailUpdateRequest appStoreReviewDetailUpdateRequest, final ApiCallback<AppStoreReviewDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appStoreReviewDetailsUpdateInstanceValidateBeforeCall(id, appStoreReviewDetailUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppStoreReviewDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
