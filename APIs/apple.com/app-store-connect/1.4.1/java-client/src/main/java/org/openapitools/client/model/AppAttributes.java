/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.423773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppAttributes {
  public static final String SERIALIZED_NAME_AVAILABLE_IN_NEW_TERRITORIES = "availableInNewTerritories";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_IN_NEW_TERRITORIES)
  private Boolean availableInNewTerritories;

  public static final String SERIALIZED_NAME_BUNDLE_ID = "bundleId";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private String bundleId;

  /**
   * Gets or Sets contentRightsDeclaration
   */
  @JsonAdapter(ContentRightsDeclarationEnum.Adapter.class)
  public enum ContentRightsDeclarationEnum {
    DOES_NOT_USE_THIRD_PARTY_CONTENT("DOES_NOT_USE_THIRD_PARTY_CONTENT"),
    
    USES_THIRD_PARTY_CONTENT("USES_THIRD_PARTY_CONTENT");

    private String value;

    ContentRightsDeclarationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentRightsDeclarationEnum fromValue(String value) {
      for (ContentRightsDeclarationEnum b : ContentRightsDeclarationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentRightsDeclarationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentRightsDeclarationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentRightsDeclarationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentRightsDeclarationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentRightsDeclarationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_RIGHTS_DECLARATION = "contentRightsDeclaration";
  @SerializedName(SERIALIZED_NAME_CONTENT_RIGHTS_DECLARATION)
  private ContentRightsDeclarationEnum contentRightsDeclaration;

  public static final String SERIALIZED_NAME_IS_OR_EVER_WAS_MADE_FOR_KIDS = "isOrEverWasMadeForKids";
  @SerializedName(SERIALIZED_NAME_IS_OR_EVER_WAS_MADE_FOR_KIDS)
  private Boolean isOrEverWasMadeForKids;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIMARY_LOCALE = "primaryLocale";
  @SerializedName(SERIALIZED_NAME_PRIMARY_LOCALE)
  private String primaryLocale;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public AppAttributes() {
  }

  public AppAttributes availableInNewTerritories(Boolean availableInNewTerritories) {
    this.availableInNewTerritories = availableInNewTerritories;
    return this;
  }

  /**
   * Get availableInNewTerritories
   * @return availableInNewTerritories
   */
  @javax.annotation.Nullable
  public Boolean getAvailableInNewTerritories() {
    return availableInNewTerritories;
  }

  public void setAvailableInNewTerritories(Boolean availableInNewTerritories) {
    this.availableInNewTerritories = availableInNewTerritories;
  }


  public AppAttributes bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Get bundleId
   * @return bundleId
   */
  @javax.annotation.Nullable
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }


  public AppAttributes contentRightsDeclaration(ContentRightsDeclarationEnum contentRightsDeclaration) {
    this.contentRightsDeclaration = contentRightsDeclaration;
    return this;
  }

  /**
   * Get contentRightsDeclaration
   * @return contentRightsDeclaration
   */
  @javax.annotation.Nullable
  public ContentRightsDeclarationEnum getContentRightsDeclaration() {
    return contentRightsDeclaration;
  }

  public void setContentRightsDeclaration(ContentRightsDeclarationEnum contentRightsDeclaration) {
    this.contentRightsDeclaration = contentRightsDeclaration;
  }


  public AppAttributes isOrEverWasMadeForKids(Boolean isOrEverWasMadeForKids) {
    this.isOrEverWasMadeForKids = isOrEverWasMadeForKids;
    return this;
  }

  /**
   * Get isOrEverWasMadeForKids
   * @return isOrEverWasMadeForKids
   */
  @javax.annotation.Nullable
  public Boolean getIsOrEverWasMadeForKids() {
    return isOrEverWasMadeForKids;
  }

  public void setIsOrEverWasMadeForKids(Boolean isOrEverWasMadeForKids) {
    this.isOrEverWasMadeForKids = isOrEverWasMadeForKids;
  }


  public AppAttributes name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AppAttributes primaryLocale(String primaryLocale) {
    this.primaryLocale = primaryLocale;
    return this;
  }

  /**
   * Get primaryLocale
   * @return primaryLocale
   */
  @javax.annotation.Nullable
  public String getPrimaryLocale() {
    return primaryLocale;
  }

  public void setPrimaryLocale(String primaryLocale) {
    this.primaryLocale = primaryLocale;
  }


  public AppAttributes sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppAttributes appAttributes = (AppAttributes) o;
    return Objects.equals(this.availableInNewTerritories, appAttributes.availableInNewTerritories) &&
        Objects.equals(this.bundleId, appAttributes.bundleId) &&
        Objects.equals(this.contentRightsDeclaration, appAttributes.contentRightsDeclaration) &&
        Objects.equals(this.isOrEverWasMadeForKids, appAttributes.isOrEverWasMadeForKids) &&
        Objects.equals(this.name, appAttributes.name) &&
        Objects.equals(this.primaryLocale, appAttributes.primaryLocale) &&
        Objects.equals(this.sku, appAttributes.sku);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableInNewTerritories, bundleId, contentRightsDeclaration, isOrEverWasMadeForKids, name, primaryLocale, sku);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppAttributes {\n");
    sb.append("    availableInNewTerritories: ").append(toIndentedString(availableInNewTerritories)).append("\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    contentRightsDeclaration: ").append(toIndentedString(contentRightsDeclaration)).append("\n");
    sb.append("    isOrEverWasMadeForKids: ").append(toIndentedString(isOrEverWasMadeForKids)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    primaryLocale: ").append(toIndentedString(primaryLocale)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableInNewTerritories");
    openapiFields.add("bundleId");
    openapiFields.add("contentRightsDeclaration");
    openapiFields.add("isOrEverWasMadeForKids");
    openapiFields.add("name");
    openapiFields.add("primaryLocale");
    openapiFields.add("sku");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppAttributes is not found in the empty JSON string", AppAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bundleId") != null && !jsonObj.get("bundleId").isJsonNull()) && !jsonObj.get("bundleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundleId").toString()));
      }
      if ((jsonObj.get("contentRightsDeclaration") != null && !jsonObj.get("contentRightsDeclaration").isJsonNull()) && !jsonObj.get("contentRightsDeclaration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentRightsDeclaration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentRightsDeclaration").toString()));
      }
      // validate the optional field `contentRightsDeclaration`
      if (jsonObj.get("contentRightsDeclaration") != null && !jsonObj.get("contentRightsDeclaration").isJsonNull()) {
        ContentRightsDeclarationEnum.validateJsonElement(jsonObj.get("contentRightsDeclaration"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("primaryLocale") != null && !jsonObj.get("primaryLocale").isJsonNull()) && !jsonObj.get("primaryLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryLocale").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<AppAttributes>() {
           @Override
           public void write(JsonWriter out, AppAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppAttributes
   * @throws IOException if the JSON string is invalid with respect to AppAttributes
   */
  public static AppAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppAttributes.class);
  }

  /**
   * Convert an instance of AppAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

