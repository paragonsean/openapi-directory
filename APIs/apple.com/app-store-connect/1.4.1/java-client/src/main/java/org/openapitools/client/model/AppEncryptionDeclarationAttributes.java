/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AppEncryptionDeclarationState;
import org.openapitools.client.model.Platform;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppEncryptionDeclarationAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.423773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppEncryptionDeclarationAttributes {
  public static final String SERIALIZED_NAME_APP_ENCRYPTION_DECLARATION_STATE = "appEncryptionDeclarationState";
  @SerializedName(SERIALIZED_NAME_APP_ENCRYPTION_DECLARATION_STATE)
  private AppEncryptionDeclarationState appEncryptionDeclarationState;

  public static final String SERIALIZED_NAME_AVAILABLE_ON_FRENCH_STORE = "availableOnFrenchStore";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ON_FRENCH_STORE)
  private Boolean availableOnFrenchStore;

  public static final String SERIALIZED_NAME_CODE_VALUE = "codeValue";
  @SerializedName(SERIALIZED_NAME_CODE_VALUE)
  private String codeValue;

  public static final String SERIALIZED_NAME_CONTAINS_PROPRIETARY_CRYPTOGRAPHY = "containsProprietaryCryptography";
  @SerializedName(SERIALIZED_NAME_CONTAINS_PROPRIETARY_CRYPTOGRAPHY)
  private Boolean containsProprietaryCryptography;

  public static final String SERIALIZED_NAME_CONTAINS_THIRD_PARTY_CRYPTOGRAPHY = "containsThirdPartyCryptography";
  @SerializedName(SERIALIZED_NAME_CONTAINS_THIRD_PARTY_CRYPTOGRAPHY)
  private Boolean containsThirdPartyCryptography;

  public static final String SERIALIZED_NAME_DOCUMENT_NAME = "documentName";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NAME)
  private String documentName;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_DOCUMENT_URL = "documentUrl";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_URL)
  private String documentUrl;

  public static final String SERIALIZED_NAME_EXEMPT = "exempt";
  @SerializedName(SERIALIZED_NAME_EXEMPT)
  private Boolean exempt;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private Platform platform;

  public static final String SERIALIZED_NAME_UPLOADED_DATE = "uploadedDate";
  @SerializedName(SERIALIZED_NAME_UPLOADED_DATE)
  private OffsetDateTime uploadedDate;

  public static final String SERIALIZED_NAME_USES_ENCRYPTION = "usesEncryption";
  @SerializedName(SERIALIZED_NAME_USES_ENCRYPTION)
  private Boolean usesEncryption;

  public AppEncryptionDeclarationAttributes() {
  }

  public AppEncryptionDeclarationAttributes appEncryptionDeclarationState(AppEncryptionDeclarationState appEncryptionDeclarationState) {
    this.appEncryptionDeclarationState = appEncryptionDeclarationState;
    return this;
  }

  /**
   * Get appEncryptionDeclarationState
   * @return appEncryptionDeclarationState
   */
  @javax.annotation.Nullable
  public AppEncryptionDeclarationState getAppEncryptionDeclarationState() {
    return appEncryptionDeclarationState;
  }

  public void setAppEncryptionDeclarationState(AppEncryptionDeclarationState appEncryptionDeclarationState) {
    this.appEncryptionDeclarationState = appEncryptionDeclarationState;
  }


  public AppEncryptionDeclarationAttributes availableOnFrenchStore(Boolean availableOnFrenchStore) {
    this.availableOnFrenchStore = availableOnFrenchStore;
    return this;
  }

  /**
   * Get availableOnFrenchStore
   * @return availableOnFrenchStore
   */
  @javax.annotation.Nullable
  public Boolean getAvailableOnFrenchStore() {
    return availableOnFrenchStore;
  }

  public void setAvailableOnFrenchStore(Boolean availableOnFrenchStore) {
    this.availableOnFrenchStore = availableOnFrenchStore;
  }


  public AppEncryptionDeclarationAttributes codeValue(String codeValue) {
    this.codeValue = codeValue;
    return this;
  }

  /**
   * Get codeValue
   * @return codeValue
   */
  @javax.annotation.Nullable
  public String getCodeValue() {
    return codeValue;
  }

  public void setCodeValue(String codeValue) {
    this.codeValue = codeValue;
  }


  public AppEncryptionDeclarationAttributes containsProprietaryCryptography(Boolean containsProprietaryCryptography) {
    this.containsProprietaryCryptography = containsProprietaryCryptography;
    return this;
  }

  /**
   * Get containsProprietaryCryptography
   * @return containsProprietaryCryptography
   */
  @javax.annotation.Nullable
  public Boolean getContainsProprietaryCryptography() {
    return containsProprietaryCryptography;
  }

  public void setContainsProprietaryCryptography(Boolean containsProprietaryCryptography) {
    this.containsProprietaryCryptography = containsProprietaryCryptography;
  }


  public AppEncryptionDeclarationAttributes containsThirdPartyCryptography(Boolean containsThirdPartyCryptography) {
    this.containsThirdPartyCryptography = containsThirdPartyCryptography;
    return this;
  }

  /**
   * Get containsThirdPartyCryptography
   * @return containsThirdPartyCryptography
   */
  @javax.annotation.Nullable
  public Boolean getContainsThirdPartyCryptography() {
    return containsThirdPartyCryptography;
  }

  public void setContainsThirdPartyCryptography(Boolean containsThirdPartyCryptography) {
    this.containsThirdPartyCryptography = containsThirdPartyCryptography;
  }


  public AppEncryptionDeclarationAttributes documentName(String documentName) {
    this.documentName = documentName;
    return this;
  }

  /**
   * Get documentName
   * @return documentName
   */
  @javax.annotation.Nullable
  public String getDocumentName() {
    return documentName;
  }

  public void setDocumentName(String documentName) {
    this.documentName = documentName;
  }


  public AppEncryptionDeclarationAttributes documentType(String documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * Get documentType
   * @return documentType
   */
  @javax.annotation.Nullable
  public String getDocumentType() {
    return documentType;
  }

  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public AppEncryptionDeclarationAttributes documentUrl(String documentUrl) {
    this.documentUrl = documentUrl;
    return this;
  }

  /**
   * Get documentUrl
   * @return documentUrl
   */
  @javax.annotation.Nullable
  public String getDocumentUrl() {
    return documentUrl;
  }

  public void setDocumentUrl(String documentUrl) {
    this.documentUrl = documentUrl;
  }


  public AppEncryptionDeclarationAttributes exempt(Boolean exempt) {
    this.exempt = exempt;
    return this;
  }

  /**
   * Get exempt
   * @return exempt
   */
  @javax.annotation.Nullable
  public Boolean getExempt() {
    return exempt;
  }

  public void setExempt(Boolean exempt) {
    this.exempt = exempt;
  }


  public AppEncryptionDeclarationAttributes platform(Platform platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public Platform getPlatform() {
    return platform;
  }

  public void setPlatform(Platform platform) {
    this.platform = platform;
  }


  public AppEncryptionDeclarationAttributes uploadedDate(OffsetDateTime uploadedDate) {
    this.uploadedDate = uploadedDate;
    return this;
  }

  /**
   * Get uploadedDate
   * @return uploadedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUploadedDate() {
    return uploadedDate;
  }

  public void setUploadedDate(OffsetDateTime uploadedDate) {
    this.uploadedDate = uploadedDate;
  }


  public AppEncryptionDeclarationAttributes usesEncryption(Boolean usesEncryption) {
    this.usesEncryption = usesEncryption;
    return this;
  }

  /**
   * Get usesEncryption
   * @return usesEncryption
   */
  @javax.annotation.Nullable
  public Boolean getUsesEncryption() {
    return usesEncryption;
  }

  public void setUsesEncryption(Boolean usesEncryption) {
    this.usesEncryption = usesEncryption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppEncryptionDeclarationAttributes appEncryptionDeclarationAttributes = (AppEncryptionDeclarationAttributes) o;
    return Objects.equals(this.appEncryptionDeclarationState, appEncryptionDeclarationAttributes.appEncryptionDeclarationState) &&
        Objects.equals(this.availableOnFrenchStore, appEncryptionDeclarationAttributes.availableOnFrenchStore) &&
        Objects.equals(this.codeValue, appEncryptionDeclarationAttributes.codeValue) &&
        Objects.equals(this.containsProprietaryCryptography, appEncryptionDeclarationAttributes.containsProprietaryCryptography) &&
        Objects.equals(this.containsThirdPartyCryptography, appEncryptionDeclarationAttributes.containsThirdPartyCryptography) &&
        Objects.equals(this.documentName, appEncryptionDeclarationAttributes.documentName) &&
        Objects.equals(this.documentType, appEncryptionDeclarationAttributes.documentType) &&
        Objects.equals(this.documentUrl, appEncryptionDeclarationAttributes.documentUrl) &&
        Objects.equals(this.exempt, appEncryptionDeclarationAttributes.exempt) &&
        Objects.equals(this.platform, appEncryptionDeclarationAttributes.platform) &&
        Objects.equals(this.uploadedDate, appEncryptionDeclarationAttributes.uploadedDate) &&
        Objects.equals(this.usesEncryption, appEncryptionDeclarationAttributes.usesEncryption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appEncryptionDeclarationState, availableOnFrenchStore, codeValue, containsProprietaryCryptography, containsThirdPartyCryptography, documentName, documentType, documentUrl, exempt, platform, uploadedDate, usesEncryption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppEncryptionDeclarationAttributes {\n");
    sb.append("    appEncryptionDeclarationState: ").append(toIndentedString(appEncryptionDeclarationState)).append("\n");
    sb.append("    availableOnFrenchStore: ").append(toIndentedString(availableOnFrenchStore)).append("\n");
    sb.append("    codeValue: ").append(toIndentedString(codeValue)).append("\n");
    sb.append("    containsProprietaryCryptography: ").append(toIndentedString(containsProprietaryCryptography)).append("\n");
    sb.append("    containsThirdPartyCryptography: ").append(toIndentedString(containsThirdPartyCryptography)).append("\n");
    sb.append("    documentName: ").append(toIndentedString(documentName)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    documentUrl: ").append(toIndentedString(documentUrl)).append("\n");
    sb.append("    exempt: ").append(toIndentedString(exempt)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    uploadedDate: ").append(toIndentedString(uploadedDate)).append("\n");
    sb.append("    usesEncryption: ").append(toIndentedString(usesEncryption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appEncryptionDeclarationState");
    openapiFields.add("availableOnFrenchStore");
    openapiFields.add("codeValue");
    openapiFields.add("containsProprietaryCryptography");
    openapiFields.add("containsThirdPartyCryptography");
    openapiFields.add("documentName");
    openapiFields.add("documentType");
    openapiFields.add("documentUrl");
    openapiFields.add("exempt");
    openapiFields.add("platform");
    openapiFields.add("uploadedDate");
    openapiFields.add("usesEncryption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppEncryptionDeclarationAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppEncryptionDeclarationAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppEncryptionDeclarationAttributes is not found in the empty JSON string", AppEncryptionDeclarationAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppEncryptionDeclarationAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppEncryptionDeclarationAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appEncryptionDeclarationState`
      if (jsonObj.get("appEncryptionDeclarationState") != null && !jsonObj.get("appEncryptionDeclarationState").isJsonNull()) {
        AppEncryptionDeclarationState.validateJsonElement(jsonObj.get("appEncryptionDeclarationState"));
      }
      if ((jsonObj.get("codeValue") != null && !jsonObj.get("codeValue").isJsonNull()) && !jsonObj.get("codeValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeValue").toString()));
      }
      if ((jsonObj.get("documentName") != null && !jsonObj.get("documentName").isJsonNull()) && !jsonObj.get("documentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentName").toString()));
      }
      if ((jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) && !jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      if ((jsonObj.get("documentUrl") != null && !jsonObj.get("documentUrl").isJsonNull()) && !jsonObj.get("documentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentUrl").toString()));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        Platform.validateJsonElement(jsonObj.get("platform"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppEncryptionDeclarationAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppEncryptionDeclarationAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppEncryptionDeclarationAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppEncryptionDeclarationAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<AppEncryptionDeclarationAttributes>() {
           @Override
           public void write(JsonWriter out, AppEncryptionDeclarationAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppEncryptionDeclarationAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppEncryptionDeclarationAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppEncryptionDeclarationAttributes
   * @throws IOException if the JSON string is invalid with respect to AppEncryptionDeclarationAttributes
   */
  public static AppEncryptionDeclarationAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppEncryptionDeclarationAttributes.class);
  }

  /**
   * Convert an instance of AppEncryptionDeclarationAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

