/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppInfo;
import org.openapitools.client.model.AppPreOrder;
import org.openapitools.client.model.AppPrice;
import org.openapitools.client.model.AppStoreVersion;
import org.openapitools.client.model.BetaAppLocalization;
import org.openapitools.client.model.BetaAppReviewDetail;
import org.openapitools.client.model.BetaGroup;
import org.openapitools.client.model.BetaLicenseAgreement;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.EndUserLicenseAgreement;
import org.openapitools.client.model.GameCenterEnabledVersion;
import org.openapitools.client.model.GameCenterEnabledVersionRelationships;
import org.openapitools.client.model.InAppPurchase;
import org.openapitools.client.model.PerfPowerMetric;
import org.openapitools.client.model.PerfPowerMetricAttributes;
import org.openapitools.client.model.PrereleaseVersion;
import org.openapitools.client.model.ResourceLinks;
import org.openapitools.client.model.Territory;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.423773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppResponseIncludedInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AppResponseIncludedInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AppResponseIncludedInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AppResponseIncludedInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<BetaGroup> adapterBetaGroup = gson.getDelegateAdapter(this, TypeToken.get(BetaGroup.class));
            final TypeAdapter<AppStoreVersion> adapterAppStoreVersion = gson.getDelegateAdapter(this, TypeToken.get(AppStoreVersion.class));
            final TypeAdapter<PrereleaseVersion> adapterPrereleaseVersion = gson.getDelegateAdapter(this, TypeToken.get(PrereleaseVersion.class));
            final TypeAdapter<BetaAppLocalization> adapterBetaAppLocalization = gson.getDelegateAdapter(this, TypeToken.get(BetaAppLocalization.class));
            final TypeAdapter<Build> adapterBuild = gson.getDelegateAdapter(this, TypeToken.get(Build.class));
            final TypeAdapter<BetaLicenseAgreement> adapterBetaLicenseAgreement = gson.getDelegateAdapter(this, TypeToken.get(BetaLicenseAgreement.class));
            final TypeAdapter<BetaAppReviewDetail> adapterBetaAppReviewDetail = gson.getDelegateAdapter(this, TypeToken.get(BetaAppReviewDetail.class));
            final TypeAdapter<AppInfo> adapterAppInfo = gson.getDelegateAdapter(this, TypeToken.get(AppInfo.class));
            final TypeAdapter<EndUserLicenseAgreement> adapterEndUserLicenseAgreement = gson.getDelegateAdapter(this, TypeToken.get(EndUserLicenseAgreement.class));
            final TypeAdapter<AppPreOrder> adapterAppPreOrder = gson.getDelegateAdapter(this, TypeToken.get(AppPreOrder.class));
            final TypeAdapter<AppPrice> adapterAppPrice = gson.getDelegateAdapter(this, TypeToken.get(AppPrice.class));
            final TypeAdapter<Territory> adapterTerritory = gson.getDelegateAdapter(this, TypeToken.get(Territory.class));
            final TypeAdapter<InAppPurchase> adapterInAppPurchase = gson.getDelegateAdapter(this, TypeToken.get(InAppPurchase.class));
            final TypeAdapter<GameCenterEnabledVersion> adapterGameCenterEnabledVersion = gson.getDelegateAdapter(this, TypeToken.get(GameCenterEnabledVersion.class));
            final TypeAdapter<PerfPowerMetric> adapterPerfPowerMetric = gson.getDelegateAdapter(this, TypeToken.get(PerfPowerMetric.class));

            return (TypeAdapter<T>) new TypeAdapter<AppResponseIncludedInner>() {
                @Override
                public void write(JsonWriter out, AppResponseIncludedInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `BetaGroup`
                    if (value.getActualInstance() instanceof BetaGroup) {
                        JsonElement element = adapterBetaGroup.toJsonTree((BetaGroup)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AppStoreVersion`
                    if (value.getActualInstance() instanceof AppStoreVersion) {
                        JsonElement element = adapterAppStoreVersion.toJsonTree((AppStoreVersion)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PrereleaseVersion`
                    if (value.getActualInstance() instanceof PrereleaseVersion) {
                        JsonElement element = adapterPrereleaseVersion.toJsonTree((PrereleaseVersion)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BetaAppLocalization`
                    if (value.getActualInstance() instanceof BetaAppLocalization) {
                        JsonElement element = adapterBetaAppLocalization.toJsonTree((BetaAppLocalization)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Build`
                    if (value.getActualInstance() instanceof Build) {
                        JsonElement element = adapterBuild.toJsonTree((Build)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BetaLicenseAgreement`
                    if (value.getActualInstance() instanceof BetaLicenseAgreement) {
                        JsonElement element = adapterBetaLicenseAgreement.toJsonTree((BetaLicenseAgreement)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BetaAppReviewDetail`
                    if (value.getActualInstance() instanceof BetaAppReviewDetail) {
                        JsonElement element = adapterBetaAppReviewDetail.toJsonTree((BetaAppReviewDetail)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AppInfo`
                    if (value.getActualInstance() instanceof AppInfo) {
                        JsonElement element = adapterAppInfo.toJsonTree((AppInfo)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EndUserLicenseAgreement`
                    if (value.getActualInstance() instanceof EndUserLicenseAgreement) {
                        JsonElement element = adapterEndUserLicenseAgreement.toJsonTree((EndUserLicenseAgreement)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AppPreOrder`
                    if (value.getActualInstance() instanceof AppPreOrder) {
                        JsonElement element = adapterAppPreOrder.toJsonTree((AppPreOrder)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AppPrice`
                    if (value.getActualInstance() instanceof AppPrice) {
                        JsonElement element = adapterAppPrice.toJsonTree((AppPrice)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Territory`
                    if (value.getActualInstance() instanceof Territory) {
                        JsonElement element = adapterTerritory.toJsonTree((Territory)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InAppPurchase`
                    if (value.getActualInstance() instanceof InAppPurchase) {
                        JsonElement element = adapterInAppPurchase.toJsonTree((InAppPurchase)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GameCenterEnabledVersion`
                    if (value.getActualInstance() instanceof GameCenterEnabledVersion) {
                        JsonElement element = adapterGameCenterEnabledVersion.toJsonTree((GameCenterEnabledVersion)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PerfPowerMetric`
                    if (value.getActualInstance() instanceof PerfPowerMetric) {
                        JsonElement element = adapterPerfPowerMetric.toJsonTree((PerfPowerMetric)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory");
                }

                @Override
                public AppResponseIncludedInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize BetaGroup
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BetaGroup.validateJsonElement(jsonElement);
                        actualAdapter = adapterBetaGroup;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BetaGroup'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BetaGroup failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BetaGroup'", e);
                    }
                    // deserialize AppStoreVersion
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AppStoreVersion.validateJsonElement(jsonElement);
                        actualAdapter = adapterAppStoreVersion;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AppStoreVersion'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AppStoreVersion failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AppStoreVersion'", e);
                    }
                    // deserialize PrereleaseVersion
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PrereleaseVersion.validateJsonElement(jsonElement);
                        actualAdapter = adapterPrereleaseVersion;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PrereleaseVersion'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PrereleaseVersion failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PrereleaseVersion'", e);
                    }
                    // deserialize BetaAppLocalization
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BetaAppLocalization.validateJsonElement(jsonElement);
                        actualAdapter = adapterBetaAppLocalization;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BetaAppLocalization'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BetaAppLocalization failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BetaAppLocalization'", e);
                    }
                    // deserialize Build
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Build.validateJsonElement(jsonElement);
                        actualAdapter = adapterBuild;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Build'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Build failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Build'", e);
                    }
                    // deserialize BetaLicenseAgreement
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BetaLicenseAgreement.validateJsonElement(jsonElement);
                        actualAdapter = adapterBetaLicenseAgreement;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BetaLicenseAgreement'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BetaLicenseAgreement failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BetaLicenseAgreement'", e);
                    }
                    // deserialize BetaAppReviewDetail
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BetaAppReviewDetail.validateJsonElement(jsonElement);
                        actualAdapter = adapterBetaAppReviewDetail;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BetaAppReviewDetail'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BetaAppReviewDetail failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BetaAppReviewDetail'", e);
                    }
                    // deserialize AppInfo
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AppInfo.validateJsonElement(jsonElement);
                        actualAdapter = adapterAppInfo;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AppInfo'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AppInfo failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AppInfo'", e);
                    }
                    // deserialize EndUserLicenseAgreement
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EndUserLicenseAgreement.validateJsonElement(jsonElement);
                        actualAdapter = adapterEndUserLicenseAgreement;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EndUserLicenseAgreement'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EndUserLicenseAgreement failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EndUserLicenseAgreement'", e);
                    }
                    // deserialize AppPreOrder
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AppPreOrder.validateJsonElement(jsonElement);
                        actualAdapter = adapterAppPreOrder;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AppPreOrder'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AppPreOrder failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AppPreOrder'", e);
                    }
                    // deserialize AppPrice
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AppPrice.validateJsonElement(jsonElement);
                        actualAdapter = adapterAppPrice;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AppPrice'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AppPrice failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AppPrice'", e);
                    }
                    // deserialize Territory
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Territory.validateJsonElement(jsonElement);
                        actualAdapter = adapterTerritory;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Territory'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Territory failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Territory'", e);
                    }
                    // deserialize InAppPurchase
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InAppPurchase.validateJsonElement(jsonElement);
                        actualAdapter = adapterInAppPurchase;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InAppPurchase'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InAppPurchase failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InAppPurchase'", e);
                    }
                    // deserialize GameCenterEnabledVersion
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GameCenterEnabledVersion.validateJsonElement(jsonElement);
                        actualAdapter = adapterGameCenterEnabledVersion;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GameCenterEnabledVersion'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GameCenterEnabledVersion failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GameCenterEnabledVersion'", e);
                    }
                    // deserialize PerfPowerMetric
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PerfPowerMetric.validateJsonElement(jsonElement);
                        actualAdapter = adapterPerfPowerMetric;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PerfPowerMetric'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PerfPowerMetric failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PerfPowerMetric'", e);
                    }

                    if (match == 1) {
                        AppResponseIncludedInner ret = new AppResponseIncludedInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for AppResponseIncludedInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AppResponseIncludedInner() {
        super("oneOf", Boolean.FALSE);
    }

    public AppResponseIncludedInner(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("BetaGroup", BetaGroup.class);
        schemas.put("AppStoreVersion", AppStoreVersion.class);
        schemas.put("PrereleaseVersion", PrereleaseVersion.class);
        schemas.put("BetaAppLocalization", BetaAppLocalization.class);
        schemas.put("Build", Build.class);
        schemas.put("BetaLicenseAgreement", BetaLicenseAgreement.class);
        schemas.put("BetaAppReviewDetail", BetaAppReviewDetail.class);
        schemas.put("AppInfo", AppInfo.class);
        schemas.put("EndUserLicenseAgreement", EndUserLicenseAgreement.class);
        schemas.put("AppPreOrder", AppPreOrder.class);
        schemas.put("AppPrice", AppPrice.class);
        schemas.put("Territory", Territory.class);
        schemas.put("InAppPurchase", InAppPurchase.class);
        schemas.put("GameCenterEnabledVersion", GameCenterEnabledVersion.class);
        schemas.put("PerfPowerMetric", PerfPowerMetric.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AppResponseIncludedInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof BetaGroup) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AppStoreVersion) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PrereleaseVersion) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BetaAppLocalization) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Build) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BetaLicenseAgreement) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BetaAppReviewDetail) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AppInfo) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndUserLicenseAgreement) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AppPreOrder) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AppPrice) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Territory) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InAppPurchase) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GameCenterEnabledVersion) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PerfPowerMetric) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory");
    }

    /**
     * Get the actual instance, which can be the following:
     * AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory
     *
     * @return The actual instance (AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `BetaGroup`. If the actual instance is not `BetaGroup`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaGroup`
     * @throws ClassCastException if the instance is not `BetaGroup`
     */
    public BetaGroup getBetaGroup() throws ClassCastException {
        return (BetaGroup)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AppStoreVersion`. If the actual instance is not `AppStoreVersion`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppStoreVersion`
     * @throws ClassCastException if the instance is not `AppStoreVersion`
     */
    public AppStoreVersion getAppStoreVersion() throws ClassCastException {
        return (AppStoreVersion)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PrereleaseVersion`. If the actual instance is not `PrereleaseVersion`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PrereleaseVersion`
     * @throws ClassCastException if the instance is not `PrereleaseVersion`
     */
    public PrereleaseVersion getPrereleaseVersion() throws ClassCastException {
        return (PrereleaseVersion)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BetaAppLocalization`. If the actual instance is not `BetaAppLocalization`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaAppLocalization`
     * @throws ClassCastException if the instance is not `BetaAppLocalization`
     */
    public BetaAppLocalization getBetaAppLocalization() throws ClassCastException {
        return (BetaAppLocalization)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Build`. If the actual instance is not `Build`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Build`
     * @throws ClassCastException if the instance is not `Build`
     */
    public Build getBuild() throws ClassCastException {
        return (Build)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BetaLicenseAgreement`. If the actual instance is not `BetaLicenseAgreement`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaLicenseAgreement`
     * @throws ClassCastException if the instance is not `BetaLicenseAgreement`
     */
    public BetaLicenseAgreement getBetaLicenseAgreement() throws ClassCastException {
        return (BetaLicenseAgreement)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BetaAppReviewDetail`. If the actual instance is not `BetaAppReviewDetail`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BetaAppReviewDetail`
     * @throws ClassCastException if the instance is not `BetaAppReviewDetail`
     */
    public BetaAppReviewDetail getBetaAppReviewDetail() throws ClassCastException {
        return (BetaAppReviewDetail)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AppInfo`. If the actual instance is not `AppInfo`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppInfo`
     * @throws ClassCastException if the instance is not `AppInfo`
     */
    public AppInfo getAppInfo() throws ClassCastException {
        return (AppInfo)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EndUserLicenseAgreement`. If the actual instance is not `EndUserLicenseAgreement`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndUserLicenseAgreement`
     * @throws ClassCastException if the instance is not `EndUserLicenseAgreement`
     */
    public EndUserLicenseAgreement getEndUserLicenseAgreement() throws ClassCastException {
        return (EndUserLicenseAgreement)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AppPreOrder`. If the actual instance is not `AppPreOrder`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppPreOrder`
     * @throws ClassCastException if the instance is not `AppPreOrder`
     */
    public AppPreOrder getAppPreOrder() throws ClassCastException {
        return (AppPreOrder)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AppPrice`. If the actual instance is not `AppPrice`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppPrice`
     * @throws ClassCastException if the instance is not `AppPrice`
     */
    public AppPrice getAppPrice() throws ClassCastException {
        return (AppPrice)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Territory`. If the actual instance is not `Territory`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Territory`
     * @throws ClassCastException if the instance is not `Territory`
     */
    public Territory getTerritory() throws ClassCastException {
        return (Territory)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InAppPurchase`. If the actual instance is not `InAppPurchase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InAppPurchase`
     * @throws ClassCastException if the instance is not `InAppPurchase`
     */
    public InAppPurchase getInAppPurchase() throws ClassCastException {
        return (InAppPurchase)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GameCenterEnabledVersion`. If the actual instance is not `GameCenterEnabledVersion`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GameCenterEnabledVersion`
     * @throws ClassCastException if the instance is not `GameCenterEnabledVersion`
     */
    public GameCenterEnabledVersion getGameCenterEnabledVersion() throws ClassCastException {
        return (GameCenterEnabledVersion)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PerfPowerMetric`. If the actual instance is not `PerfPowerMetric`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PerfPowerMetric`
     * @throws ClassCastException if the instance is not `PerfPowerMetric`
     */
    public PerfPowerMetric getPerfPowerMetric() throws ClassCastException {
        return (PerfPowerMetric)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AppResponseIncludedInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with BetaGroup
        try {
            BetaGroup.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BetaGroup failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AppStoreVersion
        try {
            AppStoreVersion.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AppStoreVersion failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PrereleaseVersion
        try {
            PrereleaseVersion.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PrereleaseVersion failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BetaAppLocalization
        try {
            BetaAppLocalization.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BetaAppLocalization failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Build
        try {
            Build.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Build failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BetaLicenseAgreement
        try {
            BetaLicenseAgreement.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BetaLicenseAgreement failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BetaAppReviewDetail
        try {
            BetaAppReviewDetail.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BetaAppReviewDetail failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AppInfo
        try {
            AppInfo.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AppInfo failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EndUserLicenseAgreement
        try {
            EndUserLicenseAgreement.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EndUserLicenseAgreement failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AppPreOrder
        try {
            AppPreOrder.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AppPreOrder failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AppPrice
        try {
            AppPrice.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AppPrice failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Territory
        try {
            Territory.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Territory failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InAppPurchase
        try {
            InAppPurchase.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InAppPurchase failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GameCenterEnabledVersion
        try {
            GameCenterEnabledVersion.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GameCenterEnabledVersion failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PerfPowerMetric
        try {
            PerfPowerMetric.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PerfPowerMetric failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for AppResponseIncludedInner with oneOf schemas: AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of AppResponseIncludedInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AppResponseIncludedInner
     * @throws IOException if the JSON string is invalid with respect to AppResponseIncludedInner
     */
    public static AppResponseIncludedInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AppResponseIncludedInner.class);
    }

    /**
     * Convert an instance of AppResponseIncludedInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

