/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InAppPurchaseAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.423773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InAppPurchaseAttributes {
  /**
   * Gets or Sets inAppPurchaseType
   */
  @JsonAdapter(InAppPurchaseTypeEnum.Adapter.class)
  public enum InAppPurchaseTypeEnum {
    AUTOMATICALLY_RENEWABLE_SUBSCRIPTION("AUTOMATICALLY_RENEWABLE_SUBSCRIPTION"),
    
    NON_CONSUMABLE("NON_CONSUMABLE"),
    
    CONSUMABLE("CONSUMABLE"),
    
    NON_RENEWING_SUBSCRIPTION("NON_RENEWING_SUBSCRIPTION"),
    
    FREE_SUBSCRIPTION("FREE_SUBSCRIPTION");

    private String value;

    InAppPurchaseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InAppPurchaseTypeEnum fromValue(String value) {
      for (InAppPurchaseTypeEnum b : InAppPurchaseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InAppPurchaseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InAppPurchaseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InAppPurchaseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InAppPurchaseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InAppPurchaseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IN_APP_PURCHASE_TYPE = "inAppPurchaseType";
  @SerializedName(SERIALIZED_NAME_IN_APP_PURCHASE_TYPE)
  private InAppPurchaseTypeEnum inAppPurchaseType;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_REFERENCE_NAME = "referenceName";
  @SerializedName(SERIALIZED_NAME_REFERENCE_NAME)
  private String referenceName;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    CREATED("CREATED"),
    
    DEVELOPER_SIGNED_OFF("DEVELOPER_SIGNED_OFF"),
    
    DEVELOPER_ACTION_NEEDED("DEVELOPER_ACTION_NEEDED"),
    
    DELETION_IN_PROGRESS("DELETION_IN_PROGRESS"),
    
    APPROVED("APPROVED"),
    
    DELETED("DELETED"),
    
    REMOVED_FROM_SALE("REMOVED_FROM_SALE"),
    
    DEVELOPER_REMOVED_FROM_SALE("DEVELOPER_REMOVED_FROM_SALE"),
    
    WAITING_FOR_UPLOAD("WAITING_FOR_UPLOAD"),
    
    PROCESSING_CONTENT("PROCESSING_CONTENT"),
    
    REPLACED("REPLACED"),
    
    REJECTED("REJECTED"),
    
    WAITING_FOR_SCREENSHOT("WAITING_FOR_SCREENSHOT"),
    
    PREPARE_FOR_SUBMISSION("PREPARE_FOR_SUBMISSION"),
    
    MISSING_METADATA("MISSING_METADATA"),
    
    READY_TO_SUBMIT("READY_TO_SUBMIT"),
    
    WAITING_FOR_REVIEW("WAITING_FOR_REVIEW"),
    
    IN_REVIEW("IN_REVIEW"),
    
    PENDING_DEVELOPER_RELEASE("PENDING_DEVELOPER_RELEASE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public InAppPurchaseAttributes() {
  }

  public InAppPurchaseAttributes inAppPurchaseType(InAppPurchaseTypeEnum inAppPurchaseType) {
    this.inAppPurchaseType = inAppPurchaseType;
    return this;
  }

  /**
   * Get inAppPurchaseType
   * @return inAppPurchaseType
   */
  @javax.annotation.Nullable
  public InAppPurchaseTypeEnum getInAppPurchaseType() {
    return inAppPurchaseType;
  }

  public void setInAppPurchaseType(InAppPurchaseTypeEnum inAppPurchaseType) {
    this.inAppPurchaseType = inAppPurchaseType;
  }


  public InAppPurchaseAttributes productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public InAppPurchaseAttributes referenceName(String referenceName) {
    this.referenceName = referenceName;
    return this;
  }

  /**
   * Get referenceName
   * @return referenceName
   */
  @javax.annotation.Nullable
  public String getReferenceName() {
    return referenceName;
  }

  public void setReferenceName(String referenceName) {
    this.referenceName = referenceName;
  }


  public InAppPurchaseAttributes state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InAppPurchaseAttributes inAppPurchaseAttributes = (InAppPurchaseAttributes) o;
    return Objects.equals(this.inAppPurchaseType, inAppPurchaseAttributes.inAppPurchaseType) &&
        Objects.equals(this.productId, inAppPurchaseAttributes.productId) &&
        Objects.equals(this.referenceName, inAppPurchaseAttributes.referenceName) &&
        Objects.equals(this.state, inAppPurchaseAttributes.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inAppPurchaseType, productId, referenceName, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InAppPurchaseAttributes {\n");
    sb.append("    inAppPurchaseType: ").append(toIndentedString(inAppPurchaseType)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    referenceName: ").append(toIndentedString(referenceName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inAppPurchaseType");
    openapiFields.add("productId");
    openapiFields.add("referenceName");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InAppPurchaseAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InAppPurchaseAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InAppPurchaseAttributes is not found in the empty JSON string", InAppPurchaseAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InAppPurchaseAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InAppPurchaseAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("inAppPurchaseType") != null && !jsonObj.get("inAppPurchaseType").isJsonNull()) && !jsonObj.get("inAppPurchaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inAppPurchaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inAppPurchaseType").toString()));
      }
      // validate the optional field `inAppPurchaseType`
      if (jsonObj.get("inAppPurchaseType") != null && !jsonObj.get("inAppPurchaseType").isJsonNull()) {
        InAppPurchaseTypeEnum.validateJsonElement(jsonObj.get("inAppPurchaseType"));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("referenceName") != null && !jsonObj.get("referenceName").isJsonNull()) && !jsonObj.get("referenceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceName").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InAppPurchaseAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InAppPurchaseAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InAppPurchaseAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InAppPurchaseAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<InAppPurchaseAttributes>() {
           @Override
           public void write(JsonWriter out, InAppPurchaseAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InAppPurchaseAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InAppPurchaseAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InAppPurchaseAttributes
   * @throws IOException if the JSON string is invalid with respect to InAppPurchaseAttributes
   */
  public static InAppPurchaseAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InAppPurchaseAttributes.class);
  }

  /**
   * Convert an instance of InAppPurchaseAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

