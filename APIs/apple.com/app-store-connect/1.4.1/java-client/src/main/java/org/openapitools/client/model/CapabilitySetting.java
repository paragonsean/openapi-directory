/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CapabilityOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CapabilitySetting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.423773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CapabilitySetting {
  /**
   * Gets or Sets allowedInstances
   */
  @JsonAdapter(AllowedInstancesEnum.Adapter.class)
  public enum AllowedInstancesEnum {
    ENTRY("ENTRY"),
    
    SINGLE("SINGLE"),
    
    MULTIPLE("MULTIPLE");

    private String value;

    AllowedInstancesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedInstancesEnum fromValue(String value) {
      for (AllowedInstancesEnum b : AllowedInstancesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedInstancesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedInstancesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedInstancesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedInstancesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllowedInstancesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_INSTANCES = "allowedInstances";
  @SerializedName(SERIALIZED_NAME_ALLOWED_INSTANCES)
  private AllowedInstancesEnum allowedInstances;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED_BY_DEFAULT = "enabledByDefault";
  @SerializedName(SERIALIZED_NAME_ENABLED_BY_DEFAULT)
  private Boolean enabledByDefault;

  /**
   * Gets or Sets key
   */
  @JsonAdapter(KeyEnum.Adapter.class)
  public enum KeyEnum {
    ICLOUD_VERSION("ICLOUD_VERSION"),
    
    DATA_PROTECTION_PERMISSION_LEVEL("DATA_PROTECTION_PERMISSION_LEVEL"),
    
    APPLE_ID_AUTH_APP_CONSENT("APPLE_ID_AUTH_APP_CONSENT");

    private String value;

    KeyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyEnum fromValue(String value) {
      for (KeyEnum b : KeyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private KeyEnum key;

  public static final String SERIALIZED_NAME_MIN_INSTANCES = "minInstances";
  @SerializedName(SERIALIZED_NAME_MIN_INSTANCES)
  private Integer minInstances;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<CapabilityOption> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public CapabilitySetting() {
  }

  public CapabilitySetting allowedInstances(AllowedInstancesEnum allowedInstances) {
    this.allowedInstances = allowedInstances;
    return this;
  }

  /**
   * Get allowedInstances
   * @return allowedInstances
   */
  @javax.annotation.Nullable
  public AllowedInstancesEnum getAllowedInstances() {
    return allowedInstances;
  }

  public void setAllowedInstances(AllowedInstancesEnum allowedInstances) {
    this.allowedInstances = allowedInstances;
  }


  public CapabilitySetting description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CapabilitySetting enabledByDefault(Boolean enabledByDefault) {
    this.enabledByDefault = enabledByDefault;
    return this;
  }

  /**
   * Get enabledByDefault
   * @return enabledByDefault
   */
  @javax.annotation.Nullable
  public Boolean getEnabledByDefault() {
    return enabledByDefault;
  }

  public void setEnabledByDefault(Boolean enabledByDefault) {
    this.enabledByDefault = enabledByDefault;
  }


  public CapabilitySetting key(KeyEnum key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public KeyEnum getKey() {
    return key;
  }

  public void setKey(KeyEnum key) {
    this.key = key;
  }


  public CapabilitySetting minInstances(Integer minInstances) {
    this.minInstances = minInstances;
    return this;
  }

  /**
   * Get minInstances
   * @return minInstances
   */
  @javax.annotation.Nullable
  public Integer getMinInstances() {
    return minInstances;
  }

  public void setMinInstances(Integer minInstances) {
    this.minInstances = minInstances;
  }


  public CapabilitySetting name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CapabilitySetting options(List<CapabilityOption> options) {
    this.options = options;
    return this;
  }

  public CapabilitySetting addOptionsItem(CapabilityOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public List<CapabilityOption> getOptions() {
    return options;
  }

  public void setOptions(List<CapabilityOption> options) {
    this.options = options;
  }


  public CapabilitySetting visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Get visible
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapabilitySetting capabilitySetting = (CapabilitySetting) o;
    return Objects.equals(this.allowedInstances, capabilitySetting.allowedInstances) &&
        Objects.equals(this.description, capabilitySetting.description) &&
        Objects.equals(this.enabledByDefault, capabilitySetting.enabledByDefault) &&
        Objects.equals(this.key, capabilitySetting.key) &&
        Objects.equals(this.minInstances, capabilitySetting.minInstances) &&
        Objects.equals(this.name, capabilitySetting.name) &&
        Objects.equals(this.options, capabilitySetting.options) &&
        Objects.equals(this.visible, capabilitySetting.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedInstances, description, enabledByDefault, key, minInstances, name, options, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapabilitySetting {\n");
    sb.append("    allowedInstances: ").append(toIndentedString(allowedInstances)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabledByDefault: ").append(toIndentedString(enabledByDefault)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    minInstances: ").append(toIndentedString(minInstances)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedInstances");
    openapiFields.add("description");
    openapiFields.add("enabledByDefault");
    openapiFields.add("key");
    openapiFields.add("minInstances");
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CapabilitySetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CapabilitySetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CapabilitySetting is not found in the empty JSON string", CapabilitySetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CapabilitySetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CapabilitySetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowedInstances") != null && !jsonObj.get("allowedInstances").isJsonNull()) && !jsonObj.get("allowedInstances").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedInstances` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedInstances").toString()));
      }
      // validate the optional field `allowedInstances`
      if (jsonObj.get("allowedInstances") != null && !jsonObj.get("allowedInstances").isJsonNull()) {
        AllowedInstancesEnum.validateJsonElement(jsonObj.get("allowedInstances"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `key`
      if (jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) {
        KeyEnum.validateJsonElement(jsonObj.get("key"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            CapabilityOption.validateJsonElement(jsonArrayoptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CapabilitySetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CapabilitySetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CapabilitySetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CapabilitySetting.class));

       return (TypeAdapter<T>) new TypeAdapter<CapabilitySetting>() {
           @Override
           public void write(JsonWriter out, CapabilitySetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CapabilitySetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CapabilitySetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CapabilitySetting
   * @throws IOException if the JSON string is invalid with respect to CapabilitySetting
   */
  public static CapabilitySetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CapabilitySetting.class);
  }

  /**
   * Convert an instance of CapabilitySetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

