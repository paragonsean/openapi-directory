/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppStoreReviewDetailAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:02.423773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppStoreReviewDetailAttributes {
  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "contactEmail";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  private String contactEmail;

  public static final String SERIALIZED_NAME_CONTACT_FIRST_NAME = "contactFirstName";
  @SerializedName(SERIALIZED_NAME_CONTACT_FIRST_NAME)
  private String contactFirstName;

  public static final String SERIALIZED_NAME_CONTACT_LAST_NAME = "contactLastName";
  @SerializedName(SERIALIZED_NAME_CONTACT_LAST_NAME)
  private String contactLastName;

  public static final String SERIALIZED_NAME_CONTACT_PHONE = "contactPhone";
  @SerializedName(SERIALIZED_NAME_CONTACT_PHONE)
  private String contactPhone;

  public static final String SERIALIZED_NAME_DEMO_ACCOUNT_NAME = "demoAccountName";
  @SerializedName(SERIALIZED_NAME_DEMO_ACCOUNT_NAME)
  private String demoAccountName;

  public static final String SERIALIZED_NAME_DEMO_ACCOUNT_PASSWORD = "demoAccountPassword";
  @SerializedName(SERIALIZED_NAME_DEMO_ACCOUNT_PASSWORD)
  private String demoAccountPassword;

  public static final String SERIALIZED_NAME_DEMO_ACCOUNT_REQUIRED = "demoAccountRequired";
  @SerializedName(SERIALIZED_NAME_DEMO_ACCOUNT_REQUIRED)
  private Boolean demoAccountRequired;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public AppStoreReviewDetailAttributes() {
  }

  public AppStoreReviewDetailAttributes contactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
    return this;
  }

  /**
   * Get contactEmail
   * @return contactEmail
   */
  @javax.annotation.Nullable
  public String getContactEmail() {
    return contactEmail;
  }

  public void setContactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
  }


  public AppStoreReviewDetailAttributes contactFirstName(String contactFirstName) {
    this.contactFirstName = contactFirstName;
    return this;
  }

  /**
   * Get contactFirstName
   * @return contactFirstName
   */
  @javax.annotation.Nullable
  public String getContactFirstName() {
    return contactFirstName;
  }

  public void setContactFirstName(String contactFirstName) {
    this.contactFirstName = contactFirstName;
  }


  public AppStoreReviewDetailAttributes contactLastName(String contactLastName) {
    this.contactLastName = contactLastName;
    return this;
  }

  /**
   * Get contactLastName
   * @return contactLastName
   */
  @javax.annotation.Nullable
  public String getContactLastName() {
    return contactLastName;
  }

  public void setContactLastName(String contactLastName) {
    this.contactLastName = contactLastName;
  }


  public AppStoreReviewDetailAttributes contactPhone(String contactPhone) {
    this.contactPhone = contactPhone;
    return this;
  }

  /**
   * Get contactPhone
   * @return contactPhone
   */
  @javax.annotation.Nullable
  public String getContactPhone() {
    return contactPhone;
  }

  public void setContactPhone(String contactPhone) {
    this.contactPhone = contactPhone;
  }


  public AppStoreReviewDetailAttributes demoAccountName(String demoAccountName) {
    this.demoAccountName = demoAccountName;
    return this;
  }

  /**
   * Get demoAccountName
   * @return demoAccountName
   */
  @javax.annotation.Nullable
  public String getDemoAccountName() {
    return demoAccountName;
  }

  public void setDemoAccountName(String demoAccountName) {
    this.demoAccountName = demoAccountName;
  }


  public AppStoreReviewDetailAttributes demoAccountPassword(String demoAccountPassword) {
    this.demoAccountPassword = demoAccountPassword;
    return this;
  }

  /**
   * Get demoAccountPassword
   * @return demoAccountPassword
   */
  @javax.annotation.Nullable
  public String getDemoAccountPassword() {
    return demoAccountPassword;
  }

  public void setDemoAccountPassword(String demoAccountPassword) {
    this.demoAccountPassword = demoAccountPassword;
  }


  public AppStoreReviewDetailAttributes demoAccountRequired(Boolean demoAccountRequired) {
    this.demoAccountRequired = demoAccountRequired;
    return this;
  }

  /**
   * Get demoAccountRequired
   * @return demoAccountRequired
   */
  @javax.annotation.Nullable
  public Boolean getDemoAccountRequired() {
    return demoAccountRequired;
  }

  public void setDemoAccountRequired(Boolean demoAccountRequired) {
    this.demoAccountRequired = demoAccountRequired;
  }


  public AppStoreReviewDetailAttributes notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppStoreReviewDetailAttributes appStoreReviewDetailAttributes = (AppStoreReviewDetailAttributes) o;
    return Objects.equals(this.contactEmail, appStoreReviewDetailAttributes.contactEmail) &&
        Objects.equals(this.contactFirstName, appStoreReviewDetailAttributes.contactFirstName) &&
        Objects.equals(this.contactLastName, appStoreReviewDetailAttributes.contactLastName) &&
        Objects.equals(this.contactPhone, appStoreReviewDetailAttributes.contactPhone) &&
        Objects.equals(this.demoAccountName, appStoreReviewDetailAttributes.demoAccountName) &&
        Objects.equals(this.demoAccountPassword, appStoreReviewDetailAttributes.demoAccountPassword) &&
        Objects.equals(this.demoAccountRequired, appStoreReviewDetailAttributes.demoAccountRequired) &&
        Objects.equals(this.notes, appStoreReviewDetailAttributes.notes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactEmail, contactFirstName, contactLastName, contactPhone, demoAccountName, demoAccountPassword, demoAccountRequired, notes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppStoreReviewDetailAttributes {\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    contactFirstName: ").append(toIndentedString(contactFirstName)).append("\n");
    sb.append("    contactLastName: ").append(toIndentedString(contactLastName)).append("\n");
    sb.append("    contactPhone: ").append(toIndentedString(contactPhone)).append("\n");
    sb.append("    demoAccountName: ").append(toIndentedString(demoAccountName)).append("\n");
    sb.append("    demoAccountPassword: ").append(toIndentedString(demoAccountPassword)).append("\n");
    sb.append("    demoAccountRequired: ").append(toIndentedString(demoAccountRequired)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactEmail");
    openapiFields.add("contactFirstName");
    openapiFields.add("contactLastName");
    openapiFields.add("contactPhone");
    openapiFields.add("demoAccountName");
    openapiFields.add("demoAccountPassword");
    openapiFields.add("demoAccountRequired");
    openapiFields.add("notes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppStoreReviewDetailAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppStoreReviewDetailAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppStoreReviewDetailAttributes is not found in the empty JSON string", AppStoreReviewDetailAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppStoreReviewDetailAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppStoreReviewDetailAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contactEmail") != null && !jsonObj.get("contactEmail").isJsonNull()) && !jsonObj.get("contactEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactEmail").toString()));
      }
      if ((jsonObj.get("contactFirstName") != null && !jsonObj.get("contactFirstName").isJsonNull()) && !jsonObj.get("contactFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactFirstName").toString()));
      }
      if ((jsonObj.get("contactLastName") != null && !jsonObj.get("contactLastName").isJsonNull()) && !jsonObj.get("contactLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactLastName").toString()));
      }
      if ((jsonObj.get("contactPhone") != null && !jsonObj.get("contactPhone").isJsonNull()) && !jsonObj.get("contactPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactPhone").toString()));
      }
      if ((jsonObj.get("demoAccountName") != null && !jsonObj.get("demoAccountName").isJsonNull()) && !jsonObj.get("demoAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `demoAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("demoAccountName").toString()));
      }
      if ((jsonObj.get("demoAccountPassword") != null && !jsonObj.get("demoAccountPassword").isJsonNull()) && !jsonObj.get("demoAccountPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `demoAccountPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("demoAccountPassword").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppStoreReviewDetailAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppStoreReviewDetailAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppStoreReviewDetailAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppStoreReviewDetailAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<AppStoreReviewDetailAttributes>() {
           @Override
           public void write(JsonWriter out, AppStoreReviewDetailAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppStoreReviewDetailAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppStoreReviewDetailAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppStoreReviewDetailAttributes
   * @throws IOException if the JSON string is invalid with respect to AppStoreReviewDetailAttributes
   */
  public static AppStoreReviewDetailAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppStoreReviewDetailAttributes.class);
  }

  /**
   * Convert an instance of AppStoreReviewDetailAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

