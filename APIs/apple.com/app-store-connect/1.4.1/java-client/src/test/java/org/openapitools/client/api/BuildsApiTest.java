/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppEncryptionDeclarationResponse;
import org.openapitools.client.model.AppResponse;
import org.openapitools.client.model.AppStoreVersionResponse;
import org.openapitools.client.model.BetaAppReviewSubmissionResponse;
import org.openapitools.client.model.BetaBuildLocalizationsResponse;
import org.openapitools.client.model.BetaTestersResponse;
import org.openapitools.client.model.BuildAppEncryptionDeclarationLinkageRequest;
import org.openapitools.client.model.BuildAppEncryptionDeclarationLinkageResponse;
import org.openapitools.client.model.BuildBetaDetailResponse;
import org.openapitools.client.model.BuildBetaGroupsLinkagesRequest;
import org.openapitools.client.model.BuildIconsResponse;
import org.openapitools.client.model.BuildIndividualTestersLinkagesRequest;
import org.openapitools.client.model.BuildIndividualTestersLinkagesResponse;
import org.openapitools.client.model.BuildResponse;
import org.openapitools.client.model.BuildUpdateRequest;
import org.openapitools.client.model.BuildsResponse;
import org.openapitools.client.model.DiagnosticSignaturesResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PerfPowerMetricsResponse;
import org.openapitools.client.model.PrereleaseVersionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BuildsApi
 */
@Disabled
public class BuildsApiTest {

    private final BuildsApi api = new BuildsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsAppEncryptionDeclarationGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsAppEncryptionDeclarations = null;
        AppEncryptionDeclarationResponse response = api.buildsAppEncryptionDeclarationGetToOneRelated(id, fieldsAppEncryptionDeclarations);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsAppEncryptionDeclarationGetToOneRelationshipTest() throws ApiException {
        String id = null;
        BuildAppEncryptionDeclarationLinkageResponse response = api.buildsAppEncryptionDeclarationGetToOneRelationship(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsAppEncryptionDeclarationUpdateToOneRelationshipTest() throws ApiException {
        String id = null;
        BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest = null;
        api.buildsAppEncryptionDeclarationUpdateToOneRelationship(id, buildAppEncryptionDeclarationLinkageRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsAppGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsApps = null;
        AppResponse response = api.buildsAppGetToOneRelated(id, fieldsApps);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsAppStoreVersionGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsAppStoreVersions = null;
        AppStoreVersionResponse response = api.buildsAppStoreVersionGetToOneRelated(id, fieldsAppStoreVersions);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsBetaAppReviewSubmissionGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsBetaAppReviewSubmissions = null;
        BetaAppReviewSubmissionResponse response = api.buildsBetaAppReviewSubmissionGetToOneRelated(id, fieldsBetaAppReviewSubmissions);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsBetaBuildLocalizationsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsBetaBuildLocalizations = null;
        Integer limit = null;
        BetaBuildLocalizationsResponse response = api.buildsBetaBuildLocalizationsGetToManyRelated(id, fieldsBetaBuildLocalizations, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsBetaGroupsCreateToManyRelationshipTest() throws ApiException {
        String id = null;
        BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest = null;
        api.buildsBetaGroupsCreateToManyRelationship(id, buildBetaGroupsLinkagesRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsBetaGroupsDeleteToManyRelationshipTest() throws ApiException {
        String id = null;
        BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest = null;
        api.buildsBetaGroupsDeleteToManyRelationship(id, buildBetaGroupsLinkagesRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsBuildBetaDetailGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsBuildBetaDetails = null;
        BuildBetaDetailResponse response = api.buildsBuildBetaDetailGetToOneRelated(id, fieldsBuildBetaDetails);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsDiagnosticSignaturesGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> filterDiagnosticType = null;
        List<String> fieldsDiagnosticSignatures = null;
        Integer limit = null;
        DiagnosticSignaturesResponse response = api.buildsDiagnosticSignaturesGetToManyRelated(id, filterDiagnosticType, fieldsDiagnosticSignatures, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsGetCollectionTest() throws ApiException {
        List<String> filterBetaAppReviewSubmissionBetaReviewState = null;
        List<String> filterExpired = null;
        List<String> filterPreReleaseVersionPlatform = null;
        List<String> filterPreReleaseVersionVersion = null;
        List<String> filterProcessingState = null;
        List<String> filterUsesNonExemptEncryption = null;
        List<String> filterVersion = null;
        List<String> filterApp = null;
        List<String> filterAppStoreVersion = null;
        List<String> filterBetaGroups = null;
        List<String> filterPreReleaseVersion = null;
        List<String> filterId = null;
        List<String> sort = null;
        List<String> fieldsBuilds = null;
        Integer limit = null;
        List<String> include = null;
        List<String> fieldsAppEncryptionDeclarations = null;
        List<String> fieldsBetaAppReviewSubmissions = null;
        List<String> fieldsBuildBetaDetails = null;
        List<String> fieldsBuildIcons = null;
        List<String> fieldsPerfPowerMetrics = null;
        List<String> fieldsPreReleaseVersions = null;
        List<String> fieldsAppStoreVersions = null;
        List<String> fieldsDiagnosticSignatures = null;
        List<String> fieldsBetaTesters = null;
        List<String> fieldsBetaBuildLocalizations = null;
        List<String> fieldsApps = null;
        Integer limitBetaBuildLocalizations = null;
        Integer limitIcons = null;
        Integer limitIndividualTesters = null;
        BuildsResponse response = api.buildsGetCollection(filterBetaAppReviewSubmissionBetaReviewState, filterExpired, filterPreReleaseVersionPlatform, filterPreReleaseVersionVersion, filterProcessingState, filterUsesNonExemptEncryption, filterVersion, filterApp, filterAppStoreVersion, filterBetaGroups, filterPreReleaseVersion, filterId, sort, fieldsBuilds, limit, include, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails, fieldsBuildIcons, fieldsPerfPowerMetrics, fieldsPreReleaseVersions, fieldsAppStoreVersions, fieldsDiagnosticSignatures, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsApps, limitBetaBuildLocalizations, limitIcons, limitIndividualTesters);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsGetInstanceTest() throws ApiException {
        String id = null;
        List<String> fieldsBuilds = null;
        List<String> include = null;
        List<String> fieldsAppEncryptionDeclarations = null;
        List<String> fieldsBetaAppReviewSubmissions = null;
        List<String> fieldsBuildBetaDetails = null;
        List<String> fieldsBuildIcons = null;
        List<String> fieldsPerfPowerMetrics = null;
        List<String> fieldsPreReleaseVersions = null;
        List<String> fieldsAppStoreVersions = null;
        List<String> fieldsDiagnosticSignatures = null;
        List<String> fieldsBetaTesters = null;
        List<String> fieldsBetaBuildLocalizations = null;
        List<String> fieldsApps = null;
        Integer limitBetaBuildLocalizations = null;
        Integer limitIcons = null;
        Integer limitIndividualTesters = null;
        BuildResponse response = api.buildsGetInstance(id, fieldsBuilds, include, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails, fieldsBuildIcons, fieldsPerfPowerMetrics, fieldsPreReleaseVersions, fieldsAppStoreVersions, fieldsDiagnosticSignatures, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsApps, limitBetaBuildLocalizations, limitIcons, limitIndividualTesters);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsIconsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsBuildIcons = null;
        Integer limit = null;
        BuildIconsResponse response = api.buildsIconsGetToManyRelated(id, fieldsBuildIcons, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsIndividualTestersCreateToManyRelationshipTest() throws ApiException {
        String id = null;
        BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest = null;
        api.buildsIndividualTestersCreateToManyRelationship(id, buildIndividualTestersLinkagesRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsIndividualTestersDeleteToManyRelationshipTest() throws ApiException {
        String id = null;
        BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest = null;
        api.buildsIndividualTestersDeleteToManyRelationship(id, buildIndividualTestersLinkagesRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsIndividualTestersGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsBetaTesters = null;
        Integer limit = null;
        BetaTestersResponse response = api.buildsIndividualTestersGetToManyRelated(id, fieldsBetaTesters, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsIndividualTestersGetToManyRelationshipTest() throws ApiException {
        String id = null;
        Integer limit = null;
        BuildIndividualTestersLinkagesResponse response = api.buildsIndividualTestersGetToManyRelationship(id, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsPerfPowerMetricsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> filterDeviceType = null;
        List<String> filterMetricType = null;
        List<String> filterPlatform = null;
        PerfPowerMetricsResponse response = api.buildsPerfPowerMetricsGetToManyRelated(id, filterDeviceType, filterMetricType, filterPlatform);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsPreReleaseVersionGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsPreReleaseVersions = null;
        PrereleaseVersionResponse response = api.buildsPreReleaseVersionGetToOneRelated(id, fieldsPreReleaseVersions);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsUpdateInstanceTest() throws ApiException {
        String id = null;
        BuildUpdateRequest buildUpdateRequest = null;
        BuildResponse response = api.buildsUpdateInstance(id, buildUpdateRequest);
        // TODO: test validations
    }

}
