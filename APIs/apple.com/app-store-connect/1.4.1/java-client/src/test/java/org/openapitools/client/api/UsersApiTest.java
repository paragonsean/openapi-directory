/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppsResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.UserResponse;
import org.openapitools.client.model.UserUpdateRequest;
import org.openapitools.client.model.UserVisibleAppsLinkagesRequest;
import org.openapitools.client.model.UserVisibleAppsLinkagesResponse;
import org.openapitools.client.model.UsersResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersDeleteInstanceTest() throws ApiException {
        String id = null;
        api.usersDeleteInstance(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetCollectionTest() throws ApiException {
        List<String> filterRoles = null;
        List<String> filterUsername = null;
        List<String> filterVisibleApps = null;
        List<String> sort = null;
        List<String> fieldsUsers = null;
        Integer limit = null;
        List<String> include = null;
        List<String> fieldsApps = null;
        Integer limitVisibleApps = null;
        UsersResponse response = api.usersGetCollection(filterRoles, filterUsername, filterVisibleApps, sort, fieldsUsers, limit, include, fieldsApps, limitVisibleApps);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetInstanceTest() throws ApiException {
        String id = null;
        List<String> fieldsUsers = null;
        List<String> include = null;
        List<String> fieldsApps = null;
        Integer limitVisibleApps = null;
        UserResponse response = api.usersGetInstance(id, fieldsUsers, include, fieldsApps, limitVisibleApps);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUpdateInstanceTest() throws ApiException {
        String id = null;
        UserUpdateRequest userUpdateRequest = null;
        UserResponse response = api.usersUpdateInstance(id, userUpdateRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersVisibleAppsCreateToManyRelationshipTest() throws ApiException {
        String id = null;
        UserVisibleAppsLinkagesRequest userVisibleAppsLinkagesRequest = null;
        api.usersVisibleAppsCreateToManyRelationship(id, userVisibleAppsLinkagesRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersVisibleAppsDeleteToManyRelationshipTest() throws ApiException {
        String id = null;
        UserVisibleAppsLinkagesRequest userVisibleAppsLinkagesRequest = null;
        api.usersVisibleAppsDeleteToManyRelationship(id, userVisibleAppsLinkagesRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersVisibleAppsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsApps = null;
        Integer limit = null;
        AppsResponse response = api.usersVisibleAppsGetToManyRelated(id, fieldsApps, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersVisibleAppsGetToManyRelationshipTest() throws ApiException {
        String id = null;
        Integer limit = null;
        UserVisibleAppsLinkagesResponse response = api.usersVisibleAppsGetToManyRelationship(id, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersVisibleAppsReplaceToManyRelationshipTest() throws ApiException {
        String id = null;
        UserVisibleAppsLinkagesRequest userVisibleAppsLinkagesRequest = null;
        api.usersVisibleAppsReplaceToManyRelationship(id, userVisibleAppsLinkagesRequest);
        // TODO: test validations
    }

}
