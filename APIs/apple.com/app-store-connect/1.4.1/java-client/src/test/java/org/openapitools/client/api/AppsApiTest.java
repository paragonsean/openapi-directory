/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppBetaTestersLinkagesRequest;
import org.openapitools.client.model.AppInfosResponse;
import org.openapitools.client.model.AppPreOrderResponse;
import org.openapitools.client.model.AppPricesResponse;
import org.openapitools.client.model.AppResponse;
import org.openapitools.client.model.AppStoreVersionsResponse;
import org.openapitools.client.model.AppUpdateRequest;
import org.openapitools.client.model.AppsResponse;
import org.openapitools.client.model.BetaAppLocalizationsResponse;
import org.openapitools.client.model.BetaAppReviewDetailResponse;
import org.openapitools.client.model.BetaGroupsResponse;
import org.openapitools.client.model.BetaLicenseAgreementResponse;
import org.openapitools.client.model.BuildsResponse;
import org.openapitools.client.model.EndUserLicenseAgreementResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GameCenterEnabledVersionsResponse;
import org.openapitools.client.model.InAppPurchasesResponse;
import org.openapitools.client.model.PerfPowerMetricsResponse;
import org.openapitools.client.model.PreReleaseVersionsResponse;
import org.openapitools.client.model.TerritoriesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppsApi
 */
@Disabled
public class AppsApiTest {

    private final AppsApi api = new AppsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppInfosGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsAgeRatingDeclarations = null;
        List<String> fieldsAppInfos = null;
        List<String> fieldsAppCategories = null;
        List<String> fieldsAppInfoLocalizations = null;
        List<String> fieldsApps = null;
        Integer limit = null;
        List<String> include = null;
        AppInfosResponse response = api.appsAppInfosGetToManyRelated(id, fieldsAgeRatingDeclarations, fieldsAppInfos, fieldsAppCategories, fieldsAppInfoLocalizations, fieldsApps, limit, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppStoreVersionsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> filterAppStoreState = null;
        List<String> filterPlatform = null;
        List<String> filterVersionString = null;
        List<String> filterId = null;
        List<String> fieldsIdfaDeclarations = null;
        List<String> fieldsAppStoreVersionLocalizations = null;
        List<String> fieldsRoutingAppCoverages = null;
        List<String> fieldsAppStoreVersionPhasedReleases = null;
        List<String> fieldsAgeRatingDeclarations = null;
        List<String> fieldsAppStoreReviewDetails = null;
        List<String> fieldsAppStoreVersions = null;
        List<String> fieldsBuilds = null;
        List<String> fieldsAppStoreVersionSubmissions = null;
        List<String> fieldsApps = null;
        Integer limit = null;
        List<String> include = null;
        AppStoreVersionsResponse response = api.appsAppStoreVersionsGetToManyRelated(id, filterAppStoreState, filterPlatform, filterVersionString, filterId, fieldsIdfaDeclarations, fieldsAppStoreVersionLocalizations, fieldsRoutingAppCoverages, fieldsAppStoreVersionPhasedReleases, fieldsAgeRatingDeclarations, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsBuilds, fieldsAppStoreVersionSubmissions, fieldsApps, limit, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAvailableTerritoriesGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsTerritories = null;
        Integer limit = null;
        TerritoriesResponse response = api.appsAvailableTerritoriesGetToManyRelated(id, fieldsTerritories, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsBetaAppLocalizationsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsBetaAppLocalizations = null;
        Integer limit = null;
        BetaAppLocalizationsResponse response = api.appsBetaAppLocalizationsGetToManyRelated(id, fieldsBetaAppLocalizations, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsBetaAppReviewDetailGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsBetaAppReviewDetails = null;
        BetaAppReviewDetailResponse response = api.appsBetaAppReviewDetailGetToOneRelated(id, fieldsBetaAppReviewDetails);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsBetaGroupsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsBetaGroups = null;
        Integer limit = null;
        BetaGroupsResponse response = api.appsBetaGroupsGetToManyRelated(id, fieldsBetaGroups, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsBetaLicenseAgreementGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsBetaLicenseAgreements = null;
        BetaLicenseAgreementResponse response = api.appsBetaLicenseAgreementGetToOneRelated(id, fieldsBetaLicenseAgreements);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsBetaTestersDeleteToManyRelationshipTest() throws ApiException {
        String id = null;
        AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest = null;
        api.appsBetaTestersDeleteToManyRelationship(id, appBetaTestersLinkagesRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsBuildsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsBuilds = null;
        Integer limit = null;
        BuildsResponse response = api.appsBuildsGetToManyRelated(id, fieldsBuilds, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsEndUserLicenseAgreementGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsEndUserLicenseAgreements = null;
        EndUserLicenseAgreementResponse response = api.appsEndUserLicenseAgreementGetToOneRelated(id, fieldsEndUserLicenseAgreements);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGameCenterEnabledVersionsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> filterPlatform = null;
        List<String> filterVersionString = null;
        List<String> filterId = null;
        List<String> sort = null;
        List<String> fieldsGameCenterEnabledVersions = null;
        List<String> fieldsApps = null;
        Integer limit = null;
        List<String> include = null;
        GameCenterEnabledVersionsResponse response = api.appsGameCenterEnabledVersionsGetToManyRelated(id, filterPlatform, filterVersionString, filterId, sort, fieldsGameCenterEnabledVersions, fieldsApps, limit, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetCollectionTest() throws ApiException {
        List<String> filterAppStoreVersionsAppStoreState = null;
        List<String> filterAppStoreVersionsPlatform = null;
        List<String> filterBundleId = null;
        List<String> filterName = null;
        List<String> filterSku = null;
        List<String> filterAppStoreVersions = null;
        List<String> filterId = null;
        List<String> existsGameCenterEnabledVersions = null;
        List<String> sort = null;
        List<String> fieldsApps = null;
        Integer limit = null;
        List<String> include = null;
        List<String> fieldsBetaGroups = null;
        List<String> fieldsPerfPowerMetrics = null;
        List<String> fieldsAppInfos = null;
        List<String> fieldsAppPreOrders = null;
        List<String> fieldsPreReleaseVersions = null;
        List<String> fieldsAppPrices = null;
        List<String> fieldsInAppPurchases = null;
        List<String> fieldsBetaAppReviewDetails = null;
        List<String> fieldsTerritories = null;
        List<String> fieldsGameCenterEnabledVersions = null;
        List<String> fieldsAppStoreVersions = null;
        List<String> fieldsBuilds = null;
        List<String> fieldsBetaAppLocalizations = null;
        List<String> fieldsBetaLicenseAgreements = null;
        List<String> fieldsEndUserLicenseAgreements = null;
        Integer limitAppInfos = null;
        Integer limitAppStoreVersions = null;
        Integer limitAvailableTerritories = null;
        Integer limitBetaAppLocalizations = null;
        Integer limitBetaGroups = null;
        Integer limitBuilds = null;
        Integer limitGameCenterEnabledVersions = null;
        Integer limitInAppPurchases = null;
        Integer limitPreReleaseVersions = null;
        Integer limitPrices = null;
        AppsResponse response = api.appsGetCollection(filterAppStoreVersionsAppStoreState, filterAppStoreVersionsPlatform, filterBundleId, filterName, filterSku, filterAppStoreVersions, filterId, existsGameCenterEnabledVersions, sort, fieldsApps, limit, include, fieldsBetaGroups, fieldsPerfPowerMetrics, fieldsAppInfos, fieldsAppPreOrders, fieldsPreReleaseVersions, fieldsAppPrices, fieldsInAppPurchases, fieldsBetaAppReviewDetails, fieldsTerritories, fieldsGameCenterEnabledVersions, fieldsAppStoreVersions, fieldsBuilds, fieldsBetaAppLocalizations, fieldsBetaLicenseAgreements, fieldsEndUserLicenseAgreements, limitAppInfos, limitAppStoreVersions, limitAvailableTerritories, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitPreReleaseVersions, limitPrices);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetInstanceTest() throws ApiException {
        String id = null;
        List<String> fieldsApps = null;
        List<String> include = null;
        List<String> fieldsBetaGroups = null;
        List<String> fieldsPerfPowerMetrics = null;
        List<String> fieldsAppInfos = null;
        List<String> fieldsAppPreOrders = null;
        List<String> fieldsPreReleaseVersions = null;
        List<String> fieldsAppPrices = null;
        List<String> fieldsInAppPurchases = null;
        List<String> fieldsBetaAppReviewDetails = null;
        List<String> fieldsTerritories = null;
        List<String> fieldsGameCenterEnabledVersions = null;
        List<String> fieldsAppStoreVersions = null;
        List<String> fieldsBuilds = null;
        List<String> fieldsBetaAppLocalizations = null;
        List<String> fieldsBetaLicenseAgreements = null;
        List<String> fieldsEndUserLicenseAgreements = null;
        Integer limitAppInfos = null;
        Integer limitAppStoreVersions = null;
        Integer limitAvailableTerritories = null;
        Integer limitBetaAppLocalizations = null;
        Integer limitBetaGroups = null;
        Integer limitBuilds = null;
        Integer limitGameCenterEnabledVersions = null;
        Integer limitInAppPurchases = null;
        Integer limitPreReleaseVersions = null;
        Integer limitPrices = null;
        AppResponse response = api.appsGetInstance(id, fieldsApps, include, fieldsBetaGroups, fieldsPerfPowerMetrics, fieldsAppInfos, fieldsAppPreOrders, fieldsPreReleaseVersions, fieldsAppPrices, fieldsInAppPurchases, fieldsBetaAppReviewDetails, fieldsTerritories, fieldsGameCenterEnabledVersions, fieldsAppStoreVersions, fieldsBuilds, fieldsBetaAppLocalizations, fieldsBetaLicenseAgreements, fieldsEndUserLicenseAgreements, limitAppInfos, limitAppStoreVersions, limitAvailableTerritories, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitPreReleaseVersions, limitPrices);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsInAppPurchasesGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> filterInAppPurchaseType = null;
        List<String> filterCanBeSubmitted = null;
        List<String> sort = null;
        List<String> fieldsInAppPurchases = null;
        List<String> fieldsApps = null;
        Integer limit = null;
        List<String> include = null;
        InAppPurchasesResponse response = api.appsInAppPurchasesGetToManyRelated(id, filterInAppPurchaseType, filterCanBeSubmitted, sort, fieldsInAppPurchases, fieldsApps, limit, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPerfPowerMetricsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> filterDeviceType = null;
        List<String> filterMetricType = null;
        List<String> filterPlatform = null;
        PerfPowerMetricsResponse response = api.appsPerfPowerMetricsGetToManyRelated(id, filterDeviceType, filterMetricType, filterPlatform);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPreOrderGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsAppPreOrders = null;
        AppPreOrderResponse response = api.appsPreOrderGetToOneRelated(id, fieldsAppPreOrders);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPreReleaseVersionsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsPreReleaseVersions = null;
        Integer limit = null;
        PreReleaseVersionsResponse response = api.appsPreReleaseVersionsGetToManyRelated(id, fieldsPreReleaseVersions, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPricesGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsAppPrices = null;
        List<String> fieldsAppPriceTiers = null;
        List<String> fieldsApps = null;
        Integer limit = null;
        List<String> include = null;
        AppPricesResponse response = api.appsPricesGetToManyRelated(id, fieldsAppPrices, fieldsAppPriceTiers, fieldsApps, limit, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsUpdateInstanceTest() throws ApiException {
        String id = null;
        AppUpdateRequest appUpdateRequest = null;
        AppResponse response = api.appsUpdateInstance(id, appUpdateRequest);
        // TODO: test validations
    }

}
