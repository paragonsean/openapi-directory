/*
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AgeRatingDeclarationResponse;
import org.openapitools.client.model.AppStoreReviewDetailResponse;
import org.openapitools.client.model.AppStoreVersionBuildLinkageRequest;
import org.openapitools.client.model.AppStoreVersionBuildLinkageResponse;
import org.openapitools.client.model.AppStoreVersionCreateRequest;
import org.openapitools.client.model.AppStoreVersionLocalizationsResponse;
import org.openapitools.client.model.AppStoreVersionPhasedReleaseResponse;
import org.openapitools.client.model.AppStoreVersionResponse;
import org.openapitools.client.model.AppStoreVersionSubmissionResponse;
import org.openapitools.client.model.AppStoreVersionUpdateRequest;
import org.openapitools.client.model.BuildResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.IdfaDeclarationResponse;
import org.openapitools.client.model.RoutingAppCoverageResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppStoreVersionsApi
 */
@Disabled
public class AppStoreVersionsApiTest {

    private final AppStoreVersionsApi api = new AppStoreVersionsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAgeRatingDeclarationGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsAgeRatingDeclarations = null;
        AgeRatingDeclarationResponse response = api.appStoreVersionsAgeRatingDeclarationGetToOneRelated(id, fieldsAgeRatingDeclarations);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppStoreReviewDetailGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsAppStoreReviewDetails = null;
        List<String> fieldsAppStoreVersions = null;
        List<String> fieldsAppStoreReviewAttachments = null;
        List<String> include = null;
        AppStoreReviewDetailResponse response = api.appStoreVersionsAppStoreReviewDetailGetToOneRelated(id, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsAppStoreReviewAttachments, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsAppStoreVersionLocalizations = null;
        Integer limit = null;
        AppStoreVersionLocalizationsResponse response = api.appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(id, fieldsAppStoreVersionLocalizations, limit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsAppStoreVersionPhasedReleases = null;
        AppStoreVersionPhasedReleaseResponse response = api.appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(id, fieldsAppStoreVersionPhasedReleases);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsAppStoreVersions = null;
        List<String> fieldsAppStoreVersionSubmissions = null;
        List<String> include = null;
        AppStoreVersionSubmissionResponse response = api.appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(id, fieldsAppStoreVersions, fieldsAppStoreVersionSubmissions, include);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsBuildGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsBuilds = null;
        BuildResponse response = api.appStoreVersionsBuildGetToOneRelated(id, fieldsBuilds);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsBuildGetToOneRelationshipTest() throws ApiException {
        String id = null;
        AppStoreVersionBuildLinkageResponse response = api.appStoreVersionsBuildGetToOneRelationship(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsBuildUpdateToOneRelationshipTest() throws ApiException {
        String id = null;
        AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest = null;
        api.appStoreVersionsBuildUpdateToOneRelationship(id, appStoreVersionBuildLinkageRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsCreateInstanceTest() throws ApiException {
        AppStoreVersionCreateRequest appStoreVersionCreateRequest = null;
        AppStoreVersionResponse response = api.appStoreVersionsCreateInstance(appStoreVersionCreateRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsDeleteInstanceTest() throws ApiException {
        String id = null;
        api.appStoreVersionsDeleteInstance(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsGetInstanceTest() throws ApiException {
        String id = null;
        List<String> fieldsAppStoreVersions = null;
        List<String> include = null;
        List<String> fieldsAppStoreVersionLocalizations = null;
        List<String> fieldsIdfaDeclarations = null;
        List<String> fieldsRoutingAppCoverages = null;
        List<String> fieldsAppStoreVersionPhasedReleases = null;
        List<String> fieldsAgeRatingDeclarations = null;
        List<String> fieldsAppStoreReviewDetails = null;
        List<String> fieldsBuilds = null;
        List<String> fieldsAppStoreVersionSubmissions = null;
        Integer limitAppStoreVersionLocalizations = null;
        AppStoreVersionResponse response = api.appStoreVersionsGetInstance(id, fieldsAppStoreVersions, include, fieldsAppStoreVersionLocalizations, fieldsIdfaDeclarations, fieldsRoutingAppCoverages, fieldsAppStoreVersionPhasedReleases, fieldsAgeRatingDeclarations, fieldsAppStoreReviewDetails, fieldsBuilds, fieldsAppStoreVersionSubmissions, limitAppStoreVersionLocalizations);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsIdfaDeclarationGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsIdfaDeclarations = null;
        IdfaDeclarationResponse response = api.appStoreVersionsIdfaDeclarationGetToOneRelated(id, fieldsIdfaDeclarations);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsRoutingAppCoverageGetToOneRelatedTest() throws ApiException {
        String id = null;
        List<String> fieldsRoutingAppCoverages = null;
        RoutingAppCoverageResponse response = api.appStoreVersionsRoutingAppCoverageGetToOneRelated(id, fieldsRoutingAppCoverages);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appStoreVersionsUpdateInstanceTest() throws ApiException {
        String id = null;
        AppStoreVersionUpdateRequest appStoreVersionUpdateRequest = null;
        AppStoreVersionResponse response = api.appStoreVersionsUpdateInstance(id, appStoreVersionUpdateRequest);
        // TODO: test validations
    }

}
