/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppsApi_H
#define OAI_OAIAppsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppBetaTestersLinkagesRequest.h"
#include "OAIAppInfosResponse.h"
#include "OAIAppPreOrderResponse.h"
#include "OAIAppPricesResponse.h"
#include "OAIAppResponse.h"
#include "OAIAppStoreVersionsResponse.h"
#include "OAIAppUpdateRequest.h"
#include "OAIAppsResponse.h"
#include "OAIBetaAppLocalizationsResponse.h"
#include "OAIBetaAppReviewDetailResponse.h"
#include "OAIBetaGroupsResponse.h"
#include "OAIBetaLicenseAgreementResponse.h"
#include "OAIBuildsResponse.h"
#include "OAIEndUserLicenseAgreementResponse.h"
#include "OAIErrorResponse.h"
#include "OAIGameCenterEnabledVersionsResponse.h"
#include "OAIInAppPurchasesResponse.h"
#include "OAIPerfPowerMetricsResponse.h"
#include "OAIPreReleaseVersionsResponse.h"
#include "OAITerritoriesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppsApi : public QObject {
    Q_OBJECT

public:
    OAIAppsApi(const int timeOut = 0);
    ~OAIAppsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_age_rating_declarations QList<QString> [optional]
    * @param[in]  fields_app_infos QList<QString> [optional]
    * @param[in]  fields_app_categories QList<QString> [optional]
    * @param[in]  fields_app_info_localizations QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appsAppInfosGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_age_rating_declarations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_infos = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_info_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter_app_store_state QList<QString> [optional]
    * @param[in]  filter_platform QList<QString> [optional]
    * @param[in]  filter_version_string QList<QString> [optional]
    * @param[in]  filter_id QList<QString> [optional]
    * @param[in]  fields_idfa_declarations QList<QString> [optional]
    * @param[in]  fields_app_store_version_localizations QList<QString> [optional]
    * @param[in]  fields_routing_app_coverages QList<QString> [optional]
    * @param[in]  fields_app_store_version_phased_releases QList<QString> [optional]
    * @param[in]  fields_age_rating_declarations QList<QString> [optional]
    * @param[in]  fields_app_store_review_details QList<QString> [optional]
    * @param[in]  fields_app_store_versions QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  fields_app_store_version_submissions QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appsAppStoreVersionsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &filter_app_store_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_platform = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_version_string = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_idfa_declarations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_routing_app_coverages = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_phased_releases = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_age_rating_declarations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_review_details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_submissions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_territories QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void appsAvailableTerritoriesGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_territories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_app_localizations QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void appsBetaAppLocalizationsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_app_review_details QList<QString> [optional]
    */
    virtual void appsBetaAppReviewDetailGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_review_details = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void appsBetaGroupsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_license_agreements QList<QString> [optional]
    */
    virtual void appsBetaLicenseAgreementGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_license_agreements = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_app_beta_testers_linkages_request OAIAppBetaTestersLinkagesRequest [required]
    */
    virtual void appsBetaTestersDeleteToManyRelationship(const QString &id, const OAIAppBetaTestersLinkagesRequest &oai_app_beta_testers_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void appsBuildsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_end_user_license_agreements QList<QString> [optional]
    */
    virtual void appsEndUserLicenseAgreementGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_end_user_license_agreements = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter_platform QList<QString> [optional]
    * @param[in]  filter_version_string QList<QString> [optional]
    * @param[in]  filter_id QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_game_center_enabled_versions QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appsGameCenterEnabledVersionsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &filter_platform = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_version_string = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_game_center_enabled_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  filter_app_store_versions_app_store_state QList<QString> [optional]
    * @param[in]  filter_app_store_versions_platform QList<QString> [optional]
    * @param[in]  filter_bundle_id QList<QString> [optional]
    * @param[in]  filter_name QList<QString> [optional]
    * @param[in]  filter_sku QList<QString> [optional]
    * @param[in]  filter_app_store_versions QList<QString> [optional]
    * @param[in]  filter_id QList<QString> [optional]
    * @param[in]  exists_game_center_enabled_versions QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_beta_groups QList<QString> [optional]
    * @param[in]  fields_perf_power_metrics QList<QString> [optional]
    * @param[in]  fields_app_infos QList<QString> [optional]
    * @param[in]  fields_app_pre_orders QList<QString> [optional]
    * @param[in]  fields_pre_release_versions QList<QString> [optional]
    * @param[in]  fields_app_prices QList<QString> [optional]
    * @param[in]  fields_in_app_purchases QList<QString> [optional]
    * @param[in]  fields_beta_app_review_details QList<QString> [optional]
    * @param[in]  fields_territories QList<QString> [optional]
    * @param[in]  fields_game_center_enabled_versions QList<QString> [optional]
    * @param[in]  fields_app_store_versions QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  fields_beta_app_localizations QList<QString> [optional]
    * @param[in]  fields_beta_license_agreements QList<QString> [optional]
    * @param[in]  fields_end_user_license_agreements QList<QString> [optional]
    * @param[in]  limit_app_infos qint32 [optional]
    * @param[in]  limit_app_store_versions qint32 [optional]
    * @param[in]  limit_available_territories qint32 [optional]
    * @param[in]  limit_beta_app_localizations qint32 [optional]
    * @param[in]  limit_beta_groups qint32 [optional]
    * @param[in]  limit_builds qint32 [optional]
    * @param[in]  limit_game_center_enabled_versions qint32 [optional]
    * @param[in]  limit_in_app_purchases qint32 [optional]
    * @param[in]  limit_pre_release_versions qint32 [optional]
    * @param[in]  limit_prices qint32 [optional]
    */
    virtual void appsGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_app_store_versions_app_store_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_app_store_versions_platform = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_bundle_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_sku = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_app_store_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exists_game_center_enabled_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_perf_power_metrics = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_infos = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_pre_orders = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_pre_release_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_prices = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_in_app_purchases = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_review_details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_territories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_game_center_enabled_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_license_agreements = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_end_user_license_agreements = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_app_infos = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_app_store_versions = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_available_territories = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_beta_app_localizations = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_beta_groups = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_builds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_game_center_enabled_versions = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_in_app_purchases = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_pre_release_versions = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_prices = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_beta_groups QList<QString> [optional]
    * @param[in]  fields_perf_power_metrics QList<QString> [optional]
    * @param[in]  fields_app_infos QList<QString> [optional]
    * @param[in]  fields_app_pre_orders QList<QString> [optional]
    * @param[in]  fields_pre_release_versions QList<QString> [optional]
    * @param[in]  fields_app_prices QList<QString> [optional]
    * @param[in]  fields_in_app_purchases QList<QString> [optional]
    * @param[in]  fields_beta_app_review_details QList<QString> [optional]
    * @param[in]  fields_territories QList<QString> [optional]
    * @param[in]  fields_game_center_enabled_versions QList<QString> [optional]
    * @param[in]  fields_app_store_versions QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  fields_beta_app_localizations QList<QString> [optional]
    * @param[in]  fields_beta_license_agreements QList<QString> [optional]
    * @param[in]  fields_end_user_license_agreements QList<QString> [optional]
    * @param[in]  limit_app_infos qint32 [optional]
    * @param[in]  limit_app_store_versions qint32 [optional]
    * @param[in]  limit_available_territories qint32 [optional]
    * @param[in]  limit_beta_app_localizations qint32 [optional]
    * @param[in]  limit_beta_groups qint32 [optional]
    * @param[in]  limit_builds qint32 [optional]
    * @param[in]  limit_game_center_enabled_versions qint32 [optional]
    * @param[in]  limit_in_app_purchases qint32 [optional]
    * @param[in]  limit_pre_release_versions qint32 [optional]
    * @param[in]  limit_prices qint32 [optional]
    */
    virtual void appsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_perf_power_metrics = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_infos = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_pre_orders = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_pre_release_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_prices = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_in_app_purchases = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_review_details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_territories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_game_center_enabled_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_license_agreements = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_end_user_license_agreements = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_app_infos = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_app_store_versions = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_available_territories = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_beta_app_localizations = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_beta_groups = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_builds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_game_center_enabled_versions = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_in_app_purchases = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_pre_release_versions = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_prices = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter_in_app_purchase_type QList<QString> [optional]
    * @param[in]  filter_can_be_submitted QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_in_app_purchases QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appsInAppPurchasesGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &filter_in_app_purchase_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_can_be_submitted = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_in_app_purchases = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter_device_type QList<QString> [optional]
    * @param[in]  filter_metric_type QList<QString> [optional]
    * @param[in]  filter_platform QList<QString> [optional]
    */
    virtual void appsPerfPowerMetricsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &filter_device_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_metric_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_platform = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_pre_orders QList<QString> [optional]
    */
    virtual void appsPreOrderGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_pre_orders = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_pre_release_versions QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void appsPreReleaseVersionsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_pre_release_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_prices QList<QString> [optional]
    * @param[in]  fields_app_price_tiers QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appsPricesGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_prices = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_price_tiers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_app_update_request OAIAppUpdateRequest [required]
    */
    virtual void appsUpdateInstance(const QString &id, const OAIAppUpdateRequest &oai_app_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appsAppInfosGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appsAppStoreVersionsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appsAvailableTerritoriesGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appsBetaAppLocalizationsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appsBetaAppReviewDetailGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appsBetaGroupsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appsBetaLicenseAgreementGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appsBetaTestersDeleteToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void appsBuildsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appsEndUserLicenseAgreementGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appsGameCenterEnabledVersionsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void appsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void appsInAppPurchasesGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appsPerfPowerMetricsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appsPreOrderGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appsPreReleaseVersionsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appsPricesGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appsUpdateInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appsAppInfosGetToManyRelatedSignal(OAIAppInfosResponse summary);
    void appsAppStoreVersionsGetToManyRelatedSignal(OAIAppStoreVersionsResponse summary);
    void appsAvailableTerritoriesGetToManyRelatedSignal(OAITerritoriesResponse summary);
    void appsBetaAppLocalizationsGetToManyRelatedSignal(OAIBetaAppLocalizationsResponse summary);
    void appsBetaAppReviewDetailGetToOneRelatedSignal(OAIBetaAppReviewDetailResponse summary);
    void appsBetaGroupsGetToManyRelatedSignal(OAIBetaGroupsResponse summary);
    void appsBetaLicenseAgreementGetToOneRelatedSignal(OAIBetaLicenseAgreementResponse summary);
    void appsBetaTestersDeleteToManyRelationshipSignal();
    void appsBuildsGetToManyRelatedSignal(OAIBuildsResponse summary);
    void appsEndUserLicenseAgreementGetToOneRelatedSignal(OAIEndUserLicenseAgreementResponse summary);
    void appsGameCenterEnabledVersionsGetToManyRelatedSignal(OAIGameCenterEnabledVersionsResponse summary);
    void appsGetCollectionSignal(OAIAppsResponse summary);
    void appsGetInstanceSignal(OAIAppResponse summary);
    void appsInAppPurchasesGetToManyRelatedSignal(OAIInAppPurchasesResponse summary);
    void appsPerfPowerMetricsGetToManyRelatedSignal(OAIPerfPowerMetricsResponse summary);
    void appsPreOrderGetToOneRelatedSignal(OAIAppPreOrderResponse summary);
    void appsPreReleaseVersionsGetToManyRelatedSignal(OAIPreReleaseVersionsResponse summary);
    void appsPricesGetToManyRelatedSignal(OAIAppPricesResponse summary);
    void appsUpdateInstanceSignal(OAIAppResponse summary);


    void appsAppInfosGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppInfosResponse summary);
    void appsAppStoreVersionsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionsResponse summary);
    void appsAvailableTerritoriesGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAITerritoriesResponse summary);
    void appsBetaAppLocalizationsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppLocalizationsResponse summary);
    void appsBetaAppReviewDetailGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppReviewDetailResponse summary);
    void appsBetaGroupsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBetaGroupsResponse summary);
    void appsBetaLicenseAgreementGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBetaLicenseAgreementResponse summary);
    void appsBetaTestersDeleteToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void appsBuildsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBuildsResponse summary);
    void appsEndUserLicenseAgreementGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIEndUserLicenseAgreementResponse summary);
    void appsGameCenterEnabledVersionsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIGameCenterEnabledVersionsResponse summary);
    void appsGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIAppsResponse summary);
    void appsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppResponse summary);
    void appsInAppPurchasesGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIInAppPurchasesResponse summary);
    void appsPerfPowerMetricsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIPerfPowerMetricsResponse summary);
    void appsPreOrderGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppPreOrderResponse summary);
    void appsPreReleaseVersionsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIPreReleaseVersionsResponse summary);
    void appsPricesGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppPricesResponse summary);
    void appsUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppResponse summary);

    Q_DECL_DEPRECATED_X("Use appsAppInfosGetToManyRelatedSignalError() instead")
    void appsAppInfosGetToManyRelatedSignalE(OAIAppInfosResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppInfosGetToManyRelatedSignalError(OAIAppInfosResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppStoreVersionsGetToManyRelatedSignalError() instead")
    void appsAppStoreVersionsGetToManyRelatedSignalE(OAIAppStoreVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppStoreVersionsGetToManyRelatedSignalError(OAIAppStoreVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAvailableTerritoriesGetToManyRelatedSignalError() instead")
    void appsAvailableTerritoriesGetToManyRelatedSignalE(OAITerritoriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAvailableTerritoriesGetToManyRelatedSignalError(OAITerritoriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBetaAppLocalizationsGetToManyRelatedSignalError() instead")
    void appsBetaAppLocalizationsGetToManyRelatedSignalE(OAIBetaAppLocalizationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBetaAppLocalizationsGetToManyRelatedSignalError(OAIBetaAppLocalizationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBetaAppReviewDetailGetToOneRelatedSignalError() instead")
    void appsBetaAppReviewDetailGetToOneRelatedSignalE(OAIBetaAppReviewDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBetaAppReviewDetailGetToOneRelatedSignalError(OAIBetaAppReviewDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBetaGroupsGetToManyRelatedSignalError() instead")
    void appsBetaGroupsGetToManyRelatedSignalE(OAIBetaGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBetaGroupsGetToManyRelatedSignalError(OAIBetaGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBetaLicenseAgreementGetToOneRelatedSignalError() instead")
    void appsBetaLicenseAgreementGetToOneRelatedSignalE(OAIBetaLicenseAgreementResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBetaLicenseAgreementGetToOneRelatedSignalError(OAIBetaLicenseAgreementResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBetaTestersDeleteToManyRelationshipSignalError() instead")
    void appsBetaTestersDeleteToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsBetaTestersDeleteToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBuildsGetToManyRelatedSignalError() instead")
    void appsBuildsGetToManyRelatedSignalE(OAIBuildsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBuildsGetToManyRelatedSignalError(OAIBuildsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsEndUserLicenseAgreementGetToOneRelatedSignalError() instead")
    void appsEndUserLicenseAgreementGetToOneRelatedSignalE(OAIEndUserLicenseAgreementResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsEndUserLicenseAgreementGetToOneRelatedSignalError(OAIEndUserLicenseAgreementResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGameCenterEnabledVersionsGetToManyRelatedSignalError() instead")
    void appsGameCenterEnabledVersionsGetToManyRelatedSignalE(OAIGameCenterEnabledVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGameCenterEnabledVersionsGetToManyRelatedSignalError(OAIGameCenterEnabledVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetCollectionSignalError() instead")
    void appsGetCollectionSignalE(OAIAppsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetCollectionSignalError(OAIAppsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetInstanceSignalError() instead")
    void appsGetInstanceSignalE(OAIAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetInstanceSignalError(OAIAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsInAppPurchasesGetToManyRelatedSignalError() instead")
    void appsInAppPurchasesGetToManyRelatedSignalE(OAIInAppPurchasesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsInAppPurchasesGetToManyRelatedSignalError(OAIInAppPurchasesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPerfPowerMetricsGetToManyRelatedSignalError() instead")
    void appsPerfPowerMetricsGetToManyRelatedSignalE(OAIPerfPowerMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPerfPowerMetricsGetToManyRelatedSignalError(OAIPerfPowerMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPreOrderGetToOneRelatedSignalError() instead")
    void appsPreOrderGetToOneRelatedSignalE(OAIAppPreOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPreOrderGetToOneRelatedSignalError(OAIAppPreOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPreReleaseVersionsGetToManyRelatedSignalError() instead")
    void appsPreReleaseVersionsGetToManyRelatedSignalE(OAIPreReleaseVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPreReleaseVersionsGetToManyRelatedSignalError(OAIPreReleaseVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPricesGetToManyRelatedSignalError() instead")
    void appsPricesGetToManyRelatedSignalE(OAIAppPricesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPricesGetToManyRelatedSignalError(OAIAppPricesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateInstanceSignalError() instead")
    void appsUpdateInstanceSignalE(OAIAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateInstanceSignalError(OAIAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appsAppInfosGetToManyRelatedSignalErrorFull() instead")
    void appsAppInfosGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppInfosGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppStoreVersionsGetToManyRelatedSignalErrorFull() instead")
    void appsAppStoreVersionsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppStoreVersionsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAvailableTerritoriesGetToManyRelatedSignalErrorFull() instead")
    void appsAvailableTerritoriesGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAvailableTerritoriesGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBetaAppLocalizationsGetToManyRelatedSignalErrorFull() instead")
    void appsBetaAppLocalizationsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBetaAppLocalizationsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBetaAppReviewDetailGetToOneRelatedSignalErrorFull() instead")
    void appsBetaAppReviewDetailGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBetaAppReviewDetailGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBetaGroupsGetToManyRelatedSignalErrorFull() instead")
    void appsBetaGroupsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBetaGroupsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBetaLicenseAgreementGetToOneRelatedSignalErrorFull() instead")
    void appsBetaLicenseAgreementGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBetaLicenseAgreementGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBetaTestersDeleteToManyRelationshipSignalErrorFull() instead")
    void appsBetaTestersDeleteToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBetaTestersDeleteToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBuildsGetToManyRelatedSignalErrorFull() instead")
    void appsBuildsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBuildsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsEndUserLicenseAgreementGetToOneRelatedSignalErrorFull() instead")
    void appsEndUserLicenseAgreementGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsEndUserLicenseAgreementGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGameCenterEnabledVersionsGetToManyRelatedSignalErrorFull() instead")
    void appsGameCenterEnabledVersionsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGameCenterEnabledVersionsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetCollectionSignalErrorFull() instead")
    void appsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetInstanceSignalErrorFull() instead")
    void appsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsInAppPurchasesGetToManyRelatedSignalErrorFull() instead")
    void appsInAppPurchasesGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsInAppPurchasesGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPerfPowerMetricsGetToManyRelatedSignalErrorFull() instead")
    void appsPerfPowerMetricsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPerfPowerMetricsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPreOrderGetToOneRelatedSignalErrorFull() instead")
    void appsPreOrderGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPreOrderGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPreReleaseVersionsGetToManyRelatedSignalErrorFull() instead")
    void appsPreReleaseVersionsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPreReleaseVersionsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPricesGetToManyRelatedSignalErrorFull() instead")
    void appsPricesGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPricesGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateInstanceSignalErrorFull() instead")
    void appsUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
