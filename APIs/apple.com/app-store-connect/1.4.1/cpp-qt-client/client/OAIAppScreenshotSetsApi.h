/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppScreenshotSetsApi_H
#define OAI_OAIAppScreenshotSetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppScreenshotSetAppScreenshotsLinkagesRequest.h"
#include "OAIAppScreenshotSetAppScreenshotsLinkagesResponse.h"
#include "OAIAppScreenshotSetCreateRequest.h"
#include "OAIAppScreenshotSetResponse.h"
#include "OAIAppScreenshotsResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppScreenshotSetsApi : public QObject {
    Q_OBJECT

public:
    OAIAppScreenshotSetsApi(const int timeOut = 0);
    ~OAIAppScreenshotSetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_screenshot_sets QList<QString> [optional]
    * @param[in]  fields_app_screenshots QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appScreenshotSetsAppScreenshotsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_screenshot_sets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_screenshots = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void appScreenshotSetsAppScreenshotsGetToManyRelationship(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_app_screenshot_set_app_screenshots_linkages_request OAIAppScreenshotSetAppScreenshotsLinkagesRequest [required]
    */
    virtual void appScreenshotSetsAppScreenshotsReplaceToManyRelationship(const QString &id, const OAIAppScreenshotSetAppScreenshotsLinkagesRequest &oai_app_screenshot_set_app_screenshots_linkages_request);

    /**
    * @param[in]  oai_app_screenshot_set_create_request OAIAppScreenshotSetCreateRequest [required]
    */
    virtual void appScreenshotSetsCreateInstance(const OAIAppScreenshotSetCreateRequest &oai_app_screenshot_set_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void appScreenshotSetsDeleteInstance(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_screenshot_sets QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_app_screenshots QList<QString> [optional]
    * @param[in]  limit_app_screenshots qint32 [optional]
    */
    virtual void appScreenshotSetsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_screenshot_sets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_screenshots = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_app_screenshots = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appScreenshotSetsAppScreenshotsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appScreenshotSetsAppScreenshotsGetToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void appScreenshotSetsAppScreenshotsReplaceToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void appScreenshotSetsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void appScreenshotSetsDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void appScreenshotSetsGetInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appScreenshotSetsAppScreenshotsGetToManyRelatedSignal(OAIAppScreenshotsResponse summary);
    void appScreenshotSetsAppScreenshotsGetToManyRelationshipSignal(OAIAppScreenshotSetAppScreenshotsLinkagesResponse summary);
    void appScreenshotSetsAppScreenshotsReplaceToManyRelationshipSignal();
    void appScreenshotSetsCreateInstanceSignal(OAIAppScreenshotSetResponse summary);
    void appScreenshotSetsDeleteInstanceSignal();
    void appScreenshotSetsGetInstanceSignal(OAIAppScreenshotSetResponse summary);


    void appScreenshotSetsAppScreenshotsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppScreenshotsResponse summary);
    void appScreenshotSetsAppScreenshotsGetToManyRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIAppScreenshotSetAppScreenshotsLinkagesResponse summary);
    void appScreenshotSetsAppScreenshotsReplaceToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void appScreenshotSetsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppScreenshotSetResponse summary);
    void appScreenshotSetsDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void appScreenshotSetsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppScreenshotSetResponse summary);

    Q_DECL_DEPRECATED_X("Use appScreenshotSetsAppScreenshotsGetToManyRelatedSignalError() instead")
    void appScreenshotSetsAppScreenshotsGetToManyRelatedSignalE(OAIAppScreenshotsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsAppScreenshotsGetToManyRelatedSignalError(OAIAppScreenshotsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appScreenshotSetsAppScreenshotsGetToManyRelationshipSignalError() instead")
    void appScreenshotSetsAppScreenshotsGetToManyRelationshipSignalE(OAIAppScreenshotSetAppScreenshotsLinkagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsAppScreenshotsGetToManyRelationshipSignalError(OAIAppScreenshotSetAppScreenshotsLinkagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appScreenshotSetsAppScreenshotsReplaceToManyRelationshipSignalError() instead")
    void appScreenshotSetsAppScreenshotsReplaceToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsAppScreenshotsReplaceToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appScreenshotSetsCreateInstanceSignalError() instead")
    void appScreenshotSetsCreateInstanceSignalE(OAIAppScreenshotSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsCreateInstanceSignalError(OAIAppScreenshotSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appScreenshotSetsDeleteInstanceSignalError() instead")
    void appScreenshotSetsDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appScreenshotSetsGetInstanceSignalError() instead")
    void appScreenshotSetsGetInstanceSignalE(OAIAppScreenshotSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsGetInstanceSignalError(OAIAppScreenshotSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appScreenshotSetsAppScreenshotsGetToManyRelatedSignalErrorFull() instead")
    void appScreenshotSetsAppScreenshotsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsAppScreenshotsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appScreenshotSetsAppScreenshotsGetToManyRelationshipSignalErrorFull() instead")
    void appScreenshotSetsAppScreenshotsGetToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsAppScreenshotsGetToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appScreenshotSetsAppScreenshotsReplaceToManyRelationshipSignalErrorFull() instead")
    void appScreenshotSetsAppScreenshotsReplaceToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsAppScreenshotsReplaceToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appScreenshotSetsCreateInstanceSignalErrorFull() instead")
    void appScreenshotSetsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appScreenshotSetsDeleteInstanceSignalErrorFull() instead")
    void appScreenshotSetsDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appScreenshotSetsGetInstanceSignalErrorFull() instead")
    void appScreenshotSetsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appScreenshotSetsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
