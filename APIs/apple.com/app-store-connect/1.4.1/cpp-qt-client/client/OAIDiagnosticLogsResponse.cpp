/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosticLogsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosticLogsResponse::OAIDiagnosticLogsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosticLogsResponse::OAIDiagnosticLogsResponse() {
    this->initializeModel();
}

OAIDiagnosticLogsResponse::~OAIDiagnosticLogsResponse() {}

void OAIDiagnosticLogsResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;
}

void OAIDiagnosticLogsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosticLogsResponse::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;
}

QString OAIDiagnosticLogsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosticLogsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    return obj;
}

QList<OAIDiagnosticLog> OAIDiagnosticLogsResponse::getData() const {
    return m_data;
}
void OAIDiagnosticLogsResponse::setData(const QList<OAIDiagnosticLog> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIDiagnosticLogsResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDiagnosticLogsResponse::is_data_Valid() const{
    return m_data_isValid;
}

OAIPagedDocumentLinks OAIDiagnosticLogsResponse::getLinks() const {
    return m_links;
}
void OAIDiagnosticLogsResponse::setLinks(const OAIPagedDocumentLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIDiagnosticLogsResponse::is_links_Set() const{
    return m_links_isSet;
}

bool OAIDiagnosticLogsResponse::is_links_Valid() const{
    return m_links_isValid;
}

OAIPagingInformation OAIDiagnosticLogsResponse::getMeta() const {
    return m_meta;
}
void OAIDiagnosticLogsResponse::setMeta(const OAIPagingInformation &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIDiagnosticLogsResponse::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIDiagnosticLogsResponse::is_meta_Valid() const{
    return m_meta_isValid;
}

bool OAIDiagnosticLogsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosticLogsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_links_isValid && true;
}

} // namespace OpenAPI
