/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfile_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfile_attributes::OAIProfile_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfile_attributes::OAIProfile_attributes() {
    this->initializeModel();
}

OAIProfile_attributes::~OAIProfile_attributes() {}

void OAIProfile_attributes::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_profile_content_isSet = false;
    m_profile_content_isValid = false;

    m_profile_state_isSet = false;
    m_profile_state_isValid = false;

    m_profile_type_isSet = false;
    m_profile_type_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIProfile_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfile_attributes::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_profile_content_isValid = ::OpenAPI::fromJsonValue(m_profile_content, json[QString("profileContent")]);
    m_profile_content_isSet = !json[QString("profileContent")].isNull() && m_profile_content_isValid;

    m_profile_state_isValid = ::OpenAPI::fromJsonValue(m_profile_state, json[QString("profileState")]);
    m_profile_state_isSet = !json[QString("profileState")].isNull() && m_profile_state_isValid;

    m_profile_type_isValid = ::OpenAPI::fromJsonValue(m_profile_type, json[QString("profileType")]);
    m_profile_type_isSet = !json[QString("profileType")].isNull() && m_profile_type_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIProfile_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfile_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_profile_content_isSet) {
        obj.insert(QString("profileContent"), ::OpenAPI::toJsonValue(m_profile_content));
    }
    if (m_profile_state_isSet) {
        obj.insert(QString("profileState"), ::OpenAPI::toJsonValue(m_profile_state));
    }
    if (m_profile_type_isSet) {
        obj.insert(QString("profileType"), ::OpenAPI::toJsonValue(m_profile_type));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QDateTime OAIProfile_attributes::getCreatedDate() const {
    return m_created_date;
}
void OAIProfile_attributes::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIProfile_attributes::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIProfile_attributes::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QDateTime OAIProfile_attributes::getExpirationDate() const {
    return m_expiration_date;
}
void OAIProfile_attributes::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIProfile_attributes::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIProfile_attributes::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIProfile_attributes::getName() const {
    return m_name;
}
void OAIProfile_attributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProfile_attributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProfile_attributes::is_name_Valid() const{
    return m_name_isValid;
}

OAIBundleIdPlatform OAIProfile_attributes::getPlatform() const {
    return m_platform;
}
void OAIProfile_attributes::setPlatform(const OAIBundleIdPlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIProfile_attributes::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIProfile_attributes::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIProfile_attributes::getProfileContent() const {
    return m_profile_content;
}
void OAIProfile_attributes::setProfileContent(const QString &profile_content) {
    m_profile_content = profile_content;
    m_profile_content_isSet = true;
}

bool OAIProfile_attributes::is_profile_content_Set() const{
    return m_profile_content_isSet;
}

bool OAIProfile_attributes::is_profile_content_Valid() const{
    return m_profile_content_isValid;
}

QString OAIProfile_attributes::getProfileState() const {
    return m_profile_state;
}
void OAIProfile_attributes::setProfileState(const QString &profile_state) {
    m_profile_state = profile_state;
    m_profile_state_isSet = true;
}

bool OAIProfile_attributes::is_profile_state_Set() const{
    return m_profile_state_isSet;
}

bool OAIProfile_attributes::is_profile_state_Valid() const{
    return m_profile_state_isValid;
}

QString OAIProfile_attributes::getProfileType() const {
    return m_profile_type;
}
void OAIProfile_attributes::setProfileType(const QString &profile_type) {
    m_profile_type = profile_type;
    m_profile_type_isSet = true;
}

bool OAIProfile_attributes::is_profile_type_Set() const{
    return m_profile_type_isSet;
}

bool OAIProfile_attributes::is_profile_type_Valid() const{
    return m_profile_type_isValid;
}

QString OAIProfile_attributes::getUuid() const {
    return m_uuid;
}
void OAIProfile_attributes::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIProfile_attributes::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIProfile_attributes::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIProfile_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfile_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
