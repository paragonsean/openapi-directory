/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProfilesApi_H
#define OAI_OAIProfilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBundleIdResponse.h"
#include "OAICertificatesResponse.h"
#include "OAIDevicesResponse.h"
#include "OAIErrorResponse.h"
#include "OAIProfileCreateRequest.h"
#include "OAIProfileResponse.h"
#include "OAIProfilesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProfilesApi : public QObject {
    Q_OBJECT

public:
    OAIProfilesApi(const int timeOut = 0);
    ~OAIProfilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_bundle_ids QList<QString> [optional]
    */
    virtual void profilesBundleIdGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_bundle_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_certificates QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void profilesCertificatesGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_certificates = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_profile_create_request OAIProfileCreateRequest [required]
    */
    virtual void profilesCreateInstance(const OAIProfileCreateRequest &oai_profile_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void profilesDeleteInstance(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_devices QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void profilesDevicesGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_devices = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  filter_name QList<QString> [optional]
    * @param[in]  filter_profile_state QList<QString> [optional]
    * @param[in]  filter_profile_type QList<QString> [optional]
    * @param[in]  filter_id QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_profiles QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_certificates QList<QString> [optional]
    * @param[in]  fields_devices QList<QString> [optional]
    * @param[in]  fields_bundle_ids QList<QString> [optional]
    * @param[in]  limit_certificates qint32 [optional]
    * @param[in]  limit_devices qint32 [optional]
    */
    virtual void profilesGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_profile_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_profile_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_profiles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_certificates = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_devices = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_bundle_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_certificates = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_devices = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_profiles QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_certificates QList<QString> [optional]
    * @param[in]  fields_devices QList<QString> [optional]
    * @param[in]  fields_bundle_ids QList<QString> [optional]
    * @param[in]  limit_certificates qint32 [optional]
    * @param[in]  limit_devices qint32 [optional]
    */
    virtual void profilesGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_profiles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_certificates = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_devices = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_bundle_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_certificates = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_devices = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void profilesBundleIdGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void profilesCertificatesGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void profilesCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void profilesDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void profilesDevicesGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void profilesGetCollectionCallback(OAIHttpRequestWorker *worker);
    void profilesGetInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void profilesBundleIdGetToOneRelatedSignal(OAIBundleIdResponse summary);
    void profilesCertificatesGetToManyRelatedSignal(OAICertificatesResponse summary);
    void profilesCreateInstanceSignal(OAIProfileResponse summary);
    void profilesDeleteInstanceSignal();
    void profilesDevicesGetToManyRelatedSignal(OAIDevicesResponse summary);
    void profilesGetCollectionSignal(OAIProfilesResponse summary);
    void profilesGetInstanceSignal(OAIProfileResponse summary);


    void profilesBundleIdGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBundleIdResponse summary);
    void profilesCertificatesGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAICertificatesResponse summary);
    void profilesCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIProfileResponse summary);
    void profilesDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void profilesDevicesGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIDevicesResponse summary);
    void profilesGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIProfilesResponse summary);
    void profilesGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIProfileResponse summary);

    Q_DECL_DEPRECATED_X("Use profilesBundleIdGetToOneRelatedSignalError() instead")
    void profilesBundleIdGetToOneRelatedSignalE(OAIBundleIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesBundleIdGetToOneRelatedSignalError(OAIBundleIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesCertificatesGetToManyRelatedSignalError() instead")
    void profilesCertificatesGetToManyRelatedSignalE(OAICertificatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesCertificatesGetToManyRelatedSignalError(OAICertificatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesCreateInstanceSignalError() instead")
    void profilesCreateInstanceSignalE(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesCreateInstanceSignalError(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesDeleteInstanceSignalError() instead")
    void profilesDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void profilesDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesDevicesGetToManyRelatedSignalError() instead")
    void profilesDevicesGetToManyRelatedSignalE(OAIDevicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesDevicesGetToManyRelatedSignalError(OAIDevicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGetCollectionSignalError() instead")
    void profilesGetCollectionSignalE(OAIProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGetCollectionSignalError(OAIProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGetInstanceSignalError() instead")
    void profilesGetInstanceSignalE(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGetInstanceSignalError(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use profilesBundleIdGetToOneRelatedSignalErrorFull() instead")
    void profilesBundleIdGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesBundleIdGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesCertificatesGetToManyRelatedSignalErrorFull() instead")
    void profilesCertificatesGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesCertificatesGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesCreateInstanceSignalErrorFull() instead")
    void profilesCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesDeleteInstanceSignalErrorFull() instead")
    void profilesDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesDevicesGetToManyRelatedSignalErrorFull() instead")
    void profilesDevicesGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesDevicesGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGetCollectionSignalErrorFull() instead")
    void profilesGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGetInstanceSignalErrorFull() instead")
    void profilesGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
