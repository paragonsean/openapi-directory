/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICertificatesApi_H
#define OAI_OAICertificatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificateCreateRequest.h"
#include "OAICertificateResponse.h"
#include "OAICertificatesResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICertificatesApi : public QObject {
    Q_OBJECT

public:
    OAICertificatesApi(const int timeOut = 0);
    ~OAICertificatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_certificate_create_request OAICertificateCreateRequest [required]
    */
    virtual void certificatesCreateInstance(const OAICertificateCreateRequest &oai_certificate_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void certificatesDeleteInstance(const QString &id);

    /**
    * @param[in]  filter_certificate_type QList<QString> [optional]
    * @param[in]  filter_display_name QList<QString> [optional]
    * @param[in]  filter_serial_number QList<QString> [optional]
    * @param[in]  filter_id QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_certificates QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void certificatesGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_certificate_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_display_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_serial_number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_certificates = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_certificates QList<QString> [optional]
    */
    virtual void certificatesGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_certificates = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void certificatesCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void certificatesDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void certificatesGetCollectionCallback(OAIHttpRequestWorker *worker);
    void certificatesGetInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void certificatesCreateInstanceSignal(OAICertificateResponse summary);
    void certificatesDeleteInstanceSignal();
    void certificatesGetCollectionSignal(OAICertificatesResponse summary);
    void certificatesGetInstanceSignal(OAICertificateResponse summary);


    void certificatesCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAICertificateResponse summary);
    void certificatesDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void certificatesGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAICertificatesResponse summary);
    void certificatesGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAICertificateResponse summary);

    Q_DECL_DEPRECATED_X("Use certificatesCreateInstanceSignalError() instead")
    void certificatesCreateInstanceSignalE(OAICertificateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesCreateInstanceSignalError(OAICertificateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesDeleteInstanceSignalError() instead")
    void certificatesDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetCollectionSignalError() instead")
    void certificatesGetCollectionSignalE(OAICertificatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetCollectionSignalError(OAICertificatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetInstanceSignalError() instead")
    void certificatesGetInstanceSignalE(OAICertificateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetInstanceSignalError(OAICertificateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use certificatesCreateInstanceSignalErrorFull() instead")
    void certificatesCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesDeleteInstanceSignalErrorFull() instead")
    void certificatesDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetCollectionSignalErrorFull() instead")
    void certificatesGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetInstanceSignalErrorFull() instead")
    void certificatesGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
