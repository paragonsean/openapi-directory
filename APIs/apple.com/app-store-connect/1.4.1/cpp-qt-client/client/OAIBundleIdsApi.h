/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBundleIdsApi_H
#define OAI_OAIBundleIdsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppResponse.h"
#include "OAIBundleIdCapabilitiesResponse.h"
#include "OAIBundleIdCreateRequest.h"
#include "OAIBundleIdResponse.h"
#include "OAIBundleIdUpdateRequest.h"
#include "OAIBundleIdsResponse.h"
#include "OAIErrorResponse.h"
#include "OAIProfilesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBundleIdsApi : public QObject {
    Q_OBJECT

public:
    OAIBundleIdsApi(const int timeOut = 0);
    ~OAIBundleIdsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void bundleIdsAppGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_bundle_id_capabilities QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void bundleIdsBundleIdCapabilitiesGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_bundle_id_capabilities = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_bundle_id_create_request OAIBundleIdCreateRequest [required]
    */
    virtual void bundleIdsCreateInstance(const OAIBundleIdCreateRequest &oai_bundle_id_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void bundleIdsDeleteInstance(const QString &id);

    /**
    * @param[in]  filter_identifier QList<QString> [optional]
    * @param[in]  filter_name QList<QString> [optional]
    * @param[in]  filter_platform QList<QString> [optional]
    * @param[in]  filter_seed_id QList<QString> [optional]
    * @param[in]  filter_id QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_bundle_ids QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_bundle_id_capabilities QList<QString> [optional]
    * @param[in]  fields_profiles QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_bundle_id_capabilities qint32 [optional]
    * @param[in]  limit_profiles qint32 [optional]
    */
    virtual void bundleIdsGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_identifier = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_platform = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_seed_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_bundle_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_bundle_id_capabilities = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_profiles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_bundle_id_capabilities = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_profiles = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_bundle_ids QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_bundle_id_capabilities QList<QString> [optional]
    * @param[in]  fields_profiles QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_bundle_id_capabilities qint32 [optional]
    * @param[in]  limit_profiles qint32 [optional]
    */
    virtual void bundleIdsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_bundle_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_bundle_id_capabilities = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_profiles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_bundle_id_capabilities = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_profiles = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_profiles QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void bundleIdsProfilesGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_profiles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_bundle_id_update_request OAIBundleIdUpdateRequest [required]
    */
    virtual void bundleIdsUpdateInstance(const QString &id, const OAIBundleIdUpdateRequest &oai_bundle_id_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bundleIdsAppGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void bundleIdsBundleIdCapabilitiesGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void bundleIdsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void bundleIdsDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void bundleIdsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void bundleIdsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void bundleIdsProfilesGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void bundleIdsUpdateInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bundleIdsAppGetToOneRelatedSignal(OAIAppResponse summary);
    void bundleIdsBundleIdCapabilitiesGetToManyRelatedSignal(OAIBundleIdCapabilitiesResponse summary);
    void bundleIdsCreateInstanceSignal(OAIBundleIdResponse summary);
    void bundleIdsDeleteInstanceSignal();
    void bundleIdsGetCollectionSignal(OAIBundleIdsResponse summary);
    void bundleIdsGetInstanceSignal(OAIBundleIdResponse summary);
    void bundleIdsProfilesGetToManyRelatedSignal(OAIProfilesResponse summary);
    void bundleIdsUpdateInstanceSignal(OAIBundleIdResponse summary);


    void bundleIdsAppGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppResponse summary);
    void bundleIdsBundleIdCapabilitiesGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBundleIdCapabilitiesResponse summary);
    void bundleIdsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBundleIdResponse summary);
    void bundleIdsDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void bundleIdsGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIBundleIdsResponse summary);
    void bundleIdsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBundleIdResponse summary);
    void bundleIdsProfilesGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIProfilesResponse summary);
    void bundleIdsUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBundleIdResponse summary);

    Q_DECL_DEPRECATED_X("Use bundleIdsAppGetToOneRelatedSignalError() instead")
    void bundleIdsAppGetToOneRelatedSignalE(OAIAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsAppGetToOneRelatedSignalError(OAIAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsBundleIdCapabilitiesGetToManyRelatedSignalError() instead")
    void bundleIdsBundleIdCapabilitiesGetToManyRelatedSignalE(OAIBundleIdCapabilitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsBundleIdCapabilitiesGetToManyRelatedSignalError(OAIBundleIdCapabilitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsCreateInstanceSignalError() instead")
    void bundleIdsCreateInstanceSignalE(OAIBundleIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsCreateInstanceSignalError(OAIBundleIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsDeleteInstanceSignalError() instead")
    void bundleIdsDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsGetCollectionSignalError() instead")
    void bundleIdsGetCollectionSignalE(OAIBundleIdsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsGetCollectionSignalError(OAIBundleIdsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsGetInstanceSignalError() instead")
    void bundleIdsGetInstanceSignalE(OAIBundleIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsGetInstanceSignalError(OAIBundleIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsProfilesGetToManyRelatedSignalError() instead")
    void bundleIdsProfilesGetToManyRelatedSignalE(OAIProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsProfilesGetToManyRelatedSignalError(OAIProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsUpdateInstanceSignalError() instead")
    void bundleIdsUpdateInstanceSignalE(OAIBundleIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsUpdateInstanceSignalError(OAIBundleIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bundleIdsAppGetToOneRelatedSignalErrorFull() instead")
    void bundleIdsAppGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsAppGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsBundleIdCapabilitiesGetToManyRelatedSignalErrorFull() instead")
    void bundleIdsBundleIdCapabilitiesGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsBundleIdCapabilitiesGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsCreateInstanceSignalErrorFull() instead")
    void bundleIdsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsDeleteInstanceSignalErrorFull() instead")
    void bundleIdsDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsGetCollectionSignalErrorFull() instead")
    void bundleIdsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsGetInstanceSignalErrorFull() instead")
    void bundleIdsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsProfilesGetToManyRelatedSignalErrorFull() instead")
    void bundleIdsProfilesGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsProfilesGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundleIdsUpdateInstanceSignalErrorFull() instead")
    void bundleIdsUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundleIdsUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
