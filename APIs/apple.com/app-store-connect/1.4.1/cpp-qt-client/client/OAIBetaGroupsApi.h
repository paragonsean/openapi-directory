/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBetaGroupsApi_H
#define OAI_OAIBetaGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppResponse.h"
#include "OAIBetaGroupBetaTestersLinkagesRequest.h"
#include "OAIBetaGroupBetaTestersLinkagesResponse.h"
#include "OAIBetaGroupBuildsLinkagesRequest.h"
#include "OAIBetaGroupBuildsLinkagesResponse.h"
#include "OAIBetaGroupCreateRequest.h"
#include "OAIBetaGroupResponse.h"
#include "OAIBetaGroupUpdateRequest.h"
#include "OAIBetaGroupsResponse.h"
#include "OAIBetaTestersResponse.h"
#include "OAIBuildsResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBetaGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIBetaGroupsApi(const int timeOut = 0);
    ~OAIBetaGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void betaGroupsAppGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_group_beta_testers_linkages_request OAIBetaGroupBetaTestersLinkagesRequest [required]
    */
    virtual void betaGroupsBetaTestersCreateToManyRelationship(const QString &id, const OAIBetaGroupBetaTestersLinkagesRequest &oai_beta_group_beta_testers_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_group_beta_testers_linkages_request OAIBetaGroupBetaTestersLinkagesRequest [required]
    */
    virtual void betaGroupsBetaTestersDeleteToManyRelationship(const QString &id, const OAIBetaGroupBetaTestersLinkagesRequest &oai_beta_group_beta_testers_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_testers QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void betaGroupsBetaTestersGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_testers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void betaGroupsBetaTestersGetToManyRelationship(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_group_builds_linkages_request OAIBetaGroupBuildsLinkagesRequest [required]
    */
    virtual void betaGroupsBuildsCreateToManyRelationship(const QString &id, const OAIBetaGroupBuildsLinkagesRequest &oai_beta_group_builds_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_group_builds_linkages_request OAIBetaGroupBuildsLinkagesRequest [required]
    */
    virtual void betaGroupsBuildsDeleteToManyRelationship(const QString &id, const OAIBetaGroupBuildsLinkagesRequest &oai_beta_group_builds_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void betaGroupsBuildsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void betaGroupsBuildsGetToManyRelationship(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_beta_group_create_request OAIBetaGroupCreateRequest [required]
    */
    virtual void betaGroupsCreateInstance(const OAIBetaGroupCreateRequest &oai_beta_group_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void betaGroupsDeleteInstance(const QString &id);

    /**
    * @param[in]  filter_is_internal_group QList<QString> [optional]
    * @param[in]  filter_name QList<QString> [optional]
    * @param[in]  filter_public_link QList<QString> [optional]
    * @param[in]  filter_public_link_enabled QList<QString> [optional]
    * @param[in]  filter_public_link_limit_enabled QList<QString> [optional]
    * @param[in]  filter_app QList<QString> [optional]
    * @param[in]  filter_builds QList<QString> [optional]
    * @param[in]  filter_id QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_beta_groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  fields_beta_testers QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_beta_testers qint32 [optional]
    * @param[in]  limit_builds qint32 [optional]
    */
    virtual void betaGroupsGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_is_internal_group = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_public_link = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_public_link_enabled = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_public_link_limit_enabled = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_app = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_testers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_beta_testers = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_builds = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_groups QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  fields_beta_testers QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_beta_testers qint32 [optional]
    * @param[in]  limit_builds qint32 [optional]
    */
    virtual void betaGroupsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_testers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_beta_testers = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_builds = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_group_update_request OAIBetaGroupUpdateRequest [required]
    */
    virtual void betaGroupsUpdateInstance(const QString &id, const OAIBetaGroupUpdateRequest &oai_beta_group_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void betaGroupsAppGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void betaGroupsBetaTestersCreateToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaGroupsBetaTestersDeleteToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaGroupsBetaTestersGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void betaGroupsBetaTestersGetToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaGroupsBuildsCreateToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaGroupsBuildsDeleteToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaGroupsBuildsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void betaGroupsBuildsGetToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaGroupsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void betaGroupsDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void betaGroupsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void betaGroupsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void betaGroupsUpdateInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void betaGroupsAppGetToOneRelatedSignal(OAIAppResponse summary);
    void betaGroupsBetaTestersCreateToManyRelationshipSignal();
    void betaGroupsBetaTestersDeleteToManyRelationshipSignal();
    void betaGroupsBetaTestersGetToManyRelatedSignal(OAIBetaTestersResponse summary);
    void betaGroupsBetaTestersGetToManyRelationshipSignal(OAIBetaGroupBetaTestersLinkagesResponse summary);
    void betaGroupsBuildsCreateToManyRelationshipSignal();
    void betaGroupsBuildsDeleteToManyRelationshipSignal();
    void betaGroupsBuildsGetToManyRelatedSignal(OAIBuildsResponse summary);
    void betaGroupsBuildsGetToManyRelationshipSignal(OAIBetaGroupBuildsLinkagesResponse summary);
    void betaGroupsCreateInstanceSignal(OAIBetaGroupResponse summary);
    void betaGroupsDeleteInstanceSignal();
    void betaGroupsGetCollectionSignal(OAIBetaGroupsResponse summary);
    void betaGroupsGetInstanceSignal(OAIBetaGroupResponse summary);
    void betaGroupsUpdateInstanceSignal(OAIBetaGroupResponse summary);


    void betaGroupsAppGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppResponse summary);
    void betaGroupsBetaTestersCreateToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void betaGroupsBetaTestersDeleteToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void betaGroupsBetaTestersGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBetaTestersResponse summary);
    void betaGroupsBetaTestersGetToManyRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIBetaGroupBetaTestersLinkagesResponse summary);
    void betaGroupsBuildsCreateToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void betaGroupsBuildsDeleteToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void betaGroupsBuildsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBuildsResponse summary);
    void betaGroupsBuildsGetToManyRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIBetaGroupBuildsLinkagesResponse summary);
    void betaGroupsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaGroupResponse summary);
    void betaGroupsDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void betaGroupsGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIBetaGroupsResponse summary);
    void betaGroupsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaGroupResponse summary);
    void betaGroupsUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaGroupResponse summary);

    Q_DECL_DEPRECATED_X("Use betaGroupsAppGetToOneRelatedSignalError() instead")
    void betaGroupsAppGetToOneRelatedSignalE(OAIAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsAppGetToOneRelatedSignalError(OAIAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBetaTestersCreateToManyRelationshipSignalError() instead")
    void betaGroupsBetaTestersCreateToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBetaTestersCreateToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBetaTestersDeleteToManyRelationshipSignalError() instead")
    void betaGroupsBetaTestersDeleteToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBetaTestersDeleteToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBetaTestersGetToManyRelatedSignalError() instead")
    void betaGroupsBetaTestersGetToManyRelatedSignalE(OAIBetaTestersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBetaTestersGetToManyRelatedSignalError(OAIBetaTestersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBetaTestersGetToManyRelationshipSignalError() instead")
    void betaGroupsBetaTestersGetToManyRelationshipSignalE(OAIBetaGroupBetaTestersLinkagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBetaTestersGetToManyRelationshipSignalError(OAIBetaGroupBetaTestersLinkagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBuildsCreateToManyRelationshipSignalError() instead")
    void betaGroupsBuildsCreateToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBuildsCreateToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBuildsDeleteToManyRelationshipSignalError() instead")
    void betaGroupsBuildsDeleteToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBuildsDeleteToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBuildsGetToManyRelatedSignalError() instead")
    void betaGroupsBuildsGetToManyRelatedSignalE(OAIBuildsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBuildsGetToManyRelatedSignalError(OAIBuildsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBuildsGetToManyRelationshipSignalError() instead")
    void betaGroupsBuildsGetToManyRelationshipSignalE(OAIBetaGroupBuildsLinkagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBuildsGetToManyRelationshipSignalError(OAIBetaGroupBuildsLinkagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsCreateInstanceSignalError() instead")
    void betaGroupsCreateInstanceSignalE(OAIBetaGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsCreateInstanceSignalError(OAIBetaGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsDeleteInstanceSignalError() instead")
    void betaGroupsDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsGetCollectionSignalError() instead")
    void betaGroupsGetCollectionSignalE(OAIBetaGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsGetCollectionSignalError(OAIBetaGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsGetInstanceSignalError() instead")
    void betaGroupsGetInstanceSignalE(OAIBetaGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsGetInstanceSignalError(OAIBetaGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsUpdateInstanceSignalError() instead")
    void betaGroupsUpdateInstanceSignalE(OAIBetaGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsUpdateInstanceSignalError(OAIBetaGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use betaGroupsAppGetToOneRelatedSignalErrorFull() instead")
    void betaGroupsAppGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsAppGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBetaTestersCreateToManyRelationshipSignalErrorFull() instead")
    void betaGroupsBetaTestersCreateToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBetaTestersCreateToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBetaTestersDeleteToManyRelationshipSignalErrorFull() instead")
    void betaGroupsBetaTestersDeleteToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBetaTestersDeleteToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBetaTestersGetToManyRelatedSignalErrorFull() instead")
    void betaGroupsBetaTestersGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBetaTestersGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBetaTestersGetToManyRelationshipSignalErrorFull() instead")
    void betaGroupsBetaTestersGetToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBetaTestersGetToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBuildsCreateToManyRelationshipSignalErrorFull() instead")
    void betaGroupsBuildsCreateToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBuildsCreateToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBuildsDeleteToManyRelationshipSignalErrorFull() instead")
    void betaGroupsBuildsDeleteToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBuildsDeleteToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBuildsGetToManyRelatedSignalErrorFull() instead")
    void betaGroupsBuildsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBuildsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsBuildsGetToManyRelationshipSignalErrorFull() instead")
    void betaGroupsBuildsGetToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsBuildsGetToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsCreateInstanceSignalErrorFull() instead")
    void betaGroupsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsDeleteInstanceSignalErrorFull() instead")
    void betaGroupsDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsGetCollectionSignalErrorFull() instead")
    void betaGroupsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsGetInstanceSignalErrorFull() instead")
    void betaGroupsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaGroupsUpdateInstanceSignalErrorFull() instead")
    void betaGroupsUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaGroupsUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
