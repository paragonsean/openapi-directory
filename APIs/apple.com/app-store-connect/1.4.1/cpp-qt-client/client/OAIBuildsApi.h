/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBuildsApi_H
#define OAI_OAIBuildsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppEncryptionDeclarationResponse.h"
#include "OAIAppResponse.h"
#include "OAIAppStoreVersionResponse.h"
#include "OAIBetaAppReviewSubmissionResponse.h"
#include "OAIBetaBuildLocalizationsResponse.h"
#include "OAIBetaTestersResponse.h"
#include "OAIBuildAppEncryptionDeclarationLinkageRequest.h"
#include "OAIBuildAppEncryptionDeclarationLinkageResponse.h"
#include "OAIBuildBetaDetailResponse.h"
#include "OAIBuildBetaGroupsLinkagesRequest.h"
#include "OAIBuildIconsResponse.h"
#include "OAIBuildIndividualTestersLinkagesRequest.h"
#include "OAIBuildIndividualTestersLinkagesResponse.h"
#include "OAIBuildResponse.h"
#include "OAIBuildUpdateRequest.h"
#include "OAIBuildsResponse.h"
#include "OAIDiagnosticSignaturesResponse.h"
#include "OAIErrorResponse.h"
#include "OAIPerfPowerMetricsResponse.h"
#include "OAIPrereleaseVersionResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBuildsApi : public QObject {
    Q_OBJECT

public:
    OAIBuildsApi(const int timeOut = 0);
    ~OAIBuildsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_encryption_declarations QList<QString> [optional]
    */
    virtual void buildsAppEncryptionDeclarationGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_encryption_declarations = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void buildsAppEncryptionDeclarationGetToOneRelationship(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_build_app_encryption_declaration_linkage_request OAIBuildAppEncryptionDeclarationLinkageRequest [required]
    */
    virtual void buildsAppEncryptionDeclarationUpdateToOneRelationship(const QString &id, const OAIBuildAppEncryptionDeclarationLinkageRequest &oai_build_app_encryption_declaration_linkage_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void buildsAppGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_store_versions QList<QString> [optional]
    */
    virtual void buildsAppStoreVersionGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_app_review_submissions QList<QString> [optional]
    */
    virtual void buildsBetaAppReviewSubmissionGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_review_submissions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_build_localizations QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void buildsBetaBuildLocalizationsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_build_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_build_beta_groups_linkages_request OAIBuildBetaGroupsLinkagesRequest [required]
    */
    virtual void buildsBetaGroupsCreateToManyRelationship(const QString &id, const OAIBuildBetaGroupsLinkagesRequest &oai_build_beta_groups_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_build_beta_groups_linkages_request OAIBuildBetaGroupsLinkagesRequest [required]
    */
    virtual void buildsBetaGroupsDeleteToManyRelationship(const QString &id, const OAIBuildBetaGroupsLinkagesRequest &oai_build_beta_groups_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_build_beta_details QList<QString> [optional]
    */
    virtual void buildsBuildBetaDetailGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_build_beta_details = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter_diagnostic_type QList<QString> [optional]
    * @param[in]  fields_diagnostic_signatures QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void buildsDiagnosticSignaturesGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &filter_diagnostic_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_diagnostic_signatures = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  filter_beta_app_review_submission_beta_review_state QList<QString> [optional]
    * @param[in]  filter_expired QList<QString> [optional]
    * @param[in]  filter_pre_release_version_platform QList<QString> [optional]
    * @param[in]  filter_pre_release_version_version QList<QString> [optional]
    * @param[in]  filter_processing_state QList<QString> [optional]
    * @param[in]  filter_uses_non_exempt_encryption QList<QString> [optional]
    * @param[in]  filter_version QList<QString> [optional]
    * @param[in]  filter_app QList<QString> [optional]
    * @param[in]  filter_app_store_version QList<QString> [optional]
    * @param[in]  filter_beta_groups QList<QString> [optional]
    * @param[in]  filter_pre_release_version QList<QString> [optional]
    * @param[in]  filter_id QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_app_encryption_declarations QList<QString> [optional]
    * @param[in]  fields_beta_app_review_submissions QList<QString> [optional]
    * @param[in]  fields_build_beta_details QList<QString> [optional]
    * @param[in]  fields_build_icons QList<QString> [optional]
    * @param[in]  fields_perf_power_metrics QList<QString> [optional]
    * @param[in]  fields_pre_release_versions QList<QString> [optional]
    * @param[in]  fields_app_store_versions QList<QString> [optional]
    * @param[in]  fields_diagnostic_signatures QList<QString> [optional]
    * @param[in]  fields_beta_testers QList<QString> [optional]
    * @param[in]  fields_beta_build_localizations QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_beta_build_localizations qint32 [optional]
    * @param[in]  limit_icons qint32 [optional]
    * @param[in]  limit_individual_testers qint32 [optional]
    */
    virtual void buildsGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_beta_app_review_submission_beta_review_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_expired = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_pre_release_version_platform = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_pre_release_version_version = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_processing_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_uses_non_exempt_encryption = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_version = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_app = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_app_store_version = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_beta_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_pre_release_version = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_encryption_declarations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_review_submissions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_build_beta_details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_build_icons = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_perf_power_metrics = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_pre_release_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_diagnostic_signatures = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_testers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_build_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_beta_build_localizations = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_icons = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_individual_testers = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_app_encryption_declarations QList<QString> [optional]
    * @param[in]  fields_beta_app_review_submissions QList<QString> [optional]
    * @param[in]  fields_build_beta_details QList<QString> [optional]
    * @param[in]  fields_build_icons QList<QString> [optional]
    * @param[in]  fields_perf_power_metrics QList<QString> [optional]
    * @param[in]  fields_pre_release_versions QList<QString> [optional]
    * @param[in]  fields_app_store_versions QList<QString> [optional]
    * @param[in]  fields_diagnostic_signatures QList<QString> [optional]
    * @param[in]  fields_beta_testers QList<QString> [optional]
    * @param[in]  fields_beta_build_localizations QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_beta_build_localizations qint32 [optional]
    * @param[in]  limit_icons qint32 [optional]
    * @param[in]  limit_individual_testers qint32 [optional]
    */
    virtual void buildsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_encryption_declarations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_review_submissions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_build_beta_details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_build_icons = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_perf_power_metrics = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_pre_release_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_diagnostic_signatures = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_testers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_build_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_beta_build_localizations = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_icons = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_individual_testers = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_build_icons QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void buildsIconsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_build_icons = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_build_individual_testers_linkages_request OAIBuildIndividualTestersLinkagesRequest [required]
    */
    virtual void buildsIndividualTestersCreateToManyRelationship(const QString &id, const OAIBuildIndividualTestersLinkagesRequest &oai_build_individual_testers_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_build_individual_testers_linkages_request OAIBuildIndividualTestersLinkagesRequest [required]
    */
    virtual void buildsIndividualTestersDeleteToManyRelationship(const QString &id, const OAIBuildIndividualTestersLinkagesRequest &oai_build_individual_testers_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_testers QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void buildsIndividualTestersGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_testers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void buildsIndividualTestersGetToManyRelationship(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter_device_type QList<QString> [optional]
    * @param[in]  filter_metric_type QList<QString> [optional]
    * @param[in]  filter_platform QList<QString> [optional]
    */
    virtual void buildsPerfPowerMetricsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &filter_device_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_metric_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_platform = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_pre_release_versions QList<QString> [optional]
    */
    virtual void buildsPreReleaseVersionGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_pre_release_versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_build_update_request OAIBuildUpdateRequest [required]
    */
    virtual void buildsUpdateInstance(const QString &id, const OAIBuildUpdateRequest &oai_build_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void buildsAppEncryptionDeclarationGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void buildsAppEncryptionDeclarationGetToOneRelationshipCallback(OAIHttpRequestWorker *worker);
    void buildsAppEncryptionDeclarationUpdateToOneRelationshipCallback(OAIHttpRequestWorker *worker);
    void buildsAppGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void buildsAppStoreVersionGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void buildsBetaAppReviewSubmissionGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void buildsBetaBuildLocalizationsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void buildsBetaGroupsCreateToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void buildsBetaGroupsDeleteToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void buildsBuildBetaDetailGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void buildsDiagnosticSignaturesGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void buildsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void buildsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void buildsIconsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void buildsIndividualTestersCreateToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void buildsIndividualTestersDeleteToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void buildsIndividualTestersGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void buildsIndividualTestersGetToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void buildsPerfPowerMetricsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void buildsPreReleaseVersionGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void buildsUpdateInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void buildsAppEncryptionDeclarationGetToOneRelatedSignal(OAIAppEncryptionDeclarationResponse summary);
    void buildsAppEncryptionDeclarationGetToOneRelationshipSignal(OAIBuildAppEncryptionDeclarationLinkageResponse summary);
    void buildsAppEncryptionDeclarationUpdateToOneRelationshipSignal();
    void buildsAppGetToOneRelatedSignal(OAIAppResponse summary);
    void buildsAppStoreVersionGetToOneRelatedSignal(OAIAppStoreVersionResponse summary);
    void buildsBetaAppReviewSubmissionGetToOneRelatedSignal(OAIBetaAppReviewSubmissionResponse summary);
    void buildsBetaBuildLocalizationsGetToManyRelatedSignal(OAIBetaBuildLocalizationsResponse summary);
    void buildsBetaGroupsCreateToManyRelationshipSignal();
    void buildsBetaGroupsDeleteToManyRelationshipSignal();
    void buildsBuildBetaDetailGetToOneRelatedSignal(OAIBuildBetaDetailResponse summary);
    void buildsDiagnosticSignaturesGetToManyRelatedSignal(OAIDiagnosticSignaturesResponse summary);
    void buildsGetCollectionSignal(OAIBuildsResponse summary);
    void buildsGetInstanceSignal(OAIBuildResponse summary);
    void buildsIconsGetToManyRelatedSignal(OAIBuildIconsResponse summary);
    void buildsIndividualTestersCreateToManyRelationshipSignal();
    void buildsIndividualTestersDeleteToManyRelationshipSignal();
    void buildsIndividualTestersGetToManyRelatedSignal(OAIBetaTestersResponse summary);
    void buildsIndividualTestersGetToManyRelationshipSignal(OAIBuildIndividualTestersLinkagesResponse summary);
    void buildsPerfPowerMetricsGetToManyRelatedSignal(OAIPerfPowerMetricsResponse summary);
    void buildsPreReleaseVersionGetToOneRelatedSignal(OAIPrereleaseVersionResponse summary);
    void buildsUpdateInstanceSignal(OAIBuildResponse summary);


    void buildsAppEncryptionDeclarationGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppEncryptionDeclarationResponse summary);
    void buildsAppEncryptionDeclarationGetToOneRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIBuildAppEncryptionDeclarationLinkageResponse summary);
    void buildsAppEncryptionDeclarationUpdateToOneRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void buildsAppGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppResponse summary);
    void buildsAppStoreVersionGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionResponse summary);
    void buildsBetaAppReviewSubmissionGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppReviewSubmissionResponse summary);
    void buildsBetaBuildLocalizationsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBetaBuildLocalizationsResponse summary);
    void buildsBetaGroupsCreateToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void buildsBetaGroupsDeleteToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void buildsBuildBetaDetailGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBuildBetaDetailResponse summary);
    void buildsDiagnosticSignaturesGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticSignaturesResponse summary);
    void buildsGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIBuildsResponse summary);
    void buildsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBuildResponse summary);
    void buildsIconsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBuildIconsResponse summary);
    void buildsIndividualTestersCreateToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void buildsIndividualTestersDeleteToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void buildsIndividualTestersGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBetaTestersResponse summary);
    void buildsIndividualTestersGetToManyRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIBuildIndividualTestersLinkagesResponse summary);
    void buildsPerfPowerMetricsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIPerfPowerMetricsResponse summary);
    void buildsPreReleaseVersionGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIPrereleaseVersionResponse summary);
    void buildsUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBuildResponse summary);

    Q_DECL_DEPRECATED_X("Use buildsAppEncryptionDeclarationGetToOneRelatedSignalError() instead")
    void buildsAppEncryptionDeclarationGetToOneRelatedSignalE(OAIAppEncryptionDeclarationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsAppEncryptionDeclarationGetToOneRelatedSignalError(OAIAppEncryptionDeclarationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsAppEncryptionDeclarationGetToOneRelationshipSignalError() instead")
    void buildsAppEncryptionDeclarationGetToOneRelationshipSignalE(OAIBuildAppEncryptionDeclarationLinkageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsAppEncryptionDeclarationGetToOneRelationshipSignalError(OAIBuildAppEncryptionDeclarationLinkageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsAppEncryptionDeclarationUpdateToOneRelationshipSignalError() instead")
    void buildsAppEncryptionDeclarationUpdateToOneRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void buildsAppEncryptionDeclarationUpdateToOneRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsAppGetToOneRelatedSignalError() instead")
    void buildsAppGetToOneRelatedSignalE(OAIAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsAppGetToOneRelatedSignalError(OAIAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsAppStoreVersionGetToOneRelatedSignalError() instead")
    void buildsAppStoreVersionGetToOneRelatedSignalE(OAIAppStoreVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsAppStoreVersionGetToOneRelatedSignalError(OAIAppStoreVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsBetaAppReviewSubmissionGetToOneRelatedSignalError() instead")
    void buildsBetaAppReviewSubmissionGetToOneRelatedSignalE(OAIBetaAppReviewSubmissionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsBetaAppReviewSubmissionGetToOneRelatedSignalError(OAIBetaAppReviewSubmissionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsBetaBuildLocalizationsGetToManyRelatedSignalError() instead")
    void buildsBetaBuildLocalizationsGetToManyRelatedSignalE(OAIBetaBuildLocalizationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsBetaBuildLocalizationsGetToManyRelatedSignalError(OAIBetaBuildLocalizationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsBetaGroupsCreateToManyRelationshipSignalError() instead")
    void buildsBetaGroupsCreateToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void buildsBetaGroupsCreateToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsBetaGroupsDeleteToManyRelationshipSignalError() instead")
    void buildsBetaGroupsDeleteToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void buildsBetaGroupsDeleteToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsBuildBetaDetailGetToOneRelatedSignalError() instead")
    void buildsBuildBetaDetailGetToOneRelatedSignalE(OAIBuildBetaDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsBuildBetaDetailGetToOneRelatedSignalError(OAIBuildBetaDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsDiagnosticSignaturesGetToManyRelatedSignalError() instead")
    void buildsDiagnosticSignaturesGetToManyRelatedSignalE(OAIDiagnosticSignaturesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsDiagnosticSignaturesGetToManyRelatedSignalError(OAIDiagnosticSignaturesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetCollectionSignalError() instead")
    void buildsGetCollectionSignalE(OAIBuildsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetCollectionSignalError(OAIBuildsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetInstanceSignalError() instead")
    void buildsGetInstanceSignalE(OAIBuildResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetInstanceSignalError(OAIBuildResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsIconsGetToManyRelatedSignalError() instead")
    void buildsIconsGetToManyRelatedSignalE(OAIBuildIconsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsIconsGetToManyRelatedSignalError(OAIBuildIconsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsIndividualTestersCreateToManyRelationshipSignalError() instead")
    void buildsIndividualTestersCreateToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void buildsIndividualTestersCreateToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsIndividualTestersDeleteToManyRelationshipSignalError() instead")
    void buildsIndividualTestersDeleteToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void buildsIndividualTestersDeleteToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsIndividualTestersGetToManyRelatedSignalError() instead")
    void buildsIndividualTestersGetToManyRelatedSignalE(OAIBetaTestersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsIndividualTestersGetToManyRelatedSignalError(OAIBetaTestersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsIndividualTestersGetToManyRelationshipSignalError() instead")
    void buildsIndividualTestersGetToManyRelationshipSignalE(OAIBuildIndividualTestersLinkagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsIndividualTestersGetToManyRelationshipSignalError(OAIBuildIndividualTestersLinkagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsPerfPowerMetricsGetToManyRelatedSignalError() instead")
    void buildsPerfPowerMetricsGetToManyRelatedSignalE(OAIPerfPowerMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsPerfPowerMetricsGetToManyRelatedSignalError(OAIPerfPowerMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsPreReleaseVersionGetToOneRelatedSignalError() instead")
    void buildsPreReleaseVersionGetToOneRelatedSignalE(OAIPrereleaseVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsPreReleaseVersionGetToOneRelatedSignalError(OAIPrereleaseVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsUpdateInstanceSignalError() instead")
    void buildsUpdateInstanceSignalE(OAIBuildResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsUpdateInstanceSignalError(OAIBuildResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use buildsAppEncryptionDeclarationGetToOneRelatedSignalErrorFull() instead")
    void buildsAppEncryptionDeclarationGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsAppEncryptionDeclarationGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsAppEncryptionDeclarationGetToOneRelationshipSignalErrorFull() instead")
    void buildsAppEncryptionDeclarationGetToOneRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsAppEncryptionDeclarationGetToOneRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsAppEncryptionDeclarationUpdateToOneRelationshipSignalErrorFull() instead")
    void buildsAppEncryptionDeclarationUpdateToOneRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsAppEncryptionDeclarationUpdateToOneRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsAppGetToOneRelatedSignalErrorFull() instead")
    void buildsAppGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsAppGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsAppStoreVersionGetToOneRelatedSignalErrorFull() instead")
    void buildsAppStoreVersionGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsAppStoreVersionGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsBetaAppReviewSubmissionGetToOneRelatedSignalErrorFull() instead")
    void buildsBetaAppReviewSubmissionGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsBetaAppReviewSubmissionGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsBetaBuildLocalizationsGetToManyRelatedSignalErrorFull() instead")
    void buildsBetaBuildLocalizationsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsBetaBuildLocalizationsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsBetaGroupsCreateToManyRelationshipSignalErrorFull() instead")
    void buildsBetaGroupsCreateToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsBetaGroupsCreateToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsBetaGroupsDeleteToManyRelationshipSignalErrorFull() instead")
    void buildsBetaGroupsDeleteToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsBetaGroupsDeleteToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsBuildBetaDetailGetToOneRelatedSignalErrorFull() instead")
    void buildsBuildBetaDetailGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsBuildBetaDetailGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsDiagnosticSignaturesGetToManyRelatedSignalErrorFull() instead")
    void buildsDiagnosticSignaturesGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsDiagnosticSignaturesGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetCollectionSignalErrorFull() instead")
    void buildsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetInstanceSignalErrorFull() instead")
    void buildsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsIconsGetToManyRelatedSignalErrorFull() instead")
    void buildsIconsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsIconsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsIndividualTestersCreateToManyRelationshipSignalErrorFull() instead")
    void buildsIndividualTestersCreateToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsIndividualTestersCreateToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsIndividualTestersDeleteToManyRelationshipSignalErrorFull() instead")
    void buildsIndividualTestersDeleteToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsIndividualTestersDeleteToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsIndividualTestersGetToManyRelatedSignalErrorFull() instead")
    void buildsIndividualTestersGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsIndividualTestersGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsIndividualTestersGetToManyRelationshipSignalErrorFull() instead")
    void buildsIndividualTestersGetToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsIndividualTestersGetToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsPerfPowerMetricsGetToManyRelatedSignalErrorFull() instead")
    void buildsPerfPowerMetricsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsPerfPowerMetricsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsPreReleaseVersionGetToOneRelatedSignalErrorFull() instead")
    void buildsPreReleaseVersionGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsPreReleaseVersionGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsUpdateInstanceSignalErrorFull() instead")
    void buildsUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
