/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppEncryptionDeclarationState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppEncryptionDeclarationState::OAIAppEncryptionDeclarationState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppEncryptionDeclarationState::OAIAppEncryptionDeclarationState() {
    this->initializeModel();
}

OAIAppEncryptionDeclarationState::~OAIAppEncryptionDeclarationState() {}

void OAIAppEncryptionDeclarationState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAppEncryptionDeclarationState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAppEncryptionDeclarationState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IN_REVIEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppEncryptionDeclarationState::IN_REVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPROVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppEncryptionDeclarationState::APPROVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppEncryptionDeclarationState::REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppEncryptionDeclarationState::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppEncryptionDeclarationState::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAppEncryptionDeclarationState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAppEncryptionDeclarationState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAppEncryptionDeclarationState::IN_REVIEW:
            val = "IN_REVIEW";
            break;
        case eOAIAppEncryptionDeclarationState::APPROVED:
            val = "APPROVED";
            break;
        case eOAIAppEncryptionDeclarationState::REJECTED:
            val = "REJECTED";
            break;
        case eOAIAppEncryptionDeclarationState::INVALID:
            val = "INVALID";
            break;
        case eOAIAppEncryptionDeclarationState::EXPIRED:
            val = "EXPIRED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAppEncryptionDeclarationState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAppEncryptionDeclarationState::eOAIAppEncryptionDeclarationState OAIAppEncryptionDeclarationState::getValue() const {
    return m_value;
}

void OAIAppEncryptionDeclarationState::setValue(const OAIAppEncryptionDeclarationState::eOAIAppEncryptionDeclarationState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAppEncryptionDeclarationState::isSet() const {
    
    return m_value_isSet;
}

bool OAIAppEncryptionDeclarationState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
