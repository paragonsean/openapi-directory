/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_attributes::OAIUser_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_attributes::OAIUser_attributes() {
    this->initializeModel();
}

OAIUser_attributes::~OAIUser_attributes() {}

void OAIUser_attributes::initializeModel() {

    m_all_apps_visible_isSet = false;
    m_all_apps_visible_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_provisioning_allowed_isSet = false;
    m_provisioning_allowed_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUser_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_attributes::fromJsonObject(QJsonObject json) {

    m_all_apps_visible_isValid = ::OpenAPI::fromJsonValue(m_all_apps_visible, json[QString("allAppsVisible")]);
    m_all_apps_visible_isSet = !json[QString("allAppsVisible")].isNull() && m_all_apps_visible_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_provisioning_allowed_isValid = ::OpenAPI::fromJsonValue(m_provisioning_allowed, json[QString("provisioningAllowed")]);
    m_provisioning_allowed_isSet = !json[QString("provisioningAllowed")].isNull() && m_provisioning_allowed_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUser_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_all_apps_visible_isSet) {
        obj.insert(QString("allAppsVisible"), ::OpenAPI::toJsonValue(m_all_apps_visible));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_provisioning_allowed_isSet) {
        obj.insert(QString("provisioningAllowed"), ::OpenAPI::toJsonValue(m_provisioning_allowed));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAIUser_attributes::isAllAppsVisible() const {
    return m_all_apps_visible;
}
void OAIUser_attributes::setAllAppsVisible(const bool &all_apps_visible) {
    m_all_apps_visible = all_apps_visible;
    m_all_apps_visible_isSet = true;
}

bool OAIUser_attributes::is_all_apps_visible_Set() const{
    return m_all_apps_visible_isSet;
}

bool OAIUser_attributes::is_all_apps_visible_Valid() const{
    return m_all_apps_visible_isValid;
}

QString OAIUser_attributes::getFirstName() const {
    return m_first_name;
}
void OAIUser_attributes::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUser_attributes::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUser_attributes::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUser_attributes::getLastName() const {
    return m_last_name;
}
void OAIUser_attributes::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUser_attributes::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUser_attributes::is_last_name_Valid() const{
    return m_last_name_isValid;
}

bool OAIUser_attributes::isProvisioningAllowed() const {
    return m_provisioning_allowed;
}
void OAIUser_attributes::setProvisioningAllowed(const bool &provisioning_allowed) {
    m_provisioning_allowed = provisioning_allowed;
    m_provisioning_allowed_isSet = true;
}

bool OAIUser_attributes::is_provisioning_allowed_Set() const{
    return m_provisioning_allowed_isSet;
}

bool OAIUser_attributes::is_provisioning_allowed_Valid() const{
    return m_provisioning_allowed_isValid;
}

QList<OAIUserRole> OAIUser_attributes::getRoles() const {
    return m_roles;
}
void OAIUser_attributes::setRoles(const QList<OAIUserRole> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIUser_attributes::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIUser_attributes::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIUser_attributes::getUsername() const {
    return m_username;
}
void OAIUser_attributes::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser_attributes::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser_attributes::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUser_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_apps_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
