/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppStoreVersion_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppStoreVersion_attributes::OAIAppStoreVersion_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppStoreVersion_attributes::OAIAppStoreVersion_attributes() {
    this->initializeModel();
}

OAIAppStoreVersion_attributes::~OAIAppStoreVersion_attributes() {}

void OAIAppStoreVersion_attributes::initializeModel() {

    m_app_store_state_isSet = false;
    m_app_store_state_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_downloadable_isSet = false;
    m_downloadable_isValid = false;

    m_earliest_release_date_isSet = false;
    m_earliest_release_date_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_release_type_isSet = false;
    m_release_type_isValid = false;

    m_uses_idfa_isSet = false;
    m_uses_idfa_isValid = false;

    m_version_string_isSet = false;
    m_version_string_isValid = false;
}

void OAIAppStoreVersion_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppStoreVersion_attributes::fromJsonObject(QJsonObject json) {

    m_app_store_state_isValid = ::OpenAPI::fromJsonValue(m_app_store_state, json[QString("appStoreState")]);
    m_app_store_state_isSet = !json[QString("appStoreState")].isNull() && m_app_store_state_isValid;

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_downloadable_isValid = ::OpenAPI::fromJsonValue(m_downloadable, json[QString("downloadable")]);
    m_downloadable_isSet = !json[QString("downloadable")].isNull() && m_downloadable_isValid;

    m_earliest_release_date_isValid = ::OpenAPI::fromJsonValue(m_earliest_release_date, json[QString("earliestReleaseDate")]);
    m_earliest_release_date_isSet = !json[QString("earliestReleaseDate")].isNull() && m_earliest_release_date_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_release_type_isValid = ::OpenAPI::fromJsonValue(m_release_type, json[QString("releaseType")]);
    m_release_type_isSet = !json[QString("releaseType")].isNull() && m_release_type_isValid;

    m_uses_idfa_isValid = ::OpenAPI::fromJsonValue(m_uses_idfa, json[QString("usesIdfa")]);
    m_uses_idfa_isSet = !json[QString("usesIdfa")].isNull() && m_uses_idfa_isValid;

    m_version_string_isValid = ::OpenAPI::fromJsonValue(m_version_string, json[QString("versionString")]);
    m_version_string_isSet = !json[QString("versionString")].isNull() && m_version_string_isValid;
}

QString OAIAppStoreVersion_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppStoreVersion_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_app_store_state.isSet()) {
        obj.insert(QString("appStoreState"), ::OpenAPI::toJsonValue(m_app_store_state));
    }
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_downloadable_isSet) {
        obj.insert(QString("downloadable"), ::OpenAPI::toJsonValue(m_downloadable));
    }
    if (m_earliest_release_date_isSet) {
        obj.insert(QString("earliestReleaseDate"), ::OpenAPI::toJsonValue(m_earliest_release_date));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_release_type_isSet) {
        obj.insert(QString("releaseType"), ::OpenAPI::toJsonValue(m_release_type));
    }
    if (m_uses_idfa_isSet) {
        obj.insert(QString("usesIdfa"), ::OpenAPI::toJsonValue(m_uses_idfa));
    }
    if (m_version_string_isSet) {
        obj.insert(QString("versionString"), ::OpenAPI::toJsonValue(m_version_string));
    }
    return obj;
}

OAIAppStoreVersionState OAIAppStoreVersion_attributes::getAppStoreState() const {
    return m_app_store_state;
}
void OAIAppStoreVersion_attributes::setAppStoreState(const OAIAppStoreVersionState &app_store_state) {
    m_app_store_state = app_store_state;
    m_app_store_state_isSet = true;
}

bool OAIAppStoreVersion_attributes::is_app_store_state_Set() const{
    return m_app_store_state_isSet;
}

bool OAIAppStoreVersion_attributes::is_app_store_state_Valid() const{
    return m_app_store_state_isValid;
}

QString OAIAppStoreVersion_attributes::getCopyright() const {
    return m_copyright;
}
void OAIAppStoreVersion_attributes::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIAppStoreVersion_attributes::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIAppStoreVersion_attributes::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QDateTime OAIAppStoreVersion_attributes::getCreatedDate() const {
    return m_created_date;
}
void OAIAppStoreVersion_attributes::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIAppStoreVersion_attributes::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIAppStoreVersion_attributes::is_created_date_Valid() const{
    return m_created_date_isValid;
}

bool OAIAppStoreVersion_attributes::isDownloadable() const {
    return m_downloadable;
}
void OAIAppStoreVersion_attributes::setDownloadable(const bool &downloadable) {
    m_downloadable = downloadable;
    m_downloadable_isSet = true;
}

bool OAIAppStoreVersion_attributes::is_downloadable_Set() const{
    return m_downloadable_isSet;
}

bool OAIAppStoreVersion_attributes::is_downloadable_Valid() const{
    return m_downloadable_isValid;
}

QDateTime OAIAppStoreVersion_attributes::getEarliestReleaseDate() const {
    return m_earliest_release_date;
}
void OAIAppStoreVersion_attributes::setEarliestReleaseDate(const QDateTime &earliest_release_date) {
    m_earliest_release_date = earliest_release_date;
    m_earliest_release_date_isSet = true;
}

bool OAIAppStoreVersion_attributes::is_earliest_release_date_Set() const{
    return m_earliest_release_date_isSet;
}

bool OAIAppStoreVersion_attributes::is_earliest_release_date_Valid() const{
    return m_earliest_release_date_isValid;
}

OAIPlatform OAIAppStoreVersion_attributes::getPlatform() const {
    return m_platform;
}
void OAIAppStoreVersion_attributes::setPlatform(const OAIPlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIAppStoreVersion_attributes::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIAppStoreVersion_attributes::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIAppStoreVersion_attributes::getReleaseType() const {
    return m_release_type;
}
void OAIAppStoreVersion_attributes::setReleaseType(const QString &release_type) {
    m_release_type = release_type;
    m_release_type_isSet = true;
}

bool OAIAppStoreVersion_attributes::is_release_type_Set() const{
    return m_release_type_isSet;
}

bool OAIAppStoreVersion_attributes::is_release_type_Valid() const{
    return m_release_type_isValid;
}

bool OAIAppStoreVersion_attributes::isUsesIdfa() const {
    return m_uses_idfa;
}
void OAIAppStoreVersion_attributes::setUsesIdfa(const bool &uses_idfa) {
    m_uses_idfa = uses_idfa;
    m_uses_idfa_isSet = true;
}

bool OAIAppStoreVersion_attributes::is_uses_idfa_Set() const{
    return m_uses_idfa_isSet;
}

bool OAIAppStoreVersion_attributes::is_uses_idfa_Valid() const{
    return m_uses_idfa_isValid;
}

QString OAIAppStoreVersion_attributes::getVersionString() const {
    return m_version_string;
}
void OAIAppStoreVersion_attributes::setVersionString(const QString &version_string) {
    m_version_string = version_string;
    m_version_string_isSet = true;
}

bool OAIAppStoreVersion_attributes::is_version_string_Set() const{
    return m_version_string_isSet;
}

bool OAIAppStoreVersion_attributes::is_version_string_Valid() const{
    return m_version_string_isValid;
}

bool OAIAppStoreVersion_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_store_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloadable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_idfa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppStoreVersion_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
