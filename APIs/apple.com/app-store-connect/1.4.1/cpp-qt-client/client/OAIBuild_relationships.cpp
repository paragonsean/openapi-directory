/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuild_relationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuild_relationships::OAIBuild_relationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuild_relationships::OAIBuild_relationships() {
    this->initializeModel();
}

OAIBuild_relationships::~OAIBuild_relationships() {}

void OAIBuild_relationships::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_app_encryption_declaration_isSet = false;
    m_app_encryption_declaration_isValid = false;

    m_app_store_version_isSet = false;
    m_app_store_version_isValid = false;

    m_beta_app_review_submission_isSet = false;
    m_beta_app_review_submission_isValid = false;

    m_beta_build_localizations_isSet = false;
    m_beta_build_localizations_isValid = false;

    m_build_beta_detail_isSet = false;
    m_build_beta_detail_isValid = false;

    m_icons_isSet = false;
    m_icons_isValid = false;

    m_individual_testers_isSet = false;
    m_individual_testers_isValid = false;

    m_pre_release_version_isSet = false;
    m_pre_release_version_isValid = false;
}

void OAIBuild_relationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuild_relationships::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_app_encryption_declaration_isValid = ::OpenAPI::fromJsonValue(m_app_encryption_declaration, json[QString("appEncryptionDeclaration")]);
    m_app_encryption_declaration_isSet = !json[QString("appEncryptionDeclaration")].isNull() && m_app_encryption_declaration_isValid;

    m_app_store_version_isValid = ::OpenAPI::fromJsonValue(m_app_store_version, json[QString("appStoreVersion")]);
    m_app_store_version_isSet = !json[QString("appStoreVersion")].isNull() && m_app_store_version_isValid;

    m_beta_app_review_submission_isValid = ::OpenAPI::fromJsonValue(m_beta_app_review_submission, json[QString("betaAppReviewSubmission")]);
    m_beta_app_review_submission_isSet = !json[QString("betaAppReviewSubmission")].isNull() && m_beta_app_review_submission_isValid;

    m_beta_build_localizations_isValid = ::OpenAPI::fromJsonValue(m_beta_build_localizations, json[QString("betaBuildLocalizations")]);
    m_beta_build_localizations_isSet = !json[QString("betaBuildLocalizations")].isNull() && m_beta_build_localizations_isValid;

    m_build_beta_detail_isValid = ::OpenAPI::fromJsonValue(m_build_beta_detail, json[QString("buildBetaDetail")]);
    m_build_beta_detail_isSet = !json[QString("buildBetaDetail")].isNull() && m_build_beta_detail_isValid;

    m_icons_isValid = ::OpenAPI::fromJsonValue(m_icons, json[QString("icons")]);
    m_icons_isSet = !json[QString("icons")].isNull() && m_icons_isValid;

    m_individual_testers_isValid = ::OpenAPI::fromJsonValue(m_individual_testers, json[QString("individualTesters")]);
    m_individual_testers_isSet = !json[QString("individualTesters")].isNull() && m_individual_testers_isValid;

    m_pre_release_version_isValid = ::OpenAPI::fromJsonValue(m_pre_release_version, json[QString("preReleaseVersion")]);
    m_pre_release_version_isSet = !json[QString("preReleaseVersion")].isNull() && m_pre_release_version_isValid;
}

QString OAIBuild_relationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuild_relationships::asJsonObject() const {
    QJsonObject obj;
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_app_encryption_declaration.isSet()) {
        obj.insert(QString("appEncryptionDeclaration"), ::OpenAPI::toJsonValue(m_app_encryption_declaration));
    }
    if (m_app_store_version.isSet()) {
        obj.insert(QString("appStoreVersion"), ::OpenAPI::toJsonValue(m_app_store_version));
    }
    if (m_beta_app_review_submission.isSet()) {
        obj.insert(QString("betaAppReviewSubmission"), ::OpenAPI::toJsonValue(m_beta_app_review_submission));
    }
    if (m_beta_build_localizations.isSet()) {
        obj.insert(QString("betaBuildLocalizations"), ::OpenAPI::toJsonValue(m_beta_build_localizations));
    }
    if (m_build_beta_detail.isSet()) {
        obj.insert(QString("buildBetaDetail"), ::OpenAPI::toJsonValue(m_build_beta_detail));
    }
    if (m_icons.isSet()) {
        obj.insert(QString("icons"), ::OpenAPI::toJsonValue(m_icons));
    }
    if (m_individual_testers.isSet()) {
        obj.insert(QString("individualTesters"), ::OpenAPI::toJsonValue(m_individual_testers));
    }
    if (m_pre_release_version.isSet()) {
        obj.insert(QString("preReleaseVersion"), ::OpenAPI::toJsonValue(m_pre_release_version));
    }
    return obj;
}

OAIAppEncryptionDeclaration_relationships_app OAIBuild_relationships::getApp() const {
    return m_app;
}
void OAIBuild_relationships::setApp(const OAIAppEncryptionDeclaration_relationships_app &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIBuild_relationships::is_app_Set() const{
    return m_app_isSet;
}

bool OAIBuild_relationships::is_app_Valid() const{
    return m_app_isValid;
}

OAIBuild_relationships_appEncryptionDeclaration OAIBuild_relationships::getAppEncryptionDeclaration() const {
    return m_app_encryption_declaration;
}
void OAIBuild_relationships::setAppEncryptionDeclaration(const OAIBuild_relationships_appEncryptionDeclaration &app_encryption_declaration) {
    m_app_encryption_declaration = app_encryption_declaration;
    m_app_encryption_declaration_isSet = true;
}

bool OAIBuild_relationships::is_app_encryption_declaration_Set() const{
    return m_app_encryption_declaration_isSet;
}

bool OAIBuild_relationships::is_app_encryption_declaration_Valid() const{
    return m_app_encryption_declaration_isValid;
}

OAIAppStoreReviewDetail_relationships_appStoreVersion OAIBuild_relationships::getAppStoreVersion() const {
    return m_app_store_version;
}
void OAIBuild_relationships::setAppStoreVersion(const OAIAppStoreReviewDetail_relationships_appStoreVersion &app_store_version) {
    m_app_store_version = app_store_version;
    m_app_store_version_isSet = true;
}

bool OAIBuild_relationships::is_app_store_version_Set() const{
    return m_app_store_version_isSet;
}

bool OAIBuild_relationships::is_app_store_version_Valid() const{
    return m_app_store_version_isValid;
}

OAIBuild_relationships_betaAppReviewSubmission OAIBuild_relationships::getBetaAppReviewSubmission() const {
    return m_beta_app_review_submission;
}
void OAIBuild_relationships::setBetaAppReviewSubmission(const OAIBuild_relationships_betaAppReviewSubmission &beta_app_review_submission) {
    m_beta_app_review_submission = beta_app_review_submission;
    m_beta_app_review_submission_isSet = true;
}

bool OAIBuild_relationships::is_beta_app_review_submission_Set() const{
    return m_beta_app_review_submission_isSet;
}

bool OAIBuild_relationships::is_beta_app_review_submission_Valid() const{
    return m_beta_app_review_submission_isValid;
}

OAIBuild_relationships_betaBuildLocalizations OAIBuild_relationships::getBetaBuildLocalizations() const {
    return m_beta_build_localizations;
}
void OAIBuild_relationships::setBetaBuildLocalizations(const OAIBuild_relationships_betaBuildLocalizations &beta_build_localizations) {
    m_beta_build_localizations = beta_build_localizations;
    m_beta_build_localizations_isSet = true;
}

bool OAIBuild_relationships::is_beta_build_localizations_Set() const{
    return m_beta_build_localizations_isSet;
}

bool OAIBuild_relationships::is_beta_build_localizations_Valid() const{
    return m_beta_build_localizations_isValid;
}

OAIBuild_relationships_buildBetaDetail OAIBuild_relationships::getBuildBetaDetail() const {
    return m_build_beta_detail;
}
void OAIBuild_relationships::setBuildBetaDetail(const OAIBuild_relationships_buildBetaDetail &build_beta_detail) {
    m_build_beta_detail = build_beta_detail;
    m_build_beta_detail_isSet = true;
}

bool OAIBuild_relationships::is_build_beta_detail_Set() const{
    return m_build_beta_detail_isSet;
}

bool OAIBuild_relationships::is_build_beta_detail_Valid() const{
    return m_build_beta_detail_isValid;
}

OAIBuild_relationships_icons OAIBuild_relationships::getIcons() const {
    return m_icons;
}
void OAIBuild_relationships::setIcons(const OAIBuild_relationships_icons &icons) {
    m_icons = icons;
    m_icons_isSet = true;
}

bool OAIBuild_relationships::is_icons_Set() const{
    return m_icons_isSet;
}

bool OAIBuild_relationships::is_icons_Valid() const{
    return m_icons_isValid;
}

OAIBetaGroup_relationships_betaTesters OAIBuild_relationships::getIndividualTesters() const {
    return m_individual_testers;
}
void OAIBuild_relationships::setIndividualTesters(const OAIBetaGroup_relationships_betaTesters &individual_testers) {
    m_individual_testers = individual_testers;
    m_individual_testers_isSet = true;
}

bool OAIBuild_relationships::is_individual_testers_Set() const{
    return m_individual_testers_isSet;
}

bool OAIBuild_relationships::is_individual_testers_Valid() const{
    return m_individual_testers_isValid;
}

OAIBuild_relationships_preReleaseVersion OAIBuild_relationships::getPreReleaseVersion() const {
    return m_pre_release_version;
}
void OAIBuild_relationships::setPreReleaseVersion(const OAIBuild_relationships_preReleaseVersion &pre_release_version) {
    m_pre_release_version = pre_release_version;
    m_pre_release_version_isSet = true;
}

bool OAIBuild_relationships::is_pre_release_version_Set() const{
    return m_pre_release_version_isSet;
}

bool OAIBuild_relationships::is_pre_release_version_Valid() const{
    return m_pre_release_version_isValid;
}

bool OAIBuild_relationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_encryption_declaration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_store_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beta_app_review_submission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beta_build_localizations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_beta_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_testers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_release_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuild_relationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
