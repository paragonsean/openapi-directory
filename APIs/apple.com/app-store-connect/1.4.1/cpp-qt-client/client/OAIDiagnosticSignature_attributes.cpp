/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosticSignature_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosticSignature_attributes::OAIDiagnosticSignature_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosticSignature_attributes::OAIDiagnosticSignature_attributes() {
    this->initializeModel();
}

OAIDiagnosticSignature_attributes::~OAIDiagnosticSignature_attributes() {}

void OAIDiagnosticSignature_attributes::initializeModel() {

    m_diagnostic_type_isSet = false;
    m_diagnostic_type_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIDiagnosticSignature_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosticSignature_attributes::fromJsonObject(QJsonObject json) {

    m_diagnostic_type_isValid = ::OpenAPI::fromJsonValue(m_diagnostic_type, json[QString("diagnosticType")]);
    m_diagnostic_type_isSet = !json[QString("diagnosticType")].isNull() && m_diagnostic_type_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIDiagnosticSignature_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosticSignature_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_diagnostic_type_isSet) {
        obj.insert(QString("diagnosticType"), ::OpenAPI::toJsonValue(m_diagnostic_type));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIDiagnosticSignature_attributes::getDiagnosticType() const {
    return m_diagnostic_type;
}
void OAIDiagnosticSignature_attributes::setDiagnosticType(const QString &diagnostic_type) {
    m_diagnostic_type = diagnostic_type;
    m_diagnostic_type_isSet = true;
}

bool OAIDiagnosticSignature_attributes::is_diagnostic_type_Set() const{
    return m_diagnostic_type_isSet;
}

bool OAIDiagnosticSignature_attributes::is_diagnostic_type_Valid() const{
    return m_diagnostic_type_isValid;
}

QString OAIDiagnosticSignature_attributes::getSignature() const {
    return m_signature;
}
void OAIDiagnosticSignature_attributes::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIDiagnosticSignature_attributes::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIDiagnosticSignature_attributes::is_signature_Valid() const{
    return m_signature_isValid;
}

double OAIDiagnosticSignature_attributes::getWeight() const {
    return m_weight;
}
void OAIDiagnosticSignature_attributes::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIDiagnosticSignature_attributes::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIDiagnosticSignature_attributes::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIDiagnosticSignature_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_diagnostic_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosticSignature_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
