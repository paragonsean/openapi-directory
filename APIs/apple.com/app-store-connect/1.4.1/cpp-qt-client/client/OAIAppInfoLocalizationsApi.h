/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppInfoLocalizationsApi_H
#define OAI_OAIAppInfoLocalizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppInfoLocalizationCreateRequest.h"
#include "OAIAppInfoLocalizationResponse.h"
#include "OAIAppInfoLocalizationUpdateRequest.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppInfoLocalizationsApi : public QObject {
    Q_OBJECT

public:
    OAIAppInfoLocalizationsApi(const int timeOut = 0);
    ~OAIAppInfoLocalizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_app_info_localization_create_request OAIAppInfoLocalizationCreateRequest [required]
    */
    virtual void appInfoLocalizationsCreateInstance(const OAIAppInfoLocalizationCreateRequest &oai_app_info_localization_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void appInfoLocalizationsDeleteInstance(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_info_localizations QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appInfoLocalizationsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_info_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_app_info_localization_update_request OAIAppInfoLocalizationUpdateRequest [required]
    */
    virtual void appInfoLocalizationsUpdateInstance(const QString &id, const OAIAppInfoLocalizationUpdateRequest &oai_app_info_localization_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appInfoLocalizationsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void appInfoLocalizationsDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void appInfoLocalizationsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void appInfoLocalizationsUpdateInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appInfoLocalizationsCreateInstanceSignal(OAIAppInfoLocalizationResponse summary);
    void appInfoLocalizationsDeleteInstanceSignal();
    void appInfoLocalizationsGetInstanceSignal(OAIAppInfoLocalizationResponse summary);
    void appInfoLocalizationsUpdateInstanceSignal(OAIAppInfoLocalizationResponse summary);


    void appInfoLocalizationsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppInfoLocalizationResponse summary);
    void appInfoLocalizationsDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void appInfoLocalizationsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppInfoLocalizationResponse summary);
    void appInfoLocalizationsUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppInfoLocalizationResponse summary);

    Q_DECL_DEPRECATED_X("Use appInfoLocalizationsCreateInstanceSignalError() instead")
    void appInfoLocalizationsCreateInstanceSignalE(OAIAppInfoLocalizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appInfoLocalizationsCreateInstanceSignalError(OAIAppInfoLocalizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInfoLocalizationsDeleteInstanceSignalError() instead")
    void appInfoLocalizationsDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appInfoLocalizationsDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInfoLocalizationsGetInstanceSignalError() instead")
    void appInfoLocalizationsGetInstanceSignalE(OAIAppInfoLocalizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appInfoLocalizationsGetInstanceSignalError(OAIAppInfoLocalizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInfoLocalizationsUpdateInstanceSignalError() instead")
    void appInfoLocalizationsUpdateInstanceSignalE(OAIAppInfoLocalizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appInfoLocalizationsUpdateInstanceSignalError(OAIAppInfoLocalizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appInfoLocalizationsCreateInstanceSignalErrorFull() instead")
    void appInfoLocalizationsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appInfoLocalizationsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInfoLocalizationsDeleteInstanceSignalErrorFull() instead")
    void appInfoLocalizationsDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appInfoLocalizationsDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInfoLocalizationsGetInstanceSignalErrorFull() instead")
    void appInfoLocalizationsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appInfoLocalizationsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInfoLocalizationsUpdateInstanceSignalErrorFull() instead")
    void appInfoLocalizationsUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appInfoLocalizationsUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
