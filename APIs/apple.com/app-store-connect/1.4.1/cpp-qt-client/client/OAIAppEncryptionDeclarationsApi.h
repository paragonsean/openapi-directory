/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppEncryptionDeclarationsApi_H
#define OAI_OAIAppEncryptionDeclarationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppEncryptionDeclarationBuildsLinkagesRequest.h"
#include "OAIAppEncryptionDeclarationResponse.h"
#include "OAIAppEncryptionDeclarationsResponse.h"
#include "OAIAppResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppEncryptionDeclarationsApi : public QObject {
    Q_OBJECT

public:
    OAIAppEncryptionDeclarationsApi(const int timeOut = 0);
    ~OAIAppEncryptionDeclarationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void appEncryptionDeclarationsAppGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_app_encryption_declaration_builds_linkages_request OAIAppEncryptionDeclarationBuildsLinkagesRequest [required]
    */
    virtual void appEncryptionDeclarationsBuildsCreateToManyRelationship(const QString &id, const OAIAppEncryptionDeclarationBuildsLinkagesRequest &oai_app_encryption_declaration_builds_linkages_request);

    /**
    * @param[in]  filter_platform QList<QString> [optional]
    * @param[in]  filter_app QList<QString> [optional]
    * @param[in]  filter_builds QList<QString> [optional]
    * @param[in]  fields_app_encryption_declarations QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void appEncryptionDeclarationsGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_platform = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_app = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_encryption_declarations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_encryption_declarations QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void appEncryptionDeclarationsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_encryption_declarations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appEncryptionDeclarationsAppGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appEncryptionDeclarationsBuildsCreateToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void appEncryptionDeclarationsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void appEncryptionDeclarationsGetInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appEncryptionDeclarationsAppGetToOneRelatedSignal(OAIAppResponse summary);
    void appEncryptionDeclarationsBuildsCreateToManyRelationshipSignal();
    void appEncryptionDeclarationsGetCollectionSignal(OAIAppEncryptionDeclarationsResponse summary);
    void appEncryptionDeclarationsGetInstanceSignal(OAIAppEncryptionDeclarationResponse summary);


    void appEncryptionDeclarationsAppGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppResponse summary);
    void appEncryptionDeclarationsBuildsCreateToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void appEncryptionDeclarationsGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIAppEncryptionDeclarationsResponse summary);
    void appEncryptionDeclarationsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppEncryptionDeclarationResponse summary);

    Q_DECL_DEPRECATED_X("Use appEncryptionDeclarationsAppGetToOneRelatedSignalError() instead")
    void appEncryptionDeclarationsAppGetToOneRelatedSignalE(OAIAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appEncryptionDeclarationsAppGetToOneRelatedSignalError(OAIAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appEncryptionDeclarationsBuildsCreateToManyRelationshipSignalError() instead")
    void appEncryptionDeclarationsBuildsCreateToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appEncryptionDeclarationsBuildsCreateToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appEncryptionDeclarationsGetCollectionSignalError() instead")
    void appEncryptionDeclarationsGetCollectionSignalE(OAIAppEncryptionDeclarationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appEncryptionDeclarationsGetCollectionSignalError(OAIAppEncryptionDeclarationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appEncryptionDeclarationsGetInstanceSignalError() instead")
    void appEncryptionDeclarationsGetInstanceSignalE(OAIAppEncryptionDeclarationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appEncryptionDeclarationsGetInstanceSignalError(OAIAppEncryptionDeclarationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appEncryptionDeclarationsAppGetToOneRelatedSignalErrorFull() instead")
    void appEncryptionDeclarationsAppGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appEncryptionDeclarationsAppGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appEncryptionDeclarationsBuildsCreateToManyRelationshipSignalErrorFull() instead")
    void appEncryptionDeclarationsBuildsCreateToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appEncryptionDeclarationsBuildsCreateToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appEncryptionDeclarationsGetCollectionSignalErrorFull() instead")
    void appEncryptionDeclarationsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appEncryptionDeclarationsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appEncryptionDeclarationsGetInstanceSignalErrorFull() instead")
    void appEncryptionDeclarationsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appEncryptionDeclarationsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
