/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBetaAppReviewDetailsApi_H
#define OAI_OAIBetaAppReviewDetailsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppResponse.h"
#include "OAIBetaAppReviewDetailResponse.h"
#include "OAIBetaAppReviewDetailUpdateRequest.h"
#include "OAIBetaAppReviewDetailsResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBetaAppReviewDetailsApi : public QObject {
    Q_OBJECT

public:
    OAIBetaAppReviewDetailsApi(const int timeOut = 0);
    ~OAIBetaAppReviewDetailsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void betaAppReviewDetailsAppGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  filter_app QList<QString> [required]
    * @param[in]  fields_beta_app_review_details QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void betaAppReviewDetailsGetCollection(const QList<QString> &filter_app, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_review_details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_app_review_details QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void betaAppReviewDetailsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_review_details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_app_review_detail_update_request OAIBetaAppReviewDetailUpdateRequest [required]
    */
    virtual void betaAppReviewDetailsUpdateInstance(const QString &id, const OAIBetaAppReviewDetailUpdateRequest &oai_beta_app_review_detail_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void betaAppReviewDetailsAppGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void betaAppReviewDetailsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void betaAppReviewDetailsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void betaAppReviewDetailsUpdateInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void betaAppReviewDetailsAppGetToOneRelatedSignal(OAIAppResponse summary);
    void betaAppReviewDetailsGetCollectionSignal(OAIBetaAppReviewDetailsResponse summary);
    void betaAppReviewDetailsGetInstanceSignal(OAIBetaAppReviewDetailResponse summary);
    void betaAppReviewDetailsUpdateInstanceSignal(OAIBetaAppReviewDetailResponse summary);


    void betaAppReviewDetailsAppGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppResponse summary);
    void betaAppReviewDetailsGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppReviewDetailsResponse summary);
    void betaAppReviewDetailsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppReviewDetailResponse summary);
    void betaAppReviewDetailsUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppReviewDetailResponse summary);

    Q_DECL_DEPRECATED_X("Use betaAppReviewDetailsAppGetToOneRelatedSignalError() instead")
    void betaAppReviewDetailsAppGetToOneRelatedSignalE(OAIAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewDetailsAppGetToOneRelatedSignalError(OAIAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewDetailsGetCollectionSignalError() instead")
    void betaAppReviewDetailsGetCollectionSignalE(OAIBetaAppReviewDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewDetailsGetCollectionSignalError(OAIBetaAppReviewDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewDetailsGetInstanceSignalError() instead")
    void betaAppReviewDetailsGetInstanceSignalE(OAIBetaAppReviewDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewDetailsGetInstanceSignalError(OAIBetaAppReviewDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewDetailsUpdateInstanceSignalError() instead")
    void betaAppReviewDetailsUpdateInstanceSignalE(OAIBetaAppReviewDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewDetailsUpdateInstanceSignalError(OAIBetaAppReviewDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use betaAppReviewDetailsAppGetToOneRelatedSignalErrorFull() instead")
    void betaAppReviewDetailsAppGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewDetailsAppGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewDetailsGetCollectionSignalErrorFull() instead")
    void betaAppReviewDetailsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewDetailsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewDetailsGetInstanceSignalErrorFull() instead")
    void betaAppReviewDetailsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewDetailsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewDetailsUpdateInstanceSignalErrorFull() instead")
    void betaAppReviewDetailsUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewDetailsUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
