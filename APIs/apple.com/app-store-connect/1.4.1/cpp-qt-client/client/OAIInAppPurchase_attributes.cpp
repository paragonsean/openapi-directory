/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInAppPurchase_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInAppPurchase_attributes::OAIInAppPurchase_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInAppPurchase_attributes::OAIInAppPurchase_attributes() {
    this->initializeModel();
}

OAIInAppPurchase_attributes::~OAIInAppPurchase_attributes() {}

void OAIInAppPurchase_attributes::initializeModel() {

    m_in_app_purchase_type_isSet = false;
    m_in_app_purchase_type_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_reference_name_isSet = false;
    m_reference_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIInAppPurchase_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInAppPurchase_attributes::fromJsonObject(QJsonObject json) {

    m_in_app_purchase_type_isValid = ::OpenAPI::fromJsonValue(m_in_app_purchase_type, json[QString("inAppPurchaseType")]);
    m_in_app_purchase_type_isSet = !json[QString("inAppPurchaseType")].isNull() && m_in_app_purchase_type_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_reference_name_isValid = ::OpenAPI::fromJsonValue(m_reference_name, json[QString("referenceName")]);
    m_reference_name_isSet = !json[QString("referenceName")].isNull() && m_reference_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIInAppPurchase_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInAppPurchase_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_in_app_purchase_type_isSet) {
        obj.insert(QString("inAppPurchaseType"), ::OpenAPI::toJsonValue(m_in_app_purchase_type));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_reference_name_isSet) {
        obj.insert(QString("referenceName"), ::OpenAPI::toJsonValue(m_reference_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIInAppPurchase_attributes::getInAppPurchaseType() const {
    return m_in_app_purchase_type;
}
void OAIInAppPurchase_attributes::setInAppPurchaseType(const QString &in_app_purchase_type) {
    m_in_app_purchase_type = in_app_purchase_type;
    m_in_app_purchase_type_isSet = true;
}

bool OAIInAppPurchase_attributes::is_in_app_purchase_type_Set() const{
    return m_in_app_purchase_type_isSet;
}

bool OAIInAppPurchase_attributes::is_in_app_purchase_type_Valid() const{
    return m_in_app_purchase_type_isValid;
}

QString OAIInAppPurchase_attributes::getProductId() const {
    return m_product_id;
}
void OAIInAppPurchase_attributes::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIInAppPurchase_attributes::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIInAppPurchase_attributes::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIInAppPurchase_attributes::getReferenceName() const {
    return m_reference_name;
}
void OAIInAppPurchase_attributes::setReferenceName(const QString &reference_name) {
    m_reference_name = reference_name;
    m_reference_name_isSet = true;
}

bool OAIInAppPurchase_attributes::is_reference_name_Set() const{
    return m_reference_name_isSet;
}

bool OAIInAppPurchase_attributes::is_reference_name_Valid() const{
    return m_reference_name_isValid;
}

QString OAIInAppPurchase_attributes::getState() const {
    return m_state;
}
void OAIInAppPurchase_attributes::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInAppPurchase_attributes::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInAppPurchase_attributes::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIInAppPurchase_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_app_purchase_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInAppPurchase_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
