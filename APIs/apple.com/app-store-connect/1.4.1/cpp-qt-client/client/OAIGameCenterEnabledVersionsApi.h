/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGameCenterEnabledVersionsApi_H
#define OAI_OAIGameCenterEnabledVersionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIGameCenterEnabledVersionCompatibleVersionsLinkagesRequest.h"
#include "OAIGameCenterEnabledVersionCompatibleVersionsLinkagesResponse.h"
#include "OAIGameCenterEnabledVersionsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGameCenterEnabledVersionsApi : public QObject {
    Q_OBJECT

public:
    OAIGameCenterEnabledVersionsApi(const int timeOut = 0);
    ~OAIGameCenterEnabledVersionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_game_center_enabled_version_compatible_versions_linkages_request OAIGameCenterEnabledVersionCompatibleVersionsLinkagesRequest [required]
    */
    virtual void gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship(const QString &id, const OAIGameCenterEnabledVersionCompatibleVersionsLinkagesRequest &oai_game_center_enabled_version_compatible_versions_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_game_center_enabled_version_compatible_versions_linkages_request OAIGameCenterEnabledVersionCompatibleVersionsLinkagesRequest [required]
    */
    virtual void gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship(const QString &id, const OAIGameCenterEnabledVersionCompatibleVersionsLinkagesRequest &oai_game_center_enabled_version_compatible_versions_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter_platform QList<QString> [optional]
    * @param[in]  filter_version_string QList<QString> [optional]
    * @param[in]  filter_app QList<QString> [optional]
    * @param[in]  filter_id QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_game_center_enabled_versions QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &filter_platform = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_version_string = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_app = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_game_center_enabled_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_game_center_enabled_version_compatible_versions_linkages_request OAIGameCenterEnabledVersionCompatibleVersionsLinkagesRequest [required]
    */
    virtual void gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship(const QString &id, const OAIGameCenterEnabledVersionCompatibleVersionsLinkagesRequest &oai_game_center_enabled_version_compatible_versions_linkages_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipSignal();
    void gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipSignal();
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedSignal(OAIGameCenterEnabledVersionsResponse summary);
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipSignal(OAIGameCenterEnabledVersionCompatibleVersionsLinkagesResponse summary);
    void gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipSignal();


    void gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIGameCenterEnabledVersionsResponse summary);
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIGameCenterEnabledVersionCompatibleVersionsLinkagesResponse summary);
    void gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipSignalError() instead")
    void gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipSignalError() instead")
    void gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedSignalError() instead")
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedSignalE(OAIGameCenterEnabledVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedSignalError(OAIGameCenterEnabledVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipSignalError() instead")
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipSignalE(OAIGameCenterEnabledVersionCompatibleVersionsLinkagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipSignalError(OAIGameCenterEnabledVersionCompatibleVersionsLinkagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipSignalError() instead")
    void gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipSignalErrorFull() instead")
    void gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipSignalErrorFull() instead")
    void gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedSignalErrorFull() instead")
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipSignalErrorFull() instead")
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipSignalErrorFull() instead")
    void gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
