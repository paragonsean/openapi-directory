/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserInvitationsApi_H
#define OAI_OAIUserInvitationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppsResponse.h"
#include "OAIErrorResponse.h"
#include "OAIUserInvitationCreateRequest.h"
#include "OAIUserInvitationResponse.h"
#include "OAIUserInvitationsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserInvitationsApi : public QObject {
    Q_OBJECT

public:
    OAIUserInvitationsApi(const int timeOut = 0);
    ~OAIUserInvitationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_user_invitation_create_request OAIUserInvitationCreateRequest [required]
    */
    virtual void userInvitationsCreateInstance(const OAIUserInvitationCreateRequest &oai_user_invitation_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void userInvitationsDeleteInstance(const QString &id);

    /**
    * @param[in]  filter_email QList<QString> [optional]
    * @param[in]  filter_roles QList<QString> [optional]
    * @param[in]  filter_visible_apps QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_user_invitations QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_visible_apps qint32 [optional]
    */
    virtual void userInvitationsGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_email = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_roles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_visible_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_user_invitations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_visible_apps = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_user_invitations QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_visible_apps qint32 [optional]
    */
    virtual void userInvitationsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_user_invitations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_visible_apps = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void userInvitationsVisibleAppsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void userInvitationsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void userInvitationsDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void userInvitationsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void userInvitationsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void userInvitationsVisibleAppsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void userInvitationsCreateInstanceSignal(OAIUserInvitationResponse summary);
    void userInvitationsDeleteInstanceSignal();
    void userInvitationsGetCollectionSignal(OAIUserInvitationsResponse summary);
    void userInvitationsGetInstanceSignal(OAIUserInvitationResponse summary);
    void userInvitationsVisibleAppsGetToManyRelatedSignal(OAIAppsResponse summary);


    void userInvitationsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIUserInvitationResponse summary);
    void userInvitationsDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void userInvitationsGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIUserInvitationsResponse summary);
    void userInvitationsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIUserInvitationResponse summary);
    void userInvitationsVisibleAppsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppsResponse summary);

    Q_DECL_DEPRECATED_X("Use userInvitationsCreateInstanceSignalError() instead")
    void userInvitationsCreateInstanceSignalE(OAIUserInvitationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userInvitationsCreateInstanceSignalError(OAIUserInvitationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userInvitationsDeleteInstanceSignalError() instead")
    void userInvitationsDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userInvitationsDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userInvitationsGetCollectionSignalError() instead")
    void userInvitationsGetCollectionSignalE(OAIUserInvitationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userInvitationsGetCollectionSignalError(OAIUserInvitationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userInvitationsGetInstanceSignalError() instead")
    void userInvitationsGetInstanceSignalE(OAIUserInvitationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userInvitationsGetInstanceSignalError(OAIUserInvitationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userInvitationsVisibleAppsGetToManyRelatedSignalError() instead")
    void userInvitationsVisibleAppsGetToManyRelatedSignalE(OAIAppsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userInvitationsVisibleAppsGetToManyRelatedSignalError(OAIAppsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use userInvitationsCreateInstanceSignalErrorFull() instead")
    void userInvitationsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userInvitationsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userInvitationsDeleteInstanceSignalErrorFull() instead")
    void userInvitationsDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userInvitationsDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userInvitationsGetCollectionSignalErrorFull() instead")
    void userInvitationsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userInvitationsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userInvitationsGetInstanceSignalErrorFull() instead")
    void userInvitationsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userInvitationsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userInvitationsVisibleAppsGetToManyRelatedSignalErrorFull() instead")
    void userInvitationsVisibleAppsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userInvitationsVisibleAppsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
