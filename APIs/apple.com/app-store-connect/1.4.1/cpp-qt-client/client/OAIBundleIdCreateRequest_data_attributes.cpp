/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBundleIdCreateRequest_data_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBundleIdCreateRequest_data_attributes::OAIBundleIdCreateRequest_data_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBundleIdCreateRequest_data_attributes::OAIBundleIdCreateRequest_data_attributes() {
    this->initializeModel();
}

OAIBundleIdCreateRequest_data_attributes::~OAIBundleIdCreateRequest_data_attributes() {}

void OAIBundleIdCreateRequest_data_attributes::initializeModel() {

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_seed_id_isSet = false;
    m_seed_id_isValid = false;
}

void OAIBundleIdCreateRequest_data_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBundleIdCreateRequest_data_attributes::fromJsonObject(QJsonObject json) {

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_seed_id_isValid = ::OpenAPI::fromJsonValue(m_seed_id, json[QString("seedId")]);
    m_seed_id_isSet = !json[QString("seedId")].isNull() && m_seed_id_isValid;
}

QString OAIBundleIdCreateRequest_data_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBundleIdCreateRequest_data_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_seed_id_isSet) {
        obj.insert(QString("seedId"), ::OpenAPI::toJsonValue(m_seed_id));
    }
    return obj;
}

QString OAIBundleIdCreateRequest_data_attributes::getIdentifier() const {
    return m_identifier;
}
void OAIBundleIdCreateRequest_data_attributes::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIBundleIdCreateRequest_data_attributes::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIBundleIdCreateRequest_data_attributes::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIBundleIdCreateRequest_data_attributes::getName() const {
    return m_name;
}
void OAIBundleIdCreateRequest_data_attributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBundleIdCreateRequest_data_attributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBundleIdCreateRequest_data_attributes::is_name_Valid() const{
    return m_name_isValid;
}

OAIBundleIdPlatform OAIBundleIdCreateRequest_data_attributes::getPlatform() const {
    return m_platform;
}
void OAIBundleIdCreateRequest_data_attributes::setPlatform(const OAIBundleIdPlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIBundleIdCreateRequest_data_attributes::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIBundleIdCreateRequest_data_attributes::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIBundleIdCreateRequest_data_attributes::getSeedId() const {
    return m_seed_id;
}
void OAIBundleIdCreateRequest_data_attributes::setSeedId(const QString &seed_id) {
    m_seed_id = seed_id;
    m_seed_id_isSet = true;
}

bool OAIBundleIdCreateRequest_data_attributes::is_seed_id_Set() const{
    return m_seed_id_isSet;
}

bool OAIBundleIdCreateRequest_data_attributes::is_seed_id_Valid() const{
    return m_seed_id_isValid;
}

bool OAIBundleIdCreateRequest_data_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seed_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBundleIdCreateRequest_data_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && m_name_isValid && m_platform_isValid && true;
}

} // namespace OpenAPI
