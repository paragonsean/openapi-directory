/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppScreenshotSetCreateRequest_data_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppScreenshotSetCreateRequest_data_attributes::OAIAppScreenshotSetCreateRequest_data_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppScreenshotSetCreateRequest_data_attributes::OAIAppScreenshotSetCreateRequest_data_attributes() {
    this->initializeModel();
}

OAIAppScreenshotSetCreateRequest_data_attributes::~OAIAppScreenshotSetCreateRequest_data_attributes() {}

void OAIAppScreenshotSetCreateRequest_data_attributes::initializeModel() {

    m_screenshot_display_type_isSet = false;
    m_screenshot_display_type_isValid = false;
}

void OAIAppScreenshotSetCreateRequest_data_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppScreenshotSetCreateRequest_data_attributes::fromJsonObject(QJsonObject json) {

    m_screenshot_display_type_isValid = ::OpenAPI::fromJsonValue(m_screenshot_display_type, json[QString("screenshotDisplayType")]);
    m_screenshot_display_type_isSet = !json[QString("screenshotDisplayType")].isNull() && m_screenshot_display_type_isValid;
}

QString OAIAppScreenshotSetCreateRequest_data_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppScreenshotSetCreateRequest_data_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_screenshot_display_type.isSet()) {
        obj.insert(QString("screenshotDisplayType"), ::OpenAPI::toJsonValue(m_screenshot_display_type));
    }
    return obj;
}

OAIScreenshotDisplayType OAIAppScreenshotSetCreateRequest_data_attributes::getScreenshotDisplayType() const {
    return m_screenshot_display_type;
}
void OAIAppScreenshotSetCreateRequest_data_attributes::setScreenshotDisplayType(const OAIScreenshotDisplayType &screenshot_display_type) {
    m_screenshot_display_type = screenshot_display_type;
    m_screenshot_display_type_isSet = true;
}

bool OAIAppScreenshotSetCreateRequest_data_attributes::is_screenshot_display_type_Set() const{
    return m_screenshot_display_type_isSet;
}

bool OAIAppScreenshotSetCreateRequest_data_attributes::is_screenshot_display_type_Valid() const{
    return m_screenshot_display_type_isValid;
}

bool OAIAppScreenshotSetCreateRequest_data_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_screenshot_display_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppScreenshotSetCreateRequest_data_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_screenshot_display_type_isValid && true;
}

} // namespace OpenAPI
