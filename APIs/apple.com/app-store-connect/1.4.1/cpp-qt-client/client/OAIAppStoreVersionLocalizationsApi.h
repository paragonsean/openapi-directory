/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppStoreVersionLocalizationsApi_H
#define OAI_OAIAppStoreVersionLocalizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppPreviewSetsResponse.h"
#include "OAIAppScreenshotSetsResponse.h"
#include "OAIAppStoreVersionLocalizationCreateRequest.h"
#include "OAIAppStoreVersionLocalizationResponse.h"
#include "OAIAppStoreVersionLocalizationUpdateRequest.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppStoreVersionLocalizationsApi : public QObject {
    Q_OBJECT

public:
    OAIAppStoreVersionLocalizationsApi(const int timeOut = 0);
    ~OAIAppStoreVersionLocalizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter_preview_type QList<QString> [optional]
    * @param[in]  fields_app_store_version_localizations QList<QString> [optional]
    * @param[in]  fields_app_previews QList<QString> [optional]
    * @param[in]  fields_app_preview_sets QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appStoreVersionLocalizationsAppPreviewSetsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &filter_preview_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_previews = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_preview_sets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter_screenshot_display_type QList<QString> [optional]
    * @param[in]  fields_app_store_version_localizations QList<QString> [optional]
    * @param[in]  fields_app_screenshot_sets QList<QString> [optional]
    * @param[in]  fields_app_screenshots QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &filter_screenshot_display_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_screenshot_sets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_screenshots = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_app_store_version_localization_create_request OAIAppStoreVersionLocalizationCreateRequest [required]
    */
    virtual void appStoreVersionLocalizationsCreateInstance(const OAIAppStoreVersionLocalizationCreateRequest &oai_app_store_version_localization_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void appStoreVersionLocalizationsDeleteInstance(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_store_version_localizations QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_app_screenshot_sets QList<QString> [optional]
    * @param[in]  fields_app_preview_sets QList<QString> [optional]
    * @param[in]  limit_app_preview_sets qint32 [optional]
    * @param[in]  limit_app_screenshot_sets qint32 [optional]
    */
    virtual void appStoreVersionLocalizationsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_screenshot_sets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_preview_sets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_app_preview_sets = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_app_screenshot_sets = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_app_store_version_localization_update_request OAIAppStoreVersionLocalizationUpdateRequest [required]
    */
    virtual void appStoreVersionLocalizationsUpdateInstance(const QString &id, const OAIAppStoreVersionLocalizationUpdateRequest &oai_app_store_version_localization_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionLocalizationsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionLocalizationsDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionLocalizationsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionLocalizationsUpdateInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedSignal(OAIAppPreviewSetsResponse summary);
    void appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedSignal(OAIAppScreenshotSetsResponse summary);
    void appStoreVersionLocalizationsCreateInstanceSignal(OAIAppStoreVersionLocalizationResponse summary);
    void appStoreVersionLocalizationsDeleteInstanceSignal();
    void appStoreVersionLocalizationsGetInstanceSignal(OAIAppStoreVersionLocalizationResponse summary);
    void appStoreVersionLocalizationsUpdateInstanceSignal(OAIAppStoreVersionLocalizationResponse summary);


    void appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppPreviewSetsResponse summary);
    void appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppScreenshotSetsResponse summary);
    void appStoreVersionLocalizationsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionLocalizationResponse summary);
    void appStoreVersionLocalizationsDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void appStoreVersionLocalizationsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionLocalizationResponse summary);
    void appStoreVersionLocalizationsUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionLocalizationResponse summary);

    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedSignalError() instead")
    void appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedSignalE(OAIAppPreviewSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedSignalError(OAIAppPreviewSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedSignalError() instead")
    void appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedSignalE(OAIAppScreenshotSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedSignalError(OAIAppScreenshotSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsCreateInstanceSignalError() instead")
    void appStoreVersionLocalizationsCreateInstanceSignalE(OAIAppStoreVersionLocalizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsCreateInstanceSignalError(OAIAppStoreVersionLocalizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsDeleteInstanceSignalError() instead")
    void appStoreVersionLocalizationsDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsGetInstanceSignalError() instead")
    void appStoreVersionLocalizationsGetInstanceSignalE(OAIAppStoreVersionLocalizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsGetInstanceSignalError(OAIAppStoreVersionLocalizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsUpdateInstanceSignalError() instead")
    void appStoreVersionLocalizationsUpdateInstanceSignalE(OAIAppStoreVersionLocalizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsUpdateInstanceSignalError(OAIAppStoreVersionLocalizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedSignalErrorFull() instead")
    void appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedSignalErrorFull() instead")
    void appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsCreateInstanceSignalErrorFull() instead")
    void appStoreVersionLocalizationsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsDeleteInstanceSignalErrorFull() instead")
    void appStoreVersionLocalizationsDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsGetInstanceSignalErrorFull() instead")
    void appStoreVersionLocalizationsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionLocalizationsUpdateInstanceSignalErrorFull() instead")
    void appStoreVersionLocalizationsUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionLocalizationsUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
