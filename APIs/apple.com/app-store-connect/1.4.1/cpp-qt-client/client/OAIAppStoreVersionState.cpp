/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppStoreVersionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppStoreVersionState::OAIAppStoreVersionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppStoreVersionState::OAIAppStoreVersionState() {
    this->initializeModel();
}

OAIAppStoreVersionState::~OAIAppStoreVersionState() {}

void OAIAppStoreVersionState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAppStoreVersionState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAppStoreVersionState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DEVELOPER_REMOVED_FROM_SALE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::DEVELOPER_REMOVED_FROM_SALE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEVELOPER_REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::DEVELOPER_REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_REVIEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::IN_REVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_BINARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::INVALID_BINARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METADATA_REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::METADATA_REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_APPLE_RELEASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::PENDING_APPLE_RELEASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_CONTRACT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::PENDING_CONTRACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_DEVELOPER_RELEASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::PENDING_DEVELOPER_RELEASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PREPARE_FOR_SUBMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::PREPARE_FOR_SUBMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PREORDER_READY_FOR_SALE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::PREORDER_READY_FOR_SALE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROCESSING_FOR_APP_STORE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::PROCESSING_FOR_APP_STORE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_SALE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::READY_FOR_SALE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOVED_FROM_SALE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::REMOVED_FROM_SALE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_FOR_EXPORT_COMPLIANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::WAITING_FOR_EXPORT_COMPLIANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_FOR_REVIEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::WAITING_FOR_REVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPLACED_WITH_NEW_VERSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppStoreVersionState::REPLACED_WITH_NEW_VERSION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAppStoreVersionState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAppStoreVersionState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAppStoreVersionState::DEVELOPER_REMOVED_FROM_SALE:
            val = "DEVELOPER_REMOVED_FROM_SALE";
            break;
        case eOAIAppStoreVersionState::DEVELOPER_REJECTED:
            val = "DEVELOPER_REJECTED";
            break;
        case eOAIAppStoreVersionState::IN_REVIEW:
            val = "IN_REVIEW";
            break;
        case eOAIAppStoreVersionState::INVALID_BINARY:
            val = "INVALID_BINARY";
            break;
        case eOAIAppStoreVersionState::METADATA_REJECTED:
            val = "METADATA_REJECTED";
            break;
        case eOAIAppStoreVersionState::PENDING_APPLE_RELEASE:
            val = "PENDING_APPLE_RELEASE";
            break;
        case eOAIAppStoreVersionState::PENDING_CONTRACT:
            val = "PENDING_CONTRACT";
            break;
        case eOAIAppStoreVersionState::PENDING_DEVELOPER_RELEASE:
            val = "PENDING_DEVELOPER_RELEASE";
            break;
        case eOAIAppStoreVersionState::PREPARE_FOR_SUBMISSION:
            val = "PREPARE_FOR_SUBMISSION";
            break;
        case eOAIAppStoreVersionState::PREORDER_READY_FOR_SALE:
            val = "PREORDER_READY_FOR_SALE";
            break;
        case eOAIAppStoreVersionState::PROCESSING_FOR_APP_STORE:
            val = "PROCESSING_FOR_APP_STORE";
            break;
        case eOAIAppStoreVersionState::READY_FOR_SALE:
            val = "READY_FOR_SALE";
            break;
        case eOAIAppStoreVersionState::REJECTED:
            val = "REJECTED";
            break;
        case eOAIAppStoreVersionState::REMOVED_FROM_SALE:
            val = "REMOVED_FROM_SALE";
            break;
        case eOAIAppStoreVersionState::WAITING_FOR_EXPORT_COMPLIANCE:
            val = "WAITING_FOR_EXPORT_COMPLIANCE";
            break;
        case eOAIAppStoreVersionState::WAITING_FOR_REVIEW:
            val = "WAITING_FOR_REVIEW";
            break;
        case eOAIAppStoreVersionState::REPLACED_WITH_NEW_VERSION:
            val = "REPLACED_WITH_NEW_VERSION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAppStoreVersionState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAppStoreVersionState::eOAIAppStoreVersionState OAIAppStoreVersionState::getValue() const {
    return m_value;
}

void OAIAppStoreVersionState::setValue(const OAIAppStoreVersionState::eOAIAppStoreVersionState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAppStoreVersionState::isSet() const {
    
    return m_value_isSet;
}

bool OAIAppStoreVersionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
