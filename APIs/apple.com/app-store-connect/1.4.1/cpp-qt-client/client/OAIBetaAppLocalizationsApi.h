/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBetaAppLocalizationsApi_H
#define OAI_OAIBetaAppLocalizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppResponse.h"
#include "OAIBetaAppLocalizationCreateRequest.h"
#include "OAIBetaAppLocalizationResponse.h"
#include "OAIBetaAppLocalizationUpdateRequest.h"
#include "OAIBetaAppLocalizationsResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBetaAppLocalizationsApi : public QObject {
    Q_OBJECT

public:
    OAIBetaAppLocalizationsApi(const int timeOut = 0);
    ~OAIBetaAppLocalizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void betaAppLocalizationsAppGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_beta_app_localization_create_request OAIBetaAppLocalizationCreateRequest [required]
    */
    virtual void betaAppLocalizationsCreateInstance(const OAIBetaAppLocalizationCreateRequest &oai_beta_app_localization_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void betaAppLocalizationsDeleteInstance(const QString &id);

    /**
    * @param[in]  filter_locale QList<QString> [optional]
    * @param[in]  filter_app QList<QString> [optional]
    * @param[in]  fields_beta_app_localizations QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void betaAppLocalizationsGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_locale = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_app = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_app_localizations QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void betaAppLocalizationsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_app_localization_update_request OAIBetaAppLocalizationUpdateRequest [required]
    */
    virtual void betaAppLocalizationsUpdateInstance(const QString &id, const OAIBetaAppLocalizationUpdateRequest &oai_beta_app_localization_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void betaAppLocalizationsAppGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void betaAppLocalizationsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void betaAppLocalizationsDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void betaAppLocalizationsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void betaAppLocalizationsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void betaAppLocalizationsUpdateInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void betaAppLocalizationsAppGetToOneRelatedSignal(OAIAppResponse summary);
    void betaAppLocalizationsCreateInstanceSignal(OAIBetaAppLocalizationResponse summary);
    void betaAppLocalizationsDeleteInstanceSignal();
    void betaAppLocalizationsGetCollectionSignal(OAIBetaAppLocalizationsResponse summary);
    void betaAppLocalizationsGetInstanceSignal(OAIBetaAppLocalizationResponse summary);
    void betaAppLocalizationsUpdateInstanceSignal(OAIBetaAppLocalizationResponse summary);


    void betaAppLocalizationsAppGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppResponse summary);
    void betaAppLocalizationsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppLocalizationResponse summary);
    void betaAppLocalizationsDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void betaAppLocalizationsGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppLocalizationsResponse summary);
    void betaAppLocalizationsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppLocalizationResponse summary);
    void betaAppLocalizationsUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppLocalizationResponse summary);

    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsAppGetToOneRelatedSignalError() instead")
    void betaAppLocalizationsAppGetToOneRelatedSignalE(OAIAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsAppGetToOneRelatedSignalError(OAIAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsCreateInstanceSignalError() instead")
    void betaAppLocalizationsCreateInstanceSignalE(OAIBetaAppLocalizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsCreateInstanceSignalError(OAIBetaAppLocalizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsDeleteInstanceSignalError() instead")
    void betaAppLocalizationsDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsGetCollectionSignalError() instead")
    void betaAppLocalizationsGetCollectionSignalE(OAIBetaAppLocalizationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsGetCollectionSignalError(OAIBetaAppLocalizationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsGetInstanceSignalError() instead")
    void betaAppLocalizationsGetInstanceSignalE(OAIBetaAppLocalizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsGetInstanceSignalError(OAIBetaAppLocalizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsUpdateInstanceSignalError() instead")
    void betaAppLocalizationsUpdateInstanceSignalE(OAIBetaAppLocalizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsUpdateInstanceSignalError(OAIBetaAppLocalizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsAppGetToOneRelatedSignalErrorFull() instead")
    void betaAppLocalizationsAppGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsAppGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsCreateInstanceSignalErrorFull() instead")
    void betaAppLocalizationsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsDeleteInstanceSignalErrorFull() instead")
    void betaAppLocalizationsDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsGetCollectionSignalErrorFull() instead")
    void betaAppLocalizationsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsGetInstanceSignalErrorFull() instead")
    void betaAppLocalizationsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppLocalizationsUpdateInstanceSignalErrorFull() instead")
    void betaAppLocalizationsUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppLocalizationsUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
