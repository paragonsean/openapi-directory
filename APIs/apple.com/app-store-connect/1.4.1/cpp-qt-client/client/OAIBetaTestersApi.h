/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBetaTestersApi_H
#define OAI_OAIBetaTestersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppsResponse.h"
#include "OAIBetaGroupsResponse.h"
#include "OAIBetaTesterAppsLinkagesRequest.h"
#include "OAIBetaTesterAppsLinkagesResponse.h"
#include "OAIBetaTesterBetaGroupsLinkagesRequest.h"
#include "OAIBetaTesterBetaGroupsLinkagesResponse.h"
#include "OAIBetaTesterBuildsLinkagesRequest.h"
#include "OAIBetaTesterBuildsLinkagesResponse.h"
#include "OAIBetaTesterCreateRequest.h"
#include "OAIBetaTesterResponse.h"
#include "OAIBetaTestersResponse.h"
#include "OAIBuildsResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBetaTestersApi : public QObject {
    Q_OBJECT

public:
    OAIBetaTestersApi(const int timeOut = 0);
    ~OAIBetaTestersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_tester_apps_linkages_request OAIBetaTesterAppsLinkagesRequest [required]
    */
    virtual void betaTestersAppsDeleteToManyRelationship(const QString &id, const OAIBetaTesterAppsLinkagesRequest &oai_beta_tester_apps_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void betaTestersAppsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void betaTestersAppsGetToManyRelationship(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_tester_beta_groups_linkages_request OAIBetaTesterBetaGroupsLinkagesRequest [required]
    */
    virtual void betaTestersBetaGroupsCreateToManyRelationship(const QString &id, const OAIBetaTesterBetaGroupsLinkagesRequest &oai_beta_tester_beta_groups_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_tester_beta_groups_linkages_request OAIBetaTesterBetaGroupsLinkagesRequest [required]
    */
    virtual void betaTestersBetaGroupsDeleteToManyRelationship(const QString &id, const OAIBetaTesterBetaGroupsLinkagesRequest &oai_beta_tester_beta_groups_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void betaTestersBetaGroupsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void betaTestersBetaGroupsGetToManyRelationship(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_tester_builds_linkages_request OAIBetaTesterBuildsLinkagesRequest [required]
    */
    virtual void betaTestersBuildsCreateToManyRelationship(const QString &id, const OAIBetaTesterBuildsLinkagesRequest &oai_beta_tester_builds_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_beta_tester_builds_linkages_request OAIBetaTesterBuildsLinkagesRequest [required]
    */
    virtual void betaTestersBuildsDeleteToManyRelationship(const QString &id, const OAIBetaTesterBuildsLinkagesRequest &oai_beta_tester_builds_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void betaTestersBuildsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void betaTestersBuildsGetToManyRelationship(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_beta_tester_create_request OAIBetaTesterCreateRequest [required]
    */
    virtual void betaTestersCreateInstance(const OAIBetaTesterCreateRequest &oai_beta_tester_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void betaTestersDeleteInstance(const QString &id);

    /**
    * @param[in]  filter_email QList<QString> [optional]
    * @param[in]  filter_first_name QList<QString> [optional]
    * @param[in]  filter_invite_type QList<QString> [optional]
    * @param[in]  filter_last_name QList<QString> [optional]
    * @param[in]  filter_apps QList<QString> [optional]
    * @param[in]  filter_beta_groups QList<QString> [optional]
    * @param[in]  filter_builds QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_beta_testers QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_beta_groups QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_apps qint32 [optional]
    * @param[in]  limit_beta_groups qint32 [optional]
    * @param[in]  limit_builds qint32 [optional]
    */
    virtual void betaTestersGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_email = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_first_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_invite_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_last_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_beta_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_testers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_apps = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_beta_groups = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_builds = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_testers QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_beta_groups QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_apps qint32 [optional]
    * @param[in]  limit_beta_groups qint32 [optional]
    * @param[in]  limit_builds qint32 [optional]
    */
    virtual void betaTestersGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_testers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_apps = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_beta_groups = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit_builds = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void betaTestersAppsDeleteToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaTestersAppsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void betaTestersAppsGetToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaTestersBetaGroupsCreateToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaTestersBetaGroupsDeleteToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaTestersBetaGroupsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void betaTestersBetaGroupsGetToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaTestersBuildsCreateToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaTestersBuildsDeleteToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaTestersBuildsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void betaTestersBuildsGetToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void betaTestersCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void betaTestersDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void betaTestersGetCollectionCallback(OAIHttpRequestWorker *worker);
    void betaTestersGetInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void betaTestersAppsDeleteToManyRelationshipSignal();
    void betaTestersAppsGetToManyRelatedSignal(OAIAppsResponse summary);
    void betaTestersAppsGetToManyRelationshipSignal(OAIBetaTesterAppsLinkagesResponse summary);
    void betaTestersBetaGroupsCreateToManyRelationshipSignal();
    void betaTestersBetaGroupsDeleteToManyRelationshipSignal();
    void betaTestersBetaGroupsGetToManyRelatedSignal(OAIBetaGroupsResponse summary);
    void betaTestersBetaGroupsGetToManyRelationshipSignal(OAIBetaTesterBetaGroupsLinkagesResponse summary);
    void betaTestersBuildsCreateToManyRelationshipSignal();
    void betaTestersBuildsDeleteToManyRelationshipSignal();
    void betaTestersBuildsGetToManyRelatedSignal(OAIBuildsResponse summary);
    void betaTestersBuildsGetToManyRelationshipSignal(OAIBetaTesterBuildsLinkagesResponse summary);
    void betaTestersCreateInstanceSignal(OAIBetaTesterResponse summary);
    void betaTestersDeleteInstanceSignal();
    void betaTestersGetCollectionSignal(OAIBetaTestersResponse summary);
    void betaTestersGetInstanceSignal(OAIBetaTesterResponse summary);


    void betaTestersAppsDeleteToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void betaTestersAppsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppsResponse summary);
    void betaTestersAppsGetToManyRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIBetaTesterAppsLinkagesResponse summary);
    void betaTestersBetaGroupsCreateToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void betaTestersBetaGroupsDeleteToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void betaTestersBetaGroupsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBetaGroupsResponse summary);
    void betaTestersBetaGroupsGetToManyRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIBetaTesterBetaGroupsLinkagesResponse summary);
    void betaTestersBuildsCreateToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void betaTestersBuildsDeleteToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void betaTestersBuildsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBuildsResponse summary);
    void betaTestersBuildsGetToManyRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIBetaTesterBuildsLinkagesResponse summary);
    void betaTestersCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaTesterResponse summary);
    void betaTestersDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void betaTestersGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIBetaTestersResponse summary);
    void betaTestersGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaTesterResponse summary);

    Q_DECL_DEPRECATED_X("Use betaTestersAppsDeleteToManyRelationshipSignalError() instead")
    void betaTestersAppsDeleteToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersAppsDeleteToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersAppsGetToManyRelatedSignalError() instead")
    void betaTestersAppsGetToManyRelatedSignalE(OAIAppsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersAppsGetToManyRelatedSignalError(OAIAppsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersAppsGetToManyRelationshipSignalError() instead")
    void betaTestersAppsGetToManyRelationshipSignalE(OAIBetaTesterAppsLinkagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersAppsGetToManyRelationshipSignalError(OAIBetaTesterAppsLinkagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBetaGroupsCreateToManyRelationshipSignalError() instead")
    void betaTestersBetaGroupsCreateToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBetaGroupsCreateToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBetaGroupsDeleteToManyRelationshipSignalError() instead")
    void betaTestersBetaGroupsDeleteToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBetaGroupsDeleteToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBetaGroupsGetToManyRelatedSignalError() instead")
    void betaTestersBetaGroupsGetToManyRelatedSignalE(OAIBetaGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBetaGroupsGetToManyRelatedSignalError(OAIBetaGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBetaGroupsGetToManyRelationshipSignalError() instead")
    void betaTestersBetaGroupsGetToManyRelationshipSignalE(OAIBetaTesterBetaGroupsLinkagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBetaGroupsGetToManyRelationshipSignalError(OAIBetaTesterBetaGroupsLinkagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBuildsCreateToManyRelationshipSignalError() instead")
    void betaTestersBuildsCreateToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBuildsCreateToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBuildsDeleteToManyRelationshipSignalError() instead")
    void betaTestersBuildsDeleteToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBuildsDeleteToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBuildsGetToManyRelatedSignalError() instead")
    void betaTestersBuildsGetToManyRelatedSignalE(OAIBuildsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBuildsGetToManyRelatedSignalError(OAIBuildsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBuildsGetToManyRelationshipSignalError() instead")
    void betaTestersBuildsGetToManyRelationshipSignalE(OAIBetaTesterBuildsLinkagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBuildsGetToManyRelationshipSignalError(OAIBetaTesterBuildsLinkagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersCreateInstanceSignalError() instead")
    void betaTestersCreateInstanceSignalE(OAIBetaTesterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersCreateInstanceSignalError(OAIBetaTesterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersDeleteInstanceSignalError() instead")
    void betaTestersDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersGetCollectionSignalError() instead")
    void betaTestersGetCollectionSignalE(OAIBetaTestersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersGetCollectionSignalError(OAIBetaTestersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersGetInstanceSignalError() instead")
    void betaTestersGetInstanceSignalE(OAIBetaTesterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersGetInstanceSignalError(OAIBetaTesterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use betaTestersAppsDeleteToManyRelationshipSignalErrorFull() instead")
    void betaTestersAppsDeleteToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersAppsDeleteToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersAppsGetToManyRelatedSignalErrorFull() instead")
    void betaTestersAppsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersAppsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersAppsGetToManyRelationshipSignalErrorFull() instead")
    void betaTestersAppsGetToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersAppsGetToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBetaGroupsCreateToManyRelationshipSignalErrorFull() instead")
    void betaTestersBetaGroupsCreateToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBetaGroupsCreateToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBetaGroupsDeleteToManyRelationshipSignalErrorFull() instead")
    void betaTestersBetaGroupsDeleteToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBetaGroupsDeleteToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBetaGroupsGetToManyRelatedSignalErrorFull() instead")
    void betaTestersBetaGroupsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBetaGroupsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBetaGroupsGetToManyRelationshipSignalErrorFull() instead")
    void betaTestersBetaGroupsGetToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBetaGroupsGetToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBuildsCreateToManyRelationshipSignalErrorFull() instead")
    void betaTestersBuildsCreateToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBuildsCreateToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBuildsDeleteToManyRelationshipSignalErrorFull() instead")
    void betaTestersBuildsDeleteToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBuildsDeleteToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBuildsGetToManyRelatedSignalErrorFull() instead")
    void betaTestersBuildsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBuildsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersBuildsGetToManyRelationshipSignalErrorFull() instead")
    void betaTestersBuildsGetToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersBuildsGetToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersCreateInstanceSignalErrorFull() instead")
    void betaTestersCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersDeleteInstanceSignalErrorFull() instead")
    void betaTestersDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersGetCollectionSignalErrorFull() instead")
    void betaTestersGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaTestersGetInstanceSignalErrorFull() instead")
    void betaTestersGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaTestersGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
