/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildUpdateRequest_data_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildUpdateRequest_data_attributes::OAIBuildUpdateRequest_data_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildUpdateRequest_data_attributes::OAIBuildUpdateRequest_data_attributes() {
    this->initializeModel();
}

OAIBuildUpdateRequest_data_attributes::~OAIBuildUpdateRequest_data_attributes() {}

void OAIBuildUpdateRequest_data_attributes::initializeModel() {

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_uses_non_exempt_encryption_isSet = false;
    m_uses_non_exempt_encryption_isValid = false;
}

void OAIBuildUpdateRequest_data_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildUpdateRequest_data_attributes::fromJsonObject(QJsonObject json) {

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_uses_non_exempt_encryption_isValid = ::OpenAPI::fromJsonValue(m_uses_non_exempt_encryption, json[QString("usesNonExemptEncryption")]);
    m_uses_non_exempt_encryption_isSet = !json[QString("usesNonExemptEncryption")].isNull() && m_uses_non_exempt_encryption_isValid;
}

QString OAIBuildUpdateRequest_data_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildUpdateRequest_data_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_uses_non_exempt_encryption_isSet) {
        obj.insert(QString("usesNonExemptEncryption"), ::OpenAPI::toJsonValue(m_uses_non_exempt_encryption));
    }
    return obj;
}

bool OAIBuildUpdateRequest_data_attributes::isExpired() const {
    return m_expired;
}
void OAIBuildUpdateRequest_data_attributes::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAIBuildUpdateRequest_data_attributes::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAIBuildUpdateRequest_data_attributes::is_expired_Valid() const{
    return m_expired_isValid;
}

bool OAIBuildUpdateRequest_data_attributes::isUsesNonExemptEncryption() const {
    return m_uses_non_exempt_encryption;
}
void OAIBuildUpdateRequest_data_attributes::setUsesNonExemptEncryption(const bool &uses_non_exempt_encryption) {
    m_uses_non_exempt_encryption = uses_non_exempt_encryption;
    m_uses_non_exempt_encryption_isSet = true;
}

bool OAIBuildUpdateRequest_data_attributes::is_uses_non_exempt_encryption_Set() const{
    return m_uses_non_exempt_encryption_isSet;
}

bool OAIBuildUpdateRequest_data_attributes::is_uses_non_exempt_encryption_Valid() const{
    return m_uses_non_exempt_encryption_isValid;
}

bool OAIBuildUpdateRequest_data_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_non_exempt_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildUpdateRequest_data_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
