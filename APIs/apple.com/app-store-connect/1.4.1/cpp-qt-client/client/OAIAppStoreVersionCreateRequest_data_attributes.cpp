/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppStoreVersionCreateRequest_data_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppStoreVersionCreateRequest_data_attributes::OAIAppStoreVersionCreateRequest_data_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppStoreVersionCreateRequest_data_attributes::OAIAppStoreVersionCreateRequest_data_attributes() {
    this->initializeModel();
}

OAIAppStoreVersionCreateRequest_data_attributes::~OAIAppStoreVersionCreateRequest_data_attributes() {}

void OAIAppStoreVersionCreateRequest_data_attributes::initializeModel() {

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_earliest_release_date_isSet = false;
    m_earliest_release_date_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_release_type_isSet = false;
    m_release_type_isValid = false;

    m_uses_idfa_isSet = false;
    m_uses_idfa_isValid = false;

    m_version_string_isSet = false;
    m_version_string_isValid = false;
}

void OAIAppStoreVersionCreateRequest_data_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppStoreVersionCreateRequest_data_attributes::fromJsonObject(QJsonObject json) {

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_earliest_release_date_isValid = ::OpenAPI::fromJsonValue(m_earliest_release_date, json[QString("earliestReleaseDate")]);
    m_earliest_release_date_isSet = !json[QString("earliestReleaseDate")].isNull() && m_earliest_release_date_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_release_type_isValid = ::OpenAPI::fromJsonValue(m_release_type, json[QString("releaseType")]);
    m_release_type_isSet = !json[QString("releaseType")].isNull() && m_release_type_isValid;

    m_uses_idfa_isValid = ::OpenAPI::fromJsonValue(m_uses_idfa, json[QString("usesIdfa")]);
    m_uses_idfa_isSet = !json[QString("usesIdfa")].isNull() && m_uses_idfa_isValid;

    m_version_string_isValid = ::OpenAPI::fromJsonValue(m_version_string, json[QString("versionString")]);
    m_version_string_isSet = !json[QString("versionString")].isNull() && m_version_string_isValid;
}

QString OAIAppStoreVersionCreateRequest_data_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppStoreVersionCreateRequest_data_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_earliest_release_date_isSet) {
        obj.insert(QString("earliestReleaseDate"), ::OpenAPI::toJsonValue(m_earliest_release_date));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_release_type_isSet) {
        obj.insert(QString("releaseType"), ::OpenAPI::toJsonValue(m_release_type));
    }
    if (m_uses_idfa_isSet) {
        obj.insert(QString("usesIdfa"), ::OpenAPI::toJsonValue(m_uses_idfa));
    }
    if (m_version_string_isSet) {
        obj.insert(QString("versionString"), ::OpenAPI::toJsonValue(m_version_string));
    }
    return obj;
}

QString OAIAppStoreVersionCreateRequest_data_attributes::getCopyright() const {
    return m_copyright;
}
void OAIAppStoreVersionCreateRequest_data_attributes::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QDateTime OAIAppStoreVersionCreateRequest_data_attributes::getEarliestReleaseDate() const {
    return m_earliest_release_date;
}
void OAIAppStoreVersionCreateRequest_data_attributes::setEarliestReleaseDate(const QDateTime &earliest_release_date) {
    m_earliest_release_date = earliest_release_date;
    m_earliest_release_date_isSet = true;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_earliest_release_date_Set() const{
    return m_earliest_release_date_isSet;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_earliest_release_date_Valid() const{
    return m_earliest_release_date_isValid;
}

OAIPlatform OAIAppStoreVersionCreateRequest_data_attributes::getPlatform() const {
    return m_platform;
}
void OAIAppStoreVersionCreateRequest_data_attributes::setPlatform(const OAIPlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIAppStoreVersionCreateRequest_data_attributes::getReleaseType() const {
    return m_release_type;
}
void OAIAppStoreVersionCreateRequest_data_attributes::setReleaseType(const QString &release_type) {
    m_release_type = release_type;
    m_release_type_isSet = true;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_release_type_Set() const{
    return m_release_type_isSet;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_release_type_Valid() const{
    return m_release_type_isValid;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::isUsesIdfa() const {
    return m_uses_idfa;
}
void OAIAppStoreVersionCreateRequest_data_attributes::setUsesIdfa(const bool &uses_idfa) {
    m_uses_idfa = uses_idfa;
    m_uses_idfa_isSet = true;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_uses_idfa_Set() const{
    return m_uses_idfa_isSet;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_uses_idfa_Valid() const{
    return m_uses_idfa_isValid;
}

QString OAIAppStoreVersionCreateRequest_data_attributes::getVersionString() const {
    return m_version_string;
}
void OAIAppStoreVersionCreateRequest_data_attributes::setVersionString(const QString &version_string) {
    m_version_string = version_string;
    m_version_string_isSet = true;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_version_string_Set() const{
    return m_version_string_isSet;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::is_version_string_Valid() const{
    return m_version_string_isValid;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_idfa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppStoreVersionCreateRequest_data_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_platform_isValid && m_version_string_isValid && true;
}

} // namespace OpenAPI
