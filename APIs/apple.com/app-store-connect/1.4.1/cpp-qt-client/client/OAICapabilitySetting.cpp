/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapabilitySetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapabilitySetting::OAICapabilitySetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapabilitySetting::OAICapabilitySetting() {
    this->initializeModel();
}

OAICapabilitySetting::~OAICapabilitySetting() {}

void OAICapabilitySetting::initializeModel() {

    m_allowed_instances_isSet = false;
    m_allowed_instances_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_by_default_isSet = false;
    m_enabled_by_default_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_min_instances_isSet = false;
    m_min_instances_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;
}

void OAICapabilitySetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapabilitySetting::fromJsonObject(QJsonObject json) {

    m_allowed_instances_isValid = ::OpenAPI::fromJsonValue(m_allowed_instances, json[QString("allowedInstances")]);
    m_allowed_instances_isSet = !json[QString("allowedInstances")].isNull() && m_allowed_instances_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_by_default_isValid = ::OpenAPI::fromJsonValue(m_enabled_by_default, json[QString("enabledByDefault")]);
    m_enabled_by_default_isSet = !json[QString("enabledByDefault")].isNull() && m_enabled_by_default_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_min_instances_isValid = ::OpenAPI::fromJsonValue(m_min_instances, json[QString("minInstances")]);
    m_min_instances_isSet = !json[QString("minInstances")].isNull() && m_min_instances_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;
}

QString OAICapabilitySetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapabilitySetting::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_instances_isSet) {
        obj.insert(QString("allowedInstances"), ::OpenAPI::toJsonValue(m_allowed_instances));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_by_default_isSet) {
        obj.insert(QString("enabledByDefault"), ::OpenAPI::toJsonValue(m_enabled_by_default));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_min_instances_isSet) {
        obj.insert(QString("minInstances"), ::OpenAPI::toJsonValue(m_min_instances));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    return obj;
}

QString OAICapabilitySetting::getAllowedInstances() const {
    return m_allowed_instances;
}
void OAICapabilitySetting::setAllowedInstances(const QString &allowed_instances) {
    m_allowed_instances = allowed_instances;
    m_allowed_instances_isSet = true;
}

bool OAICapabilitySetting::is_allowed_instances_Set() const{
    return m_allowed_instances_isSet;
}

bool OAICapabilitySetting::is_allowed_instances_Valid() const{
    return m_allowed_instances_isValid;
}

QString OAICapabilitySetting::getDescription() const {
    return m_description;
}
void OAICapabilitySetting::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICapabilitySetting::is_description_Set() const{
    return m_description_isSet;
}

bool OAICapabilitySetting::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICapabilitySetting::isEnabledByDefault() const {
    return m_enabled_by_default;
}
void OAICapabilitySetting::setEnabledByDefault(const bool &enabled_by_default) {
    m_enabled_by_default = enabled_by_default;
    m_enabled_by_default_isSet = true;
}

bool OAICapabilitySetting::is_enabled_by_default_Set() const{
    return m_enabled_by_default_isSet;
}

bool OAICapabilitySetting::is_enabled_by_default_Valid() const{
    return m_enabled_by_default_isValid;
}

QString OAICapabilitySetting::getKey() const {
    return m_key;
}
void OAICapabilitySetting::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICapabilitySetting::is_key_Set() const{
    return m_key_isSet;
}

bool OAICapabilitySetting::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAICapabilitySetting::getMinInstances() const {
    return m_min_instances;
}
void OAICapabilitySetting::setMinInstances(const qint32 &min_instances) {
    m_min_instances = min_instances;
    m_min_instances_isSet = true;
}

bool OAICapabilitySetting::is_min_instances_Set() const{
    return m_min_instances_isSet;
}

bool OAICapabilitySetting::is_min_instances_Valid() const{
    return m_min_instances_isValid;
}

QString OAICapabilitySetting::getName() const {
    return m_name;
}
void OAICapabilitySetting::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICapabilitySetting::is_name_Set() const{
    return m_name_isSet;
}

bool OAICapabilitySetting::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAICapabilityOption> OAICapabilitySetting::getOptions() const {
    return m_options;
}
void OAICapabilitySetting::setOptions(const QList<OAICapabilityOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAICapabilitySetting::is_options_Set() const{
    return m_options_isSet;
}

bool OAICapabilitySetting::is_options_Valid() const{
    return m_options_isValid;
}

bool OAICapabilitySetting::isVisible() const {
    return m_visible;
}
void OAICapabilitySetting::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAICapabilitySetting::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAICapabilitySetting::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAICapabilitySetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_by_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapabilitySetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
