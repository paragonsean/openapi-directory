/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBetaGroup_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBetaGroup_attributes::OAIBetaGroup_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBetaGroup_attributes::OAIBetaGroup_attributes() {
    this->initializeModel();
}

OAIBetaGroup_attributes::~OAIBetaGroup_attributes() {}

void OAIBetaGroup_attributes::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_feedback_enabled_isSet = false;
    m_feedback_enabled_isValid = false;

    m_is_internal_group_isSet = false;
    m_is_internal_group_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_public_link_isSet = false;
    m_public_link_isValid = false;

    m_public_link_enabled_isSet = false;
    m_public_link_enabled_isValid = false;

    m_public_link_id_isSet = false;
    m_public_link_id_isValid = false;

    m_public_link_limit_isSet = false;
    m_public_link_limit_isValid = false;

    m_public_link_limit_enabled_isSet = false;
    m_public_link_limit_enabled_isValid = false;
}

void OAIBetaGroup_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBetaGroup_attributes::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_feedback_enabled_isValid = ::OpenAPI::fromJsonValue(m_feedback_enabled, json[QString("feedbackEnabled")]);
    m_feedback_enabled_isSet = !json[QString("feedbackEnabled")].isNull() && m_feedback_enabled_isValid;

    m_is_internal_group_isValid = ::OpenAPI::fromJsonValue(m_is_internal_group, json[QString("isInternalGroup")]);
    m_is_internal_group_isSet = !json[QString("isInternalGroup")].isNull() && m_is_internal_group_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_public_link_isValid = ::OpenAPI::fromJsonValue(m_public_link, json[QString("publicLink")]);
    m_public_link_isSet = !json[QString("publicLink")].isNull() && m_public_link_isValid;

    m_public_link_enabled_isValid = ::OpenAPI::fromJsonValue(m_public_link_enabled, json[QString("publicLinkEnabled")]);
    m_public_link_enabled_isSet = !json[QString("publicLinkEnabled")].isNull() && m_public_link_enabled_isValid;

    m_public_link_id_isValid = ::OpenAPI::fromJsonValue(m_public_link_id, json[QString("publicLinkId")]);
    m_public_link_id_isSet = !json[QString("publicLinkId")].isNull() && m_public_link_id_isValid;

    m_public_link_limit_isValid = ::OpenAPI::fromJsonValue(m_public_link_limit, json[QString("publicLinkLimit")]);
    m_public_link_limit_isSet = !json[QString("publicLinkLimit")].isNull() && m_public_link_limit_isValid;

    m_public_link_limit_enabled_isValid = ::OpenAPI::fromJsonValue(m_public_link_limit_enabled, json[QString("publicLinkLimitEnabled")]);
    m_public_link_limit_enabled_isSet = !json[QString("publicLinkLimitEnabled")].isNull() && m_public_link_limit_enabled_isValid;
}

QString OAIBetaGroup_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBetaGroup_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_feedback_enabled_isSet) {
        obj.insert(QString("feedbackEnabled"), ::OpenAPI::toJsonValue(m_feedback_enabled));
    }
    if (m_is_internal_group_isSet) {
        obj.insert(QString("isInternalGroup"), ::OpenAPI::toJsonValue(m_is_internal_group));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_public_link_isSet) {
        obj.insert(QString("publicLink"), ::OpenAPI::toJsonValue(m_public_link));
    }
    if (m_public_link_enabled_isSet) {
        obj.insert(QString("publicLinkEnabled"), ::OpenAPI::toJsonValue(m_public_link_enabled));
    }
    if (m_public_link_id_isSet) {
        obj.insert(QString("publicLinkId"), ::OpenAPI::toJsonValue(m_public_link_id));
    }
    if (m_public_link_limit_isSet) {
        obj.insert(QString("publicLinkLimit"), ::OpenAPI::toJsonValue(m_public_link_limit));
    }
    if (m_public_link_limit_enabled_isSet) {
        obj.insert(QString("publicLinkLimitEnabled"), ::OpenAPI::toJsonValue(m_public_link_limit_enabled));
    }
    return obj;
}

QDateTime OAIBetaGroup_attributes::getCreatedDate() const {
    return m_created_date;
}
void OAIBetaGroup_attributes::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIBetaGroup_attributes::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIBetaGroup_attributes::is_created_date_Valid() const{
    return m_created_date_isValid;
}

bool OAIBetaGroup_attributes::isFeedbackEnabled() const {
    return m_feedback_enabled;
}
void OAIBetaGroup_attributes::setFeedbackEnabled(const bool &feedback_enabled) {
    m_feedback_enabled = feedback_enabled;
    m_feedback_enabled_isSet = true;
}

bool OAIBetaGroup_attributes::is_feedback_enabled_Set() const{
    return m_feedback_enabled_isSet;
}

bool OAIBetaGroup_attributes::is_feedback_enabled_Valid() const{
    return m_feedback_enabled_isValid;
}

bool OAIBetaGroup_attributes::isIsInternalGroup() const {
    return m_is_internal_group;
}
void OAIBetaGroup_attributes::setIsInternalGroup(const bool &is_internal_group) {
    m_is_internal_group = is_internal_group;
    m_is_internal_group_isSet = true;
}

bool OAIBetaGroup_attributes::is_is_internal_group_Set() const{
    return m_is_internal_group_isSet;
}

bool OAIBetaGroup_attributes::is_is_internal_group_Valid() const{
    return m_is_internal_group_isValid;
}

QString OAIBetaGroup_attributes::getName() const {
    return m_name;
}
void OAIBetaGroup_attributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBetaGroup_attributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBetaGroup_attributes::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBetaGroup_attributes::getPublicLink() const {
    return m_public_link;
}
void OAIBetaGroup_attributes::setPublicLink(const QString &public_link) {
    m_public_link = public_link;
    m_public_link_isSet = true;
}

bool OAIBetaGroup_attributes::is_public_link_Set() const{
    return m_public_link_isSet;
}

bool OAIBetaGroup_attributes::is_public_link_Valid() const{
    return m_public_link_isValid;
}

bool OAIBetaGroup_attributes::isPublicLinkEnabled() const {
    return m_public_link_enabled;
}
void OAIBetaGroup_attributes::setPublicLinkEnabled(const bool &public_link_enabled) {
    m_public_link_enabled = public_link_enabled;
    m_public_link_enabled_isSet = true;
}

bool OAIBetaGroup_attributes::is_public_link_enabled_Set() const{
    return m_public_link_enabled_isSet;
}

bool OAIBetaGroup_attributes::is_public_link_enabled_Valid() const{
    return m_public_link_enabled_isValid;
}

QString OAIBetaGroup_attributes::getPublicLinkId() const {
    return m_public_link_id;
}
void OAIBetaGroup_attributes::setPublicLinkId(const QString &public_link_id) {
    m_public_link_id = public_link_id;
    m_public_link_id_isSet = true;
}

bool OAIBetaGroup_attributes::is_public_link_id_Set() const{
    return m_public_link_id_isSet;
}

bool OAIBetaGroup_attributes::is_public_link_id_Valid() const{
    return m_public_link_id_isValid;
}

qint32 OAIBetaGroup_attributes::getPublicLinkLimit() const {
    return m_public_link_limit;
}
void OAIBetaGroup_attributes::setPublicLinkLimit(const qint32 &public_link_limit) {
    m_public_link_limit = public_link_limit;
    m_public_link_limit_isSet = true;
}

bool OAIBetaGroup_attributes::is_public_link_limit_Set() const{
    return m_public_link_limit_isSet;
}

bool OAIBetaGroup_attributes::is_public_link_limit_Valid() const{
    return m_public_link_limit_isValid;
}

bool OAIBetaGroup_attributes::isPublicLinkLimitEnabled() const {
    return m_public_link_limit_enabled;
}
void OAIBetaGroup_attributes::setPublicLinkLimitEnabled(const bool &public_link_limit_enabled) {
    m_public_link_limit_enabled = public_link_limit_enabled;
    m_public_link_limit_enabled_isSet = true;
}

bool OAIBetaGroup_attributes::is_public_link_limit_enabled_Set() const{
    return m_public_link_limit_enabled_isSet;
}

bool OAIBetaGroup_attributes::is_public_link_limit_enabled_Valid() const{
    return m_public_link_limit_enabled_isValid;
}

bool OAIBetaGroup_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_internal_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_link_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_link_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_link_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_link_limit_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBetaGroup_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
