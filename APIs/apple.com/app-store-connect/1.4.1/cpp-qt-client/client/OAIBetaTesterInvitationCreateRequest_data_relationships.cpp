/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBetaTesterInvitationCreateRequest_data_relationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBetaTesterInvitationCreateRequest_data_relationships::OAIBetaTesterInvitationCreateRequest_data_relationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBetaTesterInvitationCreateRequest_data_relationships::OAIBetaTesterInvitationCreateRequest_data_relationships() {
    this->initializeModel();
}

OAIBetaTesterInvitationCreateRequest_data_relationships::~OAIBetaTesterInvitationCreateRequest_data_relationships() {}

void OAIBetaTesterInvitationCreateRequest_data_relationships::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_beta_tester_isSet = false;
    m_beta_tester_isValid = false;
}

void OAIBetaTesterInvitationCreateRequest_data_relationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBetaTesterInvitationCreateRequest_data_relationships::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_beta_tester_isValid = ::OpenAPI::fromJsonValue(m_beta_tester, json[QString("betaTester")]);
    m_beta_tester_isSet = !json[QString("betaTester")].isNull() && m_beta_tester_isValid;
}

QString OAIBetaTesterInvitationCreateRequest_data_relationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBetaTesterInvitationCreateRequest_data_relationships::asJsonObject() const {
    QJsonObject obj;
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_beta_tester.isSet()) {
        obj.insert(QString("betaTester"), ::OpenAPI::toJsonValue(m_beta_tester));
    }
    return obj;
}

OAIAppPreOrderCreateRequest_data_relationships_app OAIBetaTesterInvitationCreateRequest_data_relationships::getApp() const {
    return m_app;
}
void OAIBetaTesterInvitationCreateRequest_data_relationships::setApp(const OAIAppPreOrderCreateRequest_data_relationships_app &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIBetaTesterInvitationCreateRequest_data_relationships::is_app_Set() const{
    return m_app_isSet;
}

bool OAIBetaTesterInvitationCreateRequest_data_relationships::is_app_Valid() const{
    return m_app_isValid;
}

OAIBetaTesterInvitationCreateRequest_data_relationships_betaTester OAIBetaTesterInvitationCreateRequest_data_relationships::getBetaTester() const {
    return m_beta_tester;
}
void OAIBetaTesterInvitationCreateRequest_data_relationships::setBetaTester(const OAIBetaTesterInvitationCreateRequest_data_relationships_betaTester &beta_tester) {
    m_beta_tester = beta_tester;
    m_beta_tester_isSet = true;
}

bool OAIBetaTesterInvitationCreateRequest_data_relationships::is_beta_tester_Set() const{
    return m_beta_tester_isSet;
}

bool OAIBetaTesterInvitationCreateRequest_data_relationships::is_beta_tester_Valid() const{
    return m_beta_tester_isValid;
}

bool OAIBetaTesterInvitationCreateRequest_data_relationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beta_tester.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBetaTesterInvitationCreateRequest_data_relationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_isValid && m_beta_tester_isValid && true;
}

} // namespace OpenAPI
