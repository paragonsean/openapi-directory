/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapabilityOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapabilityOption::OAICapabilityOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapabilityOption::OAICapabilityOption() {
    this->initializeModel();
}

OAICapabilityOption::~OAICapabilityOption() {}

void OAICapabilityOption::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_enabled_by_default_isSet = false;
    m_enabled_by_default_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_supports_wildcard_isSet = false;
    m_supports_wildcard_isValid = false;
}

void OAICapabilityOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapabilityOption::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_enabled_by_default_isValid = ::OpenAPI::fromJsonValue(m_enabled_by_default, json[QString("enabledByDefault")]);
    m_enabled_by_default_isSet = !json[QString("enabledByDefault")].isNull() && m_enabled_by_default_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_supports_wildcard_isValid = ::OpenAPI::fromJsonValue(m_supports_wildcard, json[QString("supportsWildcard")]);
    m_supports_wildcard_isSet = !json[QString("supportsWildcard")].isNull() && m_supports_wildcard_isValid;
}

QString OAICapabilityOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapabilityOption::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_enabled_by_default_isSet) {
        obj.insert(QString("enabledByDefault"), ::OpenAPI::toJsonValue(m_enabled_by_default));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_supports_wildcard_isSet) {
        obj.insert(QString("supportsWildcard"), ::OpenAPI::toJsonValue(m_supports_wildcard));
    }
    return obj;
}

QString OAICapabilityOption::getDescription() const {
    return m_description;
}
void OAICapabilityOption::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICapabilityOption::is_description_Set() const{
    return m_description_isSet;
}

bool OAICapabilityOption::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICapabilityOption::isEnabled() const {
    return m_enabled;
}
void OAICapabilityOption::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICapabilityOption::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICapabilityOption::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAICapabilityOption::isEnabledByDefault() const {
    return m_enabled_by_default;
}
void OAICapabilityOption::setEnabledByDefault(const bool &enabled_by_default) {
    m_enabled_by_default = enabled_by_default;
    m_enabled_by_default_isSet = true;
}

bool OAICapabilityOption::is_enabled_by_default_Set() const{
    return m_enabled_by_default_isSet;
}

bool OAICapabilityOption::is_enabled_by_default_Valid() const{
    return m_enabled_by_default_isValid;
}

QString OAICapabilityOption::getKey() const {
    return m_key;
}
void OAICapabilityOption::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICapabilityOption::is_key_Set() const{
    return m_key_isSet;
}

bool OAICapabilityOption::is_key_Valid() const{
    return m_key_isValid;
}

QString OAICapabilityOption::getName() const {
    return m_name;
}
void OAICapabilityOption::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICapabilityOption::is_name_Set() const{
    return m_name_isSet;
}

bool OAICapabilityOption::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICapabilityOption::isSupportsWildcard() const {
    return m_supports_wildcard;
}
void OAICapabilityOption::setSupportsWildcard(const bool &supports_wildcard) {
    m_supports_wildcard = supports_wildcard;
    m_supports_wildcard_isSet = true;
}

bool OAICapabilityOption::is_supports_wildcard_Set() const{
    return m_supports_wildcard_isSet;
}

bool OAICapabilityOption::is_supports_wildcard_Valid() const{
    return m_supports_wildcard_isValid;
}

bool OAICapabilityOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_by_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_wildcard_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapabilityOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
