/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppStoreVersionsApi_H
#define OAI_OAIAppStoreVersionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAgeRatingDeclarationResponse.h"
#include "OAIAppStoreReviewDetailResponse.h"
#include "OAIAppStoreVersionBuildLinkageRequest.h"
#include "OAIAppStoreVersionBuildLinkageResponse.h"
#include "OAIAppStoreVersionCreateRequest.h"
#include "OAIAppStoreVersionLocalizationsResponse.h"
#include "OAIAppStoreVersionPhasedReleaseResponse.h"
#include "OAIAppStoreVersionResponse.h"
#include "OAIAppStoreVersionSubmissionResponse.h"
#include "OAIAppStoreVersionUpdateRequest.h"
#include "OAIBuildResponse.h"
#include "OAIErrorResponse.h"
#include "OAIIdfaDeclarationResponse.h"
#include "OAIRoutingAppCoverageResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppStoreVersionsApi : public QObject {
    Q_OBJECT

public:
    OAIAppStoreVersionsApi(const int timeOut = 0);
    ~OAIAppStoreVersionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_age_rating_declarations QList<QString> [optional]
    */
    Q_DECL_DEPRECATED virtual void appStoreVersionsAgeRatingDeclarationGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_age_rating_declarations = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_store_review_details QList<QString> [optional]
    * @param[in]  fields_app_store_versions QList<QString> [optional]
    * @param[in]  fields_app_store_review_attachments QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appStoreVersionsAppStoreReviewDetailGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_review_details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_review_attachments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_store_version_localizations QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_store_version_phased_releases QList<QString> [optional]
    */
    virtual void appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_phased_releases = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_store_versions QList<QString> [optional]
    * @param[in]  fields_app_store_version_submissions QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_submissions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_builds QList<QString> [optional]
    */
    virtual void appStoreVersionsBuildGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void appStoreVersionsBuildGetToOneRelationship(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_app_store_version_build_linkage_request OAIAppStoreVersionBuildLinkageRequest [required]
    */
    virtual void appStoreVersionsBuildUpdateToOneRelationship(const QString &id, const OAIAppStoreVersionBuildLinkageRequest &oai_app_store_version_build_linkage_request);

    /**
    * @param[in]  oai_app_store_version_create_request OAIAppStoreVersionCreateRequest [required]
    */
    virtual void appStoreVersionsCreateInstance(const OAIAppStoreVersionCreateRequest &oai_app_store_version_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void appStoreVersionsDeleteInstance(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_store_versions QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_app_store_version_localizations QList<QString> [optional]
    * @param[in]  fields_idfa_declarations QList<QString> [optional]
    * @param[in]  fields_routing_app_coverages QList<QString> [optional]
    * @param[in]  fields_app_store_version_phased_releases QList<QString> [optional]
    * @param[in]  fields_age_rating_declarations QList<QString> [optional]
    * @param[in]  fields_app_store_review_details QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  fields_app_store_version_submissions QList<QString> [optional]
    * @param[in]  limit_app_store_version_localizations qint32 [optional]
    */
    virtual void appStoreVersionsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_localizations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_idfa_declarations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_routing_app_coverages = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_phased_releases = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_age_rating_declarations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_review_details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_version_submissions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_app_store_version_localizations = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_idfa_declarations QList<QString> [optional]
    */
    virtual void appStoreVersionsIdfaDeclarationGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_idfa_declarations = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_routing_app_coverages QList<QString> [optional]
    */
    virtual void appStoreVersionsRoutingAppCoverageGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_routing_app_coverages = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_app_store_version_update_request OAIAppStoreVersionUpdateRequest [required]
    */
    virtual void appStoreVersionsUpdateInstance(const QString &id, const OAIAppStoreVersionUpdateRequest &oai_app_store_version_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appStoreVersionsAgeRatingDeclarationGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsAppStoreReviewDetailGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsBuildGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsBuildGetToOneRelationshipCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsBuildUpdateToOneRelationshipCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsIdfaDeclarationGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsRoutingAppCoverageGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void appStoreVersionsUpdateInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appStoreVersionsAgeRatingDeclarationGetToOneRelatedSignal(OAIAgeRatingDeclarationResponse summary);
    void appStoreVersionsAppStoreReviewDetailGetToOneRelatedSignal(OAIAppStoreReviewDetailResponse summary);
    void appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedSignal(OAIAppStoreVersionLocalizationsResponse summary);
    void appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedSignal(OAIAppStoreVersionPhasedReleaseResponse summary);
    void appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedSignal(OAIAppStoreVersionSubmissionResponse summary);
    void appStoreVersionsBuildGetToOneRelatedSignal(OAIBuildResponse summary);
    void appStoreVersionsBuildGetToOneRelationshipSignal(OAIAppStoreVersionBuildLinkageResponse summary);
    void appStoreVersionsBuildUpdateToOneRelationshipSignal();
    void appStoreVersionsCreateInstanceSignal(OAIAppStoreVersionResponse summary);
    void appStoreVersionsDeleteInstanceSignal();
    void appStoreVersionsGetInstanceSignal(OAIAppStoreVersionResponse summary);
    void appStoreVersionsIdfaDeclarationGetToOneRelatedSignal(OAIIdfaDeclarationResponse summary);
    void appStoreVersionsRoutingAppCoverageGetToOneRelatedSignal(OAIRoutingAppCoverageResponse summary);
    void appStoreVersionsUpdateInstanceSignal(OAIAppStoreVersionResponse summary);


    void appStoreVersionsAgeRatingDeclarationGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAgeRatingDeclarationResponse summary);
    void appStoreVersionsAppStoreReviewDetailGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreReviewDetailResponse summary);
    void appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionLocalizationsResponse summary);
    void appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionPhasedReleaseResponse summary);
    void appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionSubmissionResponse summary);
    void appStoreVersionsBuildGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBuildResponse summary);
    void appStoreVersionsBuildGetToOneRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionBuildLinkageResponse summary);
    void appStoreVersionsBuildUpdateToOneRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void appStoreVersionsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionResponse summary);
    void appStoreVersionsDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void appStoreVersionsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionResponse summary);
    void appStoreVersionsIdfaDeclarationGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIIdfaDeclarationResponse summary);
    void appStoreVersionsRoutingAppCoverageGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIRoutingAppCoverageResponse summary);
    void appStoreVersionsUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreVersionResponse summary);

    Q_DECL_DEPRECATED_X("Use appStoreVersionsAgeRatingDeclarationGetToOneRelatedSignalError() instead")
    void appStoreVersionsAgeRatingDeclarationGetToOneRelatedSignalE(OAIAgeRatingDeclarationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsAgeRatingDeclarationGetToOneRelatedSignalError(OAIAgeRatingDeclarationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsAppStoreReviewDetailGetToOneRelatedSignalError() instead")
    void appStoreVersionsAppStoreReviewDetailGetToOneRelatedSignalE(OAIAppStoreReviewDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsAppStoreReviewDetailGetToOneRelatedSignalError(OAIAppStoreReviewDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedSignalError() instead")
    void appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedSignalE(OAIAppStoreVersionLocalizationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedSignalError(OAIAppStoreVersionLocalizationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedSignalError() instead")
    void appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedSignalE(OAIAppStoreVersionPhasedReleaseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedSignalError(OAIAppStoreVersionPhasedReleaseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedSignalError() instead")
    void appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedSignalE(OAIAppStoreVersionSubmissionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedSignalError(OAIAppStoreVersionSubmissionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsBuildGetToOneRelatedSignalError() instead")
    void appStoreVersionsBuildGetToOneRelatedSignalE(OAIBuildResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsBuildGetToOneRelatedSignalError(OAIBuildResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsBuildGetToOneRelationshipSignalError() instead")
    void appStoreVersionsBuildGetToOneRelationshipSignalE(OAIAppStoreVersionBuildLinkageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsBuildGetToOneRelationshipSignalError(OAIAppStoreVersionBuildLinkageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsBuildUpdateToOneRelationshipSignalError() instead")
    void appStoreVersionsBuildUpdateToOneRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsBuildUpdateToOneRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsCreateInstanceSignalError() instead")
    void appStoreVersionsCreateInstanceSignalE(OAIAppStoreVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsCreateInstanceSignalError(OAIAppStoreVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsDeleteInstanceSignalError() instead")
    void appStoreVersionsDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsGetInstanceSignalError() instead")
    void appStoreVersionsGetInstanceSignalE(OAIAppStoreVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsGetInstanceSignalError(OAIAppStoreVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsIdfaDeclarationGetToOneRelatedSignalError() instead")
    void appStoreVersionsIdfaDeclarationGetToOneRelatedSignalE(OAIIdfaDeclarationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsIdfaDeclarationGetToOneRelatedSignalError(OAIIdfaDeclarationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsRoutingAppCoverageGetToOneRelatedSignalError() instead")
    void appStoreVersionsRoutingAppCoverageGetToOneRelatedSignalE(OAIRoutingAppCoverageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsRoutingAppCoverageGetToOneRelatedSignalError(OAIRoutingAppCoverageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsUpdateInstanceSignalError() instead")
    void appStoreVersionsUpdateInstanceSignalE(OAIAppStoreVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsUpdateInstanceSignalError(OAIAppStoreVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appStoreVersionsAgeRatingDeclarationGetToOneRelatedSignalErrorFull() instead")
    void appStoreVersionsAgeRatingDeclarationGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsAgeRatingDeclarationGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsAppStoreReviewDetailGetToOneRelatedSignalErrorFull() instead")
    void appStoreVersionsAppStoreReviewDetailGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsAppStoreReviewDetailGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedSignalErrorFull() instead")
    void appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedSignalErrorFull() instead")
    void appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedSignalErrorFull() instead")
    void appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsBuildGetToOneRelatedSignalErrorFull() instead")
    void appStoreVersionsBuildGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsBuildGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsBuildGetToOneRelationshipSignalErrorFull() instead")
    void appStoreVersionsBuildGetToOneRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsBuildGetToOneRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsBuildUpdateToOneRelationshipSignalErrorFull() instead")
    void appStoreVersionsBuildUpdateToOneRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsBuildUpdateToOneRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsCreateInstanceSignalErrorFull() instead")
    void appStoreVersionsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsDeleteInstanceSignalErrorFull() instead")
    void appStoreVersionsDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsGetInstanceSignalErrorFull() instead")
    void appStoreVersionsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsIdfaDeclarationGetToOneRelatedSignalErrorFull() instead")
    void appStoreVersionsIdfaDeclarationGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsIdfaDeclarationGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsRoutingAppCoverageGetToOneRelatedSignalErrorFull() instead")
    void appStoreVersionsRoutingAppCoverageGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsRoutingAppCoverageGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreVersionsUpdateInstanceSignalErrorFull() instead")
    void appStoreVersionsUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreVersionsUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
