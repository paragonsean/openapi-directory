/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppPreviewCreateRequest_data_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppPreviewCreateRequest_data_attributes::OAIAppPreviewCreateRequest_data_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppPreviewCreateRequest_data_attributes::OAIAppPreviewCreateRequest_data_attributes() {
    this->initializeModel();
}

OAIAppPreviewCreateRequest_data_attributes::~OAIAppPreviewCreateRequest_data_attributes() {}

void OAIAppPreviewCreateRequest_data_attributes::initializeModel() {

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_preview_frame_time_code_isSet = false;
    m_preview_frame_time_code_isValid = false;
}

void OAIAppPreviewCreateRequest_data_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppPreviewCreateRequest_data_attributes::fromJsonObject(QJsonObject json) {

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("fileSize")]);
    m_file_size_isSet = !json[QString("fileSize")].isNull() && m_file_size_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_preview_frame_time_code_isValid = ::OpenAPI::fromJsonValue(m_preview_frame_time_code, json[QString("previewFrameTimeCode")]);
    m_preview_frame_time_code_isSet = !json[QString("previewFrameTimeCode")].isNull() && m_preview_frame_time_code_isValid;
}

QString OAIAppPreviewCreateRequest_data_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppPreviewCreateRequest_data_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("fileSize"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_preview_frame_time_code_isSet) {
        obj.insert(QString("previewFrameTimeCode"), ::OpenAPI::toJsonValue(m_preview_frame_time_code));
    }
    return obj;
}

QString OAIAppPreviewCreateRequest_data_attributes::getFileName() const {
    return m_file_name;
}
void OAIAppPreviewCreateRequest_data_attributes::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIAppPreviewCreateRequest_data_attributes::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIAppPreviewCreateRequest_data_attributes::is_file_name_Valid() const{
    return m_file_name_isValid;
}

qint32 OAIAppPreviewCreateRequest_data_attributes::getFileSize() const {
    return m_file_size;
}
void OAIAppPreviewCreateRequest_data_attributes::setFileSize(const qint32 &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIAppPreviewCreateRequest_data_attributes::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIAppPreviewCreateRequest_data_attributes::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAIAppPreviewCreateRequest_data_attributes::getMimeType() const {
    return m_mime_type;
}
void OAIAppPreviewCreateRequest_data_attributes::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIAppPreviewCreateRequest_data_attributes::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIAppPreviewCreateRequest_data_attributes::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIAppPreviewCreateRequest_data_attributes::getPreviewFrameTimeCode() const {
    return m_preview_frame_time_code;
}
void OAIAppPreviewCreateRequest_data_attributes::setPreviewFrameTimeCode(const QString &preview_frame_time_code) {
    m_preview_frame_time_code = preview_frame_time_code;
    m_preview_frame_time_code_isSet = true;
}

bool OAIAppPreviewCreateRequest_data_attributes::is_preview_frame_time_code_Set() const{
    return m_preview_frame_time_code_isSet;
}

bool OAIAppPreviewCreateRequest_data_attributes::is_preview_frame_time_code_Valid() const{
    return m_preview_frame_time_code_isValid;
}

bool OAIAppPreviewCreateRequest_data_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_frame_time_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppPreviewCreateRequest_data_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_name_isValid && m_file_size_isValid && true;
}

} // namespace OpenAPI
