/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalBetaState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalBetaState::OAIExternalBetaState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalBetaState::OAIExternalBetaState() {
    this->initializeModel();
}

OAIExternalBetaState::~OAIExternalBetaState() {}

void OAIExternalBetaState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIExternalBetaState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIExternalBetaState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROCESSING_EXCEPTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::PROCESSING_EXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MISSING_EXPORT_COMPLIANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::MISSING_EXPORT_COMPLIANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_BETA_TESTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::READY_FOR_BETA_TESTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_BETA_TESTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::IN_BETA_TESTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_BETA_SUBMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::READY_FOR_BETA_SUBMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_EXPORT_COMPLIANCE_REVIEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::IN_EXPORT_COMPLIANCE_REVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING_FOR_BETA_REVIEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::WAITING_FOR_BETA_REVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_BETA_REVIEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::IN_BETA_REVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BETA_REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::BETA_REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BETA_APPROVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExternalBetaState::BETA_APPROVED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIExternalBetaState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIExternalBetaState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIExternalBetaState::PROCESSING:
            val = "PROCESSING";
            break;
        case eOAIExternalBetaState::PROCESSING_EXCEPTION:
            val = "PROCESSING_EXCEPTION";
            break;
        case eOAIExternalBetaState::MISSING_EXPORT_COMPLIANCE:
            val = "MISSING_EXPORT_COMPLIANCE";
            break;
        case eOAIExternalBetaState::READY_FOR_BETA_TESTING:
            val = "READY_FOR_BETA_TESTING";
            break;
        case eOAIExternalBetaState::IN_BETA_TESTING:
            val = "IN_BETA_TESTING";
            break;
        case eOAIExternalBetaState::EXPIRED:
            val = "EXPIRED";
            break;
        case eOAIExternalBetaState::READY_FOR_BETA_SUBMISSION:
            val = "READY_FOR_BETA_SUBMISSION";
            break;
        case eOAIExternalBetaState::IN_EXPORT_COMPLIANCE_REVIEW:
            val = "IN_EXPORT_COMPLIANCE_REVIEW";
            break;
        case eOAIExternalBetaState::WAITING_FOR_BETA_REVIEW:
            val = "WAITING_FOR_BETA_REVIEW";
            break;
        case eOAIExternalBetaState::IN_BETA_REVIEW:
            val = "IN_BETA_REVIEW";
            break;
        case eOAIExternalBetaState::BETA_REJECTED:
            val = "BETA_REJECTED";
            break;
        case eOAIExternalBetaState::BETA_APPROVED:
            val = "BETA_APPROVED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIExternalBetaState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIExternalBetaState::eOAIExternalBetaState OAIExternalBetaState::getValue() const {
    return m_value;
}

void OAIExternalBetaState::setValue(const OAIExternalBetaState::eOAIExternalBetaState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIExternalBetaState::isSet() const {
    
    return m_value_isSet;
}

bool OAIExternalBetaState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
