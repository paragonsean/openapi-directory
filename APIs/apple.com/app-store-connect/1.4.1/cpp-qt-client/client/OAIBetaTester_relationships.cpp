/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBetaTester_relationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBetaTester_relationships::OAIBetaTester_relationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBetaTester_relationships::OAIBetaTester_relationships() {
    this->initializeModel();
}

OAIBetaTester_relationships::~OAIBetaTester_relationships() {}

void OAIBetaTester_relationships::initializeModel() {

    m_apps_isSet = false;
    m_apps_isValid = false;

    m_beta_groups_isSet = false;
    m_beta_groups_isValid = false;

    m_builds_isSet = false;
    m_builds_isValid = false;
}

void OAIBetaTester_relationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBetaTester_relationships::fromJsonObject(QJsonObject json) {

    m_apps_isValid = ::OpenAPI::fromJsonValue(m_apps, json[QString("apps")]);
    m_apps_isSet = !json[QString("apps")].isNull() && m_apps_isValid;

    m_beta_groups_isValid = ::OpenAPI::fromJsonValue(m_beta_groups, json[QString("betaGroups")]);
    m_beta_groups_isSet = !json[QString("betaGroups")].isNull() && m_beta_groups_isValid;

    m_builds_isValid = ::OpenAPI::fromJsonValue(m_builds, json[QString("builds")]);
    m_builds_isSet = !json[QString("builds")].isNull() && m_builds_isValid;
}

QString OAIBetaTester_relationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBetaTester_relationships::asJsonObject() const {
    QJsonObject obj;
    if (m_apps.isSet()) {
        obj.insert(QString("apps"), ::OpenAPI::toJsonValue(m_apps));
    }
    if (m_beta_groups.isSet()) {
        obj.insert(QString("betaGroups"), ::OpenAPI::toJsonValue(m_beta_groups));
    }
    if (m_builds.isSet()) {
        obj.insert(QString("builds"), ::OpenAPI::toJsonValue(m_builds));
    }
    return obj;
}

OAIBetaTester_relationships_apps OAIBetaTester_relationships::getApps() const {
    return m_apps;
}
void OAIBetaTester_relationships::setApps(const OAIBetaTester_relationships_apps &apps) {
    m_apps = apps;
    m_apps_isSet = true;
}

bool OAIBetaTester_relationships::is_apps_Set() const{
    return m_apps_isSet;
}

bool OAIBetaTester_relationships::is_apps_Valid() const{
    return m_apps_isValid;
}

OAIApp_relationships_betaGroups OAIBetaTester_relationships::getBetaGroups() const {
    return m_beta_groups;
}
void OAIBetaTester_relationships::setBetaGroups(const OAIApp_relationships_betaGroups &beta_groups) {
    m_beta_groups = beta_groups;
    m_beta_groups_isSet = true;
}

bool OAIBetaTester_relationships::is_beta_groups_Set() const{
    return m_beta_groups_isSet;
}

bool OAIBetaTester_relationships::is_beta_groups_Valid() const{
    return m_beta_groups_isValid;
}

OAIApp_relationships_builds OAIBetaTester_relationships::getBuilds() const {
    return m_builds;
}
void OAIBetaTester_relationships::setBuilds(const OAIApp_relationships_builds &builds) {
    m_builds = builds;
    m_builds_isSet = true;
}

bool OAIBetaTester_relationships::is_builds_Set() const{
    return m_builds_isSet;
}

bool OAIBetaTester_relationships::is_builds_Valid() const{
    return m_builds_isValid;
}

bool OAIBetaTester_relationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beta_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_builds.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBetaTester_relationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
