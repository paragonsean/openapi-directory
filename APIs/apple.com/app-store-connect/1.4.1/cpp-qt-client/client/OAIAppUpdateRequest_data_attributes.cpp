/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppUpdateRequest_data_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppUpdateRequest_data_attributes::OAIAppUpdateRequest_data_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppUpdateRequest_data_attributes::OAIAppUpdateRequest_data_attributes() {
    this->initializeModel();
}

OAIAppUpdateRequest_data_attributes::~OAIAppUpdateRequest_data_attributes() {}

void OAIAppUpdateRequest_data_attributes::initializeModel() {

    m_available_in_new_territories_isSet = false;
    m_available_in_new_territories_isValid = false;

    m_bundle_id_isSet = false;
    m_bundle_id_isValid = false;

    m_content_rights_declaration_isSet = false;
    m_content_rights_declaration_isValid = false;

    m_primary_locale_isSet = false;
    m_primary_locale_isValid = false;
}

void OAIAppUpdateRequest_data_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppUpdateRequest_data_attributes::fromJsonObject(QJsonObject json) {

    m_available_in_new_territories_isValid = ::OpenAPI::fromJsonValue(m_available_in_new_territories, json[QString("availableInNewTerritories")]);
    m_available_in_new_territories_isSet = !json[QString("availableInNewTerritories")].isNull() && m_available_in_new_territories_isValid;

    m_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_bundle_id, json[QString("bundleId")]);
    m_bundle_id_isSet = !json[QString("bundleId")].isNull() && m_bundle_id_isValid;

    m_content_rights_declaration_isValid = ::OpenAPI::fromJsonValue(m_content_rights_declaration, json[QString("contentRightsDeclaration")]);
    m_content_rights_declaration_isSet = !json[QString("contentRightsDeclaration")].isNull() && m_content_rights_declaration_isValid;

    m_primary_locale_isValid = ::OpenAPI::fromJsonValue(m_primary_locale, json[QString("primaryLocale")]);
    m_primary_locale_isSet = !json[QString("primaryLocale")].isNull() && m_primary_locale_isValid;
}

QString OAIAppUpdateRequest_data_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppUpdateRequest_data_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_available_in_new_territories_isSet) {
        obj.insert(QString("availableInNewTerritories"), ::OpenAPI::toJsonValue(m_available_in_new_territories));
    }
    if (m_bundle_id_isSet) {
        obj.insert(QString("bundleId"), ::OpenAPI::toJsonValue(m_bundle_id));
    }
    if (m_content_rights_declaration_isSet) {
        obj.insert(QString("contentRightsDeclaration"), ::OpenAPI::toJsonValue(m_content_rights_declaration));
    }
    if (m_primary_locale_isSet) {
        obj.insert(QString("primaryLocale"), ::OpenAPI::toJsonValue(m_primary_locale));
    }
    return obj;
}

bool OAIAppUpdateRequest_data_attributes::isAvailableInNewTerritories() const {
    return m_available_in_new_territories;
}
void OAIAppUpdateRequest_data_attributes::setAvailableInNewTerritories(const bool &available_in_new_territories) {
    m_available_in_new_territories = available_in_new_territories;
    m_available_in_new_territories_isSet = true;
}

bool OAIAppUpdateRequest_data_attributes::is_available_in_new_territories_Set() const{
    return m_available_in_new_territories_isSet;
}

bool OAIAppUpdateRequest_data_attributes::is_available_in_new_territories_Valid() const{
    return m_available_in_new_territories_isValid;
}

QString OAIAppUpdateRequest_data_attributes::getBundleId() const {
    return m_bundle_id;
}
void OAIAppUpdateRequest_data_attributes::setBundleId(const QString &bundle_id) {
    m_bundle_id = bundle_id;
    m_bundle_id_isSet = true;
}

bool OAIAppUpdateRequest_data_attributes::is_bundle_id_Set() const{
    return m_bundle_id_isSet;
}

bool OAIAppUpdateRequest_data_attributes::is_bundle_id_Valid() const{
    return m_bundle_id_isValid;
}

QString OAIAppUpdateRequest_data_attributes::getContentRightsDeclaration() const {
    return m_content_rights_declaration;
}
void OAIAppUpdateRequest_data_attributes::setContentRightsDeclaration(const QString &content_rights_declaration) {
    m_content_rights_declaration = content_rights_declaration;
    m_content_rights_declaration_isSet = true;
}

bool OAIAppUpdateRequest_data_attributes::is_content_rights_declaration_Set() const{
    return m_content_rights_declaration_isSet;
}

bool OAIAppUpdateRequest_data_attributes::is_content_rights_declaration_Valid() const{
    return m_content_rights_declaration_isValid;
}

QString OAIAppUpdateRequest_data_attributes::getPrimaryLocale() const {
    return m_primary_locale;
}
void OAIAppUpdateRequest_data_attributes::setPrimaryLocale(const QString &primary_locale) {
    m_primary_locale = primary_locale;
    m_primary_locale_isSet = true;
}

bool OAIAppUpdateRequest_data_attributes::is_primary_locale_Set() const{
    return m_primary_locale_isSet;
}

bool OAIAppUpdateRequest_data_attributes::is_primary_locale_Valid() const{
    return m_primary_locale_isValid;
}

bool OAIAppUpdateRequest_data_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_in_new_territories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_rights_declaration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_locale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppUpdateRequest_data_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
