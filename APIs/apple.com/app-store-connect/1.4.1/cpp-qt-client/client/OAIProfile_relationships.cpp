/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfile_relationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfile_relationships::OAIProfile_relationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfile_relationships::OAIProfile_relationships() {
    this->initializeModel();
}

OAIProfile_relationships::~OAIProfile_relationships() {}

void OAIProfile_relationships::initializeModel() {

    m_bundle_id_isSet = false;
    m_bundle_id_isValid = false;

    m_certificates_isSet = false;
    m_certificates_isValid = false;

    m_devices_isSet = false;
    m_devices_isValid = false;
}

void OAIProfile_relationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfile_relationships::fromJsonObject(QJsonObject json) {

    m_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_bundle_id, json[QString("bundleId")]);
    m_bundle_id_isSet = !json[QString("bundleId")].isNull() && m_bundle_id_isValid;

    m_certificates_isValid = ::OpenAPI::fromJsonValue(m_certificates, json[QString("certificates")]);
    m_certificates_isSet = !json[QString("certificates")].isNull() && m_certificates_isValid;

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;
}

QString OAIProfile_relationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfile_relationships::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_id.isSet()) {
        obj.insert(QString("bundleId"), ::OpenAPI::toJsonValue(m_bundle_id));
    }
    if (m_certificates.isSet()) {
        obj.insert(QString("certificates"), ::OpenAPI::toJsonValue(m_certificates));
    }
    if (m_devices.isSet()) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    return obj;
}

OAIProfile_relationships_bundleId OAIProfile_relationships::getBundleId() const {
    return m_bundle_id;
}
void OAIProfile_relationships::setBundleId(const OAIProfile_relationships_bundleId &bundle_id) {
    m_bundle_id = bundle_id;
    m_bundle_id_isSet = true;
}

bool OAIProfile_relationships::is_bundle_id_Set() const{
    return m_bundle_id_isSet;
}

bool OAIProfile_relationships::is_bundle_id_Valid() const{
    return m_bundle_id_isValid;
}

OAIProfile_relationships_certificates OAIProfile_relationships::getCertificates() const {
    return m_certificates;
}
void OAIProfile_relationships::setCertificates(const OAIProfile_relationships_certificates &certificates) {
    m_certificates = certificates;
    m_certificates_isSet = true;
}

bool OAIProfile_relationships::is_certificates_Set() const{
    return m_certificates_isSet;
}

bool OAIProfile_relationships::is_certificates_Valid() const{
    return m_certificates_isValid;
}

OAIProfile_relationships_devices OAIProfile_relationships::getDevices() const {
    return m_devices;
}
void OAIProfile_relationships::setDevices(const OAIProfile_relationships_devices &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAIProfile_relationships::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAIProfile_relationships::is_devices_Valid() const{
    return m_devices_isValid;
}

bool OAIProfile_relationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfile_relationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
