/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapabilityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapabilityType::OAICapabilityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapabilityType::OAICapabilityType() {
    this->initializeModel();
}

OAICapabilityType::~OAICapabilityType() {}

void OAICapabilityType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICapabilityType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICapabilityType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ICLOUD", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::ICLOUD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_APP_PURCHASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::IN_APP_PURCHASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GAME_CENTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::GAME_CENTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PUSH_NOTIFICATIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::PUSH_NOTIFICATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WALLET", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::WALLET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTER_APP_AUDIO", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::INTER_APP_AUDIO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAPS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::MAPS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ASSOCIATED_DOMAINS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::ASSOCIATED_DOMAINS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PERSONAL_VPN", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::PERSONAL_VPN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APP_GROUPS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::APP_GROUPS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HEALTHKIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::HEALTHKIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HOMEKIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::HOMEKIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WIRELESS_ACCESSORY_CONFIGURATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::WIRELESS_ACCESSORY_CONFIGURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPLE_PAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::APPLE_PAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATA_PROTECTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::DATA_PROTECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SIRIKIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::SIRIKIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NETWORK_EXTENSIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::NETWORK_EXTENSIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MULTIPATH", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::MULTIPATH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HOT_SPOT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::HOT_SPOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NFC_TAG_READING", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::NFC_TAG_READING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLASSKIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::CLASSKIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTOFILL_CREDENTIAL_PROVIDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::AUTOFILL_CREDENTIAL_PROVIDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCESS_WIFI_INFORMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::ACCESS_WIFI_INFORMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NETWORK_CUSTOM_PROTOCOL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::NETWORK_CUSTOM_PROTOCOL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COREMEDIA_HLS_LOW_LATENCY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::COREMEDIA_HLS_LOW_LATENCY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SYSTEM_EXTENSION_INSTALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::SYSTEM_EXTENSION_INSTALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_MANAGEMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::USER_MANAGEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPLE_ID_AUTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityType::APPLE_ID_AUTH;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICapabilityType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICapabilityType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICapabilityType::ICLOUD:
            val = "ICLOUD";
            break;
        case eOAICapabilityType::IN_APP_PURCHASE:
            val = "IN_APP_PURCHASE";
            break;
        case eOAICapabilityType::GAME_CENTER:
            val = "GAME_CENTER";
            break;
        case eOAICapabilityType::PUSH_NOTIFICATIONS:
            val = "PUSH_NOTIFICATIONS";
            break;
        case eOAICapabilityType::WALLET:
            val = "WALLET";
            break;
        case eOAICapabilityType::INTER_APP_AUDIO:
            val = "INTER_APP_AUDIO";
            break;
        case eOAICapabilityType::MAPS:
            val = "MAPS";
            break;
        case eOAICapabilityType::ASSOCIATED_DOMAINS:
            val = "ASSOCIATED_DOMAINS";
            break;
        case eOAICapabilityType::PERSONAL_VPN:
            val = "PERSONAL_VPN";
            break;
        case eOAICapabilityType::APP_GROUPS:
            val = "APP_GROUPS";
            break;
        case eOAICapabilityType::HEALTHKIT:
            val = "HEALTHKIT";
            break;
        case eOAICapabilityType::HOMEKIT:
            val = "HOMEKIT";
            break;
        case eOAICapabilityType::WIRELESS_ACCESSORY_CONFIGURATION:
            val = "WIRELESS_ACCESSORY_CONFIGURATION";
            break;
        case eOAICapabilityType::APPLE_PAY:
            val = "APPLE_PAY";
            break;
        case eOAICapabilityType::DATA_PROTECTION:
            val = "DATA_PROTECTION";
            break;
        case eOAICapabilityType::SIRIKIT:
            val = "SIRIKIT";
            break;
        case eOAICapabilityType::NETWORK_EXTENSIONS:
            val = "NETWORK_EXTENSIONS";
            break;
        case eOAICapabilityType::MULTIPATH:
            val = "MULTIPATH";
            break;
        case eOAICapabilityType::HOT_SPOT:
            val = "HOT_SPOT";
            break;
        case eOAICapabilityType::NFC_TAG_READING:
            val = "NFC_TAG_READING";
            break;
        case eOAICapabilityType::CLASSKIT:
            val = "CLASSKIT";
            break;
        case eOAICapabilityType::AUTOFILL_CREDENTIAL_PROVIDER:
            val = "AUTOFILL_CREDENTIAL_PROVIDER";
            break;
        case eOAICapabilityType::ACCESS_WIFI_INFORMATION:
            val = "ACCESS_WIFI_INFORMATION";
            break;
        case eOAICapabilityType::NETWORK_CUSTOM_PROTOCOL:
            val = "NETWORK_CUSTOM_PROTOCOL";
            break;
        case eOAICapabilityType::COREMEDIA_HLS_LOW_LATENCY:
            val = "COREMEDIA_HLS_LOW_LATENCY";
            break;
        case eOAICapabilityType::SYSTEM_EXTENSION_INSTALL:
            val = "SYSTEM_EXTENSION_INSTALL";
            break;
        case eOAICapabilityType::USER_MANAGEMENT:
            val = "USER_MANAGEMENT";
            break;
        case eOAICapabilityType::APPLE_ID_AUTH:
            val = "APPLE_ID_AUTH";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICapabilityType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICapabilityType::eOAICapabilityType OAICapabilityType::getValue() const {
    return m_value;
}

void OAICapabilityType::setValue(const OAICapabilityType::eOAICapabilityType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICapabilityType::isSet() const {
    
    return m_value_isSet;
}

bool OAICapabilityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
