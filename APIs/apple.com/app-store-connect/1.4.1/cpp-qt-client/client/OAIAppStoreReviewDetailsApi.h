/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppStoreReviewDetailsApi_H
#define OAI_OAIAppStoreReviewDetailsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppStoreReviewAttachmentsResponse.h"
#include "OAIAppStoreReviewDetailCreateRequest.h"
#include "OAIAppStoreReviewDetailResponse.h"
#include "OAIAppStoreReviewDetailUpdateRequest.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppStoreReviewDetailsApi : public QObject {
    Q_OBJECT

public:
    OAIAppStoreReviewDetailsApi(const int timeOut = 0);
    ~OAIAppStoreReviewDetailsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_store_review_details QList<QString> [optional]
    * @param[in]  fields_app_store_review_attachments QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_review_details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_review_attachments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_app_store_review_detail_create_request OAIAppStoreReviewDetailCreateRequest [required]
    */
    virtual void appStoreReviewDetailsCreateInstance(const OAIAppStoreReviewDetailCreateRequest &oai_app_store_review_detail_create_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_store_review_details QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_app_store_review_attachments QList<QString> [optional]
    * @param[in]  limit_app_store_review_attachments qint32 [optional]
    */
    virtual void appStoreReviewDetailsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_review_details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_store_review_attachments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_app_store_review_attachments = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_app_store_review_detail_update_request OAIAppStoreReviewDetailUpdateRequest [required]
    */
    virtual void appStoreReviewDetailsUpdateInstance(const QString &id, const OAIAppStoreReviewDetailUpdateRequest &oai_app_store_review_detail_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appStoreReviewDetailsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void appStoreReviewDetailsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void appStoreReviewDetailsUpdateInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedSignal(OAIAppStoreReviewAttachmentsResponse summary);
    void appStoreReviewDetailsCreateInstanceSignal(OAIAppStoreReviewDetailResponse summary);
    void appStoreReviewDetailsGetInstanceSignal(OAIAppStoreReviewDetailResponse summary);
    void appStoreReviewDetailsUpdateInstanceSignal(OAIAppStoreReviewDetailResponse summary);


    void appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreReviewAttachmentsResponse summary);
    void appStoreReviewDetailsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreReviewDetailResponse summary);
    void appStoreReviewDetailsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreReviewDetailResponse summary);
    void appStoreReviewDetailsUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppStoreReviewDetailResponse summary);

    Q_DECL_DEPRECATED_X("Use appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedSignalError() instead")
    void appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedSignalE(OAIAppStoreReviewAttachmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedSignalError(OAIAppStoreReviewAttachmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreReviewDetailsCreateInstanceSignalError() instead")
    void appStoreReviewDetailsCreateInstanceSignalE(OAIAppStoreReviewDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreReviewDetailsCreateInstanceSignalError(OAIAppStoreReviewDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreReviewDetailsGetInstanceSignalError() instead")
    void appStoreReviewDetailsGetInstanceSignalE(OAIAppStoreReviewDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreReviewDetailsGetInstanceSignalError(OAIAppStoreReviewDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreReviewDetailsUpdateInstanceSignalError() instead")
    void appStoreReviewDetailsUpdateInstanceSignalE(OAIAppStoreReviewDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreReviewDetailsUpdateInstanceSignalError(OAIAppStoreReviewDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedSignalErrorFull() instead")
    void appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreReviewDetailsCreateInstanceSignalErrorFull() instead")
    void appStoreReviewDetailsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreReviewDetailsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreReviewDetailsGetInstanceSignalErrorFull() instead")
    void appStoreReviewDetailsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreReviewDetailsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appStoreReviewDetailsUpdateInstanceSignalErrorFull() instead")
    void appStoreReviewDetailsUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appStoreReviewDetailsUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
