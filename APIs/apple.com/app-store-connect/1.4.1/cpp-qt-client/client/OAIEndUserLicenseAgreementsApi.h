/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEndUserLicenseAgreementsApi_H
#define OAI_OAIEndUserLicenseAgreementsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEndUserLicenseAgreementCreateRequest.h"
#include "OAIEndUserLicenseAgreementResponse.h"
#include "OAIEndUserLicenseAgreementUpdateRequest.h"
#include "OAIErrorResponse.h"
#include "OAITerritoriesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEndUserLicenseAgreementsApi : public QObject {
    Q_OBJECT

public:
    OAIEndUserLicenseAgreementsApi(const int timeOut = 0);
    ~OAIEndUserLicenseAgreementsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_end_user_license_agreement_create_request OAIEndUserLicenseAgreementCreateRequest [required]
    */
    virtual void endUserLicenseAgreementsCreateInstance(const OAIEndUserLicenseAgreementCreateRequest &oai_end_user_license_agreement_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void endUserLicenseAgreementsDeleteInstance(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_end_user_license_agreements QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_territories QList<QString> [optional]
    * @param[in]  limit_territories qint32 [optional]
    */
    virtual void endUserLicenseAgreementsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_end_user_license_agreements = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_territories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_territories = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_territories QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void endUserLicenseAgreementsTerritoriesGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_territories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_end_user_license_agreement_update_request OAIEndUserLicenseAgreementUpdateRequest [required]
    */
    virtual void endUserLicenseAgreementsUpdateInstance(const QString &id, const OAIEndUserLicenseAgreementUpdateRequest &oai_end_user_license_agreement_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void endUserLicenseAgreementsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void endUserLicenseAgreementsDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void endUserLicenseAgreementsGetInstanceCallback(OAIHttpRequestWorker *worker);
    void endUserLicenseAgreementsTerritoriesGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void endUserLicenseAgreementsUpdateInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void endUserLicenseAgreementsCreateInstanceSignal(OAIEndUserLicenseAgreementResponse summary);
    void endUserLicenseAgreementsDeleteInstanceSignal();
    void endUserLicenseAgreementsGetInstanceSignal(OAIEndUserLicenseAgreementResponse summary);
    void endUserLicenseAgreementsTerritoriesGetToManyRelatedSignal(OAITerritoriesResponse summary);
    void endUserLicenseAgreementsUpdateInstanceSignal(OAIEndUserLicenseAgreementResponse summary);


    void endUserLicenseAgreementsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIEndUserLicenseAgreementResponse summary);
    void endUserLicenseAgreementsDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void endUserLicenseAgreementsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIEndUserLicenseAgreementResponse summary);
    void endUserLicenseAgreementsTerritoriesGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAITerritoriesResponse summary);
    void endUserLicenseAgreementsUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIEndUserLicenseAgreementResponse summary);

    Q_DECL_DEPRECATED_X("Use endUserLicenseAgreementsCreateInstanceSignalError() instead")
    void endUserLicenseAgreementsCreateInstanceSignalE(OAIEndUserLicenseAgreementResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endUserLicenseAgreementsCreateInstanceSignalError(OAIEndUserLicenseAgreementResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endUserLicenseAgreementsDeleteInstanceSignalError() instead")
    void endUserLicenseAgreementsDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void endUserLicenseAgreementsDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endUserLicenseAgreementsGetInstanceSignalError() instead")
    void endUserLicenseAgreementsGetInstanceSignalE(OAIEndUserLicenseAgreementResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endUserLicenseAgreementsGetInstanceSignalError(OAIEndUserLicenseAgreementResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endUserLicenseAgreementsTerritoriesGetToManyRelatedSignalError() instead")
    void endUserLicenseAgreementsTerritoriesGetToManyRelatedSignalE(OAITerritoriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endUserLicenseAgreementsTerritoriesGetToManyRelatedSignalError(OAITerritoriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endUserLicenseAgreementsUpdateInstanceSignalError() instead")
    void endUserLicenseAgreementsUpdateInstanceSignalE(OAIEndUserLicenseAgreementResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void endUserLicenseAgreementsUpdateInstanceSignalError(OAIEndUserLicenseAgreementResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use endUserLicenseAgreementsCreateInstanceSignalErrorFull() instead")
    void endUserLicenseAgreementsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endUserLicenseAgreementsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endUserLicenseAgreementsDeleteInstanceSignalErrorFull() instead")
    void endUserLicenseAgreementsDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endUserLicenseAgreementsDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endUserLicenseAgreementsGetInstanceSignalErrorFull() instead")
    void endUserLicenseAgreementsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endUserLicenseAgreementsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endUserLicenseAgreementsTerritoriesGetToManyRelatedSignalErrorFull() instead")
    void endUserLicenseAgreementsTerritoriesGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endUserLicenseAgreementsTerritoriesGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endUserLicenseAgreementsUpdateInstanceSignalErrorFull() instead")
    void endUserLicenseAgreementsUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endUserLicenseAgreementsUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
