/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadOperation::OAIUploadOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadOperation::OAIUploadOperation() {
    this->initializeModel();
}

OAIUploadOperation::~OAIUploadOperation() {}

void OAIUploadOperation::initializeModel() {

    m_length_isSet = false;
    m_length_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_request_headers_isSet = false;
    m_request_headers_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUploadOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadOperation::fromJsonObject(QJsonObject json) {

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_request_headers_isValid = ::OpenAPI::fromJsonValue(m_request_headers, json[QString("requestHeaders")]);
    m_request_headers_isSet = !json[QString("requestHeaders")].isNull() && m_request_headers_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUploadOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_request_headers.size() > 0) {
        obj.insert(QString("requestHeaders"), ::OpenAPI::toJsonValue(m_request_headers));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAIUploadOperation::getLength() const {
    return m_length;
}
void OAIUploadOperation::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIUploadOperation::is_length_Set() const{
    return m_length_isSet;
}

bool OAIUploadOperation::is_length_Valid() const{
    return m_length_isValid;
}

QString OAIUploadOperation::getMethod() const {
    return m_method;
}
void OAIUploadOperation::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIUploadOperation::is_method_Set() const{
    return m_method_isSet;
}

bool OAIUploadOperation::is_method_Valid() const{
    return m_method_isValid;
}

qint32 OAIUploadOperation::getOffset() const {
    return m_offset;
}
void OAIUploadOperation::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIUploadOperation::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIUploadOperation::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<OAIUploadOperationHeader> OAIUploadOperation::getRequestHeaders() const {
    return m_request_headers;
}
void OAIUploadOperation::setRequestHeaders(const QList<OAIUploadOperationHeader> &request_headers) {
    m_request_headers = request_headers;
    m_request_headers_isSet = true;
}

bool OAIUploadOperation::is_request_headers_Set() const{
    return m_request_headers_isSet;
}

bool OAIUploadOperation::is_request_headers_Valid() const{
    return m_request_headers_isValid;
}

QString OAIUploadOperation::getUrl() const {
    return m_url;
}
void OAIUploadOperation::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUploadOperation::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUploadOperation::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUploadOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
