/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificate_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificate_attributes::OAICertificate_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificate_attributes::OAICertificate_attributes() {
    this->initializeModel();
}

OAICertificate_attributes::~OAICertificate_attributes() {}

void OAICertificate_attributes::initializeModel() {

    m_certificate_content_isSet = false;
    m_certificate_content_isValid = false;

    m_certificate_type_isSet = false;
    m_certificate_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;
}

void OAICertificate_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificate_attributes::fromJsonObject(QJsonObject json) {

    m_certificate_content_isValid = ::OpenAPI::fromJsonValue(m_certificate_content, json[QString("certificateContent")]);
    m_certificate_content_isSet = !json[QString("certificateContent")].isNull() && m_certificate_content_isValid;

    m_certificate_type_isValid = ::OpenAPI::fromJsonValue(m_certificate_type, json[QString("certificateType")]);
    m_certificate_type_isSet = !json[QString("certificateType")].isNull() && m_certificate_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;
}

QString OAICertificate_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificate_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_content_isSet) {
        obj.insert(QString("certificateContent"), ::OpenAPI::toJsonValue(m_certificate_content));
    }
    if (m_certificate_type.isSet()) {
        obj.insert(QString("certificateType"), ::OpenAPI::toJsonValue(m_certificate_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    return obj;
}

QString OAICertificate_attributes::getCertificateContent() const {
    return m_certificate_content;
}
void OAICertificate_attributes::setCertificateContent(const QString &certificate_content) {
    m_certificate_content = certificate_content;
    m_certificate_content_isSet = true;
}

bool OAICertificate_attributes::is_certificate_content_Set() const{
    return m_certificate_content_isSet;
}

bool OAICertificate_attributes::is_certificate_content_Valid() const{
    return m_certificate_content_isValid;
}

OAICertificateType OAICertificate_attributes::getCertificateType() const {
    return m_certificate_type;
}
void OAICertificate_attributes::setCertificateType(const OAICertificateType &certificate_type) {
    m_certificate_type = certificate_type;
    m_certificate_type_isSet = true;
}

bool OAICertificate_attributes::is_certificate_type_Set() const{
    return m_certificate_type_isSet;
}

bool OAICertificate_attributes::is_certificate_type_Valid() const{
    return m_certificate_type_isValid;
}

QString OAICertificate_attributes::getDisplayName() const {
    return m_display_name;
}
void OAICertificate_attributes::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICertificate_attributes::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICertificate_attributes::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QDateTime OAICertificate_attributes::getExpirationDate() const {
    return m_expiration_date;
}
void OAICertificate_attributes::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAICertificate_attributes::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAICertificate_attributes::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAICertificate_attributes::getName() const {
    return m_name;
}
void OAICertificate_attributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICertificate_attributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAICertificate_attributes::is_name_Valid() const{
    return m_name_isValid;
}

OAIBundleIdPlatform OAICertificate_attributes::getPlatform() const {
    return m_platform;
}
void OAICertificate_attributes::setPlatform(const OAIBundleIdPlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAICertificate_attributes::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAICertificate_attributes::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAICertificate_attributes::getSerialNumber() const {
    return m_serial_number;
}
void OAICertificate_attributes::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAICertificate_attributes::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAICertificate_attributes::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAICertificate_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificate_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
