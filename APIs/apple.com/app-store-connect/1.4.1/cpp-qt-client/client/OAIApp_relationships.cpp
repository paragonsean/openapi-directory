/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp_relationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp_relationships::OAIApp_relationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp_relationships::OAIApp_relationships() {
    this->initializeModel();
}

OAIApp_relationships::~OAIApp_relationships() {}

void OAIApp_relationships::initializeModel() {

    m_app_infos_isSet = false;
    m_app_infos_isValid = false;

    m_app_store_versions_isSet = false;
    m_app_store_versions_isValid = false;

    m_available_territories_isSet = false;
    m_available_territories_isValid = false;

    m_beta_app_localizations_isSet = false;
    m_beta_app_localizations_isValid = false;

    m_beta_app_review_detail_isSet = false;
    m_beta_app_review_detail_isValid = false;

    m_beta_groups_isSet = false;
    m_beta_groups_isValid = false;

    m_beta_license_agreement_isSet = false;
    m_beta_license_agreement_isValid = false;

    m_builds_isSet = false;
    m_builds_isValid = false;

    m_end_user_license_agreement_isSet = false;
    m_end_user_license_agreement_isValid = false;

    m_game_center_enabled_versions_isSet = false;
    m_game_center_enabled_versions_isValid = false;

    m_in_app_purchases_isSet = false;
    m_in_app_purchases_isValid = false;

    m_pre_order_isSet = false;
    m_pre_order_isValid = false;

    m_pre_release_versions_isSet = false;
    m_pre_release_versions_isValid = false;

    m_prices_isSet = false;
    m_prices_isValid = false;
}

void OAIApp_relationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp_relationships::fromJsonObject(QJsonObject json) {

    m_app_infos_isValid = ::OpenAPI::fromJsonValue(m_app_infos, json[QString("appInfos")]);
    m_app_infos_isSet = !json[QString("appInfos")].isNull() && m_app_infos_isValid;

    m_app_store_versions_isValid = ::OpenAPI::fromJsonValue(m_app_store_versions, json[QString("appStoreVersions")]);
    m_app_store_versions_isSet = !json[QString("appStoreVersions")].isNull() && m_app_store_versions_isValid;

    m_available_territories_isValid = ::OpenAPI::fromJsonValue(m_available_territories, json[QString("availableTerritories")]);
    m_available_territories_isSet = !json[QString("availableTerritories")].isNull() && m_available_territories_isValid;

    m_beta_app_localizations_isValid = ::OpenAPI::fromJsonValue(m_beta_app_localizations, json[QString("betaAppLocalizations")]);
    m_beta_app_localizations_isSet = !json[QString("betaAppLocalizations")].isNull() && m_beta_app_localizations_isValid;

    m_beta_app_review_detail_isValid = ::OpenAPI::fromJsonValue(m_beta_app_review_detail, json[QString("betaAppReviewDetail")]);
    m_beta_app_review_detail_isSet = !json[QString("betaAppReviewDetail")].isNull() && m_beta_app_review_detail_isValid;

    m_beta_groups_isValid = ::OpenAPI::fromJsonValue(m_beta_groups, json[QString("betaGroups")]);
    m_beta_groups_isSet = !json[QString("betaGroups")].isNull() && m_beta_groups_isValid;

    m_beta_license_agreement_isValid = ::OpenAPI::fromJsonValue(m_beta_license_agreement, json[QString("betaLicenseAgreement")]);
    m_beta_license_agreement_isSet = !json[QString("betaLicenseAgreement")].isNull() && m_beta_license_agreement_isValid;

    m_builds_isValid = ::OpenAPI::fromJsonValue(m_builds, json[QString("builds")]);
    m_builds_isSet = !json[QString("builds")].isNull() && m_builds_isValid;

    m_end_user_license_agreement_isValid = ::OpenAPI::fromJsonValue(m_end_user_license_agreement, json[QString("endUserLicenseAgreement")]);
    m_end_user_license_agreement_isSet = !json[QString("endUserLicenseAgreement")].isNull() && m_end_user_license_agreement_isValid;

    m_game_center_enabled_versions_isValid = ::OpenAPI::fromJsonValue(m_game_center_enabled_versions, json[QString("gameCenterEnabledVersions")]);
    m_game_center_enabled_versions_isSet = !json[QString("gameCenterEnabledVersions")].isNull() && m_game_center_enabled_versions_isValid;

    m_in_app_purchases_isValid = ::OpenAPI::fromJsonValue(m_in_app_purchases, json[QString("inAppPurchases")]);
    m_in_app_purchases_isSet = !json[QString("inAppPurchases")].isNull() && m_in_app_purchases_isValid;

    m_pre_order_isValid = ::OpenAPI::fromJsonValue(m_pre_order, json[QString("preOrder")]);
    m_pre_order_isSet = !json[QString("preOrder")].isNull() && m_pre_order_isValid;

    m_pre_release_versions_isValid = ::OpenAPI::fromJsonValue(m_pre_release_versions, json[QString("preReleaseVersions")]);
    m_pre_release_versions_isSet = !json[QString("preReleaseVersions")].isNull() && m_pre_release_versions_isValid;

    m_prices_isValid = ::OpenAPI::fromJsonValue(m_prices, json[QString("prices")]);
    m_prices_isSet = !json[QString("prices")].isNull() && m_prices_isValid;
}

QString OAIApp_relationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp_relationships::asJsonObject() const {
    QJsonObject obj;
    if (m_app_infos.isSet()) {
        obj.insert(QString("appInfos"), ::OpenAPI::toJsonValue(m_app_infos));
    }
    if (m_app_store_versions.isSet()) {
        obj.insert(QString("appStoreVersions"), ::OpenAPI::toJsonValue(m_app_store_versions));
    }
    if (m_available_territories.isSet()) {
        obj.insert(QString("availableTerritories"), ::OpenAPI::toJsonValue(m_available_territories));
    }
    if (m_beta_app_localizations.isSet()) {
        obj.insert(QString("betaAppLocalizations"), ::OpenAPI::toJsonValue(m_beta_app_localizations));
    }
    if (m_beta_app_review_detail.isSet()) {
        obj.insert(QString("betaAppReviewDetail"), ::OpenAPI::toJsonValue(m_beta_app_review_detail));
    }
    if (m_beta_groups.isSet()) {
        obj.insert(QString("betaGroups"), ::OpenAPI::toJsonValue(m_beta_groups));
    }
    if (m_beta_license_agreement.isSet()) {
        obj.insert(QString("betaLicenseAgreement"), ::OpenAPI::toJsonValue(m_beta_license_agreement));
    }
    if (m_builds.isSet()) {
        obj.insert(QString("builds"), ::OpenAPI::toJsonValue(m_builds));
    }
    if (m_end_user_license_agreement.isSet()) {
        obj.insert(QString("endUserLicenseAgreement"), ::OpenAPI::toJsonValue(m_end_user_license_agreement));
    }
    if (m_game_center_enabled_versions.isSet()) {
        obj.insert(QString("gameCenterEnabledVersions"), ::OpenAPI::toJsonValue(m_game_center_enabled_versions));
    }
    if (m_in_app_purchases.isSet()) {
        obj.insert(QString("inAppPurchases"), ::OpenAPI::toJsonValue(m_in_app_purchases));
    }
    if (m_pre_order.isSet()) {
        obj.insert(QString("preOrder"), ::OpenAPI::toJsonValue(m_pre_order));
    }
    if (m_pre_release_versions.isSet()) {
        obj.insert(QString("preReleaseVersions"), ::OpenAPI::toJsonValue(m_pre_release_versions));
    }
    if (m_prices.isSet()) {
        obj.insert(QString("prices"), ::OpenAPI::toJsonValue(m_prices));
    }
    return obj;
}

OAIApp_relationships_appInfos OAIApp_relationships::getAppInfos() const {
    return m_app_infos;
}
void OAIApp_relationships::setAppInfos(const OAIApp_relationships_appInfos &app_infos) {
    m_app_infos = app_infos;
    m_app_infos_isSet = true;
}

bool OAIApp_relationships::is_app_infos_Set() const{
    return m_app_infos_isSet;
}

bool OAIApp_relationships::is_app_infos_Valid() const{
    return m_app_infos_isValid;
}

OAIApp_relationships_appStoreVersions OAIApp_relationships::getAppStoreVersions() const {
    return m_app_store_versions;
}
void OAIApp_relationships::setAppStoreVersions(const OAIApp_relationships_appStoreVersions &app_store_versions) {
    m_app_store_versions = app_store_versions;
    m_app_store_versions_isSet = true;
}

bool OAIApp_relationships::is_app_store_versions_Set() const{
    return m_app_store_versions_isSet;
}

bool OAIApp_relationships::is_app_store_versions_Valid() const{
    return m_app_store_versions_isValid;
}

OAIApp_relationships_availableTerritories OAIApp_relationships::getAvailableTerritories() const {
    return m_available_territories;
}
void OAIApp_relationships::setAvailableTerritories(const OAIApp_relationships_availableTerritories &available_territories) {
    m_available_territories = available_territories;
    m_available_territories_isSet = true;
}

bool OAIApp_relationships::is_available_territories_Set() const{
    return m_available_territories_isSet;
}

bool OAIApp_relationships::is_available_territories_Valid() const{
    return m_available_territories_isValid;
}

OAIApp_relationships_betaAppLocalizations OAIApp_relationships::getBetaAppLocalizations() const {
    return m_beta_app_localizations;
}
void OAIApp_relationships::setBetaAppLocalizations(const OAIApp_relationships_betaAppLocalizations &beta_app_localizations) {
    m_beta_app_localizations = beta_app_localizations;
    m_beta_app_localizations_isSet = true;
}

bool OAIApp_relationships::is_beta_app_localizations_Set() const{
    return m_beta_app_localizations_isSet;
}

bool OAIApp_relationships::is_beta_app_localizations_Valid() const{
    return m_beta_app_localizations_isValid;
}

OAIApp_relationships_betaAppReviewDetail OAIApp_relationships::getBetaAppReviewDetail() const {
    return m_beta_app_review_detail;
}
void OAIApp_relationships::setBetaAppReviewDetail(const OAIApp_relationships_betaAppReviewDetail &beta_app_review_detail) {
    m_beta_app_review_detail = beta_app_review_detail;
    m_beta_app_review_detail_isSet = true;
}

bool OAIApp_relationships::is_beta_app_review_detail_Set() const{
    return m_beta_app_review_detail_isSet;
}

bool OAIApp_relationships::is_beta_app_review_detail_Valid() const{
    return m_beta_app_review_detail_isValid;
}

OAIApp_relationships_betaGroups OAIApp_relationships::getBetaGroups() const {
    return m_beta_groups;
}
void OAIApp_relationships::setBetaGroups(const OAIApp_relationships_betaGroups &beta_groups) {
    m_beta_groups = beta_groups;
    m_beta_groups_isSet = true;
}

bool OAIApp_relationships::is_beta_groups_Set() const{
    return m_beta_groups_isSet;
}

bool OAIApp_relationships::is_beta_groups_Valid() const{
    return m_beta_groups_isValid;
}

OAIApp_relationships_betaLicenseAgreement OAIApp_relationships::getBetaLicenseAgreement() const {
    return m_beta_license_agreement;
}
void OAIApp_relationships::setBetaLicenseAgreement(const OAIApp_relationships_betaLicenseAgreement &beta_license_agreement) {
    m_beta_license_agreement = beta_license_agreement;
    m_beta_license_agreement_isSet = true;
}

bool OAIApp_relationships::is_beta_license_agreement_Set() const{
    return m_beta_license_agreement_isSet;
}

bool OAIApp_relationships::is_beta_license_agreement_Valid() const{
    return m_beta_license_agreement_isValid;
}

OAIApp_relationships_builds OAIApp_relationships::getBuilds() const {
    return m_builds;
}
void OAIApp_relationships::setBuilds(const OAIApp_relationships_builds &builds) {
    m_builds = builds;
    m_builds_isSet = true;
}

bool OAIApp_relationships::is_builds_Set() const{
    return m_builds_isSet;
}

bool OAIApp_relationships::is_builds_Valid() const{
    return m_builds_isValid;
}

OAIApp_relationships_endUserLicenseAgreement OAIApp_relationships::getEndUserLicenseAgreement() const {
    return m_end_user_license_agreement;
}
void OAIApp_relationships::setEndUserLicenseAgreement(const OAIApp_relationships_endUserLicenseAgreement &end_user_license_agreement) {
    m_end_user_license_agreement = end_user_license_agreement;
    m_end_user_license_agreement_isSet = true;
}

bool OAIApp_relationships::is_end_user_license_agreement_Set() const{
    return m_end_user_license_agreement_isSet;
}

bool OAIApp_relationships::is_end_user_license_agreement_Valid() const{
    return m_end_user_license_agreement_isValid;
}

OAIApp_relationships_gameCenterEnabledVersions OAIApp_relationships::getGameCenterEnabledVersions() const {
    return m_game_center_enabled_versions;
}
void OAIApp_relationships::setGameCenterEnabledVersions(const OAIApp_relationships_gameCenterEnabledVersions &game_center_enabled_versions) {
    m_game_center_enabled_versions = game_center_enabled_versions;
    m_game_center_enabled_versions_isSet = true;
}

bool OAIApp_relationships::is_game_center_enabled_versions_Set() const{
    return m_game_center_enabled_versions_isSet;
}

bool OAIApp_relationships::is_game_center_enabled_versions_Valid() const{
    return m_game_center_enabled_versions_isValid;
}

OAIApp_relationships_inAppPurchases OAIApp_relationships::getInAppPurchases() const {
    return m_in_app_purchases;
}
void OAIApp_relationships::setInAppPurchases(const OAIApp_relationships_inAppPurchases &in_app_purchases) {
    m_in_app_purchases = in_app_purchases;
    m_in_app_purchases_isSet = true;
}

bool OAIApp_relationships::is_in_app_purchases_Set() const{
    return m_in_app_purchases_isSet;
}

bool OAIApp_relationships::is_in_app_purchases_Valid() const{
    return m_in_app_purchases_isValid;
}

OAIApp_relationships_preOrder OAIApp_relationships::getPreOrder() const {
    return m_pre_order;
}
void OAIApp_relationships::setPreOrder(const OAIApp_relationships_preOrder &pre_order) {
    m_pre_order = pre_order;
    m_pre_order_isSet = true;
}

bool OAIApp_relationships::is_pre_order_Set() const{
    return m_pre_order_isSet;
}

bool OAIApp_relationships::is_pre_order_Valid() const{
    return m_pre_order_isValid;
}

OAIApp_relationships_preReleaseVersions OAIApp_relationships::getPreReleaseVersions() const {
    return m_pre_release_versions;
}
void OAIApp_relationships::setPreReleaseVersions(const OAIApp_relationships_preReleaseVersions &pre_release_versions) {
    m_pre_release_versions = pre_release_versions;
    m_pre_release_versions_isSet = true;
}

bool OAIApp_relationships::is_pre_release_versions_Set() const{
    return m_pre_release_versions_isSet;
}

bool OAIApp_relationships::is_pre_release_versions_Valid() const{
    return m_pre_release_versions_isValid;
}

OAIApp_relationships_prices OAIApp_relationships::getPrices() const {
    return m_prices;
}
void OAIApp_relationships::setPrices(const OAIApp_relationships_prices &prices) {
    m_prices = prices;
    m_prices_isSet = true;
}

bool OAIApp_relationships::is_prices_Set() const{
    return m_prices_isSet;
}

bool OAIApp_relationships::is_prices_Valid() const{
    return m_prices_isValid;
}

bool OAIApp_relationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_infos.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_store_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_territories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beta_app_localizations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beta_app_review_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beta_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beta_license_agreement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_builds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_user_license_agreement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_center_enabled_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_app_purchases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_release_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prices.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp_relationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
