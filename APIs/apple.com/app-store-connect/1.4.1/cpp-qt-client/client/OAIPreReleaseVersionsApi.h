/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreReleaseVersionsApi_H
#define OAI_OAIPreReleaseVersionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppResponse.h"
#include "OAIBuildsResponse.h"
#include "OAIErrorResponse.h"
#include "OAIPreReleaseVersionsResponse.h"
#include "OAIPrereleaseVersionResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreReleaseVersionsApi : public QObject {
    Q_OBJECT

public:
    OAIPreReleaseVersionsApi(const int timeOut = 0);
    ~OAIPreReleaseVersionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_apps QList<QString> [optional]
    */
    virtual void preReleaseVersionsAppGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void preReleaseVersionsBuildsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  filter_builds_expired QList<QString> [optional]
    * @param[in]  filter_builds_processing_state QList<QString> [optional]
    * @param[in]  filter_platform QList<QString> [optional]
    * @param[in]  filter_version QList<QString> [optional]
    * @param[in]  filter_app QList<QString> [optional]
    * @param[in]  filter_builds QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_pre_release_versions QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_builds qint32 [optional]
    */
    virtual void preReleaseVersionsGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_builds_expired = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_builds_processing_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_platform = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_version = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_app = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_pre_release_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_builds = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_pre_release_versions QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_builds qint32 [optional]
    */
    virtual void preReleaseVersionsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_pre_release_versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_builds = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void preReleaseVersionsAppGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void preReleaseVersionsBuildsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void preReleaseVersionsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void preReleaseVersionsGetInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void preReleaseVersionsAppGetToOneRelatedSignal(OAIAppResponse summary);
    void preReleaseVersionsBuildsGetToManyRelatedSignal(OAIBuildsResponse summary);
    void preReleaseVersionsGetCollectionSignal(OAIPreReleaseVersionsResponse summary);
    void preReleaseVersionsGetInstanceSignal(OAIPrereleaseVersionResponse summary);


    void preReleaseVersionsAppGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppResponse summary);
    void preReleaseVersionsBuildsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBuildsResponse summary);
    void preReleaseVersionsGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIPreReleaseVersionsResponse summary);
    void preReleaseVersionsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIPrereleaseVersionResponse summary);

    Q_DECL_DEPRECATED_X("Use preReleaseVersionsAppGetToOneRelatedSignalError() instead")
    void preReleaseVersionsAppGetToOneRelatedSignalE(OAIAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preReleaseVersionsAppGetToOneRelatedSignalError(OAIAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preReleaseVersionsBuildsGetToManyRelatedSignalError() instead")
    void preReleaseVersionsBuildsGetToManyRelatedSignalE(OAIBuildsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preReleaseVersionsBuildsGetToManyRelatedSignalError(OAIBuildsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preReleaseVersionsGetCollectionSignalError() instead")
    void preReleaseVersionsGetCollectionSignalE(OAIPreReleaseVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preReleaseVersionsGetCollectionSignalError(OAIPreReleaseVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preReleaseVersionsGetInstanceSignalError() instead")
    void preReleaseVersionsGetInstanceSignalE(OAIPrereleaseVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preReleaseVersionsGetInstanceSignalError(OAIPrereleaseVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use preReleaseVersionsAppGetToOneRelatedSignalErrorFull() instead")
    void preReleaseVersionsAppGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preReleaseVersionsAppGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preReleaseVersionsBuildsGetToManyRelatedSignalErrorFull() instead")
    void preReleaseVersionsBuildsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preReleaseVersionsBuildsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preReleaseVersionsGetCollectionSignalErrorFull() instead")
    void preReleaseVersionsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preReleaseVersionsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preReleaseVersionsGetInstanceSignalErrorFull() instead")
    void preReleaseVersionsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preReleaseVersionsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
