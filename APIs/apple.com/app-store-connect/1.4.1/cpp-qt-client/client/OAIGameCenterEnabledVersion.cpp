/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameCenterEnabledVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameCenterEnabledVersion::OAIGameCenterEnabledVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameCenterEnabledVersion::OAIGameCenterEnabledVersion() {
    this->initializeModel();
}

OAIGameCenterEnabledVersion::~OAIGameCenterEnabledVersion() {}

void OAIGameCenterEnabledVersion::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_relationships_isSet = false;
    m_relationships_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGameCenterEnabledVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameCenterEnabledVersion::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_relationships_isValid = ::OpenAPI::fromJsonValue(m_relationships, json[QString("relationships")]);
    m_relationships_isSet = !json[QString("relationships")].isNull() && m_relationships_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGameCenterEnabledVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameCenterEnabledVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_relationships.isSet()) {
        obj.insert(QString("relationships"), ::OpenAPI::toJsonValue(m_relationships));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIGameCenterEnabledVersion_attributes OAIGameCenterEnabledVersion::getAttributes() const {
    return m_attributes;
}
void OAIGameCenterEnabledVersion::setAttributes(const OAIGameCenterEnabledVersion_attributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGameCenterEnabledVersion::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGameCenterEnabledVersion::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIGameCenterEnabledVersion::getId() const {
    return m_id;
}
void OAIGameCenterEnabledVersion::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGameCenterEnabledVersion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGameCenterEnabledVersion::is_id_Valid() const{
    return m_id_isValid;
}

OAIResourceLinks OAIGameCenterEnabledVersion::getLinks() const {
    return m_links;
}
void OAIGameCenterEnabledVersion::setLinks(const OAIResourceLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIGameCenterEnabledVersion::is_links_Set() const{
    return m_links_isSet;
}

bool OAIGameCenterEnabledVersion::is_links_Valid() const{
    return m_links_isValid;
}

OAIGameCenterEnabledVersion_relationships OAIGameCenterEnabledVersion::getRelationships() const {
    return m_relationships;
}
void OAIGameCenterEnabledVersion::setRelationships(const OAIGameCenterEnabledVersion_relationships &relationships) {
    m_relationships = relationships;
    m_relationships_isSet = true;
}

bool OAIGameCenterEnabledVersion::is_relationships_Set() const{
    return m_relationships_isSet;
}

bool OAIGameCenterEnabledVersion::is_relationships_Valid() const{
    return m_relationships_isValid;
}

QString OAIGameCenterEnabledVersion::getType() const {
    return m_type;
}
void OAIGameCenterEnabledVersion::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGameCenterEnabledVersion::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGameCenterEnabledVersion::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGameCenterEnabledVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationships.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameCenterEnabledVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_links_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
