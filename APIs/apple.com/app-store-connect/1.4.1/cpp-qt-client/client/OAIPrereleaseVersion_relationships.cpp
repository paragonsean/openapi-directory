/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrereleaseVersion_relationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrereleaseVersion_relationships::OAIPrereleaseVersion_relationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrereleaseVersion_relationships::OAIPrereleaseVersion_relationships() {
    this->initializeModel();
}

OAIPrereleaseVersion_relationships::~OAIPrereleaseVersion_relationships() {}

void OAIPrereleaseVersion_relationships::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_builds_isSet = false;
    m_builds_isValid = false;
}

void OAIPrereleaseVersion_relationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrereleaseVersion_relationships::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_builds_isValid = ::OpenAPI::fromJsonValue(m_builds, json[QString("builds")]);
    m_builds_isSet = !json[QString("builds")].isNull() && m_builds_isValid;
}

QString OAIPrereleaseVersion_relationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrereleaseVersion_relationships::asJsonObject() const {
    QJsonObject obj;
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_builds.isSet()) {
        obj.insert(QString("builds"), ::OpenAPI::toJsonValue(m_builds));
    }
    return obj;
}

OAIAppEncryptionDeclaration_relationships_app OAIPrereleaseVersion_relationships::getApp() const {
    return m_app;
}
void OAIPrereleaseVersion_relationships::setApp(const OAIAppEncryptionDeclaration_relationships_app &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIPrereleaseVersion_relationships::is_app_Set() const{
    return m_app_isSet;
}

bool OAIPrereleaseVersion_relationships::is_app_Valid() const{
    return m_app_isValid;
}

OAIApp_relationships_builds OAIPrereleaseVersion_relationships::getBuilds() const {
    return m_builds;
}
void OAIPrereleaseVersion_relationships::setBuilds(const OAIApp_relationships_builds &builds) {
    m_builds = builds;
    m_builds_isSet = true;
}

bool OAIPrereleaseVersion_relationships::is_builds_Set() const{
    return m_builds_isSet;
}

bool OAIPrereleaseVersion_relationships::is_builds_Valid() const{
    return m_builds_isValid;
}

bool OAIPrereleaseVersion_relationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_builds.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrereleaseVersion_relationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
