/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice_attributes::OAIDevice_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice_attributes::OAIDevice_attributes() {
    this->initializeModel();
}

OAIDevice_attributes::~OAIDevice_attributes() {}

void OAIDevice_attributes::initializeModel() {

    m_added_date_isSet = false;
    m_added_date_isValid = false;

    m_device_class_isSet = false;
    m_device_class_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_udid_isSet = false;
    m_udid_isValid = false;
}

void OAIDevice_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice_attributes::fromJsonObject(QJsonObject json) {

    m_added_date_isValid = ::OpenAPI::fromJsonValue(m_added_date, json[QString("addedDate")]);
    m_added_date_isSet = !json[QString("addedDate")].isNull() && m_added_date_isValid;

    m_device_class_isValid = ::OpenAPI::fromJsonValue(m_device_class, json[QString("deviceClass")]);
    m_device_class_isSet = !json[QString("deviceClass")].isNull() && m_device_class_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_udid_isValid = ::OpenAPI::fromJsonValue(m_udid, json[QString("udid")]);
    m_udid_isSet = !json[QString("udid")].isNull() && m_udid_isValid;
}

QString OAIDevice_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_added_date_isSet) {
        obj.insert(QString("addedDate"), ::OpenAPI::toJsonValue(m_added_date));
    }
    if (m_device_class_isSet) {
        obj.insert(QString("deviceClass"), ::OpenAPI::toJsonValue(m_device_class));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_udid_isSet) {
        obj.insert(QString("udid"), ::OpenAPI::toJsonValue(m_udid));
    }
    return obj;
}

QDateTime OAIDevice_attributes::getAddedDate() const {
    return m_added_date;
}
void OAIDevice_attributes::setAddedDate(const QDateTime &added_date) {
    m_added_date = added_date;
    m_added_date_isSet = true;
}

bool OAIDevice_attributes::is_added_date_Set() const{
    return m_added_date_isSet;
}

bool OAIDevice_attributes::is_added_date_Valid() const{
    return m_added_date_isValid;
}

QString OAIDevice_attributes::getDeviceClass() const {
    return m_device_class;
}
void OAIDevice_attributes::setDeviceClass(const QString &device_class) {
    m_device_class = device_class;
    m_device_class_isSet = true;
}

bool OAIDevice_attributes::is_device_class_Set() const{
    return m_device_class_isSet;
}

bool OAIDevice_attributes::is_device_class_Valid() const{
    return m_device_class_isValid;
}

QString OAIDevice_attributes::getModel() const {
    return m_model;
}
void OAIDevice_attributes::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIDevice_attributes::is_model_Set() const{
    return m_model_isSet;
}

bool OAIDevice_attributes::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIDevice_attributes::getName() const {
    return m_name;
}
void OAIDevice_attributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDevice_attributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDevice_attributes::is_name_Valid() const{
    return m_name_isValid;
}

OAIBundleIdPlatform OAIDevice_attributes::getPlatform() const {
    return m_platform;
}
void OAIDevice_attributes::setPlatform(const OAIBundleIdPlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIDevice_attributes::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIDevice_attributes::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIDevice_attributes::getStatus() const {
    return m_status;
}
void OAIDevice_attributes::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDevice_attributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDevice_attributes::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDevice_attributes::getUdid() const {
    return m_udid;
}
void OAIDevice_attributes::setUdid(const QString &udid) {
    m_udid = udid;
    m_udid_isSet = true;
}

bool OAIDevice_attributes::is_udid_Set() const{
    return m_udid_isSet;
}

bool OAIDevice_attributes::is_udid_Valid() const{
    return m_udid_isValid;
}

bool OAIDevice_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
