/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgeRatingDeclaration_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgeRatingDeclaration_attributes::OAIAgeRatingDeclaration_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgeRatingDeclaration_attributes::OAIAgeRatingDeclaration_attributes() {
    this->initializeModel();
}

OAIAgeRatingDeclaration_attributes::~OAIAgeRatingDeclaration_attributes() {}

void OAIAgeRatingDeclaration_attributes::initializeModel() {

    m_alcohol_tobacco_or_drug_use_or_references_isSet = false;
    m_alcohol_tobacco_or_drug_use_or_references_isValid = false;

    m_contests_isSet = false;
    m_contests_isValid = false;

    m_gambling_isSet = false;
    m_gambling_isValid = false;

    m_gambling_and_contests_isSet = false;
    m_gambling_and_contests_isValid = false;

    m_gambling_simulated_isSet = false;
    m_gambling_simulated_isValid = false;

    m_horror_or_fear_themes_isSet = false;
    m_horror_or_fear_themes_isValid = false;

    m_kids_age_band_isSet = false;
    m_kids_age_band_isValid = false;

    m_mature_or_suggestive_themes_isSet = false;
    m_mature_or_suggestive_themes_isValid = false;

    m_medical_or_treatment_information_isSet = false;
    m_medical_or_treatment_information_isValid = false;

    m_profanity_or_crude_humor_isSet = false;
    m_profanity_or_crude_humor_isValid = false;

    m_seventeen_plus_isSet = false;
    m_seventeen_plus_isValid = false;

    m_sexual_content_graphic_and_nudity_isSet = false;
    m_sexual_content_graphic_and_nudity_isValid = false;

    m_sexual_content_or_nudity_isSet = false;
    m_sexual_content_or_nudity_isValid = false;

    m_unrestricted_web_access_isSet = false;
    m_unrestricted_web_access_isValid = false;

    m_violence_cartoon_or_fantasy_isSet = false;
    m_violence_cartoon_or_fantasy_isValid = false;

    m_violence_realistic_isSet = false;
    m_violence_realistic_isValid = false;

    m_violence_realistic_prolonged_graphic_or_sadistic_isSet = false;
    m_violence_realistic_prolonged_graphic_or_sadistic_isValid = false;
}

void OAIAgeRatingDeclaration_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgeRatingDeclaration_attributes::fromJsonObject(QJsonObject json) {

    m_alcohol_tobacco_or_drug_use_or_references_isValid = ::OpenAPI::fromJsonValue(m_alcohol_tobacco_or_drug_use_or_references, json[QString("alcoholTobaccoOrDrugUseOrReferences")]);
    m_alcohol_tobacco_or_drug_use_or_references_isSet = !json[QString("alcoholTobaccoOrDrugUseOrReferences")].isNull() && m_alcohol_tobacco_or_drug_use_or_references_isValid;

    m_contests_isValid = ::OpenAPI::fromJsonValue(m_contests, json[QString("contests")]);
    m_contests_isSet = !json[QString("contests")].isNull() && m_contests_isValid;

    m_gambling_isValid = ::OpenAPI::fromJsonValue(m_gambling, json[QString("gambling")]);
    m_gambling_isSet = !json[QString("gambling")].isNull() && m_gambling_isValid;

    m_gambling_and_contests_isValid = ::OpenAPI::fromJsonValue(m_gambling_and_contests, json[QString("gamblingAndContests")]);
    m_gambling_and_contests_isSet = !json[QString("gamblingAndContests")].isNull() && m_gambling_and_contests_isValid;

    m_gambling_simulated_isValid = ::OpenAPI::fromJsonValue(m_gambling_simulated, json[QString("gamblingSimulated")]);
    m_gambling_simulated_isSet = !json[QString("gamblingSimulated")].isNull() && m_gambling_simulated_isValid;

    m_horror_or_fear_themes_isValid = ::OpenAPI::fromJsonValue(m_horror_or_fear_themes, json[QString("horrorOrFearThemes")]);
    m_horror_or_fear_themes_isSet = !json[QString("horrorOrFearThemes")].isNull() && m_horror_or_fear_themes_isValid;

    m_kids_age_band_isValid = ::OpenAPI::fromJsonValue(m_kids_age_band, json[QString("kidsAgeBand")]);
    m_kids_age_band_isSet = !json[QString("kidsAgeBand")].isNull() && m_kids_age_band_isValid;

    m_mature_or_suggestive_themes_isValid = ::OpenAPI::fromJsonValue(m_mature_or_suggestive_themes, json[QString("matureOrSuggestiveThemes")]);
    m_mature_or_suggestive_themes_isSet = !json[QString("matureOrSuggestiveThemes")].isNull() && m_mature_or_suggestive_themes_isValid;

    m_medical_or_treatment_information_isValid = ::OpenAPI::fromJsonValue(m_medical_or_treatment_information, json[QString("medicalOrTreatmentInformation")]);
    m_medical_or_treatment_information_isSet = !json[QString("medicalOrTreatmentInformation")].isNull() && m_medical_or_treatment_information_isValid;

    m_profanity_or_crude_humor_isValid = ::OpenAPI::fromJsonValue(m_profanity_or_crude_humor, json[QString("profanityOrCrudeHumor")]);
    m_profanity_or_crude_humor_isSet = !json[QString("profanityOrCrudeHumor")].isNull() && m_profanity_or_crude_humor_isValid;

    m_seventeen_plus_isValid = ::OpenAPI::fromJsonValue(m_seventeen_plus, json[QString("seventeenPlus")]);
    m_seventeen_plus_isSet = !json[QString("seventeenPlus")].isNull() && m_seventeen_plus_isValid;

    m_sexual_content_graphic_and_nudity_isValid = ::OpenAPI::fromJsonValue(m_sexual_content_graphic_and_nudity, json[QString("sexualContentGraphicAndNudity")]);
    m_sexual_content_graphic_and_nudity_isSet = !json[QString("sexualContentGraphicAndNudity")].isNull() && m_sexual_content_graphic_and_nudity_isValid;

    m_sexual_content_or_nudity_isValid = ::OpenAPI::fromJsonValue(m_sexual_content_or_nudity, json[QString("sexualContentOrNudity")]);
    m_sexual_content_or_nudity_isSet = !json[QString("sexualContentOrNudity")].isNull() && m_sexual_content_or_nudity_isValid;

    m_unrestricted_web_access_isValid = ::OpenAPI::fromJsonValue(m_unrestricted_web_access, json[QString("unrestrictedWebAccess")]);
    m_unrestricted_web_access_isSet = !json[QString("unrestrictedWebAccess")].isNull() && m_unrestricted_web_access_isValid;

    m_violence_cartoon_or_fantasy_isValid = ::OpenAPI::fromJsonValue(m_violence_cartoon_or_fantasy, json[QString("violenceCartoonOrFantasy")]);
    m_violence_cartoon_or_fantasy_isSet = !json[QString("violenceCartoonOrFantasy")].isNull() && m_violence_cartoon_or_fantasy_isValid;

    m_violence_realistic_isValid = ::OpenAPI::fromJsonValue(m_violence_realistic, json[QString("violenceRealistic")]);
    m_violence_realistic_isSet = !json[QString("violenceRealistic")].isNull() && m_violence_realistic_isValid;

    m_violence_realistic_prolonged_graphic_or_sadistic_isValid = ::OpenAPI::fromJsonValue(m_violence_realistic_prolonged_graphic_or_sadistic, json[QString("violenceRealisticProlongedGraphicOrSadistic")]);
    m_violence_realistic_prolonged_graphic_or_sadistic_isSet = !json[QString("violenceRealisticProlongedGraphicOrSadistic")].isNull() && m_violence_realistic_prolonged_graphic_or_sadistic_isValid;
}

QString OAIAgeRatingDeclaration_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgeRatingDeclaration_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_alcohol_tobacco_or_drug_use_or_references_isSet) {
        obj.insert(QString("alcoholTobaccoOrDrugUseOrReferences"), ::OpenAPI::toJsonValue(m_alcohol_tobacco_or_drug_use_or_references));
    }
    if (m_contests_isSet) {
        obj.insert(QString("contests"), ::OpenAPI::toJsonValue(m_contests));
    }
    if (m_gambling_isSet) {
        obj.insert(QString("gambling"), ::OpenAPI::toJsonValue(m_gambling));
    }
    if (m_gambling_and_contests_isSet) {
        obj.insert(QString("gamblingAndContests"), ::OpenAPI::toJsonValue(m_gambling_and_contests));
    }
    if (m_gambling_simulated_isSet) {
        obj.insert(QString("gamblingSimulated"), ::OpenAPI::toJsonValue(m_gambling_simulated));
    }
    if (m_horror_or_fear_themes_isSet) {
        obj.insert(QString("horrorOrFearThemes"), ::OpenAPI::toJsonValue(m_horror_or_fear_themes));
    }
    if (m_kids_age_band.isSet()) {
        obj.insert(QString("kidsAgeBand"), ::OpenAPI::toJsonValue(m_kids_age_band));
    }
    if (m_mature_or_suggestive_themes_isSet) {
        obj.insert(QString("matureOrSuggestiveThemes"), ::OpenAPI::toJsonValue(m_mature_or_suggestive_themes));
    }
    if (m_medical_or_treatment_information_isSet) {
        obj.insert(QString("medicalOrTreatmentInformation"), ::OpenAPI::toJsonValue(m_medical_or_treatment_information));
    }
    if (m_profanity_or_crude_humor_isSet) {
        obj.insert(QString("profanityOrCrudeHumor"), ::OpenAPI::toJsonValue(m_profanity_or_crude_humor));
    }
    if (m_seventeen_plus_isSet) {
        obj.insert(QString("seventeenPlus"), ::OpenAPI::toJsonValue(m_seventeen_plus));
    }
    if (m_sexual_content_graphic_and_nudity_isSet) {
        obj.insert(QString("sexualContentGraphicAndNudity"), ::OpenAPI::toJsonValue(m_sexual_content_graphic_and_nudity));
    }
    if (m_sexual_content_or_nudity_isSet) {
        obj.insert(QString("sexualContentOrNudity"), ::OpenAPI::toJsonValue(m_sexual_content_or_nudity));
    }
    if (m_unrestricted_web_access_isSet) {
        obj.insert(QString("unrestrictedWebAccess"), ::OpenAPI::toJsonValue(m_unrestricted_web_access));
    }
    if (m_violence_cartoon_or_fantasy_isSet) {
        obj.insert(QString("violenceCartoonOrFantasy"), ::OpenAPI::toJsonValue(m_violence_cartoon_or_fantasy));
    }
    if (m_violence_realistic_isSet) {
        obj.insert(QString("violenceRealistic"), ::OpenAPI::toJsonValue(m_violence_realistic));
    }
    if (m_violence_realistic_prolonged_graphic_or_sadistic_isSet) {
        obj.insert(QString("violenceRealisticProlongedGraphicOrSadistic"), ::OpenAPI::toJsonValue(m_violence_realistic_prolonged_graphic_or_sadistic));
    }
    return obj;
}

QString OAIAgeRatingDeclaration_attributes::getAlcoholTobaccoOrDrugUseOrReferences() const {
    return m_alcohol_tobacco_or_drug_use_or_references;
}
void OAIAgeRatingDeclaration_attributes::setAlcoholTobaccoOrDrugUseOrReferences(const QString &alcohol_tobacco_or_drug_use_or_references) {
    m_alcohol_tobacco_or_drug_use_or_references = alcohol_tobacco_or_drug_use_or_references;
    m_alcohol_tobacco_or_drug_use_or_references_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_alcohol_tobacco_or_drug_use_or_references_Set() const{
    return m_alcohol_tobacco_or_drug_use_or_references_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_alcohol_tobacco_or_drug_use_or_references_Valid() const{
    return m_alcohol_tobacco_or_drug_use_or_references_isValid;
}

QString OAIAgeRatingDeclaration_attributes::getContests() const {
    return m_contests;
}
void OAIAgeRatingDeclaration_attributes::setContests(const QString &contests) {
    m_contests = contests;
    m_contests_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_contests_Set() const{
    return m_contests_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_contests_Valid() const{
    return m_contests_isValid;
}

bool OAIAgeRatingDeclaration_attributes::isGambling() const {
    return m_gambling;
}
void OAIAgeRatingDeclaration_attributes::setGambling(const bool &gambling) {
    m_gambling = gambling;
    m_gambling_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_gambling_Set() const{
    return m_gambling_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_gambling_Valid() const{
    return m_gambling_isValid;
}

bool OAIAgeRatingDeclaration_attributes::isGamblingAndContests() const {
    return m_gambling_and_contests;
}
void OAIAgeRatingDeclaration_attributes::setGamblingAndContests(const bool &gambling_and_contests) {
    m_gambling_and_contests = gambling_and_contests;
    m_gambling_and_contests_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_gambling_and_contests_Set() const{
    return m_gambling_and_contests_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_gambling_and_contests_Valid() const{
    return m_gambling_and_contests_isValid;
}

QString OAIAgeRatingDeclaration_attributes::getGamblingSimulated() const {
    return m_gambling_simulated;
}
void OAIAgeRatingDeclaration_attributes::setGamblingSimulated(const QString &gambling_simulated) {
    m_gambling_simulated = gambling_simulated;
    m_gambling_simulated_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_gambling_simulated_Set() const{
    return m_gambling_simulated_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_gambling_simulated_Valid() const{
    return m_gambling_simulated_isValid;
}

QString OAIAgeRatingDeclaration_attributes::getHorrorOrFearThemes() const {
    return m_horror_or_fear_themes;
}
void OAIAgeRatingDeclaration_attributes::setHorrorOrFearThemes(const QString &horror_or_fear_themes) {
    m_horror_or_fear_themes = horror_or_fear_themes;
    m_horror_or_fear_themes_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_horror_or_fear_themes_Set() const{
    return m_horror_or_fear_themes_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_horror_or_fear_themes_Valid() const{
    return m_horror_or_fear_themes_isValid;
}

OAIKidsAgeBand OAIAgeRatingDeclaration_attributes::getKidsAgeBand() const {
    return m_kids_age_band;
}
void OAIAgeRatingDeclaration_attributes::setKidsAgeBand(const OAIKidsAgeBand &kids_age_band) {
    m_kids_age_band = kids_age_band;
    m_kids_age_band_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_kids_age_band_Set() const{
    return m_kids_age_band_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_kids_age_band_Valid() const{
    return m_kids_age_band_isValid;
}

QString OAIAgeRatingDeclaration_attributes::getMatureOrSuggestiveThemes() const {
    return m_mature_or_suggestive_themes;
}
void OAIAgeRatingDeclaration_attributes::setMatureOrSuggestiveThemes(const QString &mature_or_suggestive_themes) {
    m_mature_or_suggestive_themes = mature_or_suggestive_themes;
    m_mature_or_suggestive_themes_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_mature_or_suggestive_themes_Set() const{
    return m_mature_or_suggestive_themes_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_mature_or_suggestive_themes_Valid() const{
    return m_mature_or_suggestive_themes_isValid;
}

QString OAIAgeRatingDeclaration_attributes::getMedicalOrTreatmentInformation() const {
    return m_medical_or_treatment_information;
}
void OAIAgeRatingDeclaration_attributes::setMedicalOrTreatmentInformation(const QString &medical_or_treatment_information) {
    m_medical_or_treatment_information = medical_or_treatment_information;
    m_medical_or_treatment_information_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_medical_or_treatment_information_Set() const{
    return m_medical_or_treatment_information_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_medical_or_treatment_information_Valid() const{
    return m_medical_or_treatment_information_isValid;
}

QString OAIAgeRatingDeclaration_attributes::getProfanityOrCrudeHumor() const {
    return m_profanity_or_crude_humor;
}
void OAIAgeRatingDeclaration_attributes::setProfanityOrCrudeHumor(const QString &profanity_or_crude_humor) {
    m_profanity_or_crude_humor = profanity_or_crude_humor;
    m_profanity_or_crude_humor_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_profanity_or_crude_humor_Set() const{
    return m_profanity_or_crude_humor_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_profanity_or_crude_humor_Valid() const{
    return m_profanity_or_crude_humor_isValid;
}

bool OAIAgeRatingDeclaration_attributes::isSeventeenPlus() const {
    return m_seventeen_plus;
}
void OAIAgeRatingDeclaration_attributes::setSeventeenPlus(const bool &seventeen_plus) {
    m_seventeen_plus = seventeen_plus;
    m_seventeen_plus_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_seventeen_plus_Set() const{
    return m_seventeen_plus_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_seventeen_plus_Valid() const{
    return m_seventeen_plus_isValid;
}

QString OAIAgeRatingDeclaration_attributes::getSexualContentGraphicAndNudity() const {
    return m_sexual_content_graphic_and_nudity;
}
void OAIAgeRatingDeclaration_attributes::setSexualContentGraphicAndNudity(const QString &sexual_content_graphic_and_nudity) {
    m_sexual_content_graphic_and_nudity = sexual_content_graphic_and_nudity;
    m_sexual_content_graphic_and_nudity_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_sexual_content_graphic_and_nudity_Set() const{
    return m_sexual_content_graphic_and_nudity_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_sexual_content_graphic_and_nudity_Valid() const{
    return m_sexual_content_graphic_and_nudity_isValid;
}

QString OAIAgeRatingDeclaration_attributes::getSexualContentOrNudity() const {
    return m_sexual_content_or_nudity;
}
void OAIAgeRatingDeclaration_attributes::setSexualContentOrNudity(const QString &sexual_content_or_nudity) {
    m_sexual_content_or_nudity = sexual_content_or_nudity;
    m_sexual_content_or_nudity_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_sexual_content_or_nudity_Set() const{
    return m_sexual_content_or_nudity_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_sexual_content_or_nudity_Valid() const{
    return m_sexual_content_or_nudity_isValid;
}

bool OAIAgeRatingDeclaration_attributes::isUnrestrictedWebAccess() const {
    return m_unrestricted_web_access;
}
void OAIAgeRatingDeclaration_attributes::setUnrestrictedWebAccess(const bool &unrestricted_web_access) {
    m_unrestricted_web_access = unrestricted_web_access;
    m_unrestricted_web_access_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_unrestricted_web_access_Set() const{
    return m_unrestricted_web_access_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_unrestricted_web_access_Valid() const{
    return m_unrestricted_web_access_isValid;
}

QString OAIAgeRatingDeclaration_attributes::getViolenceCartoonOrFantasy() const {
    return m_violence_cartoon_or_fantasy;
}
void OAIAgeRatingDeclaration_attributes::setViolenceCartoonOrFantasy(const QString &violence_cartoon_or_fantasy) {
    m_violence_cartoon_or_fantasy = violence_cartoon_or_fantasy;
    m_violence_cartoon_or_fantasy_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_violence_cartoon_or_fantasy_Set() const{
    return m_violence_cartoon_or_fantasy_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_violence_cartoon_or_fantasy_Valid() const{
    return m_violence_cartoon_or_fantasy_isValid;
}

QString OAIAgeRatingDeclaration_attributes::getViolenceRealistic() const {
    return m_violence_realistic;
}
void OAIAgeRatingDeclaration_attributes::setViolenceRealistic(const QString &violence_realistic) {
    m_violence_realistic = violence_realistic;
    m_violence_realistic_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_violence_realistic_Set() const{
    return m_violence_realistic_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_violence_realistic_Valid() const{
    return m_violence_realistic_isValid;
}

QString OAIAgeRatingDeclaration_attributes::getViolenceRealisticProlongedGraphicOrSadistic() const {
    return m_violence_realistic_prolonged_graphic_or_sadistic;
}
void OAIAgeRatingDeclaration_attributes::setViolenceRealisticProlongedGraphicOrSadistic(const QString &violence_realistic_prolonged_graphic_or_sadistic) {
    m_violence_realistic_prolonged_graphic_or_sadistic = violence_realistic_prolonged_graphic_or_sadistic;
    m_violence_realistic_prolonged_graphic_or_sadistic_isSet = true;
}

bool OAIAgeRatingDeclaration_attributes::is_violence_realistic_prolonged_graphic_or_sadistic_Set() const{
    return m_violence_realistic_prolonged_graphic_or_sadistic_isSet;
}

bool OAIAgeRatingDeclaration_attributes::is_violence_realistic_prolonged_graphic_or_sadistic_Valid() const{
    return m_violence_realistic_prolonged_graphic_or_sadistic_isValid;
}

bool OAIAgeRatingDeclaration_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alcohol_tobacco_or_drug_use_or_references_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gambling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gambling_and_contests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gambling_simulated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horror_or_fear_themes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kids_age_band.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mature_or_suggestive_themes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medical_or_treatment_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profanity_or_crude_humor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seventeen_plus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sexual_content_graphic_and_nudity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sexual_content_or_nudity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unrestricted_web_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violence_cartoon_or_fantasy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violence_realistic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violence_realistic_prolonged_graphic_or_sadistic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgeRatingDeclaration_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
