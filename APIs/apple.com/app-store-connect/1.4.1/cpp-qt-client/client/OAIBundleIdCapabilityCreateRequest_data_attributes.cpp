/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBundleIdCapabilityCreateRequest_data_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBundleIdCapabilityCreateRequest_data_attributes::OAIBundleIdCapabilityCreateRequest_data_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBundleIdCapabilityCreateRequest_data_attributes::OAIBundleIdCapabilityCreateRequest_data_attributes() {
    this->initializeModel();
}

OAIBundleIdCapabilityCreateRequest_data_attributes::~OAIBundleIdCapabilityCreateRequest_data_attributes() {}

void OAIBundleIdCapabilityCreateRequest_data_attributes::initializeModel() {

    m_capability_type_isSet = false;
    m_capability_type_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAIBundleIdCapabilityCreateRequest_data_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBundleIdCapabilityCreateRequest_data_attributes::fromJsonObject(QJsonObject json) {

    m_capability_type_isValid = ::OpenAPI::fromJsonValue(m_capability_type, json[QString("capabilityType")]);
    m_capability_type_isSet = !json[QString("capabilityType")].isNull() && m_capability_type_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;
}

QString OAIBundleIdCapabilityCreateRequest_data_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBundleIdCapabilityCreateRequest_data_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_capability_type.isSet()) {
        obj.insert(QString("capabilityType"), ::OpenAPI::toJsonValue(m_capability_type));
    }
    if (m_settings.size() > 0) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

OAICapabilityType OAIBundleIdCapabilityCreateRequest_data_attributes::getCapabilityType() const {
    return m_capability_type;
}
void OAIBundleIdCapabilityCreateRequest_data_attributes::setCapabilityType(const OAICapabilityType &capability_type) {
    m_capability_type = capability_type;
    m_capability_type_isSet = true;
}

bool OAIBundleIdCapabilityCreateRequest_data_attributes::is_capability_type_Set() const{
    return m_capability_type_isSet;
}

bool OAIBundleIdCapabilityCreateRequest_data_attributes::is_capability_type_Valid() const{
    return m_capability_type_isValid;
}

QList<OAICapabilitySetting> OAIBundleIdCapabilityCreateRequest_data_attributes::getSettings() const {
    return m_settings;
}
void OAIBundleIdCapabilityCreateRequest_data_attributes::setSettings(const QList<OAICapabilitySetting> &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIBundleIdCapabilityCreateRequest_data_attributes::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIBundleIdCapabilityCreateRequest_data_attributes::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAIBundleIdCapabilityCreateRequest_data_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capability_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBundleIdCapabilityCreateRequest_data_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capability_type_isValid && true;
}

} // namespace OpenAPI
