/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppPreviewSetsApi_H
#define OAI_OAIAppPreviewSetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppPreviewSetAppPreviewsLinkagesRequest.h"
#include "OAIAppPreviewSetAppPreviewsLinkagesResponse.h"
#include "OAIAppPreviewSetCreateRequest.h"
#include "OAIAppPreviewSetResponse.h"
#include "OAIAppPreviewsResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppPreviewSetsApi : public QObject {
    Q_OBJECT

public:
    OAIAppPreviewSetsApi(const int timeOut = 0);
    ~OAIAppPreviewSetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_previews QList<QString> [optional]
    * @param[in]  fields_app_preview_sets QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    */
    virtual void appPreviewSetsAppPreviewsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_previews = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_preview_sets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void appPreviewSetsAppPreviewsGetToManyRelationship(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_app_preview_set_app_previews_linkages_request OAIAppPreviewSetAppPreviewsLinkagesRequest [required]
    */
    virtual void appPreviewSetsAppPreviewsReplaceToManyRelationship(const QString &id, const OAIAppPreviewSetAppPreviewsLinkagesRequest &oai_app_preview_set_app_previews_linkages_request);

    /**
    * @param[in]  oai_app_preview_set_create_request OAIAppPreviewSetCreateRequest [required]
    */
    virtual void appPreviewSetsCreateInstance(const OAIAppPreviewSetCreateRequest &oai_app_preview_set_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void appPreviewSetsDeleteInstance(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_app_preview_sets QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_app_previews QList<QString> [optional]
    * @param[in]  limit_app_previews qint32 [optional]
    */
    virtual void appPreviewSetsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_preview_sets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_app_previews = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_app_previews = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appPreviewSetsAppPreviewsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void appPreviewSetsAppPreviewsGetToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void appPreviewSetsAppPreviewsReplaceToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void appPreviewSetsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void appPreviewSetsDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void appPreviewSetsGetInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appPreviewSetsAppPreviewsGetToManyRelatedSignal(OAIAppPreviewsResponse summary);
    void appPreviewSetsAppPreviewsGetToManyRelationshipSignal(OAIAppPreviewSetAppPreviewsLinkagesResponse summary);
    void appPreviewSetsAppPreviewsReplaceToManyRelationshipSignal();
    void appPreviewSetsCreateInstanceSignal(OAIAppPreviewSetResponse summary);
    void appPreviewSetsDeleteInstanceSignal();
    void appPreviewSetsGetInstanceSignal(OAIAppPreviewSetResponse summary);


    void appPreviewSetsAppPreviewsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppPreviewsResponse summary);
    void appPreviewSetsAppPreviewsGetToManyRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIAppPreviewSetAppPreviewsLinkagesResponse summary);
    void appPreviewSetsAppPreviewsReplaceToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void appPreviewSetsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppPreviewSetResponse summary);
    void appPreviewSetsDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void appPreviewSetsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIAppPreviewSetResponse summary);

    Q_DECL_DEPRECATED_X("Use appPreviewSetsAppPreviewsGetToManyRelatedSignalError() instead")
    void appPreviewSetsAppPreviewsGetToManyRelatedSignalE(OAIAppPreviewsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsAppPreviewsGetToManyRelatedSignalError(OAIAppPreviewsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPreviewSetsAppPreviewsGetToManyRelationshipSignalError() instead")
    void appPreviewSetsAppPreviewsGetToManyRelationshipSignalE(OAIAppPreviewSetAppPreviewsLinkagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsAppPreviewsGetToManyRelationshipSignalError(OAIAppPreviewSetAppPreviewsLinkagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPreviewSetsAppPreviewsReplaceToManyRelationshipSignalError() instead")
    void appPreviewSetsAppPreviewsReplaceToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsAppPreviewsReplaceToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPreviewSetsCreateInstanceSignalError() instead")
    void appPreviewSetsCreateInstanceSignalE(OAIAppPreviewSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsCreateInstanceSignalError(OAIAppPreviewSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPreviewSetsDeleteInstanceSignalError() instead")
    void appPreviewSetsDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPreviewSetsGetInstanceSignalError() instead")
    void appPreviewSetsGetInstanceSignalE(OAIAppPreviewSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsGetInstanceSignalError(OAIAppPreviewSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appPreviewSetsAppPreviewsGetToManyRelatedSignalErrorFull() instead")
    void appPreviewSetsAppPreviewsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsAppPreviewsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPreviewSetsAppPreviewsGetToManyRelationshipSignalErrorFull() instead")
    void appPreviewSetsAppPreviewsGetToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsAppPreviewsGetToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPreviewSetsAppPreviewsReplaceToManyRelationshipSignalErrorFull() instead")
    void appPreviewSetsAppPreviewsReplaceToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsAppPreviewsReplaceToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPreviewSetsCreateInstanceSignalErrorFull() instead")
    void appPreviewSetsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPreviewSetsDeleteInstanceSignalErrorFull() instead")
    void appPreviewSetsDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPreviewSetsGetInstanceSignalErrorFull() instead")
    void appPreviewSetsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPreviewSetsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
