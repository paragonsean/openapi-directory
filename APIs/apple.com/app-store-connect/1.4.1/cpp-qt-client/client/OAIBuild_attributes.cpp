/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuild_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuild_attributes::OAIBuild_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuild_attributes::OAIBuild_attributes() {
    this->initializeModel();
}

OAIBuild_attributes::~OAIBuild_attributes() {}

void OAIBuild_attributes::initializeModel() {

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_icon_asset_token_isSet = false;
    m_icon_asset_token_isValid = false;

    m_min_os_version_isSet = false;
    m_min_os_version_isValid = false;

    m_processing_state_isSet = false;
    m_processing_state_isValid = false;

    m_uploaded_date_isSet = false;
    m_uploaded_date_isValid = false;

    m_uses_non_exempt_encryption_isSet = false;
    m_uses_non_exempt_encryption_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIBuild_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuild_attributes::fromJsonObject(QJsonObject json) {

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_icon_asset_token_isValid = ::OpenAPI::fromJsonValue(m_icon_asset_token, json[QString("iconAssetToken")]);
    m_icon_asset_token_isSet = !json[QString("iconAssetToken")].isNull() && m_icon_asset_token_isValid;

    m_min_os_version_isValid = ::OpenAPI::fromJsonValue(m_min_os_version, json[QString("minOsVersion")]);
    m_min_os_version_isSet = !json[QString("minOsVersion")].isNull() && m_min_os_version_isValid;

    m_processing_state_isValid = ::OpenAPI::fromJsonValue(m_processing_state, json[QString("processingState")]);
    m_processing_state_isSet = !json[QString("processingState")].isNull() && m_processing_state_isValid;

    m_uploaded_date_isValid = ::OpenAPI::fromJsonValue(m_uploaded_date, json[QString("uploadedDate")]);
    m_uploaded_date_isSet = !json[QString("uploadedDate")].isNull() && m_uploaded_date_isValid;

    m_uses_non_exempt_encryption_isValid = ::OpenAPI::fromJsonValue(m_uses_non_exempt_encryption, json[QString("usesNonExemptEncryption")]);
    m_uses_non_exempt_encryption_isSet = !json[QString("usesNonExemptEncryption")].isNull() && m_uses_non_exempt_encryption_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIBuild_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuild_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_icon_asset_token.isSet()) {
        obj.insert(QString("iconAssetToken"), ::OpenAPI::toJsonValue(m_icon_asset_token));
    }
    if (m_min_os_version_isSet) {
        obj.insert(QString("minOsVersion"), ::OpenAPI::toJsonValue(m_min_os_version));
    }
    if (m_processing_state_isSet) {
        obj.insert(QString("processingState"), ::OpenAPI::toJsonValue(m_processing_state));
    }
    if (m_uploaded_date_isSet) {
        obj.insert(QString("uploadedDate"), ::OpenAPI::toJsonValue(m_uploaded_date));
    }
    if (m_uses_non_exempt_encryption_isSet) {
        obj.insert(QString("usesNonExemptEncryption"), ::OpenAPI::toJsonValue(m_uses_non_exempt_encryption));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QDateTime OAIBuild_attributes::getExpirationDate() const {
    return m_expiration_date;
}
void OAIBuild_attributes::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIBuild_attributes::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIBuild_attributes::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

bool OAIBuild_attributes::isExpired() const {
    return m_expired;
}
void OAIBuild_attributes::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAIBuild_attributes::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAIBuild_attributes::is_expired_Valid() const{
    return m_expired_isValid;
}

OAIImageAsset OAIBuild_attributes::getIconAssetToken() const {
    return m_icon_asset_token;
}
void OAIBuild_attributes::setIconAssetToken(const OAIImageAsset &icon_asset_token) {
    m_icon_asset_token = icon_asset_token;
    m_icon_asset_token_isSet = true;
}

bool OAIBuild_attributes::is_icon_asset_token_Set() const{
    return m_icon_asset_token_isSet;
}

bool OAIBuild_attributes::is_icon_asset_token_Valid() const{
    return m_icon_asset_token_isValid;
}

QString OAIBuild_attributes::getMinOsVersion() const {
    return m_min_os_version;
}
void OAIBuild_attributes::setMinOsVersion(const QString &min_os_version) {
    m_min_os_version = min_os_version;
    m_min_os_version_isSet = true;
}

bool OAIBuild_attributes::is_min_os_version_Set() const{
    return m_min_os_version_isSet;
}

bool OAIBuild_attributes::is_min_os_version_Valid() const{
    return m_min_os_version_isValid;
}

QString OAIBuild_attributes::getProcessingState() const {
    return m_processing_state;
}
void OAIBuild_attributes::setProcessingState(const QString &processing_state) {
    m_processing_state = processing_state;
    m_processing_state_isSet = true;
}

bool OAIBuild_attributes::is_processing_state_Set() const{
    return m_processing_state_isSet;
}

bool OAIBuild_attributes::is_processing_state_Valid() const{
    return m_processing_state_isValid;
}

QDateTime OAIBuild_attributes::getUploadedDate() const {
    return m_uploaded_date;
}
void OAIBuild_attributes::setUploadedDate(const QDateTime &uploaded_date) {
    m_uploaded_date = uploaded_date;
    m_uploaded_date_isSet = true;
}

bool OAIBuild_attributes::is_uploaded_date_Set() const{
    return m_uploaded_date_isSet;
}

bool OAIBuild_attributes::is_uploaded_date_Valid() const{
    return m_uploaded_date_isValid;
}

bool OAIBuild_attributes::isUsesNonExemptEncryption() const {
    return m_uses_non_exempt_encryption;
}
void OAIBuild_attributes::setUsesNonExemptEncryption(const bool &uses_non_exempt_encryption) {
    m_uses_non_exempt_encryption = uses_non_exempt_encryption;
    m_uses_non_exempt_encryption_isSet = true;
}

bool OAIBuild_attributes::is_uses_non_exempt_encryption_Set() const{
    return m_uses_non_exempt_encryption_isSet;
}

bool OAIBuild_attributes::is_uses_non_exempt_encryption_Valid() const{
    return m_uses_non_exempt_encryption_isValid;
}

QString OAIBuild_attributes::getVersion() const {
    return m_version;
}
void OAIBuild_attributes::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBuild_attributes::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBuild_attributes::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIBuild_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_asset_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_non_exempt_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuild_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
