/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameCenterEnabledVersion_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameCenterEnabledVersion_attributes::OAIGameCenterEnabledVersion_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameCenterEnabledVersion_attributes::OAIGameCenterEnabledVersion_attributes() {
    this->initializeModel();
}

OAIGameCenterEnabledVersion_attributes::~OAIGameCenterEnabledVersion_attributes() {}

void OAIGameCenterEnabledVersion_attributes::initializeModel() {

    m_icon_asset_isSet = false;
    m_icon_asset_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_version_string_isSet = false;
    m_version_string_isValid = false;
}

void OAIGameCenterEnabledVersion_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameCenterEnabledVersion_attributes::fromJsonObject(QJsonObject json) {

    m_icon_asset_isValid = ::OpenAPI::fromJsonValue(m_icon_asset, json[QString("iconAsset")]);
    m_icon_asset_isSet = !json[QString("iconAsset")].isNull() && m_icon_asset_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_version_string_isValid = ::OpenAPI::fromJsonValue(m_version_string, json[QString("versionString")]);
    m_version_string_isSet = !json[QString("versionString")].isNull() && m_version_string_isValid;
}

QString OAIGameCenterEnabledVersion_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameCenterEnabledVersion_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_icon_asset.isSet()) {
        obj.insert(QString("iconAsset"), ::OpenAPI::toJsonValue(m_icon_asset));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_version_string_isSet) {
        obj.insert(QString("versionString"), ::OpenAPI::toJsonValue(m_version_string));
    }
    return obj;
}

OAIImageAsset OAIGameCenterEnabledVersion_attributes::getIconAsset() const {
    return m_icon_asset;
}
void OAIGameCenterEnabledVersion_attributes::setIconAsset(const OAIImageAsset &icon_asset) {
    m_icon_asset = icon_asset;
    m_icon_asset_isSet = true;
}

bool OAIGameCenterEnabledVersion_attributes::is_icon_asset_Set() const{
    return m_icon_asset_isSet;
}

bool OAIGameCenterEnabledVersion_attributes::is_icon_asset_Valid() const{
    return m_icon_asset_isValid;
}

OAIPlatform OAIGameCenterEnabledVersion_attributes::getPlatform() const {
    return m_platform;
}
void OAIGameCenterEnabledVersion_attributes::setPlatform(const OAIPlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIGameCenterEnabledVersion_attributes::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIGameCenterEnabledVersion_attributes::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIGameCenterEnabledVersion_attributes::getVersionString() const {
    return m_version_string;
}
void OAIGameCenterEnabledVersion_attributes::setVersionString(const QString &version_string) {
    m_version_string = version_string;
    m_version_string_isSet = true;
}

bool OAIGameCenterEnabledVersion_attributes::is_version_string_Set() const{
    return m_version_string_isSet;
}

bool OAIGameCenterEnabledVersion_attributes::is_version_string_Valid() const{
    return m_version_string_isValid;
}

bool OAIGameCenterEnabledVersion_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon_asset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameCenterEnabledVersion_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
