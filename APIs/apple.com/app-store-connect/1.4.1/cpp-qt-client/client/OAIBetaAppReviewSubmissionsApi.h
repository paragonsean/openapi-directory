/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBetaAppReviewSubmissionsApi_H
#define OAI_OAIBetaAppReviewSubmissionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBetaAppReviewSubmissionCreateRequest.h"
#include "OAIBetaAppReviewSubmissionResponse.h"
#include "OAIBetaAppReviewSubmissionsResponse.h"
#include "OAIBuildResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBetaAppReviewSubmissionsApi : public QObject {
    Q_OBJECT

public:
    OAIBetaAppReviewSubmissionsApi(const int timeOut = 0);
    ~OAIBetaAppReviewSubmissionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_builds QList<QString> [optional]
    */
    virtual void betaAppReviewSubmissionsBuildGetToOneRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_beta_app_review_submission_create_request OAIBetaAppReviewSubmissionCreateRequest [required]
    */
    virtual void betaAppReviewSubmissionsCreateInstance(const OAIBetaAppReviewSubmissionCreateRequest &oai_beta_app_review_submission_create_request);

    /**
    * @param[in]  filter_build QList<QString> [required]
    * @param[in]  filter_beta_review_state QList<QString> [optional]
    * @param[in]  fields_beta_app_review_submissions QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    */
    virtual void betaAppReviewSubmissionsGetCollection(const QList<QString> &filter_build, const ::OpenAPI::OptionalParam<QList<QString>> &filter_beta_review_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_review_submissions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_beta_app_review_submissions QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_builds QList<QString> [optional]
    */
    virtual void betaAppReviewSubmissionsGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_beta_app_review_submissions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_builds = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void betaAppReviewSubmissionsBuildGetToOneRelatedCallback(OAIHttpRequestWorker *worker);
    void betaAppReviewSubmissionsCreateInstanceCallback(OAIHttpRequestWorker *worker);
    void betaAppReviewSubmissionsGetCollectionCallback(OAIHttpRequestWorker *worker);
    void betaAppReviewSubmissionsGetInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void betaAppReviewSubmissionsBuildGetToOneRelatedSignal(OAIBuildResponse summary);
    void betaAppReviewSubmissionsCreateInstanceSignal(OAIBetaAppReviewSubmissionResponse summary);
    void betaAppReviewSubmissionsGetCollectionSignal(OAIBetaAppReviewSubmissionsResponse summary);
    void betaAppReviewSubmissionsGetInstanceSignal(OAIBetaAppReviewSubmissionResponse summary);


    void betaAppReviewSubmissionsBuildGetToOneRelatedSignalFull(OAIHttpRequestWorker *worker, OAIBuildResponse summary);
    void betaAppReviewSubmissionsCreateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppReviewSubmissionResponse summary);
    void betaAppReviewSubmissionsGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppReviewSubmissionsResponse summary);
    void betaAppReviewSubmissionsGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIBetaAppReviewSubmissionResponse summary);

    Q_DECL_DEPRECATED_X("Use betaAppReviewSubmissionsBuildGetToOneRelatedSignalError() instead")
    void betaAppReviewSubmissionsBuildGetToOneRelatedSignalE(OAIBuildResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewSubmissionsBuildGetToOneRelatedSignalError(OAIBuildResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewSubmissionsCreateInstanceSignalError() instead")
    void betaAppReviewSubmissionsCreateInstanceSignalE(OAIBetaAppReviewSubmissionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewSubmissionsCreateInstanceSignalError(OAIBetaAppReviewSubmissionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewSubmissionsGetCollectionSignalError() instead")
    void betaAppReviewSubmissionsGetCollectionSignalE(OAIBetaAppReviewSubmissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewSubmissionsGetCollectionSignalError(OAIBetaAppReviewSubmissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewSubmissionsGetInstanceSignalError() instead")
    void betaAppReviewSubmissionsGetInstanceSignalE(OAIBetaAppReviewSubmissionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewSubmissionsGetInstanceSignalError(OAIBetaAppReviewSubmissionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use betaAppReviewSubmissionsBuildGetToOneRelatedSignalErrorFull() instead")
    void betaAppReviewSubmissionsBuildGetToOneRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewSubmissionsBuildGetToOneRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewSubmissionsCreateInstanceSignalErrorFull() instead")
    void betaAppReviewSubmissionsCreateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewSubmissionsCreateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewSubmissionsGetCollectionSignalErrorFull() instead")
    void betaAppReviewSubmissionsGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewSubmissionsGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use betaAppReviewSubmissionsGetInstanceSignalErrorFull() instead")
    void betaAppReviewSubmissionsGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void betaAppReviewSubmissionsGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
