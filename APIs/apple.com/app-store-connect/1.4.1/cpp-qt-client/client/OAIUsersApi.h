/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppsResponse.h"
#include "OAIErrorResponse.h"
#include "OAIUserResponse.h"
#include "OAIUserUpdateRequest.h"
#include "OAIUserVisibleAppsLinkagesRequest.h"
#include "OAIUserVisibleAppsLinkagesResponse.h"
#include "OAIUsersResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void usersDeleteInstance(const QString &id);

    /**
    * @param[in]  filter_roles QList<QString> [optional]
    * @param[in]  filter_username QList<QString> [optional]
    * @param[in]  filter_visible_apps QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  fields_users QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_visible_apps qint32 [optional]
    */
    virtual void usersGetCollection(const ::OpenAPI::OptionalParam<QList<QString>> &filter_roles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_username = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_visible_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_users = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_visible_apps = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_users QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit_visible_apps qint32 [optional]
    */
    virtual void usersGetInstance(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_users = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit_visible_apps = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_user_update_request OAIUserUpdateRequest [required]
    */
    virtual void usersUpdateInstance(const QString &id, const OAIUserUpdateRequest &oai_user_update_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_user_visible_apps_linkages_request OAIUserVisibleAppsLinkagesRequest [required]
    */
    virtual void usersVisibleAppsCreateToManyRelationship(const QString &id, const OAIUserVisibleAppsLinkagesRequest &oai_user_visible_apps_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_user_visible_apps_linkages_request OAIUserVisibleAppsLinkagesRequest [required]
    */
    virtual void usersVisibleAppsDeleteToManyRelationship(const QString &id, const OAIUserVisibleAppsLinkagesRequest &oai_user_visible_apps_linkages_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  fields_apps QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void usersVisibleAppsGetToManyRelated(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields_apps = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void usersVisibleAppsGetToManyRelationship(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_user_visible_apps_linkages_request OAIUserVisibleAppsLinkagesRequest [required]
    */
    virtual void usersVisibleAppsReplaceToManyRelationship(const QString &id, const OAIUserVisibleAppsLinkagesRequest &oai_user_visible_apps_linkages_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersDeleteInstanceCallback(OAIHttpRequestWorker *worker);
    void usersGetCollectionCallback(OAIHttpRequestWorker *worker);
    void usersGetInstanceCallback(OAIHttpRequestWorker *worker);
    void usersUpdateInstanceCallback(OAIHttpRequestWorker *worker);
    void usersVisibleAppsCreateToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void usersVisibleAppsDeleteToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void usersVisibleAppsGetToManyRelatedCallback(OAIHttpRequestWorker *worker);
    void usersVisibleAppsGetToManyRelationshipCallback(OAIHttpRequestWorker *worker);
    void usersVisibleAppsReplaceToManyRelationshipCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersDeleteInstanceSignal();
    void usersGetCollectionSignal(OAIUsersResponse summary);
    void usersGetInstanceSignal(OAIUserResponse summary);
    void usersUpdateInstanceSignal(OAIUserResponse summary);
    void usersVisibleAppsCreateToManyRelationshipSignal();
    void usersVisibleAppsDeleteToManyRelationshipSignal();
    void usersVisibleAppsGetToManyRelatedSignal(OAIAppsResponse summary);
    void usersVisibleAppsGetToManyRelationshipSignal(OAIUserVisibleAppsLinkagesResponse summary);
    void usersVisibleAppsReplaceToManyRelationshipSignal();


    void usersDeleteInstanceSignalFull(OAIHttpRequestWorker *worker);
    void usersGetCollectionSignalFull(OAIHttpRequestWorker *worker, OAIUsersResponse summary);
    void usersGetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIUserResponse summary);
    void usersUpdateInstanceSignalFull(OAIHttpRequestWorker *worker, OAIUserResponse summary);
    void usersVisibleAppsCreateToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void usersVisibleAppsDeleteToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);
    void usersVisibleAppsGetToManyRelatedSignalFull(OAIHttpRequestWorker *worker, OAIAppsResponse summary);
    void usersVisibleAppsGetToManyRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIUserVisibleAppsLinkagesResponse summary);
    void usersVisibleAppsReplaceToManyRelationshipSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use usersDeleteInstanceSignalError() instead")
    void usersDeleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetCollectionSignalError() instead")
    void usersGetCollectionSignalE(OAIUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetCollectionSignalError(OAIUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetInstanceSignalError() instead")
    void usersGetInstanceSignalE(OAIUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetInstanceSignalError(OAIUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateInstanceSignalError() instead")
    void usersUpdateInstanceSignalE(OAIUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateInstanceSignalError(OAIUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersVisibleAppsCreateToManyRelationshipSignalError() instead")
    void usersVisibleAppsCreateToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersVisibleAppsCreateToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersVisibleAppsDeleteToManyRelationshipSignalError() instead")
    void usersVisibleAppsDeleteToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersVisibleAppsDeleteToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersVisibleAppsGetToManyRelatedSignalError() instead")
    void usersVisibleAppsGetToManyRelatedSignalE(OAIAppsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersVisibleAppsGetToManyRelatedSignalError(OAIAppsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersVisibleAppsGetToManyRelationshipSignalError() instead")
    void usersVisibleAppsGetToManyRelationshipSignalE(OAIUserVisibleAppsLinkagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersVisibleAppsGetToManyRelationshipSignalError(OAIUserVisibleAppsLinkagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersVisibleAppsReplaceToManyRelationshipSignalError() instead")
    void usersVisibleAppsReplaceToManyRelationshipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersVisibleAppsReplaceToManyRelationshipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersDeleteInstanceSignalErrorFull() instead")
    void usersDeleteInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetCollectionSignalErrorFull() instead")
    void usersGetCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetInstanceSignalErrorFull() instead")
    void usersGetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateInstanceSignalErrorFull() instead")
    void usersUpdateInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersVisibleAppsCreateToManyRelationshipSignalErrorFull() instead")
    void usersVisibleAppsCreateToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersVisibleAppsCreateToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersVisibleAppsDeleteToManyRelationshipSignalErrorFull() instead")
    void usersVisibleAppsDeleteToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersVisibleAppsDeleteToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersVisibleAppsGetToManyRelatedSignalErrorFull() instead")
    void usersVisibleAppsGetToManyRelatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersVisibleAppsGetToManyRelatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersVisibleAppsGetToManyRelationshipSignalErrorFull() instead")
    void usersVisibleAppsGetToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersVisibleAppsGetToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersVisibleAppsReplaceToManyRelationshipSignalErrorFull() instead")
    void usersVisibleAppsReplaceToManyRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersVisibleAppsReplaceToManyRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
