/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateType::OAICertificateType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateType::OAICertificateType() {
    this->initializeModel();
}

OAICertificateType::~OAICertificateType() {}

void OAICertificateType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICertificateType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICertificateType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IOS_DEVELOPMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateType::IOS_DEVELOPMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IOS_DISTRIBUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateType::IOS_DISTRIBUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAC_APP_DISTRIBUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateType::MAC_APP_DISTRIBUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAC_INSTALLER_DISTRIBUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateType::MAC_INSTALLER_DISTRIBUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAC_APP_DEVELOPMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateType::MAC_APP_DEVELOPMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEVELOPER_ID_KEXT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateType::DEVELOPER_ID_KEXT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEVELOPER_ID_APPLICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateType::DEVELOPER_ID_APPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEVELOPMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateType::DEVELOPMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISTRIBUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateType::DISTRIBUTION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICertificateType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICertificateType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICertificateType::IOS_DEVELOPMENT:
            val = "IOS_DEVELOPMENT";
            break;
        case eOAICertificateType::IOS_DISTRIBUTION:
            val = "IOS_DISTRIBUTION";
            break;
        case eOAICertificateType::MAC_APP_DISTRIBUTION:
            val = "MAC_APP_DISTRIBUTION";
            break;
        case eOAICertificateType::MAC_INSTALLER_DISTRIBUTION:
            val = "MAC_INSTALLER_DISTRIBUTION";
            break;
        case eOAICertificateType::MAC_APP_DEVELOPMENT:
            val = "MAC_APP_DEVELOPMENT";
            break;
        case eOAICertificateType::DEVELOPER_ID_KEXT:
            val = "DEVELOPER_ID_KEXT";
            break;
        case eOAICertificateType::DEVELOPER_ID_APPLICATION:
            val = "DEVELOPER_ID_APPLICATION";
            break;
        case eOAICertificateType::DEVELOPMENT:
            val = "DEVELOPMENT";
            break;
        case eOAICertificateType::DISTRIBUTION:
            val = "DISTRIBUTION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICertificateType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICertificateType::eOAICertificateType OAICertificateType::getValue() const {
    return m_value;
}

void OAICertificateType::setValue(const OAICertificateType::eOAICertificateType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICertificateType::isSet() const {
    
    return m_value_isSet;
}

bool OAICertificateType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
