/**
 * AviationData.Systems Airports API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirportsAPI_Models_Location_Country.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirportsAPI_Models_Location_Country::OAIAirportsAPI_Models_Location_Country(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirportsAPI_Models_Location_Country::OAIAirportsAPI_Models_Location_Country() {
    this->initializeModel();
}

OAIAirportsAPI_Models_Location_Country::~OAIAirportsAPI_Models_Location_Country() {}

void OAIAirportsAPI_Models_Location_Country::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_flag_url_isSet = false;
    m_flag_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAirportsAPI_Models_Location_Country::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirportsAPI_Models_Location_Country::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_flag_url_isValid = ::OpenAPI::fromJsonValue(m_flag_url, json[QString("flag_url")]);
    m_flag_url_isSet = !json[QString("flag_url")].isNull() && m_flag_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIAirportsAPI_Models_Location_Country::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirportsAPI_Models_Location_Country::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_flag_url_isSet) {
        obj.insert(QString("flag_url"), ::OpenAPI::toJsonValue(m_flag_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIAirportsAPI_Models_Location_Country::getCountryCode() const {
    return m_country_code;
}
void OAIAirportsAPI_Models_Location_Country::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIAirportsAPI_Models_Location_Country::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIAirportsAPI_Models_Location_Country::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIAirportsAPI_Models_Location_Country::getFlagUrl() const {
    return m_flag_url;
}
void OAIAirportsAPI_Models_Location_Country::setFlagUrl(const QString &flag_url) {
    m_flag_url = flag_url;
    m_flag_url_isSet = true;
}

bool OAIAirportsAPI_Models_Location_Country::is_flag_url_Set() const{
    return m_flag_url_isSet;
}

bool OAIAirportsAPI_Models_Location_Country::is_flag_url_Valid() const{
    return m_flag_url_isValid;
}

QString OAIAirportsAPI_Models_Location_Country::getName() const {
    return m_name;
}
void OAIAirportsAPI_Models_Location_Country::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAirportsAPI_Models_Location_Country::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAirportsAPI_Models_Location_Country::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAirportsAPI_Models_Location_Country::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirportsAPI_Models_Location_Country::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
