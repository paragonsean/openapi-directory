/**
 * AviationData.Systems Airports API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirportsAPI_Models_Runway.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirportsAPI_Models_Runway::OAIAirportsAPI_Models_Runway(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirportsAPI_Models_Runway::OAIAirportsAPI_Models_Runway() {
    this->initializeModel();
}

OAIAirportsAPI_Models_Runway::~OAIAirportsAPI_Models_Runway() {}

void OAIAirportsAPI_Models_Runway::initializeModel() {

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_h_e_latitude_isSet = false;
    m_h_e_latitude_isValid = false;

    m_h_e_longitude_isSet = false;
    m_h_e_longitude_isValid = false;

    m_he_displaced_threshold_ft_isSet = false;
    m_he_displaced_threshold_ft_isValid = false;

    m_he_elevation_ft_isSet = false;
    m_he_elevation_ft_isValid = false;

    m_he_heading_deg_isSet = false;
    m_he_heading_deg_isValid = false;

    m_le_displaced_threshold_ft_isSet = false;
    m_le_displaced_threshold_ft_isValid = false;

    m_le_elevation_ft_isSet = false;
    m_le_elevation_ft_isValid = false;

    m_le_heading_deg_isSet = false;
    m_le_heading_deg_isValid = false;

    m_le_latitude_isSet = false;
    m_le_latitude_isValid = false;

    m_le_longitude_isSet = false;
    m_le_longitude_isValid = false;

    m_length_ft_isSet = false;
    m_length_ft_isValid = false;

    m_lighted_isSet = false;
    m_lighted_isValid = false;

    m_surface_type_isSet = false;
    m_surface_type_isValid = false;

    m_width_ft_isSet = false;
    m_width_ft_isValid = false;
}

void OAIAirportsAPI_Models_Runway::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirportsAPI_Models_Runway::fromJsonObject(QJsonObject json) {

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_h_e_latitude_isValid = ::OpenAPI::fromJsonValue(m_h_e_latitude, json[QString("hE_latitude")]);
    m_h_e_latitude_isSet = !json[QString("hE_latitude")].isNull() && m_h_e_latitude_isValid;

    m_h_e_longitude_isValid = ::OpenAPI::fromJsonValue(m_h_e_longitude, json[QString("hE_longitude")]);
    m_h_e_longitude_isSet = !json[QString("hE_longitude")].isNull() && m_h_e_longitude_isValid;

    m_he_displaced_threshold_ft_isValid = ::OpenAPI::fromJsonValue(m_he_displaced_threshold_ft, json[QString("he_displaced_threshold_ft")]);
    m_he_displaced_threshold_ft_isSet = !json[QString("he_displaced_threshold_ft")].isNull() && m_he_displaced_threshold_ft_isValid;

    m_he_elevation_ft_isValid = ::OpenAPI::fromJsonValue(m_he_elevation_ft, json[QString("he_elevation_ft")]);
    m_he_elevation_ft_isSet = !json[QString("he_elevation_ft")].isNull() && m_he_elevation_ft_isValid;

    m_he_heading_deg_isValid = ::OpenAPI::fromJsonValue(m_he_heading_deg, json[QString("he_heading_deg")]);
    m_he_heading_deg_isSet = !json[QString("he_heading_deg")].isNull() && m_he_heading_deg_isValid;

    m_le_displaced_threshold_ft_isValid = ::OpenAPI::fromJsonValue(m_le_displaced_threshold_ft, json[QString("le_displaced_threshold_ft")]);
    m_le_displaced_threshold_ft_isSet = !json[QString("le_displaced_threshold_ft")].isNull() && m_le_displaced_threshold_ft_isValid;

    m_le_elevation_ft_isValid = ::OpenAPI::fromJsonValue(m_le_elevation_ft, json[QString("le_elevation_ft")]);
    m_le_elevation_ft_isSet = !json[QString("le_elevation_ft")].isNull() && m_le_elevation_ft_isValid;

    m_le_heading_deg_isValid = ::OpenAPI::fromJsonValue(m_le_heading_deg, json[QString("le_heading_deg")]);
    m_le_heading_deg_isSet = !json[QString("le_heading_deg")].isNull() && m_le_heading_deg_isValid;

    m_le_latitude_isValid = ::OpenAPI::fromJsonValue(m_le_latitude, json[QString("le_latitude")]);
    m_le_latitude_isSet = !json[QString("le_latitude")].isNull() && m_le_latitude_isValid;

    m_le_longitude_isValid = ::OpenAPI::fromJsonValue(m_le_longitude, json[QString("le_longitude")]);
    m_le_longitude_isSet = !json[QString("le_longitude")].isNull() && m_le_longitude_isValid;

    m_length_ft_isValid = ::OpenAPI::fromJsonValue(m_length_ft, json[QString("length_ft")]);
    m_length_ft_isSet = !json[QString("length_ft")].isNull() && m_length_ft_isValid;

    m_lighted_isValid = ::OpenAPI::fromJsonValue(m_lighted, json[QString("lighted")]);
    m_lighted_isSet = !json[QString("lighted")].isNull() && m_lighted_isValid;

    m_surface_type_isValid = ::OpenAPI::fromJsonValue(m_surface_type, json[QString("surface_type")]);
    m_surface_type_isSet = !json[QString("surface_type")].isNull() && m_surface_type_isValid;

    m_width_ft_isValid = ::OpenAPI::fromJsonValue(m_width_ft, json[QString("width_ft")]);
    m_width_ft_isSet = !json[QString("width_ft")].isNull() && m_width_ft_isValid;
}

QString OAIAirportsAPI_Models_Runway::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirportsAPI_Models_Runway::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_h_e_latitude_isSet) {
        obj.insert(QString("hE_latitude"), ::OpenAPI::toJsonValue(m_h_e_latitude));
    }
    if (m_h_e_longitude_isSet) {
        obj.insert(QString("hE_longitude"), ::OpenAPI::toJsonValue(m_h_e_longitude));
    }
    if (m_he_displaced_threshold_ft_isSet) {
        obj.insert(QString("he_displaced_threshold_ft"), ::OpenAPI::toJsonValue(m_he_displaced_threshold_ft));
    }
    if (m_he_elevation_ft_isSet) {
        obj.insert(QString("he_elevation_ft"), ::OpenAPI::toJsonValue(m_he_elevation_ft));
    }
    if (m_he_heading_deg_isSet) {
        obj.insert(QString("he_heading_deg"), ::OpenAPI::toJsonValue(m_he_heading_deg));
    }
    if (m_le_displaced_threshold_ft_isSet) {
        obj.insert(QString("le_displaced_threshold_ft"), ::OpenAPI::toJsonValue(m_le_displaced_threshold_ft));
    }
    if (m_le_elevation_ft_isSet) {
        obj.insert(QString("le_elevation_ft"), ::OpenAPI::toJsonValue(m_le_elevation_ft));
    }
    if (m_le_heading_deg_isSet) {
        obj.insert(QString("le_heading_deg"), ::OpenAPI::toJsonValue(m_le_heading_deg));
    }
    if (m_le_latitude_isSet) {
        obj.insert(QString("le_latitude"), ::OpenAPI::toJsonValue(m_le_latitude));
    }
    if (m_le_longitude_isSet) {
        obj.insert(QString("le_longitude"), ::OpenAPI::toJsonValue(m_le_longitude));
    }
    if (m_length_ft_isSet) {
        obj.insert(QString("length_ft"), ::OpenAPI::toJsonValue(m_length_ft));
    }
    if (m_lighted_isSet) {
        obj.insert(QString("lighted"), ::OpenAPI::toJsonValue(m_lighted));
    }
    if (m_surface_type_isSet) {
        obj.insert(QString("surface_type"), ::OpenAPI::toJsonValue(m_surface_type));
    }
    if (m_width_ft_isSet) {
        obj.insert(QString("width_ft"), ::OpenAPI::toJsonValue(m_width_ft));
    }
    return obj;
}

bool OAIAirportsAPI_Models_Runway::isClosed() const {
    return m_closed;
}
void OAIAirportsAPI_Models_Runway::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAIAirportsAPI_Models_Runway::getHELatitude() const {
    return m_h_e_latitude;
}
void OAIAirportsAPI_Models_Runway::setHELatitude(const QString &h_e_latitude) {
    m_h_e_latitude = h_e_latitude;
    m_h_e_latitude_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_h_e_latitude_Set() const{
    return m_h_e_latitude_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_h_e_latitude_Valid() const{
    return m_h_e_latitude_isValid;
}

QString OAIAirportsAPI_Models_Runway::getHELongitude() const {
    return m_h_e_longitude;
}
void OAIAirportsAPI_Models_Runway::setHELongitude(const QString &h_e_longitude) {
    m_h_e_longitude = h_e_longitude;
    m_h_e_longitude_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_h_e_longitude_Set() const{
    return m_h_e_longitude_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_h_e_longitude_Valid() const{
    return m_h_e_longitude_isValid;
}

QString OAIAirportsAPI_Models_Runway::getHeDisplacedThresholdFt() const {
    return m_he_displaced_threshold_ft;
}
void OAIAirportsAPI_Models_Runway::setHeDisplacedThresholdFt(const QString &he_displaced_threshold_ft) {
    m_he_displaced_threshold_ft = he_displaced_threshold_ft;
    m_he_displaced_threshold_ft_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_he_displaced_threshold_ft_Set() const{
    return m_he_displaced_threshold_ft_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_he_displaced_threshold_ft_Valid() const{
    return m_he_displaced_threshold_ft_isValid;
}

QString OAIAirportsAPI_Models_Runway::getHeElevationFt() const {
    return m_he_elevation_ft;
}
void OAIAirportsAPI_Models_Runway::setHeElevationFt(const QString &he_elevation_ft) {
    m_he_elevation_ft = he_elevation_ft;
    m_he_elevation_ft_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_he_elevation_ft_Set() const{
    return m_he_elevation_ft_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_he_elevation_ft_Valid() const{
    return m_he_elevation_ft_isValid;
}

QString OAIAirportsAPI_Models_Runway::getHeHeadingDeg() const {
    return m_he_heading_deg;
}
void OAIAirportsAPI_Models_Runway::setHeHeadingDeg(const QString &he_heading_deg) {
    m_he_heading_deg = he_heading_deg;
    m_he_heading_deg_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_he_heading_deg_Set() const{
    return m_he_heading_deg_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_he_heading_deg_Valid() const{
    return m_he_heading_deg_isValid;
}

QString OAIAirportsAPI_Models_Runway::getLeDisplacedThresholdFt() const {
    return m_le_displaced_threshold_ft;
}
void OAIAirportsAPI_Models_Runway::setLeDisplacedThresholdFt(const QString &le_displaced_threshold_ft) {
    m_le_displaced_threshold_ft = le_displaced_threshold_ft;
    m_le_displaced_threshold_ft_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_le_displaced_threshold_ft_Set() const{
    return m_le_displaced_threshold_ft_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_le_displaced_threshold_ft_Valid() const{
    return m_le_displaced_threshold_ft_isValid;
}

QString OAIAirportsAPI_Models_Runway::getLeElevationFt() const {
    return m_le_elevation_ft;
}
void OAIAirportsAPI_Models_Runway::setLeElevationFt(const QString &le_elevation_ft) {
    m_le_elevation_ft = le_elevation_ft;
    m_le_elevation_ft_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_le_elevation_ft_Set() const{
    return m_le_elevation_ft_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_le_elevation_ft_Valid() const{
    return m_le_elevation_ft_isValid;
}

QString OAIAirportsAPI_Models_Runway::getLeHeadingDeg() const {
    return m_le_heading_deg;
}
void OAIAirportsAPI_Models_Runway::setLeHeadingDeg(const QString &le_heading_deg) {
    m_le_heading_deg = le_heading_deg;
    m_le_heading_deg_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_le_heading_deg_Set() const{
    return m_le_heading_deg_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_le_heading_deg_Valid() const{
    return m_le_heading_deg_isValid;
}

QString OAIAirportsAPI_Models_Runway::getLeLatitude() const {
    return m_le_latitude;
}
void OAIAirportsAPI_Models_Runway::setLeLatitude(const QString &le_latitude) {
    m_le_latitude = le_latitude;
    m_le_latitude_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_le_latitude_Set() const{
    return m_le_latitude_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_le_latitude_Valid() const{
    return m_le_latitude_isValid;
}

QString OAIAirportsAPI_Models_Runway::getLeLongitude() const {
    return m_le_longitude;
}
void OAIAirportsAPI_Models_Runway::setLeLongitude(const QString &le_longitude) {
    m_le_longitude = le_longitude;
    m_le_longitude_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_le_longitude_Set() const{
    return m_le_longitude_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_le_longitude_Valid() const{
    return m_le_longitude_isValid;
}

QString OAIAirportsAPI_Models_Runway::getLengthFt() const {
    return m_length_ft;
}
void OAIAirportsAPI_Models_Runway::setLengthFt(const QString &length_ft) {
    m_length_ft = length_ft;
    m_length_ft_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_length_ft_Set() const{
    return m_length_ft_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_length_ft_Valid() const{
    return m_length_ft_isValid;
}

bool OAIAirportsAPI_Models_Runway::isLighted() const {
    return m_lighted;
}
void OAIAirportsAPI_Models_Runway::setLighted(const bool &lighted) {
    m_lighted = lighted;
    m_lighted_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_lighted_Set() const{
    return m_lighted_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_lighted_Valid() const{
    return m_lighted_isValid;
}

QString OAIAirportsAPI_Models_Runway::getSurfaceType() const {
    return m_surface_type;
}
void OAIAirportsAPI_Models_Runway::setSurfaceType(const QString &surface_type) {
    m_surface_type = surface_type;
    m_surface_type_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_surface_type_Set() const{
    return m_surface_type_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_surface_type_Valid() const{
    return m_surface_type_isValid;
}

QString OAIAirportsAPI_Models_Runway::getWidthFt() const {
    return m_width_ft;
}
void OAIAirportsAPI_Models_Runway::setWidthFt(const QString &width_ft) {
    m_width_ft = width_ft;
    m_width_ft_isSet = true;
}

bool OAIAirportsAPI_Models_Runway::is_width_ft_Set() const{
    return m_width_ft_isSet;
}

bool OAIAirportsAPI_Models_Runway::is_width_ft_Valid() const{
    return m_width_ft_isValid;
}

bool OAIAirportsAPI_Models_Runway::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_h_e_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_h_e_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_he_displaced_threshold_ft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_he_elevation_ft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_he_heading_deg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_le_displaced_threshold_ft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_le_elevation_ft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_le_heading_deg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_le_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_le_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_ft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lighted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surface_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_ft_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirportsAPI_Models_Runway::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
