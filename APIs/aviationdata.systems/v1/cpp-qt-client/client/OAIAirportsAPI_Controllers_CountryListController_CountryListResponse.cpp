/**
 * AviationData.Systems Airports API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirportsAPI_Controllers_CountryListController_CountryListResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::OAIAirportsAPI_Controllers_CountryListController_CountryListResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::OAIAirportsAPI_Controllers_CountryListController_CountryListResponse() {
    this->initializeModel();
}

OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::~OAIAirportsAPI_Controllers_CountryListController_CountryListResponse() {}

void OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_disclaimer_isSet = false;
    m_disclaimer_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_disclaimer_isValid = ::OpenAPI::fromJsonValue(m_disclaimer, json[QString("disclaimer")]);
    m_disclaimer_isSet = !json[QString("disclaimer")].isNull() && m_disclaimer_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("status_code")]);
    m_status_code_isSet = !json[QString("status_code")].isNull() && m_status_code_isValid;
}

QString OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_country.size() > 0) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_disclaimer_isSet) {
        obj.insert(QString("disclaimer"), ::OpenAPI::toJsonValue(m_disclaimer));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("status_code"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

QList<OAIAirportsAPI_Models_Country> OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::getCountry() const {
    return m_country;
}
void OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::setCountry(const QList<OAIAirportsAPI_Models_Country> &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::getDisclaimer() const {
    return m_disclaimer;
}
void OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::setDisclaimer(const QString &disclaimer) {
    m_disclaimer = disclaimer;
    m_disclaimer_isSet = true;
}

bool OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::is_disclaimer_Set() const{
    return m_disclaimer_isSet;
}

bool OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::is_disclaimer_Valid() const{
    return m_disclaimer_isValid;
}

QString OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::getMessage() const {
    return m_message;
}
void OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::getStatusCode() const {
    return m_status_code;
}
void OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disclaimer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirportsAPI_Controllers_CountryListController_CountryListResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
