/**
 * AviationData.Systems Airports API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAirportsAPI_Models_Runway.h
 *
 * 
 */

#ifndef OAIAirportsAPI_Models_Runway_H
#define OAIAirportsAPI_Models_Runway_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAirportsAPI_Models_Runway : public OAIObject {
public:
    OAIAirportsAPI_Models_Runway();
    OAIAirportsAPI_Models_Runway(QString json);
    ~OAIAirportsAPI_Models_Runway() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isClosed() const;
    void setClosed(const bool &closed);
    bool is_closed_Set() const;
    bool is_closed_Valid() const;

    QString getHELatitude() const;
    void setHELatitude(const QString &h_e_latitude);
    bool is_h_e_latitude_Set() const;
    bool is_h_e_latitude_Valid() const;

    QString getHELongitude() const;
    void setHELongitude(const QString &h_e_longitude);
    bool is_h_e_longitude_Set() const;
    bool is_h_e_longitude_Valid() const;

    QString getHeDisplacedThresholdFt() const;
    void setHeDisplacedThresholdFt(const QString &he_displaced_threshold_ft);
    bool is_he_displaced_threshold_ft_Set() const;
    bool is_he_displaced_threshold_ft_Valid() const;

    QString getHeElevationFt() const;
    void setHeElevationFt(const QString &he_elevation_ft);
    bool is_he_elevation_ft_Set() const;
    bool is_he_elevation_ft_Valid() const;

    QString getHeHeadingDeg() const;
    void setHeHeadingDeg(const QString &he_heading_deg);
    bool is_he_heading_deg_Set() const;
    bool is_he_heading_deg_Valid() const;

    QString getLeDisplacedThresholdFt() const;
    void setLeDisplacedThresholdFt(const QString &le_displaced_threshold_ft);
    bool is_le_displaced_threshold_ft_Set() const;
    bool is_le_displaced_threshold_ft_Valid() const;

    QString getLeElevationFt() const;
    void setLeElevationFt(const QString &le_elevation_ft);
    bool is_le_elevation_ft_Set() const;
    bool is_le_elevation_ft_Valid() const;

    QString getLeHeadingDeg() const;
    void setLeHeadingDeg(const QString &le_heading_deg);
    bool is_le_heading_deg_Set() const;
    bool is_le_heading_deg_Valid() const;

    QString getLeLatitude() const;
    void setLeLatitude(const QString &le_latitude);
    bool is_le_latitude_Set() const;
    bool is_le_latitude_Valid() const;

    QString getLeLongitude() const;
    void setLeLongitude(const QString &le_longitude);
    bool is_le_longitude_Set() const;
    bool is_le_longitude_Valid() const;

    QString getLengthFt() const;
    void setLengthFt(const QString &length_ft);
    bool is_length_ft_Set() const;
    bool is_length_ft_Valid() const;

    bool isLighted() const;
    void setLighted(const bool &lighted);
    bool is_lighted_Set() const;
    bool is_lighted_Valid() const;

    QString getSurfaceType() const;
    void setSurfaceType(const QString &surface_type);
    bool is_surface_type_Set() const;
    bool is_surface_type_Valid() const;

    QString getWidthFt() const;
    void setWidthFt(const QString &width_ft);
    bool is_width_ft_Set() const;
    bool is_width_ft_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_closed;
    bool m_closed_isSet;
    bool m_closed_isValid;

    QString m_h_e_latitude;
    bool m_h_e_latitude_isSet;
    bool m_h_e_latitude_isValid;

    QString m_h_e_longitude;
    bool m_h_e_longitude_isSet;
    bool m_h_e_longitude_isValid;

    QString m_he_displaced_threshold_ft;
    bool m_he_displaced_threshold_ft_isSet;
    bool m_he_displaced_threshold_ft_isValid;

    QString m_he_elevation_ft;
    bool m_he_elevation_ft_isSet;
    bool m_he_elevation_ft_isValid;

    QString m_he_heading_deg;
    bool m_he_heading_deg_isSet;
    bool m_he_heading_deg_isValid;

    QString m_le_displaced_threshold_ft;
    bool m_le_displaced_threshold_ft_isSet;
    bool m_le_displaced_threshold_ft_isValid;

    QString m_le_elevation_ft;
    bool m_le_elevation_ft_isSet;
    bool m_le_elevation_ft_isValid;

    QString m_le_heading_deg;
    bool m_le_heading_deg_isSet;
    bool m_le_heading_deg_isValid;

    QString m_le_latitude;
    bool m_le_latitude_isSet;
    bool m_le_latitude_isValid;

    QString m_le_longitude;
    bool m_le_longitude_isSet;
    bool m_le_longitude_isValid;

    QString m_length_ft;
    bool m_length_ft_isSet;
    bool m_length_ft_isValid;

    bool m_lighted;
    bool m_lighted_isSet;
    bool m_lighted_isValid;

    QString m_surface_type;
    bool m_surface_type_isSet;
    bool m_surface_type_isValid;

    QString m_width_ft;
    bool m_width_ft_isSet;
    bool m_width_ft_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAirportsAPI_Models_Runway)

#endif // OAIAirportsAPI_Models_Runway_H
