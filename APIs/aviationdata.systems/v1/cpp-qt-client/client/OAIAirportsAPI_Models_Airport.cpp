/**
 * AviationData.Systems Airports API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirportsAPI_Models_Airport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirportsAPI_Models_Airport::OAIAirportsAPI_Models_Airport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirportsAPI_Models_Airport::OAIAirportsAPI_Models_Airport() {
    this->initializeModel();
}

OAIAirportsAPI_Models_Airport::~OAIAirportsAPI_Models_Airport() {}

void OAIAirportsAPI_Models_Airport::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_runway_isSet = false;
    m_runway_isValid = false;

    m_airport_name_isSet = false;
    m_airport_name_isValid = false;

    m_airport_type_isSet = false;
    m_airport_type_isValid = false;

    m_elevation_ft_isSet = false;
    m_elevation_ft_isValid = false;

    m_gps_code_isSet = false;
    m_gps_code_isValid = false;

    m_iata_code_isSet = false;
    m_iata_code_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_local_code_isSet = false;
    m_local_code_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_scheduled_service_isSet = false;
    m_scheduled_service_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_wikipedia_isSet = false;
    m_wikipedia_isValid = false;
}

void OAIAirportsAPI_Models_Airport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirportsAPI_Models_Airport::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("Frequency")]);
    m_frequency_isSet = !json[QString("Frequency")].isNull() && m_frequency_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_runway_isValid = ::OpenAPI::fromJsonValue(m_runway, json[QString("Runway")]);
    m_runway_isSet = !json[QString("Runway")].isNull() && m_runway_isValid;

    m_airport_name_isValid = ::OpenAPI::fromJsonValue(m_airport_name, json[QString("airport_name")]);
    m_airport_name_isSet = !json[QString("airport_name")].isNull() && m_airport_name_isValid;

    m_airport_type_isValid = ::OpenAPI::fromJsonValue(m_airport_type, json[QString("airport_type")]);
    m_airport_type_isSet = !json[QString("airport_type")].isNull() && m_airport_type_isValid;

    m_elevation_ft_isValid = ::OpenAPI::fromJsonValue(m_elevation_ft, json[QString("elevation_ft")]);
    m_elevation_ft_isSet = !json[QString("elevation_ft")].isNull() && m_elevation_ft_isValid;

    m_gps_code_isValid = ::OpenAPI::fromJsonValue(m_gps_code, json[QString("gps_code")]);
    m_gps_code_isSet = !json[QString("gps_code")].isNull() && m_gps_code_isValid;

    m_iata_code_isValid = ::OpenAPI::fromJsonValue(m_iata_code, json[QString("iata_code")]);
    m_iata_code_isSet = !json[QString("iata_code")].isNull() && m_iata_code_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_local_code_isValid = ::OpenAPI::fromJsonValue(m_local_code, json[QString("local_code")]);
    m_local_code_isSet = !json[QString("local_code")].isNull() && m_local_code_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_scheduled_service_isValid = ::OpenAPI::fromJsonValue(m_scheduled_service, json[QString("scheduled_service")]);
    m_scheduled_service_isSet = !json[QString("scheduled_service")].isNull() && m_scheduled_service_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_wikipedia_isValid = ::OpenAPI::fromJsonValue(m_wikipedia, json[QString("wikipedia")]);
    m_wikipedia_isSet = !json[QString("wikipedia")].isNull() && m_wikipedia_isValid;
}

QString OAIAirportsAPI_Models_Airport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirportsAPI_Models_Airport::asJsonObject() const {
    QJsonObject obj;
    if (m_country.isSet()) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_frequency.size() > 0) {
        obj.insert(QString("Frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_region.isSet()) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_runway.size() > 0) {
        obj.insert(QString("Runway"), ::OpenAPI::toJsonValue(m_runway));
    }
    if (m_airport_name_isSet) {
        obj.insert(QString("airport_name"), ::OpenAPI::toJsonValue(m_airport_name));
    }
    if (m_airport_type_isSet) {
        obj.insert(QString("airport_type"), ::OpenAPI::toJsonValue(m_airport_type));
    }
    if (m_elevation_ft_isSet) {
        obj.insert(QString("elevation_ft"), ::OpenAPI::toJsonValue(m_elevation_ft));
    }
    if (m_gps_code_isSet) {
        obj.insert(QString("gps_code"), ::OpenAPI::toJsonValue(m_gps_code));
    }
    if (m_iata_code_isSet) {
        obj.insert(QString("iata_code"), ::OpenAPI::toJsonValue(m_iata_code));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_local_code_isSet) {
        obj.insert(QString("local_code"), ::OpenAPI::toJsonValue(m_local_code));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_scheduled_service_isSet) {
        obj.insert(QString("scheduled_service"), ::OpenAPI::toJsonValue(m_scheduled_service));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_wikipedia_isSet) {
        obj.insert(QString("wikipedia"), ::OpenAPI::toJsonValue(m_wikipedia));
    }
    return obj;
}

OAIAirportsAPI_Models_Location_Country OAIAirportsAPI_Models_Airport::getCountry() const {
    return m_country;
}
void OAIAirportsAPI_Models_Airport::setCountry(const OAIAirportsAPI_Models_Location_Country &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_country_Valid() const{
    return m_country_isValid;
}

QList<OAIAirportsAPI_Models_Frequency> OAIAirportsAPI_Models_Airport::getFrequency() const {
    return m_frequency;
}
void OAIAirportsAPI_Models_Airport::setFrequency(const QList<OAIAirportsAPI_Models_Frequency> &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_frequency_Valid() const{
    return m_frequency_isValid;
}

OAIAirportsAPI_Models_Location_Region OAIAirportsAPI_Models_Airport::getRegion() const {
    return m_region;
}
void OAIAirportsAPI_Models_Airport::setRegion(const OAIAirportsAPI_Models_Location_Region &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_region_Valid() const{
    return m_region_isValid;
}

QList<OAIAirportsAPI_Models_Runway> OAIAirportsAPI_Models_Airport::getRunway() const {
    return m_runway;
}
void OAIAirportsAPI_Models_Airport::setRunway(const QList<OAIAirportsAPI_Models_Runway> &runway) {
    m_runway = runway;
    m_runway_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_runway_Set() const{
    return m_runway_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_runway_Valid() const{
    return m_runway_isValid;
}

QString OAIAirportsAPI_Models_Airport::getAirportName() const {
    return m_airport_name;
}
void OAIAirportsAPI_Models_Airport::setAirportName(const QString &airport_name) {
    m_airport_name = airport_name;
    m_airport_name_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_airport_name_Set() const{
    return m_airport_name_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_airport_name_Valid() const{
    return m_airport_name_isValid;
}

QString OAIAirportsAPI_Models_Airport::getAirportType() const {
    return m_airport_type;
}
void OAIAirportsAPI_Models_Airport::setAirportType(const QString &airport_type) {
    m_airport_type = airport_type;
    m_airport_type_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_airport_type_Set() const{
    return m_airport_type_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_airport_type_Valid() const{
    return m_airport_type_isValid;
}

QString OAIAirportsAPI_Models_Airport::getElevationFt() const {
    return m_elevation_ft;
}
void OAIAirportsAPI_Models_Airport::setElevationFt(const QString &elevation_ft) {
    m_elevation_ft = elevation_ft;
    m_elevation_ft_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_elevation_ft_Set() const{
    return m_elevation_ft_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_elevation_ft_Valid() const{
    return m_elevation_ft_isValid;
}

QString OAIAirportsAPI_Models_Airport::getGpsCode() const {
    return m_gps_code;
}
void OAIAirportsAPI_Models_Airport::setGpsCode(const QString &gps_code) {
    m_gps_code = gps_code;
    m_gps_code_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_gps_code_Set() const{
    return m_gps_code_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_gps_code_Valid() const{
    return m_gps_code_isValid;
}

QString OAIAirportsAPI_Models_Airport::getIataCode() const {
    return m_iata_code;
}
void OAIAirportsAPI_Models_Airport::setIataCode(const QString &iata_code) {
    m_iata_code = iata_code;
    m_iata_code_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_iata_code_Set() const{
    return m_iata_code_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_iata_code_Valid() const{
    return m_iata_code_isValid;
}

QString OAIAirportsAPI_Models_Airport::getLatitude() const {
    return m_latitude;
}
void OAIAirportsAPI_Models_Airport::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIAirportsAPI_Models_Airport::getLocalCode() const {
    return m_local_code;
}
void OAIAirportsAPI_Models_Airport::setLocalCode(const QString &local_code) {
    m_local_code = local_code;
    m_local_code_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_local_code_Set() const{
    return m_local_code_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_local_code_Valid() const{
    return m_local_code_isValid;
}

QString OAIAirportsAPI_Models_Airport::getLocation() const {
    return m_location;
}
void OAIAirportsAPI_Models_Airport::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIAirportsAPI_Models_Airport::getLogoUrl() const {
    return m_logo_url;
}
void OAIAirportsAPI_Models_Airport::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIAirportsAPI_Models_Airport::getLongitude() const {
    return m_longitude;
}
void OAIAirportsAPI_Models_Airport::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAIAirportsAPI_Models_Airport::isScheduledService() const {
    return m_scheduled_service;
}
void OAIAirportsAPI_Models_Airport::setScheduledService(const bool &scheduled_service) {
    m_scheduled_service = scheduled_service;
    m_scheduled_service_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_scheduled_service_Set() const{
    return m_scheduled_service_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_scheduled_service_Valid() const{
    return m_scheduled_service_isValid;
}

QString OAIAirportsAPI_Models_Airport::getWebsite() const {
    return m_website;
}
void OAIAirportsAPI_Models_Airport::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_website_Set() const{
    return m_website_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_website_Valid() const{
    return m_website_isValid;
}

QString OAIAirportsAPI_Models_Airport::getWikipedia() const {
    return m_wikipedia;
}
void OAIAirportsAPI_Models_Airport::setWikipedia(const QString &wikipedia) {
    m_wikipedia = wikipedia;
    m_wikipedia_isSet = true;
}

bool OAIAirportsAPI_Models_Airport::is_wikipedia_Set() const{
    return m_wikipedia_isSet;
}

bool OAIAirportsAPI_Models_Airport::is_wikipedia_Valid() const{
    return m_wikipedia_isValid;
}

bool OAIAirportsAPI_Models_Airport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runway.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_airport_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airport_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_ft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikipedia_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirportsAPI_Models_Airport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
