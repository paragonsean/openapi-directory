/**
 * AviationData.Systems Airports API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAirportsAPI_Models_Airport.h
 *
 * 
 */

#ifndef OAIAirportsAPI_Models_Airport_H
#define OAIAirportsAPI_Models_Airport_H

#include <QJsonObject>

#include "OAIAirportsAPI_Models_Frequency.h"
#include "OAIAirportsAPI_Models_Location_Country.h"
#include "OAIAirportsAPI_Models_Location_Region.h"
#include "OAIAirportsAPI_Models_Runway.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAirportsAPI_Models_Location_Country;
class OAIAirportsAPI_Models_Frequency;
class OAIAirportsAPI_Models_Location_Region;
class OAIAirportsAPI_Models_Runway;

class OAIAirportsAPI_Models_Airport : public OAIObject {
public:
    OAIAirportsAPI_Models_Airport();
    OAIAirportsAPI_Models_Airport(QString json);
    ~OAIAirportsAPI_Models_Airport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAirportsAPI_Models_Location_Country getCountry() const;
    void setCountry(const OAIAirportsAPI_Models_Location_Country &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QList<OAIAirportsAPI_Models_Frequency> getFrequency() const;
    void setFrequency(const QList<OAIAirportsAPI_Models_Frequency> &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    OAIAirportsAPI_Models_Location_Region getRegion() const;
    void setRegion(const OAIAirportsAPI_Models_Location_Region &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QList<OAIAirportsAPI_Models_Runway> getRunway() const;
    void setRunway(const QList<OAIAirportsAPI_Models_Runway> &runway);
    bool is_runway_Set() const;
    bool is_runway_Valid() const;

    QString getAirportName() const;
    void setAirportName(const QString &airport_name);
    bool is_airport_name_Set() const;
    bool is_airport_name_Valid() const;

    QString getAirportType() const;
    void setAirportType(const QString &airport_type);
    bool is_airport_type_Set() const;
    bool is_airport_type_Valid() const;

    QString getElevationFt() const;
    void setElevationFt(const QString &elevation_ft);
    bool is_elevation_ft_Set() const;
    bool is_elevation_ft_Valid() const;

    QString getGpsCode() const;
    void setGpsCode(const QString &gps_code);
    bool is_gps_code_Set() const;
    bool is_gps_code_Valid() const;

    QString getIataCode() const;
    void setIataCode(const QString &iata_code);
    bool is_iata_code_Set() const;
    bool is_iata_code_Valid() const;

    QString getLatitude() const;
    void setLatitude(const QString &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    QString getLocalCode() const;
    void setLocalCode(const QString &local_code);
    bool is_local_code_Set() const;
    bool is_local_code_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getLogoUrl() const;
    void setLogoUrl(const QString &logo_url);
    bool is_logo_url_Set() const;
    bool is_logo_url_Valid() const;

    QString getLongitude() const;
    void setLongitude(const QString &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    bool isScheduledService() const;
    void setScheduledService(const bool &scheduled_service);
    bool is_scheduled_service_Set() const;
    bool is_scheduled_service_Valid() const;

    QString getWebsite() const;
    void setWebsite(const QString &website);
    bool is_website_Set() const;
    bool is_website_Valid() const;

    QString getWikipedia() const;
    void setWikipedia(const QString &wikipedia);
    bool is_wikipedia_Set() const;
    bool is_wikipedia_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAirportsAPI_Models_Location_Country m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QList<OAIAirportsAPI_Models_Frequency> m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    OAIAirportsAPI_Models_Location_Region m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QList<OAIAirportsAPI_Models_Runway> m_runway;
    bool m_runway_isSet;
    bool m_runway_isValid;

    QString m_airport_name;
    bool m_airport_name_isSet;
    bool m_airport_name_isValid;

    QString m_airport_type;
    bool m_airport_type_isSet;
    bool m_airport_type_isValid;

    QString m_elevation_ft;
    bool m_elevation_ft_isSet;
    bool m_elevation_ft_isValid;

    QString m_gps_code;
    bool m_gps_code_isSet;
    bool m_gps_code_isValid;

    QString m_iata_code;
    bool m_iata_code_isSet;
    bool m_iata_code_isValid;

    QString m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    QString m_local_code;
    bool m_local_code_isSet;
    bool m_local_code_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_logo_url;
    bool m_logo_url_isSet;
    bool m_logo_url_isValid;

    QString m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;

    bool m_scheduled_service;
    bool m_scheduled_service_isSet;
    bool m_scheduled_service_isValid;

    QString m_website;
    bool m_website_isSet;
    bool m_website_isValid;

    QString m_wikipedia;
    bool m_wikipedia_isSet;
    bool m_wikipedia_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAirportsAPI_Models_Airport)

#endif // OAIAirportsAPI_Models_Airport_H
