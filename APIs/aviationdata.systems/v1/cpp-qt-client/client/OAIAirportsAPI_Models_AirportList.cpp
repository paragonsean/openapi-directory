/**
 * AviationData.Systems Airports API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirportsAPI_Models_AirportList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirportsAPI_Models_AirportList::OAIAirportsAPI_Models_AirportList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirportsAPI_Models_AirportList::OAIAirportsAPI_Models_AirportList() {
    this->initializeModel();
}

OAIAirportsAPI_Models_AirportList::~OAIAirportsAPI_Models_AirportList() {}

void OAIAirportsAPI_Models_AirportList::initializeModel() {

    m_airport_name_isSet = false;
    m_airport_name_isValid = false;

    m_airport_type_isSet = false;
    m_airport_type_isValid = false;

    m_iata_code_isSet = false;
    m_iata_code_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;
}

void OAIAirportsAPI_Models_AirportList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirportsAPI_Models_AirportList::fromJsonObject(QJsonObject json) {

    m_airport_name_isValid = ::OpenAPI::fromJsonValue(m_airport_name, json[QString("airport_name")]);
    m_airport_name_isSet = !json[QString("airport_name")].isNull() && m_airport_name_isValid;

    m_airport_type_isValid = ::OpenAPI::fromJsonValue(m_airport_type, json[QString("airport_type")]);
    m_airport_type_isSet = !json[QString("airport_type")].isNull() && m_airport_type_isValid;

    m_iata_code_isValid = ::OpenAPI::fromJsonValue(m_iata_code, json[QString("iata_code")]);
    m_iata_code_isSet = !json[QString("iata_code")].isNull() && m_iata_code_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;
}

QString OAIAirportsAPI_Models_AirportList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirportsAPI_Models_AirportList::asJsonObject() const {
    QJsonObject obj;
    if (m_airport_name_isSet) {
        obj.insert(QString("airport_name"), ::OpenAPI::toJsonValue(m_airport_name));
    }
    if (m_airport_type_isSet) {
        obj.insert(QString("airport_type"), ::OpenAPI::toJsonValue(m_airport_type));
    }
    if (m_iata_code_isSet) {
        obj.insert(QString("iata_code"), ::OpenAPI::toJsonValue(m_iata_code));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    return obj;
}

QString OAIAirportsAPI_Models_AirportList::getAirportName() const {
    return m_airport_name;
}
void OAIAirportsAPI_Models_AirportList::setAirportName(const QString &airport_name) {
    m_airport_name = airport_name;
    m_airport_name_isSet = true;
}

bool OAIAirportsAPI_Models_AirportList::is_airport_name_Set() const{
    return m_airport_name_isSet;
}

bool OAIAirportsAPI_Models_AirportList::is_airport_name_Valid() const{
    return m_airport_name_isValid;
}

QString OAIAirportsAPI_Models_AirportList::getAirportType() const {
    return m_airport_type;
}
void OAIAirportsAPI_Models_AirportList::setAirportType(const QString &airport_type) {
    m_airport_type = airport_type;
    m_airport_type_isSet = true;
}

bool OAIAirportsAPI_Models_AirportList::is_airport_type_Set() const{
    return m_airport_type_isSet;
}

bool OAIAirportsAPI_Models_AirportList::is_airport_type_Valid() const{
    return m_airport_type_isValid;
}

QString OAIAirportsAPI_Models_AirportList::getIataCode() const {
    return m_iata_code;
}
void OAIAirportsAPI_Models_AirportList::setIataCode(const QString &iata_code) {
    m_iata_code = iata_code;
    m_iata_code_isSet = true;
}

bool OAIAirportsAPI_Models_AirportList::is_iata_code_Set() const{
    return m_iata_code_isSet;
}

bool OAIAirportsAPI_Models_AirportList::is_iata_code_Valid() const{
    return m_iata_code_isValid;
}

QString OAIAirportsAPI_Models_AirportList::getLatitude() const {
    return m_latitude;
}
void OAIAirportsAPI_Models_AirportList::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIAirportsAPI_Models_AirportList::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIAirportsAPI_Models_AirportList::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIAirportsAPI_Models_AirportList::getLocation() const {
    return m_location;
}
void OAIAirportsAPI_Models_AirportList::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAirportsAPI_Models_AirportList::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAirportsAPI_Models_AirportList::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIAirportsAPI_Models_AirportList::getLongitude() const {
    return m_longitude;
}
void OAIAirportsAPI_Models_AirportList::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIAirportsAPI_Models_AirportList::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIAirportsAPI_Models_AirportList::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAIAirportsAPI_Models_AirportList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airport_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airport_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirportsAPI_Models_AirportList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
