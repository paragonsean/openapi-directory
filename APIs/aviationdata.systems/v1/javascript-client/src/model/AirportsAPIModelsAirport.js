/**
 * AviationData.Systems Airports API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AirportsAPIModelsFrequency from './AirportsAPIModelsFrequency';
import AirportsAPIModelsLocationCountry from './AirportsAPIModelsLocationCountry';
import AirportsAPIModelsLocationRegion from './AirportsAPIModelsLocationRegion';
import AirportsAPIModelsRunway from './AirportsAPIModelsRunway';

/**
 * The AirportsAPIModelsAirport model module.
 * @module model/AirportsAPIModelsAirport
 * @version v1
 */
class AirportsAPIModelsAirport {
    /**
     * Constructs a new <code>AirportsAPIModelsAirport</code>.
     * @alias module:model/AirportsAPIModelsAirport
     */
    constructor() { 
        
        AirportsAPIModelsAirport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AirportsAPIModelsAirport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirportsAPIModelsAirport} obj Optional instance to populate.
     * @return {module:model/AirportsAPIModelsAirport} The populated <code>AirportsAPIModelsAirport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirportsAPIModelsAirport();

            if (data.hasOwnProperty('Country')) {
                obj['Country'] = AirportsAPIModelsLocationCountry.constructFromObject(data['Country']);
            }
            if (data.hasOwnProperty('Frequency')) {
                obj['Frequency'] = ApiClient.convertToType(data['Frequency'], [AirportsAPIModelsFrequency]);
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = AirportsAPIModelsLocationRegion.constructFromObject(data['Region']);
            }
            if (data.hasOwnProperty('Runway')) {
                obj['Runway'] = ApiClient.convertToType(data['Runway'], [AirportsAPIModelsRunway]);
            }
            if (data.hasOwnProperty('airport_name')) {
                obj['airport_name'] = ApiClient.convertToType(data['airport_name'], 'String');
            }
            if (data.hasOwnProperty('airport_type')) {
                obj['airport_type'] = ApiClient.convertToType(data['airport_type'], 'String');
            }
            if (data.hasOwnProperty('elevation_ft')) {
                obj['elevation_ft'] = ApiClient.convertToType(data['elevation_ft'], 'String');
            }
            if (data.hasOwnProperty('gps_code')) {
                obj['gps_code'] = ApiClient.convertToType(data['gps_code'], 'String');
            }
            if (data.hasOwnProperty('iata_code')) {
                obj['iata_code'] = ApiClient.convertToType(data['iata_code'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('local_code')) {
                obj['local_code'] = ApiClient.convertToType(data['local_code'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
            if (data.hasOwnProperty('scheduled_service')) {
                obj['scheduled_service'] = ApiClient.convertToType(data['scheduled_service'], 'Boolean');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('wikipedia')) {
                obj['wikipedia'] = ApiClient.convertToType(data['wikipedia'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirportsAPIModelsAirport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirportsAPIModelsAirport</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Country`
        if (data['Country']) { // data not null
          AirportsAPIModelsLocationCountry.validateJSON(data['Country']);
        }
        if (data['Frequency']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Frequency'])) {
                throw new Error("Expected the field `Frequency` to be an array in the JSON data but got " + data['Frequency']);
            }
            // validate the optional field `Frequency` (array)
            for (const item of data['Frequency']) {
                AirportsAPIModelsFrequency.validateJSON(item);
            };
        }
        // validate the optional field `Region`
        if (data['Region']) { // data not null
          AirportsAPIModelsLocationRegion.validateJSON(data['Region']);
        }
        if (data['Runway']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Runway'])) {
                throw new Error("Expected the field `Runway` to be an array in the JSON data but got " + data['Runway']);
            }
            // validate the optional field `Runway` (array)
            for (const item of data['Runway']) {
                AirportsAPIModelsRunway.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['airport_name'] && !(typeof data['airport_name'] === 'string' || data['airport_name'] instanceof String)) {
            throw new Error("Expected the field `airport_name` to be a primitive type in the JSON string but got " + data['airport_name']);
        }
        // ensure the json data is a string
        if (data['airport_type'] && !(typeof data['airport_type'] === 'string' || data['airport_type'] instanceof String)) {
            throw new Error("Expected the field `airport_type` to be a primitive type in the JSON string but got " + data['airport_type']);
        }
        // ensure the json data is a string
        if (data['elevation_ft'] && !(typeof data['elevation_ft'] === 'string' || data['elevation_ft'] instanceof String)) {
            throw new Error("Expected the field `elevation_ft` to be a primitive type in the JSON string but got " + data['elevation_ft']);
        }
        // ensure the json data is a string
        if (data['gps_code'] && !(typeof data['gps_code'] === 'string' || data['gps_code'] instanceof String)) {
            throw new Error("Expected the field `gps_code` to be a primitive type in the JSON string but got " + data['gps_code']);
        }
        // ensure the json data is a string
        if (data['iata_code'] && !(typeof data['iata_code'] === 'string' || data['iata_code'] instanceof String)) {
            throw new Error("Expected the field `iata_code` to be a primitive type in the JSON string but got " + data['iata_code']);
        }
        // ensure the json data is a string
        if (data['latitude'] && !(typeof data['latitude'] === 'string' || data['latitude'] instanceof String)) {
            throw new Error("Expected the field `latitude` to be a primitive type in the JSON string but got " + data['latitude']);
        }
        // ensure the json data is a string
        if (data['local_code'] && !(typeof data['local_code'] === 'string' || data['local_code'] instanceof String)) {
            throw new Error("Expected the field `local_code` to be a primitive type in the JSON string but got " + data['local_code']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['logo_url'] && !(typeof data['logo_url'] === 'string' || data['logo_url'] instanceof String)) {
            throw new Error("Expected the field `logo_url` to be a primitive type in the JSON string but got " + data['logo_url']);
        }
        // ensure the json data is a string
        if (data['longitude'] && !(typeof data['longitude'] === 'string' || data['longitude'] instanceof String)) {
            throw new Error("Expected the field `longitude` to be a primitive type in the JSON string but got " + data['longitude']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['wikipedia'] && !(typeof data['wikipedia'] === 'string' || data['wikipedia'] instanceof String)) {
            throw new Error("Expected the field `wikipedia` to be a primitive type in the JSON string but got " + data['wikipedia']);
        }

        return true;
    }


}



/**
 * @member {module:model/AirportsAPIModelsLocationCountry} Country
 */
AirportsAPIModelsAirport.prototype['Country'] = undefined;

/**
 * @member {Array.<module:model/AirportsAPIModelsFrequency>} Frequency
 */
AirportsAPIModelsAirport.prototype['Frequency'] = undefined;

/**
 * @member {module:model/AirportsAPIModelsLocationRegion} Region
 */
AirportsAPIModelsAirport.prototype['Region'] = undefined;

/**
 * @member {Array.<module:model/AirportsAPIModelsRunway>} Runway
 */
AirportsAPIModelsAirport.prototype['Runway'] = undefined;

/**
 * @member {String} airport_name
 */
AirportsAPIModelsAirport.prototype['airport_name'] = undefined;

/**
 * @member {String} airport_type
 */
AirportsAPIModelsAirport.prototype['airport_type'] = undefined;

/**
 * @member {String} elevation_ft
 */
AirportsAPIModelsAirport.prototype['elevation_ft'] = undefined;

/**
 * @member {String} gps_code
 */
AirportsAPIModelsAirport.prototype['gps_code'] = undefined;

/**
 * @member {String} iata_code
 */
AirportsAPIModelsAirport.prototype['iata_code'] = undefined;

/**
 * @member {String} latitude
 */
AirportsAPIModelsAirport.prototype['latitude'] = undefined;

/**
 * @member {String} local_code
 */
AirportsAPIModelsAirport.prototype['local_code'] = undefined;

/**
 * @member {String} location
 */
AirportsAPIModelsAirport.prototype['location'] = undefined;

/**
 * @member {String} logo_url
 */
AirportsAPIModelsAirport.prototype['logo_url'] = undefined;

/**
 * @member {String} longitude
 */
AirportsAPIModelsAirport.prototype['longitude'] = undefined;

/**
 * @member {Boolean} scheduled_service
 */
AirportsAPIModelsAirport.prototype['scheduled_service'] = undefined;

/**
 * @member {String} website
 */
AirportsAPIModelsAirport.prototype['website'] = undefined;

/**
 * @member {String} wikipedia
 */
AirportsAPIModelsAirport.prototype['wikipedia'] = undefined;






export default AirportsAPIModelsAirport;

