/*
 * AviationData.Systems Airports API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AirportsAPIModelsFrequency;
import org.openapitools.client.model.AirportsAPIModelsLocationCountry;
import org.openapitools.client.model.AirportsAPIModelsLocationRegion;
import org.openapitools.client.model.AirportsAPIModelsRunway;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AirportsAPIModelsAirport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:09.287067-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AirportsAPIModelsAirport {
  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private AirportsAPIModelsLocationCountry country;

  public static final String SERIALIZED_NAME_FREQUENCY = "Frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private List<AirportsAPIModelsFrequency> frequency = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private AirportsAPIModelsLocationRegion region;

  public static final String SERIALIZED_NAME_RUNWAY = "Runway";
  @SerializedName(SERIALIZED_NAME_RUNWAY)
  private List<AirportsAPIModelsRunway> runway = new ArrayList<>();

  public static final String SERIALIZED_NAME_AIRPORT_NAME = "airport_name";
  @SerializedName(SERIALIZED_NAME_AIRPORT_NAME)
  private String airportName;

  public static final String SERIALIZED_NAME_AIRPORT_TYPE = "airport_type";
  @SerializedName(SERIALIZED_NAME_AIRPORT_TYPE)
  private String airportType;

  public static final String SERIALIZED_NAME_ELEVATION_FT = "elevation_ft";
  @SerializedName(SERIALIZED_NAME_ELEVATION_FT)
  private String elevationFt;

  public static final String SERIALIZED_NAME_GPS_CODE = "gps_code";
  @SerializedName(SERIALIZED_NAME_GPS_CODE)
  private String gpsCode;

  public static final String SERIALIZED_NAME_IATA_CODE = "iata_code";
  @SerializedName(SERIALIZED_NAME_IATA_CODE)
  private String iataCode;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private String latitude;

  public static final String SERIALIZED_NAME_LOCAL_CODE = "local_code";
  @SerializedName(SERIALIZED_NAME_LOCAL_CODE)
  private String localCode;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_LOGO_URL = "logo_url";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private String longitude;

  public static final String SERIALIZED_NAME_SCHEDULED_SERVICE = "scheduled_service";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_SERVICE)
  private Boolean scheduledService;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_WIKIPEDIA = "wikipedia";
  @SerializedName(SERIALIZED_NAME_WIKIPEDIA)
  private String wikipedia;

  public AirportsAPIModelsAirport() {
  }

  public AirportsAPIModelsAirport country(AirportsAPIModelsLocationCountry country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public AirportsAPIModelsLocationCountry getCountry() {
    return country;
  }

  public void setCountry(AirportsAPIModelsLocationCountry country) {
    this.country = country;
  }


  public AirportsAPIModelsAirport frequency(List<AirportsAPIModelsFrequency> frequency) {
    this.frequency = frequency;
    return this;
  }

  public AirportsAPIModelsAirport addFrequencyItem(AirportsAPIModelsFrequency frequencyItem) {
    if (this.frequency == null) {
      this.frequency = new ArrayList<>();
    }
    this.frequency.add(frequencyItem);
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public List<AirportsAPIModelsFrequency> getFrequency() {
    return frequency;
  }

  public void setFrequency(List<AirportsAPIModelsFrequency> frequency) {
    this.frequency = frequency;
  }


  public AirportsAPIModelsAirport region(AirportsAPIModelsLocationRegion region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public AirportsAPIModelsLocationRegion getRegion() {
    return region;
  }

  public void setRegion(AirportsAPIModelsLocationRegion region) {
    this.region = region;
  }


  public AirportsAPIModelsAirport runway(List<AirportsAPIModelsRunway> runway) {
    this.runway = runway;
    return this;
  }

  public AirportsAPIModelsAirport addRunwayItem(AirportsAPIModelsRunway runwayItem) {
    if (this.runway == null) {
      this.runway = new ArrayList<>();
    }
    this.runway.add(runwayItem);
    return this;
  }

  /**
   * Get runway
   * @return runway
   */
  @javax.annotation.Nullable
  public List<AirportsAPIModelsRunway> getRunway() {
    return runway;
  }

  public void setRunway(List<AirportsAPIModelsRunway> runway) {
    this.runway = runway;
  }


  public AirportsAPIModelsAirport airportName(String airportName) {
    this.airportName = airportName;
    return this;
  }

  /**
   * Get airportName
   * @return airportName
   */
  @javax.annotation.Nullable
  public String getAirportName() {
    return airportName;
  }

  public void setAirportName(String airportName) {
    this.airportName = airportName;
  }


  public AirportsAPIModelsAirport airportType(String airportType) {
    this.airportType = airportType;
    return this;
  }

  /**
   * Get airportType
   * @return airportType
   */
  @javax.annotation.Nullable
  public String getAirportType() {
    return airportType;
  }

  public void setAirportType(String airportType) {
    this.airportType = airportType;
  }


  public AirportsAPIModelsAirport elevationFt(String elevationFt) {
    this.elevationFt = elevationFt;
    return this;
  }

  /**
   * Get elevationFt
   * @return elevationFt
   */
  @javax.annotation.Nullable
  public String getElevationFt() {
    return elevationFt;
  }

  public void setElevationFt(String elevationFt) {
    this.elevationFt = elevationFt;
  }


  public AirportsAPIModelsAirport gpsCode(String gpsCode) {
    this.gpsCode = gpsCode;
    return this;
  }

  /**
   * Get gpsCode
   * @return gpsCode
   */
  @javax.annotation.Nullable
  public String getGpsCode() {
    return gpsCode;
  }

  public void setGpsCode(String gpsCode) {
    this.gpsCode = gpsCode;
  }


  public AirportsAPIModelsAirport iataCode(String iataCode) {
    this.iataCode = iataCode;
    return this;
  }

  /**
   * Get iataCode
   * @return iataCode
   */
  @javax.annotation.Nullable
  public String getIataCode() {
    return iataCode;
  }

  public void setIataCode(String iataCode) {
    this.iataCode = iataCode;
  }


  public AirportsAPIModelsAirport latitude(String latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public String getLatitude() {
    return latitude;
  }

  public void setLatitude(String latitude) {
    this.latitude = latitude;
  }


  public AirportsAPIModelsAirport localCode(String localCode) {
    this.localCode = localCode;
    return this;
  }

  /**
   * Get localCode
   * @return localCode
   */
  @javax.annotation.Nullable
  public String getLocalCode() {
    return localCode;
  }

  public void setLocalCode(String localCode) {
    this.localCode = localCode;
  }


  public AirportsAPIModelsAirport location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public AirportsAPIModelsAirport logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * Get logoUrl
   * @return logoUrl
   */
  @javax.annotation.Nullable
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }


  public AirportsAPIModelsAirport longitude(String longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public String getLongitude() {
    return longitude;
  }

  public void setLongitude(String longitude) {
    this.longitude = longitude;
  }


  public AirportsAPIModelsAirport scheduledService(Boolean scheduledService) {
    this.scheduledService = scheduledService;
    return this;
  }

  /**
   * Get scheduledService
   * @return scheduledService
   */
  @javax.annotation.Nullable
  public Boolean getScheduledService() {
    return scheduledService;
  }

  public void setScheduledService(Boolean scheduledService) {
    this.scheduledService = scheduledService;
  }


  public AirportsAPIModelsAirport website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public AirportsAPIModelsAirport wikipedia(String wikipedia) {
    this.wikipedia = wikipedia;
    return this;
  }

  /**
   * Get wikipedia
   * @return wikipedia
   */
  @javax.annotation.Nullable
  public String getWikipedia() {
    return wikipedia;
  }

  public void setWikipedia(String wikipedia) {
    this.wikipedia = wikipedia;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirportsAPIModelsAirport airportsAPIModelsAirport = (AirportsAPIModelsAirport) o;
    return Objects.equals(this.country, airportsAPIModelsAirport.country) &&
        Objects.equals(this.frequency, airportsAPIModelsAirport.frequency) &&
        Objects.equals(this.region, airportsAPIModelsAirport.region) &&
        Objects.equals(this.runway, airportsAPIModelsAirport.runway) &&
        Objects.equals(this.airportName, airportsAPIModelsAirport.airportName) &&
        Objects.equals(this.airportType, airportsAPIModelsAirport.airportType) &&
        Objects.equals(this.elevationFt, airportsAPIModelsAirport.elevationFt) &&
        Objects.equals(this.gpsCode, airportsAPIModelsAirport.gpsCode) &&
        Objects.equals(this.iataCode, airportsAPIModelsAirport.iataCode) &&
        Objects.equals(this.latitude, airportsAPIModelsAirport.latitude) &&
        Objects.equals(this.localCode, airportsAPIModelsAirport.localCode) &&
        Objects.equals(this.location, airportsAPIModelsAirport.location) &&
        Objects.equals(this.logoUrl, airportsAPIModelsAirport.logoUrl) &&
        Objects.equals(this.longitude, airportsAPIModelsAirport.longitude) &&
        Objects.equals(this.scheduledService, airportsAPIModelsAirport.scheduledService) &&
        Objects.equals(this.website, airportsAPIModelsAirport.website) &&
        Objects.equals(this.wikipedia, airportsAPIModelsAirport.wikipedia);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, frequency, region, runway, airportName, airportType, elevationFt, gpsCode, iataCode, latitude, localCode, location, logoUrl, longitude, scheduledService, website, wikipedia);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirportsAPIModelsAirport {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    runway: ").append(toIndentedString(runway)).append("\n");
    sb.append("    airportName: ").append(toIndentedString(airportName)).append("\n");
    sb.append("    airportType: ").append(toIndentedString(airportType)).append("\n");
    sb.append("    elevationFt: ").append(toIndentedString(elevationFt)).append("\n");
    sb.append("    gpsCode: ").append(toIndentedString(gpsCode)).append("\n");
    sb.append("    iataCode: ").append(toIndentedString(iataCode)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    localCode: ").append(toIndentedString(localCode)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    scheduledService: ").append(toIndentedString(scheduledService)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    wikipedia: ").append(toIndentedString(wikipedia)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Country");
    openapiFields.add("Frequency");
    openapiFields.add("Region");
    openapiFields.add("Runway");
    openapiFields.add("airport_name");
    openapiFields.add("airport_type");
    openapiFields.add("elevation_ft");
    openapiFields.add("gps_code");
    openapiFields.add("iata_code");
    openapiFields.add("latitude");
    openapiFields.add("local_code");
    openapiFields.add("location");
    openapiFields.add("logo_url");
    openapiFields.add("longitude");
    openapiFields.add("scheduled_service");
    openapiFields.add("website");
    openapiFields.add("wikipedia");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AirportsAPIModelsAirport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AirportsAPIModelsAirport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AirportsAPIModelsAirport is not found in the empty JSON string", AirportsAPIModelsAirport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AirportsAPIModelsAirport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AirportsAPIModelsAirport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Country`
      if (jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) {
        AirportsAPIModelsLocationCountry.validateJsonElement(jsonObj.get("Country"));
      }
      if (jsonObj.get("Frequency") != null && !jsonObj.get("Frequency").isJsonNull()) {
        JsonArray jsonArrayfrequency = jsonObj.getAsJsonArray("Frequency");
        if (jsonArrayfrequency != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Frequency").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Frequency` to be an array in the JSON string but got `%s`", jsonObj.get("Frequency").toString()));
          }

          // validate the optional field `Frequency` (array)
          for (int i = 0; i < jsonArrayfrequency.size(); i++) {
            AirportsAPIModelsFrequency.validateJsonElement(jsonArrayfrequency.get(i));
          };
        }
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        AirportsAPIModelsLocationRegion.validateJsonElement(jsonObj.get("Region"));
      }
      if (jsonObj.get("Runway") != null && !jsonObj.get("Runway").isJsonNull()) {
        JsonArray jsonArrayrunway = jsonObj.getAsJsonArray("Runway");
        if (jsonArrayrunway != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Runway").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Runway` to be an array in the JSON string but got `%s`", jsonObj.get("Runway").toString()));
          }

          // validate the optional field `Runway` (array)
          for (int i = 0; i < jsonArrayrunway.size(); i++) {
            AirportsAPIModelsRunway.validateJsonElement(jsonArrayrunway.get(i));
          };
        }
      }
      if ((jsonObj.get("airport_name") != null && !jsonObj.get("airport_name").isJsonNull()) && !jsonObj.get("airport_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `airport_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("airport_name").toString()));
      }
      if ((jsonObj.get("airport_type") != null && !jsonObj.get("airport_type").isJsonNull()) && !jsonObj.get("airport_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `airport_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("airport_type").toString()));
      }
      if ((jsonObj.get("elevation_ft") != null && !jsonObj.get("elevation_ft").isJsonNull()) && !jsonObj.get("elevation_ft").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elevation_ft` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elevation_ft").toString()));
      }
      if ((jsonObj.get("gps_code") != null && !jsonObj.get("gps_code").isJsonNull()) && !jsonObj.get("gps_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gps_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gps_code").toString()));
      }
      if ((jsonObj.get("iata_code") != null && !jsonObj.get("iata_code").isJsonNull()) && !jsonObj.get("iata_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iata_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iata_code").toString()));
      }
      if ((jsonObj.get("latitude") != null && !jsonObj.get("latitude").isJsonNull()) && !jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if ((jsonObj.get("local_code") != null && !jsonObj.get("local_code").isJsonNull()) && !jsonObj.get("local_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `local_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local_code").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("logo_url") != null && !jsonObj.get("logo_url").isJsonNull()) && !jsonObj.get("logo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_url").toString()));
      }
      if ((jsonObj.get("longitude") != null && !jsonObj.get("longitude").isJsonNull()) && !jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      if ((jsonObj.get("wikipedia") != null && !jsonObj.get("wikipedia").isJsonNull()) && !jsonObj.get("wikipedia").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wikipedia` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wikipedia").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AirportsAPIModelsAirport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AirportsAPIModelsAirport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AirportsAPIModelsAirport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AirportsAPIModelsAirport.class));

       return (TypeAdapter<T>) new TypeAdapter<AirportsAPIModelsAirport>() {
           @Override
           public void write(JsonWriter out, AirportsAPIModelsAirport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AirportsAPIModelsAirport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AirportsAPIModelsAirport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AirportsAPIModelsAirport
   * @throws IOException if the JSON string is invalid with respect to AirportsAPIModelsAirport
   */
  public static AirportsAPIModelsAirport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AirportsAPIModelsAirport.class);
  }

  /**
   * Convert an instance of AirportsAPIModelsAirport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

