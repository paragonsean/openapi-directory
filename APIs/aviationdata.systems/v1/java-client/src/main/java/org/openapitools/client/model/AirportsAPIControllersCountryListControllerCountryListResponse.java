/*
 * AviationData.Systems Airports API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AirportsAPIModelsCountry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AirportsAPIControllersCountryListControllerCountryListResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:09.287067-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AirportsAPIControllersCountryListControllerCountryListResponse {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private List<AirportsAPIModelsCountry> country = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISCLAIMER = "disclaimer";
  @SerializedName(SERIALIZED_NAME_DISCLAIMER)
  private String disclaimer;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private String statusCode;

  public AirportsAPIControllersCountryListControllerCountryListResponse() {
  }

  public AirportsAPIControllersCountryListControllerCountryListResponse country(List<AirportsAPIModelsCountry> country) {
    this.country = country;
    return this;
  }

  public AirportsAPIControllersCountryListControllerCountryListResponse addCountryItem(AirportsAPIModelsCountry countryItem) {
    if (this.country == null) {
      this.country = new ArrayList<>();
    }
    this.country.add(countryItem);
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public List<AirportsAPIModelsCountry> getCountry() {
    return country;
  }

  public void setCountry(List<AirportsAPIModelsCountry> country) {
    this.country = country;
  }


  public AirportsAPIControllersCountryListControllerCountryListResponse disclaimer(String disclaimer) {
    this.disclaimer = disclaimer;
    return this;
  }

  /**
   * Get disclaimer
   * @return disclaimer
   */
  @javax.annotation.Nullable
  public String getDisclaimer() {
    return disclaimer;
  }

  public void setDisclaimer(String disclaimer) {
    this.disclaimer = disclaimer;
  }


  public AirportsAPIControllersCountryListControllerCountryListResponse message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public AirportsAPIControllersCountryListControllerCountryListResponse statusCode(String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(String statusCode) {
    this.statusCode = statusCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirportsAPIControllersCountryListControllerCountryListResponse airportsAPIControllersCountryListControllerCountryListResponse = (AirportsAPIControllersCountryListControllerCountryListResponse) o;
    return Objects.equals(this.country, airportsAPIControllersCountryListControllerCountryListResponse.country) &&
        Objects.equals(this.disclaimer, airportsAPIControllersCountryListControllerCountryListResponse.disclaimer) &&
        Objects.equals(this.message, airportsAPIControllersCountryListControllerCountryListResponse.message) &&
        Objects.equals(this.statusCode, airportsAPIControllersCountryListControllerCountryListResponse.statusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, disclaimer, message, statusCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirportsAPIControllersCountryListControllerCountryListResponse {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    disclaimer: ").append(toIndentedString(disclaimer)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("disclaimer");
    openapiFields.add("message");
    openapiFields.add("status_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AirportsAPIControllersCountryListControllerCountryListResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AirportsAPIControllersCountryListControllerCountryListResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AirportsAPIControllersCountryListControllerCountryListResponse is not found in the empty JSON string", AirportsAPIControllersCountryListControllerCountryListResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AirportsAPIControllersCountryListControllerCountryListResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AirportsAPIControllersCountryListControllerCountryListResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        JsonArray jsonArraycountry = jsonObj.getAsJsonArray("country");
        if (jsonArraycountry != null) {
          // ensure the json data is an array
          if (!jsonObj.get("country").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `country` to be an array in the JSON string but got `%s`", jsonObj.get("country").toString()));
          }

          // validate the optional field `country` (array)
          for (int i = 0; i < jsonArraycountry.size(); i++) {
            AirportsAPIModelsCountry.validateJsonElement(jsonArraycountry.get(i));
          };
        }
      }
      if ((jsonObj.get("disclaimer") != null && !jsonObj.get("disclaimer").isJsonNull()) && !jsonObj.get("disclaimer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disclaimer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disclaimer").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("status_code") != null && !jsonObj.get("status_code").isJsonNull()) && !jsonObj.get("status_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AirportsAPIControllersCountryListControllerCountryListResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AirportsAPIControllersCountryListControllerCountryListResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AirportsAPIControllersCountryListControllerCountryListResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AirportsAPIControllersCountryListControllerCountryListResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AirportsAPIControllersCountryListControllerCountryListResponse>() {
           @Override
           public void write(JsonWriter out, AirportsAPIControllersCountryListControllerCountryListResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AirportsAPIControllersCountryListControllerCountryListResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AirportsAPIControllersCountryListControllerCountryListResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AirportsAPIControllersCountryListControllerCountryListResponse
   * @throws IOException if the JSON string is invalid with respect to AirportsAPIControllersCountryListControllerCountryListResponse
   */
  public static AirportsAPIControllersCountryListControllerCountryListResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AirportsAPIControllersCountryListControllerCountryListResponse.class);
  }

  /**
   * Convert an instance of AirportsAPIControllersCountryListControllerCountryListResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

