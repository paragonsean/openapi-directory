/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINamedObject.h
 *
 * 
 */

#ifndef OAINamedObject_H
#define OAINamedObject_H

#include <QJsonObject>

#include "OAISynonymPropertyValue.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISynonymPropertyValue;

class OAINamedObject : public OAIObject {
public:
    OAINamedObject();
    OAINamedObject(QString json);
    ~OAINamedObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCategory() const;
    void setCategory(const QList<QString> &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIri() const;
    void setIri(const QString &iri);
    bool is_iri_Set() const;
    bool is_iri_Valid() const;

    QString getLabel() const;
    void setLabel(const QString &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    QList<QString> getConsider() const;
    void setConsider(const QList<QString> &consider);
    bool is_consider_Set() const;
    bool is_consider_Valid() const;

    bool isDeprecated() const;
    void setDeprecated(const bool &deprecated);
    bool is_deprecated_Set() const;
    bool is_deprecated_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<QString> getReplacedBy() const;
    void setReplacedBy(const QList<QString> &replaced_by);
    bool is_replaced_by_Set() const;
    bool is_replaced_by_Valid() const;

    QList<OAISynonymPropertyValue> getSynonyms() const;
    void setSynonyms(const QList<OAISynonymPropertyValue> &synonyms);
    bool is_synonyms_Set() const;
    bool is_synonyms_Valid() const;

    QList<QString> getTypes() const;
    void setTypes(const QList<QString> &types);
    bool is_types_Set() const;
    bool is_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_iri;
    bool m_iri_isSet;
    bool m_iri_isValid;

    QString m_label;
    bool m_label_isSet;
    bool m_label_isValid;

    QList<QString> m_consider;
    bool m_consider_isSet;
    bool m_consider_isValid;

    bool m_deprecated;
    bool m_deprecated_isSet;
    bool m_deprecated_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<QString> m_replaced_by;
    bool m_replaced_by_isSet;
    bool m_replaced_by_isValid;

    QList<OAISynonymPropertyValue> m_synonyms;
    bool m_synonyms_isSet;
    bool m_synonyms_isValid;

    QList<QString> m_types;
    bool m_types_isSet;
    bool m_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINamedObject)

#endif // OAINamedObject_H
