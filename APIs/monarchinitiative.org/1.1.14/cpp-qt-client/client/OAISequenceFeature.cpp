/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISequenceFeature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISequenceFeature::OAISequenceFeature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISequenceFeature::OAISequenceFeature() {
    this->initializeModel();
}

OAISequenceFeature::~OAISequenceFeature() {}

void OAISequenceFeature::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_iri_isSet = false;
    m_iri_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_consider_isSet = false;
    m_consider_isValid = false;

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_replaced_by_isSet = false;
    m_replaced_by_isValid = false;

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_association_counts_isSet = false;
    m_association_counts_isValid = false;

    m_taxon_isSet = false;
    m_taxon_isValid = false;

    m_xrefs_isSet = false;
    m_xrefs_isValid = false;

    m_homology_associations_isSet = false;
    m_homology_associations_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_seq_isSet = false;
    m_seq_isValid = false;
}

void OAISequenceFeature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISequenceFeature::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_iri_isValid = ::OpenAPI::fromJsonValue(m_iri, json[QString("iri")]);
    m_iri_isSet = !json[QString("iri")].isNull() && m_iri_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_consider_isValid = ::OpenAPI::fromJsonValue(m_consider, json[QString("consider")]);
    m_consider_isSet = !json[QString("consider")].isNull() && m_consider_isValid;

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_replaced_by_isValid = ::OpenAPI::fromJsonValue(m_replaced_by, json[QString("replaced_by")]);
    m_replaced_by_isSet = !json[QString("replaced_by")].isNull() && m_replaced_by_isValid;

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("synonyms")]);
    m_synonyms_isSet = !json[QString("synonyms")].isNull() && m_synonyms_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_association_counts_isValid = ::OpenAPI::fromJsonValue(m_association_counts, json[QString("association_counts")]);
    m_association_counts_isSet = !json[QString("association_counts")].isNull() && m_association_counts_isValid;

    m_taxon_isValid = ::OpenAPI::fromJsonValue(m_taxon, json[QString("taxon")]);
    m_taxon_isSet = !json[QString("taxon")].isNull() && m_taxon_isValid;

    m_xrefs_isValid = ::OpenAPI::fromJsonValue(m_xrefs, json[QString("xrefs")]);
    m_xrefs_isSet = !json[QString("xrefs")].isNull() && m_xrefs_isValid;

    m_homology_associations_isValid = ::OpenAPI::fromJsonValue(m_homology_associations, json[QString("homology_associations")]);
    m_homology_associations_isSet = !json[QString("homology_associations")].isNull() && m_homology_associations_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_seq_isValid = ::OpenAPI::fromJsonValue(m_seq, json[QString("seq")]);
    m_seq_isSet = !json[QString("seq")].isNull() && m_seq_isValid;
}

QString OAISequenceFeature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISequenceFeature::asJsonObject() const {
    QJsonObject obj;
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_iri_isSet) {
        obj.insert(QString("iri"), ::OpenAPI::toJsonValue(m_iri));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_consider.size() > 0) {
        obj.insert(QString("consider"), ::OpenAPI::toJsonValue(m_consider));
    }
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_replaced_by.size() > 0) {
        obj.insert(QString("replaced_by"), ::OpenAPI::toJsonValue(m_replaced_by));
    }
    if (m_synonyms.size() > 0) {
        obj.insert(QString("synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_association_counts_isSet) {
        obj.insert(QString("association_counts"), ::OpenAPI::toJsonValue(m_association_counts));
    }
    if (m_taxon.isSet()) {
        obj.insert(QString("taxon"), ::OpenAPI::toJsonValue(m_taxon));
    }
    if (m_xrefs.size() > 0) {
        obj.insert(QString("xrefs"), ::OpenAPI::toJsonValue(m_xrefs));
    }
    if (m_homology_associations.size() > 0) {
        obj.insert(QString("homology_associations"), ::OpenAPI::toJsonValue(m_homology_associations));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_seq.isSet()) {
        obj.insert(QString("seq"), ::OpenAPI::toJsonValue(m_seq));
    }
    return obj;
}

QList<QString> OAISequenceFeature::getCategory() const {
    return m_category;
}
void OAISequenceFeature::setCategory(const QList<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISequenceFeature::is_category_Set() const{
    return m_category_isSet;
}

bool OAISequenceFeature::is_category_Valid() const{
    return m_category_isValid;
}

QString OAISequenceFeature::getId() const {
    return m_id;
}
void OAISequenceFeature::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISequenceFeature::is_id_Set() const{
    return m_id_isSet;
}

bool OAISequenceFeature::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISequenceFeature::getIri() const {
    return m_iri;
}
void OAISequenceFeature::setIri(const QString &iri) {
    m_iri = iri;
    m_iri_isSet = true;
}

bool OAISequenceFeature::is_iri_Set() const{
    return m_iri_isSet;
}

bool OAISequenceFeature::is_iri_Valid() const{
    return m_iri_isValid;
}

QString OAISequenceFeature::getLabel() const {
    return m_label;
}
void OAISequenceFeature::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISequenceFeature::is_label_Set() const{
    return m_label_isSet;
}

bool OAISequenceFeature::is_label_Valid() const{
    return m_label_isValid;
}

QList<QString> OAISequenceFeature::getConsider() const {
    return m_consider;
}
void OAISequenceFeature::setConsider(const QList<QString> &consider) {
    m_consider = consider;
    m_consider_isSet = true;
}

bool OAISequenceFeature::is_consider_Set() const{
    return m_consider_isSet;
}

bool OAISequenceFeature::is_consider_Valid() const{
    return m_consider_isValid;
}

bool OAISequenceFeature::isDeprecated() const {
    return m_deprecated;
}
void OAISequenceFeature::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAISequenceFeature::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAISequenceFeature::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAISequenceFeature::getDescription() const {
    return m_description;
}
void OAISequenceFeature::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISequenceFeature::is_description_Set() const{
    return m_description_isSet;
}

bool OAISequenceFeature::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAISequenceFeature::getReplacedBy() const {
    return m_replaced_by;
}
void OAISequenceFeature::setReplacedBy(const QList<QString> &replaced_by) {
    m_replaced_by = replaced_by;
    m_replaced_by_isSet = true;
}

bool OAISequenceFeature::is_replaced_by_Set() const{
    return m_replaced_by_isSet;
}

bool OAISequenceFeature::is_replaced_by_Valid() const{
    return m_replaced_by_isValid;
}

QList<OAISynonymPropertyValue> OAISequenceFeature::getSynonyms() const {
    return m_synonyms;
}
void OAISequenceFeature::setSynonyms(const QList<OAISynonymPropertyValue> &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAISequenceFeature::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAISequenceFeature::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

QList<QString> OAISequenceFeature::getTypes() const {
    return m_types;
}
void OAISequenceFeature::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAISequenceFeature::is_types_Set() const{
    return m_types_isSet;
}

bool OAISequenceFeature::is_types_Valid() const{
    return m_types_isValid;
}

OAIObject OAISequenceFeature::getAssociationCounts() const {
    return m_association_counts;
}
void OAISequenceFeature::setAssociationCounts(const OAIObject &association_counts) {
    m_association_counts = association_counts;
    m_association_counts_isSet = true;
}

bool OAISequenceFeature::is_association_counts_Set() const{
    return m_association_counts_isSet;
}

bool OAISequenceFeature::is_association_counts_Valid() const{
    return m_association_counts_isValid;
}

OAITaxon OAISequenceFeature::getTaxon() const {
    return m_taxon;
}
void OAISequenceFeature::setTaxon(const OAITaxon &taxon) {
    m_taxon = taxon;
    m_taxon_isSet = true;
}

bool OAISequenceFeature::is_taxon_Set() const{
    return m_taxon_isSet;
}

bool OAISequenceFeature::is_taxon_Valid() const{
    return m_taxon_isValid;
}

QList<QString> OAISequenceFeature::getXrefs() const {
    return m_xrefs;
}
void OAISequenceFeature::setXrefs(const QList<QString> &xrefs) {
    m_xrefs = xrefs;
    m_xrefs_isSet = true;
}

bool OAISequenceFeature::is_xrefs_Set() const{
    return m_xrefs_isSet;
}

bool OAISequenceFeature::is_xrefs_Valid() const{
    return m_xrefs_isValid;
}

QList<OAIAssociation> OAISequenceFeature::getHomologyAssociations() const {
    return m_homology_associations;
}
void OAISequenceFeature::setHomologyAssociations(const QList<OAIAssociation> &homology_associations) {
    m_homology_associations = homology_associations;
    m_homology_associations_isSet = true;
}

bool OAISequenceFeature::is_homology_associations_Set() const{
    return m_homology_associations_isSet;
}

bool OAISequenceFeature::is_homology_associations_Valid() const{
    return m_homology_associations_isValid;
}

QList<OAISequenceLocation> OAISequenceFeature::getLocations() const {
    return m_locations;
}
void OAISequenceFeature::setLocations(const QList<OAISequenceLocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAISequenceFeature::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAISequenceFeature::is_locations_Valid() const{
    return m_locations_isValid;
}

OAISeq OAISequenceFeature::getSeq() const {
    return m_seq;
}
void OAISequenceFeature::setSeq(const OAISeq &seq) {
    m_seq = seq;
    m_seq_isSet = true;
}

bool OAISequenceFeature::is_seq_Set() const{
    return m_seq_isSet;
}

bool OAISequenceFeature::is_seq_Valid() const{
    return m_seq_isValid;
}

bool OAISequenceFeature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replaced_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_synonyms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_counts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xrefs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_homology_associations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seq.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISequenceFeature::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
