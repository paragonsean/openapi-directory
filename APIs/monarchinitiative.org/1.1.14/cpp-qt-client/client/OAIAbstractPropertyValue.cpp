/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbstractPropertyValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbstractPropertyValue::OAIAbstractPropertyValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbstractPropertyValue::OAIAbstractPropertyValue() {
    this->initializeModel();
}

OAIAbstractPropertyValue::~OAIAbstractPropertyValue() {}

void OAIAbstractPropertyValue::initializeModel() {

    m_pred_isSet = false;
    m_pred_isValid = false;

    m_val_isSet = false;
    m_val_isValid = false;

    m_xrefs_isSet = false;
    m_xrefs_isValid = false;
}

void OAIAbstractPropertyValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbstractPropertyValue::fromJsonObject(QJsonObject json) {

    m_pred_isValid = ::OpenAPI::fromJsonValue(m_pred, json[QString("pred")]);
    m_pred_isSet = !json[QString("pred")].isNull() && m_pred_isValid;

    m_val_isValid = ::OpenAPI::fromJsonValue(m_val, json[QString("val")]);
    m_val_isSet = !json[QString("val")].isNull() && m_val_isValid;

    m_xrefs_isValid = ::OpenAPI::fromJsonValue(m_xrefs, json[QString("xrefs")]);
    m_xrefs_isSet = !json[QString("xrefs")].isNull() && m_xrefs_isValid;
}

QString OAIAbstractPropertyValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbstractPropertyValue::asJsonObject() const {
    QJsonObject obj;
    if (m_pred_isSet) {
        obj.insert(QString("pred"), ::OpenAPI::toJsonValue(m_pred));
    }
    if (m_val_isSet) {
        obj.insert(QString("val"), ::OpenAPI::toJsonValue(m_val));
    }
    if (m_xrefs.size() > 0) {
        obj.insert(QString("xrefs"), ::OpenAPI::toJsonValue(m_xrefs));
    }
    return obj;
}

QString OAIAbstractPropertyValue::getPred() const {
    return m_pred;
}
void OAIAbstractPropertyValue::setPred(const QString &pred) {
    m_pred = pred;
    m_pred_isSet = true;
}

bool OAIAbstractPropertyValue::is_pred_Set() const{
    return m_pred_isSet;
}

bool OAIAbstractPropertyValue::is_pred_Valid() const{
    return m_pred_isValid;
}

QString OAIAbstractPropertyValue::getVal() const {
    return m_val;
}
void OAIAbstractPropertyValue::setVal(const QString &val) {
    m_val = val;
    m_val_isSet = true;
}

bool OAIAbstractPropertyValue::is_val_Set() const{
    return m_val_isSet;
}

bool OAIAbstractPropertyValue::is_val_Valid() const{
    return m_val_isValid;
}

QList<QString> OAIAbstractPropertyValue::getXrefs() const {
    return m_xrefs;
}
void OAIAbstractPropertyValue::setXrefs(const QList<QString> &xrefs) {
    m_xrefs = xrefs;
    m_xrefs_isSet = true;
}

bool OAIAbstractPropertyValue::is_xrefs_Set() const{
    return m_xrefs_isSet;
}

bool OAIAbstractPropertyValue::is_xrefs_Valid() const{
    return m_xrefs_isValid;
}

bool OAIAbstractPropertyValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_val_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xrefs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbstractPropertyValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
