/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompactAssociationSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompactAssociationSet::OAICompactAssociationSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompactAssociationSet::OAICompactAssociationSet() {
    this->initializeModel();
}

OAICompactAssociationSet::~OAICompactAssociationSet() {}

void OAICompactAssociationSet::initializeModel() {

    m_objects_isSet = false;
    m_objects_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAICompactAssociationSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompactAssociationSet::fromJsonObject(QJsonObject json) {

    m_objects_isValid = ::OpenAPI::fromJsonValue(m_objects, json[QString("objects")]);
    m_objects_isSet = !json[QString("objects")].isNull() && m_objects_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAICompactAssociationSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompactAssociationSet::asJsonObject() const {
    QJsonObject obj;
    if (m_objects.size() > 0) {
        obj.insert(QString("objects"), ::OpenAPI::toJsonValue(m_objects));
    }
    if (m_relation_isSet) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QList<QString> OAICompactAssociationSet::getObjects() const {
    return m_objects;
}
void OAICompactAssociationSet::setObjects(const QList<QString> &objects) {
    m_objects = objects;
    m_objects_isSet = true;
}

bool OAICompactAssociationSet::is_objects_Set() const{
    return m_objects_isSet;
}

bool OAICompactAssociationSet::is_objects_Valid() const{
    return m_objects_isValid;
}

QString OAICompactAssociationSet::getRelation() const {
    return m_relation;
}
void OAICompactAssociationSet::setRelation(const QString &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAICompactAssociationSet::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAICompactAssociationSet::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAICompactAssociationSet::getSubject() const {
    return m_subject;
}
void OAICompactAssociationSet::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICompactAssociationSet::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICompactAssociationSet::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAICompactAssociationSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompactAssociationSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_objects_isValid && m_relation_isValid && m_subject_isValid && true;
}

} // namespace OpenAPI
