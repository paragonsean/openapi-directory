/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAID2PAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAID2PAssociation::OAID2PAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAID2PAssociation::OAID2PAssociation() {
    this->initializeModel();
}

OAID2PAssociation::~OAID2PAssociation() {}

void OAID2PAssociation::initializeModel() {

    m_evidence_graph_isSet = false;
    m_evidence_graph_isValid = false;

    m_evidence_types_isSet = false;
    m_evidence_types_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_negated_isSet = false;
    m_negated_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_object_eq_isSet = false;
    m_object_eq_isValid = false;

    m_object_extensions_isSet = false;
    m_object_extensions_isValid = false;

    m_provided_by_isSet = false;
    m_provided_by_isValid = false;

    m_publications_isSet = false;
    m_publications_isValid = false;

    m_qualifiers_isSet = false;
    m_qualifiers_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_slim_isSet = false;
    m_slim_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_subject_eq_isSet = false;
    m_subject_eq_isValid = false;

    m_subject_extensions_isSet = false;
    m_subject_extensions_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_onset_isSet = false;
    m_onset_isValid = false;
}

void OAID2PAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAID2PAssociation::fromJsonObject(QJsonObject json) {

    m_evidence_graph_isValid = ::OpenAPI::fromJsonValue(m_evidence_graph, json[QString("evidence_graph")]);
    m_evidence_graph_isSet = !json[QString("evidence_graph")].isNull() && m_evidence_graph_isValid;

    m_evidence_types_isValid = ::OpenAPI::fromJsonValue(m_evidence_types, json[QString("evidence_types")]);
    m_evidence_types_isSet = !json[QString("evidence_types")].isNull() && m_evidence_types_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_negated_isValid = ::OpenAPI::fromJsonValue(m_negated, json[QString("negated")]);
    m_negated_isSet = !json[QString("negated")].isNull() && m_negated_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_object_eq_isValid = ::OpenAPI::fromJsonValue(m_object_eq, json[QString("object_eq")]);
    m_object_eq_isSet = !json[QString("object_eq")].isNull() && m_object_eq_isValid;

    m_object_extensions_isValid = ::OpenAPI::fromJsonValue(m_object_extensions, json[QString("object_extensions")]);
    m_object_extensions_isSet = !json[QString("object_extensions")].isNull() && m_object_extensions_isValid;

    m_provided_by_isValid = ::OpenAPI::fromJsonValue(m_provided_by, json[QString("provided_by")]);
    m_provided_by_isSet = !json[QString("provided_by")].isNull() && m_provided_by_isValid;

    m_publications_isValid = ::OpenAPI::fromJsonValue(m_publications, json[QString("publications")]);
    m_publications_isSet = !json[QString("publications")].isNull() && m_publications_isValid;

    m_qualifiers_isValid = ::OpenAPI::fromJsonValue(m_qualifiers, json[QString("qualifiers")]);
    m_qualifiers_isSet = !json[QString("qualifiers")].isNull() && m_qualifiers_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_slim_isValid = ::OpenAPI::fromJsonValue(m_slim, json[QString("slim")]);
    m_slim_isSet = !json[QString("slim")].isNull() && m_slim_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_subject_eq_isValid = ::OpenAPI::fromJsonValue(m_subject_eq, json[QString("subject_eq")]);
    m_subject_eq_isSet = !json[QString("subject_eq")].isNull() && m_subject_eq_isValid;

    m_subject_extensions_isValid = ::OpenAPI::fromJsonValue(m_subject_extensions, json[QString("subject_extensions")]);
    m_subject_extensions_isSet = !json[QString("subject_extensions")].isNull() && m_subject_extensions_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_onset_isValid = ::OpenAPI::fromJsonValue(m_onset, json[QString("onset")]);
    m_onset_isSet = !json[QString("onset")].isNull() && m_onset_isValid;
}

QString OAID2PAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAID2PAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_evidence_graph.isSet()) {
        obj.insert(QString("evidence_graph"), ::OpenAPI::toJsonValue(m_evidence_graph));
    }
    if (m_evidence_types.size() > 0) {
        obj.insert(QString("evidence_types"), ::OpenAPI::toJsonValue(m_evidence_types));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_negated_isSet) {
        obj.insert(QString("negated"), ::OpenAPI::toJsonValue(m_negated));
    }
    if (m_object.isSet()) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_object_eq.size() > 0) {
        obj.insert(QString("object_eq"), ::OpenAPI::toJsonValue(m_object_eq));
    }
    if (m_object_extensions.size() > 0) {
        obj.insert(QString("object_extensions"), ::OpenAPI::toJsonValue(m_object_extensions));
    }
    if (m_provided_by.size() > 0) {
        obj.insert(QString("provided_by"), ::OpenAPI::toJsonValue(m_provided_by));
    }
    if (m_publications.size() > 0) {
        obj.insert(QString("publications"), ::OpenAPI::toJsonValue(m_publications));
    }
    if (m_qualifiers.size() > 0) {
        obj.insert(QString("qualifiers"), ::OpenAPI::toJsonValue(m_qualifiers));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_slim.size() > 0) {
        obj.insert(QString("slim"), ::OpenAPI::toJsonValue(m_slim));
    }
    if (m_subject.isSet()) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_subject_eq.size() > 0) {
        obj.insert(QString("subject_eq"), ::OpenAPI::toJsonValue(m_subject_eq));
    }
    if (m_subject_extensions.size() > 0) {
        obj.insert(QString("subject_extensions"), ::OpenAPI::toJsonValue(m_subject_extensions));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_onset.isSet()) {
        obj.insert(QString("onset"), ::OpenAPI::toJsonValue(m_onset));
    }
    return obj;
}

OAIGraph OAID2PAssociation::getEvidenceGraph() const {
    return m_evidence_graph;
}
void OAID2PAssociation::setEvidenceGraph(const OAIGraph &evidence_graph) {
    m_evidence_graph = evidence_graph;
    m_evidence_graph_isSet = true;
}

bool OAID2PAssociation::is_evidence_graph_Set() const{
    return m_evidence_graph_isSet;
}

bool OAID2PAssociation::is_evidence_graph_Valid() const{
    return m_evidence_graph_isValid;
}

QList<OAIEntityReference> OAID2PAssociation::getEvidenceTypes() const {
    return m_evidence_types;
}
void OAID2PAssociation::setEvidenceTypes(const QList<OAIEntityReference> &evidence_types) {
    m_evidence_types = evidence_types;
    m_evidence_types_isSet = true;
}

bool OAID2PAssociation::is_evidence_types_Set() const{
    return m_evidence_types_isSet;
}

bool OAID2PAssociation::is_evidence_types_Valid() const{
    return m_evidence_types_isValid;
}

QString OAID2PAssociation::getId() const {
    return m_id;
}
void OAID2PAssociation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAID2PAssociation::is_id_Set() const{
    return m_id_isSet;
}

bool OAID2PAssociation::is_id_Valid() const{
    return m_id_isValid;
}

bool OAID2PAssociation::isNegated() const {
    return m_negated;
}
void OAID2PAssociation::setNegated(const bool &negated) {
    m_negated = negated;
    m_negated_isSet = true;
}

bool OAID2PAssociation::is_negated_Set() const{
    return m_negated_isSet;
}

bool OAID2PAssociation::is_negated_Valid() const{
    return m_negated_isValid;
}

OAIBioObjectCore OAID2PAssociation::getObject() const {
    return m_object;
}
void OAID2PAssociation::setObject(const OAIBioObjectCore &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAID2PAssociation::is_object_Set() const{
    return m_object_isSet;
}

bool OAID2PAssociation::is_object_Valid() const{
    return m_object_isValid;
}

QList<QString> OAID2PAssociation::getObjectEq() const {
    return m_object_eq;
}
void OAID2PAssociation::setObjectEq(const QList<QString> &object_eq) {
    m_object_eq = object_eq;
    m_object_eq_isSet = true;
}

bool OAID2PAssociation::is_object_eq_Set() const{
    return m_object_eq_isSet;
}

bool OAID2PAssociation::is_object_eq_Valid() const{
    return m_object_eq_isValid;
}

QList<OAIAnnotationExtension> OAID2PAssociation::getObjectExtensions() const {
    return m_object_extensions;
}
void OAID2PAssociation::setObjectExtensions(const QList<OAIAnnotationExtension> &object_extensions) {
    m_object_extensions = object_extensions;
    m_object_extensions_isSet = true;
}

bool OAID2PAssociation::is_object_extensions_Set() const{
    return m_object_extensions_isSet;
}

bool OAID2PAssociation::is_object_extensions_Valid() const{
    return m_object_extensions_isValid;
}

QList<QString> OAID2PAssociation::getProvidedBy() const {
    return m_provided_by;
}
void OAID2PAssociation::setProvidedBy(const QList<QString> &provided_by) {
    m_provided_by = provided_by;
    m_provided_by_isSet = true;
}

bool OAID2PAssociation::is_provided_by_Set() const{
    return m_provided_by_isSet;
}

bool OAID2PAssociation::is_provided_by_Valid() const{
    return m_provided_by_isValid;
}

QList<OAIEntityReference> OAID2PAssociation::getPublications() const {
    return m_publications;
}
void OAID2PAssociation::setPublications(const QList<OAIEntityReference> &publications) {
    m_publications = publications;
    m_publications_isSet = true;
}

bool OAID2PAssociation::is_publications_Set() const{
    return m_publications_isSet;
}

bool OAID2PAssociation::is_publications_Valid() const{
    return m_publications_isValid;
}

QList<QString> OAID2PAssociation::getQualifiers() const {
    return m_qualifiers;
}
void OAID2PAssociation::setQualifiers(const QList<QString> &qualifiers) {
    m_qualifiers = qualifiers;
    m_qualifiers_isSet = true;
}

bool OAID2PAssociation::is_qualifiers_Set() const{
    return m_qualifiers_isSet;
}

bool OAID2PAssociation::is_qualifiers_Valid() const{
    return m_qualifiers_isValid;
}

OAIRelationRef OAID2PAssociation::getRelation() const {
    return m_relation;
}
void OAID2PAssociation::setRelation(const OAIRelationRef &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAID2PAssociation::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAID2PAssociation::is_relation_Valid() const{
    return m_relation_isValid;
}

QList<QString> OAID2PAssociation::getSlim() const {
    return m_slim;
}
void OAID2PAssociation::setSlim(const QList<QString> &slim) {
    m_slim = slim;
    m_slim_isSet = true;
}

bool OAID2PAssociation::is_slim_Set() const{
    return m_slim_isSet;
}

bool OAID2PAssociation::is_slim_Valid() const{
    return m_slim_isValid;
}

OAIBioObjectCore OAID2PAssociation::getSubject() const {
    return m_subject;
}
void OAID2PAssociation::setSubject(const OAIBioObjectCore &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAID2PAssociation::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAID2PAssociation::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<QString> OAID2PAssociation::getSubjectEq() const {
    return m_subject_eq;
}
void OAID2PAssociation::setSubjectEq(const QList<QString> &subject_eq) {
    m_subject_eq = subject_eq;
    m_subject_eq_isSet = true;
}

bool OAID2PAssociation::is_subject_eq_Set() const{
    return m_subject_eq_isSet;
}

bool OAID2PAssociation::is_subject_eq_Valid() const{
    return m_subject_eq_isValid;
}

QList<OAIAnnotationExtension> OAID2PAssociation::getSubjectExtensions() const {
    return m_subject_extensions;
}
void OAID2PAssociation::setSubjectExtensions(const QList<OAIAnnotationExtension> &subject_extensions) {
    m_subject_extensions = subject_extensions;
    m_subject_extensions_isSet = true;
}

bool OAID2PAssociation::is_subject_extensions_Set() const{
    return m_subject_extensions_isSet;
}

bool OAID2PAssociation::is_subject_extensions_Valid() const{
    return m_subject_extensions_isValid;
}

QString OAID2PAssociation::getType() const {
    return m_type;
}
void OAID2PAssociation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAID2PAssociation::is_type_Set() const{
    return m_type_isSet;
}

bool OAID2PAssociation::is_type_Valid() const{
    return m_type_isValid;
}

OAIEntityReference OAID2PAssociation::getFrequency() const {
    return m_frequency;
}
void OAID2PAssociation::setFrequency(const OAIEntityReference &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAID2PAssociation::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAID2PAssociation::is_frequency_Valid() const{
    return m_frequency_isValid;
}

OAIEntityReference OAID2PAssociation::getOnset() const {
    return m_onset;
}
void OAID2PAssociation::setOnset(const OAIEntityReference &onset) {
    m_onset = onset;
    m_onset_isSet = true;
}

bool OAID2PAssociation::is_onset_Set() const{
    return m_onset_isSet;
}

bool OAID2PAssociation::is_onset_Valid() const{
    return m_onset_isValid;
}

bool OAID2PAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evidence_graph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_eq.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provided_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slim.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_eq.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_onset.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAID2PAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_object_isValid && m_relation_isValid && m_subject_isValid && true;
}

} // namespace OpenAPI
