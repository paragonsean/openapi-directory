/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimMatch::OAISimMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimMatch::OAISimMatch() {
    this->initializeModel();
}

OAISimMatch::~OAISimMatch() {}

void OAISimMatch::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_taxon_isSet = false;
    m_taxon_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_pairwise_match_isSet = false;
    m_pairwise_match_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_significance_isSet = false;
    m_significance_isValid = false;
}

void OAISimMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimMatch::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_taxon_isValid = ::OpenAPI::fromJsonValue(m_taxon, json[QString("taxon")]);
    m_taxon_isSet = !json[QString("taxon")].isNull() && m_taxon_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_pairwise_match_isValid = ::OpenAPI::fromJsonValue(m_pairwise_match, json[QString("pairwise_match")]);
    m_pairwise_match_isSet = !json[QString("pairwise_match")].isNull() && m_pairwise_match_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_significance_isValid = ::OpenAPI::fromJsonValue(m_significance, json[QString("significance")]);
    m_significance_isSet = !json[QString("significance")].isNull() && m_significance_isValid;
}

QString OAISimMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_taxon.isSet()) {
        obj.insert(QString("taxon"), ::OpenAPI::toJsonValue(m_taxon));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_pairwise_match.size() > 0) {
        obj.insert(QString("pairwise_match"), ::OpenAPI::toJsonValue(m_pairwise_match));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_significance_isSet) {
        obj.insert(QString("significance"), ::OpenAPI::toJsonValue(m_significance));
    }
    return obj;
}

QString OAISimMatch::getId() const {
    return m_id;
}
void OAISimMatch::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISimMatch::is_id_Set() const{
    return m_id_isSet;
}

bool OAISimMatch::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISimMatch::getLabel() const {
    return m_label;
}
void OAISimMatch::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISimMatch::is_label_Set() const{
    return m_label_isSet;
}

bool OAISimMatch::is_label_Valid() const{
    return m_label_isValid;
}

OAINode OAISimMatch::getTaxon() const {
    return m_taxon;
}
void OAISimMatch::setTaxon(const OAINode &taxon) {
    m_taxon = taxon;
    m_taxon_isSet = true;
}

bool OAISimMatch::is_taxon_Set() const{
    return m_taxon_isSet;
}

bool OAISimMatch::is_taxon_Valid() const{
    return m_taxon_isValid;
}

QString OAISimMatch::getType() const {
    return m_type;
}
void OAISimMatch::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISimMatch::is_type_Set() const{
    return m_type_isSet;
}

bool OAISimMatch::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAISimMatch_allOf_pairwise_match> OAISimMatch::getPairwiseMatch() const {
    return m_pairwise_match;
}
void OAISimMatch::setPairwiseMatch(const QList<OAISimMatch_allOf_pairwise_match> &pairwise_match) {
    m_pairwise_match = pairwise_match;
    m_pairwise_match_isSet = true;
}

bool OAISimMatch::is_pairwise_match_Set() const{
    return m_pairwise_match_isSet;
}

bool OAISimMatch::is_pairwise_match_Valid() const{
    return m_pairwise_match_isValid;
}

QString OAISimMatch::getRank() const {
    return m_rank;
}
void OAISimMatch::setRank(const QString &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAISimMatch::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAISimMatch::is_rank_Valid() const{
    return m_rank_isValid;
}

double OAISimMatch::getScore() const {
    return m_score;
}
void OAISimMatch::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAISimMatch::is_score_Set() const{
    return m_score_isSet;
}

bool OAISimMatch::is_score_Valid() const{
    return m_score_isValid;
}

QString OAISimMatch::getSignificance() const {
    return m_significance;
}
void OAISimMatch::setSignificance(const QString &significance) {
    m_significance = significance;
    m_significance_isSet = true;
}

bool OAISimMatch::is_significance_Set() const{
    return m_significance_isSet;
}

bool OAISimMatch::is_significance_Valid() const{
    return m_significance_isValid;
}

bool OAISimMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pairwise_match.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_significance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
