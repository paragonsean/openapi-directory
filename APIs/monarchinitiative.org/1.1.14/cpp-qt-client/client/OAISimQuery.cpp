/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimQuery::OAISimQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimQuery::OAISimQuery() {
    this->initializeModel();
}

OAISimQuery::~OAISimQuery() {}

void OAISimQuery::initializeModel() {

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_negated_ids_isSet = false;
    m_negated_ids_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_target_ids_isSet = false;
    m_target_ids_isValid = false;

    m_unresolved_ids_isSet = false;
    m_unresolved_ids_isValid = false;
}

void OAISimQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimQuery::fromJsonObject(QJsonObject json) {

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_negated_ids_isValid = ::OpenAPI::fromJsonValue(m_negated_ids, json[QString("negated_ids")]);
    m_negated_ids_isSet = !json[QString("negated_ids")].isNull() && m_negated_ids_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    if(json["target_ids"].isArray()){
        auto arr = json["target_ids"].toArray();
        m_target_ids_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAINode> item;
                m_target_ids_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_target_ids_isSet = !jval.isNull() && m_target_ids_isValid;
                m_target_ids.push_back(item);
            }
        }
    }

    m_unresolved_ids_isValid = ::OpenAPI::fromJsonValue(m_unresolved_ids, json[QString("unresolved_ids")]);
    m_unresolved_ids_isSet = !json[QString("unresolved_ids")].isNull() && m_unresolved_ids_isValid;
}

QString OAISimQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_ids.size() > 0) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_negated_ids.size() > 0) {
        obj.insert(QString("negated_ids"), ::OpenAPI::toJsonValue(m_negated_ids));
    }
    if (m_reference.isSet()) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_target_ids.size() > 0) {
        
        obj.insert(QString("target_ids"), toJsonValue(m_target_ids));
    }
    if (m_unresolved_ids.size() > 0) {
        obj.insert(QString("unresolved_ids"), ::OpenAPI::toJsonValue(m_unresolved_ids));
    }
    return obj;
}

QList<OAINode> OAISimQuery::getIds() const {
    return m_ids;
}
void OAISimQuery::setIds(const QList<OAINode> &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAISimQuery::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAISimQuery::is_ids_Valid() const{
    return m_ids_isValid;
}

QList<OAINode> OAISimQuery::getNegatedIds() const {
    return m_negated_ids;
}
void OAISimQuery::setNegatedIds(const QList<OAINode> &negated_ids) {
    m_negated_ids = negated_ids;
    m_negated_ids_isSet = true;
}

bool OAISimQuery::is_negated_ids_Set() const{
    return m_negated_ids_isSet;
}

bool OAISimQuery::is_negated_ids_Valid() const{
    return m_negated_ids_isValid;
}

OAITypedNode OAISimQuery::getReference() const {
    return m_reference;
}
void OAISimQuery::setReference(const OAITypedNode &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAISimQuery::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAISimQuery::is_reference_Valid() const{
    return m_reference_isValid;
}

QList<QList<OAINode>> OAISimQuery::getTargetIds() const {
    return m_target_ids;
}
void OAISimQuery::setTargetIds(const QList<QList<OAINode>> &target_ids) {
    m_target_ids = target_ids;
    m_target_ids_isSet = true;
}

bool OAISimQuery::is_target_ids_Set() const{
    return m_target_ids_isSet;
}

bool OAISimQuery::is_target_ids_Valid() const{
    return m_target_ids_isValid;
}

QList<QString> OAISimQuery::getUnresolvedIds() const {
    return m_unresolved_ids;
}
void OAISimQuery::setUnresolvedIds(const QList<QString> &unresolved_ids) {
    m_unresolved_ids = unresolved_ids;
    m_unresolved_ids_isSet = true;
}

bool OAISimQuery::is_unresolved_ids_Set() const{
    return m_unresolved_ids_isSet;
}

bool OAISimQuery::is_unresolved_ids_Valid() const{
    return m_unresolved_ids_isValid;
}

bool OAISimQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_negated_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unresolved_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
