/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISimApi_H
#define OAI_OAISimApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICompareInput.h"
#include "OAISimResult.h"
#include "OAISufficiencyOutput.h"
#include "OAISufficiencyPostInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISimApi : public QObject {
    Q_OBJECT

public:
    OAISimApi(const int timeOut = 0);
    ~OAISimApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QList<QString> [optional]
    * @param[in]  absent_id QList<QString> [optional]
    */
    virtual void getAnnotationScore(const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &absent_id = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  is_feature_set bool [optional]
    * @param[in]  metric QString [optional]
    * @param[in]  ref_id QList<QString> [optional]
    * @param[in]  query_id QList<QString> [optional]
    */
    virtual void getSimCompare(const ::OpenAPI::OptionalParam<bool> &is_feature_set = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &metric = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &ref_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &query_id = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  is_feature_set bool [optional]
    * @param[in]  metric QString [optional]
    * @param[in]  id QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  taxon QString [optional]
    */
    virtual void getSimSearch(const ::OpenAPI::OptionalParam<bool> &is_feature_set = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &metric = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &taxon = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_sufficiency_post_input OAISufficiencyPostInput [required]
    */
    virtual void postAnnotationScore(const OAISufficiencyPostInput &oai_sufficiency_post_input);

    /**
    * @param[in]  oai_compare_input OAICompareInput [required]
    */
    virtual void postSimCompare(const OAICompareInput &oai_compare_input);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAnnotationScoreCallback(OAIHttpRequestWorker *worker);
    void getSimCompareCallback(OAIHttpRequestWorker *worker);
    void getSimSearchCallback(OAIHttpRequestWorker *worker);
    void postAnnotationScoreCallback(OAIHttpRequestWorker *worker);
    void postSimCompareCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAnnotationScoreSignal(OAISufficiencyOutput summary);
    void getSimCompareSignal(OAISimResult summary);
    void getSimSearchSignal(OAISimResult summary);
    void postAnnotationScoreSignal(OAISufficiencyOutput summary);
    void postSimCompareSignal(OAISimResult summary);


    void getAnnotationScoreSignalFull(OAIHttpRequestWorker *worker, OAISufficiencyOutput summary);
    void getSimCompareSignalFull(OAIHttpRequestWorker *worker, OAISimResult summary);
    void getSimSearchSignalFull(OAIHttpRequestWorker *worker, OAISimResult summary);
    void postAnnotationScoreSignalFull(OAIHttpRequestWorker *worker, OAISufficiencyOutput summary);
    void postSimCompareSignalFull(OAIHttpRequestWorker *worker, OAISimResult summary);

    Q_DECL_DEPRECATED_X("Use getAnnotationScoreSignalError() instead")
    void getAnnotationScoreSignalE(OAISufficiencyOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationScoreSignalError(OAISufficiencyOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimCompareSignalError() instead")
    void getSimCompareSignalE(OAISimResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimCompareSignalError(OAISimResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimSearchSignalError() instead")
    void getSimSearchSignalE(OAISimResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimSearchSignalError(OAISimResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAnnotationScoreSignalError() instead")
    void postAnnotationScoreSignalE(OAISufficiencyOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAnnotationScoreSignalError(OAISufficiencyOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSimCompareSignalError() instead")
    void postSimCompareSignalE(OAISimResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSimCompareSignalError(OAISimResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAnnotationScoreSignalErrorFull() instead")
    void getAnnotationScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimCompareSignalErrorFull() instead")
    void getSimCompareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimCompareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimSearchSignalErrorFull() instead")
    void getSimSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAnnotationScoreSignalErrorFull() instead")
    void postAnnotationScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAnnotationScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSimCompareSignalErrorFull() instead")
    void postSimCompareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSimCompareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
