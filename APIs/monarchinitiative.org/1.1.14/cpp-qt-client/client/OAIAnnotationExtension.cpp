/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotationExtension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotationExtension::OAIAnnotationExtension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotationExtension::OAIAnnotationExtension() {
    this->initializeModel();
}

OAIAnnotationExtension::~OAIAnnotationExtension() {}

void OAIAnnotationExtension::initializeModel() {

    m_filler_isSet = false;
    m_filler_isValid = false;

    m_relation_chain_isSet = false;
    m_relation_chain_isValid = false;
}

void OAIAnnotationExtension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotationExtension::fromJsonObject(QJsonObject json) {

    m_filler_isValid = ::OpenAPI::fromJsonValue(m_filler, json[QString("filler")]);
    m_filler_isSet = !json[QString("filler")].isNull() && m_filler_isValid;

    m_relation_chain_isValid = ::OpenAPI::fromJsonValue(m_relation_chain, json[QString("relation_chain")]);
    m_relation_chain_isSet = !json[QString("relation_chain")].isNull() && m_relation_chain_isValid;
}

QString OAIAnnotationExtension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotationExtension::asJsonObject() const {
    QJsonObject obj;
    if (m_filler.isSet()) {
        obj.insert(QString("filler"), ::OpenAPI::toJsonValue(m_filler));
    }
    if (m_relation_chain.size() > 0) {
        obj.insert(QString("relation_chain"), ::OpenAPI::toJsonValue(m_relation_chain));
    }
    return obj;
}

OAINamedObject OAIAnnotationExtension::getFiller() const {
    return m_filler;
}
void OAIAnnotationExtension::setFiller(const OAINamedObject &filler) {
    m_filler = filler;
    m_filler_isSet = true;
}

bool OAIAnnotationExtension::is_filler_Set() const{
    return m_filler_isSet;
}

bool OAIAnnotationExtension::is_filler_Valid() const{
    return m_filler_isValid;
}

QList<OAIRelation> OAIAnnotationExtension::getRelationChain() const {
    return m_relation_chain;
}
void OAIAnnotationExtension::setRelationChain(const QList<OAIRelation> &relation_chain) {
    m_relation_chain = relation_chain;
    m_relation_chain_isSet = true;
}

bool OAIAnnotationExtension::is_relation_chain_Set() const{
    return m_relation_chain_isSet;
}

bool OAIAnnotationExtension::is_relation_chain_Valid() const{
    return m_relation_chain_isValid;
}

bool OAIAnnotationExtension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filler.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_chain.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotationExtension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
