/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimMatch_allOf_pairwise_match.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimMatch_allOf_pairwise_match::OAISimMatch_allOf_pairwise_match(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimMatch_allOf_pairwise_match::OAISimMatch_allOf_pairwise_match() {
    this->initializeModel();
}

OAISimMatch_allOf_pairwise_match::~OAISimMatch_allOf_pairwise_match() {}

void OAISimMatch_allOf_pairwise_match::initializeModel() {

    m_lcs_isSet = false;
    m_lcs_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;
}

void OAISimMatch_allOf_pairwise_match::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimMatch_allOf_pairwise_match::fromJsonObject(QJsonObject json) {

    m_lcs_isValid = ::OpenAPI::fromJsonValue(m_lcs, json[QString("lcs")]);
    m_lcs_isSet = !json[QString("lcs")].isNull() && m_lcs_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;
}

QString OAISimMatch_allOf_pairwise_match::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimMatch_allOf_pairwise_match::asJsonObject() const {
    QJsonObject obj;
    if (m_lcs.isSet()) {
        obj.insert(QString("lcs"), ::OpenAPI::toJsonValue(m_lcs));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_reference.isSet()) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    return obj;
}

OAIIcNode OAISimMatch_allOf_pairwise_match::getLcs() const {
    return m_lcs;
}
void OAISimMatch_allOf_pairwise_match::setLcs(const OAIIcNode &lcs) {
    m_lcs = lcs;
    m_lcs_isSet = true;
}

bool OAISimMatch_allOf_pairwise_match::is_lcs_Set() const{
    return m_lcs_isSet;
}

bool OAISimMatch_allOf_pairwise_match::is_lcs_Valid() const{
    return m_lcs_isValid;
}

OAIIcNode OAISimMatch_allOf_pairwise_match::getMatch() const {
    return m_match;
}
void OAISimMatch_allOf_pairwise_match::setMatch(const OAIIcNode &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAISimMatch_allOf_pairwise_match::is_match_Set() const{
    return m_match_isSet;
}

bool OAISimMatch_allOf_pairwise_match::is_match_Valid() const{
    return m_match_isValid;
}

OAIIcNode OAISimMatch_allOf_pairwise_match::getReference() const {
    return m_reference;
}
void OAISimMatch_allOf_pairwise_match::setReference(const OAIIcNode &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAISimMatch_allOf_pairwise_match::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAISimMatch_allOf_pairwise_match::is_reference_Valid() const{
    return m_reference_isValid;
}

bool OAISimMatch_allOf_pairwise_match::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lcs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimMatch_allOf_pairwise_match::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
