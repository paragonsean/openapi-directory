/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimResult::OAISimResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimResult::OAISimResult() {
    this->initializeModel();
}

OAISimResult::~OAISimResult() {}

void OAISimResult::initializeModel() {

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAISimResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimResult::fromJsonObject(QJsonObject json) {

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("matches")]);
    m_matches_isSet = !json[QString("matches")].isNull() && m_matches_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAISimResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimResult::asJsonObject() const {
    QJsonObject obj;
    if (m_matches.size() > 0) {
        obj.insert(QString("matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

QList<OAISimMatch> OAISimResult::getMatches() const {
    return m_matches;
}
void OAISimResult::setMatches(const QList<OAISimMatch> &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAISimResult::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAISimResult::is_matches_Valid() const{
    return m_matches_isValid;
}

OAISimMetadata OAISimResult::getMetadata() const {
    return m_metadata;
}
void OAISimResult::setMetadata(const OAISimMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISimResult::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISimResult::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAISimQuery OAISimResult::getQuery() const {
    return m_query;
}
void OAISimResult::setQuery(const OAISimQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISimResult::is_query_Set() const{
    return m_query_isSet;
}

bool OAISimResult::is_query_Valid() const{
    return m_query_isValid;
}

bool OAISimResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
