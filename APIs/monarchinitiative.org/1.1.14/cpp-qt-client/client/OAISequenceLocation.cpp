/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISequenceLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISequenceLocation::OAISequenceLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISequenceLocation::OAISequenceLocation() {
    this->initializeModel();
}

OAISequenceLocation::~OAISequenceLocation() {}

void OAISequenceLocation::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_iri_isSet = false;
    m_iri_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_consider_isSet = false;
    m_consider_isValid = false;

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_replaced_by_isSet = false;
    m_replaced_by_isValid = false;

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_association_counts_isSet = false;
    m_association_counts_isValid = false;

    m_taxon_isSet = false;
    m_taxon_isValid = false;

    m_xrefs_isSet = false;
    m_xrefs_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_strand_isSet = false;
    m_strand_isValid = false;
}

void OAISequenceLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISequenceLocation::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_iri_isValid = ::OpenAPI::fromJsonValue(m_iri, json[QString("iri")]);
    m_iri_isSet = !json[QString("iri")].isNull() && m_iri_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_consider_isValid = ::OpenAPI::fromJsonValue(m_consider, json[QString("consider")]);
    m_consider_isSet = !json[QString("consider")].isNull() && m_consider_isValid;

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_replaced_by_isValid = ::OpenAPI::fromJsonValue(m_replaced_by, json[QString("replaced_by")]);
    m_replaced_by_isSet = !json[QString("replaced_by")].isNull() && m_replaced_by_isValid;

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("synonyms")]);
    m_synonyms_isSet = !json[QString("synonyms")].isNull() && m_synonyms_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_association_counts_isValid = ::OpenAPI::fromJsonValue(m_association_counts, json[QString("association_counts")]);
    m_association_counts_isSet = !json[QString("association_counts")].isNull() && m_association_counts_isValid;

    m_taxon_isValid = ::OpenAPI::fromJsonValue(m_taxon, json[QString("taxon")]);
    m_taxon_isSet = !json[QString("taxon")].isNull() && m_taxon_isValid;

    m_xrefs_isValid = ::OpenAPI::fromJsonValue(m_xrefs, json[QString("xrefs")]);
    m_xrefs_isSet = !json[QString("xrefs")].isNull() && m_xrefs_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_strand_isValid = ::OpenAPI::fromJsonValue(m_strand, json[QString("strand")]);
    m_strand_isSet = !json[QString("strand")].isNull() && m_strand_isValid;
}

QString OAISequenceLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISequenceLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_iri_isSet) {
        obj.insert(QString("iri"), ::OpenAPI::toJsonValue(m_iri));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_consider.size() > 0) {
        obj.insert(QString("consider"), ::OpenAPI::toJsonValue(m_consider));
    }
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_replaced_by.size() > 0) {
        obj.insert(QString("replaced_by"), ::OpenAPI::toJsonValue(m_replaced_by));
    }
    if (m_synonyms.size() > 0) {
        obj.insert(QString("synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_association_counts_isSet) {
        obj.insert(QString("association_counts"), ::OpenAPI::toJsonValue(m_association_counts));
    }
    if (m_taxon.isSet()) {
        obj.insert(QString("taxon"), ::OpenAPI::toJsonValue(m_taxon));
    }
    if (m_xrefs.size() > 0) {
        obj.insert(QString("xrefs"), ::OpenAPI::toJsonValue(m_xrefs));
    }
    if (m_end.isSet()) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_phase_isSet) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_start.isSet()) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_strand_isSet) {
        obj.insert(QString("strand"), ::OpenAPI::toJsonValue(m_strand));
    }
    return obj;
}

QList<QString> OAISequenceLocation::getCategory() const {
    return m_category;
}
void OAISequenceLocation::setCategory(const QList<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISequenceLocation::is_category_Set() const{
    return m_category_isSet;
}

bool OAISequenceLocation::is_category_Valid() const{
    return m_category_isValid;
}

QString OAISequenceLocation::getId() const {
    return m_id;
}
void OAISequenceLocation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISequenceLocation::is_id_Set() const{
    return m_id_isSet;
}

bool OAISequenceLocation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISequenceLocation::getIri() const {
    return m_iri;
}
void OAISequenceLocation::setIri(const QString &iri) {
    m_iri = iri;
    m_iri_isSet = true;
}

bool OAISequenceLocation::is_iri_Set() const{
    return m_iri_isSet;
}

bool OAISequenceLocation::is_iri_Valid() const{
    return m_iri_isValid;
}

QString OAISequenceLocation::getLabel() const {
    return m_label;
}
void OAISequenceLocation::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISequenceLocation::is_label_Set() const{
    return m_label_isSet;
}

bool OAISequenceLocation::is_label_Valid() const{
    return m_label_isValid;
}

QList<QString> OAISequenceLocation::getConsider() const {
    return m_consider;
}
void OAISequenceLocation::setConsider(const QList<QString> &consider) {
    m_consider = consider;
    m_consider_isSet = true;
}

bool OAISequenceLocation::is_consider_Set() const{
    return m_consider_isSet;
}

bool OAISequenceLocation::is_consider_Valid() const{
    return m_consider_isValid;
}

bool OAISequenceLocation::isDeprecated() const {
    return m_deprecated;
}
void OAISequenceLocation::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAISequenceLocation::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAISequenceLocation::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAISequenceLocation::getDescription() const {
    return m_description;
}
void OAISequenceLocation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISequenceLocation::is_description_Set() const{
    return m_description_isSet;
}

bool OAISequenceLocation::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAISequenceLocation::getReplacedBy() const {
    return m_replaced_by;
}
void OAISequenceLocation::setReplacedBy(const QList<QString> &replaced_by) {
    m_replaced_by = replaced_by;
    m_replaced_by_isSet = true;
}

bool OAISequenceLocation::is_replaced_by_Set() const{
    return m_replaced_by_isSet;
}

bool OAISequenceLocation::is_replaced_by_Valid() const{
    return m_replaced_by_isValid;
}

QList<OAISynonymPropertyValue> OAISequenceLocation::getSynonyms() const {
    return m_synonyms;
}
void OAISequenceLocation::setSynonyms(const QList<OAISynonymPropertyValue> &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAISequenceLocation::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAISequenceLocation::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

QList<QString> OAISequenceLocation::getTypes() const {
    return m_types;
}
void OAISequenceLocation::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAISequenceLocation::is_types_Set() const{
    return m_types_isSet;
}

bool OAISequenceLocation::is_types_Valid() const{
    return m_types_isValid;
}

OAIObject OAISequenceLocation::getAssociationCounts() const {
    return m_association_counts;
}
void OAISequenceLocation::setAssociationCounts(const OAIObject &association_counts) {
    m_association_counts = association_counts;
    m_association_counts_isSet = true;
}

bool OAISequenceLocation::is_association_counts_Set() const{
    return m_association_counts_isSet;
}

bool OAISequenceLocation::is_association_counts_Valid() const{
    return m_association_counts_isValid;
}

OAITaxon OAISequenceLocation::getTaxon() const {
    return m_taxon;
}
void OAISequenceLocation::setTaxon(const OAITaxon &taxon) {
    m_taxon = taxon;
    m_taxon_isSet = true;
}

bool OAISequenceLocation::is_taxon_Set() const{
    return m_taxon_isSet;
}

bool OAISequenceLocation::is_taxon_Valid() const{
    return m_taxon_isValid;
}

QList<QString> OAISequenceLocation::getXrefs() const {
    return m_xrefs;
}
void OAISequenceLocation::setXrefs(const QList<QString> &xrefs) {
    m_xrefs = xrefs;
    m_xrefs_isSet = true;
}

bool OAISequenceLocation::is_xrefs_Set() const{
    return m_xrefs_isSet;
}

bool OAISequenceLocation::is_xrefs_Valid() const{
    return m_xrefs_isValid;
}

OAISequencePosition OAISequenceLocation::getEnd() const {
    return m_end;
}
void OAISequenceLocation::setEnd(const OAISequencePosition &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAISequenceLocation::is_end_Set() const{
    return m_end_isSet;
}

bool OAISequenceLocation::is_end_Valid() const{
    return m_end_isValid;
}

qint32 OAISequenceLocation::getPhase() const {
    return m_phase;
}
void OAISequenceLocation::setPhase(const qint32 &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAISequenceLocation::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAISequenceLocation::is_phase_Valid() const{
    return m_phase_isValid;
}

qint32 OAISequenceLocation::getScore() const {
    return m_score;
}
void OAISequenceLocation::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAISequenceLocation::is_score_Set() const{
    return m_score_isSet;
}

bool OAISequenceLocation::is_score_Valid() const{
    return m_score_isValid;
}

OAISequencePosition OAISequenceLocation::getStart() const {
    return m_start;
}
void OAISequenceLocation::setStart(const OAISequencePosition &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAISequenceLocation::is_start_Set() const{
    return m_start_isSet;
}

bool OAISequenceLocation::is_start_Valid() const{
    return m_start_isValid;
}

qint32 OAISequenceLocation::getStrand() const {
    return m_strand;
}
void OAISequenceLocation::setStrand(const qint32 &strand) {
    m_strand = strand;
    m_strand_isSet = true;
}

bool OAISequenceLocation::is_strand_Set() const{
    return m_strand_isSet;
}

bool OAISequenceLocation::is_strand_Valid() const{
    return m_strand_isValid;
}

bool OAISequenceLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replaced_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_synonyms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_counts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xrefs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strand_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISequenceLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
