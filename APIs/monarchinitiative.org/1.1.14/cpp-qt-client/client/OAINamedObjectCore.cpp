/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamedObjectCore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamedObjectCore::OAINamedObjectCore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamedObjectCore::OAINamedObjectCore() {
    this->initializeModel();
}

OAINamedObjectCore::~OAINamedObjectCore() {}

void OAINamedObjectCore::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_iri_isSet = false;
    m_iri_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAINamedObjectCore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamedObjectCore::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_iri_isValid = ::OpenAPI::fromJsonValue(m_iri, json[QString("iri")]);
    m_iri_isSet = !json[QString("iri")].isNull() && m_iri_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAINamedObjectCore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamedObjectCore::asJsonObject() const {
    QJsonObject obj;
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_iri_isSet) {
        obj.insert(QString("iri"), ::OpenAPI::toJsonValue(m_iri));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

QList<QString> OAINamedObjectCore::getCategory() const {
    return m_category;
}
void OAINamedObjectCore::setCategory(const QList<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAINamedObjectCore::is_category_Set() const{
    return m_category_isSet;
}

bool OAINamedObjectCore::is_category_Valid() const{
    return m_category_isValid;
}

QString OAINamedObjectCore::getId() const {
    return m_id;
}
void OAINamedObjectCore::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINamedObjectCore::is_id_Set() const{
    return m_id_isSet;
}

bool OAINamedObjectCore::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINamedObjectCore::getIri() const {
    return m_iri;
}
void OAINamedObjectCore::setIri(const QString &iri) {
    m_iri = iri;
    m_iri_isSet = true;
}

bool OAINamedObjectCore::is_iri_Set() const{
    return m_iri_isSet;
}

bool OAINamedObjectCore::is_iri_Valid() const{
    return m_iri_isValid;
}

QString OAINamedObjectCore::getLabel() const {
    return m_label;
}
void OAINamedObjectCore::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAINamedObjectCore::is_label_Set() const{
    return m_label_isSet;
}

bool OAINamedObjectCore::is_label_Valid() const{
    return m_label_isValid;
}

bool OAINamedObjectCore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamedObjectCore::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
