/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISearchApi_H
#define OAI_OAISearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutocompleteResults.h"
#include "OAILayResults.h"
#include "OAISearchResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISearchApi : public QObject {
    Q_OBJECT

public:
    OAISearchApi(const int timeOut = 0);
    ~OAISearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  term QString [required]
    * @param[in]  fq QList<QString> [optional]
    * @param[in]  category QList<QString> [optional]
    * @param[in]  prefix QList<QString> [optional]
    * @param[in]  include_eqs bool [optional]
    * @param[in]  boost_fx QList<QString> [optional]
    * @param[in]  boost_q QList<QString> [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start QString [optional]
    * @param[in]  highlight_class QString [optional]
    * @param[in]  min_match QString [optional]
    * @param[in]  exclude_groups bool [optional]
    * @param[in]  minimal_tokenizer bool [optional]
    */
    virtual void getAutocomplete(const QString &term, const ::OpenAPI::OptionalParam<QList<QString>> &fq = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &prefix = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_eqs = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &boost_fx = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &boost_q = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &highlight_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_groups = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &minimal_tokenizer = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  term QString [required]
    * @param[in]  fq QList<QString> [optional]
    * @param[in]  category QList<QString> [optional]
    * @param[in]  prefix QList<QString> [optional]
    * @param[in]  include_eqs bool [optional]
    * @param[in]  boost_fx QList<QString> [optional]
    * @param[in]  boost_q QList<QString> [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start QString [optional]
    * @param[in]  highlight_class QString [optional]
    * @param[in]  min_match QString [optional]
    * @param[in]  exclude_groups bool [optional]
    * @param[in]  minimal_tokenizer bool [optional]
    */
    virtual void getSearchEntities(const QString &term, const ::OpenAPI::OptionalParam<QList<QString>> &fq = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &prefix = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_eqs = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &boost_fx = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &boost_q = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &highlight_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_groups = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &minimal_tokenizer = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  term QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start QString [optional]
    * @param[in]  phenotype_group QString [optional]
    * @param[in]  phenotype_group_label QString [optional]
    * @param[in]  anatomical_system QString [optional]
    * @param[in]  anatomical_system_label QString [optional]
    * @param[in]  highlight_class QString [optional]
    */
    virtual void getSearchHpoEntities(const QString &term, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phenotype_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phenotype_group_label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &anatomical_system = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &anatomical_system_label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &highlight_class = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAutocompleteCallback(OAIHttpRequestWorker *worker);
    void getSearchEntitiesCallback(OAIHttpRequestWorker *worker);
    void getSearchHpoEntitiesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAutocompleteSignal(OAIAutocompleteResults summary);
    void getSearchEntitiesSignal(OAISearchResult summary);
    void getSearchHpoEntitiesSignal(OAILayResults summary);


    void getAutocompleteSignalFull(OAIHttpRequestWorker *worker, OAIAutocompleteResults summary);
    void getSearchEntitiesSignalFull(OAIHttpRequestWorker *worker, OAISearchResult summary);
    void getSearchHpoEntitiesSignalFull(OAIHttpRequestWorker *worker, OAILayResults summary);

    Q_DECL_DEPRECATED_X("Use getAutocompleteSignalError() instead")
    void getAutocompleteSignalE(OAIAutocompleteResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutocompleteSignalError(OAIAutocompleteResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchEntitiesSignalError() instead")
    void getSearchEntitiesSignalE(OAISearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchEntitiesSignalError(OAISearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchHpoEntitiesSignalError() instead")
    void getSearchHpoEntitiesSignalE(OAILayResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchHpoEntitiesSignalError(OAILayResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAutocompleteSignalErrorFull() instead")
    void getAutocompleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutocompleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchEntitiesSignalErrorFull() instead")
    void getSearchEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchHpoEntitiesSignalErrorFull() instead")
    void getSearchHpoEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchHpoEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
