/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICamApi_H
#define OAI_OAICamApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICamApi : public QObject {
    Q_OBJECT

public:
    OAICamApi(const int timeOut = 0);
    ~OAICamApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  title QString [optional]
    * @param[in]  contributor QString [optional]
    */
    virtual void getActivityCollection(const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contributor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  title QString [optional]
    * @param[in]  contributor QString [optional]
    */
    virtual void getInstanceObject(const QString &id, const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contributor = ::OpenAPI::OptionalParam<QString>());


    virtual void getModelCollection();


    virtual void getModelContributors();


    virtual void getModelInstances();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getModelObject(const QString &id);

    /**
    * @param[in]  title QString [optional]
    * @param[in]  contributor QString [optional]
    */
    virtual void getModelProperties(const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contributor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  title QString [optional]
    * @param[in]  contributor QString [optional]
    */
    virtual void getModelPropertyValues(const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contributor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  title QString [optional]
    * @param[in]  contributor QString [optional]
    */
    virtual void getModelQuery(const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contributor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  title QString [optional]
    * @param[in]  contributor QString [optional]
    */
    virtual void getPhysicalInteraction(const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contributor = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getActivityCollectionCallback(OAIHttpRequestWorker *worker);
    void getInstanceObjectCallback(OAIHttpRequestWorker *worker);
    void getModelCollectionCallback(OAIHttpRequestWorker *worker);
    void getModelContributorsCallback(OAIHttpRequestWorker *worker);
    void getModelInstancesCallback(OAIHttpRequestWorker *worker);
    void getModelObjectCallback(OAIHttpRequestWorker *worker);
    void getModelPropertiesCallback(OAIHttpRequestWorker *worker);
    void getModelPropertyValuesCallback(OAIHttpRequestWorker *worker);
    void getModelQueryCallback(OAIHttpRequestWorker *worker);
    void getPhysicalInteractionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getActivityCollectionSignal();
    void getInstanceObjectSignal(QList<OAIAssociation> summary);
    void getModelCollectionSignal();
    void getModelContributorsSignal();
    void getModelInstancesSignal();
    void getModelObjectSignal();
    void getModelPropertiesSignal();
    void getModelPropertyValuesSignal();
    void getModelQuerySignal();
    void getPhysicalInteractionSignal();


    void getActivityCollectionSignalFull(OAIHttpRequestWorker *worker);
    void getInstanceObjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociation> summary);
    void getModelCollectionSignalFull(OAIHttpRequestWorker *worker);
    void getModelContributorsSignalFull(OAIHttpRequestWorker *worker);
    void getModelInstancesSignalFull(OAIHttpRequestWorker *worker);
    void getModelObjectSignalFull(OAIHttpRequestWorker *worker);
    void getModelPropertiesSignalFull(OAIHttpRequestWorker *worker);
    void getModelPropertyValuesSignalFull(OAIHttpRequestWorker *worker);
    void getModelQuerySignalFull(OAIHttpRequestWorker *worker);
    void getPhysicalInteractionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getActivityCollectionSignalError() instead")
    void getActivityCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActivityCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstanceObjectSignalError() instead")
    void getInstanceObjectSignalE(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstanceObjectSignalError(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelCollectionSignalError() instead")
    void getModelCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getModelCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelContributorsSignalError() instead")
    void getModelContributorsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getModelContributorsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelInstancesSignalError() instead")
    void getModelInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getModelInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelObjectSignalError() instead")
    void getModelObjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getModelObjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelPropertiesSignalError() instead")
    void getModelPropertiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getModelPropertiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelPropertyValuesSignalError() instead")
    void getModelPropertyValuesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getModelPropertyValuesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelQuerySignalError() instead")
    void getModelQuerySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getModelQuerySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhysicalInteractionSignalError() instead")
    void getPhysicalInteractionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPhysicalInteractionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getActivityCollectionSignalErrorFull() instead")
    void getActivityCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivityCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstanceObjectSignalErrorFull() instead")
    void getInstanceObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstanceObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelCollectionSignalErrorFull() instead")
    void getModelCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelContributorsSignalErrorFull() instead")
    void getModelContributorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelContributorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelInstancesSignalErrorFull() instead")
    void getModelInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelObjectSignalErrorFull() instead")
    void getModelObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelPropertiesSignalErrorFull() instead")
    void getModelPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelPropertyValuesSignalErrorFull() instead")
    void getModelPropertyValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelPropertyValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelQuerySignalErrorFull() instead")
    void getModelQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhysicalInteractionSignalErrorFull() instead")
    void getPhysicalInteractionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhysicalInteractionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
