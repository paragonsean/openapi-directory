/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOntologyApi_H
#define OAI_OAIOntologyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOntologyApi : public QObject {
    Q_OBJECT

public:
    OAIOntologyApi(const int timeOut = 0);
    ~OAIOntologyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOntologySubset(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOntologyTerm(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  graph_type QString [optional]
    */
    virtual void getOntologyTermGraph(const QString &id, const ::OpenAPI::OptionalParam<QString> &graph_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  cnode QList<QString> [optional]
    * @param[in]  include_ancestors bool [optional]
    * @param[in]  include_descendants bool [optional]
    * @param[in]  relation QList<QString> [optional]
    * @param[in]  include_meta bool [optional]
    */
    virtual void getOntologyTermSubgraph(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &cnode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_ancestors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_descendants = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &relation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_meta = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOntologyTermSubsets(const QString &id);

    /**
    * @param[in]  subject QString [required]
    * @param[in]  object QString [required]
    */
    virtual void getOntologyTermsSharedAncestor(const QString &subject, const QString &object);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getOntologySubsetCallback(OAIHttpRequestWorker *worker);
    void getOntologyTermCallback(OAIHttpRequestWorker *worker);
    void getOntologyTermGraphCallback(OAIHttpRequestWorker *worker);
    void getOntologyTermSubgraphCallback(OAIHttpRequestWorker *worker);
    void getOntologyTermSubsetsCallback(OAIHttpRequestWorker *worker);
    void getOntologyTermsSharedAncestorCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getOntologySubsetSignal();
    void getOntologyTermSignal();
    void getOntologyTermGraphSignal();
    void getOntologyTermSubgraphSignal();
    void getOntologyTermSubsetsSignal();
    void getOntologyTermsSharedAncestorSignal();


    void getOntologySubsetSignalFull(OAIHttpRequestWorker *worker);
    void getOntologyTermSignalFull(OAIHttpRequestWorker *worker);
    void getOntologyTermGraphSignalFull(OAIHttpRequestWorker *worker);
    void getOntologyTermSubgraphSignalFull(OAIHttpRequestWorker *worker);
    void getOntologyTermSubsetsSignalFull(OAIHttpRequestWorker *worker);
    void getOntologyTermsSharedAncestorSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getOntologySubsetSignalError() instead")
    void getOntologySubsetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologySubsetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOntologyTermSignalError() instead")
    void getOntologyTermSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologyTermSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOntologyTermGraphSignalError() instead")
    void getOntologyTermGraphSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologyTermGraphSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOntologyTermSubgraphSignalError() instead")
    void getOntologyTermSubgraphSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologyTermSubgraphSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOntologyTermSubsetsSignalError() instead")
    void getOntologyTermSubsetsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologyTermSubsetsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOntologyTermsSharedAncestorSignalError() instead")
    void getOntologyTermsSharedAncestorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologyTermsSharedAncestorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getOntologySubsetSignalErrorFull() instead")
    void getOntologySubsetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologySubsetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOntologyTermSignalErrorFull() instead")
    void getOntologyTermSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologyTermSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOntologyTermGraphSignalErrorFull() instead")
    void getOntologyTermGraphSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologyTermGraphSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOntologyTermSubgraphSignalErrorFull() instead")
    void getOntologyTermSubgraphSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologyTermSubgraphSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOntologyTermSubsetsSignalErrorFull() instead")
    void getOntologyTermSubsetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologyTermSubsetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOntologyTermsSharedAncestorSignalErrorFull() instead")
    void getOntologyTermsSharedAncestorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOntologyTermsSharedAncestorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
