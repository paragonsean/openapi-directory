/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeature::OAIFeature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeature::OAIFeature() {
    this->initializeModel();
}

OAIFeature::~OAIFeature() {}

void OAIFeature::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_present_isSet = false;
    m_is_present_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFeature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeature::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_present_isValid = ::OpenAPI::fromJsonValue(m_is_present, json[QString("isPresent")]);
    m_is_present_isSet = !json[QString("isPresent")].isNull() && m_is_present_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFeature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeature::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_present_isSet) {
        obj.insert(QString("isPresent"), ::OpenAPI::toJsonValue(m_is_present));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFeature::getId() const {
    return m_id;
}
void OAIFeature::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFeature::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeature::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIFeature::isIsPresent() const {
    return m_is_present;
}
void OAIFeature::setIsPresent(const bool &is_present) {
    m_is_present = is_present;
    m_is_present_isSet = true;
}

bool OAIFeature::is_is_present_Set() const{
    return m_is_present_isSet;
}

bool OAIFeature::is_is_present_Valid() const{
    return m_is_present_isValid;
}

QString OAIFeature::getLabel() const {
    return m_label;
}
void OAIFeature::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIFeature::is_label_Set() const{
    return m_label_isSet;
}

bool OAIFeature::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIFeature::getType() const {
    return m_type;
}
void OAIFeature::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFeature::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFeature::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFeature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_present_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
