/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINlpAnnotateApi_H
#define OAI_OAINlpAnnotateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEntityAnnotationResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINlpAnnotateApi : public QObject {
    Q_OBJECT

public:
    OAINlpAnnotateApi(const int timeOut = 0);
    ~OAINlpAnnotateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content QString [optional]
    * @param[in]  include_category QList<QString> [optional]
    * @param[in]  exclude_category QList<QString> [optional]
    * @param[in]  min_length QString [optional]
    * @param[in]  longest_only bool [optional]
    * @param[in]  include_abbreviation bool [optional]
    * @param[in]  include_acronym bool [optional]
    * @param[in]  include_numbers bool [optional]
    */
    virtual void getAnnotate(const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &include_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_length = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &longest_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_abbreviation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_acronym = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_numbers = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  content QString [optional]
    * @param[in]  include_category QList<QString> [optional]
    * @param[in]  exclude_category QList<QString> [optional]
    * @param[in]  min_length QString [optional]
    * @param[in]  longest_only bool [optional]
    * @param[in]  include_abbreviation bool [optional]
    * @param[in]  include_acronym bool [optional]
    * @param[in]  include_numbers bool [optional]
    */
    virtual void getAnnotateEntities(const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &include_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_length = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &longest_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_abbreviation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_acronym = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_numbers = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  content QString [optional]
    * @param[in]  include_category QList<QString> [optional]
    * @param[in]  exclude_category QList<QString> [optional]
    * @param[in]  min_length QString [optional]
    * @param[in]  longest_only bool [optional]
    * @param[in]  include_abbreviation bool [optional]
    * @param[in]  include_acronym bool [optional]
    * @param[in]  include_numbers bool [optional]
    */
    virtual void postAnnotate(const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &include_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_length = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &longest_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_abbreviation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_acronym = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_numbers = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  content QString [optional]
    * @param[in]  include_category QList<QString> [optional]
    * @param[in]  exclude_category QList<QString> [optional]
    * @param[in]  min_length QString [optional]
    * @param[in]  longest_only bool [optional]
    * @param[in]  include_abbreviation bool [optional]
    * @param[in]  include_acronym bool [optional]
    * @param[in]  include_numbers bool [optional]
    */
    virtual void postAnnotateEntities(const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &include_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_length = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &longest_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_abbreviation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_acronym = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_numbers = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAnnotateCallback(OAIHttpRequestWorker *worker);
    void getAnnotateEntitiesCallback(OAIHttpRequestWorker *worker);
    void postAnnotateCallback(OAIHttpRequestWorker *worker);
    void postAnnotateEntitiesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAnnotateSignal();
    void getAnnotateEntitiesSignal(OAIEntityAnnotationResult summary);
    void postAnnotateSignal();
    void postAnnotateEntitiesSignal(OAIEntityAnnotationResult summary);


    void getAnnotateSignalFull(OAIHttpRequestWorker *worker);
    void getAnnotateEntitiesSignalFull(OAIHttpRequestWorker *worker, OAIEntityAnnotationResult summary);
    void postAnnotateSignalFull(OAIHttpRequestWorker *worker);
    void postAnnotateEntitiesSignalFull(OAIHttpRequestWorker *worker, OAIEntityAnnotationResult summary);

    Q_DECL_DEPRECATED_X("Use getAnnotateSignalError() instead")
    void getAnnotateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotateEntitiesSignalError() instead")
    void getAnnotateEntitiesSignalE(OAIEntityAnnotationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotateEntitiesSignalError(OAIEntityAnnotationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAnnotateSignalError() instead")
    void postAnnotateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postAnnotateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAnnotateEntitiesSignalError() instead")
    void postAnnotateEntitiesSignalE(OAIEntityAnnotationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAnnotateEntitiesSignalError(OAIEntityAnnotationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAnnotateSignalErrorFull() instead")
    void getAnnotateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotateEntitiesSignalErrorFull() instead")
    void getAnnotateEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotateEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAnnotateSignalErrorFull() instead")
    void postAnnotateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAnnotateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAnnotateEntitiesSignalErrorFull() instead")
    void postAnnotateEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAnnotateEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
