/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVariant_set.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVariant_set::OAIVariant_set(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVariant_set::OAIVariant_set() {
    this->initializeModel();
}

OAIVariant_set::~OAIVariant_set() {}

void OAIVariant_set::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_pub_date_isSet = false;
    m_pub_date_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIVariant_set::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVariant_set::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_pub_date_isValid = ::OpenAPI::fromJsonValue(m_pub_date, json[QString("pub_date")]);
    m_pub_date_isSet = !json[QString("pub_date")].isNull() && m_pub_date_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIVariant_set::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVariant_set::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_pub_date_isSet) {
        obj.insert(QString("pub_date"), ::OpenAPI::toJsonValue(m_pub_date));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIVariant_set::getBody() const {
    return m_body;
}
void OAIVariant_set::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIVariant_set::is_body_Set() const{
    return m_body_isSet;
}

bool OAIVariant_set::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIVariant_set::getCategory() const {
    return m_category;
}
void OAIVariant_set::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIVariant_set::is_category_Set() const{
    return m_category_isSet;
}

bool OAIVariant_set::is_category_Valid() const{
    return m_category_isValid;
}

qint32 OAIVariant_set::getCategoryId() const {
    return m_category_id;
}
void OAIVariant_set::setCategoryId(const qint32 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIVariant_set::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIVariant_set::is_category_id_Valid() const{
    return m_category_id_isValid;
}

qint32 OAIVariant_set::getId() const {
    return m_id;
}
void OAIVariant_set::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVariant_set::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVariant_set::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIVariant_set::getPubDate() const {
    return m_pub_date;
}
void OAIVariant_set::setPubDate(const QDateTime &pub_date) {
    m_pub_date = pub_date;
    m_pub_date_isSet = true;
}

bool OAIVariant_set::is_pub_date_Set() const{
    return m_pub_date_isSet;
}

bool OAIVariant_set::is_pub_date_Valid() const{
    return m_pub_date_isValid;
}

QString OAIVariant_set::getTitle() const {
    return m_title;
}
void OAIVariant_set::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIVariant_set::is_title_Set() const{
    return m_title_isSet;
}

bool OAIVariant_set::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIVariant_set::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pub_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVariant_set::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
