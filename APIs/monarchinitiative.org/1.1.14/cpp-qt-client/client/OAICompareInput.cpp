/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompareInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompareInput::OAICompareInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompareInput::OAICompareInput() {
    this->initializeModel();
}

OAICompareInput::~OAICompareInput() {}

void OAICompareInput::initializeModel() {

    m_query_ids_isSet = false;
    m_query_ids_isValid = false;

    m_reference_ids_isSet = false;
    m_reference_ids_isValid = false;
}

void OAICompareInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompareInput::fromJsonObject(QJsonObject json) {

    if(json["query_ids"].isArray()){
        auto arr = json["query_ids"].toArray();
        m_query_ids_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_query_ids_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_query_ids_isSet = !jval.isNull() && m_query_ids_isValid;
                m_query_ids.push_back(item);
            }
        }
    }

    m_reference_ids_isValid = ::OpenAPI::fromJsonValue(m_reference_ids, json[QString("reference_ids")]);
    m_reference_ids_isSet = !json[QString("reference_ids")].isNull() && m_reference_ids_isValid;
}

QString OAICompareInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompareInput::asJsonObject() const {
    QJsonObject obj;
    if (m_query_ids.size() > 0) {
        
        obj.insert(QString("query_ids"), toJsonValue(m_query_ids));
    }
    if (m_reference_ids.size() > 0) {
        obj.insert(QString("reference_ids"), ::OpenAPI::toJsonValue(m_reference_ids));
    }
    return obj;
}

QList<QList<QString>> OAICompareInput::getQueryIds() const {
    return m_query_ids;
}
void OAICompareInput::setQueryIds(const QList<QList<QString>> &query_ids) {
    m_query_ids = query_ids;
    m_query_ids_isSet = true;
}

bool OAICompareInput::is_query_ids_Set() const{
    return m_query_ids_isSet;
}

bool OAICompareInput::is_query_ids_Valid() const{
    return m_query_ids_isValid;
}

QList<QString> OAICompareInput::getReferenceIds() const {
    return m_reference_ids;
}
void OAICompareInput::setReferenceIds(const QList<QString> &reference_ids) {
    m_reference_ids = reference_ids;
    m_reference_ids_isSet = true;
}

bool OAICompareInput::is_reference_ids_Set() const{
    return m_reference_ids_isSet;
}

bool OAICompareInput::is_reference_ids_Valid() const{
    return m_reference_ids_isValid;
}

bool OAICompareInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompareInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
