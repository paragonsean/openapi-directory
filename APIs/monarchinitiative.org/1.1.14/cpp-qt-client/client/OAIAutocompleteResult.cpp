/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutocompleteResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutocompleteResult::OAIAutocompleteResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutocompleteResult::OAIAutocompleteResult() {
    this->initializeModel();
}

OAIAutocompleteResult::~OAIAutocompleteResult() {}

void OAIAutocompleteResult::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_equivalent_ids_isSet = false;
    m_equivalent_ids_isValid = false;

    m_has_highlight_isSet = false;
    m_has_highlight_isValid = false;

    m_highlight_isSet = false;
    m_highlight_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_taxon_isSet = false;
    m_taxon_isValid = false;

    m_taxon_label_isSet = false;
    m_taxon_label_isValid = false;
}

void OAIAutocompleteResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutocompleteResult::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_equivalent_ids_isValid = ::OpenAPI::fromJsonValue(m_equivalent_ids, json[QString("equivalent_ids")]);
    m_equivalent_ids_isSet = !json[QString("equivalent_ids")].isNull() && m_equivalent_ids_isValid;

    m_has_highlight_isValid = ::OpenAPI::fromJsonValue(m_has_highlight, json[QString("has_highlight")]);
    m_has_highlight_isSet = !json[QString("has_highlight")].isNull() && m_has_highlight_isValid;

    m_highlight_isValid = ::OpenAPI::fromJsonValue(m_highlight, json[QString("highlight")]);
    m_highlight_isSet = !json[QString("highlight")].isNull() && m_highlight_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_taxon_isValid = ::OpenAPI::fromJsonValue(m_taxon, json[QString("taxon")]);
    m_taxon_isSet = !json[QString("taxon")].isNull() && m_taxon_isValid;

    m_taxon_label_isValid = ::OpenAPI::fromJsonValue(m_taxon_label, json[QString("taxon_label")]);
    m_taxon_label_isSet = !json[QString("taxon_label")].isNull() && m_taxon_label_isValid;
}

QString OAIAutocompleteResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutocompleteResult::asJsonObject() const {
    QJsonObject obj;
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_equivalent_ids.size() > 0) {
        obj.insert(QString("equivalent_ids"), ::OpenAPI::toJsonValue(m_equivalent_ids));
    }
    if (m_has_highlight_isSet) {
        obj.insert(QString("has_highlight"), ::OpenAPI::toJsonValue(m_has_highlight));
    }
    if (m_highlight_isSet) {
        obj.insert(QString("highlight"), ::OpenAPI::toJsonValue(m_highlight));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label.size() > 0) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_match_isSet) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_taxon_isSet) {
        obj.insert(QString("taxon"), ::OpenAPI::toJsonValue(m_taxon));
    }
    if (m_taxon_label_isSet) {
        obj.insert(QString("taxon_label"), ::OpenAPI::toJsonValue(m_taxon_label));
    }
    return obj;
}

QList<QString> OAIAutocompleteResult::getCategory() const {
    return m_category;
}
void OAIAutocompleteResult::setCategory(const QList<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAutocompleteResult::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAutocompleteResult::is_category_Valid() const{
    return m_category_isValid;
}

QList<QString> OAIAutocompleteResult::getEquivalentIds() const {
    return m_equivalent_ids;
}
void OAIAutocompleteResult::setEquivalentIds(const QList<QString> &equivalent_ids) {
    m_equivalent_ids = equivalent_ids;
    m_equivalent_ids_isSet = true;
}

bool OAIAutocompleteResult::is_equivalent_ids_Set() const{
    return m_equivalent_ids_isSet;
}

bool OAIAutocompleteResult::is_equivalent_ids_Valid() const{
    return m_equivalent_ids_isValid;
}

bool OAIAutocompleteResult::isHasHighlight() const {
    return m_has_highlight;
}
void OAIAutocompleteResult::setHasHighlight(const bool &has_highlight) {
    m_has_highlight = has_highlight;
    m_has_highlight_isSet = true;
}

bool OAIAutocompleteResult::is_has_highlight_Set() const{
    return m_has_highlight_isSet;
}

bool OAIAutocompleteResult::is_has_highlight_Valid() const{
    return m_has_highlight_isValid;
}

QString OAIAutocompleteResult::getHighlight() const {
    return m_highlight;
}
void OAIAutocompleteResult::setHighlight(const QString &highlight) {
    m_highlight = highlight;
    m_highlight_isSet = true;
}

bool OAIAutocompleteResult::is_highlight_Set() const{
    return m_highlight_isSet;
}

bool OAIAutocompleteResult::is_highlight_Valid() const{
    return m_highlight_isValid;
}

QString OAIAutocompleteResult::getId() const {
    return m_id;
}
void OAIAutocompleteResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAutocompleteResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAutocompleteResult::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIAutocompleteResult::getLabel() const {
    return m_label;
}
void OAIAutocompleteResult::setLabel(const QList<QString> &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIAutocompleteResult::is_label_Set() const{
    return m_label_isSet;
}

bool OAIAutocompleteResult::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIAutocompleteResult::getMatch() const {
    return m_match;
}
void OAIAutocompleteResult::setMatch(const QString &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIAutocompleteResult::is_match_Set() const{
    return m_match_isSet;
}

bool OAIAutocompleteResult::is_match_Valid() const{
    return m_match_isValid;
}

QString OAIAutocompleteResult::getTaxon() const {
    return m_taxon;
}
void OAIAutocompleteResult::setTaxon(const QString &taxon) {
    m_taxon = taxon;
    m_taxon_isSet = true;
}

bool OAIAutocompleteResult::is_taxon_Set() const{
    return m_taxon_isSet;
}

bool OAIAutocompleteResult::is_taxon_Valid() const{
    return m_taxon_isValid;
}

QString OAIAutocompleteResult::getTaxonLabel() const {
    return m_taxon_label;
}
void OAIAutocompleteResult::setTaxonLabel(const QString &taxon_label) {
    m_taxon_label = taxon_label;
    m_taxon_label_isSet = true;
}

bool OAIAutocompleteResult::is_taxon_label_Set() const{
    return m_taxon_label_isSet;
}

bool OAIAutocompleteResult::is_taxon_label_Valid() const{
    return m_taxon_label_isValid;
}

bool OAIAutocompleteResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_equivalent_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_highlight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxon_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutocompleteResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
