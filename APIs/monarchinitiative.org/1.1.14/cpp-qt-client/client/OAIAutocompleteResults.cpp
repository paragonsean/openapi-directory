/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutocompleteResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutocompleteResults::OAIAutocompleteResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutocompleteResults::OAIAutocompleteResults() {
    this->initializeModel();
}

OAIAutocompleteResults::~OAIAutocompleteResults() {}

void OAIAutocompleteResults::initializeModel() {

    m_docs_isSet = false;
    m_docs_isValid = false;
}

void OAIAutocompleteResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutocompleteResults::fromJsonObject(QJsonObject json) {

    m_docs_isValid = ::OpenAPI::fromJsonValue(m_docs, json[QString("docs")]);
    m_docs_isSet = !json[QString("docs")].isNull() && m_docs_isValid;
}

QString OAIAutocompleteResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutocompleteResults::asJsonObject() const {
    QJsonObject obj;
    if (m_docs.size() > 0) {
        obj.insert(QString("docs"), ::OpenAPI::toJsonValue(m_docs));
    }
    return obj;
}

QList<OAIAutocompleteResult> OAIAutocompleteResults::getDocs() const {
    return m_docs;
}
void OAIAutocompleteResults::setDocs(const QList<OAIAutocompleteResult> &docs) {
    m_docs = docs;
    m_docs_isSet = true;
}

bool OAIAutocompleteResults::is_docs_Set() const{
    return m_docs_isSet;
}

bool OAIAutocompleteResults::is_docs_Valid() const{
    return m_docs_isValid;
}

bool OAIAutocompleteResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_docs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutocompleteResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
