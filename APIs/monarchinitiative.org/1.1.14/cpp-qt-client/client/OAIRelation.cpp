/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelation::OAIRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelation::OAIRelation() {
    this->initializeModel();
}

OAIRelation::~OAIRelation() {}

void OAIRelation::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_iri_isSet = false;
    m_iri_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_consider_isSet = false;
    m_consider_isValid = false;

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_replaced_by_isSet = false;
    m_replaced_by_isValid = false;

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelation::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_iri_isValid = ::OpenAPI::fromJsonValue(m_iri, json[QString("iri")]);
    m_iri_isSet = !json[QString("iri")].isNull() && m_iri_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_consider_isValid = ::OpenAPI::fromJsonValue(m_consider, json[QString("consider")]);
    m_consider_isSet = !json[QString("consider")].isNull() && m_consider_isValid;

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_replaced_by_isValid = ::OpenAPI::fromJsonValue(m_replaced_by, json[QString("replaced_by")]);
    m_replaced_by_isSet = !json[QString("replaced_by")].isNull() && m_replaced_by_isValid;

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("synonyms")]);
    m_synonyms_isSet = !json[QString("synonyms")].isNull() && m_synonyms_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_iri_isSet) {
        obj.insert(QString("iri"), ::OpenAPI::toJsonValue(m_iri));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_consider.size() > 0) {
        obj.insert(QString("consider"), ::OpenAPI::toJsonValue(m_consider));
    }
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_replaced_by.size() > 0) {
        obj.insert(QString("replaced_by"), ::OpenAPI::toJsonValue(m_replaced_by));
    }
    if (m_synonyms.size() > 0) {
        obj.insert(QString("synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

QList<QString> OAIRelation::getCategory() const {
    return m_category;
}
void OAIRelation::setCategory(const QList<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIRelation::is_category_Set() const{
    return m_category_isSet;
}

bool OAIRelation::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIRelation::getId() const {
    return m_id;
}
void OAIRelation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRelation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRelation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRelation::getIri() const {
    return m_iri;
}
void OAIRelation::setIri(const QString &iri) {
    m_iri = iri;
    m_iri_isSet = true;
}

bool OAIRelation::is_iri_Set() const{
    return m_iri_isSet;
}

bool OAIRelation::is_iri_Valid() const{
    return m_iri_isValid;
}

QString OAIRelation::getLabel() const {
    return m_label;
}
void OAIRelation::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIRelation::is_label_Set() const{
    return m_label_isSet;
}

bool OAIRelation::is_label_Valid() const{
    return m_label_isValid;
}

QList<QString> OAIRelation::getConsider() const {
    return m_consider;
}
void OAIRelation::setConsider(const QList<QString> &consider) {
    m_consider = consider;
    m_consider_isSet = true;
}

bool OAIRelation::is_consider_Set() const{
    return m_consider_isSet;
}

bool OAIRelation::is_consider_Valid() const{
    return m_consider_isValid;
}

bool OAIRelation::isDeprecated() const {
    return m_deprecated;
}
void OAIRelation::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIRelation::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIRelation::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAIRelation::getDescription() const {
    return m_description;
}
void OAIRelation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRelation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRelation::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIRelation::getReplacedBy() const {
    return m_replaced_by;
}
void OAIRelation::setReplacedBy(const QList<QString> &replaced_by) {
    m_replaced_by = replaced_by;
    m_replaced_by_isSet = true;
}

bool OAIRelation::is_replaced_by_Set() const{
    return m_replaced_by_isSet;
}

bool OAIRelation::is_replaced_by_Valid() const{
    return m_replaced_by_isValid;
}

QList<OAISynonymPropertyValue> OAIRelation::getSynonyms() const {
    return m_synonyms;
}
void OAIRelation::setSynonyms(const QList<OAISynonymPropertyValue> &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAIRelation::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAIRelation::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

QList<QString> OAIRelation::getTypes() const {
    return m_types;
}
void OAIRelation::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIRelation::is_types_Set() const{
    return m_types_isSet;
}

bool OAIRelation::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replaced_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_synonyms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
