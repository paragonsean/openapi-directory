/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISufficiencyOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISufficiencyOutput::OAISufficiencyOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISufficiencyOutput::OAISufficiencyOutput() {
    this->initializeModel();
}

OAISufficiencyOutput::~OAISufficiencyOutput() {}

void OAISufficiencyOutput::initializeModel() {

    m_categorical_score_isSet = false;
    m_categorical_score_isValid = false;

    m_scaled_score_isSet = false;
    m_scaled_score_isValid = false;

    m_simple_score_isSet = false;
    m_simple_score_isValid = false;
}

void OAISufficiencyOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISufficiencyOutput::fromJsonObject(QJsonObject json) {

    m_categorical_score_isValid = ::OpenAPI::fromJsonValue(m_categorical_score, json[QString("categorical_score")]);
    m_categorical_score_isSet = !json[QString("categorical_score")].isNull() && m_categorical_score_isValid;

    m_scaled_score_isValid = ::OpenAPI::fromJsonValue(m_scaled_score, json[QString("scaled_score")]);
    m_scaled_score_isSet = !json[QString("scaled_score")].isNull() && m_scaled_score_isValid;

    m_simple_score_isValid = ::OpenAPI::fromJsonValue(m_simple_score, json[QString("simple_score")]);
    m_simple_score_isSet = !json[QString("simple_score")].isNull() && m_simple_score_isValid;
}

QString OAISufficiencyOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISufficiencyOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_categorical_score_isSet) {
        obj.insert(QString("categorical_score"), ::OpenAPI::toJsonValue(m_categorical_score));
    }
    if (m_scaled_score_isSet) {
        obj.insert(QString("scaled_score"), ::OpenAPI::toJsonValue(m_scaled_score));
    }
    if (m_simple_score_isSet) {
        obj.insert(QString("simple_score"), ::OpenAPI::toJsonValue(m_simple_score));
    }
    return obj;
}

double OAISufficiencyOutput::getCategoricalScore() const {
    return m_categorical_score;
}
void OAISufficiencyOutput::setCategoricalScore(const double &categorical_score) {
    m_categorical_score = categorical_score;
    m_categorical_score_isSet = true;
}

bool OAISufficiencyOutput::is_categorical_score_Set() const{
    return m_categorical_score_isSet;
}

bool OAISufficiencyOutput::is_categorical_score_Valid() const{
    return m_categorical_score_isValid;
}

double OAISufficiencyOutput::getScaledScore() const {
    return m_scaled_score;
}
void OAISufficiencyOutput::setScaledScore(const double &scaled_score) {
    m_scaled_score = scaled_score;
    m_scaled_score_isSet = true;
}

bool OAISufficiencyOutput::is_scaled_score_Set() const{
    return m_scaled_score_isSet;
}

bool OAISufficiencyOutput::is_scaled_score_Valid() const{
    return m_scaled_score_isValid;
}

double OAISufficiencyOutput::getSimpleScore() const {
    return m_simple_score;
}
void OAISufficiencyOutput::setSimpleScore(const double &simple_score) {
    m_simple_score = simple_score;
    m_simple_score_isSet = true;
}

bool OAISufficiencyOutput::is_simple_score_Set() const{
    return m_simple_score_isSet;
}

bool OAISufficiencyOutput::is_simple_score_Valid() const{
    return m_simple_score_isValid;
}

bool OAISufficiencyOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categorical_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaled_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISufficiencyOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
