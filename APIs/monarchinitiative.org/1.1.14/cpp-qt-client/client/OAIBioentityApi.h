/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBioentityApi_H
#define OAI_OAIBioentityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociation.h"
#include "OAIAssociationResults.h"
#include "OAIBioObject.h"
#include "OAID2PAssociationResults.h"
#include "OAINamedObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBioentityApi : public QObject {
    Q_OBJECT

public:
    OAIBioentityApi(const int timeOut = 0);
    ~OAIBioentityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getAnatomyGeneAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  taxid QString [required]
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getAnatomyGeneByTaxonAssociations(const QString &taxid, const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getCaseDiseaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getCaseGenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getCaseModelAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getCasePhenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getCaseVariantAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getDiseaseCaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  association_type QString [optional]
    */
    virtual void getDiseaseGeneAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &association_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getDiseaseGenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getDiseaseModelAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  taxon QString [required]
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    Q_DECL_DEPRECATED virtual void getDiseaseModelTaxonAssociations(const QString &taxon, const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getDiseasePathwayAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getDiseasePhenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getDiseasePublicationAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getDiseaseSubstanceAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getDiseaseVariantAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  start qint32 [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  evidence QList<QString> [optional]
    */
    virtual void getFunctionAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &evidence = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  relationship_type QString [optional]
    */
    virtual void getFunctionGeneAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &relationship_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  start qint32 [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  evidence QList<QString> [optional]
    */
    virtual void getFunctionPublicationAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &evidence = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  start qint32 [optional]
    * @param[in]  rows qint32 [optional]
    * @param[in]  evidence QList<QString> [optional]
    */
    virtual void getFunctionTaxonAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &evidence = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGeneAnatomyAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getGeneCaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  association_type QString [optional]
    */
    virtual void getGeneDiseaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &association_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGeneExpressionAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getGeneFunctionAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGeneGenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  homology_type QString [optional]
    * @param[in]  direct_taxon bool [optional]
    */
    virtual void getGeneHomologAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &homology_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGeneInteractions(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGeneModelAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGeneOrthologDiseaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGeneOrthologPhenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGenePathwayAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGenePhenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGenePublicationAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGeneVariantAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGenericAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getGenericObject(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  get_association_counts bool [optional]
    * @param[in]  distinct_counts bool [optional]
    */
    virtual void getGenericObjectByType(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &get_association_counts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &distinct_counts = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getGenotypeCaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGenotypeDiseaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGenotypeGeneAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGenotypeGenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGenotypeModelAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGenotypePhenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGenotypePublicationAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getGenotypeVariantAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  relationship_type QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getGotermGeneAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relationship_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getModelCaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getModelDiseaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getModelGeneAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getModelGenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getModelPhenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getModelPublicationAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getModelVariantAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPathwayDiseaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPathwayGeneAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPathwayPhenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getPhenotypeAnatomyAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getPhenotypeCaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPhenotypeDiseaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPhenotypeGeneAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  taxid QString [required]
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    Q_DECL_DEPRECATED virtual void getPhenotypeGeneByTaxonAssociations(const QString &taxid, const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPhenotypeGenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPhenotypePathwayAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPhenotypePublicationAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPhenotypeVariantAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPublicationDiseaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPublicationGeneAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPublicationGenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPublicationModelAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPublicationPhenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPublicationVariantAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getSubstanceParticipantInAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getSubstanceRoleAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getSubstanceTreatsAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getVariantCaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getVariantDiseaseAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getVariantGeneAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getVariantGenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    */
    virtual void getVariantModelAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getVariantPhenotypeAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  facet bool [optional]
    * @param[in]  facet_fields QList<QString> [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  fetch_objects bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  slim QList<QString> [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  taxon QList<QString> [optional]
    * @param[in]  direct_taxon bool [optional]
    * @param[in]  relation QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getVariantPublicationAssociations(const QString &id, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &facet = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fetch_objects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &slim = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxon = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &direct_taxon = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAnatomyGeneAssociationsCallback(OAIHttpRequestWorker *worker);
    void getAnatomyGeneByTaxonAssociationsCallback(OAIHttpRequestWorker *worker);
    void getCaseDiseaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getCaseGenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getCaseModelAssociationsCallback(OAIHttpRequestWorker *worker);
    void getCasePhenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getCaseVariantAssociationsCallback(OAIHttpRequestWorker *worker);
    void getDiseaseCaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getDiseaseGeneAssociationsCallback(OAIHttpRequestWorker *worker);
    void getDiseaseGenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getDiseaseModelAssociationsCallback(OAIHttpRequestWorker *worker);
    void getDiseaseModelTaxonAssociationsCallback(OAIHttpRequestWorker *worker);
    void getDiseasePathwayAssociationsCallback(OAIHttpRequestWorker *worker);
    void getDiseasePhenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getDiseasePublicationAssociationsCallback(OAIHttpRequestWorker *worker);
    void getDiseaseSubstanceAssociationsCallback(OAIHttpRequestWorker *worker);
    void getDiseaseVariantAssociationsCallback(OAIHttpRequestWorker *worker);
    void getFunctionAssociationsCallback(OAIHttpRequestWorker *worker);
    void getFunctionGeneAssociationsCallback(OAIHttpRequestWorker *worker);
    void getFunctionPublicationAssociationsCallback(OAIHttpRequestWorker *worker);
    void getFunctionTaxonAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGeneAnatomyAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGeneCaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGeneDiseaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGeneExpressionAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGeneFunctionAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGeneGenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGeneHomologAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGeneInteractionsCallback(OAIHttpRequestWorker *worker);
    void getGeneModelAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGeneOrthologDiseaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGeneOrthologPhenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenePathwayAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenePhenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenePublicationAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGeneVariantAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenericAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenericObjectCallback(OAIHttpRequestWorker *worker);
    void getGenericObjectByTypeCallback(OAIHttpRequestWorker *worker);
    void getGenotypeCaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenotypeDiseaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenotypeGeneAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenotypeGenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenotypeModelAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenotypePhenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenotypePublicationAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGenotypeVariantAssociationsCallback(OAIHttpRequestWorker *worker);
    void getGotermGeneAssociationsCallback(OAIHttpRequestWorker *worker);
    void getModelCaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getModelDiseaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getModelGeneAssociationsCallback(OAIHttpRequestWorker *worker);
    void getModelGenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getModelPhenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getModelPublicationAssociationsCallback(OAIHttpRequestWorker *worker);
    void getModelVariantAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPathwayDiseaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPathwayGeneAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPathwayPhenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPhenotypeAnatomyAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPhenotypeCaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPhenotypeDiseaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPhenotypeGeneAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPhenotypeGeneByTaxonAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPhenotypeGenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPhenotypePathwayAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPhenotypePublicationAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPhenotypeVariantAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPublicationDiseaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPublicationGeneAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPublicationGenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPublicationModelAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPublicationPhenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getPublicationVariantAssociationsCallback(OAIHttpRequestWorker *worker);
    void getSubstanceParticipantInAssociationsCallback(OAIHttpRequestWorker *worker);
    void getSubstanceRoleAssociationsCallback(OAIHttpRequestWorker *worker);
    void getSubstanceTreatsAssociationsCallback(OAIHttpRequestWorker *worker);
    void getVariantCaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getVariantDiseaseAssociationsCallback(OAIHttpRequestWorker *worker);
    void getVariantGeneAssociationsCallback(OAIHttpRequestWorker *worker);
    void getVariantGenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getVariantModelAssociationsCallback(OAIHttpRequestWorker *worker);
    void getVariantPhenotypeAssociationsCallback(OAIHttpRequestWorker *worker);
    void getVariantPublicationAssociationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAnatomyGeneAssociationsSignal(OAIAssociationResults summary);
    void getAnatomyGeneByTaxonAssociationsSignal();
    void getCaseDiseaseAssociationsSignal(OAIAssociationResults summary);
    void getCaseGenotypeAssociationsSignal(OAIAssociationResults summary);
    void getCaseModelAssociationsSignal(OAIAssociationResults summary);
    void getCasePhenotypeAssociationsSignal(OAIAssociationResults summary);
    void getCaseVariantAssociationsSignal(OAIAssociationResults summary);
    void getDiseaseCaseAssociationsSignal(OAIAssociationResults summary);
    void getDiseaseGeneAssociationsSignal(OAIAssociationResults summary);
    void getDiseaseGenotypeAssociationsSignal(OAIAssociationResults summary);
    void getDiseaseModelAssociationsSignal(OAIAssociationResults summary);
    void getDiseaseModelTaxonAssociationsSignal(OAIAssociationResults summary);
    void getDiseasePathwayAssociationsSignal(OAIAssociationResults summary);
    void getDiseasePhenotypeAssociationsSignal(OAID2PAssociationResults summary);
    void getDiseasePublicationAssociationsSignal(OAIAssociationResults summary);
    void getDiseaseSubstanceAssociationsSignal();
    void getDiseaseVariantAssociationsSignal(OAIAssociationResults summary);
    void getFunctionAssociationsSignal();
    void getFunctionGeneAssociationsSignal(OAIAssociationResults summary);
    void getFunctionPublicationAssociationsSignal();
    void getFunctionTaxonAssociationsSignal();
    void getGeneAnatomyAssociationsSignal(OAIAssociationResults summary);
    void getGeneCaseAssociationsSignal(OAIAssociationResults summary);
    void getGeneDiseaseAssociationsSignal(OAIAssociationResults summary);
    void getGeneExpressionAssociationsSignal(OAIAssociationResults summary);
    void getGeneFunctionAssociationsSignal(OAIAssociationResults summary);
    void getGeneGenotypeAssociationsSignal(OAIAssociationResults summary);
    void getGeneHomologAssociationsSignal(OAIAssociationResults summary);
    void getGeneInteractionsSignal(OAIAssociationResults summary);
    void getGeneModelAssociationsSignal(OAIAssociationResults summary);
    void getGeneOrthologDiseaseAssociationsSignal(OAIAssociationResults summary);
    void getGeneOrthologPhenotypeAssociationsSignal(OAIAssociationResults summary);
    void getGenePathwayAssociationsSignal(OAIAssociationResults summary);
    void getGenePhenotypeAssociationsSignal(OAIAssociationResults summary);
    void getGenePublicationAssociationsSignal(OAIAssociationResults summary);
    void getGeneVariantAssociationsSignal(OAIAssociationResults summary);
    void getGenericAssociationsSignal(OAIAssociationResults summary);
    void getGenericObjectSignal(OAIBioObject summary);
    void getGenericObjectByTypeSignal();
    void getGenotypeCaseAssociationsSignal(OAIAssociationResults summary);
    void getGenotypeDiseaseAssociationsSignal(OAIAssociationResults summary);
    void getGenotypeGeneAssociationsSignal(OAIAssociationResults summary);
    void getGenotypeGenotypeAssociationsSignal(OAIAssociationResults summary);
    void getGenotypeModelAssociationsSignal(OAIAssociationResults summary);
    void getGenotypePhenotypeAssociationsSignal(OAIAssociationResults summary);
    void getGenotypePublicationAssociationsSignal(OAIAssociationResults summary);
    void getGenotypeVariantAssociationsSignal(OAIAssociationResults summary);
    void getGotermGeneAssociationsSignal(OAIAssociationResults summary);
    void getModelCaseAssociationsSignal(OAIAssociationResults summary);
    void getModelDiseaseAssociationsSignal(OAIAssociationResults summary);
    void getModelGeneAssociationsSignal(OAIAssociationResults summary);
    void getModelGenotypeAssociationsSignal(OAIAssociationResults summary);
    void getModelPhenotypeAssociationsSignal(OAIAssociationResults summary);
    void getModelPublicationAssociationsSignal(OAIAssociationResults summary);
    void getModelVariantAssociationsSignal(OAIAssociationResults summary);
    void getPathwayDiseaseAssociationsSignal(OAIAssociationResults summary);
    void getPathwayGeneAssociationsSignal(OAIAssociationResults summary);
    void getPathwayPhenotypeAssociationsSignal(OAIAssociationResults summary);
    void getPhenotypeAnatomyAssociationsSignal(QList<OAINamedObject> summary);
    void getPhenotypeCaseAssociationsSignal(OAIAssociationResults summary);
    void getPhenotypeDiseaseAssociationsSignal(OAID2PAssociationResults summary);
    void getPhenotypeGeneAssociationsSignal(OAIAssociationResults summary);
    void getPhenotypeGeneByTaxonAssociationsSignal();
    void getPhenotypeGenotypeAssociationsSignal(OAIAssociationResults summary);
    void getPhenotypePathwayAssociationsSignal(OAIAssociationResults summary);
    void getPhenotypePublicationAssociationsSignal(OAIAssociationResults summary);
    void getPhenotypeVariantAssociationsSignal(OAIAssociationResults summary);
    void getPublicationDiseaseAssociationsSignal(OAIAssociationResults summary);
    void getPublicationGeneAssociationsSignal(OAIAssociationResults summary);
    void getPublicationGenotypeAssociationsSignal(OAIAssociationResults summary);
    void getPublicationModelAssociationsSignal(OAIAssociationResults summary);
    void getPublicationPhenotypeAssociationsSignal(OAIAssociationResults summary);
    void getPublicationVariantAssociationsSignal(OAIAssociationResults summary);
    void getSubstanceParticipantInAssociationsSignal(QList<OAIAssociation> summary);
    void getSubstanceRoleAssociationsSignal(QList<OAIAssociation> summary);
    void getSubstanceTreatsAssociationsSignal();
    void getVariantCaseAssociationsSignal(OAIAssociationResults summary);
    void getVariantDiseaseAssociationsSignal(OAIAssociationResults summary);
    void getVariantGeneAssociationsSignal(OAIAssociationResults summary);
    void getVariantGenotypeAssociationsSignal(OAIAssociationResults summary);
    void getVariantModelAssociationsSignal(OAIAssociationResults summary);
    void getVariantPhenotypeAssociationsSignal(OAIAssociationResults summary);
    void getVariantPublicationAssociationsSignal(OAIAssociationResults summary);


    void getAnatomyGeneAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getAnatomyGeneByTaxonAssociationsSignalFull(OAIHttpRequestWorker *worker);
    void getCaseDiseaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getCaseGenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getCaseModelAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getCasePhenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getCaseVariantAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getDiseaseCaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getDiseaseGeneAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getDiseaseGenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getDiseaseModelAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getDiseaseModelTaxonAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getDiseasePathwayAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getDiseasePhenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAID2PAssociationResults summary);
    void getDiseasePublicationAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getDiseaseSubstanceAssociationsSignalFull(OAIHttpRequestWorker *worker);
    void getDiseaseVariantAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getFunctionAssociationsSignalFull(OAIHttpRequestWorker *worker);
    void getFunctionGeneAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getFunctionPublicationAssociationsSignalFull(OAIHttpRequestWorker *worker);
    void getFunctionTaxonAssociationsSignalFull(OAIHttpRequestWorker *worker);
    void getGeneAnatomyAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGeneCaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGeneDiseaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGeneExpressionAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGeneFunctionAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGeneGenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGeneHomologAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGeneInteractionsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGeneModelAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGeneOrthologDiseaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGeneOrthologPhenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenePathwayAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenePhenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenePublicationAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGeneVariantAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenericAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenericObjectSignalFull(OAIHttpRequestWorker *worker, OAIBioObject summary);
    void getGenericObjectByTypeSignalFull(OAIHttpRequestWorker *worker);
    void getGenotypeCaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenotypeDiseaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenotypeGeneAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenotypeGenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenotypeModelAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenotypePhenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenotypePublicationAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGenotypeVariantAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getGotermGeneAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getModelCaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getModelDiseaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getModelGeneAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getModelGenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getModelPhenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getModelPublicationAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getModelVariantAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPathwayDiseaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPathwayGeneAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPathwayPhenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPhenotypeAnatomyAssociationsSignalFull(OAIHttpRequestWorker *worker, QList<OAINamedObject> summary);
    void getPhenotypeCaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPhenotypeDiseaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAID2PAssociationResults summary);
    void getPhenotypeGeneAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPhenotypeGeneByTaxonAssociationsSignalFull(OAIHttpRequestWorker *worker);
    void getPhenotypeGenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPhenotypePathwayAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPhenotypePublicationAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPhenotypeVariantAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPublicationDiseaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPublicationGeneAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPublicationGenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPublicationModelAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPublicationPhenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getPublicationVariantAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getSubstanceParticipantInAssociationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociation> summary);
    void getSubstanceRoleAssociationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociation> summary);
    void getSubstanceTreatsAssociationsSignalFull(OAIHttpRequestWorker *worker);
    void getVariantCaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getVariantDiseaseAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getVariantGeneAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getVariantGenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getVariantModelAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getVariantPhenotypeAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);
    void getVariantPublicationAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIAssociationResults summary);

    Q_DECL_DEPRECATED_X("Use getAnatomyGeneAssociationsSignalError() instead")
    void getAnatomyGeneAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnatomyGeneAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnatomyGeneByTaxonAssociationsSignalError() instead")
    void getAnatomyGeneByTaxonAssociationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAnatomyGeneByTaxonAssociationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCaseDiseaseAssociationsSignalError() instead")
    void getCaseDiseaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCaseDiseaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCaseGenotypeAssociationsSignalError() instead")
    void getCaseGenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCaseGenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCaseModelAssociationsSignalError() instead")
    void getCaseModelAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCaseModelAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCasePhenotypeAssociationsSignalError() instead")
    void getCasePhenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCasePhenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCaseVariantAssociationsSignalError() instead")
    void getCaseVariantAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCaseVariantAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseCaseAssociationsSignalError() instead")
    void getDiseaseCaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseCaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseGeneAssociationsSignalError() instead")
    void getDiseaseGeneAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseGeneAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseGenotypeAssociationsSignalError() instead")
    void getDiseaseGenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseGenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseModelAssociationsSignalError() instead")
    void getDiseaseModelAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseModelAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseModelTaxonAssociationsSignalError() instead")
    void getDiseaseModelTaxonAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseModelTaxonAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseasePathwayAssociationsSignalError() instead")
    void getDiseasePathwayAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseasePathwayAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseasePhenotypeAssociationsSignalError() instead")
    void getDiseasePhenotypeAssociationsSignalE(OAID2PAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseasePhenotypeAssociationsSignalError(OAID2PAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseasePublicationAssociationsSignalError() instead")
    void getDiseasePublicationAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseasePublicationAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseSubstanceAssociationsSignalError() instead")
    void getDiseaseSubstanceAssociationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseSubstanceAssociationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseVariantAssociationsSignalError() instead")
    void getDiseaseVariantAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseVariantAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFunctionAssociationsSignalError() instead")
    void getFunctionAssociationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFunctionAssociationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFunctionGeneAssociationsSignalError() instead")
    void getFunctionGeneAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFunctionGeneAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFunctionPublicationAssociationsSignalError() instead")
    void getFunctionPublicationAssociationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFunctionPublicationAssociationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFunctionTaxonAssociationsSignalError() instead")
    void getFunctionTaxonAssociationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFunctionTaxonAssociationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneAnatomyAssociationsSignalError() instead")
    void getGeneAnatomyAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneAnatomyAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneCaseAssociationsSignalError() instead")
    void getGeneCaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneCaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneDiseaseAssociationsSignalError() instead")
    void getGeneDiseaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneDiseaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneExpressionAssociationsSignalError() instead")
    void getGeneExpressionAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneExpressionAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneFunctionAssociationsSignalError() instead")
    void getGeneFunctionAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneFunctionAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneGenotypeAssociationsSignalError() instead")
    void getGeneGenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneGenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneHomologAssociationsSignalError() instead")
    void getGeneHomologAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneHomologAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneInteractionsSignalError() instead")
    void getGeneInteractionsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneInteractionsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneModelAssociationsSignalError() instead")
    void getGeneModelAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneModelAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneOrthologDiseaseAssociationsSignalError() instead")
    void getGeneOrthologDiseaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneOrthologDiseaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneOrthologPhenotypeAssociationsSignalError() instead")
    void getGeneOrthologPhenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneOrthologPhenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenePathwayAssociationsSignalError() instead")
    void getGenePathwayAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenePathwayAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenePhenotypeAssociationsSignalError() instead")
    void getGenePhenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenePhenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenePublicationAssociationsSignalError() instead")
    void getGenePublicationAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenePublicationAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneVariantAssociationsSignalError() instead")
    void getGeneVariantAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneVariantAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenericAssociationsSignalError() instead")
    void getGenericAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenericAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenericObjectSignalError() instead")
    void getGenericObjectSignalE(OAIBioObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenericObjectSignalError(OAIBioObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenericObjectByTypeSignalError() instead")
    void getGenericObjectByTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGenericObjectByTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeCaseAssociationsSignalError() instead")
    void getGenotypeCaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeCaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeDiseaseAssociationsSignalError() instead")
    void getGenotypeDiseaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeDiseaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeGeneAssociationsSignalError() instead")
    void getGenotypeGeneAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeGeneAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeGenotypeAssociationsSignalError() instead")
    void getGenotypeGenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeGenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeModelAssociationsSignalError() instead")
    void getGenotypeModelAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeModelAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypePhenotypeAssociationsSignalError() instead")
    void getGenotypePhenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypePhenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypePublicationAssociationsSignalError() instead")
    void getGenotypePublicationAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypePublicationAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeVariantAssociationsSignalError() instead")
    void getGenotypeVariantAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeVariantAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGotermGeneAssociationsSignalError() instead")
    void getGotermGeneAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGotermGeneAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelCaseAssociationsSignalError() instead")
    void getModelCaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelCaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelDiseaseAssociationsSignalError() instead")
    void getModelDiseaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelDiseaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelGeneAssociationsSignalError() instead")
    void getModelGeneAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelGeneAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelGenotypeAssociationsSignalError() instead")
    void getModelGenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelGenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelPhenotypeAssociationsSignalError() instead")
    void getModelPhenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelPhenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelPublicationAssociationsSignalError() instead")
    void getModelPublicationAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelPublicationAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelVariantAssociationsSignalError() instead")
    void getModelVariantAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelVariantAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPathwayDiseaseAssociationsSignalError() instead")
    void getPathwayDiseaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPathwayDiseaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPathwayGeneAssociationsSignalError() instead")
    void getPathwayGeneAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPathwayGeneAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPathwayPhenotypeAssociationsSignalError() instead")
    void getPathwayPhenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPathwayPhenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeAnatomyAssociationsSignalError() instead")
    void getPhenotypeAnatomyAssociationsSignalE(QList<OAINamedObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeAnatomyAssociationsSignalError(QList<OAINamedObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeCaseAssociationsSignalError() instead")
    void getPhenotypeCaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeCaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeDiseaseAssociationsSignalError() instead")
    void getPhenotypeDiseaseAssociationsSignalE(OAID2PAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeDiseaseAssociationsSignalError(OAID2PAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeGeneAssociationsSignalError() instead")
    void getPhenotypeGeneAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeGeneAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeGeneByTaxonAssociationsSignalError() instead")
    void getPhenotypeGeneByTaxonAssociationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeGeneByTaxonAssociationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeGenotypeAssociationsSignalError() instead")
    void getPhenotypeGenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeGenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypePathwayAssociationsSignalError() instead")
    void getPhenotypePathwayAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypePathwayAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypePublicationAssociationsSignalError() instead")
    void getPhenotypePublicationAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypePublicationAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeVariantAssociationsSignalError() instead")
    void getPhenotypeVariantAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeVariantAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationDiseaseAssociationsSignalError() instead")
    void getPublicationDiseaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationDiseaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationGeneAssociationsSignalError() instead")
    void getPublicationGeneAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationGeneAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationGenotypeAssociationsSignalError() instead")
    void getPublicationGenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationGenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationModelAssociationsSignalError() instead")
    void getPublicationModelAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationModelAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationPhenotypeAssociationsSignalError() instead")
    void getPublicationPhenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationPhenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationVariantAssociationsSignalError() instead")
    void getPublicationVariantAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationVariantAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceParticipantInAssociationsSignalError() instead")
    void getSubstanceParticipantInAssociationsSignalE(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceParticipantInAssociationsSignalError(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceRoleAssociationsSignalError() instead")
    void getSubstanceRoleAssociationsSignalE(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceRoleAssociationsSignalError(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceTreatsAssociationsSignalError() instead")
    void getSubstanceTreatsAssociationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceTreatsAssociationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantCaseAssociationsSignalError() instead")
    void getVariantCaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantCaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantDiseaseAssociationsSignalError() instead")
    void getVariantDiseaseAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantDiseaseAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantGeneAssociationsSignalError() instead")
    void getVariantGeneAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantGeneAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantGenotypeAssociationsSignalError() instead")
    void getVariantGenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantGenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantModelAssociationsSignalError() instead")
    void getVariantModelAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantModelAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantPhenotypeAssociationsSignalError() instead")
    void getVariantPhenotypeAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantPhenotypeAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantPublicationAssociationsSignalError() instead")
    void getVariantPublicationAssociationsSignalE(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantPublicationAssociationsSignalError(OAIAssociationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAnatomyGeneAssociationsSignalErrorFull() instead")
    void getAnatomyGeneAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnatomyGeneAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnatomyGeneByTaxonAssociationsSignalErrorFull() instead")
    void getAnatomyGeneByTaxonAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnatomyGeneByTaxonAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCaseDiseaseAssociationsSignalErrorFull() instead")
    void getCaseDiseaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCaseDiseaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCaseGenotypeAssociationsSignalErrorFull() instead")
    void getCaseGenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCaseGenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCaseModelAssociationsSignalErrorFull() instead")
    void getCaseModelAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCaseModelAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCasePhenotypeAssociationsSignalErrorFull() instead")
    void getCasePhenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCasePhenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCaseVariantAssociationsSignalErrorFull() instead")
    void getCaseVariantAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCaseVariantAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseCaseAssociationsSignalErrorFull() instead")
    void getDiseaseCaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseCaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseGeneAssociationsSignalErrorFull() instead")
    void getDiseaseGeneAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseGeneAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseGenotypeAssociationsSignalErrorFull() instead")
    void getDiseaseGenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseGenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseModelAssociationsSignalErrorFull() instead")
    void getDiseaseModelAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseModelAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseModelTaxonAssociationsSignalErrorFull() instead")
    void getDiseaseModelTaxonAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseModelTaxonAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseasePathwayAssociationsSignalErrorFull() instead")
    void getDiseasePathwayAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseasePathwayAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseasePhenotypeAssociationsSignalErrorFull() instead")
    void getDiseasePhenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseasePhenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseasePublicationAssociationsSignalErrorFull() instead")
    void getDiseasePublicationAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseasePublicationAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseSubstanceAssociationsSignalErrorFull() instead")
    void getDiseaseSubstanceAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseSubstanceAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseVariantAssociationsSignalErrorFull() instead")
    void getDiseaseVariantAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseVariantAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFunctionAssociationsSignalErrorFull() instead")
    void getFunctionAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFunctionAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFunctionGeneAssociationsSignalErrorFull() instead")
    void getFunctionGeneAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFunctionGeneAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFunctionPublicationAssociationsSignalErrorFull() instead")
    void getFunctionPublicationAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFunctionPublicationAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFunctionTaxonAssociationsSignalErrorFull() instead")
    void getFunctionTaxonAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFunctionTaxonAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneAnatomyAssociationsSignalErrorFull() instead")
    void getGeneAnatomyAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneAnatomyAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneCaseAssociationsSignalErrorFull() instead")
    void getGeneCaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneCaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneDiseaseAssociationsSignalErrorFull() instead")
    void getGeneDiseaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneDiseaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneExpressionAssociationsSignalErrorFull() instead")
    void getGeneExpressionAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneExpressionAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneFunctionAssociationsSignalErrorFull() instead")
    void getGeneFunctionAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneFunctionAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneGenotypeAssociationsSignalErrorFull() instead")
    void getGeneGenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneGenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneHomologAssociationsSignalErrorFull() instead")
    void getGeneHomologAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneHomologAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneInteractionsSignalErrorFull() instead")
    void getGeneInteractionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneInteractionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneModelAssociationsSignalErrorFull() instead")
    void getGeneModelAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneModelAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneOrthologDiseaseAssociationsSignalErrorFull() instead")
    void getGeneOrthologDiseaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneOrthologDiseaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneOrthologPhenotypeAssociationsSignalErrorFull() instead")
    void getGeneOrthologPhenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneOrthologPhenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenePathwayAssociationsSignalErrorFull() instead")
    void getGenePathwayAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenePathwayAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenePhenotypeAssociationsSignalErrorFull() instead")
    void getGenePhenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenePhenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenePublicationAssociationsSignalErrorFull() instead")
    void getGenePublicationAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenePublicationAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneVariantAssociationsSignalErrorFull() instead")
    void getGeneVariantAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneVariantAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenericAssociationsSignalErrorFull() instead")
    void getGenericAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenericAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenericObjectSignalErrorFull() instead")
    void getGenericObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenericObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenericObjectByTypeSignalErrorFull() instead")
    void getGenericObjectByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenericObjectByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeCaseAssociationsSignalErrorFull() instead")
    void getGenotypeCaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeCaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeDiseaseAssociationsSignalErrorFull() instead")
    void getGenotypeDiseaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeDiseaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeGeneAssociationsSignalErrorFull() instead")
    void getGenotypeGeneAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeGeneAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeGenotypeAssociationsSignalErrorFull() instead")
    void getGenotypeGenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeGenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeModelAssociationsSignalErrorFull() instead")
    void getGenotypeModelAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeModelAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypePhenotypeAssociationsSignalErrorFull() instead")
    void getGenotypePhenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypePhenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypePublicationAssociationsSignalErrorFull() instead")
    void getGenotypePublicationAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypePublicationAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenotypeVariantAssociationsSignalErrorFull() instead")
    void getGenotypeVariantAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenotypeVariantAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGotermGeneAssociationsSignalErrorFull() instead")
    void getGotermGeneAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGotermGeneAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelCaseAssociationsSignalErrorFull() instead")
    void getModelCaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelCaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelDiseaseAssociationsSignalErrorFull() instead")
    void getModelDiseaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelDiseaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelGeneAssociationsSignalErrorFull() instead")
    void getModelGeneAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelGeneAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelGenotypeAssociationsSignalErrorFull() instead")
    void getModelGenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelGenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelPhenotypeAssociationsSignalErrorFull() instead")
    void getModelPhenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelPhenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelPublicationAssociationsSignalErrorFull() instead")
    void getModelPublicationAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelPublicationAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getModelVariantAssociationsSignalErrorFull() instead")
    void getModelVariantAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getModelVariantAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPathwayDiseaseAssociationsSignalErrorFull() instead")
    void getPathwayDiseaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPathwayDiseaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPathwayGeneAssociationsSignalErrorFull() instead")
    void getPathwayGeneAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPathwayGeneAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPathwayPhenotypeAssociationsSignalErrorFull() instead")
    void getPathwayPhenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPathwayPhenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeAnatomyAssociationsSignalErrorFull() instead")
    void getPhenotypeAnatomyAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeAnatomyAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeCaseAssociationsSignalErrorFull() instead")
    void getPhenotypeCaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeCaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeDiseaseAssociationsSignalErrorFull() instead")
    void getPhenotypeDiseaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeDiseaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeGeneAssociationsSignalErrorFull() instead")
    void getPhenotypeGeneAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeGeneAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeGeneByTaxonAssociationsSignalErrorFull() instead")
    void getPhenotypeGeneByTaxonAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeGeneByTaxonAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeGenotypeAssociationsSignalErrorFull() instead")
    void getPhenotypeGenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeGenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypePathwayAssociationsSignalErrorFull() instead")
    void getPhenotypePathwayAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypePathwayAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypePublicationAssociationsSignalErrorFull() instead")
    void getPhenotypePublicationAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypePublicationAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhenotypeVariantAssociationsSignalErrorFull() instead")
    void getPhenotypeVariantAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhenotypeVariantAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationDiseaseAssociationsSignalErrorFull() instead")
    void getPublicationDiseaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationDiseaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationGeneAssociationsSignalErrorFull() instead")
    void getPublicationGeneAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationGeneAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationGenotypeAssociationsSignalErrorFull() instead")
    void getPublicationGenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationGenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationModelAssociationsSignalErrorFull() instead")
    void getPublicationModelAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationModelAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationPhenotypeAssociationsSignalErrorFull() instead")
    void getPublicationPhenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationPhenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicationVariantAssociationsSignalErrorFull() instead")
    void getPublicationVariantAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicationVariantAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceParticipantInAssociationsSignalErrorFull() instead")
    void getSubstanceParticipantInAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceParticipantInAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceRoleAssociationsSignalErrorFull() instead")
    void getSubstanceRoleAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceRoleAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceTreatsAssociationsSignalErrorFull() instead")
    void getSubstanceTreatsAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceTreatsAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantCaseAssociationsSignalErrorFull() instead")
    void getVariantCaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantCaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantDiseaseAssociationsSignalErrorFull() instead")
    void getVariantDiseaseAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantDiseaseAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantGeneAssociationsSignalErrorFull() instead")
    void getVariantGeneAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantGeneAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantGenotypeAssociationsSignalErrorFull() instead")
    void getVariantGenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantGenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantModelAssociationsSignalErrorFull() instead")
    void getVariantModelAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantModelAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantPhenotypeAssociationsSignalErrorFull() instead")
    void getVariantPhenotypeAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantPhenotypeAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantPublicationAssociationsSignalErrorFull() instead")
    void getVariantPublicationAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantPublicationAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
