/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAID2PAssociationResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAID2PAssociationResults::OAID2PAssociationResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAID2PAssociationResults::OAID2PAssociationResults() {
    this->initializeModel();
}

OAID2PAssociationResults::~OAID2PAssociationResults() {}

void OAID2PAssociationResults::initializeModel() {

    m_docs_isSet = false;
    m_docs_isValid = false;

    m_facet_counts_isSet = false;
    m_facet_counts_isValid = false;

    m_highlighting_isSet = false;
    m_highlighting_isValid = false;

    m_num_found_isSet = false;
    m_num_found_isValid = false;

    m_associations_isSet = false;
    m_associations_isValid = false;

    m_compact_associations_isSet = false;
    m_compact_associations_isValid = false;

    m_objects_isSet = false;
    m_objects_isValid = false;
}

void OAID2PAssociationResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAID2PAssociationResults::fromJsonObject(QJsonObject json) {

    m_docs_isValid = ::OpenAPI::fromJsonValue(m_docs, json[QString("docs")]);
    m_docs_isSet = !json[QString("docs")].isNull() && m_docs_isValid;

    m_facet_counts_isValid = ::OpenAPI::fromJsonValue(m_facet_counts, json[QString("facet_counts")]);
    m_facet_counts_isSet = !json[QString("facet_counts")].isNull() && m_facet_counts_isValid;

    m_highlighting_isValid = ::OpenAPI::fromJsonValue(m_highlighting, json[QString("highlighting")]);
    m_highlighting_isSet = !json[QString("highlighting")].isNull() && m_highlighting_isValid;

    m_num_found_isValid = ::OpenAPI::fromJsonValue(m_num_found, json[QString("numFound")]);
    m_num_found_isSet = !json[QString("numFound")].isNull() && m_num_found_isValid;

    m_associations_isValid = ::OpenAPI::fromJsonValue(m_associations, json[QString("associations")]);
    m_associations_isSet = !json[QString("associations")].isNull() && m_associations_isValid;

    m_compact_associations_isValid = ::OpenAPI::fromJsonValue(m_compact_associations, json[QString("compact_associations")]);
    m_compact_associations_isSet = !json[QString("compact_associations")].isNull() && m_compact_associations_isValid;

    m_objects_isValid = ::OpenAPI::fromJsonValue(m_objects, json[QString("objects")]);
    m_objects_isSet = !json[QString("objects")].isNull() && m_objects_isValid;
}

QString OAID2PAssociationResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAID2PAssociationResults::asJsonObject() const {
    QJsonObject obj;
    if (m_docs.size() > 0) {
        obj.insert(QString("docs"), ::OpenAPI::toJsonValue(m_docs));
    }
    if (m_facet_counts_isSet) {
        obj.insert(QString("facet_counts"), ::OpenAPI::toJsonValue(m_facet_counts));
    }
    if (m_highlighting_isSet) {
        obj.insert(QString("highlighting"), ::OpenAPI::toJsonValue(m_highlighting));
    }
    if (m_num_found_isSet) {
        obj.insert(QString("numFound"), ::OpenAPI::toJsonValue(m_num_found));
    }
    if (m_associations.size() > 0) {
        obj.insert(QString("associations"), ::OpenAPI::toJsonValue(m_associations));
    }
    if (m_compact_associations.size() > 0) {
        obj.insert(QString("compact_associations"), ::OpenAPI::toJsonValue(m_compact_associations));
    }
    if (m_objects.size() > 0) {
        obj.insert(QString("objects"), ::OpenAPI::toJsonValue(m_objects));
    }
    return obj;
}

QList<OAIObject> OAID2PAssociationResults::getDocs() const {
    return m_docs;
}
void OAID2PAssociationResults::setDocs(const QList<OAIObject> &docs) {
    m_docs = docs;
    m_docs_isSet = true;
}

bool OAID2PAssociationResults::is_docs_Set() const{
    return m_docs_isSet;
}

bool OAID2PAssociationResults::is_docs_Valid() const{
    return m_docs_isValid;
}

OAIObject OAID2PAssociationResults::getFacetCounts() const {
    return m_facet_counts;
}
void OAID2PAssociationResults::setFacetCounts(const OAIObject &facet_counts) {
    m_facet_counts = facet_counts;
    m_facet_counts_isSet = true;
}

bool OAID2PAssociationResults::is_facet_counts_Set() const{
    return m_facet_counts_isSet;
}

bool OAID2PAssociationResults::is_facet_counts_Valid() const{
    return m_facet_counts_isValid;
}

OAIObject OAID2PAssociationResults::getHighlighting() const {
    return m_highlighting;
}
void OAID2PAssociationResults::setHighlighting(const OAIObject &highlighting) {
    m_highlighting = highlighting;
    m_highlighting_isSet = true;
}

bool OAID2PAssociationResults::is_highlighting_Set() const{
    return m_highlighting_isSet;
}

bool OAID2PAssociationResults::is_highlighting_Valid() const{
    return m_highlighting_isValid;
}

qint32 OAID2PAssociationResults::getNumFound() const {
    return m_num_found;
}
void OAID2PAssociationResults::setNumFound(const qint32 &num_found) {
    m_num_found = num_found;
    m_num_found_isSet = true;
}

bool OAID2PAssociationResults::is_num_found_Set() const{
    return m_num_found_isSet;
}

bool OAID2PAssociationResults::is_num_found_Valid() const{
    return m_num_found_isValid;
}

QList<OAID2PAssociation> OAID2PAssociationResults::getAssociations() const {
    return m_associations;
}
void OAID2PAssociationResults::setAssociations(const QList<OAID2PAssociation> &associations) {
    m_associations = associations;
    m_associations_isSet = true;
}

bool OAID2PAssociationResults::is_associations_Set() const{
    return m_associations_isSet;
}

bool OAID2PAssociationResults::is_associations_Valid() const{
    return m_associations_isValid;
}

QList<OAICompactAssociationSet> OAID2PAssociationResults::getCompactAssociations() const {
    return m_compact_associations;
}
void OAID2PAssociationResults::setCompactAssociations(const QList<OAICompactAssociationSet> &compact_associations) {
    m_compact_associations = compact_associations;
    m_compact_associations_isSet = true;
}

bool OAID2PAssociationResults::is_compact_associations_Set() const{
    return m_compact_associations_isSet;
}

bool OAID2PAssociationResults::is_compact_associations_Valid() const{
    return m_compact_associations_isValid;
}

QList<QString> OAID2PAssociationResults::getObjects() const {
    return m_objects;
}
void OAID2PAssociationResults::setObjects(const QList<QString> &objects) {
    m_objects = objects;
    m_objects_isSet = true;
}

bool OAID2PAssociationResults::is_objects_Set() const{
    return m_objects_isSet;
}

bool OAID2PAssociationResults::is_objects_Valid() const{
    return m_objects_isValid;
}

bool OAID2PAssociationResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_docs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_counts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlighting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compact_associations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAID2PAssociationResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
