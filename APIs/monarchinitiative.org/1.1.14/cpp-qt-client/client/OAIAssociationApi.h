/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssociationApi_H
#define OAI_OAIAssociationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociationResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssociationApi : public QObject {
    Q_OBJECT

public:
    OAIAssociationApi(const int timeOut = 0);
    ~OAIAssociationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  association_type QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  subject QString [optional]
    * @param[in]  object QString [optional]
    */
    virtual void getAssociationBySubjectAndAssocType(const QString &association_type, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_category QString [required]
    * @param[in]  subject_category QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  subject QString [optional]
    * @param[in]  object QString [optional]
    * @param[in]  subject_taxon QString [optional]
    * @param[in]  object_taxon QString [optional]
    * @param[in]  relation QString [optional]
    */
    virtual void getAssociationBySubjectAndObjectCategorySearch(const QString &object_category, const QString &subject_category, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subject_taxon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_taxon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subject_category QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  subject_taxon QString [optional]
    * @param[in]  object_taxon QString [optional]
    * @param[in]  relation QString [optional]
    */
    virtual void getAssociationBySubjectCategorySearch(const QString &subject_category, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &subject_taxon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_taxon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAssociationObject(const QString &id);

    /**
    * @param[in]  object QString [required]
    * @param[in]  subject QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    */
    virtual void getAssociationsBetween(const QString &object, const QString &subject, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subject QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    * @param[in]  object_taxon QString [optional]
    * @param[in]  relation QString [optional]
    */
    virtual void getAssociationsFrom(const QString &subject, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &object_taxon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &relation = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object QString [required]
    * @param[in]  rows qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  evidence QString [optional]
    * @param[in]  unselect_evidence bool [optional]
    * @param[in]  exclude_automatic_assertions bool [optional]
    * @param[in]  use_compact_associations bool [optional]
    */
    virtual void getAssociationsTo(const QString &object, const ::OpenAPI::OptionalParam<qint32> &rows = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &unselect_evidence = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_automatic_assertions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_compact_associations = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAssociationBySubjectAndAssocTypeCallback(OAIHttpRequestWorker *worker);
    void getAssociationBySubjectAndObjectCategorySearchCallback(OAIHttpRequestWorker *worker);
    void getAssociationBySubjectCategorySearchCallback(OAIHttpRequestWorker *worker);
    void getAssociationObjectCallback(OAIHttpRequestWorker *worker);
    void getAssociationsBetweenCallback(OAIHttpRequestWorker *worker);
    void getAssociationsFromCallback(OAIHttpRequestWorker *worker);
    void getAssociationsToCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAssociationBySubjectAndAssocTypeSignal(QList<OAIAssociationResults> summary);
    void getAssociationBySubjectAndObjectCategorySearchSignal(QList<OAIAssociationResults> summary);
    void getAssociationBySubjectCategorySearchSignal(QList<OAIAssociationResults> summary);
    void getAssociationObjectSignal(QList<OAIAssociationResults> summary);
    void getAssociationsBetweenSignal(QList<OAIAssociationResults> summary);
    void getAssociationsFromSignal(QList<OAIAssociationResults> summary);
    void getAssociationsToSignal(QList<OAIAssociationResults> summary);


    void getAssociationBySubjectAndAssocTypeSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociationResults> summary);
    void getAssociationBySubjectAndObjectCategorySearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociationResults> summary);
    void getAssociationBySubjectCategorySearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociationResults> summary);
    void getAssociationObjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociationResults> summary);
    void getAssociationsBetweenSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociationResults> summary);
    void getAssociationsFromSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociationResults> summary);
    void getAssociationsToSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociationResults> summary);

    Q_DECL_DEPRECATED_X("Use getAssociationBySubjectAndAssocTypeSignalError() instead")
    void getAssociationBySubjectAndAssocTypeSignalE(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationBySubjectAndAssocTypeSignalError(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationBySubjectAndObjectCategorySearchSignalError() instead")
    void getAssociationBySubjectAndObjectCategorySearchSignalE(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationBySubjectAndObjectCategorySearchSignalError(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationBySubjectCategorySearchSignalError() instead")
    void getAssociationBySubjectCategorySearchSignalE(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationBySubjectCategorySearchSignalError(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationObjectSignalError() instead")
    void getAssociationObjectSignalE(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationObjectSignalError(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationsBetweenSignalError() instead")
    void getAssociationsBetweenSignalE(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationsBetweenSignalError(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationsFromSignalError() instead")
    void getAssociationsFromSignalE(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationsFromSignalError(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationsToSignalError() instead")
    void getAssociationsToSignalE(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationsToSignalError(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAssociationBySubjectAndAssocTypeSignalErrorFull() instead")
    void getAssociationBySubjectAndAssocTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationBySubjectAndAssocTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationBySubjectAndObjectCategorySearchSignalErrorFull() instead")
    void getAssociationBySubjectAndObjectCategorySearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationBySubjectAndObjectCategorySearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationBySubjectCategorySearchSignalErrorFull() instead")
    void getAssociationBySubjectCategorySearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationBySubjectCategorySearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationObjectSignalErrorFull() instead")
    void getAssociationObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationsBetweenSignalErrorFull() instead")
    void getAssociationsBetweenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationsBetweenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationsFromSignalErrorFull() instead")
    void getAssociationsFromSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationsFromSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationsToSignalErrorFull() instead")
    void getAssociationsToSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationsToSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
