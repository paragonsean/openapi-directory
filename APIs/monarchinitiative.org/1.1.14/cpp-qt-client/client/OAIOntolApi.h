/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOntolApi_H
#define OAI_OAIOntolApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOntolApi : public QObject {
    Q_OBJECT

public:
    OAIOntolApi(const int timeOut = 0);
    ~OAIOntolApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  node QString [required]
    * @param[in]  ontology QString [required]
    * @param[in]  cnode QList<QString> [optional]
    * @param[in]  include_ancestors bool [optional]
    * @param[in]  include_descendants bool [optional]
    * @param[in]  relation QList<QString> [optional]
    * @param[in]  include_meta bool [optional]
    */
    virtual void getExtractOntologySubgraphResource(const QString &node, const QString &ontology, const ::OpenAPI::OptionalParam<QList<QString>> &cnode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_ancestors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_descendants = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &relation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_meta = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subject_category QString [required]
    * @param[in]  object_category QString [required]
    * @param[in]  subject_taxon QString [required]
    * @param[in]  evidence QString [optional]
    */
    virtual void getInformationContentResource(const QString &subject_category, const QString &object_category, const QString &subject_taxon, const ::OpenAPI::OptionalParam<QString> &evidence = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node QString [required]
    * @param[in]  ontology QString [required]
    * @param[in]  cnode QList<QString> [optional]
    * @param[in]  include_ancestors bool [optional]
    * @param[in]  include_descendants bool [optional]
    * @param[in]  relation QList<QString> [optional]
    * @param[in]  include_meta bool [optional]
    */
    virtual void postExtractOntologySubgraphResource(const QString &node, const QString &ontology, const ::OpenAPI::OptionalParam<QList<QString>> &cnode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_ancestors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_descendants = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &relation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_meta = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getExtractOntologySubgraphResourceCallback(OAIHttpRequestWorker *worker);
    void getInformationContentResourceCallback(OAIHttpRequestWorker *worker);
    void postExtractOntologySubgraphResourceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getExtractOntologySubgraphResourceSignal();
    void getInformationContentResourceSignal();
    void postExtractOntologySubgraphResourceSignal();


    void getExtractOntologySubgraphResourceSignalFull(OAIHttpRequestWorker *worker);
    void getInformationContentResourceSignalFull(OAIHttpRequestWorker *worker);
    void postExtractOntologySubgraphResourceSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getExtractOntologySubgraphResourceSignalError() instead")
    void getExtractOntologySubgraphResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getExtractOntologySubgraphResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInformationContentResourceSignalError() instead")
    void getInformationContentResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getInformationContentResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postExtractOntologySubgraphResourceSignalError() instead")
    void postExtractOntologySubgraphResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postExtractOntologySubgraphResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getExtractOntologySubgraphResourceSignalErrorFull() instead")
    void getExtractOntologySubgraphResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExtractOntologySubgraphResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInformationContentResourceSignalErrorFull() instead")
    void getInformationContentResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInformationContentResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postExtractOntologySubgraphResourceSignalErrorFull() instead")
    void postExtractOntologySubgraphResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postExtractOntologySubgraphResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
