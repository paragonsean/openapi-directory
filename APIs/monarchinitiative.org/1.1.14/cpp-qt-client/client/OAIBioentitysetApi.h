/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBioentitysetApi_H
#define OAI_OAIBioentitysetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociationResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBioentitysetApi : public QObject {
    Q_OBJECT

public:
    OAIBioentitysetApi(const int timeOut = 0);
    ~OAIBioentitysetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subject QList<QString> [optional]
    * @param[in]  background QList<QString> [optional]
    * @param[in]  object_category QString [optional]
    * @param[in]  object_slim QString [optional]
    */
    virtual void getEntitySetAssociations(const ::OpenAPI::OptionalParam<QList<QString>> &subject = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &background = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &object_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_slim = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subject QList<QString> [optional]
    * @param[in]  background QList<QString> [optional]
    * @param[in]  object_category QString [optional]
    * @param[in]  object_slim QString [optional]
    */
    virtual void getEntitySetGraphResource(const ::OpenAPI::OptionalParam<QList<QString>> &subject = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &background = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &object_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_slim = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subject QList<QString> [optional]
    * @param[in]  background QList<QString> [optional]
    * @param[in]  object_category QString [optional]
    * @param[in]  object_slim QString [optional]
    */
    virtual void getEntitySetSummary(const ::OpenAPI::OptionalParam<QList<QString>> &subject = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &background = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &object_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_slim = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_category QString [optional]
    * @param[in]  subject QList<QString> [optional]
    * @param[in]  background QList<QString> [optional]
    * @param[in]  subject_category QString [optional]
    * @param[in]  max_p_value QString [optional]
    * @param[in]  ontology QString [optional]
    * @param[in]  taxon QString [optional]
    */
    virtual void getOverRepresentation(const ::OpenAPI::OptionalParam<QString> &object_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &subject = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &background = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &subject_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_p_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ontology = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &taxon = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getEntitySetAssociationsCallback(OAIHttpRequestWorker *worker);
    void getEntitySetGraphResourceCallback(OAIHttpRequestWorker *worker);
    void getEntitySetSummaryCallback(OAIHttpRequestWorker *worker);
    void getOverRepresentationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getEntitySetAssociationsSignal(QList<OAIAssociationResults> summary);
    void getEntitySetGraphResourceSignal();
    void getEntitySetSummarySignal();
    void getOverRepresentationSignal();


    void getEntitySetAssociationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociationResults> summary);
    void getEntitySetGraphResourceSignalFull(OAIHttpRequestWorker *worker);
    void getEntitySetSummarySignalFull(OAIHttpRequestWorker *worker);
    void getOverRepresentationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getEntitySetAssociationsSignalError() instead")
    void getEntitySetAssociationsSignalE(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEntitySetAssociationsSignalError(QList<OAIAssociationResults> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEntitySetGraphResourceSignalError() instead")
    void getEntitySetGraphResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getEntitySetGraphResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEntitySetSummarySignalError() instead")
    void getEntitySetSummarySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getEntitySetSummarySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOverRepresentationSignalError() instead")
    void getOverRepresentationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOverRepresentationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getEntitySetAssociationsSignalErrorFull() instead")
    void getEntitySetAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEntitySetAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEntitySetGraphResourceSignalErrorFull() instead")
    void getEntitySetGraphResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEntitySetGraphResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEntitySetSummarySignalErrorFull() instead")
    void getEntitySetSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEntitySetSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOverRepresentationSignalErrorFull() instead")
    void getOverRepresentationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOverRepresentationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
