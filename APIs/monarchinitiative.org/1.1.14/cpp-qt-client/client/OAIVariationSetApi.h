/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVariationSetApi_H
#define OAI_OAIVariationSetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociation.h"
#include "OAIPage_of_variant_sets.h"
#include "OAIVariant_set.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVariationSetApi : public QObject {
    Q_OBJECT

public:
    OAIVariationSetApi(const int timeOut = 0);
    ~OAIVariationSetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteVariantSetItem(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getVariantAnalyze(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getVariantSetItem(const QString &id);

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  month qint32 [required]
    * @param[in]  day qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getVariantSetsArchiveCollection(const qint32 &year, const qint32 &month, const qint32 &day, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getVariantSetsCollection(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_variant_set OAIVariant_set [required]
    */
    virtual void postVariantSetsCollection(const OAIVariant_set &oai_variant_set);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_variant_set OAIVariant_set [required]
    */
    virtual void putVariantSetItem(const QString &id, const OAIVariant_set &oai_variant_set);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteVariantSetItemCallback(OAIHttpRequestWorker *worker);
    void getVariantAnalyzeCallback(OAIHttpRequestWorker *worker);
    void getVariantSetItemCallback(OAIHttpRequestWorker *worker);
    void getVariantSetsArchiveCollectionCallback(OAIHttpRequestWorker *worker);
    void getVariantSetsCollectionCallback(OAIHttpRequestWorker *worker);
    void postVariantSetsCollectionCallback(OAIHttpRequestWorker *worker);
    void putVariantSetItemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteVariantSetItemSignal();
    void getVariantAnalyzeSignal(QList<OAIAssociation> summary);
    void getVariantSetItemSignal(OAIVariant_set summary);
    void getVariantSetsArchiveCollectionSignal(OAIPage_of_variant_sets summary);
    void getVariantSetsCollectionSignal(OAIPage_of_variant_sets summary);
    void postVariantSetsCollectionSignal();
    void putVariantSetItemSignal();


    void deleteVariantSetItemSignalFull(OAIHttpRequestWorker *worker);
    void getVariantAnalyzeSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociation> summary);
    void getVariantSetItemSignalFull(OAIHttpRequestWorker *worker, OAIVariant_set summary);
    void getVariantSetsArchiveCollectionSignalFull(OAIHttpRequestWorker *worker, OAIPage_of_variant_sets summary);
    void getVariantSetsCollectionSignalFull(OAIHttpRequestWorker *worker, OAIPage_of_variant_sets summary);
    void postVariantSetsCollectionSignalFull(OAIHttpRequestWorker *worker);
    void putVariantSetItemSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteVariantSetItemSignalError() instead")
    void deleteVariantSetItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVariantSetItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantAnalyzeSignalError() instead")
    void getVariantAnalyzeSignalE(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantAnalyzeSignalError(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantSetItemSignalError() instead")
    void getVariantSetItemSignalE(OAIVariant_set summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantSetItemSignalError(OAIVariant_set summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantSetsArchiveCollectionSignalError() instead")
    void getVariantSetsArchiveCollectionSignalE(OAIPage_of_variant_sets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantSetsArchiveCollectionSignalError(OAIPage_of_variant_sets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantSetsCollectionSignalError() instead")
    void getVariantSetsCollectionSignalE(OAIPage_of_variant_sets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantSetsCollectionSignalError(OAIPage_of_variant_sets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVariantSetsCollectionSignalError() instead")
    void postVariantSetsCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postVariantSetsCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVariantSetItemSignalError() instead")
    void putVariantSetItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putVariantSetItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteVariantSetItemSignalErrorFull() instead")
    void deleteVariantSetItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVariantSetItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantAnalyzeSignalErrorFull() instead")
    void getVariantAnalyzeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantAnalyzeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantSetItemSignalErrorFull() instead")
    void getVariantSetItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantSetItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantSetsArchiveCollectionSignalErrorFull() instead")
    void getVariantSetsArchiveCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantSetsArchiveCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantSetsCollectionSignalErrorFull() instead")
    void getVariantSetsCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantSetsCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVariantSetsCollectionSignalErrorFull() instead")
    void postVariantSetsCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postVariantSetsCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVariantSetItemSignalErrorFull() instead")
    void putVariantSetItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putVariantSetItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
