/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BioLinkApi);
  }
}(this, function(expect, BioLinkApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BioLinkApi.SequenceLocation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SequenceLocation', function() {
    it('should create an instance of SequenceLocation', function() {
      // uncomment below and update the code to test SequenceLocation
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be.a(BioLinkApi.SequenceLocation);
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property iri (base name: "iri")', function() {
      // uncomment below and update the code to test the property iri
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property label (base name: "label")', function() {
      // uncomment below and update the code to test the property label
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property consider (base name: "consider")', function() {
      // uncomment below and update the code to test the property consider
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property deprecated (base name: "deprecated")', function() {
      // uncomment below and update the code to test the property deprecated
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property replacedBy (base name: "replaced_by")', function() {
      // uncomment below and update the code to test the property replacedBy
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property synonyms (base name: "synonyms")', function() {
      // uncomment below and update the code to test the property synonyms
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property types (base name: "types")', function() {
      // uncomment below and update the code to test the property types
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property associationCounts (base name: "association_counts")', function() {
      // uncomment below and update the code to test the property associationCounts
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property taxon (base name: "taxon")', function() {
      // uncomment below and update the code to test the property taxon
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property xrefs (base name: "xrefs")', function() {
      // uncomment below and update the code to test the property xrefs
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property end (base name: "end")', function() {
      // uncomment below and update the code to test the property end
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property phase (base name: "phase")', function() {
      // uncomment below and update the code to test the property phase
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property score (base name: "score")', function() {
      // uncomment below and update the code to test the property score
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property start (base name: "start")', function() {
      // uncomment below and update the code to test the property start
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

    it('should have the property strand (base name: "strand")', function() {
      // uncomment below and update the code to test the property strand
      //var instance = new BioLinkApi.SequenceLocation();
      //expect(instance).to.be();
    });

  });

}));
