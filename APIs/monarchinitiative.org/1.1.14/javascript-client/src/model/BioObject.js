/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NamedObject from './NamedObject';
import SynonymPropertyValue from './SynonymPropertyValue';
import Taxon from './Taxon';

/**
 * The BioObject model module.
 * @module model/BioObject
 * @version 1.1.14
 */
class BioObject {
    /**
     * Constructs a new <code>BioObject</code>.
     * @alias module:model/BioObject
     * @implements module:model/NamedObject
     * @param id {String} ID or CURIE e.g. MGI:1201606
     */
    constructor(id) { 
        NamedObject.initialize(this, id);
        BioObject.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>BioObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BioObject} obj Optional instance to populate.
     * @return {module:model/BioObject} The populated <code>BioObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BioObject();
            NamedObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('iri')) {
                obj['iri'] = ApiClient.convertToType(data['iri'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('consider')) {
                obj['consider'] = ApiClient.convertToType(data['consider'], ['String']);
            }
            if (data.hasOwnProperty('deprecated')) {
                obj['deprecated'] = ApiClient.convertToType(data['deprecated'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('replaced_by')) {
                obj['replaced_by'] = ApiClient.convertToType(data['replaced_by'], ['String']);
            }
            if (data.hasOwnProperty('synonyms')) {
                obj['synonyms'] = ApiClient.convertToType(data['synonyms'], [SynonymPropertyValue]);
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
            if (data.hasOwnProperty('association_counts')) {
                obj['association_counts'] = ApiClient.convertToType(data['association_counts'], Object);
            }
            if (data.hasOwnProperty('taxon')) {
                obj['taxon'] = ApiClient.convertToType(data['taxon'], Taxon);
            }
            if (data.hasOwnProperty('xrefs')) {
                obj['xrefs'] = ApiClient.convertToType(data['xrefs'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BioObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BioObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BioObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['category'])) {
            throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['iri'] && !(typeof data['iri'] === 'string' || data['iri'] instanceof String)) {
            throw new Error("Expected the field `iri` to be a primitive type in the JSON string but got " + data['iri']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['consider'])) {
            throw new Error("Expected the field `consider` to be an array in the JSON data but got " + data['consider']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['replaced_by'])) {
            throw new Error("Expected the field `replaced_by` to be an array in the JSON data but got " + data['replaced_by']);
        }
        if (data['synonyms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['synonyms'])) {
                throw new Error("Expected the field `synonyms` to be an array in the JSON data but got " + data['synonyms']);
            }
            // validate the optional field `synonyms` (array)
            for (const item of data['synonyms']) {
                SynonymPropertyValue.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }
        // validate the optional field `taxon`
        if (data['taxon']) { // data not null
          Taxon.validateJSON(data['taxon']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['xrefs'])) {
            throw new Error("Expected the field `xrefs` to be an array in the JSON data but got " + data['xrefs']);
        }

        return true;
    }


}

BioObject.RequiredProperties = ["id"];

/**
 * @member {Array.<String>} category
 */
BioObject.prototype['category'] = undefined;

/**
 * ID or CURIE e.g. MGI:1201606
 * @member {String} id
 */
BioObject.prototype['id'] = undefined;

/**
 * IRI
 * @member {String} iri
 */
BioObject.prototype['iri'] = undefined;

/**
 * RDFS Label
 * @member {String} label
 */
BioObject.prototype['label'] = undefined;

/**
 * @member {Array.<String>} consider
 */
BioObject.prototype['consider'] = undefined;

/**
 * True if the node is deprecated/obsoleted.
 * @member {Boolean} deprecated
 */
BioObject.prototype['deprecated'] = undefined;

/**
 * Descriptive text for the entity. For ontology classes, this will be a definition.
 * @member {String} description
 */
BioObject.prototype['description'] = undefined;

/**
 * @member {Array.<String>} replaced_by
 */
BioObject.prototype['replaced_by'] = undefined;

/**
 * list of synonyms or alternate labels
 * @member {Array.<module:model/SynonymPropertyValue>} synonyms
 */
BioObject.prototype['synonyms'] = undefined;

/**
 * @member {Array.<String>} types
 */
BioObject.prototype['types'] = undefined;

/**
 * association counts
 * @member {Object} association_counts
 */
BioObject.prototype['association_counts'] = undefined;

/**
 * Taxon to which the object belongs
 * @member {module:model/Taxon} taxon
 */
BioObject.prototype['taxon'] = undefined;

/**
 * Database cross-references. These are usually CURIEs, but may also be URLs. E.g. ENSEMBL:ENSG00000099940 
 * @member {Array.<String>} xrefs
 */
BioObject.prototype['xrefs'] = undefined;


// Implement NamedObject interface:
/**
 * @member {Array.<String>} category
 */
NamedObject.prototype['category'] = undefined;
/**
 * ID or CURIE e.g. MGI:1201606
 * @member {String} id
 */
NamedObject.prototype['id'] = undefined;
/**
 * IRI
 * @member {String} iri
 */
NamedObject.prototype['iri'] = undefined;
/**
 * RDFS Label
 * @member {String} label
 */
NamedObject.prototype['label'] = undefined;
/**
 * @member {Array.<String>} consider
 */
NamedObject.prototype['consider'] = undefined;
/**
 * True if the node is deprecated/obsoleted.
 * @member {Boolean} deprecated
 */
NamedObject.prototype['deprecated'] = undefined;
/**
 * Descriptive text for the entity. For ontology classes, this will be a definition.
 * @member {String} description
 */
NamedObject.prototype['description'] = undefined;
/**
 * @member {Array.<String>} replaced_by
 */
NamedObject.prototype['replaced_by'] = undefined;
/**
 * list of synonyms or alternate labels
 * @member {Array.<module:model/SynonymPropertyValue>} synonyms
 */
NamedObject.prototype['synonyms'] = undefined;
/**
 * @member {Array.<String>} types
 */
NamedObject.prototype['types'] = undefined;




export default BioObject;

