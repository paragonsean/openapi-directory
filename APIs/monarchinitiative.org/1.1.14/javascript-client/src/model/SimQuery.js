/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Node from './Node';
import TypedNode from './TypedNode';

/**
 * The SimQuery model module.
 * @module model/SimQuery
 * @version 1.1.14
 */
class SimQuery {
    /**
     * Constructs a new <code>SimQuery</code>.
     * @alias module:model/SimQuery
     */
    constructor() { 
        
        SimQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SimQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimQuery} obj Optional instance to populate.
     * @return {module:model/SimQuery} The populated <code>SimQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimQuery();

            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], [Node]);
            }
            if (data.hasOwnProperty('negated_ids')) {
                obj['negated_ids'] = ApiClient.convertToType(data['negated_ids'], [Node]);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], TypedNode);
            }
            if (data.hasOwnProperty('target_ids')) {
                obj['target_ids'] = ApiClient.convertToType(data['target_ids'], [[Node]]);
            }
            if (data.hasOwnProperty('unresolved_ids')) {
                obj['unresolved_ids'] = ApiClient.convertToType(data['unresolved_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimQuery</code>.
     */
    static validateJSON(data) {
        if (data['ids']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ids'])) {
                throw new Error("Expected the field `ids` to be an array in the JSON data but got " + data['ids']);
            }
            // validate the optional field `ids` (array)
            for (const item of data['ids']) {
                Node.validateJSON(item);
            };
        }
        if (data['negated_ids']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['negated_ids'])) {
                throw new Error("Expected the field `negated_ids` to be an array in the JSON data but got " + data['negated_ids']);
            }
            // validate the optional field `negated_ids` (array)
            for (const item of data['negated_ids']) {
                Node.validateJSON(item);
            };
        }
        // validate the optional field `reference`
        if (data['reference']) { // data not null
          TypedNode.validateJSON(data['reference']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['target_ids'])) {
            throw new Error("Expected the field `target_ids` to be an array in the JSON data but got " + data['target_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['unresolved_ids'])) {
            throw new Error("Expected the field `unresolved_ids` to be an array in the JSON data but got " + data['unresolved_ids']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Node>} ids
 */
SimQuery.prototype['ids'] = undefined;

/**
 * @member {Array.<module:model/Node>} negated_ids
 */
SimQuery.prototype['negated_ids'] = undefined;

/**
 * reference individual or class (eg gene, disease)
 * @member {module:model/TypedNode} reference
 */
SimQuery.prototype['reference'] = undefined;

/**
 * @member {Array.<Array.<module:model/Node>>} target_ids
 */
SimQuery.prototype['target_ids'] = undefined;

/**
 * list of unresolved ids
 * @member {Array.<String>} unresolved_ids
 */
SimQuery.prototype['unresolved_ids'] = undefined;






export default SimQuery;

