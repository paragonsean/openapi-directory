/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AutocompleteResult model module.
 * @module model/AutocompleteResult
 * @version 1.1.14
 */
class AutocompleteResult {
    /**
     * Constructs a new <code>AutocompleteResult</code>.
     * @alias module:model/AutocompleteResult
     */
    constructor() { 
        
        AutocompleteResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AutocompleteResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutocompleteResult} obj Optional instance to populate.
     * @return {module:model/AutocompleteResult} The populated <code>AutocompleteResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutocompleteResult();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], ['String']);
            }
            if (data.hasOwnProperty('equivalent_ids')) {
                obj['equivalent_ids'] = ApiClient.convertToType(data['equivalent_ids'], ['String']);
            }
            if (data.hasOwnProperty('has_highlight')) {
                obj['has_highlight'] = ApiClient.convertToType(data['has_highlight'], 'Boolean');
            }
            if (data.hasOwnProperty('highlight')) {
                obj['highlight'] = ApiClient.convertToType(data['highlight'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], ['String']);
            }
            if (data.hasOwnProperty('match')) {
                obj['match'] = ApiClient.convertToType(data['match'], 'String');
            }
            if (data.hasOwnProperty('taxon')) {
                obj['taxon'] = ApiClient.convertToType(data['taxon'], 'String');
            }
            if (data.hasOwnProperty('taxon_label')) {
                obj['taxon_label'] = ApiClient.convertToType(data['taxon_label'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutocompleteResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutocompleteResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['category'])) {
            throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['equivalent_ids'])) {
            throw new Error("Expected the field `equivalent_ids` to be an array in the JSON data but got " + data['equivalent_ids']);
        }
        // ensure the json data is a string
        if (data['highlight'] && !(typeof data['highlight'] === 'string' || data['highlight'] instanceof String)) {
            throw new Error("Expected the field `highlight` to be a primitive type in the JSON string but got " + data['highlight']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['label'])) {
            throw new Error("Expected the field `label` to be an array in the JSON data but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['match'] && !(typeof data['match'] === 'string' || data['match'] instanceof String)) {
            throw new Error("Expected the field `match` to be a primitive type in the JSON string but got " + data['match']);
        }
        // ensure the json data is a string
        if (data['taxon'] && !(typeof data['taxon'] === 'string' || data['taxon'] instanceof String)) {
            throw new Error("Expected the field `taxon` to be a primitive type in the JSON string but got " + data['taxon']);
        }
        // ensure the json data is a string
        if (data['taxon_label'] && !(typeof data['taxon_label'] === 'string' || data['taxon_label'] instanceof String)) {
            throw new Error("Expected the field `taxon_label` to be a primitive type in the JSON string but got " + data['taxon_label']);
        }

        return true;
    }


}



/**
 * node categories
 * @member {Array.<String>} category
 */
AutocompleteResult.prototype['category'] = undefined;

/**
 * Equivalent IDs
 * @member {Array.<String>} equivalent_ids
 */
AutocompleteResult.prototype['equivalent_ids'] = undefined;

/**
 * True if highlight can be interpreted as html, else False
 * @member {Boolean} has_highlight
 */
AutocompleteResult.prototype['has_highlight'] = undefined;

/**
 * solr highlight
 * @member {String} highlight
 */
AutocompleteResult.prototype['highlight'] = undefined;

/**
 * curie formatted id
 * @member {String} id
 */
AutocompleteResult.prototype['id'] = undefined;

/**
 * primary label (rdfs:label)
 * @member {Array.<String>} label
 */
AutocompleteResult.prototype['label'] = undefined;

/**
 * matched part of document (may be primary label, synonym, id, etc)
 * @member {String} match
 */
AutocompleteResult.prototype['match'] = undefined;

/**
 * taxon as NCBITaxon curie
 * @member {String} taxon
 */
AutocompleteResult.prototype['taxon'] = undefined;

/**
 * taxon label
 * @member {String} taxon_label
 */
AutocompleteResult.prototype['taxon_label'] = undefined;






export default AutocompleteResult;

