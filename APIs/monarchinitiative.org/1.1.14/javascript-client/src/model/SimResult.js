/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimMatch from './SimMatch';
import SimMetadata from './SimMetadata';
import SimQuery from './SimQuery';

/**
 * The SimResult model module.
 * @module model/SimResult
 * @version 1.1.14
 */
class SimResult {
    /**
     * Constructs a new <code>SimResult</code>.
     * @alias module:model/SimResult
     */
    constructor() { 
        
        SimResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SimResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimResult} obj Optional instance to populate.
     * @return {module:model/SimResult} The populated <code>SimResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimResult();

            if (data.hasOwnProperty('matches')) {
                obj['matches'] = ApiClient.convertToType(data['matches'], [SimMatch]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = SimMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = SimQuery.constructFromObject(data['query']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimResult</code>.
     */
    static validateJSON(data) {
        if (data['matches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['matches'])) {
                throw new Error("Expected the field `matches` to be an array in the JSON data but got " + data['matches']);
            }
            // validate the optional field `matches` (array)
            for (const item of data['matches']) {
                SimMatch.validateJSON(item);
            };
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          SimMetadata.validateJSON(data['metadata']);
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          SimQuery.validateJSON(data['query']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/SimMatch>} matches
 */
SimResult.prototype['matches'] = undefined;

/**
 * @member {module:model/SimMetadata} metadata
 */
SimResult.prototype['metadata'] = undefined;

/**
 * @member {module:model/SimQuery} query
 */
SimResult.prototype['query'] = undefined;






export default SimResult;

