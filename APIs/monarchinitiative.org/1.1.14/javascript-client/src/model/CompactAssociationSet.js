/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CompactAssociationSet model module.
 * @module model/CompactAssociationSet
 * @version 1.1.14
 */
class CompactAssociationSet {
    /**
     * Constructs a new <code>CompactAssociationSet</code>.
     * @alias module:model/CompactAssociationSet
     * @param objects {Array.<String>} List of O, for a given (S,R) pair, yielding (S,R,O) triples. E.g. list of MPs for (MGI:nnn, has_phenotype)
     * @param relation {String} Relationship type connecting subject and object list
     * @param subject {String} Subject of association (what it is about), e.g. MGI:1201606
     */
    constructor(objects, relation, subject) { 
        
        CompactAssociationSet.initialize(this, objects, relation, subject);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objects, relation, subject) { 
        obj['objects'] = objects;
        obj['relation'] = relation;
        obj['subject'] = subject;
    }

    /**
     * Constructs a <code>CompactAssociationSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompactAssociationSet} obj Optional instance to populate.
     * @return {module:model/CompactAssociationSet} The populated <code>CompactAssociationSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompactAssociationSet();

            if (data.hasOwnProperty('objects')) {
                obj['objects'] = ApiClient.convertToType(data['objects'], ['String']);
            }
            if (data.hasOwnProperty('relation')) {
                obj['relation'] = ApiClient.convertToType(data['relation'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompactAssociationSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompactAssociationSet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CompactAssociationSet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['objects'])) {
            throw new Error("Expected the field `objects` to be an array in the JSON data but got " + data['objects']);
        }
        // ensure the json data is a string
        if (data['relation'] && !(typeof data['relation'] === 'string' || data['relation'] instanceof String)) {
            throw new Error("Expected the field `relation` to be a primitive type in the JSON string but got " + data['relation']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}

CompactAssociationSet.RequiredProperties = ["objects", "relation", "subject"];

/**
 * List of O, for a given (S,R) pair, yielding (S,R,O) triples. E.g. list of MPs for (MGI:nnn, has_phenotype)
 * @member {Array.<String>} objects
 */
CompactAssociationSet.prototype['objects'] = undefined;

/**
 * Relationship type connecting subject and object list
 * @member {String} relation
 */
CompactAssociationSet.prototype['relation'] = undefined;

/**
 * Subject of association (what it is about), e.g. MGI:1201606
 * @member {String} subject
 */
CompactAssociationSet.prototype['subject'] = undefined;






export default CompactAssociationSet;

