/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Node from './Node';
import SimMatchAllOfPairwiseMatch from './SimMatchAllOfPairwiseMatch';
import TypedNode from './TypedNode';

/**
 * The SimMatch model module.
 * @module model/SimMatch
 * @version 1.1.14
 */
class SimMatch {
    /**
     * Constructs a new <code>SimMatch</code>.
     * @alias module:model/SimMatch
     * @implements module:model/TypedNode
     * @param id {String} ID or CURIE e.g. MGI:1201606
     */
    constructor(id) { 
        TypedNode.initialize(this, id);
        SimMatch.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>SimMatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimMatch} obj Optional instance to populate.
     * @return {module:model/SimMatch} The populated <code>SimMatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimMatch();
            TypedNode.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('taxon')) {
                obj['taxon'] = ApiClient.convertToType(data['taxon'], Node);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('pairwise_match')) {
                obj['pairwise_match'] = ApiClient.convertToType(data['pairwise_match'], [SimMatchAllOfPairwiseMatch]);
            }
            if (data.hasOwnProperty('rank')) {
                obj['rank'] = ApiClient.convertToType(data['rank'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('significance')) {
                obj['significance'] = ApiClient.convertToType(data['significance'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimMatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimMatch</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SimMatch.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // validate the optional field `taxon`
        if (data['taxon']) { // data not null
          Node.validateJSON(data['taxon']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['pairwise_match']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pairwise_match'])) {
                throw new Error("Expected the field `pairwise_match` to be an array in the JSON data but got " + data['pairwise_match']);
            }
            // validate the optional field `pairwise_match` (array)
            for (const item of data['pairwise_match']) {
                SimMatchAllOfPairwiseMatch.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['rank'] && !(typeof data['rank'] === 'string' || data['rank'] instanceof String)) {
            throw new Error("Expected the field `rank` to be a primitive type in the JSON string but got " + data['rank']);
        }
        // ensure the json data is a string
        if (data['significance'] && !(typeof data['significance'] === 'string' || data['significance'] instanceof String)) {
            throw new Error("Expected the field `significance` to be a primitive type in the JSON string but got " + data['significance']);
        }

        return true;
    }


}

SimMatch.RequiredProperties = ["id"];

/**
 * ID or CURIE e.g. MGI:1201606
 * @member {String} id
 */
SimMatch.prototype['id'] = undefined;

/**
 * RDFS Label
 * @member {String} label
 */
SimMatch.prototype['label'] = undefined;

/**
 * taxon
 * @member {module:model/Node} taxon
 */
SimMatch.prototype['taxon'] = undefined;

/**
 * node type (eg phenotype, disease)
 * @member {String} type
 */
SimMatch.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/SimMatchAllOfPairwiseMatch>} pairwise_match
 */
SimMatch.prototype['pairwise_match'] = undefined;

/**
 * rank
 * @member {String} rank
 */
SimMatch.prototype['rank'] = undefined;

/**
 * sim score
 * @member {Number} score
 */
SimMatch.prototype['score'] = undefined;

/**
 * p-value
 * @member {String} significance
 */
SimMatch.prototype['significance'] = undefined;


// Implement TypedNode interface:
/**
 * ID or CURIE e.g. MGI:1201606
 * @member {String} id
 */
TypedNode.prototype['id'] = undefined;
/**
 * RDFS Label
 * @member {String} label
 */
TypedNode.prototype['label'] = undefined;
/**
 * taxon
 * @member {module:model/Node} taxon
 */
TypedNode.prototype['taxon'] = undefined;
/**
 * node type (eg phenotype, disease)
 * @member {String} type
 */
TypedNode.prototype['type'] = undefined;




export default SimMatch;

