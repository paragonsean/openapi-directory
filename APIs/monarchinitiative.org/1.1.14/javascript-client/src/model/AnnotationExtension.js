/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NamedObject from './NamedObject';
import Relation from './Relation';

/**
 * The AnnotationExtension model module.
 * @module model/AnnotationExtension
 * @version 1.1.14
 */
class AnnotationExtension {
    /**
     * Constructs a new <code>AnnotationExtension</code>.
     * @alias module:model/AnnotationExtension
     */
    constructor() { 
        
        AnnotationExtension.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnnotationExtension</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnnotationExtension} obj Optional instance to populate.
     * @return {module:model/AnnotationExtension} The populated <code>AnnotationExtension</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnnotationExtension();

            if (data.hasOwnProperty('filler')) {
                obj['filler'] = ApiClient.convertToType(data['filler'], NamedObject);
            }
            if (data.hasOwnProperty('relation_chain')) {
                obj['relation_chain'] = ApiClient.convertToType(data['relation_chain'], [Relation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnnotationExtension</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnnotationExtension</code>.
     */
    static validateJSON(data) {
        // validate the optional field `filler`
        if (data['filler']) { // data not null
          NamedObject.validateJSON(data['filler']);
        }
        if (data['relation_chain']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relation_chain'])) {
                throw new Error("Expected the field `relation_chain` to be an array in the JSON data but got " + data['relation_chain']);
            }
            // validate the optional field `relation_chain` (array)
            for (const item of data['relation_chain']) {
                Relation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Extension interpreted as OWL expression (r1 some r2 some .. some filler).
 * @member {module:model/NamedObject} filler
 */
AnnotationExtension.prototype['filler'] = undefined;

/**
 * Relationship type. If more than one value, interpreted as chain
 * @member {Array.<module:model/Relation>} relation_chain
 */
AnnotationExtension.prototype['relation_chain'] = undefined;






export default AnnotationExtension;

