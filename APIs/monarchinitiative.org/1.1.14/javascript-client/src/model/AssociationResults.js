/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Association from './Association';
import CompactAssociationSet from './CompactAssociationSet';
import SearchResult from './SearchResult';

/**
 * The AssociationResults model module.
 * @module model/AssociationResults
 * @version 1.1.14
 */
class AssociationResults {
    /**
     * Constructs a new <code>AssociationResults</code>.
     * @alias module:model/AssociationResults
     * @implements module:model/SearchResult
     */
    constructor() { 
        SearchResult.initialize(this);
        AssociationResults.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssociationResults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssociationResults} obj Optional instance to populate.
     * @return {module:model/AssociationResults} The populated <code>AssociationResults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssociationResults();
            SearchResult.constructFromObject(data, obj);

            if (data.hasOwnProperty('docs')) {
                obj['docs'] = ApiClient.convertToType(data['docs'], [Object]);
            }
            if (data.hasOwnProperty('facet_counts')) {
                obj['facet_counts'] = ApiClient.convertToType(data['facet_counts'], Object);
            }
            if (data.hasOwnProperty('highlighting')) {
                obj['highlighting'] = ApiClient.convertToType(data['highlighting'], Object);
            }
            if (data.hasOwnProperty('numFound')) {
                obj['numFound'] = ApiClient.convertToType(data['numFound'], 'Number');
            }
            if (data.hasOwnProperty('associations')) {
                obj['associations'] = ApiClient.convertToType(data['associations'], [Association]);
            }
            if (data.hasOwnProperty('compact_associations')) {
                obj['compact_associations'] = ApiClient.convertToType(data['compact_associations'], [CompactAssociationSet]);
            }
            if (data.hasOwnProperty('objects')) {
                obj['objects'] = ApiClient.convertToType(data['objects'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssociationResults</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssociationResults</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['docs'])) {
            throw new Error("Expected the field `docs` to be an array in the JSON data but got " + data['docs']);
        }
        if (data['associations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['associations'])) {
                throw new Error("Expected the field `associations` to be an array in the JSON data but got " + data['associations']);
            }
            // validate the optional field `associations` (array)
            for (const item of data['associations']) {
                Association.validateJSON(item);
            };
        }
        if (data['compact_associations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['compact_associations'])) {
                throw new Error("Expected the field `compact_associations` to be an array in the JSON data but got " + data['compact_associations']);
            }
            // validate the optional field `compact_associations` (array)
            for (const item of data['compact_associations']) {
                CompactAssociationSet.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['objects'])) {
            throw new Error("Expected the field `objects` to be an array in the JSON data but got " + data['objects']);
        }

        return true;
    }


}



/**
 * solr docs
 * @member {Array.<Object>} docs
 */
AssociationResults.prototype['docs'] = undefined;

/**
 * Mapping between field names and association counts
 * @member {Object} facet_counts
 */
AssociationResults.prototype['facet_counts'] = undefined;

/**
 * Mapping between id and solr highlight
 * @member {Object} highlighting
 */
AssociationResults.prototype['highlighting'] = undefined;

/**
 * total number of associations matching query
 * @member {Number} numFound
 */
AssociationResults.prototype['numFound'] = undefined;

/**
 * Complete representation of full association object, plus evidence
 * @member {Array.<module:model/Association>} associations
 */
AssociationResults.prototype['associations'] = undefined;

/**
 * Compact representation in which objects (e.g. phenotypes) are collected for subject-predicate pairs
 * @member {Array.<module:model/CompactAssociationSet>} compact_associations
 */
AssociationResults.prototype['compact_associations'] = undefined;

/**
 * List of distinct objects used
 * @member {Array.<String>} objects
 */
AssociationResults.prototype['objects'] = undefined;


// Implement SearchResult interface:
/**
 * solr docs
 * @member {Array.<Object>} docs
 */
SearchResult.prototype['docs'] = undefined;
/**
 * Mapping between field names and association counts
 * @member {Object} facet_counts
 */
SearchResult.prototype['facet_counts'] = undefined;
/**
 * Mapping between id and solr highlight
 * @member {Object} highlighting
 */
SearchResult.prototype['highlighting'] = undefined;
/**
 * total number of associations matching query
 * @member {Number} numFound
 */
SearchResult.prototype['numFound'] = undefined;




export default AssociationResults;

