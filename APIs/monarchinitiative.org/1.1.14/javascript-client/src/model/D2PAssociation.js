/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnnotationExtension from './AnnotationExtension';
import Association from './Association';
import BioObjectCore from './BioObjectCore';
import EntityReference from './EntityReference';
import Graph from './Graph';
import RelationRef from './RelationRef';

/**
 * The D2PAssociation model module.
 * @module model/D2PAssociation
 * @version 1.1.14
 */
class D2PAssociation {
    /**
     * Constructs a new <code>D2PAssociation</code>.
     * @alias module:model/D2PAssociation
     * @implements module:model/Association
     * @param id {String} Association/annotation unique ID
     * @param object {module:model/BioObjectCore} Object (sensu RDF), aka target, e.g. HP:0000448, MP:0002109, DOID:14330
     * @param relation {module:model/RelationRef} Relationship type connecting subject and object
     * @param subject {module:model/BioObjectCore} Subject of association (what it is about), e.g. ClinVar:nnn, MGI:1201606
     */
    constructor(id, object, relation, subject) { 
        Association.initialize(this, id, object, relation, subject);
        D2PAssociation.initialize(this, id, object, relation, subject);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, object, relation, subject) { 
        obj['id'] = id;
        obj['object'] = object;
        obj['relation'] = relation;
        obj['subject'] = subject;
    }

    /**
     * Constructs a <code>D2PAssociation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/D2PAssociation} obj Optional instance to populate.
     * @return {module:model/D2PAssociation} The populated <code>D2PAssociation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new D2PAssociation();
            Association.constructFromObject(data, obj);

            if (data.hasOwnProperty('evidence_graph')) {
                obj['evidence_graph'] = ApiClient.convertToType(data['evidence_graph'], Graph);
            }
            if (data.hasOwnProperty('evidence_types')) {
                obj['evidence_types'] = ApiClient.convertToType(data['evidence_types'], [EntityReference]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('negated')) {
                obj['negated'] = ApiClient.convertToType(data['negated'], 'Boolean');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], BioObjectCore);
            }
            if (data.hasOwnProperty('object_eq')) {
                obj['object_eq'] = ApiClient.convertToType(data['object_eq'], ['String']);
            }
            if (data.hasOwnProperty('object_extensions')) {
                obj['object_extensions'] = ApiClient.convertToType(data['object_extensions'], [AnnotationExtension]);
            }
            if (data.hasOwnProperty('provided_by')) {
                obj['provided_by'] = ApiClient.convertToType(data['provided_by'], ['String']);
            }
            if (data.hasOwnProperty('publications')) {
                obj['publications'] = ApiClient.convertToType(data['publications'], [EntityReference]);
            }
            if (data.hasOwnProperty('qualifiers')) {
                obj['qualifiers'] = ApiClient.convertToType(data['qualifiers'], ['String']);
            }
            if (data.hasOwnProperty('relation')) {
                obj['relation'] = ApiClient.convertToType(data['relation'], RelationRef);
            }
            if (data.hasOwnProperty('slim')) {
                obj['slim'] = ApiClient.convertToType(data['slim'], ['String']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], BioObjectCore);
            }
            if (data.hasOwnProperty('subject_eq')) {
                obj['subject_eq'] = ApiClient.convertToType(data['subject_eq'], ['String']);
            }
            if (data.hasOwnProperty('subject_extensions')) {
                obj['subject_extensions'] = ApiClient.convertToType(data['subject_extensions'], [AnnotationExtension]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], EntityReference);
            }
            if (data.hasOwnProperty('onset')) {
                obj['onset'] = ApiClient.convertToType(data['onset'], EntityReference);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>D2PAssociation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>D2PAssociation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of D2PAssociation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `evidence_graph`
        if (data['evidence_graph']) { // data not null
          Graph.validateJSON(data['evidence_graph']);
        }
        if (data['evidence_types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['evidence_types'])) {
                throw new Error("Expected the field `evidence_types` to be an array in the JSON data but got " + data['evidence_types']);
            }
            // validate the optional field `evidence_types` (array)
            for (const item of data['evidence_types']) {
                EntityReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `object`
        if (data['object']) { // data not null
          BioObjectCore.validateJSON(data['object']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['object_eq'])) {
            throw new Error("Expected the field `object_eq` to be an array in the JSON data but got " + data['object_eq']);
        }
        if (data['object_extensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['object_extensions'])) {
                throw new Error("Expected the field `object_extensions` to be an array in the JSON data but got " + data['object_extensions']);
            }
            // validate the optional field `object_extensions` (array)
            for (const item of data['object_extensions']) {
                AnnotationExtension.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['provided_by'])) {
            throw new Error("Expected the field `provided_by` to be an array in the JSON data but got " + data['provided_by']);
        }
        if (data['publications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['publications'])) {
                throw new Error("Expected the field `publications` to be an array in the JSON data but got " + data['publications']);
            }
            // validate the optional field `publications` (array)
            for (const item of data['publications']) {
                EntityReference.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['qualifiers'])) {
            throw new Error("Expected the field `qualifiers` to be an array in the JSON data but got " + data['qualifiers']);
        }
        // validate the optional field `relation`
        if (data['relation']) { // data not null
          RelationRef.validateJSON(data['relation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['slim'])) {
            throw new Error("Expected the field `slim` to be an array in the JSON data but got " + data['slim']);
        }
        // validate the optional field `subject`
        if (data['subject']) { // data not null
          BioObjectCore.validateJSON(data['subject']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subject_eq'])) {
            throw new Error("Expected the field `subject_eq` to be an array in the JSON data but got " + data['subject_eq']);
        }
        if (data['subject_extensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subject_extensions'])) {
                throw new Error("Expected the field `subject_extensions` to be an array in the JSON data but got " + data['subject_extensions']);
            }
            // validate the optional field `subject_extensions` (array)
            for (const item of data['subject_extensions']) {
                AnnotationExtension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `frequency`
        if (data['frequency']) { // data not null
          EntityReference.validateJSON(data['frequency']);
        }
        // validate the optional field `onset`
        if (data['onset']) { // data not null
          EntityReference.validateJSON(data['onset']);
        }

        return true;
    }


}

D2PAssociation.RequiredProperties = ["id", "object", "relation", "subject"];

/**
 * An indirect association is a join between two or more direct assocations, e.g. gene to disease via ortholog. We record the full set of associations as a graph object
 * @member {module:model/Graph} evidence_graph
 */
D2PAssociation.prototype['evidence_graph'] = undefined;

/**
 * Evidence types (ECO classes)
 * @member {Array.<module:model/EntityReference>} evidence_types
 */
D2PAssociation.prototype['evidence_types'] = undefined;

/**
 * Association/annotation unique ID
 * @member {String} id
 */
D2PAssociation.prototype['id'] = undefined;

/**
 * True if association is negated
 * @member {Boolean} negated
 */
D2PAssociation.prototype['negated'] = undefined;

/**
 * Object (sensu RDF), aka target, e.g. HP:0000448, MP:0002109, DOID:14330
 * @member {module:model/BioObjectCore} object
 */
D2PAssociation.prototype['object'] = undefined;

/**
 * Equivalent identifiers to object node
 * @member {Array.<String>} object_eq
 */
D2PAssociation.prototype['object_eq'] = undefined;

/**
 * @member {Array.<module:model/AnnotationExtension>} object_extensions
 */
D2PAssociation.prototype['object_extensions'] = undefined;

/**
 * Provider of association, e.g. Orphanet, ClinVar
 * @member {Array.<String>} provided_by
 */
D2PAssociation.prototype['provided_by'] = undefined;

/**
 * Publications supporting association, extracted from evidence graph
 * @member {Array.<module:model/EntityReference>} publications
 */
D2PAssociation.prototype['publications'] = undefined;

/**
 * Qualifier on the association
 * @member {Array.<String>} qualifiers
 */
D2PAssociation.prototype['qualifiers'] = undefined;

/**
 * Relationship type connecting subject and object
 * @member {module:model/RelationRef} relation
 */
D2PAssociation.prototype['relation'] = undefined;

/**
 * Objects mapped to a slim
 * @member {Array.<String>} slim
 */
D2PAssociation.prototype['slim'] = undefined;

/**
 * Subject of association (what it is about), e.g. ClinVar:nnn, MGI:1201606
 * @member {module:model/BioObjectCore} subject
 */
D2PAssociation.prototype['subject'] = undefined;

/**
 * Equivalent identifiers to subject node
 * @member {Array.<String>} subject_eq
 */
D2PAssociation.prototype['subject_eq'] = undefined;

/**
 * @member {Array.<module:model/AnnotationExtension>} subject_extensions
 */
D2PAssociation.prototype['subject_extensions'] = undefined;

/**
 * Type of association, e.g. gene-phenotype
 * @member {String} type
 */
D2PAssociation.prototype['type'] = undefined;

/**
 * Frequency of phenotype in patients with disease
 * @member {module:model/EntityReference} frequency
 */
D2PAssociation.prototype['frequency'] = undefined;

/**
 * Onset of phenotype in disease process
 * @member {module:model/EntityReference} onset
 */
D2PAssociation.prototype['onset'] = undefined;


// Implement Association interface:
/**
 * An indirect association is a join between two or more direct assocations, e.g. gene to disease via ortholog. We record the full set of associations as a graph object
 * @member {module:model/Graph} evidence_graph
 */
Association.prototype['evidence_graph'] = undefined;
/**
 * Evidence types (ECO classes)
 * @member {Array.<module:model/EntityReference>} evidence_types
 */
Association.prototype['evidence_types'] = undefined;
/**
 * Association/annotation unique ID
 * @member {String} id
 */
Association.prototype['id'] = undefined;
/**
 * True if association is negated
 * @member {Boolean} negated
 */
Association.prototype['negated'] = undefined;
/**
 * Object (sensu RDF), aka target, e.g. HP:0000448, MP:0002109, DOID:14330
 * @member {module:model/BioObjectCore} object
 */
Association.prototype['object'] = undefined;
/**
 * Equivalent identifiers to object node
 * @member {Array.<String>} object_eq
 */
Association.prototype['object_eq'] = undefined;
/**
 * @member {Array.<module:model/AnnotationExtension>} object_extensions
 */
Association.prototype['object_extensions'] = undefined;
/**
 * Provider of association, e.g. Orphanet, ClinVar
 * @member {Array.<String>} provided_by
 */
Association.prototype['provided_by'] = undefined;
/**
 * Publications supporting association, extracted from evidence graph
 * @member {Array.<module:model/EntityReference>} publications
 */
Association.prototype['publications'] = undefined;
/**
 * Qualifier on the association
 * @member {Array.<String>} qualifiers
 */
Association.prototype['qualifiers'] = undefined;
/**
 * Relationship type connecting subject and object
 * @member {module:model/RelationRef} relation
 */
Association.prototype['relation'] = undefined;
/**
 * Objects mapped to a slim
 * @member {Array.<String>} slim
 */
Association.prototype['slim'] = undefined;
/**
 * Subject of association (what it is about), e.g. ClinVar:nnn, MGI:1201606
 * @member {module:model/BioObjectCore} subject
 */
Association.prototype['subject'] = undefined;
/**
 * Equivalent identifiers to subject node
 * @member {Array.<String>} subject_eq
 */
Association.prototype['subject_eq'] = undefined;
/**
 * @member {Array.<module:model/AnnotationExtension>} subject_extensions
 */
Association.prototype['subject_extensions'] = undefined;
/**
 * Type of association, e.g. gene-phenotype
 * @member {String} type
 */
Association.prototype['type'] = undefined;




export default D2PAssociation;

