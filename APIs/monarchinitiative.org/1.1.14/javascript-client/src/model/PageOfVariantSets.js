/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APageOfResults from './APageOfResults';
import VariantSet from './VariantSet';

/**
 * The PageOfVariantSets model module.
 * @module model/PageOfVariantSets
 * @version 1.1.14
 */
class PageOfVariantSets {
    /**
     * Constructs a new <code>PageOfVariantSets</code>.
     * @alias module:model/PageOfVariantSets
     * @implements module:model/APageOfResults
     */
    constructor() { 
        APageOfResults.initialize(this);
        PageOfVariantSets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PageOfVariantSets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageOfVariantSets} obj Optional instance to populate.
     * @return {module:model/PageOfVariantSets} The populated <code>PageOfVariantSets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PageOfVariantSets();
            APageOfResults.constructFromObject(data, obj);

            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], 'Number');
            }
            if (data.hasOwnProperty('per_page')) {
                obj['per_page'] = ApiClient.convertToType(data['per_page'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [VariantSet]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PageOfVariantSets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PageOfVariantSets</code>.
     */
    static validateJSON(data) {
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                VariantSet.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Number of this page of results
 * @member {Number} page
 */
PageOfVariantSets.prototype['page'] = undefined;

/**
 * Total number of pages of results
 * @member {Number} pages
 */
PageOfVariantSets.prototype['pages'] = undefined;

/**
 * Number of items per page of results
 * @member {Number} per_page
 */
PageOfVariantSets.prototype['per_page'] = undefined;

/**
 * Total number of results
 * @member {Number} total
 */
PageOfVariantSets.prototype['total'] = undefined;

/**
 * @member {Array.<module:model/VariantSet>} items
 */
PageOfVariantSets.prototype['items'] = undefined;


// Implement APageOfResults interface:
/**
 * Number of this page of results
 * @member {Number} page
 */
APageOfResults.prototype['page'] = undefined;
/**
 * Total number of pages of results
 * @member {Number} pages
 */
APageOfResults.prototype['pages'] = undefined;
/**
 * Number of items per page of results
 * @member {Number} per_page
 */
APageOfResults.prototype['per_page'] = undefined;
/**
 * Total number of results
 * @member {Number} total
 */
APageOfResults.prototype['total'] = undefined;




export default PageOfVariantSets;

