/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Edge model module.
 * @module model/Edge
 * @version 1.1.14
 */
class Edge {
    /**
     * Constructs a new <code>Edge</code>.
     * @alias module:model/Edge
     */
    constructor() { 
        
        Edge.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Edge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Edge} obj Optional instance to populate.
     * @return {module:model/Edge} The populated <code>Edge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Edge();

            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], Object);
            }
            if (data.hasOwnProperty('obj')) {
                obj['obj'] = ApiClient.convertToType(data['obj'], 'String');
            }
            if (data.hasOwnProperty('pred')) {
                obj['pred'] = ApiClient.convertToType(data['pred'], 'String');
            }
            if (data.hasOwnProperty('sub')) {
                obj['sub'] = ApiClient.convertToType(data['sub'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Edge</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Edge</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['obj'] && !(typeof data['obj'] === 'string' || data['obj'] instanceof String)) {
            throw new Error("Expected the field `obj` to be a primitive type in the JSON string but got " + data['obj']);
        }
        // ensure the json data is a string
        if (data['pred'] && !(typeof data['pred'] === 'string' || data['pred'] instanceof String)) {
            throw new Error("Expected the field `pred` to be a primitive type in the JSON string but got " + data['pred']);
        }
        // ensure the json data is a string
        if (data['sub'] && !(typeof data['sub'] === 'string' || data['sub'] instanceof String)) {
            throw new Error("Expected the field `sub` to be a primitive type in the JSON string but got " + data['sub']);
        }

        return true;
    }


}



/**
 * metadata about the Edge
 * @member {Object} meta
 */
Edge.prototype['meta'] = undefined;

/**
 * Object (target) Node ID
 * @member {String} obj
 */
Edge.prototype['obj'] = undefined;

/**
 * Predicate (relation) ID
 * @member {String} pred
 */
Edge.prototype['pred'] = undefined;

/**
 * Subject (source) Node ID
 * @member {String} sub
 */
Edge.prototype['sub'] = undefined;






export default Edge;

