/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractPropertyValue from './AbstractPropertyValue';

/**
 * The SynonymPropertyValue model module.
 * @module model/SynonymPropertyValue
 * @version 1.1.14
 */
class SynonymPropertyValue {
    /**
     * Constructs a new <code>SynonymPropertyValue</code>.
     * @alias module:model/SynonymPropertyValue
     * @implements module:model/AbstractPropertyValue
     */
    constructor() { 
        AbstractPropertyValue.initialize(this);
        SynonymPropertyValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SynonymPropertyValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SynonymPropertyValue} obj Optional instance to populate.
     * @return {module:model/SynonymPropertyValue} The populated <code>SynonymPropertyValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SynonymPropertyValue();
            AbstractPropertyValue.constructFromObject(data, obj);

            if (data.hasOwnProperty('pred')) {
                obj['pred'] = ApiClient.convertToType(data['pred'], 'String');
            }
            if (data.hasOwnProperty('val')) {
                obj['val'] = ApiClient.convertToType(data['val'], 'String');
            }
            if (data.hasOwnProperty('xrefs')) {
                obj['xrefs'] = ApiClient.convertToType(data['xrefs'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SynonymPropertyValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SynonymPropertyValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pred'] && !(typeof data['pred'] === 'string' || data['pred'] instanceof String)) {
            throw new Error("Expected the field `pred` to be a primitive type in the JSON string but got " + data['pred']);
        }
        // ensure the json data is a string
        if (data['val'] && !(typeof data['val'] === 'string' || data['val'] instanceof String)) {
            throw new Error("Expected the field `val` to be a primitive type in the JSON string but got " + data['val']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['xrefs'])) {
            throw new Error("Expected the field `xrefs` to be an array in the JSON data but got " + data['xrefs']);
        }

        return true;
    }


}



/**
 * predicate (attribute) part
 * @member {String} pred
 */
SynonymPropertyValue.prototype['pred'] = undefined;

/**
 * value part
 * @member {String} val
 */
SynonymPropertyValue.prototype['val'] = undefined;

/**
 * Xrefs provenance for property-value
 * @member {Array.<String>} xrefs
 */
SynonymPropertyValue.prototype['xrefs'] = undefined;


// Implement AbstractPropertyValue interface:
/**
 * predicate (attribute) part
 * @member {String} pred
 */
AbstractPropertyValue.prototype['pred'] = undefined;
/**
 * value part
 * @member {String} val
 */
AbstractPropertyValue.prototype['val'] = undefined;
/**
 * Xrefs provenance for property-value
 * @member {Array.<String>} xrefs
 */
AbstractPropertyValue.prototype['xrefs'] = undefined;




export default SynonymPropertyValue;

