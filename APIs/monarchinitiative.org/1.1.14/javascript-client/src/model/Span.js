/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Token from './Token';

/**
 * The Span model module.
 * @module model/Span
 * @version 1.1.14
 */
class Span {
    /**
     * Constructs a new <code>Span</code>.
     * @alias module:model/Span
     */
    constructor() { 
        
        Span.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Span</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Span} obj Optional instance to populate.
     * @return {module:model/Span} The populated <code>Span</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Span();

            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], [Token]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Span</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Span</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        if (data['token']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['token'])) {
                throw new Error("Expected the field `token` to be an array in the JSON data but got " + data['token']);
            }
            // validate the optional field `token` (array)
            for (const item of data['token']) {
                Token.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * end of span text relative to content
 * @member {Number} end
 */
Span.prototype['end'] = undefined;

/**
 * start of span text relative to content
 * @member {Number} start
 */
Span.prototype['start'] = undefined;

/**
 * span text
 * @member {String} text
 */
Span.prototype['text'] = undefined;

/**
 * A token or entity extracted from the span text
 * @member {Array.<module:model/Token>} token
 */
Span.prototype['token'] = undefined;






export default Span;

