/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociationResults from '../model/AssociationResults';
import Graph from '../model/Graph';

/**
* EvidenceGraph service.
* @module api/EvidenceGraphApi
* @version 1.1.14
*/
export default class EvidenceGraphApi {

    /**
    * Constructs a new EvidenceGraphApi. 
    * @alias module:api/EvidenceGraphApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEvidenceGraphObject operation.
     * @callback module:api/EvidenceGraphApi~getEvidenceGraphObjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Graph>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns evidence graph object for a given association
     * Note that every association is assumed to have a unique ID
     * @param {String} id association id, e.g. 68e686f6-d05b-46b8-ab1f-1da2fff97ada
     * @param {module:api/EvidenceGraphApi~getEvidenceGraphObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Graph>}
     */
    getEvidenceGraphObject(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEvidenceGraphObject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Graph];
      return this.apiClient.callApi(
        '/evidence/graph/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvidenceGraphTable operation.
     * @callback module:api/EvidenceGraphApi~getEvidenceGraphTableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns evidence as a association_results object given an association
     * Note that every association is assumed to have a unique ID
     * @param {String} id association id, e.g. 68e686f6-d05b-46b8-ab1f-1da2fff97ada
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isPublication = false)] If true, considers dc:source as edge
     * @param {module:api/EvidenceGraphApi~getEvidenceGraphTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getEvidenceGraphTable(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEvidenceGraphTable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'is_publication': opts['isPublication']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/evidence/graph/{id}/table', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
