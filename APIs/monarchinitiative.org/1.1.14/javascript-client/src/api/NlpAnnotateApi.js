/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityAnnotationResult from '../model/EntityAnnotationResult';

/**
* NlpAnnotate service.
* @module api/NlpAnnotateApi
* @version 1.1.14
*/
export default class NlpAnnotateApi {

    /**
    * Constructs a new NlpAnnotateApi. 
    * @alias module:api/NlpAnnotateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAnnotate operation.
     * @callback module:api/NlpAnnotateApi~getAnnotateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Annotate a given text using SciGraph annotator
     * @param {Object} opts Optional parameters
     * @param {String} [content] The text content to annotate
     * @param {Array.<String>} [includeCategory] Categories to include for annotation
     * @param {Array.<String>} [excludeCategory] Categories to exclude for annotation
     * @param {String} [minLength = '4')] The minimum number of characters in the annotated entity
     * @param {Boolean} [longestOnly = false)] Should only the longest entity be returned for an overlapping group
     * @param {Boolean} [includeAbbreviation = false)] Should abbreviations be included
     * @param {Boolean} [includeAcronym = false)] Should acronyms be included
     * @param {Boolean} [includeNumbers = false)] Should numbers be included
     * @param {module:api/NlpAnnotateApi~getAnnotateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAnnotate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'content': opts['content'],
        'include_category': this.apiClient.buildCollectionParam(opts['includeCategory'], 'multi'),
        'exclude_category': this.apiClient.buildCollectionParam(opts['excludeCategory'], 'multi'),
        'min_length': opts['minLength'],
        'longest_only': opts['longestOnly'],
        'include_abbreviation': opts['includeAbbreviation'],
        'include_acronym': opts['includeAcronym'],
        'include_numbers': opts['includeNumbers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/nlp/annotate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotateEntities operation.
     * @callback module:api/NlpAnnotateApi~getAnnotateEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityAnnotationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Annotate a given content using SciGraph annotator and get all entities from content
     * @param {Object} opts Optional parameters
     * @param {String} [content] The text content to annotate
     * @param {Array.<String>} [includeCategory] Categories to include for annotation
     * @param {Array.<String>} [excludeCategory] Categories to exclude for annotation
     * @param {String} [minLength = '4')] The minimum number of characters in the annotated entity
     * @param {Boolean} [longestOnly = false)] Should only the longest entity be returned for an overlapping group
     * @param {Boolean} [includeAbbreviation = false)] Should abbreviations be included
     * @param {Boolean} [includeAcronym = false)] Should acronyms be included
     * @param {Boolean} [includeNumbers = false)] Should numbers be included
     * @param {module:api/NlpAnnotateApi~getAnnotateEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityAnnotationResult}
     */
    getAnnotateEntities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'content': opts['content'],
        'include_category': this.apiClient.buildCollectionParam(opts['includeCategory'], 'multi'),
        'exclude_category': this.apiClient.buildCollectionParam(opts['excludeCategory'], 'multi'),
        'min_length': opts['minLength'],
        'longest_only': opts['longestOnly'],
        'include_abbreviation': opts['includeAbbreviation'],
        'include_acronym': opts['includeAcronym'],
        'include_numbers': opts['includeNumbers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityAnnotationResult;
      return this.apiClient.callApi(
        '/nlp/annotate/entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAnnotate operation.
     * @callback module:api/NlpAnnotateApi~postAnnotateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Annotate a given text using SciGraph annotator
     * @param {Object} opts Optional parameters
     * @param {String} [content] The text content to annotate
     * @param {Array.<String>} [includeCategory] Categories to include for annotation
     * @param {Array.<String>} [excludeCategory] Categories to exclude for annotation
     * @param {String} [minLength = '4')] The minimum number of characters in the annotated entity
     * @param {Boolean} [longestOnly = false)] Should only the longest entity be returned for an overlapping group
     * @param {Boolean} [includeAbbreviation = false)] Should abbreviations be included
     * @param {Boolean} [includeAcronym = false)] Should acronyms be included
     * @param {Boolean} [includeNumbers = false)] Should numbers be included
     * @param {module:api/NlpAnnotateApi~postAnnotateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAnnotate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'content': opts['content'],
        'include_category': this.apiClient.buildCollectionParam(opts['includeCategory'], 'multi'),
        'exclude_category': this.apiClient.buildCollectionParam(opts['excludeCategory'], 'multi'),
        'min_length': opts['minLength'],
        'longest_only': opts['longestOnly'],
        'include_abbreviation': opts['includeAbbreviation'],
        'include_acronym': opts['includeAcronym'],
        'include_numbers': opts['includeNumbers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/nlp/annotate/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAnnotateEntities operation.
     * @callback module:api/NlpAnnotateApi~postAnnotateEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityAnnotationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Annotate a given content using SciGraph annotator and get all entities from content
     * @param {Object} opts Optional parameters
     * @param {String} [content] The text content to annotate
     * @param {Array.<String>} [includeCategory] Categories to include for annotation
     * @param {Array.<String>} [excludeCategory] Categories to exclude for annotation
     * @param {String} [minLength = '4')] The minimum number of characters in the annotated entity
     * @param {Boolean} [longestOnly = false)] Should only the longest entity be returned for an overlapping group
     * @param {Boolean} [includeAbbreviation = false)] Should abbreviations be included
     * @param {Boolean} [includeAcronym = false)] Should acronyms be included
     * @param {Boolean} [includeNumbers = false)] Should numbers be included
     * @param {module:api/NlpAnnotateApi~postAnnotateEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityAnnotationResult}
     */
    postAnnotateEntities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'content': opts['content'],
        'include_category': this.apiClient.buildCollectionParam(opts['includeCategory'], 'multi'),
        'exclude_category': this.apiClient.buildCollectionParam(opts['excludeCategory'], 'multi'),
        'min_length': opts['minLength'],
        'longest_only': opts['longestOnly'],
        'include_abbreviation': opts['includeAbbreviation'],
        'include_acronym': opts['includeAcronym'],
        'include_numbers': opts['includeNumbers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityAnnotationResult;
      return this.apiClient.callApi(
        '/nlp/annotate/entities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
