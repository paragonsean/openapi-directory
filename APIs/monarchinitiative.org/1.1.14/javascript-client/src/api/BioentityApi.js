/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Association from '../model/Association';
import AssociationResults from '../model/AssociationResults';
import BioObject from '../model/BioObject';
import D2PAssociationResults from '../model/D2PAssociationResults';
import NamedObject from '../model/NamedObject';

/**
* Bioentity service.
* @module api/BioentityApi
* @version 1.1.14
*/
export default class BioentityApi {

    /**
    * Constructs a new BioentityApi. 
    * @alias module:api/BioentityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAnatomyGeneAssociations operation.
     * @callback module:api/BioentityApi~getAnatomyGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated with a given anatomy
     * @param {String} id CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getAnatomyGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getAnatomyGeneAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnatomyGeneAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/anatomy/{id}/genes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnatomyGeneByTaxonAssociations operation.
     * @callback module:api/BioentityApi~getAnatomyGeneByTaxonAssociationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns gene IDs for all genes associated with a given anatomy, filtered by taxon
     * For example, + NCBITaxon:10090 (mouse)
     * @param {String} taxid Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus)
     * @param {String} id CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getAnatomyGeneByTaxonAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAnatomyGeneByTaxonAssociations(taxid, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taxid' is set
      if (taxid === undefined || taxid === null) {
        throw new Error("Missing the required parameter 'taxid' when calling getAnatomyGeneByTaxonAssociations");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnatomyGeneByTaxonAssociations");
      }

      let pathParams = {
        'taxid': taxid,
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bioentity/anatomy/{id}/genes/{taxid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaseDiseaseAssociations operation.
     * @callback module:api/BioentityApi~getCaseDiseaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns diseases associated with a case
     * @param {String} id CURIE identifier for a case
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getCaseDiseaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getCaseDiseaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCaseDiseaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/case/{id}/diseases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaseGenotypeAssociations operation.
     * @callback module:api/BioentityApi~getCaseGenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotypes associated with a case
     * @param {String} id CURIE identifier for a case
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getCaseGenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getCaseGenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCaseGenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/case/{id}/genotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaseModelAssociations operation.
     * @callback module:api/BioentityApi~getCaseModelAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns models associated with a case
     * @param {String} id CURIE identifier for a case
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getCaseModelAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getCaseModelAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCaseModelAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/case/{id}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCasePhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getCasePhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with a case
     * @param {String} id CURIE identifier for a case
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getCasePhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getCasePhenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCasePhenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/case/{id}/phenotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaseVariantAssociations operation.
     * @callback module:api/BioentityApi~getCaseVariantAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns variants associated with a case
     * @param {String} id CURIE identifier for a case
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getCaseVariantAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getCaseVariantAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCaseVariantAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/case/{id}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseCaseAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseCaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns cases associated with a disease
     * @param {String} id CURIE identifier of disease, e.g. MONDO:0007103, MONDO:0010918. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getDiseaseCaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getDiseaseCaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDiseaseCaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/disease/{id}/cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseGeneAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated with a disease
     * @param {String} id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:model/String} [associationType = 'both')] Additional filters: causal, non_causal, both
     * @param {module:api/BioentityApi~getDiseaseGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getDiseaseGeneAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDiseaseGeneAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q'],
        'association_type': opts['associationType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/disease/{id}/genes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseGenotypeAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseGenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotypes associated with a disease
     * @param {String} id CURIE identifier of disease, e.g. Orphanet:399158, DOID:0080008. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getDiseaseGenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getDiseaseGenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDiseaseGenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/disease/{id}/genotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseModelAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseModelAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations to models of the disease
     * In the association object returned, the subject will be the disease, and the object will be the model. The model may be a gene or genetic element.  If the query disease is a general class, the association subject may be to a specific disease.  In some cases the association will be *direct*, for example if a paper asserts a genotype is a model of a disease.  In other cases, the association will be *indirect*, for example, chaining over orthology. In these cases the chain will be reflected in the *evidence graph*  * TODO: provide hook into owlsim for dynamic computation of models by similarity
     * @param {String} id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getDiseaseModelAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getDiseaseModelAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDiseaseModelAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/disease/{id}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseModelTaxonAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseModelTaxonAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations to models of the disease constrained by taxon
     * See /disease/<id>/models route for full details
     * @param {String} taxon CURIE of organism taxonomy class to constrain models, e.g NCBITaxon:10090 (M. musculus).   Higher level taxa may be used
     * @param {String} id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getDiseaseModelTaxonAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getDiseaseModelTaxonAssociations(taxon, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taxon' is set
      if (taxon === undefined || taxon === null) {
        throw new Error("Missing the required parameter 'taxon' when calling getDiseaseModelTaxonAssociations");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDiseaseModelTaxonAssociations");
      }

      let pathParams = {
        'taxon': taxon,
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/disease/{id}/models/{taxon}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseasePathwayAssociations operation.
     * @callback module:api/BioentityApi~getDiseasePathwayAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pathways associated with a disease
     * @param {String} id CURIE identifier of disease, e.g. DOID:4450. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getDiseasePathwayAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getDiseasePathwayAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDiseasePathwayAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/disease/{id}/pathways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseasePhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getDiseasePhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/D2PAssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with disease
     * @param {String} id CURIE identifier of disease, e.g. OMIM:605543, Orphanet:1934, DOID:678. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getDiseasePhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/D2PAssociationResults}
     */
    getDiseasePhenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDiseasePhenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = D2PAssociationResults;
      return this.apiClient.callApi(
        '/bioentity/disease/{id}/phenotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseasePublicationAssociations operation.
     * @callback module:api/BioentityApi~getDiseasePublicationAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns publications associated with a disease
     * @param {String} id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getDiseasePublicationAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getDiseasePublicationAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDiseasePublicationAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/disease/{id}/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseSubstanceAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseSubstanceAssociationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns substances associated with a disease
     * e.g. drugs or small molecules used to treat
     * @param {String} id CURIE identifier of disease, e.g. DOID:2841 (asthma). Equivalent IDs not yet supported
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getDiseaseSubstanceAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDiseaseSubstanceAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDiseaseSubstanceAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bioentity/disease/{id}/treatment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseVariantAssociations operation.
     * @callback module:api/BioentityApi~getDiseaseVariantAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns variants associated with a disease
     * @param {String} id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getDiseaseVariantAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getDiseaseVariantAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDiseaseVariantAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/disease/{id}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFunctionAssociations operation.
     * @callback module:api/BioentityApi~getFunctionAssociationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns annotations associated to a function term
     * @param {String} id CURIE identifier of a function term (e.g. GO:0044598)
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] beginning row
     * @param {Number} [rows = 100)] number of rows
     * @param {Array.<String>} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {module:api/BioentityApi~getFunctionAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFunctionAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFunctionAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'start': opts['start'],
        'rows': opts['rows'],
        'evidence': this.apiClient.buildCollectionParam(opts['evidence'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bioentity/function/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFunctionGeneAssociations operation.
     * @callback module:api/BioentityApi~getFunctionGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated to a GO term
     * @param {String} id CURIE identifier of a GO term, e.g. GO:0044598
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:model/String} [relationshipType = 'involved_in')] relationship type ('involved_in', 'involved_in_regulation_of' or 'acts_upstream_of_or_within')
     * @param {module:api/BioentityApi~getFunctionGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getFunctionGeneAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFunctionGeneAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q'],
        'relationship_type': opts['relationshipType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/function/{id}/genes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFunctionPublicationAssociations operation.
     * @callback module:api/BioentityApi~getFunctionPublicationAssociationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns publications associated to a GO term
     * @param {String} id CURIE identifier of a GO term, e.g. GO:0044598
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] beginning row
     * @param {Number} [rows = 100)] number of rows
     * @param {Array.<String>} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {module:api/BioentityApi~getFunctionPublicationAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFunctionPublicationAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFunctionPublicationAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'start': opts['start'],
        'rows': opts['rows'],
        'evidence': this.apiClient.buildCollectionParam(opts['evidence'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bioentity/function/{id}/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFunctionTaxonAssociations operation.
     * @callback module:api/BioentityApi~getFunctionTaxonAssociationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns taxons associated to a GO term
     * @param {String} id CURIE identifier of a GO term, e.g. GO:0044598
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] beginning row
     * @param {Number} [rows = 100)] number of rows
     * @param {Array.<String>} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {module:api/BioentityApi~getFunctionTaxonAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFunctionTaxonAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFunctionTaxonAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'start': opts['start'],
        'rows': opts['rows'],
        'evidence': this.apiClient.buildCollectionParam(opts['evidence'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bioentity/function/{id}/taxons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneAnatomyAssociations operation.
     * @callback module:api/BioentityApi~getGeneAnatomyAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns anatomical entities associated with a gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:13434
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGeneAnatomyAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneAnatomyAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneAnatomyAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/anatomy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneCaseAssociations operation.
     * @callback module:api/BioentityApi~getGeneCaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns cases associated with a gene
     * @param {String} id CURIE identifier of gene, e.g. HGNC:613, HGNC:11025
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getGeneCaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneCaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneCaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneDiseaseAssociations operation.
     * @callback module:api/BioentityApi~getGeneDiseaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns diseases associated with gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:model/String} [associationType = 'both')] Additional filters: causal, non_causal, both
     * @param {module:api/BioentityApi~getGeneDiseaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneDiseaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneDiseaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q'],
        'association_type': opts['associationType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/diseases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneExpressionAssociations operation.
     * @callback module:api/BioentityApi~getGeneExpressionAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns expression events for a gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGeneExpressionAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneExpressionAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneExpressionAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/expression/anatomy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneFunctionAssociations operation.
     * @callback module:api/BioentityApi~getGeneFunctionAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns function associations for a gene
     * IMPLEMENTATION DETAILS ----------------------  Note: currently this is implemented as a query to the GO/AmiGO solr instance. This directly supports IDs such as:   - ZFIN e.g. ZFIN:ZDB-GENE-050417-357  Note that the AmiGO GOlr natively stores MGI annotations to MGI:MGI:nn. However, the standard for biolink is MGI:nnnn, so you should use this (will be transparently mapped to legacy ID)  Additionally, for some species such as Human, GO has the annotation attached to the UniProt ID. Again, this should be transparently handled; e.g. you can use NCBIGene:6469, and this will be mapped behind the scenes for querying.
     * @param {String} id id, e.g. NCBIGene:6469. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getGeneFunctionAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneFunctionAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneFunctionAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/function', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneGenotypeAssociations operation.
     * @callback module:api/BioentityApi~getGeneGenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotypes associated with a gene
     * @param {String} id CURIE identifier of gene, e.g. ZFIN:ZDB-GENE-980526-166
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGeneGenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneGenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneGenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/genotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneHomologAssociations operation.
     * @callback module:api/BioentityApi~getGeneHomologAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns homologs for a gene
     * @param {String} id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] Taxon CURIE of homolog, e.g. NCBITaxon:9606 (Can be an ancestral node in the ontology; includes inferred associations by default)
     * @param {module:model/String} [homologyType] P (paralog), O (Ortholog) or LDO (least-diverged ortholog)
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {module:api/BioentityApi~getGeneHomologAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneHomologAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneHomologAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'homology_type': opts['homologyType'],
        'direct_taxon': opts['directTaxon']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/homologs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneInteractions operation.
     * @callback module:api/BioentityApi~getGeneInteractionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns interactions for a gene
     * @param {String} id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGeneInteractionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneInteractions(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneInteractions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/interactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneModelAssociations operation.
     * @callback module:api/BioentityApi~getGeneModelAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns models associated with a gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:17988
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGeneModelAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneModelAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneModelAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneOrthologDiseaseAssociations operation.
     * @callback module:api/BioentityApi~getGeneOrthologDiseaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return diseases associated with orthologs of a gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:4750
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGeneOrthologDiseaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneOrthologDiseaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneOrthologDiseaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/ortholog/diseases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneOrthologPhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getGeneOrthologPhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return phenotypes associated with orthologs for a gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:4750
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGeneOrthologPhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneOrthologPhenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneOrthologPhenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/ortholog/phenotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenePathwayAssociations operation.
     * @callback module:api/BioentityApi~getGenePathwayAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pathways associated with gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:50846. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGenePathwayAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenePathwayAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenePathwayAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/pathways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenePhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getGenePhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGenePhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenePhenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenePhenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/phenotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenePublicationAssociations operation.
     * @callback module:api/BioentityApi~getGenePublicationAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns publications associated with a gene
     * @param {String} id CURIE identifier of gene, e.g. NCBIGene:4750
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGenePublicationAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenePublicationAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenePublicationAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneVariantAssociations operation.
     * @callback module:api/BioentityApi~getGeneVariantAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns variants associated with a gene
     * @param {String} id CURIE identifier of gene, e.g. HGNC:10896
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGeneVariantAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGeneVariantAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGeneVariantAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/gene/{id}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenericAssociations operation.
     * @callback module:api/BioentityApi~getGenericAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations for an entity regardless of the type
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGenericAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenericAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenericAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/{id}/associations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenericObject operation.
     * @callback module:api/BioentityApi~getGenericObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BioObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns basic info on object of any type
     * @param {String} id id, e.g. NCBIGene:84570
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getGenericObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BioObject}
     */
    getGenericObject(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenericObject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BioObject;
      return this.apiClient.callApi(
        '/bioentity/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenericObjectByType operation.
     * @callback module:api/BioentityApi~getGenericObjectByTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return basic info on an object for a given type
     * @param {module:model/String} type bioentity type
     * @param {String} id id, e.g. NCBIGene:84570
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Boolean} [getAssociationCounts = false)] Get association counts
     * @param {Boolean} [distinctCounts = false)] Get distinct counts for associations (to be used in conjunction with 'get_association_counts' parameter)
     * @param {module:api/BioentityApi~getGenericObjectByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGenericObjectByType(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getGenericObjectByType");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenericObjectByType");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'get_association_counts': opts['getAssociationCounts'],
        'distinct_counts': opts['distinctCounts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bioentity/{type}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypeCaseAssociations operation.
     * @callback module:api/BioentityApi~getGenotypeCaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns cases associated with a genotype
     * @param {String} id CURIE identifier of genotype, e.g. dbSNPIndividual:10440, dbSNPIndividual:22633
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getGenotypeCaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenotypeCaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenotypeCaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypeDiseaseAssociations operation.
     * @callback module:api/BioentityApi~getGenotypeDiseaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns diseases associated with a genotype
     * @param {String} id CURIE identifier of genotype, e.g. dbSNPIndividual:11441 (if non-human will return models)
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGenotypeDiseaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenotypeDiseaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenotypeDiseaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/diseases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypeGeneAssociations operation.
     * @callback module:api/BioentityApi~getGenotypeGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated with a genotype
     * @param {String} id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGenotypeGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenotypeGeneAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenotypeGeneAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/genes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypeGenotypeAssociations operation.
     * @callback module:api/BioentityApi~getGenotypeGenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotypes-genotype associations
     * Genotypes may be related to one another according to the GENO model
     * @param {String} id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGenotypeGenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenotypeGenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenotypeGenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/genotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypeModelAssociations operation.
     * @callback module:api/BioentityApi~getGenotypeModelAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns models associated with a genotype
     * @param {String} id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGenotypeModelAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenotypeModelAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenotypeModelAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypePhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getGenotypePhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with a genotype
     * @param {String} id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-4286
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGenotypePhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenotypePhenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenotypePhenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/phenotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypePublicationAssociations operation.
     * @callback module:api/BioentityApi~getGenotypePublicationAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns publications associated with a genotype
     * @param {String} id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGenotypePublicationAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenotypePublicationAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenotypePublicationAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenotypeVariantAssociations operation.
     * @callback module:api/BioentityApi~getGenotypeVariantAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotypes-variant associations
     * @param {String} id CURIE identifier of genotype, e.g. MONARCH:FBgeno422705
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getGenotypeVariantAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGenotypeVariantAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGenotypeVariantAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/genotype/{id}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGotermGeneAssociations operation.
     * @callback module:api/BioentityApi~getGotermGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations to GO terms for a gene
     * @param {String} id CURIE identifier of a GO term, e.g. GO:0044598
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:model/String} [relationshipType = 'involved_in')] relationship type ('involved_in', 'involved_in_regulation_of' or 'acts_upstream_of_or_within')
     * @param {module:api/BioentityApi~getGotermGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getGotermGeneAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGotermGeneAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'relationship_type': opts['relationshipType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/goterm/{id}/genes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelCaseAssociations operation.
     * @callback module:api/BioentityApi~getModelCaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns cases associated with a model
     * @param {String} id CURIE identifier for a model, e.g. Coriell:GM22295, Coriell:HG02187
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getModelCaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getModelCaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelCaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/model/{id}/cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelDiseaseAssociations operation.
     * @callback module:api/BioentityApi~getModelDiseaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns diseases associated with a model
     * @param {String} id CURIE identifier for a model, e.g. MGI:5573196
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getModelDiseaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getModelDiseaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelDiseaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/model/{id}/diseases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelGeneAssociations operation.
     * @callback module:api/BioentityApi~getModelGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated with a model
     * @param {String} id CURIE identifier for a model, e.g. MMRRC:042787
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getModelGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getModelGeneAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelGeneAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/model/{id}/genes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelGenotypeAssociations operation.
     * @callback module:api/BioentityApi~getModelGenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotypes associated with a model
     * @param {String} id CURIE identifier for a model, e.g. Coriell:NA16660
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getModelGenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getModelGenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelGenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/model/{id}/genotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelPhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getModelPhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with a model
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getModelPhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getModelPhenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelPhenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/model/{id}/phenotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelPublicationAssociations operation.
     * @callback module:api/BioentityApi~getModelPublicationAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns publications associated with a model
     * @param {String} id CURIE identifier for a model, e.g. MGI:5644542
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getModelPublicationAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getModelPublicationAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelPublicationAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/model/{id}/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelVariantAssociations operation.
     * @callback module:api/BioentityApi~getModelVariantAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns variants associated with a model
     * @param {String} id CURIE identifier for a model, e.g. MMRRC:042787
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getModelVariantAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getModelVariantAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelVariantAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/model/{id}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPathwayDiseaseAssociations operation.
     * @callback module:api/BioentityApi~getPathwayDiseaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns diseases associated with a pathway
     * @param {String} id CURIE any pathway element. E.g. REACT:R-HSA-5387390
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPathwayDiseaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPathwayDiseaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPathwayDiseaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/pathway/{id}/diseases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPathwayGeneAssociations operation.
     * @callback module:api/BioentityApi~getPathwayGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated with a pathway
     * @param {String} id CURIE any pathway element. E.g. REACT:R-HSA-5387390
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPathwayGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPathwayGeneAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPathwayGeneAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/pathway/{id}/genes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPathwayPhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getPathwayPhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with a pathway
     * @param {String} id CURIE any pathway element. E.g. REACT:R-HSA-5387390
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPathwayPhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPathwayPhenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPathwayPhenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/pathway/{id}/phenotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeAnatomyAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypeAnatomyAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NamedObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns anatomical entities associated with a phenotype
     * Example IDs:   * MP:0008521 abnormal Bowman membrane
     * @param {String} id CURIE identifier of phenotype, e.g. MP:0008521. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getPhenotypeAnatomyAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NamedObject>}
     */
    getPhenotypeAnatomyAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPhenotypeAnatomyAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NamedObject];
      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/anatomy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeCaseAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypeCaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns cases associated with a phenotype
     * @param {String} id Pheno class CURIE identifier, e.g  HP:0011951 (Aspiration pneumonia), HP:0002450 (Abnormal motor neuron morphology)
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getPhenotypeCaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPhenotypeCaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPhenotypeCaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeDiseaseAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypeDiseaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/D2PAssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns diseases associated with a phenotype
     * @param {String} id CURIE identifier of phenotype, e.g. HP:0007359. Equivalent IDs can be used with same results
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPhenotypeDiseaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/D2PAssociationResults}
     */
    getPhenotypeDiseaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPhenotypeDiseaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = D2PAssociationResults;
      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/diseases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeGeneAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypeGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated with a phenotype
     * @param {String} id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level), 
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPhenotypeGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPhenotypeGeneAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPhenotypeGeneAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/genes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeGeneByTaxonAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypeGeneByTaxonAssociationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns gene IDs for all genes associated with a given phenotype, filtered by taxon
     * For example, MP:0001569 + NCBITaxon:10090 (mouse)
     * @param {String} taxid Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus)
     * @param {String} id Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level)
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getPhenotypeGeneByTaxonAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPhenotypeGeneByTaxonAssociations(taxid, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taxid' is set
      if (taxid === undefined || taxid === null) {
        throw new Error("Missing the required parameter 'taxid' when calling getPhenotypeGeneByTaxonAssociations");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPhenotypeGeneByTaxonAssociations");
      }

      let pathParams = {
        'taxid': taxid,
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/gene/{taxid}/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeGenotypeAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypeGenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotypes associated with a phenotype
     * @param {String} id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level)
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPhenotypeGenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPhenotypeGenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPhenotypeGenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/genotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypePathwayAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypePathwayAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pathways associated with a phenotype
     * @param {String} id Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level)
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPhenotypePathwayAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPhenotypePathwayAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPhenotypePathwayAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/pathways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypePublicationAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypePublicationAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns publications associated with a phenotype
     * @param {String} id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level)
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPhenotypePublicationAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPhenotypePublicationAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPhenotypePublicationAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhenotypeVariantAssociations operation.
     * @callback module:api/BioentityApi~getPhenotypeVariantAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns variants associated with a phenotype
     * @param {String} id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level)
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPhenotypeVariantAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPhenotypeVariantAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPhenotypeVariantAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/phenotype/{id}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicationDiseaseAssociations operation.
     * @callback module:api/BioentityApi~getPublicationDiseaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns diseases associated with a publication
     * @param {String} id CURIE identifier for a publication, e.g. PMID:11751940
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPublicationDiseaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPublicationDiseaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPublicationDiseaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/publication/{id}/diseases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicationGeneAssociations operation.
     * @callback module:api/BioentityApi~getPublicationGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated with a publication
     * @param {String} id CURIE identifier for a publication, e.g. PMID:11751940
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPublicationGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPublicationGeneAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPublicationGeneAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/publication/{id}/genes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicationGenotypeAssociations operation.
     * @callback module:api/BioentityApi~getPublicationGenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotypes associated with a publication
     * @param {String} id CURIE identifier for a publication, e.g. PMID:11751940
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPublicationGenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPublicationGenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPublicationGenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/publication/{id}/genotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicationModelAssociations operation.
     * @callback module:api/BioentityApi~getPublicationModelAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns models associated with a publication
     * @param {String} id CURIE identifier for a publication, e.g. PMID:11751940
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPublicationModelAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPublicationModelAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPublicationModelAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/publication/{id}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicationPhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getPublicationPhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with a publication
     * @param {String} id CURIE identifier for a publication, e.g. PMID:11751940
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPublicationPhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPublicationPhenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPublicationPhenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/publication/{id}/phenotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicationVariantAssociations operation.
     * @callback module:api/BioentityApi~getPublicationVariantAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns variants associated with a publication
     * @param {String} id CURIE identifier for a publication, e.g. PMID:11751940
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getPublicationVariantAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getPublicationVariantAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPublicationVariantAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/publication/{id}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceParticipantInAssociations operation.
     * @callback module:api/BioentityApi~getSubstanceParticipantInAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations between an activity and process and the specified substance
     * Examples relationships:   * substance is a metabolite of a process  * substance is synthesized by a process  * substance is modified by an activity  * substance elicits a response program/pathway  * substance is transported by activity or pathway  For example, CHEBI:40036 (amitrole)
     * @param {String} id CURIE identifier of substance, e.g. CHEBI:40036
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getSubstanceParticipantInAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Association>}
     */
    getSubstanceParticipantInAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSubstanceParticipantInAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Association];
      return this.apiClient.callApi(
        '/bioentity/substance/{id}/participant_in', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceRoleAssociations operation.
     * @callback module:api/BioentityApi~getSubstanceRoleAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations between given drug and roles
     * Roles may be human-oriented (e.g. pesticide) or molecular (e.g. enzyme inhibitor)
     * @param {String} id CURIE identifier of substance, e.g. CHEBI:40036
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getSubstanceRoleAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Association>}
     */
    getSubstanceRoleAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSubstanceRoleAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Association];
      return this.apiClient.callApi(
        '/bioentity/substance/{id}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceTreatsAssociations operation.
     * @callback module:api/BioentityApi~getSubstanceTreatsAssociationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns substances associated with a disease
     * e.g. drugs or small molecules used to treat
     * @param {String} id CURIE identifier of substance, e.g. CHEBI:40036
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getSubstanceTreatsAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSubstanceTreatsAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSubstanceTreatsAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bioentity/substance/{id}/treats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantCaseAssociations operation.
     * @callback module:api/BioentityApi~getVariantCaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns cases associated with a variant
     * @param {String} id CURIE identifier of variant, e.g. OMIM:309550.0004, dbSNP:rs5030868
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getVariantCaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getVariantCaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariantCaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/variant/{id}/cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantDiseaseAssociations operation.
     * @callback module:api/BioentityApi~getVariantDiseaseAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns diseases associated with a variant
     * @param {String} id CURIE identifier of variant, e.g. ClinVarVariant:14925
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getVariantDiseaseAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getVariantDiseaseAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariantDiseaseAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/variant/{id}/diseases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantGeneAssociations operation.
     * @callback module:api/BioentityApi~getVariantGeneAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genes associated with a variant
     * @param {String} id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getVariantGeneAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getVariantGeneAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariantGeneAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/variant/{id}/genes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantGenotypeAssociations operation.
     * @callback module:api/BioentityApi~getVariantGenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns genotypes associated with a variant
     * @param {String} id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getVariantGenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getVariantGenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariantGenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/variant/{id}/genotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantModelAssociations operation.
     * @callback module:api/BioentityApi~getVariantModelAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns models associated with a variant
     * @param {String} id CURIE identifier of variant, e.g. OMIM:607623.0012, dbSNP:rs5030868
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {module:api/BioentityApi~getVariantModelAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getVariantModelAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariantModelAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/variant/{id}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantPhenotypeAssociations operation.
     * @callback module:api/BioentityApi~getVariantPhenotypeAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns phenotypes associated with a variant
     * @param {String} id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getVariantPhenotypeAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getVariantPhenotypeAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariantPhenotypeAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/variant/{id}/phenotypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantPublicationAssociations operation.
     * @callback module:api/BioentityApi~getVariantPublicationAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns publications associated with a variant
     * @param {String} id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {Boolean} [facet = false)] Enable faceting
     * @param {Array.<String>} [facetFields] Fields to facet on
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [fetchObjects = false)] If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [direct = false)] Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * @param {Array.<String>} [taxon] One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * @param {Boolean} [directTaxon = false)] Set true to exclude inferred taxa
     * @param {String} [relation] A relation CURIE to filter associations
     * @param {String} [sort] Sorting responses <field> <desc,asc>
     * @param {String} [q] Query string to filter documents
     * @param {module:api/BioentityApi~getVariantPublicationAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationResults}
     */
    getVariantPublicationAssociations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariantPublicationAssociations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'facet': opts['facet'],
        'facet_fields': this.apiClient.buildCollectionParam(opts['facetFields'], 'multi'),
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'fetch_objects': opts['fetchObjects'],
        'use_compact_associations': opts['useCompactAssociations'],
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi'),
        'evidence': opts['evidence'],
        'direct': opts['direct'],
        'taxon': this.apiClient.buildCollectionParam(opts['taxon'], 'multi'),
        'direct_taxon': opts['directTaxon'],
        'relation': opts['relation'],
        'sort': opts['sort'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationResults;
      return this.apiClient.callApi(
        '/bioentity/variant/{id}/publications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
