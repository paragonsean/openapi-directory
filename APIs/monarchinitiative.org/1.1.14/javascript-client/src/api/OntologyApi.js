/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Ontology service.
* @module api/OntologyApi
* @version 1.1.14
*/
export default class OntologyApi {

    /**
    * Constructs a new OntologyApi. 
    * @alias module:api/OntologyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOntologySubset operation.
     * @callback module:api/OntologyApi~getOntologySubsetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns meta data of an ontology subset (slim)
     * @param {String} id name of a slim subset, e.g. goslim_agr, goslim_generic
     * @param {module:api/OntologyApi~getOntologySubsetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOntologySubset(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOntologySubset");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ontology/subset/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOntologyTerm operation.
     * @callback module:api/OntologyApi~getOntologyTermCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns meta data of an ontology term
     * @param {String} id CURIE identifier of a GO term, e.g. GO:0003677
     * @param {module:api/OntologyApi~getOntologyTermCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOntologyTerm(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOntologyTerm");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ontology/term/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOntologyTermGraph operation.
     * @callback module:api/OntologyApi~getOntologyTermGraphCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns graph of an ontology term
     * @param {String} id CURIE identifier of a GO term, e.g. GO:0000981
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [graphType = 'topology_graph')] graph type ('topology_graph', 'regulates_transitivity_graph' or 'neighborhood_graph')
     * @param {module:api/OntologyApi~getOntologyTermGraphCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOntologyTermGraph(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOntologyTermGraph");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'graph_type': opts['graphType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ontology/term/{id}/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOntologyTermSubgraph operation.
     * @callback module:api/OntologyApi~getOntologyTermSubgraphCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract a subgraph from an ontology term
     * @param {String} id CURIE identifier of a GO term, e.g. GO:0007275
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [cnode] Additional classes
     * @param {Boolean} [includeAncestors = true)] Include Ancestors
     * @param {Boolean} [includeDescendants] Include Descendants
     * @param {Array.<String>} [relation] Additional classes
     * @param {Boolean} [includeMeta = false)] Include metadata in response
     * @param {module:api/OntologyApi~getOntologyTermSubgraphCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOntologyTermSubgraph(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOntologyTermSubgraph");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cnode': this.apiClient.buildCollectionParam(opts['cnode'], 'multi'),
        'include_ancestors': opts['includeAncestors'],
        'include_descendants': opts['includeDescendants'],
        'relation': this.apiClient.buildCollectionParam(opts['relation'], 'multi'),
        'include_meta': opts['includeMeta']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ontology/term/{id}/subgraph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOntologyTermSubsets operation.
     * @callback module:api/OntologyApi~getOntologyTermSubsetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns subsets (slims) associated to an ontology term
     * @param {String} id CURIE identifier of a GO term, e.g. GO:0006259
     * @param {module:api/OntologyApi~getOntologyTermSubsetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOntologyTermSubsets(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOntologyTermSubsets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ontology/term/{id}/subsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOntologyTermsSharedAncestor operation.
     * @callback module:api/OntologyApi~getOntologyTermsSharedAncestorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the ancestor ontology terms shared by two ontology terms
     * @param {String} subject CURIE identifier of a GO term, e.g. GO:0006259
     * @param {String} object CURIE identifier of a GO term, e.g. GO:0046483
     * @param {module:api/OntologyApi~getOntologyTermsSharedAncestorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOntologyTermsSharedAncestor(subject, object, callback) {
      let postBody = null;
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling getOntologyTermsSharedAncestor");
      }
      // verify the required parameter 'object' is set
      if (object === undefined || object === null) {
        throw new Error("Missing the required parameter 'object' when calling getOntologyTermsSharedAncestor");
      }

      let pathParams = {
        'subject': subject,
        'object': object
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ontology/shared/{subject}/{object}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
