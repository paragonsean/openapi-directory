/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Association from '../model/Association';

/**
* Cam service.
* @module api/CamApi
* @version 1.1.14
*/
export default class CamApi {

    /**
    * Constructs a new CamApi. 
    * @alias module:api/CamApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getActivityCollection operation.
     * @callback module:api/CamApi~getActivityCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of models
     * @param {Object} opts Optional parameters
     * @param {String} [title] string to search for in title of model
     * @param {String} [contributor] string to search for in contributor of model
     * @param {module:api/CamApi~getActivityCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActivityCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'title': opts['title'],
        'contributor': opts['contributor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cam/activity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceObject operation.
     * @callback module:api/CamApi~getInstanceObjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of matches
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [title] string to search for in title of model
     * @param {String} [contributor] string to search for in contributor of model
     * @param {module:api/CamApi~getInstanceObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Association>}
     */
    getInstanceObject(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstanceObject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'title': opts['title'],
        'contributor': opts['contributor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Association];
      return this.apiClient.callApi(
        '/cam/instance/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelCollection operation.
     * @callback module:api/CamApi~getModelCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of ALL models
     * @param {module:api/CamApi~getModelCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getModelCollection(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cam/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelContributors operation.
     * @callback module:api/CamApi~getModelContributorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of all contributors across all models
     * @param {module:api/CamApi~getModelContributorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getModelContributors(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cam/model/contributors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelInstances operation.
     * @callback module:api/CamApi~getModelInstancesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of all instances
     * @param {module:api/CamApi~getModelInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getModelInstances(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cam/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelObject operation.
     * @callback module:api/CamApi~getModelObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a complete model
     * @param {String} id 
     * @param {module:api/CamApi~getModelObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getModelObject(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelObject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cam/model/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelProperties operation.
     * @callback module:api/CamApi~getModelPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of all properties used across all models
     * @param {Object} opts Optional parameters
     * @param {String} [title] string to search for in title of model
     * @param {String} [contributor] string to search for in contributor of model
     * @param {module:api/CamApi~getModelPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getModelProperties(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'title': opts['title'],
        'contributor': opts['contributor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cam/model/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelPropertyValues operation.
     * @callback module:api/CamApi~getModelPropertyValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list property-values for all models
     * @param {Object} opts Optional parameters
     * @param {String} [title] string to search for in title of model
     * @param {String} [contributor] string to search for in contributor of model
     * @param {module:api/CamApi~getModelPropertyValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getModelPropertyValues(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'title': opts['title'],
        'contributor': opts['contributor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cam/model/property_values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelQuery operation.
     * @callback module:api/CamApi~getModelQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of models matching query
     * @param {Object} opts Optional parameters
     * @param {String} [title] string to search for in title of model
     * @param {String} [contributor] string to search for in contributor of model
     * @param {module:api/CamApi~getModelQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getModelQuery(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'title': opts['title'],
        'contributor': opts['contributor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cam/model/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhysicalInteraction operation.
     * @callback module:api/CamApi~getPhysicalInteractionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of models
     * @param {Object} opts Optional parameters
     * @param {String} [title] string to search for in title of model
     * @param {String} [contributor] string to search for in contributor of model
     * @param {module:api/CamApi~getPhysicalInteractionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPhysicalInteraction(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'title': opts['title'],
        'contributor': opts['contributor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cam/physical_interaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
