/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Mart service.
* @module api/MartApi
* @version 1.1.14
*/
export default class MartApi {

    /**
    * Constructs a new MartApi. 
    * @alias module:api/MartApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMartCaseAssociationsResource operation.
     * @callback module:api/MartApi~getMartCaseAssociationsResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk download of case associations
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param {String} taxon taxon of case, must be of form NCBITaxon:9606
     * @param {String} objectCategory Category of entity at link Subject (target), e.g. phenotype, disease
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {module:api/MartApi~getMartCaseAssociationsResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMartCaseAssociationsResource(taxon, objectCategory, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taxon' is set
      if (taxon === undefined || taxon === null) {
        throw new Error("Missing the required parameter 'taxon' when calling getMartCaseAssociationsResource");
      }
      // verify the required parameter 'objectCategory' is set
      if (objectCategory === undefined || objectCategory === null) {
        throw new Error("Missing the required parameter 'objectCategory' when calling getMartCaseAssociationsResource");
      }

      let pathParams = {
        'taxon': taxon,
        'object_category': objectCategory
      };
      let queryParams = {
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mart/case/{object_category}/{taxon}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMartDiseaseAssociationsResource operation.
     * @callback module:api/MartApi~getMartDiseaseAssociationsResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk download of disease associations
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param {String} taxon taxon of disease, must be of form NCBITaxon:9606
     * @param {String} objectCategory Category of entity at link Object (target), e.g. phenotype, disease
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {module:api/MartApi~getMartDiseaseAssociationsResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMartDiseaseAssociationsResource(taxon, objectCategory, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taxon' is set
      if (taxon === undefined || taxon === null) {
        throw new Error("Missing the required parameter 'taxon' when calling getMartDiseaseAssociationsResource");
      }
      // verify the required parameter 'objectCategory' is set
      if (objectCategory === undefined || objectCategory === null) {
        throw new Error("Missing the required parameter 'objectCategory' when calling getMartDiseaseAssociationsResource");
      }

      let pathParams = {
        'taxon': taxon,
        'object_category': objectCategory
      };
      let queryParams = {
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mart/disease/{object_category}/{taxon}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMartGeneAssociationsResource operation.
     * @callback module:api/MartApi~getMartGeneAssociationsResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk download of gene associations
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param {String} taxon taxon of gene, must be of form NCBITaxon:9606
     * @param {String} objectCategory Category of entity at link Object (target), e.g. phenotype, disease
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [slim] Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * @param {module:api/MartApi~getMartGeneAssociationsResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMartGeneAssociationsResource(taxon, objectCategory, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taxon' is set
      if (taxon === undefined || taxon === null) {
        throw new Error("Missing the required parameter 'taxon' when calling getMartGeneAssociationsResource");
      }
      // verify the required parameter 'objectCategory' is set
      if (objectCategory === undefined || objectCategory === null) {
        throw new Error("Missing the required parameter 'objectCategory' when calling getMartGeneAssociationsResource");
      }

      let pathParams = {
        'taxon': taxon,
        'object_category': objectCategory
      };
      let queryParams = {
        'slim': this.apiClient.buildCollectionParam(opts['slim'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mart/gene/{object_category}/{taxon}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMartOrthologAssociationsResource operation.
     * @callback module:api/MartApi~getMartOrthologAssociationsResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk download of orthologs
     * @param {String} taxon2 object taxon, e.g. NCBITaxon:10090
     * @param {String} taxon1 subject taxon, e.g. NCBITaxon:9606
     * @param {module:api/MartApi~getMartOrthologAssociationsResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMartOrthologAssociationsResource(taxon2, taxon1, callback) {
      let postBody = null;
      // verify the required parameter 'taxon2' is set
      if (taxon2 === undefined || taxon2 === null) {
        throw new Error("Missing the required parameter 'taxon2' when calling getMartOrthologAssociationsResource");
      }
      // verify the required parameter 'taxon1' is set
      if (taxon1 === undefined || taxon1 === null) {
        throw new Error("Missing the required parameter 'taxon1' when calling getMartOrthologAssociationsResource");
      }

      let pathParams = {
        'taxon2': taxon2,
        'taxon1': taxon1
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mart/ortholog/{taxon1}/{taxon2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMartParalogAssociationsResource operation.
     * @callback module:api/MartApi~getMartParalogAssociationsResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk download of paralogs
     * @param {String} taxon2 object taxon, e.g. NCBITaxon:9606
     * @param {String} taxon1 subject taxon, e.g. NCBITaxon:9606
     * @param {module:api/MartApi~getMartParalogAssociationsResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMartParalogAssociationsResource(taxon2, taxon1, callback) {
      let postBody = null;
      // verify the required parameter 'taxon2' is set
      if (taxon2 === undefined || taxon2 === null) {
        throw new Error("Missing the required parameter 'taxon2' when calling getMartParalogAssociationsResource");
      }
      // verify the required parameter 'taxon1' is set
      if (taxon1 === undefined || taxon1 === null) {
        throw new Error("Missing the required parameter 'taxon1' when calling getMartParalogAssociationsResource");
      }

      let pathParams = {
        'taxon2': taxon2,
        'taxon1': taxon1
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mart/paralog/{taxon1}/{taxon2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
