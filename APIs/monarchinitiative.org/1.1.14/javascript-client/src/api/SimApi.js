/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompareInput from '../model/CompareInput';
import SimResult from '../model/SimResult';
import SufficiencyOutput from '../model/SufficiencyOutput';
import SufficiencyPostInput from '../model/SufficiencyPostInput';

/**
* Sim service.
* @module api/SimApi
* @version 1.1.14
*/
export default class SimApi {

    /**
    * Constructs a new SimApi. 
    * @alias module:api/SimApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAnnotationScore operation.
     * @callback module:api/SimApi~getAnnotationScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SufficiencyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get annotation score
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] Phenotype identifier (eg HP:0004935)
     * @param {Array.<String>} [absentId] absent phenotype (eg HP:0002828)
     * @param {module:api/SimApi~getAnnotationScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SufficiencyOutput}
     */
    getAnnotationScore(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'absent_id': this.apiClient.buildCollectionParam(opts['absentId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SufficiencyOutput;
      return this.apiClient.callApi(
        '/sim/score', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimCompare operation.
     * @callback module:api/SimApi~getSimCompareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compare a reference profile vs one profiles
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isFeatureSet = true)] set to true if *all* input ids are phenotypic features, else set to false
     * @param {module:model/String} [metric = 'phenodigm')] Metric for computing similarity
     * @param {Array.<String>} [refId] A phenotype or identifier that is composed of phenotypes (eg disease, gene)
     * @param {Array.<String>} [queryId] A phenotype or identifier that is composed of phenotypes (eg disease, gene)
     * @param {module:api/SimApi~getSimCompareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimResult}
     */
    getSimCompare(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'is_feature_set': opts['isFeatureSet'],
        'metric': opts['metric'],
        'ref_id': this.apiClient.buildCollectionParam(opts['refId'], 'multi'),
        'query_id': this.apiClient.buildCollectionParam(opts['queryId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SimResult;
      return this.apiClient.callApi(
        '/sim/compare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimSearch operation.
     * @callback module:api/SimApi~getSimSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for phenotypically similar diseases or model genes
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isFeatureSet = true)] set to true if *all* input ids are phenotypic features, else set to false
     * @param {module:model/String} [metric = 'phenodigm')] Metric for computing similarity
     * @param {Array.<String>} [id] A phenotype or identifier that is composed of phenotypes (eg disease, gene)
     * @param {Number} [limit = 20)] number of rows, max 500
     * @param {String} [taxon] ncbi taxon id
     * @param {module:api/SimApi~getSimSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimResult}
     */
    getSimSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'is_feature_set': opts['isFeatureSet'],
        'metric': opts['metric'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'limit': opts['limit'],
        'taxon': opts['taxon']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SimResult;
      return this.apiClient.callApi(
        '/sim/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAnnotationScore operation.
     * @callback module:api/SimApi~postAnnotationScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SufficiencyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get annotation score
     * @param {module:model/SufficiencyPostInput} sufficiencyPostInput 
     * @param {module:api/SimApi~postAnnotationScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SufficiencyOutput}
     */
    postAnnotationScore(sufficiencyPostInput, callback) {
      let postBody = sufficiencyPostInput;
      // verify the required parameter 'sufficiencyPostInput' is set
      if (sufficiencyPostInput === undefined || sufficiencyPostInput === null) {
        throw new Error("Missing the required parameter 'sufficiencyPostInput' when calling postAnnotationScore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SufficiencyOutput;
      return this.apiClient.callApi(
        '/sim/score', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSimCompare operation.
     * @callback module:api/SimApi~postSimCompareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compare a reference profile vs one or more profiles
     * @param {module:model/CompareInput} compareInput 
     * @param {module:api/SimApi~postSimCompareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimResult}
     */
    postSimCompare(compareInput, callback) {
      let postBody = compareInput;
      // verify the required parameter 'compareInput' is set
      if (compareInput === undefined || compareInput === null) {
        throw new Error("Missing the required parameter 'compareInput' when calling postSimCompare");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SimResult;
      return this.apiClient.callApi(
        '/sim/compare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
