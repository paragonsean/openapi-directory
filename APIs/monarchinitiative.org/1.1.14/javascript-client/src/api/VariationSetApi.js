/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Association from '../model/Association';
import PageOfVariantSets from '../model/PageOfVariantSets';
import VariantSet from '../model/VariantSet';

/**
* VariationSet service.
* @module api/VariationSetApi
* @version 1.1.14
*/
export default class VariationSetApi {

    /**
    * Constructs a new VariationSetApi. 
    * @alias module:api/VariationSetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteVariantSetItem operation.
     * @callback module:api/VariationSetApi~deleteVariantSetItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes variant set
     * @param {String} id 
     * @param {module:api/VariationSetApi~deleteVariantSetItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVariantSetItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVariantSetItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/variation/set/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantAnalyze operation.
     * @callback module:api/VariationSetApi~getVariantAnalyzeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of matches
     * @param {String} id 
     * @param {module:api/VariationSetApi~getVariantAnalyzeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Association>}
     */
    getVariantAnalyze(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariantAnalyze");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Association];
      return this.apiClient.callApi(
        '/variation/set/analyze/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantSetItem operation.
     * @callback module:api/VariationSetApi~getVariantSetItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariantSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a variant set
     * @param {String} id 
     * @param {module:api/VariationSetApi~getVariantSetItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariantSet}
     */
    getVariantSetItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariantSetItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VariantSet;
      return this.apiClient.callApi(
        '/variation/set/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantSetsArchiveCollection operation.
     * @callback module:api/VariationSetApi~getVariantSetsArchiveCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageOfVariantSets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of variant sets from a specified time period
     * @param {Number} year 
     * @param {Number} month 
     * @param {Number} day 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {module:model/Number} [perPage = 10)] Results per page {error_msg}
     * @param {module:api/VariationSetApi~getVariantSetsArchiveCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageOfVariantSets}
     */
    getVariantSetsArchiveCollection(year, month, day, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getVariantSetsArchiveCollection");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling getVariantSetsArchiveCollection");
      }
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling getVariantSetsArchiveCollection");
      }

      let pathParams = {
        'year': year,
        'month': month,
        'day': day
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageOfVariantSets;
      return this.apiClient.callApi(
        '/variation/set/archive/{year}/{month}/{day}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantSetsCollection operation.
     * @callback module:api/VariationSetApi~getVariantSetsCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageOfVariantSets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of variant sets
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {module:model/Number} [perPage = 10)] Results per page {error_msg}
     * @param {module:api/VariationSetApi~getVariantSetsCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageOfVariantSets}
     */
    getVariantSetsCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageOfVariantSets;
      return this.apiClient.callApi(
        '/variation/set/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postVariantSetsCollection operation.
     * @callback module:api/VariationSetApi~postVariantSetsCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new variant set
     * @param {module:model/VariantSet} variantSet 
     * @param {module:api/VariationSetApi~postVariantSetsCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postVariantSetsCollection(variantSet, callback) {
      let postBody = variantSet;
      // verify the required parameter 'variantSet' is set
      if (variantSet === undefined || variantSet === null) {
        throw new Error("Missing the required parameter 'variantSet' when calling postVariantSetsCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/variation/set/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putVariantSetItem operation.
     * @callback module:api/VariationSetApi~putVariantSetItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a variant set
     * @param {String} id 
     * @param {module:model/VariantSet} variantSet 
     * @param {module:api/VariationSetApi~putVariantSetItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putVariantSetItem(id, variantSet, callback) {
      let postBody = variantSet;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putVariantSetItem");
      }
      // verify the required parameter 'variantSet' is set
      if (variantSet === undefined || variantSet === null) {
        throw new Error("Missing the required parameter 'variantSet' when calling putVariantSetItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/variation/set/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
