/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociationResults from '../model/AssociationResults';

/**
* Association service.
* @module api/AssociationApi
* @version 1.1.14
*/
export default class AssociationApi {

    /**
    * Constructs a new AssociationApi. 
    * @alias module:api/AssociationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAssociationBySubjectAndAssocType operation.
     * @callback module:api/AssociationApi~getAssociationBySubjectAndAssocTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of matching associations of a given type
     * @param {String} associationType Association type, eg gene_phenotype
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {String} [subject] Subject CURIE
     * @param {String} [object] Object CURIE
     * @param {module:api/AssociationApi~getAssociationBySubjectAndAssocTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getAssociationBySubjectAndAssocType(associationType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'associationType' is set
      if (associationType === undefined || associationType === null) {
        throw new Error("Missing the required parameter 'associationType' when calling getAssociationBySubjectAndAssocType");
      }

      let pathParams = {
        'association_type': associationType
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'evidence': opts['evidence'],
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'use_compact_associations': opts['useCompactAssociations'],
        'subject': opts['subject'],
        'object': opts['object']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/association/type/{association_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssociationBySubjectAndObjectCategorySearch operation.
     * @callback module:api/AssociationApi~getAssociationBySubjectAndObjectCategorySearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of matching associations between a given subject and object category
     * @param {String} objectCategory Category of entity at link Object (target), e.g. gene, disease, phenotype
     * @param {String} subjectCategory Category of entity at link Subject (source), e.g. gene, disease, phenotype
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {String} [subject] Subject CURIE
     * @param {String} [object] Object CURIE
     * @param {String} [subjectTaxon] Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default)
     * @param {String} [objectTaxon] Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default)
     * @param {String} [relation] Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc.
     * @param {module:api/AssociationApi~getAssociationBySubjectAndObjectCategorySearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getAssociationBySubjectAndObjectCategorySearch(objectCategory, subjectCategory, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectCategory' is set
      if (objectCategory === undefined || objectCategory === null) {
        throw new Error("Missing the required parameter 'objectCategory' when calling getAssociationBySubjectAndObjectCategorySearch");
      }
      // verify the required parameter 'subjectCategory' is set
      if (subjectCategory === undefined || subjectCategory === null) {
        throw new Error("Missing the required parameter 'subjectCategory' when calling getAssociationBySubjectAndObjectCategorySearch");
      }

      let pathParams = {
        'object_category': objectCategory,
        'subject_category': subjectCategory
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'evidence': opts['evidence'],
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'use_compact_associations': opts['useCompactAssociations'],
        'subject': opts['subject'],
        'object': opts['object'],
        'subject_taxon': opts['subjectTaxon'],
        'object_taxon': opts['objectTaxon'],
        'relation': opts['relation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/association/find/{subject_category}/{object_category}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssociationBySubjectCategorySearch operation.
     * @callback module:api/AssociationApi~getAssociationBySubjectCategorySearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of matching associations for a given subject category
     * @param {String} subjectCategory Category of entity at link Subject (source), e.g. gene, disease, phenotype
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {String} [subjectTaxon] Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default)
     * @param {String} [objectTaxon] Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default)
     * @param {String} [relation] Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc.
     * @param {module:api/AssociationApi~getAssociationBySubjectCategorySearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getAssociationBySubjectCategorySearch(subjectCategory, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subjectCategory' is set
      if (subjectCategory === undefined || subjectCategory === null) {
        throw new Error("Missing the required parameter 'subjectCategory' when calling getAssociationBySubjectCategorySearch");
      }

      let pathParams = {
        'subject_category': subjectCategory
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'evidence': opts['evidence'],
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'use_compact_associations': opts['useCompactAssociations'],
        'subject_taxon': opts['subjectTaxon'],
        'object_taxon': opts['objectTaxon'],
        'relation': opts['relation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/association/find/{subject_category}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssociationObject operation.
     * @callback module:api/AssociationApi~getAssociationObjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the association with a given identifier
     * An association connects, at a minimum, two things, designated subject and object, via some relationship. Associations also include evidence, provenance etc.
     * @param {String} id identifier for an association, e.g. f5ba436c-f851-41b3-9d9d-bb2b5fc879d4
     * @param {module:api/AssociationApi~getAssociationObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getAssociationObject(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAssociationObject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/association/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssociationsBetween operation.
     * @callback module:api/AssociationApi~getAssociationsBetweenCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns associations connecting two entities
     * Given two entities (e.g. a particular gene and a particular disease), if these two entities are connected (directly or indirectly), then return the association objects describing the connection.
     * @param {String} object Return associations pointing to this node, e.g. MP:0013765. Can also be a biological entity such as a gene
     * @param {String} subject Return associations emanating from this node, e.g. MGI:1342287 (If ID is from an ontology then results would include inferred associations, by default)
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {module:api/AssociationApi~getAssociationsBetweenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getAssociationsBetween(object, subject, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'object' is set
      if (object === undefined || object === null) {
        throw new Error("Missing the required parameter 'object' when calling getAssociationsBetween");
      }
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling getAssociationsBetween");
      }

      let pathParams = {
        'object': object,
        'subject': subject
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'evidence': opts['evidence'],
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/association/between/{subject}/{object}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssociationsFrom operation.
     * @callback module:api/AssociationApi~getAssociationsFromCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of matching associations starting from a given subject (source)
     * @param {String} subject Return associations emanating from this node, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357 (If ID is from an ontology then results would include inferred associations, by default)
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {String} [objectTaxon] Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default)
     * @param {String} [relation] Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc.
     * @param {module:api/AssociationApi~getAssociationsFromCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getAssociationsFrom(subject, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling getAssociationsFrom");
      }

      let pathParams = {
        'subject': subject
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'evidence': opts['evidence'],
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'use_compact_associations': opts['useCompactAssociations'],
        'object_taxon': opts['objectTaxon'],
        'relation': opts['relation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/association/from/{subject}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssociationsTo operation.
     * @callback module:api/AssociationApi~getAssociationsToCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of matching associations pointing to a given object (target)
     * @param {String} object Return associations pointing to this node, e.g. specifying MP:0013765 will return all genes, variants, strains, etc. annotated with this term. Can also be a biological entity such as a gene
     * @param {Object} opts Optional parameters
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * @param {Boolean} [unselectEvidence = false)] If true, excludes evidence objects in response
     * @param {Boolean} [excludeAutomaticAssertions = false)] If true, excludes associations that involve IEAs (ECO:0000501)
     * @param {Boolean} [useCompactAssociations = false)] If true, returns results in compact associations format
     * @param {module:api/AssociationApi~getAssociationsToCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getAssociationsTo(object, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'object' is set
      if (object === undefined || object === null) {
        throw new Error("Missing the required parameter 'object' when calling getAssociationsTo");
      }

      let pathParams = {
        'object': object
      };
      let queryParams = {
        'rows': opts['rows'],
        'start': opts['start'],
        'evidence': opts['evidence'],
        'unselect_evidence': opts['unselectEvidence'],
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'use_compact_associations': opts['useCompactAssociations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/association/to/{object}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
