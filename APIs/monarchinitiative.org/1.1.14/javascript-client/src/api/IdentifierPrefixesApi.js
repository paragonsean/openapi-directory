/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* IdentifierPrefixes service.
* @module api/IdentifierPrefixesApi
* @version 1.1.14
*/
export default class IdentifierPrefixesApi {

    /**
    * Constructs a new IdentifierPrefixesApi. 
    * @alias module:api/IdentifierPrefixesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPrefixCollection operation.
     * @callback module:api/IdentifierPrefixesApi~getPrefixCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of prefixes
     * @param {module:api/IdentifierPrefixesApi~getPrefixCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPrefixCollection(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/identifier/prefixes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrefixContract operation.
     * @callback module:api/IdentifierPrefixesApi~getPrefixContractCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns contracted URI
     * @param {String} uri URI of entity to be contracted to identifier/CURIE, e.g \"http://www.informatics.jax.org/accession/MGI:1\"
     * @param {module:api/IdentifierPrefixesApi~getPrefixContractCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPrefixContract(uri, callback) {
      let postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling getPrefixContract");
      }

      let pathParams = {
        'uri': uri
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/identifier/prefixes/contract/{uri}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrefixExpand operation.
     * @callback module:api/IdentifierPrefixesApi~getPrefixExpandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns expanded URI
     * @param {String} id ID of entity to be contracted to URI, e.g \"MGI:1\"
     * @param {module:api/IdentifierPrefixesApi~getPrefixExpandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPrefixExpand(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPrefixExpand");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/identifier/prefixes/expand/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
