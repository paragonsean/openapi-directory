/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* BioentitysetSlimmer service.
* @module api/BioentitysetSlimmerApi
* @version 1.1.14
*/
export default class BioentitysetSlimmerApi {

    /**
    * Constructs a new BioentitysetSlimmerApi. 
    * @alias module:api/BioentitysetSlimmerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEntitySetAnatomySlimmer operation.
     * @callback module:api/BioentitysetSlimmerApi~getEntitySetAnatomySlimmerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim
     * @param {Array.<String>} subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
     * @param {Array.<String>} slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [excludeAutomaticAssertions = false)] If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {module:api/BioentitysetSlimmerApi~getEntitySetAnatomySlimmerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEntitySetAnatomySlimmer(subject, slim, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling getEntitySetAnatomySlimmer");
      }
      // verify the required parameter 'slim' is set
      if (slim === undefined || slim === null) {
        throw new Error("Missing the required parameter 'slim' when calling getEntitySetAnatomySlimmer");
      }

      let pathParams = {
      };
      let queryParams = {
        'subject': this.apiClient.buildCollectionParam(subject, 'multi'),
        'slim': this.apiClient.buildCollectionParam(slim, 'multi'),
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'rows': opts['rows'],
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bioentityset/slimmer/anatomy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetFunctionSlimmer operation.
     * @callback module:api/BioentitysetSlimmerApi~getEntitySetFunctionSlimmerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim
     * @param {Array.<String>} subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
     * @param {Array.<String>} slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [relationshipType = 'acts_upstream_of_or_within')] relationship type ('involved_in' or 'acts_upstream_of_or_within')
     * @param {Boolean} [excludeAutomaticAssertions = false)] If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {module:api/BioentitysetSlimmerApi~getEntitySetFunctionSlimmerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEntitySetFunctionSlimmer(subject, slim, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling getEntitySetFunctionSlimmer");
      }
      // verify the required parameter 'slim' is set
      if (slim === undefined || slim === null) {
        throw new Error("Missing the required parameter 'slim' when calling getEntitySetFunctionSlimmer");
      }

      let pathParams = {
      };
      let queryParams = {
        'relationship_type': opts['relationshipType'],
        'subject': this.apiClient.buildCollectionParam(subject, 'multi'),
        'slim': this.apiClient.buildCollectionParam(slim, 'multi'),
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'rows': opts['rows'],
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bioentityset/slimmer/function', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetPhenotypeSlimmer operation.
     * @callback module:api/BioentitysetSlimmerApi~getEntitySetPhenotypeSlimmerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim
     * @param {Array.<String>} subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387
     * @param {Array.<String>} slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [excludeAutomaticAssertions = false)] If set, excludes associations that involve IEAs (ECO:0000501)
     * @param {Number} [rows = 100)] number of rows
     * @param {Number} [start] beginning row
     * @param {module:api/BioentitysetSlimmerApi~getEntitySetPhenotypeSlimmerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEntitySetPhenotypeSlimmer(subject, slim, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling getEntitySetPhenotypeSlimmer");
      }
      // verify the required parameter 'slim' is set
      if (slim === undefined || slim === null) {
        throw new Error("Missing the required parameter 'slim' when calling getEntitySetPhenotypeSlimmer");
      }

      let pathParams = {
      };
      let queryParams = {
        'subject': this.apiClient.buildCollectionParam(subject, 'multi'),
        'slim': this.apiClient.buildCollectionParam(slim, 'multi'),
        'exclude_automatic_assertions': opts['excludeAutomaticAssertions'],
        'rows': opts['rows'],
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bioentityset/slimmer/phenotype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
