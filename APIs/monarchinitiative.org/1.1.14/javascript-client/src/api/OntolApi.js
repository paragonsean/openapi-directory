/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Ontol service.
* @module api/OntolApi
* @version 1.1.14
*/
export default class OntolApi {

    /**
    * Constructs a new OntolApi. 
    * @alias module:api/OntolApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getExtractOntologySubgraphResource operation.
     * @callback module:api/OntolApi~getExtractOntologySubgraphResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract a subgraph from an ontology
     * @param {String} node class ID, e.g. HP:0001288
     * @param {String} ontology ontology ID, e.g. go, uberon, mp, hp
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [cnode] Additional classes
     * @param {Boolean} [includeAncestors = true)] Include Ancestors
     * @param {Boolean} [includeDescendants] Include Descendants
     * @param {Array.<String>} [relation] Additional classes
     * @param {Boolean} [includeMeta = false)] Include metadata in response
     * @param {module:api/OntolApi~getExtractOntologySubgraphResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExtractOntologySubgraphResource(node, ontology, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'node' is set
      if (node === undefined || node === null) {
        throw new Error("Missing the required parameter 'node' when calling getExtractOntologySubgraphResource");
      }
      // verify the required parameter 'ontology' is set
      if (ontology === undefined || ontology === null) {
        throw new Error("Missing the required parameter 'ontology' when calling getExtractOntologySubgraphResource");
      }

      let pathParams = {
        'node': node,
        'ontology': ontology
      };
      let queryParams = {
        'cnode': this.apiClient.buildCollectionParam(opts['cnode'], 'multi'),
        'include_ancestors': opts['includeAncestors'],
        'include_descendants': opts['includeDescendants'],
        'relation': this.apiClient.buildCollectionParam(opts['relation'], 'multi'),
        'include_meta': opts['includeMeta']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ontol/subgraph/{ontology}/{node}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInformationContentResource operation.
     * @callback module:api/OntolApi~getInformationContentResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information content (IC) for a set of relevant ontology classes
     * ``` IC = -log2( freq(t) / popSize ) ```  Here the frequency and population is calculated for a particular dataset: e.g. all human disease-phenotype associations
     * @param {String} subjectCategory 
     * @param {String} objectCategory 
     * @param {String} subjectTaxon 
     * @param {Object} opts Optional parameters
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
     * @param {module:api/OntolApi~getInformationContentResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInformationContentResource(subjectCategory, objectCategory, subjectTaxon, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subjectCategory' is set
      if (subjectCategory === undefined || subjectCategory === null) {
        throw new Error("Missing the required parameter 'subjectCategory' when calling getInformationContentResource");
      }
      // verify the required parameter 'objectCategory' is set
      if (objectCategory === undefined || objectCategory === null) {
        throw new Error("Missing the required parameter 'objectCategory' when calling getInformationContentResource");
      }
      // verify the required parameter 'subjectTaxon' is set
      if (subjectTaxon === undefined || subjectTaxon === null) {
        throw new Error("Missing the required parameter 'subjectTaxon' when calling getInformationContentResource");
      }

      let pathParams = {
        'subject_category': subjectCategory,
        'object_category': objectCategory,
        'subject_taxon': subjectTaxon
      };
      let queryParams = {
        'evidence': opts['evidence']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ontol/information_content/{subject_category}/{object_category}/{subject_taxon}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postExtractOntologySubgraphResource operation.
     * @callback module:api/OntolApi~postExtractOntologySubgraphResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract a subgraph from an ontology
     * @param {String} node class ID, e.g. HP:0001288
     * @param {String} ontology ontology ID, e.g. go, uberon, mp, hp
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [cnode] Additional classes
     * @param {Boolean} [includeAncestors = true)] Include Ancestors
     * @param {Boolean} [includeDescendants] Include Descendants
     * @param {Array.<String>} [relation] Additional classes
     * @param {Boolean} [includeMeta = false)] Include metadata in response
     * @param {module:api/OntolApi~postExtractOntologySubgraphResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postExtractOntologySubgraphResource(node, ontology, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'node' is set
      if (node === undefined || node === null) {
        throw new Error("Missing the required parameter 'node' when calling postExtractOntologySubgraphResource");
      }
      // verify the required parameter 'ontology' is set
      if (ontology === undefined || ontology === null) {
        throw new Error("Missing the required parameter 'ontology' when calling postExtractOntologySubgraphResource");
      }

      let pathParams = {
        'node': node,
        'ontology': ontology
      };
      let queryParams = {
        'cnode': this.apiClient.buildCollectionParam(opts['cnode'], 'multi'),
        'include_ancestors': opts['includeAncestors'],
        'include_descendants': opts['includeDescendants'],
        'relation': this.apiClient.buildCollectionParam(opts['relation'], 'multi'),
        'include_meta': opts['includeMeta']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ontol/subgraph/{ontology}/{node}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
