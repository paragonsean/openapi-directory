/**
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociationResults from '../model/AssociationResults';

/**
* RelationUsage service.
* @module api/RelationUsageApi
* @version 1.1.14
*/
export default class RelationUsageApi {

    /**
    * Constructs a new RelationUsageApi. 
    * @alias module:api/RelationUsageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRelationUsageBetweenResource operation.
     * @callback module:api/RelationUsageApi~getRelationUsageBetweenResourceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All relations used plus count of associations
     * @param {String} subjectCategory 
     * @param {String} objectCategory 
     * @param {Object} opts Optional parameters
     * @param {String} [subjectTaxon] SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
     * @param {module:api/RelationUsageApi~getRelationUsageBetweenResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getRelationUsageBetweenResource(subjectCategory, objectCategory, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subjectCategory' is set
      if (subjectCategory === undefined || subjectCategory === null) {
        throw new Error("Missing the required parameter 'subjectCategory' when calling getRelationUsageBetweenResource");
      }
      // verify the required parameter 'objectCategory' is set
      if (objectCategory === undefined || objectCategory === null) {
        throw new Error("Missing the required parameter 'objectCategory' when calling getRelationUsageBetweenResource");
      }

      let pathParams = {
        'subject_category': subjectCategory,
        'object_category': objectCategory
      };
      let queryParams = {
        'subject_taxon': opts['subjectTaxon'],
        'evidence': opts['evidence']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/relation/usage/between/{subject_category}/{object_category}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationUsagePivotLabelResource operation.
     * @callback module:api/RelationUsageApi~getRelationUsagePivotLabelResourceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Relation usage count for all subj x obj category combinations, showing label
     * @param {Object} opts Optional parameters
     * @param {String} [subjectTaxon] SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
     * @param {module:api/RelationUsageApi~getRelationUsagePivotLabelResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getRelationUsagePivotLabelResource(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'subject_taxon': opts['subjectTaxon'],
        'evidence': opts['evidence']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/relation/usage/pivot/label', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationUsagePivotResource operation.
     * @callback module:api/RelationUsageApi~getRelationUsagePivotResourceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Relation usage count for all subj x obj category combinations
     * @param {Object} opts Optional parameters
     * @param {String} [subjectTaxon] SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
     * @param {module:api/RelationUsageApi~getRelationUsagePivotResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getRelationUsagePivotResource(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'subject_taxon': opts['subjectTaxon'],
        'evidence': opts['evidence']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/relation/usage/pivot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationUsageResource operation.
     * @callback module:api/RelationUsageApi~getRelationUsageResourceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All relations used plus count of associations
     * @param {Object} opts Optional parameters
     * @param {String} [subjectTaxon] SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default
     * @param {String} [evidence] Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
     * @param {module:api/RelationUsageApi~getRelationUsageResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssociationResults>}
     */
    getRelationUsageResource(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'subject_taxon': opts['subjectTaxon'],
        'evidence': opts['evidence']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssociationResults];
      return this.apiClient.callApi(
        '/relation/usage/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
