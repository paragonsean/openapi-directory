# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, docs: List[object]=None, facet_counts: object=None, highlighting: object=None, num_found: int=None):
        """SearchResult - a model defined in OpenAPI

        :param docs: The docs of this SearchResult.
        :param facet_counts: The facet_counts of this SearchResult.
        :param highlighting: The highlighting of this SearchResult.
        :param num_found: The num_found of this SearchResult.
        """
        self.openapi_types = {
            'docs': List[object],
            'facet_counts': object,
            'highlighting': object,
            'num_found': int
        }

        self.attribute_map = {
            'docs': 'docs',
            'facet_counts': 'facet_counts',
            'highlighting': 'highlighting',
            'num_found': 'numFound'
        }

        self._docs = docs
        self._facet_counts = facet_counts
        self._highlighting = highlighting
        self._num_found = num_found

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResult of this SearchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def docs(self):
        """Gets the docs of this SearchResult.

        solr docs

        :return: The docs of this SearchResult.
        :rtype: List[object]
        """
        return self._docs

    @docs.setter
    def docs(self, docs):
        """Sets the docs of this SearchResult.

        solr docs

        :param docs: The docs of this SearchResult.
        :type docs: List[object]
        """

        self._docs = docs

    @property
    def facet_counts(self):
        """Gets the facet_counts of this SearchResult.

        Mapping between field names and association counts

        :return: The facet_counts of this SearchResult.
        :rtype: object
        """
        return self._facet_counts

    @facet_counts.setter
    def facet_counts(self, facet_counts):
        """Sets the facet_counts of this SearchResult.

        Mapping between field names and association counts

        :param facet_counts: The facet_counts of this SearchResult.
        :type facet_counts: object
        """

        self._facet_counts = facet_counts

    @property
    def highlighting(self):
        """Gets the highlighting of this SearchResult.

        Mapping between id and solr highlight

        :return: The highlighting of this SearchResult.
        :rtype: object
        """
        return self._highlighting

    @highlighting.setter
    def highlighting(self, highlighting):
        """Sets the highlighting of this SearchResult.

        Mapping between id and solr highlight

        :param highlighting: The highlighting of this SearchResult.
        :type highlighting: object
        """

        self._highlighting = highlighting

    @property
    def num_found(self):
        """Gets the num_found of this SearchResult.

        total number of associations matching query

        :return: The num_found of this SearchResult.
        :rtype: int
        """
        return self._num_found

    @num_found.setter
    def num_found(self, num_found):
        """Sets the num_found of this SearchResult.

        total number of associations matching query

        :param num_found: The num_found of this SearchResult.
        :type num_found: int
        """

        self._num_found = num_found
