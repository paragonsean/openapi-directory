# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VariantSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, category: str=None, category_id: int=None, id: int=None, pub_date: datetime=None, title: str=None):
        """VariantSet - a model defined in OpenAPI

        :param body: The body of this VariantSet.
        :param category: The category of this VariantSet.
        :param category_id: The category_id of this VariantSet.
        :param id: The id of this VariantSet.
        :param pub_date: The pub_date of this VariantSet.
        :param title: The title of this VariantSet.
        """
        self.openapi_types = {
            'body': str,
            'category': str,
            'category_id': int,
            'id': int,
            'pub_date': datetime,
            'title': str
        }

        self.attribute_map = {
            'body': 'body',
            'category': 'category',
            'category_id': 'category_id',
            'id': 'id',
            'pub_date': 'pub_date',
            'title': 'title'
        }

        self._body = body
        self._category = category
        self._category_id = category_id
        self._id = id
        self._pub_date = pub_date
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VariantSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The variant_set of this VariantSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this VariantSet.

        Article content

        :return: The body of this VariantSet.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this VariantSet.

        Article content

        :param body: The body of this VariantSet.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def category(self):
        """Gets the category of this VariantSet.


        :return: The category of this VariantSet.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this VariantSet.


        :param category: The category of this VariantSet.
        :type category: str
        """

        self._category = category

    @property
    def category_id(self):
        """Gets the category_id of this VariantSet.


        :return: The category_id of this VariantSet.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this VariantSet.


        :param category_id: The category_id of this VariantSet.
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def id(self):
        """Gets the id of this VariantSet.

        The unique identifier of a variant set

        :return: The id of this VariantSet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VariantSet.

        The unique identifier of a variant set

        :param id: The id of this VariantSet.
        :type id: int
        """

        self._id = id

    @property
    def pub_date(self):
        """Gets the pub_date of this VariantSet.


        :return: The pub_date of this VariantSet.
        :rtype: datetime
        """
        return self._pub_date

    @pub_date.setter
    def pub_date(self, pub_date):
        """Sets the pub_date of this VariantSet.


        :param pub_date: The pub_date of this VariantSet.
        :type pub_date: datetime
        """

        self._pub_date = pub_date

    @property
    def title(self):
        """Gets the title of this VariantSet.

        Article title

        :return: The title of this VariantSet.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this VariantSet.

        Article title

        :param title: The title of this VariantSet.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
