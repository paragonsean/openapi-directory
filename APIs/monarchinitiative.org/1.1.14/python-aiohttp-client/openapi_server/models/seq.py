# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.synonym_property_value import SynonymPropertyValue
from openapi_server.models.taxon import Taxon
from openapi_server import util


class Seq(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: List[str]=None, id: str=None, iri: str=None, label: str=None, consider: List[str]=None, deprecated: bool=None, description: str=None, replaced_by: List[str]=None, synonyms: List[SynonymPropertyValue]=None, types: List[str]=None, association_counts: object=None, taxon: Taxon=None, xrefs: List[str]=None, alphabet: str=None, md5checksum: str=None, residues: str=None, seqlen: str=None):
        """Seq - a model defined in OpenAPI

        :param category: The category of this Seq.
        :param id: The id of this Seq.
        :param iri: The iri of this Seq.
        :param label: The label of this Seq.
        :param consider: The consider of this Seq.
        :param deprecated: The deprecated of this Seq.
        :param description: The description of this Seq.
        :param replaced_by: The replaced_by of this Seq.
        :param synonyms: The synonyms of this Seq.
        :param types: The types of this Seq.
        :param association_counts: The association_counts of this Seq.
        :param taxon: The taxon of this Seq.
        :param xrefs: The xrefs of this Seq.
        :param alphabet: The alphabet of this Seq.
        :param md5checksum: The md5checksum of this Seq.
        :param residues: The residues of this Seq.
        :param seqlen: The seqlen of this Seq.
        """
        self.openapi_types = {
            'category': List[str],
            'id': str,
            'iri': str,
            'label': str,
            'consider': List[str],
            'deprecated': bool,
            'description': str,
            'replaced_by': List[str],
            'synonyms': List[SynonymPropertyValue],
            'types': List[str],
            'association_counts': object,
            'taxon': Taxon,
            'xrefs': List[str],
            'alphabet': str,
            'md5checksum': str,
            'residues': str,
            'seqlen': str
        }

        self.attribute_map = {
            'category': 'category',
            'id': 'id',
            'iri': 'iri',
            'label': 'label',
            'consider': 'consider',
            'deprecated': 'deprecated',
            'description': 'description',
            'replaced_by': 'replaced_by',
            'synonyms': 'synonyms',
            'types': 'types',
            'association_counts': 'association_counts',
            'taxon': 'taxon',
            'xrefs': 'xrefs',
            'alphabet': 'alphabet',
            'md5checksum': 'md5checksum',
            'residues': 'residues',
            'seqlen': 'seqlen'
        }

        self._category = category
        self._id = id
        self._iri = iri
        self._label = label
        self._consider = consider
        self._deprecated = deprecated
        self._description = description
        self._replaced_by = replaced_by
        self._synonyms = synonyms
        self._types = types
        self._association_counts = association_counts
        self._taxon = taxon
        self._xrefs = xrefs
        self._alphabet = alphabet
        self._md5checksum = md5checksum
        self._residues = residues
        self._seqlen = seqlen

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Seq':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Seq of this Seq.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Seq.


        :return: The category of this Seq.
        :rtype: List[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Seq.


        :param category: The category of this Seq.
        :type category: List[str]
        """

        self._category = category

    @property
    def id(self):
        """Gets the id of this Seq.

        ID or CURIE e.g. MGI:1201606

        :return: The id of this Seq.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Seq.

        ID or CURIE e.g. MGI:1201606

        :param id: The id of this Seq.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def iri(self):
        """Gets the iri of this Seq.

        IRI

        :return: The iri of this Seq.
        :rtype: str
        """
        return self._iri

    @iri.setter
    def iri(self, iri):
        """Sets the iri of this Seq.

        IRI

        :param iri: The iri of this Seq.
        :type iri: str
        """

        self._iri = iri

    @property
    def label(self):
        """Gets the label of this Seq.

        RDFS Label

        :return: The label of this Seq.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Seq.

        RDFS Label

        :param label: The label of this Seq.
        :type label: str
        """

        self._label = label

    @property
    def consider(self):
        """Gets the consider of this Seq.


        :return: The consider of this Seq.
        :rtype: List[str]
        """
        return self._consider

    @consider.setter
    def consider(self, consider):
        """Sets the consider of this Seq.


        :param consider: The consider of this Seq.
        :type consider: List[str]
        """

        self._consider = consider

    @property
    def deprecated(self):
        """Gets the deprecated of this Seq.

        True if the node is deprecated/obsoleted.

        :return: The deprecated of this Seq.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this Seq.

        True if the node is deprecated/obsoleted.

        :param deprecated: The deprecated of this Seq.
        :type deprecated: bool
        """

        self._deprecated = deprecated

    @property
    def description(self):
        """Gets the description of this Seq.

        Descriptive text for the entity. For ontology classes, this will be a definition.

        :return: The description of this Seq.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Seq.

        Descriptive text for the entity. For ontology classes, this will be a definition.

        :param description: The description of this Seq.
        :type description: str
        """

        self._description = description

    @property
    def replaced_by(self):
        """Gets the replaced_by of this Seq.


        :return: The replaced_by of this Seq.
        :rtype: List[str]
        """
        return self._replaced_by

    @replaced_by.setter
    def replaced_by(self, replaced_by):
        """Sets the replaced_by of this Seq.


        :param replaced_by: The replaced_by of this Seq.
        :type replaced_by: List[str]
        """

        self._replaced_by = replaced_by

    @property
    def synonyms(self):
        """Gets the synonyms of this Seq.

        list of synonyms or alternate labels

        :return: The synonyms of this Seq.
        :rtype: List[SynonymPropertyValue]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this Seq.

        list of synonyms or alternate labels

        :param synonyms: The synonyms of this Seq.
        :type synonyms: List[SynonymPropertyValue]
        """

        self._synonyms = synonyms

    @property
    def types(self):
        """Gets the types of this Seq.


        :return: The types of this Seq.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this Seq.


        :param types: The types of this Seq.
        :type types: List[str]
        """

        self._types = types

    @property
    def association_counts(self):
        """Gets the association_counts of this Seq.

        association counts

        :return: The association_counts of this Seq.
        :rtype: object
        """
        return self._association_counts

    @association_counts.setter
    def association_counts(self, association_counts):
        """Sets the association_counts of this Seq.

        association counts

        :param association_counts: The association_counts of this Seq.
        :type association_counts: object
        """

        self._association_counts = association_counts

    @property
    def taxon(self):
        """Gets the taxon of this Seq.

        Taxon to which the object belongs

        :return: The taxon of this Seq.
        :rtype: Taxon
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this Seq.

        Taxon to which the object belongs

        :param taxon: The taxon of this Seq.
        :type taxon: Taxon
        """

        self._taxon = taxon

    @property
    def xrefs(self):
        """Gets the xrefs of this Seq.

        Database cross-references. These are usually CURIEs, but may also be URLs. E.g. ENSEMBL:ENSG00000099940 

        :return: The xrefs of this Seq.
        :rtype: List[str]
        """
        return self._xrefs

    @xrefs.setter
    def xrefs(self, xrefs):
        """Sets the xrefs of this Seq.

        Database cross-references. These are usually CURIEs, but may also be URLs. E.g. ENSEMBL:ENSG00000099940 

        :param xrefs: The xrefs of this Seq.
        :type xrefs: List[str]
        """

        self._xrefs = xrefs

    @property
    def alphabet(self):
        """Gets the alphabet of this Seq.

        one of: DNA, RNA or AA

        :return: The alphabet of this Seq.
        :rtype: str
        """
        return self._alphabet

    @alphabet.setter
    def alphabet(self, alphabet):
        """Sets the alphabet of this Seq.

        one of: DNA, RNA or AA

        :param alphabet: The alphabet of this Seq.
        :type alphabet: str
        """

        self._alphabet = alphabet

    @property
    def md5checksum(self):
        """Gets the md5checksum of this Seq.

        checksum

        :return: The md5checksum of this Seq.
        :rtype: str
        """
        return self._md5checksum

    @md5checksum.setter
    def md5checksum(self, md5checksum):
        """Sets the md5checksum of this Seq.

        checksum

        :param md5checksum: The md5checksum of this Seq.
        :type md5checksum: str
        """

        self._md5checksum = md5checksum

    @property
    def residues(self):
        """Gets the residues of this Seq.

        string representing sequence of residues

        :return: The residues of this Seq.
        :rtype: str
        """
        return self._residues

    @residues.setter
    def residues(self, residues):
        """Sets the residues of this Seq.

        string representing sequence of residues

        :param residues: The residues of this Seq.
        :type residues: str
        """

        self._residues = residues

    @property
    def seqlen(self):
        """Gets the seqlen of this Seq.

        length of sequence

        :return: The seqlen of this Seq.
        :rtype: str
        """
        return self._seqlen

    @seqlen.setter
    def seqlen(self, seqlen):
        """Sets the seqlen of this Seq.

        length of sequence

        :param seqlen: The seqlen of this Seq.
        :type seqlen: str
        """

        self._seqlen = seqlen
