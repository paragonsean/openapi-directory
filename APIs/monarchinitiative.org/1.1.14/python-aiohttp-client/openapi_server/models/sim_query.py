# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node import Node
from openapi_server.models.typed_node import TypedNode
from openapi_server import util


class SimQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ids: List[Node]=None, negated_ids: List[Node]=None, reference: TypedNode=None, target_ids: List[List[Node]]=None, unresolved_ids: List[str]=None):
        """SimQuery - a model defined in OpenAPI

        :param ids: The ids of this SimQuery.
        :param negated_ids: The negated_ids of this SimQuery.
        :param reference: The reference of this SimQuery.
        :param target_ids: The target_ids of this SimQuery.
        :param unresolved_ids: The unresolved_ids of this SimQuery.
        """
        self.openapi_types = {
            'ids': List[Node],
            'negated_ids': List[Node],
            'reference': TypedNode,
            'target_ids': List[List[Node]],
            'unresolved_ids': List[str]
        }

        self.attribute_map = {
            'ids': 'ids',
            'negated_ids': 'negated_ids',
            'reference': 'reference',
            'target_ids': 'target_ids',
            'unresolved_ids': 'unresolved_ids'
        }

        self._ids = ids
        self._negated_ids = negated_ids
        self._reference = reference
        self._target_ids = target_ids
        self._unresolved_ids = unresolved_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimQuery of this SimQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ids(self):
        """Gets the ids of this SimQuery.


        :return: The ids of this SimQuery.
        :rtype: List[Node]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this SimQuery.


        :param ids: The ids of this SimQuery.
        :type ids: List[Node]
        """

        self._ids = ids

    @property
    def negated_ids(self):
        """Gets the negated_ids of this SimQuery.


        :return: The negated_ids of this SimQuery.
        :rtype: List[Node]
        """
        return self._negated_ids

    @negated_ids.setter
    def negated_ids(self, negated_ids):
        """Sets the negated_ids of this SimQuery.


        :param negated_ids: The negated_ids of this SimQuery.
        :type negated_ids: List[Node]
        """

        self._negated_ids = negated_ids

    @property
    def reference(self):
        """Gets the reference of this SimQuery.

        reference individual or class (eg gene, disease)

        :return: The reference of this SimQuery.
        :rtype: TypedNode
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SimQuery.

        reference individual or class (eg gene, disease)

        :param reference: The reference of this SimQuery.
        :type reference: TypedNode
        """

        self._reference = reference

    @property
    def target_ids(self):
        """Gets the target_ids of this SimQuery.


        :return: The target_ids of this SimQuery.
        :rtype: List[List[Node]]
        """
        return self._target_ids

    @target_ids.setter
    def target_ids(self, target_ids):
        """Sets the target_ids of this SimQuery.


        :param target_ids: The target_ids of this SimQuery.
        :type target_ids: List[List[Node]]
        """

        self._target_ids = target_ids

    @property
    def unresolved_ids(self):
        """Gets the unresolved_ids of this SimQuery.

        list of unresolved ids

        :return: The unresolved_ids of this SimQuery.
        :rtype: List[str]
        """
        return self._unresolved_ids

    @unresolved_ids.setter
    def unresolved_ids(self, unresolved_ids):
        """Sets the unresolved_ids of this SimQuery.

        list of unresolved ids

        :param unresolved_ids: The unresolved_ids of this SimQuery.
        :type unresolved_ids: List[str]
        """

        self._unresolved_ids = unresolved_ids
