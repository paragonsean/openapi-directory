# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LayAutocomplete(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, highlight: str=None, id: str=None, label: str=None, matched_synonym: str=None):
        """LayAutocomplete - a model defined in OpenAPI

        :param highlight: The highlight of this LayAutocomplete.
        :param id: The id of this LayAutocomplete.
        :param label: The label of this LayAutocomplete.
        :param matched_synonym: The matched_synonym of this LayAutocomplete.
        """
        self.openapi_types = {
            'highlight': str,
            'id': str,
            'label': str,
            'matched_synonym': str
        }

        self.attribute_map = {
            'highlight': 'highlight',
            'id': 'id',
            'label': 'label',
            'matched_synonym': 'matched_synonym'
        }

        self._highlight = highlight
        self._id = id
        self._label = label
        self._matched_synonym = matched_synonym

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LayAutocomplete':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LayAutocomplete of this LayAutocomplete.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def highlight(self):
        """Gets the highlight of this LayAutocomplete.

        solr highlight

        :return: The highlight of this LayAutocomplete.
        :rtype: str
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this LayAutocomplete.

        solr highlight

        :param highlight: The highlight of this LayAutocomplete.
        :type highlight: str
        """

        self._highlight = highlight

    @property
    def id(self):
        """Gets the id of this LayAutocomplete.

        curie formatted id

        :return: The id of this LayAutocomplete.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LayAutocomplete.

        curie formatted id

        :param id: The id of this LayAutocomplete.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this LayAutocomplete.

        primary label (rdfs:label)

        :return: The label of this LayAutocomplete.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LayAutocomplete.

        primary label (rdfs:label)

        :param label: The label of this LayAutocomplete.
        :type label: str
        """

        self._label = label

    @property
    def matched_synonym(self):
        """Gets the matched_synonym of this LayAutocomplete.

        matched synonym

        :return: The matched_synonym of this LayAutocomplete.
        :rtype: str
        """
        return self._matched_synonym

    @matched_synonym.setter
    def matched_synonym(self, matched_synonym):
        """Sets the matched_synonym of this LayAutocomplete.

        matched synonym

        :param matched_synonym: The matched_synonym of this LayAutocomplete.
        :type matched_synonym: str
        """

        self._matched_synonym = matched_synonym
