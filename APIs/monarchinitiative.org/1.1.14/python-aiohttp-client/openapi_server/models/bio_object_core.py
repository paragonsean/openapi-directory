# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.taxon import Taxon
from openapi_server import util


class BioObjectCore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: List[str]=None, id: str=None, iri: str=None, label: str=None, taxon: Taxon=None):
        """BioObjectCore - a model defined in OpenAPI

        :param category: The category of this BioObjectCore.
        :param id: The id of this BioObjectCore.
        :param iri: The iri of this BioObjectCore.
        :param label: The label of this BioObjectCore.
        :param taxon: The taxon of this BioObjectCore.
        """
        self.openapi_types = {
            'category': List[str],
            'id': str,
            'iri': str,
            'label': str,
            'taxon': Taxon
        }

        self.attribute_map = {
            'category': 'category',
            'id': 'id',
            'iri': 'iri',
            'label': 'label',
            'taxon': 'taxon'
        }

        self._category = category
        self._id = id
        self._iri = iri
        self._label = label
        self._taxon = taxon

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BioObjectCore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BioObjectCore of this BioObjectCore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this BioObjectCore.


        :return: The category of this BioObjectCore.
        :rtype: List[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BioObjectCore.


        :param category: The category of this BioObjectCore.
        :type category: List[str]
        """

        self._category = category

    @property
    def id(self):
        """Gets the id of this BioObjectCore.

        ID or CURIE e.g. MGI:1201606

        :return: The id of this BioObjectCore.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BioObjectCore.

        ID or CURIE e.g. MGI:1201606

        :param id: The id of this BioObjectCore.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def iri(self):
        """Gets the iri of this BioObjectCore.

        IRI

        :return: The iri of this BioObjectCore.
        :rtype: str
        """
        return self._iri

    @iri.setter
    def iri(self, iri):
        """Sets the iri of this BioObjectCore.

        IRI

        :param iri: The iri of this BioObjectCore.
        :type iri: str
        """

        self._iri = iri

    @property
    def label(self):
        """Gets the label of this BioObjectCore.

        RDFS Label

        :return: The label of this BioObjectCore.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this BioObjectCore.

        RDFS Label

        :param label: The label of this BioObjectCore.
        :type label: str
        """

        self._label = label

    @property
    def taxon(self):
        """Gets the taxon of this BioObjectCore.

        Taxon to which the object belongs

        :return: The taxon of this BioObjectCore.
        :rtype: Taxon
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this BioObjectCore.

        Taxon to which the object belongs

        :param taxon: The taxon of this BioObjectCore.
        :type taxon: Taxon
        """

        self._taxon = taxon
