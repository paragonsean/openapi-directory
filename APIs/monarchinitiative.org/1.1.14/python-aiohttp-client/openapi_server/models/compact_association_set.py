# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompactAssociationSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, objects: List[str]=None, relation: str=None, subject: str=None):
        """CompactAssociationSet - a model defined in OpenAPI

        :param objects: The objects of this CompactAssociationSet.
        :param relation: The relation of this CompactAssociationSet.
        :param subject: The subject of this CompactAssociationSet.
        """
        self.openapi_types = {
            'objects': List[str],
            'relation': str,
            'subject': str
        }

        self.attribute_map = {
            'objects': 'objects',
            'relation': 'relation',
            'subject': 'subject'
        }

        self._objects = objects
        self._relation = relation
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompactAssociationSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompactAssociationSet of this CompactAssociationSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def objects(self):
        """Gets the objects of this CompactAssociationSet.

        List of O, for a given (S,R) pair, yielding (S,R,O) triples. E.g. list of MPs for (MGI:nnn, has_phenotype)

        :return: The objects of this CompactAssociationSet.
        :rtype: List[str]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this CompactAssociationSet.

        List of O, for a given (S,R) pair, yielding (S,R,O) triples. E.g. list of MPs for (MGI:nnn, has_phenotype)

        :param objects: The objects of this CompactAssociationSet.
        :type objects: List[str]
        """
        if objects is None:
            raise ValueError("Invalid value for `objects`, must not be `None`")

        self._objects = objects

    @property
    def relation(self):
        """Gets the relation of this CompactAssociationSet.

        Relationship type connecting subject and object list

        :return: The relation of this CompactAssociationSet.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this CompactAssociationSet.

        Relationship type connecting subject and object list

        :param relation: The relation of this CompactAssociationSet.
        :type relation: str
        """
        if relation is None:
            raise ValueError("Invalid value for `relation`, must not be `None`")

        self._relation = relation

    @property
    def subject(self):
        """Gets the subject of this CompactAssociationSet.

        Subject of association (what it is about), e.g. MGI:1201606

        :return: The subject of this CompactAssociationSet.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CompactAssociationSet.

        Subject of association (what it is about), e.g. MGI:1201606

        :param subject: The subject of this CompactAssociationSet.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject
