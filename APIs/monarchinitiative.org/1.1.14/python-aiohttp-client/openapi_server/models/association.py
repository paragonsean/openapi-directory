# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.annotation_extension import AnnotationExtension
from openapi_server.models.bio_object_core import BioObjectCore
from openapi_server.models.entity_reference import EntityReference
from openapi_server.models.graph import Graph
from openapi_server.models.relation_ref import RelationRef
from openapi_server import util


class Association(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evidence_graph: Graph=None, evidence_types: List[EntityReference]=None, id: str=None, negated: bool=None, object: BioObjectCore=None, object_eq: List[str]=None, object_extensions: List[AnnotationExtension]=None, provided_by: List[str]=None, publications: List[EntityReference]=None, qualifiers: List[str]=None, relation: RelationRef=None, slim: List[str]=None, subject: BioObjectCore=None, subject_eq: List[str]=None, subject_extensions: List[AnnotationExtension]=None, type: str=None):
        """Association - a model defined in OpenAPI

        :param evidence_graph: The evidence_graph of this Association.
        :param evidence_types: The evidence_types of this Association.
        :param id: The id of this Association.
        :param negated: The negated of this Association.
        :param object: The object of this Association.
        :param object_eq: The object_eq of this Association.
        :param object_extensions: The object_extensions of this Association.
        :param provided_by: The provided_by of this Association.
        :param publications: The publications of this Association.
        :param qualifiers: The qualifiers of this Association.
        :param relation: The relation of this Association.
        :param slim: The slim of this Association.
        :param subject: The subject of this Association.
        :param subject_eq: The subject_eq of this Association.
        :param subject_extensions: The subject_extensions of this Association.
        :param type: The type of this Association.
        """
        self.openapi_types = {
            'evidence_graph': Graph,
            'evidence_types': List[EntityReference],
            'id': str,
            'negated': bool,
            'object': BioObjectCore,
            'object_eq': List[str],
            'object_extensions': List[AnnotationExtension],
            'provided_by': List[str],
            'publications': List[EntityReference],
            'qualifiers': List[str],
            'relation': RelationRef,
            'slim': List[str],
            'subject': BioObjectCore,
            'subject_eq': List[str],
            'subject_extensions': List[AnnotationExtension],
            'type': str
        }

        self.attribute_map = {
            'evidence_graph': 'evidence_graph',
            'evidence_types': 'evidence_types',
            'id': 'id',
            'negated': 'negated',
            'object': 'object',
            'object_eq': 'object_eq',
            'object_extensions': 'object_extensions',
            'provided_by': 'provided_by',
            'publications': 'publications',
            'qualifiers': 'qualifiers',
            'relation': 'relation',
            'slim': 'slim',
            'subject': 'subject',
            'subject_eq': 'subject_eq',
            'subject_extensions': 'subject_extensions',
            'type': 'type'
        }

        self._evidence_graph = evidence_graph
        self._evidence_types = evidence_types
        self._id = id
        self._negated = negated
        self._object = object
        self._object_eq = object_eq
        self._object_extensions = object_extensions
        self._provided_by = provided_by
        self._publications = publications
        self._qualifiers = qualifiers
        self._relation = relation
        self._slim = slim
        self._subject = subject
        self._subject_eq = subject_eq
        self._subject_extensions = subject_extensions
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Association':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Association of this Association.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evidence_graph(self):
        """Gets the evidence_graph of this Association.

        An indirect association is a join between two or more direct assocations, e.g. gene to disease via ortholog. We record the full set of associations as a graph object

        :return: The evidence_graph of this Association.
        :rtype: Graph
        """
        return self._evidence_graph

    @evidence_graph.setter
    def evidence_graph(self, evidence_graph):
        """Sets the evidence_graph of this Association.

        An indirect association is a join between two or more direct assocations, e.g. gene to disease via ortholog. We record the full set of associations as a graph object

        :param evidence_graph: The evidence_graph of this Association.
        :type evidence_graph: Graph
        """

        self._evidence_graph = evidence_graph

    @property
    def evidence_types(self):
        """Gets the evidence_types of this Association.

        Evidence types (ECO classes)

        :return: The evidence_types of this Association.
        :rtype: List[EntityReference]
        """
        return self._evidence_types

    @evidence_types.setter
    def evidence_types(self, evidence_types):
        """Sets the evidence_types of this Association.

        Evidence types (ECO classes)

        :param evidence_types: The evidence_types of this Association.
        :type evidence_types: List[EntityReference]
        """

        self._evidence_types = evidence_types

    @property
    def id(self):
        """Gets the id of this Association.

        Association/annotation unique ID

        :return: The id of this Association.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Association.

        Association/annotation unique ID

        :param id: The id of this Association.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def negated(self):
        """Gets the negated of this Association.

        True if association is negated

        :return: The negated of this Association.
        :rtype: bool
        """
        return self._negated

    @negated.setter
    def negated(self, negated):
        """Sets the negated of this Association.

        True if association is negated

        :param negated: The negated of this Association.
        :type negated: bool
        """

        self._negated = negated

    @property
    def object(self):
        """Gets the object of this Association.

        Object (sensu RDF), aka target, e.g. HP:0000448, MP:0002109, DOID:14330

        :return: The object of this Association.
        :rtype: BioObjectCore
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Association.

        Object (sensu RDF), aka target, e.g. HP:0000448, MP:0002109, DOID:14330

        :param object: The object of this Association.
        :type object: BioObjectCore
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")

        self._object = object

    @property
    def object_eq(self):
        """Gets the object_eq of this Association.

        Equivalent identifiers to object node

        :return: The object_eq of this Association.
        :rtype: List[str]
        """
        return self._object_eq

    @object_eq.setter
    def object_eq(self, object_eq):
        """Sets the object_eq of this Association.

        Equivalent identifiers to object node

        :param object_eq: The object_eq of this Association.
        :type object_eq: List[str]
        """

        self._object_eq = object_eq

    @property
    def object_extensions(self):
        """Gets the object_extensions of this Association.


        :return: The object_extensions of this Association.
        :rtype: List[AnnotationExtension]
        """
        return self._object_extensions

    @object_extensions.setter
    def object_extensions(self, object_extensions):
        """Sets the object_extensions of this Association.


        :param object_extensions: The object_extensions of this Association.
        :type object_extensions: List[AnnotationExtension]
        """

        self._object_extensions = object_extensions

    @property
    def provided_by(self):
        """Gets the provided_by of this Association.

        Provider of association, e.g. Orphanet, ClinVar

        :return: The provided_by of this Association.
        :rtype: List[str]
        """
        return self._provided_by

    @provided_by.setter
    def provided_by(self, provided_by):
        """Sets the provided_by of this Association.

        Provider of association, e.g. Orphanet, ClinVar

        :param provided_by: The provided_by of this Association.
        :type provided_by: List[str]
        """

        self._provided_by = provided_by

    @property
    def publications(self):
        """Gets the publications of this Association.

        Publications supporting association, extracted from evidence graph

        :return: The publications of this Association.
        :rtype: List[EntityReference]
        """
        return self._publications

    @publications.setter
    def publications(self, publications):
        """Sets the publications of this Association.

        Publications supporting association, extracted from evidence graph

        :param publications: The publications of this Association.
        :type publications: List[EntityReference]
        """

        self._publications = publications

    @property
    def qualifiers(self):
        """Gets the qualifiers of this Association.

        Qualifier on the association

        :return: The qualifiers of this Association.
        :rtype: List[str]
        """
        return self._qualifiers

    @qualifiers.setter
    def qualifiers(self, qualifiers):
        """Sets the qualifiers of this Association.

        Qualifier on the association

        :param qualifiers: The qualifiers of this Association.
        :type qualifiers: List[str]
        """

        self._qualifiers = qualifiers

    @property
    def relation(self):
        """Gets the relation of this Association.

        Relationship type connecting subject and object

        :return: The relation of this Association.
        :rtype: RelationRef
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this Association.

        Relationship type connecting subject and object

        :param relation: The relation of this Association.
        :type relation: RelationRef
        """
        if relation is None:
            raise ValueError("Invalid value for `relation`, must not be `None`")

        self._relation = relation

    @property
    def slim(self):
        """Gets the slim of this Association.

        Objects mapped to a slim

        :return: The slim of this Association.
        :rtype: List[str]
        """
        return self._slim

    @slim.setter
    def slim(self, slim):
        """Sets the slim of this Association.

        Objects mapped to a slim

        :param slim: The slim of this Association.
        :type slim: List[str]
        """

        self._slim = slim

    @property
    def subject(self):
        """Gets the subject of this Association.

        Subject of association (what it is about), e.g. ClinVar:nnn, MGI:1201606

        :return: The subject of this Association.
        :rtype: BioObjectCore
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Association.

        Subject of association (what it is about), e.g. ClinVar:nnn, MGI:1201606

        :param subject: The subject of this Association.
        :type subject: BioObjectCore
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def subject_eq(self):
        """Gets the subject_eq of this Association.

        Equivalent identifiers to subject node

        :return: The subject_eq of this Association.
        :rtype: List[str]
        """
        return self._subject_eq

    @subject_eq.setter
    def subject_eq(self, subject_eq):
        """Sets the subject_eq of this Association.

        Equivalent identifiers to subject node

        :param subject_eq: The subject_eq of this Association.
        :type subject_eq: List[str]
        """

        self._subject_eq = subject_eq

    @property
    def subject_extensions(self):
        """Gets the subject_extensions of this Association.


        :return: The subject_extensions of this Association.
        :rtype: List[AnnotationExtension]
        """
        return self._subject_extensions

    @subject_extensions.setter
    def subject_extensions(self, subject_extensions):
        """Sets the subject_extensions of this Association.


        :param subject_extensions: The subject_extensions of this Association.
        :type subject_extensions: List[AnnotationExtension]
        """

        self._subject_extensions = subject_extensions

    @property
    def type(self):
        """Gets the type of this Association.

        Type of association, e.g. gene-phenotype

        :return: The type of this Association.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Association.

        Type of association, e.g. gene-phenotype

        :param type: The type of this Association.
        :type type: str
        """

        self._type = type
