# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node import Node
from openapi_server.models.sim_match_all_of_pairwise_match import SimMatchAllOfPairwiseMatch
from openapi_server import util


class SimMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, label: str=None, taxon: Node=None, type: str=None, pairwise_match: List[SimMatchAllOfPairwiseMatch]=None, rank: str=None, score: float=None, significance: str=None):
        """SimMatch - a model defined in OpenAPI

        :param id: The id of this SimMatch.
        :param label: The label of this SimMatch.
        :param taxon: The taxon of this SimMatch.
        :param type: The type of this SimMatch.
        :param pairwise_match: The pairwise_match of this SimMatch.
        :param rank: The rank of this SimMatch.
        :param score: The score of this SimMatch.
        :param significance: The significance of this SimMatch.
        """
        self.openapi_types = {
            'id': str,
            'label': str,
            'taxon': Node,
            'type': str,
            'pairwise_match': List[SimMatchAllOfPairwiseMatch],
            'rank': str,
            'score': float,
            'significance': str
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'taxon': 'taxon',
            'type': 'type',
            'pairwise_match': 'pairwise_match',
            'rank': 'rank',
            'score': 'score',
            'significance': 'significance'
        }

        self._id = id
        self._label = label
        self._taxon = taxon
        self._type = type
        self._pairwise_match = pairwise_match
        self._rank = rank
        self._score = score
        self._significance = significance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimMatch of this SimMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SimMatch.

        ID or CURIE e.g. MGI:1201606

        :return: The id of this SimMatch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimMatch.

        ID or CURIE e.g. MGI:1201606

        :param id: The id of this SimMatch.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label(self):
        """Gets the label of this SimMatch.

        RDFS Label

        :return: The label of this SimMatch.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SimMatch.

        RDFS Label

        :param label: The label of this SimMatch.
        :type label: str
        """

        self._label = label

    @property
    def taxon(self):
        """Gets the taxon of this SimMatch.

        taxon

        :return: The taxon of this SimMatch.
        :rtype: Node
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this SimMatch.

        taxon

        :param taxon: The taxon of this SimMatch.
        :type taxon: Node
        """

        self._taxon = taxon

    @property
    def type(self):
        """Gets the type of this SimMatch.

        node type (eg phenotype, disease)

        :return: The type of this SimMatch.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimMatch.

        node type (eg phenotype, disease)

        :param type: The type of this SimMatch.
        :type type: str
        """

        self._type = type

    @property
    def pairwise_match(self):
        """Gets the pairwise_match of this SimMatch.


        :return: The pairwise_match of this SimMatch.
        :rtype: List[SimMatchAllOfPairwiseMatch]
        """
        return self._pairwise_match

    @pairwise_match.setter
    def pairwise_match(self, pairwise_match):
        """Sets the pairwise_match of this SimMatch.


        :param pairwise_match: The pairwise_match of this SimMatch.
        :type pairwise_match: List[SimMatchAllOfPairwiseMatch]
        """

        self._pairwise_match = pairwise_match

    @property
    def rank(self):
        """Gets the rank of this SimMatch.

        rank

        :return: The rank of this SimMatch.
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this SimMatch.

        rank

        :param rank: The rank of this SimMatch.
        :type rank: str
        """

        self._rank = rank

    @property
    def score(self):
        """Gets the score of this SimMatch.

        sim score

        :return: The score of this SimMatch.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SimMatch.

        sim score

        :param score: The score of this SimMatch.
        :type score: float
        """

        self._score = score

    @property
    def significance(self):
        """Gets the significance of this SimMatch.

        p-value

        :return: The significance of this SimMatch.
        :rtype: str
        """
        return self._significance

    @significance.setter
    def significance(self, significance):
        """Sets the significance of this SimMatch.

        p-value

        :param significance: The significance of this SimMatch.
        :type significance: str
        """

        self._significance = significance
