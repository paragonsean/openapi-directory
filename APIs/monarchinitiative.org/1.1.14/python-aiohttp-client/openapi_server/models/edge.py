# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Edge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta: object=None, obj: str=None, pred: str=None, sub: str=None):
        """Edge - a model defined in OpenAPI

        :param meta: The meta of this Edge.
        :param obj: The obj of this Edge.
        :param pred: The pred of this Edge.
        :param sub: The sub of this Edge.
        """
        self.openapi_types = {
            'meta': object,
            'obj': str,
            'pred': str,
            'sub': str
        }

        self.attribute_map = {
            'meta': 'meta',
            'obj': 'obj',
            'pred': 'pred',
            'sub': 'sub'
        }

        self._meta = meta
        self._obj = obj
        self._pred = pred
        self._sub = sub

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Edge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Edge of this Edge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self):
        """Gets the meta of this Edge.

        metadata about the Edge

        :return: The meta of this Edge.
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Edge.

        metadata about the Edge

        :param meta: The meta of this Edge.
        :type meta: object
        """

        self._meta = meta

    @property
    def obj(self):
        """Gets the obj of this Edge.

        Object (target) Node ID

        :return: The obj of this Edge.
        :rtype: str
        """
        return self._obj

    @obj.setter
    def obj(self, obj):
        """Sets the obj of this Edge.

        Object (target) Node ID

        :param obj: The obj of this Edge.
        :type obj: str
        """

        self._obj = obj

    @property
    def pred(self):
        """Gets the pred of this Edge.

        Predicate (relation) ID

        :return: The pred of this Edge.
        :rtype: str
        """
        return self._pred

    @pred.setter
    def pred(self, pred):
        """Sets the pred of this Edge.

        Predicate (relation) ID

        :param pred: The pred of this Edge.
        :type pred: str
        """

        self._pred = pred

    @property
    def sub(self):
        """Gets the sub of this Edge.

        Subject (source) Node ID

        :return: The sub of this Edge.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this Edge.

        Subject (source) Node ID

        :param sub: The sub of this Edge.
        :type sub: str
        """

        self._sub = sub
