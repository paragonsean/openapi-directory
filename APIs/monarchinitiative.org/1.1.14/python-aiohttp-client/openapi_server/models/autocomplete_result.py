# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutocompleteResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: List[str]=None, equivalent_ids: List[str]=None, has_highlight: bool=None, highlight: str=None, id: str=None, label: List[str]=None, match: str=None, taxon: str=None, taxon_label: str=None):
        """AutocompleteResult - a model defined in OpenAPI

        :param category: The category of this AutocompleteResult.
        :param equivalent_ids: The equivalent_ids of this AutocompleteResult.
        :param has_highlight: The has_highlight of this AutocompleteResult.
        :param highlight: The highlight of this AutocompleteResult.
        :param id: The id of this AutocompleteResult.
        :param label: The label of this AutocompleteResult.
        :param match: The match of this AutocompleteResult.
        :param taxon: The taxon of this AutocompleteResult.
        :param taxon_label: The taxon_label of this AutocompleteResult.
        """
        self.openapi_types = {
            'category': List[str],
            'equivalent_ids': List[str],
            'has_highlight': bool,
            'highlight': str,
            'id': str,
            'label': List[str],
            'match': str,
            'taxon': str,
            'taxon_label': str
        }

        self.attribute_map = {
            'category': 'category',
            'equivalent_ids': 'equivalent_ids',
            'has_highlight': 'has_highlight',
            'highlight': 'highlight',
            'id': 'id',
            'label': 'label',
            'match': 'match',
            'taxon': 'taxon',
            'taxon_label': 'taxon_label'
        }

        self._category = category
        self._equivalent_ids = equivalent_ids
        self._has_highlight = has_highlight
        self._highlight = highlight
        self._id = id
        self._label = label
        self._match = match
        self._taxon = taxon
        self._taxon_label = taxon_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutocompleteResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutocompleteResult of this AutocompleteResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this AutocompleteResult.

        node categories

        :return: The category of this AutocompleteResult.
        :rtype: List[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AutocompleteResult.

        node categories

        :param category: The category of this AutocompleteResult.
        :type category: List[str]
        """

        self._category = category

    @property
    def equivalent_ids(self):
        """Gets the equivalent_ids of this AutocompleteResult.

        Equivalent IDs

        :return: The equivalent_ids of this AutocompleteResult.
        :rtype: List[str]
        """
        return self._equivalent_ids

    @equivalent_ids.setter
    def equivalent_ids(self, equivalent_ids):
        """Sets the equivalent_ids of this AutocompleteResult.

        Equivalent IDs

        :param equivalent_ids: The equivalent_ids of this AutocompleteResult.
        :type equivalent_ids: List[str]
        """

        self._equivalent_ids = equivalent_ids

    @property
    def has_highlight(self):
        """Gets the has_highlight of this AutocompleteResult.

        True if highlight can be interpreted as html, else False

        :return: The has_highlight of this AutocompleteResult.
        :rtype: bool
        """
        return self._has_highlight

    @has_highlight.setter
    def has_highlight(self, has_highlight):
        """Sets the has_highlight of this AutocompleteResult.

        True if highlight can be interpreted as html, else False

        :param has_highlight: The has_highlight of this AutocompleteResult.
        :type has_highlight: bool
        """

        self._has_highlight = has_highlight

    @property
    def highlight(self):
        """Gets the highlight of this AutocompleteResult.

        solr highlight

        :return: The highlight of this AutocompleteResult.
        :rtype: str
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this AutocompleteResult.

        solr highlight

        :param highlight: The highlight of this AutocompleteResult.
        :type highlight: str
        """

        self._highlight = highlight

    @property
    def id(self):
        """Gets the id of this AutocompleteResult.

        curie formatted id

        :return: The id of this AutocompleteResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutocompleteResult.

        curie formatted id

        :param id: The id of this AutocompleteResult.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this AutocompleteResult.

        primary label (rdfs:label)

        :return: The label of this AutocompleteResult.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AutocompleteResult.

        primary label (rdfs:label)

        :param label: The label of this AutocompleteResult.
        :type label: List[str]
        """

        self._label = label

    @property
    def match(self):
        """Gets the match of this AutocompleteResult.

        matched part of document (may be primary label, synonym, id, etc)

        :return: The match of this AutocompleteResult.
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this AutocompleteResult.

        matched part of document (may be primary label, synonym, id, etc)

        :param match: The match of this AutocompleteResult.
        :type match: str
        """

        self._match = match

    @property
    def taxon(self):
        """Gets the taxon of this AutocompleteResult.

        taxon as NCBITaxon curie

        :return: The taxon of this AutocompleteResult.
        :rtype: str
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this AutocompleteResult.

        taxon as NCBITaxon curie

        :param taxon: The taxon of this AutocompleteResult.
        :type taxon: str
        """

        self._taxon = taxon

    @property
    def taxon_label(self):
        """Gets the taxon_label of this AutocompleteResult.

        taxon label

        :return: The taxon_label of this AutocompleteResult.
        :rtype: str
        """
        return self._taxon_label

    @taxon_label.setter
    def taxon_label(self, taxon_label):
        """Sets the taxon_label of this AutocompleteResult.

        taxon label

        :param taxon_label: The taxon_label of this AutocompleteResult.
        :type taxon_label: str
        """

        self._taxon_label = taxon_label
