# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.named_object import NamedObject
from openapi_server.models.relation import Relation
from openapi_server import util


class AnnotationExtension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filler: NamedObject=None, relation_chain: List[Relation]=None):
        """AnnotationExtension - a model defined in OpenAPI

        :param filler: The filler of this AnnotationExtension.
        :param relation_chain: The relation_chain of this AnnotationExtension.
        """
        self.openapi_types = {
            'filler': NamedObject,
            'relation_chain': List[Relation]
        }

        self.attribute_map = {
            'filler': 'filler',
            'relation_chain': 'relation_chain'
        }

        self._filler = filler
        self._relation_chain = relation_chain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnnotationExtension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnnotationExtension of this AnnotationExtension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filler(self):
        """Gets the filler of this AnnotationExtension.

        Extension interpreted as OWL expression (r1 some r2 some .. some filler).

        :return: The filler of this AnnotationExtension.
        :rtype: NamedObject
        """
        return self._filler

    @filler.setter
    def filler(self, filler):
        """Sets the filler of this AnnotationExtension.

        Extension interpreted as OWL expression (r1 some r2 some .. some filler).

        :param filler: The filler of this AnnotationExtension.
        :type filler: NamedObject
        """

        self._filler = filler

    @property
    def relation_chain(self):
        """Gets the relation_chain of this AnnotationExtension.

        Relationship type. If more than one value, interpreted as chain

        :return: The relation_chain of this AnnotationExtension.
        :rtype: List[Relation]
        """
        return self._relation_chain

    @relation_chain.setter
    def relation_chain(self, relation_chain):
        """Sets the relation_chain of this AnnotationExtension.

        Relationship type. If more than one value, interpreted as chain

        :param relation_chain: The relation_chain of this AnnotationExtension.
        :type relation_chain: List[Relation]
        """

        self._relation_chain = relation_chain
