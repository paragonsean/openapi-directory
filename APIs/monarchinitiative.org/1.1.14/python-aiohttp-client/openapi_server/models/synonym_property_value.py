# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SynonymPropertyValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pred: str=None, val: str=None, xrefs: List[str]=None):
        """SynonymPropertyValue - a model defined in OpenAPI

        :param pred: The pred of this SynonymPropertyValue.
        :param val: The val of this SynonymPropertyValue.
        :param xrefs: The xrefs of this SynonymPropertyValue.
        """
        self.openapi_types = {
            'pred': str,
            'val': str,
            'xrefs': List[str]
        }

        self.attribute_map = {
            'pred': 'pred',
            'val': 'val',
            'xrefs': 'xrefs'
        }

        self._pred = pred
        self._val = val
        self._xrefs = xrefs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SynonymPropertyValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SynonymPropertyValue of this SynonymPropertyValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pred(self):
        """Gets the pred of this SynonymPropertyValue.

        predicate (attribute) part

        :return: The pred of this SynonymPropertyValue.
        :rtype: str
        """
        return self._pred

    @pred.setter
    def pred(self, pred):
        """Sets the pred of this SynonymPropertyValue.

        predicate (attribute) part

        :param pred: The pred of this SynonymPropertyValue.
        :type pred: str
        """

        self._pred = pred

    @property
    def val(self):
        """Gets the val of this SynonymPropertyValue.

        value part

        :return: The val of this SynonymPropertyValue.
        :rtype: str
        """
        return self._val

    @val.setter
    def val(self, val):
        """Sets the val of this SynonymPropertyValue.

        value part

        :param val: The val of this SynonymPropertyValue.
        :type val: str
        """

        self._val = val

    @property
    def xrefs(self):
        """Gets the xrefs of this SynonymPropertyValue.

        Xrefs provenance for property-value

        :return: The xrefs of this SynonymPropertyValue.
        :rtype: List[str]
        """
        return self._xrefs

    @xrefs.setter
    def xrefs(self, xrefs):
        """Sets the xrefs of this SynonymPropertyValue.

        Xrefs provenance for property-value

        :param xrefs: The xrefs of this SynonymPropertyValue.
        :type xrefs: List[str]
        """

        self._xrefs = xrefs
