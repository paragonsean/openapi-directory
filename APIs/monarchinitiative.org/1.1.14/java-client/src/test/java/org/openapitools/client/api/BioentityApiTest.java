/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Association;
import org.openapitools.client.model.AssociationResults;
import org.openapitools.client.model.BioObject;
import org.openapitools.client.model.D2PAssociationResults;
import org.openapitools.client.model.NamedObject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BioentityApi
 */
@Disabled
public class BioentityApiTest {

    private final BioentityApi api = new BioentityApi();

    /**
     * Returns genes associated with a given anatomy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnatomyGeneAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getAnatomyGeneAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns gene IDs for all genes associated with a given anatomy, filtered by taxon
     *
     * For example, + NCBITaxon:10090 (mouse)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnatomyGeneByTaxonAssociationsTest() throws ApiException {
        String taxid = null;
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        api.getAnatomyGeneByTaxonAssociations(taxid, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns diseases associated with a case
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseDiseaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getCaseDiseaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns genotypes associated with a case
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseGenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getCaseGenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns models associated with a case
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseModelAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getCaseModelAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns phenotypes associated with a case
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCasePhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getCasePhenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns variants associated with a case
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseVariantAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getCaseVariantAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns cases associated with a disease
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiseaseCaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getDiseaseCaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns genes associated with a disease
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiseaseGeneAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        String associationType = null;
        AssociationResults response = api.getDiseaseGeneAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, associationType);
        // TODO: test validations
    }

    /**
     * Returns genotypes associated with a disease
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiseaseGenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getDiseaseGenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns associations to models of the disease
     *
     * In the association object returned, the subject will be the disease, and the object will be the model. The model may be a gene or genetic element.  If the query disease is a general class, the association subject may be to a specific disease.  In some cases the association will be *direct*, for example if a paper asserts a genotype is a model of a disease.  In other cases, the association will be *indirect*, for example, chaining over orthology. In these cases the chain will be reflected in the *evidence graph*  * TODO: provide hook into owlsim for dynamic computation of models by similarity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiseaseModelAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getDiseaseModelAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns associations to models of the disease constrained by taxon
     *
     * See /disease/&lt;id&gt;/models route for full details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiseaseModelTaxonAssociationsTest() throws ApiException {
        String taxon = null;
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getDiseaseModelTaxonAssociations(taxon, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns pathways associated with a disease
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiseasePathwayAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getDiseasePathwayAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns phenotypes associated with disease
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiseasePhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        D2PAssociationResults response = api.getDiseasePhenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns publications associated with a disease
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiseasePublicationAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getDiseasePublicationAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns substances associated with a disease
     *
     * e.g. drugs or small molecules used to treat
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiseaseSubstanceAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        api.getDiseaseSubstanceAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns variants associated with a disease
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiseaseVariantAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getDiseaseVariantAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns annotations associated to a function term
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFunctionAssociationsTest() throws ApiException {
        String id = null;
        Integer start = null;
        Integer rows = null;
        List<String> evidence = null;
        api.getFunctionAssociations(id, start, rows, evidence);
        // TODO: test validations
    }

    /**
     * Returns genes associated to a GO term
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFunctionGeneAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        String relationshipType = null;
        AssociationResults response = api.getFunctionGeneAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, relationshipType);
        // TODO: test validations
    }

    /**
     * Returns publications associated to a GO term
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFunctionPublicationAssociationsTest() throws ApiException {
        String id = null;
        Integer start = null;
        Integer rows = null;
        List<String> evidence = null;
        api.getFunctionPublicationAssociations(id, start, rows, evidence);
        // TODO: test validations
    }

    /**
     * Returns taxons associated to a GO term
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFunctionTaxonAssociationsTest() throws ApiException {
        String id = null;
        Integer start = null;
        Integer rows = null;
        List<String> evidence = null;
        api.getFunctionTaxonAssociations(id, start, rows, evidence);
        // TODO: test validations
    }

    /**
     * Returns anatomical entities associated with a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneAnatomyAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGeneAnatomyAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns cases associated with a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneCaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getGeneCaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns diseases associated with gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneDiseaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        String associationType = null;
        AssociationResults response = api.getGeneDiseaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, associationType);
        // TODO: test validations
    }

    /**
     * Returns expression events for a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneExpressionAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGeneExpressionAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns function associations for a gene
     *
     * IMPLEMENTATION DETAILS ----------------------  Note: currently this is implemented as a query to the GO/AmiGO solr instance. This directly supports IDs such as:   - ZFIN e.g. ZFIN:ZDB-GENE-050417-357  Note that the AmiGO GOlr natively stores MGI annotations to MGI:MGI:nn. However, the standard for biolink is MGI:nnnn, so you should use this (will be transparently mapped to legacy ID)  Additionally, for some species such as Human, GO has the annotation attached to the UniProt ID. Again, this should be transparently handled; e.g. you can use NCBIGene:6469, and this will be mapped behind the scenes for querying.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneFunctionAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getGeneFunctionAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns genotypes associated with a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneGenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGeneGenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns homologs for a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneHomologAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        String homologyType = null;
        Boolean directTaxon = null;
        AssociationResults response = api.getGeneHomologAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, homologyType, directTaxon);
        // TODO: test validations
    }

    /**
     * Returns interactions for a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneInteractionsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGeneInteractions(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns models associated with a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneModelAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGeneModelAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Return diseases associated with orthologs of a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneOrthologDiseaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGeneOrthologDiseaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Return phenotypes associated with orthologs for a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneOrthologPhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGeneOrthologPhenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns pathways associated with gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenePathwayAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGenePathwayAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns phenotypes associated with gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenePhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGenePhenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns publications associated with a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenePublicationAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGenePublicationAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns variants associated with a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneVariantAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGeneVariantAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns associations for an entity regardless of the type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenericAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGenericAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns basic info on object of any type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenericObjectTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        BioObject response = api.getGenericObject(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Return basic info on an object for a given type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenericObjectByTypeTest() throws ApiException {
        String type = null;
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        Boolean getAssociationCounts = null;
        Boolean distinctCounts = null;
        api.getGenericObjectByType(type, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, getAssociationCounts, distinctCounts);
        // TODO: test validations
    }

    /**
     * Returns cases associated with a genotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenotypeCaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getGenotypeCaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns diseases associated with a genotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenotypeDiseaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGenotypeDiseaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns genes associated with a genotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenotypeGeneAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGenotypeGeneAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns genotypes-genotype associations
     *
     * Genotypes may be related to one another according to the GENO model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenotypeGenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGenotypeGenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns models associated with a genotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenotypeModelAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGenotypeModelAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns phenotypes associated with a genotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenotypePhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGenotypePhenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns publications associated with a genotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenotypePublicationAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGenotypePublicationAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns genotypes-variant associations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenotypeVariantAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getGenotypeVariantAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns associations to GO terms for a gene
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGotermGeneAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        String relationshipType = null;
        AssociationResults response = api.getGotermGeneAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, relationshipType);
        // TODO: test validations
    }

    /**
     * Returns cases associated with a model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelCaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getModelCaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns diseases associated with a model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelDiseaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getModelDiseaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns genes associated with a model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelGeneAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getModelGeneAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns genotypes associated with a model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelGenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getModelGenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns phenotypes associated with a model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelPhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getModelPhenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns publications associated with a model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelPublicationAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getModelPublicationAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns variants associated with a model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelVariantAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getModelVariantAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns diseases associated with a pathway
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPathwayDiseaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPathwayDiseaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns genes associated with a pathway
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPathwayGeneAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPathwayGeneAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns phenotypes associated with a pathway
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPathwayPhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPathwayPhenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns anatomical entities associated with a phenotype
     *
     * Example IDs:   * MP:0008521 abnormal Bowman membrane
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhenotypeAnatomyAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<NamedObject> response = api.getPhenotypeAnatomyAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns cases associated with a phenotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhenotypeCaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getPhenotypeCaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns diseases associated with a phenotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhenotypeDiseaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        D2PAssociationResults response = api.getPhenotypeDiseaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns genes associated with a phenotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhenotypeGeneAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPhenotypeGeneAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns gene IDs for all genes associated with a given phenotype, filtered by taxon
     *
     * For example, MP:0001569 + NCBITaxon:10090 (mouse)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhenotypeGeneByTaxonAssociationsTest() throws ApiException {
        String taxid = null;
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        api.getPhenotypeGeneByTaxonAssociations(taxid, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns genotypes associated with a phenotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhenotypeGenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPhenotypeGenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns pathways associated with a phenotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhenotypePathwayAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPhenotypePathwayAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns publications associated with a phenotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhenotypePublicationAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPhenotypePublicationAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns variants associated with a phenotype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhenotypeVariantAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPhenotypeVariantAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns diseases associated with a publication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicationDiseaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPublicationDiseaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns genes associated with a publication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicationGeneAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPublicationGeneAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns genotypes associated with a publication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicationGenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPublicationGenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns models associated with a publication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicationModelAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPublicationModelAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns phenotypes associated with a publication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicationPhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPublicationPhenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns variants associated with a publication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicationVariantAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getPublicationVariantAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns associations between an activity and process and the specified substance
     *
     * Examples relationships:   * substance is a metabolite of a process  * substance is synthesized by a process  * substance is modified by an activity  * substance elicits a response program/pathway  * substance is transported by activity or pathway  For example, CHEBI:40036 (amitrole)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubstanceParticipantInAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<Association> response = api.getSubstanceParticipantInAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns associations between given drug and roles
     *
     * Roles may be human-oriented (e.g. pesticide) or molecular (e.g. enzyme inhibitor)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubstanceRoleAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<Association> response = api.getSubstanceRoleAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns substances associated with a disease
     *
     * e.g. drugs or small molecules used to treat
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubstanceTreatsAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        api.getSubstanceTreatsAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns cases associated with a variant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariantCaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getVariantCaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns diseases associated with a variant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariantDiseaseAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getVariantDiseaseAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns genes associated with a variant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariantGeneAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getVariantGeneAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns genotypes associated with a variant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariantGenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getVariantGenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns models associated with a variant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariantModelAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        AssociationResults response = api.getVariantModelAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        // TODO: test validations
    }

    /**
     * Returns phenotypes associated with a variant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariantPhenotypeAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getVariantPhenotypeAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

    /**
     * Returns publications associated with a variant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariantPublicationAssociationsTest() throws ApiException {
        String id = null;
        Integer rows = null;
        Integer start = null;
        Boolean facet = null;
        List<String> facetFields = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean fetchObjects = null;
        Boolean useCompactAssociations = null;
        List<String> slim = null;
        String evidence = null;
        Boolean direct = null;
        List<String> taxon = null;
        Boolean directTaxon = null;
        String relation = null;
        String sort = null;
        String q = null;
        AssociationResults response = api.getVariantPublicationAssociations(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        // TODO: test validations
    }

}
