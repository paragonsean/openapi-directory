/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OntolApi
 */
@Disabled
public class OntolApiTest {

    private final OntolApi api = new OntolApi();

    /**
     * Extract a subgraph from an ontology
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtractOntologySubgraphResourceTest() throws ApiException {
        String node = null;
        String ontology = null;
        List<String> cnode = null;
        Boolean includeAncestors = null;
        Boolean includeDescendants = null;
        List<String> relation = null;
        Boolean includeMeta = null;
        api.getExtractOntologySubgraphResource(node, ontology, cnode, includeAncestors, includeDescendants, relation, includeMeta);
        // TODO: test validations
    }

    /**
     * Returns information content (IC) for a set of relevant ontology classes
     *
     * &#x60;&#x60;&#x60; IC &#x3D; -log2( freq(t) / popSize ) &#x60;&#x60;&#x60;  Here the frequency and population is calculated for a particular dataset: e.g. all human disease-phenotype associations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInformationContentResourceTest() throws ApiException {
        String subjectCategory = null;
        String objectCategory = null;
        String subjectTaxon = null;
        String evidence = null;
        api.getInformationContentResource(subjectCategory, objectCategory, subjectTaxon, evidence);
        // TODO: test validations
    }

    /**
     * Extract a subgraph from an ontology
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postExtractOntologySubgraphResourceTest() throws ApiException {
        String node = null;
        String ontology = null;
        List<String> cnode = null;
        Boolean includeAncestors = null;
        Boolean includeDescendants = null;
        List<String> relation = null;
        Boolean includeMeta = null;
        api.postExtractOntologySubgraphResource(node, ontology, cnode, includeAncestors, includeDescendants, relation, includeMeta);
        // TODO: test validations
    }

}
