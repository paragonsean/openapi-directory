/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Association;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CamApi
 */
@Disabled
public class CamApiTest {

    private final CamApi api = new CamApi();

    /**
     * Returns list of models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActivityCollectionTest() throws ApiException {
        String title = null;
        String contributor = null;
        api.getActivityCollection(title, contributor);
        // TODO: test validations
    }

    /**
     * Returns list of matches
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstanceObjectTest() throws ApiException {
        String id = null;
        String title = null;
        String contributor = null;
        List<Association> response = api.getInstanceObject(id, title, contributor);
        // TODO: test validations
    }

    /**
     * Returns list of ALL models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelCollectionTest() throws ApiException {
        api.getModelCollection();
        // TODO: test validations
    }

    /**
     * Returns list of all contributors across all models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelContributorsTest() throws ApiException {
        api.getModelContributors();
        // TODO: test validations
    }

    /**
     * Returns list of all instances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelInstancesTest() throws ApiException {
        api.getModelInstances();
        // TODO: test validations
    }

    /**
     * Returns a complete model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelObjectTest() throws ApiException {
        String id = null;
        api.getModelObject(id);
        // TODO: test validations
    }

    /**
     * Returns list of all properties used across all models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelPropertiesTest() throws ApiException {
        String title = null;
        String contributor = null;
        api.getModelProperties(title, contributor);
        // TODO: test validations
    }

    /**
     * Returns list property-values for all models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelPropertyValuesTest() throws ApiException {
        String title = null;
        String contributor = null;
        api.getModelPropertyValues(title, contributor);
        // TODO: test validations
    }

    /**
     * Returns list of models matching query
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelQueryTest() throws ApiException {
        String title = null;
        String contributor = null;
        api.getModelQuery(title, contributor);
        // TODO: test validations
    }

    /**
     * Returns list of models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhysicalInteractionTest() throws ApiException {
        String title = null;
        String contributor = null;
        api.getPhysicalInteraction(title, contributor);
        // TODO: test validations
    }

}
