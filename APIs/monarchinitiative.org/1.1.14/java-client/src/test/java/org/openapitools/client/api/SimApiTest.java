/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CompareInput;
import org.openapitools.client.model.SimResult;
import org.openapitools.client.model.SufficiencyOutput;
import org.openapitools.client.model.SufficiencyPostInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SimApi
 */
@Disabled
public class SimApiTest {

    private final SimApi api = new SimApi();

    /**
     * Get annotation score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationScoreTest() throws ApiException {
        List<String> id = null;
        List<String> absentId = null;
        SufficiencyOutput response = api.getAnnotationScore(id, absentId);
        // TODO: test validations
    }

    /**
     * Compare a reference profile vs one profiles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSimCompareTest() throws ApiException {
        Boolean isFeatureSet = null;
        String metric = null;
        List<String> refId = null;
        List<String> queryId = null;
        SimResult response = api.getSimCompare(isFeatureSet, metric, refId, queryId);
        // TODO: test validations
    }

    /**
     * Search for phenotypically similar diseases or model genes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSimSearchTest() throws ApiException {
        Boolean isFeatureSet = null;
        String metric = null;
        List<String> id = null;
        Integer limit = null;
        String taxon = null;
        SimResult response = api.getSimSearch(isFeatureSet, metric, id, limit, taxon);
        // TODO: test validations
    }

    /**
     * Get annotation score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAnnotationScoreTest() throws ApiException {
        SufficiencyPostInput sufficiencyPostInput = null;
        SufficiencyOutput response = api.postAnnotationScore(sufficiencyPostInput);
        // TODO: test validations
    }

    /**
     * Compare a reference profile vs one or more profiles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSimCompareTest() throws ApiException {
        CompareInput compareInput = null;
        SimResult response = api.postSimCompare(compareInput);
        // TODO: test validations
    }

}
