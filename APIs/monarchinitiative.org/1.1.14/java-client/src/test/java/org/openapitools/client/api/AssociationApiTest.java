/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociationResults;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssociationApi
 */
@Disabled
public class AssociationApiTest {

    private final AssociationApi api = new AssociationApi();

    /**
     * Returns list of matching associations of a given type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociationBySubjectAndAssocTypeTest() throws ApiException {
        String associationType = null;
        Integer rows = null;
        Integer start = null;
        String evidence = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean useCompactAssociations = null;
        String subject = null;
        String _object = null;
        List<AssociationResults> response = api.getAssociationBySubjectAndAssocType(associationType, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subject, _object);
        // TODO: test validations
    }

    /**
     * Returns list of matching associations between a given subject and object category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociationBySubjectAndObjectCategorySearchTest() throws ApiException {
        String objectCategory = null;
        String subjectCategory = null;
        Integer rows = null;
        Integer start = null;
        String evidence = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean useCompactAssociations = null;
        String subject = null;
        String _object = null;
        String subjectTaxon = null;
        String objectTaxon = null;
        String relation = null;
        List<AssociationResults> response = api.getAssociationBySubjectAndObjectCategorySearch(objectCategory, subjectCategory, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subject, _object, subjectTaxon, objectTaxon, relation);
        // TODO: test validations
    }

    /**
     * Returns list of matching associations for a given subject category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociationBySubjectCategorySearchTest() throws ApiException {
        String subjectCategory = null;
        Integer rows = null;
        Integer start = null;
        String evidence = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean useCompactAssociations = null;
        String subjectTaxon = null;
        String objectTaxon = null;
        String relation = null;
        List<AssociationResults> response = api.getAssociationBySubjectCategorySearch(subjectCategory, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subjectTaxon, objectTaxon, relation);
        // TODO: test validations
    }

    /**
     * Returns the association with a given identifier
     *
     * An association connects, at a minimum, two things, designated subject and object, via some relationship. Associations also include evidence, provenance etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociationObjectTest() throws ApiException {
        String id = null;
        List<AssociationResults> response = api.getAssociationObject(id);
        // TODO: test validations
    }

    /**
     * Returns associations connecting two entities
     *
     * Given two entities (e.g. a particular gene and a particular disease), if these two entities are connected (directly or indirectly), then return the association objects describing the connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociationsBetweenTest() throws ApiException {
        String _object = null;
        String subject = null;
        Integer rows = null;
        Integer start = null;
        String evidence = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean useCompactAssociations = null;
        List<AssociationResults> response = api.getAssociationsBetween(_object, subject, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations);
        // TODO: test validations
    }

    /**
     * Returns list of matching associations starting from a given subject (source)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociationsFromTest() throws ApiException {
        String subject = null;
        Integer rows = null;
        Integer start = null;
        String evidence = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean useCompactAssociations = null;
        String objectTaxon = null;
        String relation = null;
        List<AssociationResults> response = api.getAssociationsFrom(subject, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, objectTaxon, relation);
        // TODO: test validations
    }

    /**
     * Returns list of matching associations pointing to a given object (target)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociationsToTest() throws ApiException {
        String _object = null;
        Integer rows = null;
        Integer start = null;
        String evidence = null;
        Boolean unselectEvidence = null;
        Boolean excludeAutomaticAssertions = null;
        Boolean useCompactAssociations = null;
        List<AssociationResults> response = api.getAssociationsTo(_object, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations);
        // TODO: test validations
    }

}
