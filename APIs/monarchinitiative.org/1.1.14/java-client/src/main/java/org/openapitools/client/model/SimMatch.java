/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Node;
import org.openapitools.client.model.SimMatchAllOfPairwiseMatch;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimMatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.559774-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimMatch {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_TAXON = "taxon";
  @SerializedName(SERIALIZED_NAME_TAXON)
  private Node taxon;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PAIRWISE_MATCH = "pairwise_match";
  @SerializedName(SERIALIZED_NAME_PAIRWISE_MATCH)
  private List<SimMatchAllOfPairwiseMatch> pairwiseMatch = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private String rank;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private BigDecimal score;

  public static final String SERIALIZED_NAME_SIGNIFICANCE = "significance";
  @SerializedName(SERIALIZED_NAME_SIGNIFICANCE)
  private String significance;

  public SimMatch() {
  }

  public SimMatch id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID or CURIE e.g. MGI:1201606
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SimMatch label(String label) {
    this.label = label;
    return this;
  }

  /**
   * RDFS Label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public SimMatch taxon(Node taxon) {
    this.taxon = taxon;
    return this;
  }

  /**
   * taxon
   * @return taxon
   */
  @javax.annotation.Nullable
  public Node getTaxon() {
    return taxon;
  }

  public void setTaxon(Node taxon) {
    this.taxon = taxon;
  }


  public SimMatch type(String type) {
    this.type = type;
    return this;
  }

  /**
   * node type (eg phenotype, disease)
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public SimMatch pairwiseMatch(List<SimMatchAllOfPairwiseMatch> pairwiseMatch) {
    this.pairwiseMatch = pairwiseMatch;
    return this;
  }

  public SimMatch addPairwiseMatchItem(SimMatchAllOfPairwiseMatch pairwiseMatchItem) {
    if (this.pairwiseMatch == null) {
      this.pairwiseMatch = new ArrayList<>();
    }
    this.pairwiseMatch.add(pairwiseMatchItem);
    return this;
  }

  /**
   * Get pairwiseMatch
   * @return pairwiseMatch
   */
  @javax.annotation.Nullable
  public List<SimMatchAllOfPairwiseMatch> getPairwiseMatch() {
    return pairwiseMatch;
  }

  public void setPairwiseMatch(List<SimMatchAllOfPairwiseMatch> pairwiseMatch) {
    this.pairwiseMatch = pairwiseMatch;
  }


  public SimMatch rank(String rank) {
    this.rank = rank;
    return this;
  }

  /**
   * rank
   * @return rank
   */
  @javax.annotation.Nullable
  public String getRank() {
    return rank;
  }

  public void setRank(String rank) {
    this.rank = rank;
  }


  public SimMatch score(BigDecimal score) {
    this.score = score;
    return this;
  }

  /**
   * sim score
   * @return score
   */
  @javax.annotation.Nullable
  public BigDecimal getScore() {
    return score;
  }

  public void setScore(BigDecimal score) {
    this.score = score;
  }


  public SimMatch significance(String significance) {
    this.significance = significance;
    return this;
  }

  /**
   * p-value
   * @return significance
   */
  @javax.annotation.Nullable
  public String getSignificance() {
    return significance;
  }

  public void setSignificance(String significance) {
    this.significance = significance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimMatch simMatch = (SimMatch) o;
    return Objects.equals(this.id, simMatch.id) &&
        Objects.equals(this.label, simMatch.label) &&
        Objects.equals(this.taxon, simMatch.taxon) &&
        Objects.equals(this.type, simMatch.type) &&
        Objects.equals(this.pairwiseMatch, simMatch.pairwiseMatch) &&
        Objects.equals(this.rank, simMatch.rank) &&
        Objects.equals(this.score, simMatch.score) &&
        Objects.equals(this.significance, simMatch.significance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, taxon, type, pairwiseMatch, rank, score, significance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimMatch {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    taxon: ").append(toIndentedString(taxon)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    pairwiseMatch: ").append(toIndentedString(pairwiseMatch)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    significance: ").append(toIndentedString(significance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("taxon");
    openapiFields.add("type");
    openapiFields.add("pairwise_match");
    openapiFields.add("rank");
    openapiFields.add("score");
    openapiFields.add("significance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimMatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimMatch is not found in the empty JSON string", SimMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimMatch.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `taxon`
      if (jsonObj.get("taxon") != null && !jsonObj.get("taxon").isJsonNull()) {
        Node.validateJsonElement(jsonObj.get("taxon"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("pairwise_match") != null && !jsonObj.get("pairwise_match").isJsonNull()) {
        JsonArray jsonArraypairwiseMatch = jsonObj.getAsJsonArray("pairwise_match");
        if (jsonArraypairwiseMatch != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pairwise_match").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pairwise_match` to be an array in the JSON string but got `%s`", jsonObj.get("pairwise_match").toString()));
          }

          // validate the optional field `pairwise_match` (array)
          for (int i = 0; i < jsonArraypairwiseMatch.size(); i++) {
            SimMatchAllOfPairwiseMatch.validateJsonElement(jsonArraypairwiseMatch.get(i));
          };
        }
      }
      if ((jsonObj.get("rank") != null && !jsonObj.get("rank").isJsonNull()) && !jsonObj.get("rank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rank").toString()));
      }
      if ((jsonObj.get("significance") != null && !jsonObj.get("significance").isJsonNull()) && !jsonObj.get("significance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `significance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("significance").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<SimMatch>() {
           @Override
           public void write(JsonWriter out, SimMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimMatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimMatch
   * @throws IOException if the JSON string is invalid with respect to SimMatch
   */
  public static SimMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimMatch.class);
  }

  /**
   * Convert an instance of SimMatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

