/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Association;
import org.openapitools.client.model.CompactAssociationSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociationResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.559774-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociationResults {
  public static final String SERIALIZED_NAME_DOCS = "docs";
  @SerializedName(SERIALIZED_NAME_DOCS)
  private List<Object> docs = new ArrayList<>();

  public static final String SERIALIZED_NAME_FACET_COUNTS = "facet_counts";
  @SerializedName(SERIALIZED_NAME_FACET_COUNTS)
  private Object facetCounts;

  public static final String SERIALIZED_NAME_HIGHLIGHTING = "highlighting";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHTING)
  private Object highlighting;

  public static final String SERIALIZED_NAME_NUM_FOUND = "numFound";
  @SerializedName(SERIALIZED_NAME_NUM_FOUND)
  private Integer numFound;

  public static final String SERIALIZED_NAME_ASSOCIATIONS = "associations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS)
  private List<Association> associations = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPACT_ASSOCIATIONS = "compact_associations";
  @SerializedName(SERIALIZED_NAME_COMPACT_ASSOCIATIONS)
  private List<CompactAssociationSet> compactAssociations = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECTS = "objects";
  @SerializedName(SERIALIZED_NAME_OBJECTS)
  private List<String> objects = new ArrayList<>();

  public AssociationResults() {
  }

  public AssociationResults docs(List<Object> docs) {
    this.docs = docs;
    return this;
  }

  public AssociationResults addDocsItem(Object docsItem) {
    if (this.docs == null) {
      this.docs = new ArrayList<>();
    }
    this.docs.add(docsItem);
    return this;
  }

  /**
   * solr docs
   * @return docs
   */
  @javax.annotation.Nullable
  public List<Object> getDocs() {
    return docs;
  }

  public void setDocs(List<Object> docs) {
    this.docs = docs;
  }


  public AssociationResults facetCounts(Object facetCounts) {
    this.facetCounts = facetCounts;
    return this;
  }

  /**
   * Mapping between field names and association counts
   * @return facetCounts
   */
  @javax.annotation.Nullable
  public Object getFacetCounts() {
    return facetCounts;
  }

  public void setFacetCounts(Object facetCounts) {
    this.facetCounts = facetCounts;
  }


  public AssociationResults highlighting(Object highlighting) {
    this.highlighting = highlighting;
    return this;
  }

  /**
   * Mapping between id and solr highlight
   * @return highlighting
   */
  @javax.annotation.Nullable
  public Object getHighlighting() {
    return highlighting;
  }

  public void setHighlighting(Object highlighting) {
    this.highlighting = highlighting;
  }


  public AssociationResults numFound(Integer numFound) {
    this.numFound = numFound;
    return this;
  }

  /**
   * total number of associations matching query
   * @return numFound
   */
  @javax.annotation.Nullable
  public Integer getNumFound() {
    return numFound;
  }

  public void setNumFound(Integer numFound) {
    this.numFound = numFound;
  }


  public AssociationResults associations(List<Association> associations) {
    this.associations = associations;
    return this;
  }

  public AssociationResults addAssociationsItem(Association associationsItem) {
    if (this.associations == null) {
      this.associations = new ArrayList<>();
    }
    this.associations.add(associationsItem);
    return this;
  }

  /**
   * Complete representation of full association object, plus evidence
   * @return associations
   */
  @javax.annotation.Nullable
  public List<Association> getAssociations() {
    return associations;
  }

  public void setAssociations(List<Association> associations) {
    this.associations = associations;
  }


  public AssociationResults compactAssociations(List<CompactAssociationSet> compactAssociations) {
    this.compactAssociations = compactAssociations;
    return this;
  }

  public AssociationResults addCompactAssociationsItem(CompactAssociationSet compactAssociationsItem) {
    if (this.compactAssociations == null) {
      this.compactAssociations = new ArrayList<>();
    }
    this.compactAssociations.add(compactAssociationsItem);
    return this;
  }

  /**
   * Compact representation in which objects (e.g. phenotypes) are collected for subject-predicate pairs
   * @return compactAssociations
   */
  @javax.annotation.Nullable
  public List<CompactAssociationSet> getCompactAssociations() {
    return compactAssociations;
  }

  public void setCompactAssociations(List<CompactAssociationSet> compactAssociations) {
    this.compactAssociations = compactAssociations;
  }


  public AssociationResults objects(List<String> objects) {
    this.objects = objects;
    return this;
  }

  public AssociationResults addObjectsItem(String objectsItem) {
    if (this.objects == null) {
      this.objects = new ArrayList<>();
    }
    this.objects.add(objectsItem);
    return this;
  }

  /**
   * List of distinct objects used
   * @return objects
   */
  @javax.annotation.Nullable
  public List<String> getObjects() {
    return objects;
  }

  public void setObjects(List<String> objects) {
    this.objects = objects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociationResults associationResults = (AssociationResults) o;
    return Objects.equals(this.docs, associationResults.docs) &&
        Objects.equals(this.facetCounts, associationResults.facetCounts) &&
        Objects.equals(this.highlighting, associationResults.highlighting) &&
        Objects.equals(this.numFound, associationResults.numFound) &&
        Objects.equals(this.associations, associationResults.associations) &&
        Objects.equals(this.compactAssociations, associationResults.compactAssociations) &&
        Objects.equals(this.objects, associationResults.objects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docs, facetCounts, highlighting, numFound, associations, compactAssociations, objects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociationResults {\n");
    sb.append("    docs: ").append(toIndentedString(docs)).append("\n");
    sb.append("    facetCounts: ").append(toIndentedString(facetCounts)).append("\n");
    sb.append("    highlighting: ").append(toIndentedString(highlighting)).append("\n");
    sb.append("    numFound: ").append(toIndentedString(numFound)).append("\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("    compactAssociations: ").append(toIndentedString(compactAssociations)).append("\n");
    sb.append("    objects: ").append(toIndentedString(objects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("docs");
    openapiFields.add("facet_counts");
    openapiFields.add("highlighting");
    openapiFields.add("numFound");
    openapiFields.add("associations");
    openapiFields.add("compact_associations");
    openapiFields.add("objects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociationResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociationResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociationResults is not found in the empty JSON string", AssociationResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociationResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociationResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("docs") != null && !jsonObj.get("docs").isJsonNull() && !jsonObj.get("docs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `docs` to be an array in the JSON string but got `%s`", jsonObj.get("docs").toString()));
      }
      if (jsonObj.get("associations") != null && !jsonObj.get("associations").isJsonNull()) {
        JsonArray jsonArrayassociations = jsonObj.getAsJsonArray("associations");
        if (jsonArrayassociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associations` to be an array in the JSON string but got `%s`", jsonObj.get("associations").toString()));
          }

          // validate the optional field `associations` (array)
          for (int i = 0; i < jsonArrayassociations.size(); i++) {
            Association.validateJsonElement(jsonArrayassociations.get(i));
          };
        }
      }
      if (jsonObj.get("compact_associations") != null && !jsonObj.get("compact_associations").isJsonNull()) {
        JsonArray jsonArraycompactAssociations = jsonObj.getAsJsonArray("compact_associations");
        if (jsonArraycompactAssociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("compact_associations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `compact_associations` to be an array in the JSON string but got `%s`", jsonObj.get("compact_associations").toString()));
          }

          // validate the optional field `compact_associations` (array)
          for (int i = 0; i < jsonArraycompactAssociations.size(); i++) {
            CompactAssociationSet.validateJsonElement(jsonArraycompactAssociations.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("objects") != null && !jsonObj.get("objects").isJsonNull() && !jsonObj.get("objects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `objects` to be an array in the JSON string but got `%s`", jsonObj.get("objects").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociationResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociationResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociationResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociationResults.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociationResults>() {
           @Override
           public void write(JsonWriter out, AssociationResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociationResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociationResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociationResults
   * @throws IOException if the JSON string is invalid with respect to AssociationResults
   */
  public static AssociationResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociationResults.class);
  }

  /**
   * Convert an instance of AssociationResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

