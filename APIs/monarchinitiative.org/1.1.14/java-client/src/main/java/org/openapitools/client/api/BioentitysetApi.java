/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssociationResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BioentitysetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BioentitysetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BioentitysetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getEntitySetAssociations
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetAssociationsCall(List<String> subject, List<String> background, String objectCategory, String objectSlim, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentityset/associations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (background != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "background", background));
        }

        if (objectCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_category", objectCategory));
        }

        if (objectSlim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_slim", objectSlim));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitySetAssociationsValidateBeforeCall(List<String> subject, List<String> background, String objectCategory, String objectSlim, final ApiCallback _callback) throws ApiException {
        return getEntitySetAssociationsCall(subject, background, objectCategory, objectSlim, _callback);

    }

    /**
     * Returns compact associations for a given input set
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getEntitySetAssociations(List<String> subject, List<String> background, String objectCategory, String objectSlim) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getEntitySetAssociationsWithHttpInfo(subject, background, objectCategory, objectSlim);
        return localVarResp.getData();
    }

    /**
     * Returns compact associations for a given input set
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getEntitySetAssociationsWithHttpInfo(List<String> subject, List<String> background, String objectCategory, String objectSlim) throws ApiException {
        okhttp3.Call localVarCall = getEntitySetAssociationsValidateBeforeCall(subject, background, objectCategory, objectSlim, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns compact associations for a given input set (asynchronously)
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetAssociationsAsync(List<String> subject, List<String> background, String objectCategory, String objectSlim, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitySetAssociationsValidateBeforeCall(subject, background, objectCategory, objectSlim, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEntitySetGraphResource
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetGraphResourceCall(List<String> subject, List<String> background, String objectCategory, String objectSlim, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentityset/graph";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (background != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "background", background));
        }

        if (objectCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_category", objectCategory));
        }

        if (objectSlim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_slim", objectSlim));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitySetGraphResourceValidateBeforeCall(List<String> subject, List<String> background, String objectCategory, String objectSlim, final ApiCallback _callback) throws ApiException {
        return getEntitySetGraphResourceCall(subject, background, objectCategory, objectSlim, _callback);

    }

    /**
     * TODO Graph object spanning all entities
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getEntitySetGraphResource(List<String> subject, List<String> background, String objectCategory, String objectSlim) throws ApiException {
        getEntitySetGraphResourceWithHttpInfo(subject, background, objectCategory, objectSlim);
    }

    /**
     * TODO Graph object spanning all entities
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getEntitySetGraphResourceWithHttpInfo(List<String> subject, List<String> background, String objectCategory, String objectSlim) throws ApiException {
        okhttp3.Call localVarCall = getEntitySetGraphResourceValidateBeforeCall(subject, background, objectCategory, objectSlim, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * TODO Graph object spanning all entities (asynchronously)
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetGraphResourceAsync(List<String> subject, List<String> background, String objectCategory, String objectSlim, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitySetGraphResourceValidateBeforeCall(subject, background, objectCategory, objectSlim, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEntitySetSummary
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetSummaryCall(List<String> subject, List<String> background, String objectCategory, String objectSlim, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentityset/descriptor/counts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (background != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "background", background));
        }

        if (objectCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_category", objectCategory));
        }

        if (objectSlim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_slim", objectSlim));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitySetSummaryValidateBeforeCall(List<String> subject, List<String> background, String objectCategory, String objectSlim, final ApiCallback _callback) throws ApiException {
        return getEntitySetSummaryCall(subject, background, objectCategory, objectSlim, _callback);

    }

    /**
     * Summary statistics for objects associated
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getEntitySetSummary(List<String> subject, List<String> background, String objectCategory, String objectSlim) throws ApiException {
        getEntitySetSummaryWithHttpInfo(subject, background, objectCategory, objectSlim);
    }

    /**
     * Summary statistics for objects associated
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getEntitySetSummaryWithHttpInfo(List<String> subject, List<String> background, String objectCategory, String objectSlim) throws ApiException {
        okhttp3.Call localVarCall = getEntitySetSummaryValidateBeforeCall(subject, background, objectCategory, objectSlim, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Summary statistics for objects associated (asynchronously)
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param objectCategory E.g. phenotype, function (optional)
     * @param objectSlim Slim or subset to which the descriptors are to be mapped, NOT IMPLEMENTED (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetSummaryAsync(List<String> subject, List<String> background, String objectCategory, String objectSlim, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitySetSummaryValidateBeforeCall(subject, background, objectCategory, objectSlim, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOverRepresentation
     * @param objectCategory E.g. phenotype, function (optional)
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param subjectCategory Default: gene. Other types may be used e.g. disease but statistics may not make sense (optional, default to gene)
     * @param maxPValue Exclude results with p-value greater than this (optional, default to 0.05)
     * @param ontology ontology id. Must be obo id. Examples: go, mp, hp, uberon (optional: will be inferred if left blank) (optional)
     * @param taxon must be NCBITaxon CURIE. Example: NCBITaxon:9606 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOverRepresentationCall(String objectCategory, List<String> subject, List<String> background, String subjectCategory, String maxPValue, String ontology, String taxon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentityset/overrepresentation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_category", objectCategory));
        }

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (background != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "background", background));
        }

        if (subjectCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject_category", subjectCategory));
        }

        if (maxPValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_p_value", maxPValue));
        }

        if (ontology != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ontology", ontology));
        }

        if (taxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxon", taxon));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOverRepresentationValidateBeforeCall(String objectCategory, List<String> subject, List<String> background, String subjectCategory, String maxPValue, String ontology, String taxon, final ApiCallback _callback) throws ApiException {
        return getOverRepresentationCall(objectCategory, subject, background, subjectCategory, maxPValue, ontology, taxon, _callback);

    }

    /**
     * Summary statistics for objects associated
     * 
     * @param objectCategory E.g. phenotype, function (optional)
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param subjectCategory Default: gene. Other types may be used e.g. disease but statistics may not make sense (optional, default to gene)
     * @param maxPValue Exclude results with p-value greater than this (optional, default to 0.05)
     * @param ontology ontology id. Must be obo id. Examples: go, mp, hp, uberon (optional: will be inferred if left blank) (optional)
     * @param taxon must be NCBITaxon CURIE. Example: NCBITaxon:9606 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getOverRepresentation(String objectCategory, List<String> subject, List<String> background, String subjectCategory, String maxPValue, String ontology, String taxon) throws ApiException {
        getOverRepresentationWithHttpInfo(objectCategory, subject, background, subjectCategory, maxPValue, ontology, taxon);
    }

    /**
     * Summary statistics for objects associated
     * 
     * @param objectCategory E.g. phenotype, function (optional)
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param subjectCategory Default: gene. Other types may be used e.g. disease but statistics may not make sense (optional, default to gene)
     * @param maxPValue Exclude results with p-value greater than this (optional, default to 0.05)
     * @param ontology ontology id. Must be obo id. Examples: go, mp, hp, uberon (optional: will be inferred if left blank) (optional)
     * @param taxon must be NCBITaxon CURIE. Example: NCBITaxon:9606 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOverRepresentationWithHttpInfo(String objectCategory, List<String> subject, List<String> background, String subjectCategory, String maxPValue, String ontology, String taxon) throws ApiException {
        okhttp3.Call localVarCall = getOverRepresentationValidateBeforeCall(objectCategory, subject, background, subjectCategory, maxPValue, ontology, taxon, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Summary statistics for objects associated (asynchronously)
     * 
     * @param objectCategory E.g. phenotype, function (optional)
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (optional)
     * @param background Entity ids in background set, e.g. NCBIGene:84570, NCBIGene:3630; used in over-representation tests (optional)
     * @param subjectCategory Default: gene. Other types may be used e.g. disease but statistics may not make sense (optional, default to gene)
     * @param maxPValue Exclude results with p-value greater than this (optional, default to 0.05)
     * @param ontology ontology id. Must be obo id. Examples: go, mp, hp, uberon (optional: will be inferred if left blank) (optional)
     * @param taxon must be NCBITaxon CURIE. Example: NCBITaxon:9606 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOverRepresentationAsync(String objectCategory, List<String> subject, List<String> background, String subjectCategory, String maxPValue, String ontology, String taxon, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOverRepresentationValidateBeforeCall(objectCategory, subject, background, subjectCategory, maxPValue, ontology, taxon, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
