/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EntityAnnotationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NlpAnnotateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NlpAnnotateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NlpAnnotateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAnnotate
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotateCall(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nlp/annotate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (includeCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include_category", includeCategory));
        }

        if (excludeCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude_category", excludeCategory));
        }

        if (minLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_length", minLength));
        }

        if (longestOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longest_only", longestOnly));
        }

        if (includeAbbreviation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_abbreviation", includeAbbreviation));
        }

        if (includeAcronym != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_acronym", includeAcronym));
        }

        if (includeNumbers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_numbers", includeNumbers));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotateValidateBeforeCall(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback _callback) throws ApiException {
        return getAnnotateCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, _callback);

    }

    /**
     * Annotate a given text using SciGraph annotator
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getAnnotate(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers) throws ApiException {
        getAnnotateWithHttpInfo(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers);
    }

    /**
     * Annotate a given text using SciGraph annotator
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAnnotateWithHttpInfo(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers) throws ApiException {
        okhttp3.Call localVarCall = getAnnotateValidateBeforeCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Annotate a given text using SciGraph annotator (asynchronously)
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotateAsync(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotateValidateBeforeCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnnotateEntities
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotateEntitiesCall(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nlp/annotate/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (includeCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include_category", includeCategory));
        }

        if (excludeCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude_category", excludeCategory));
        }

        if (minLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_length", minLength));
        }

        if (longestOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longest_only", longestOnly));
        }

        if (includeAbbreviation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_abbreviation", includeAbbreviation));
        }

        if (includeAcronym != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_acronym", includeAcronym));
        }

        if (includeNumbers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_numbers", includeNumbers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotateEntitiesValidateBeforeCall(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback _callback) throws ApiException {
        return getAnnotateEntitiesCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, _callback);

    }

    /**
     * Annotate a given content using SciGraph annotator and get all entities from content
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @return EntityAnnotationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityAnnotationResult getAnnotateEntities(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers) throws ApiException {
        ApiResponse<EntityAnnotationResult> localVarResp = getAnnotateEntitiesWithHttpInfo(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers);
        return localVarResp.getData();
    }

    /**
     * Annotate a given content using SciGraph annotator and get all entities from content
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @return ApiResponse&lt;EntityAnnotationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityAnnotationResult> getAnnotateEntitiesWithHttpInfo(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers) throws ApiException {
        okhttp3.Call localVarCall = getAnnotateEntitiesValidateBeforeCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, null);
        Type localVarReturnType = new TypeToken<EntityAnnotationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Annotate a given content using SciGraph annotator and get all entities from content (asynchronously)
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotateEntitiesAsync(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback<EntityAnnotationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotateEntitiesValidateBeforeCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, _callback);
        Type localVarReturnType = new TypeToken<EntityAnnotationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAnnotate
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAnnotateCall(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nlp/annotate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (includeCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include_category", includeCategory));
        }

        if (excludeCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude_category", excludeCategory));
        }

        if (minLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_length", minLength));
        }

        if (longestOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longest_only", longestOnly));
        }

        if (includeAbbreviation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_abbreviation", includeAbbreviation));
        }

        if (includeAcronym != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_acronym", includeAcronym));
        }

        if (includeNumbers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_numbers", includeNumbers));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAnnotateValidateBeforeCall(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback _callback) throws ApiException {
        return postAnnotateCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, _callback);

    }

    /**
     * Annotate a given text using SciGraph annotator
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void postAnnotate(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers) throws ApiException {
        postAnnotateWithHttpInfo(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers);
    }

    /**
     * Annotate a given text using SciGraph annotator
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postAnnotateWithHttpInfo(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers) throws ApiException {
        okhttp3.Call localVarCall = postAnnotateValidateBeforeCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Annotate a given text using SciGraph annotator (asynchronously)
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAnnotateAsync(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAnnotateValidateBeforeCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAnnotateEntities
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAnnotateEntitiesCall(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nlp/annotate/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (includeCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include_category", includeCategory));
        }

        if (excludeCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude_category", excludeCategory));
        }

        if (minLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_length", minLength));
        }

        if (longestOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longest_only", longestOnly));
        }

        if (includeAbbreviation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_abbreviation", includeAbbreviation));
        }

        if (includeAcronym != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_acronym", includeAcronym));
        }

        if (includeNumbers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_numbers", includeNumbers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAnnotateEntitiesValidateBeforeCall(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback _callback) throws ApiException {
        return postAnnotateEntitiesCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, _callback);

    }

    /**
     * Annotate a given content using SciGraph annotator and get all entities from content
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @return EntityAnnotationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityAnnotationResult postAnnotateEntities(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers) throws ApiException {
        ApiResponse<EntityAnnotationResult> localVarResp = postAnnotateEntitiesWithHttpInfo(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers);
        return localVarResp.getData();
    }

    /**
     * Annotate a given content using SciGraph annotator and get all entities from content
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @return ApiResponse&lt;EntityAnnotationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityAnnotationResult> postAnnotateEntitiesWithHttpInfo(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers) throws ApiException {
        okhttp3.Call localVarCall = postAnnotateEntitiesValidateBeforeCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, null);
        Type localVarReturnType = new TypeToken<EntityAnnotationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Annotate a given content using SciGraph annotator and get all entities from content (asynchronously)
     * 
     * @param content The text content to annotate (optional)
     * @param includeCategory Categories to include for annotation (optional)
     * @param excludeCategory Categories to exclude for annotation (optional)
     * @param minLength The minimum number of characters in the annotated entity (optional, default to 4)
     * @param longestOnly Should only the longest entity be returned for an overlapping group (optional, default to false)
     * @param includeAbbreviation Should abbreviations be included (optional, default to false)
     * @param includeAcronym Should acronyms be included (optional, default to false)
     * @param includeNumbers Should numbers be included (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAnnotateEntitiesAsync(String content, List<String> includeCategory, List<String> excludeCategory, String minLength, Boolean longestOnly, Boolean includeAbbreviation, Boolean includeAcronym, Boolean includeNumbers, final ApiCallback<EntityAnnotationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAnnotateEntitiesValidateBeforeCall(content, includeCategory, excludeCategory, minLength, longestOnly, includeAbbreviation, includeAcronym, includeNumbers, _callback);
        Type localVarReturnType = new TypeToken<EntityAnnotationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
