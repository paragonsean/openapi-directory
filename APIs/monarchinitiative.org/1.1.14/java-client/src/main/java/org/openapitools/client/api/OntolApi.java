/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OntolApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OntolApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OntolApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getExtractOntologySubgraphResource
     * @param node class ID, e.g. HP:0001288 (required)
     * @param ontology ontology ID, e.g. go, uberon, mp, hp (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtractOntologySubgraphResourceCall(String node, String ontology, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontol/subgraph/{ontology}/{node}"
            .replace("{" + "node" + "}", localVarApiClient.escapeString(node.toString()))
            .replace("{" + "ontology" + "}", localVarApiClient.escapeString(ontology.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cnode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cnode", cnode));
        }

        if (includeAncestors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_ancestors", includeAncestors));
        }

        if (includeDescendants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_descendants", includeDescendants));
        }

        if (relation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "relation", relation));
        }

        if (includeMeta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_meta", includeMeta));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtractOntologySubgraphResourceValidateBeforeCall(String node, String ontology, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getExtractOntologySubgraphResource(Async)");
        }

        // verify the required parameter 'ontology' is set
        if (ontology == null) {
            throw new ApiException("Missing the required parameter 'ontology' when calling getExtractOntologySubgraphResource(Async)");
        }

        return getExtractOntologySubgraphResourceCall(node, ontology, cnode, includeAncestors, includeDescendants, relation, includeMeta, _callback);

    }

    /**
     * Extract a subgraph from an ontology
     * 
     * @param node class ID, e.g. HP:0001288 (required)
     * @param ontology ontology ID, e.g. go, uberon, mp, hp (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getExtractOntologySubgraphResource(String node, String ontology, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta) throws ApiException {
        getExtractOntologySubgraphResourceWithHttpInfo(node, ontology, cnode, includeAncestors, includeDescendants, relation, includeMeta);
    }

    /**
     * Extract a subgraph from an ontology
     * 
     * @param node class ID, e.g. HP:0001288 (required)
     * @param ontology ontology ID, e.g. go, uberon, mp, hp (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getExtractOntologySubgraphResourceWithHttpInfo(String node, String ontology, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta) throws ApiException {
        okhttp3.Call localVarCall = getExtractOntologySubgraphResourceValidateBeforeCall(node, ontology, cnode, includeAncestors, includeDescendants, relation, includeMeta, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Extract a subgraph from an ontology (asynchronously)
     * 
     * @param node class ID, e.g. HP:0001288 (required)
     * @param ontology ontology ID, e.g. go, uberon, mp, hp (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtractOntologySubgraphResourceAsync(String node, String ontology, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtractOntologySubgraphResourceValidateBeforeCall(node, ontology, cnode, includeAncestors, includeDescendants, relation, includeMeta, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInformationContentResource
     * @param subjectCategory  (required)
     * @param objectCategory  (required)
     * @param subjectTaxon  (required)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInformationContentResourceCall(String subjectCategory, String objectCategory, String subjectTaxon, String evidence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontol/information_content/{subject_category}/{object_category}/{subject_taxon}"
            .replace("{" + "subject_category" + "}", localVarApiClient.escapeString(subjectCategory.toString()))
            .replace("{" + "object_category" + "}", localVarApiClient.escapeString(objectCategory.toString()))
            .replace("{" + "subject_taxon" + "}", localVarApiClient.escapeString(subjectTaxon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformationContentResourceValidateBeforeCall(String subjectCategory, String objectCategory, String subjectTaxon, String evidence, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subjectCategory' is set
        if (subjectCategory == null) {
            throw new ApiException("Missing the required parameter 'subjectCategory' when calling getInformationContentResource(Async)");
        }

        // verify the required parameter 'objectCategory' is set
        if (objectCategory == null) {
            throw new ApiException("Missing the required parameter 'objectCategory' when calling getInformationContentResource(Async)");
        }

        // verify the required parameter 'subjectTaxon' is set
        if (subjectTaxon == null) {
            throw new ApiException("Missing the required parameter 'subjectTaxon' when calling getInformationContentResource(Async)");
        }

        return getInformationContentResourceCall(subjectCategory, objectCategory, subjectTaxon, evidence, _callback);

    }

    /**
     * Returns information content (IC) for a set of relevant ontology classes
     * &#x60;&#x60;&#x60; IC &#x3D; -log2( freq(t) / popSize ) &#x60;&#x60;&#x60;  Here the frequency and population is calculated for a particular dataset: e.g. all human disease-phenotype associations
     * @param subjectCategory  (required)
     * @param objectCategory  (required)
     * @param subjectTaxon  (required)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getInformationContentResource(String subjectCategory, String objectCategory, String subjectTaxon, String evidence) throws ApiException {
        getInformationContentResourceWithHttpInfo(subjectCategory, objectCategory, subjectTaxon, evidence);
    }

    /**
     * Returns information content (IC) for a set of relevant ontology classes
     * &#x60;&#x60;&#x60; IC &#x3D; -log2( freq(t) / popSize ) &#x60;&#x60;&#x60;  Here the frequency and population is calculated for a particular dataset: e.g. all human disease-phenotype associations
     * @param subjectCategory  (required)
     * @param objectCategory  (required)
     * @param subjectTaxon  (required)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getInformationContentResourceWithHttpInfo(String subjectCategory, String objectCategory, String subjectTaxon, String evidence) throws ApiException {
        okhttp3.Call localVarCall = getInformationContentResourceValidateBeforeCall(subjectCategory, objectCategory, subjectTaxon, evidence, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns information content (IC) for a set of relevant ontology classes (asynchronously)
     * &#x60;&#x60;&#x60; IC &#x3D; -log2( freq(t) / popSize ) &#x60;&#x60;&#x60;  Here the frequency and population is calculated for a particular dataset: e.g. all human disease-phenotype associations
     * @param subjectCategory  (required)
     * @param objectCategory  (required)
     * @param subjectTaxon  (required)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInformationContentResourceAsync(String subjectCategory, String objectCategory, String subjectTaxon, String evidence, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformationContentResourceValidateBeforeCall(subjectCategory, objectCategory, subjectTaxon, evidence, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postExtractOntologySubgraphResource
     * @param node class ID, e.g. HP:0001288 (required)
     * @param ontology ontology ID, e.g. go, uberon, mp, hp (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postExtractOntologySubgraphResourceCall(String node, String ontology, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontol/subgraph/{ontology}/{node}"
            .replace("{" + "node" + "}", localVarApiClient.escapeString(node.toString()))
            .replace("{" + "ontology" + "}", localVarApiClient.escapeString(ontology.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cnode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cnode", cnode));
        }

        if (includeAncestors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_ancestors", includeAncestors));
        }

        if (includeDescendants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_descendants", includeDescendants));
        }

        if (relation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "relation", relation));
        }

        if (includeMeta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_meta", includeMeta));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postExtractOntologySubgraphResourceValidateBeforeCall(String node, String ontology, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling postExtractOntologySubgraphResource(Async)");
        }

        // verify the required parameter 'ontology' is set
        if (ontology == null) {
            throw new ApiException("Missing the required parameter 'ontology' when calling postExtractOntologySubgraphResource(Async)");
        }

        return postExtractOntologySubgraphResourceCall(node, ontology, cnode, includeAncestors, includeDescendants, relation, includeMeta, _callback);

    }

    /**
     * Extract a subgraph from an ontology
     * 
     * @param node class ID, e.g. HP:0001288 (required)
     * @param ontology ontology ID, e.g. go, uberon, mp, hp (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void postExtractOntologySubgraphResource(String node, String ontology, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta) throws ApiException {
        postExtractOntologySubgraphResourceWithHttpInfo(node, ontology, cnode, includeAncestors, includeDescendants, relation, includeMeta);
    }

    /**
     * Extract a subgraph from an ontology
     * 
     * @param node class ID, e.g. HP:0001288 (required)
     * @param ontology ontology ID, e.g. go, uberon, mp, hp (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postExtractOntologySubgraphResourceWithHttpInfo(String node, String ontology, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta) throws ApiException {
        okhttp3.Call localVarCall = postExtractOntologySubgraphResourceValidateBeforeCall(node, ontology, cnode, includeAncestors, includeDescendants, relation, includeMeta, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Extract a subgraph from an ontology (asynchronously)
     * 
     * @param node class ID, e.g. HP:0001288 (required)
     * @param ontology ontology ID, e.g. go, uberon, mp, hp (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postExtractOntologySubgraphResourceAsync(String node, String ontology, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postExtractOntologySubgraphResourceValidateBeforeCall(node, ontology, cnode, includeAncestors, includeDescendants, relation, includeMeta, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
