/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Edge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.559774-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Edge {
  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private Object meta;

  public static final String SERIALIZED_NAME_OBJ = "obj";
  @SerializedName(SERIALIZED_NAME_OBJ)
  private String obj;

  public static final String SERIALIZED_NAME_PRED = "pred";
  @SerializedName(SERIALIZED_NAME_PRED)
  private String pred;

  public static final String SERIALIZED_NAME_SUB = "sub";
  @SerializedName(SERIALIZED_NAME_SUB)
  private String sub;

  public Edge() {
  }

  public Edge meta(Object meta) {
    this.meta = meta;
    return this;
  }

  /**
   * metadata about the Edge
   * @return meta
   */
  @javax.annotation.Nullable
  public Object getMeta() {
    return meta;
  }

  public void setMeta(Object meta) {
    this.meta = meta;
  }


  public Edge obj(String obj) {
    this.obj = obj;
    return this;
  }

  /**
   * Object (target) Node ID
   * @return obj
   */
  @javax.annotation.Nullable
  public String getObj() {
    return obj;
  }

  public void setObj(String obj) {
    this.obj = obj;
  }


  public Edge pred(String pred) {
    this.pred = pred;
    return this;
  }

  /**
   * Predicate (relation) ID
   * @return pred
   */
  @javax.annotation.Nullable
  public String getPred() {
    return pred;
  }

  public void setPred(String pred) {
    this.pred = pred;
  }


  public Edge sub(String sub) {
    this.sub = sub;
    return this;
  }

  /**
   * Subject (source) Node ID
   * @return sub
   */
  @javax.annotation.Nullable
  public String getSub() {
    return sub;
  }

  public void setSub(String sub) {
    this.sub = sub;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Edge edge = (Edge) o;
    return Objects.equals(this.meta, edge.meta) &&
        Objects.equals(this.obj, edge.obj) &&
        Objects.equals(this.pred, edge.pred) &&
        Objects.equals(this.sub, edge.sub);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meta, obj, pred, sub);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Edge {\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    obj: ").append(toIndentedString(obj)).append("\n");
    sb.append("    pred: ").append(toIndentedString(pred)).append("\n");
    sb.append("    sub: ").append(toIndentedString(sub)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("meta");
    openapiFields.add("obj");
    openapiFields.add("pred");
    openapiFields.add("sub");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Edge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Edge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Edge is not found in the empty JSON string", Edge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Edge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Edge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("obj") != null && !jsonObj.get("obj").isJsonNull()) && !jsonObj.get("obj").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obj` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obj").toString()));
      }
      if ((jsonObj.get("pred") != null && !jsonObj.get("pred").isJsonNull()) && !jsonObj.get("pred").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pred` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pred").toString()));
      }
      if ((jsonObj.get("sub") != null && !jsonObj.get("sub").isJsonNull()) && !jsonObj.get("sub").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Edge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Edge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Edge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Edge.class));

       return (TypeAdapter<T>) new TypeAdapter<Edge>() {
           @Override
           public void write(JsonWriter out, Edge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Edge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Edge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Edge
   * @throws IOException if the JSON string is invalid with respect to Edge
   */
  public static Edge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Edge.class);
  }

  /**
   * Convert an instance of Edge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

