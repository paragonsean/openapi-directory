/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Association;
import org.openapitools.client.model.PageOfVariantSets;
import org.openapitools.client.model.VariantSet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VariationSetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VariationSetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VariationSetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteVariantSetItem
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> VariantSet successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVariantSetItemCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variation/set/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVariantSetItemValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteVariantSetItem(Async)");
        }

        return deleteVariantSetItemCall(id, _callback);

    }

    /**
     * Deletes variant set
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> VariantSet successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVariantSetItem(String id) throws ApiException {
        deleteVariantSetItemWithHttpInfo(id);
    }

    /**
     * Deletes variant set
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> VariantSet successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVariantSetItemWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteVariantSetItemValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes variant set (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> VariantSet successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVariantSetItemAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVariantSetItemValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantAnalyze
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantAnalyzeCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variation/set/analyze/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantAnalyzeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVariantAnalyze(Async)");
        }

        return getVariantAnalyzeCall(id, _callback);

    }

    /**
     * Returns list of matches
     * 
     * @param id  (required)
     * @return List&lt;Association&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Association> getVariantAnalyze(String id) throws ApiException {
        ApiResponse<List<Association>> localVarResp = getVariantAnalyzeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns list of matches
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Association&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Association>> getVariantAnalyzeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getVariantAnalyzeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of matches (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantAnalyzeAsync(String id, final ApiCallback<List<Association>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantAnalyzeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantSetItem
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantSetItemCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variation/set/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantSetItemValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVariantSetItem(Async)");
        }

        return getVariantSetItemCall(id, _callback);

    }

    /**
     * Returns a variant set
     * 
     * @param id  (required)
     * @return VariantSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public VariantSet getVariantSetItem(String id) throws ApiException {
        ApiResponse<VariantSet> localVarResp = getVariantSetItemWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns a variant set
     * 
     * @param id  (required)
     * @return ApiResponse&lt;VariantSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariantSet> getVariantSetItemWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getVariantSetItemValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VariantSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a variant set (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantSetItemAsync(String id, final ApiCallback<VariantSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantSetItemValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VariantSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantSetsArchiveCollection
     * @param year  (required)
     * @param month  (required)
     * @param day  (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Results per page {error_msg} (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantSetsArchiveCollectionCall(Integer year, Integer month, Integer day, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variation/set/archive/{year}/{month}/{day}"
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "day" + "}", localVarApiClient.escapeString(day.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantSetsArchiveCollectionValidateBeforeCall(Integer year, Integer month, Integer day, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getVariantSetsArchiveCollection(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getVariantSetsArchiveCollection(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling getVariantSetsArchiveCollection(Async)");
        }

        return getVariantSetsArchiveCollectionCall(year, month, day, page, perPage, _callback);

    }

    /**
     * Returns list of variant sets from a specified time period
     * 
     * @param year  (required)
     * @param month  (required)
     * @param day  (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Results per page {error_msg} (optional, default to 10)
     * @return PageOfVariantSets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PageOfVariantSets getVariantSetsArchiveCollection(Integer year, Integer month, Integer day, Integer page, Integer perPage) throws ApiException {
        ApiResponse<PageOfVariantSets> localVarResp = getVariantSetsArchiveCollectionWithHttpInfo(year, month, day, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Returns list of variant sets from a specified time period
     * 
     * @param year  (required)
     * @param month  (required)
     * @param day  (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Results per page {error_msg} (optional, default to 10)
     * @return ApiResponse&lt;PageOfVariantSets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageOfVariantSets> getVariantSetsArchiveCollectionWithHttpInfo(Integer year, Integer month, Integer day, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getVariantSetsArchiveCollectionValidateBeforeCall(year, month, day, page, perPage, null);
        Type localVarReturnType = new TypeToken<PageOfVariantSets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of variant sets from a specified time period (asynchronously)
     * 
     * @param year  (required)
     * @param month  (required)
     * @param day  (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Results per page {error_msg} (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantSetsArchiveCollectionAsync(Integer year, Integer month, Integer day, Integer page, Integer perPage, final ApiCallback<PageOfVariantSets> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantSetsArchiveCollectionValidateBeforeCall(year, month, day, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<PageOfVariantSets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantSetsCollection
     * @param page Page number (optional, default to 1)
     * @param perPage Results per page {error_msg} (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantSetsCollectionCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variation/set/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantSetsCollectionValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getVariantSetsCollectionCall(page, perPage, _callback);

    }

    /**
     * Returns list of variant sets
     * 
     * @param page Page number (optional, default to 1)
     * @param perPage Results per page {error_msg} (optional, default to 10)
     * @return PageOfVariantSets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PageOfVariantSets getVariantSetsCollection(Integer page, Integer perPage) throws ApiException {
        ApiResponse<PageOfVariantSets> localVarResp = getVariantSetsCollectionWithHttpInfo(page, perPage);
        return localVarResp.getData();
    }

    /**
     * Returns list of variant sets
     * 
     * @param page Page number (optional, default to 1)
     * @param perPage Results per page {error_msg} (optional, default to 10)
     * @return ApiResponse&lt;PageOfVariantSets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageOfVariantSets> getVariantSetsCollectionWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getVariantSetsCollectionValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<PageOfVariantSets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of variant sets (asynchronously)
     * 
     * @param page Page number (optional, default to 1)
     * @param perPage Results per page {error_msg} (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantSetsCollectionAsync(Integer page, Integer perPage, final ApiCallback<PageOfVariantSets> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantSetsCollectionValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<PageOfVariantSets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postVariantSetsCollection
     * @param variantSet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVariantSetsCollectionCall(VariantSet variantSet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = variantSet;

        // create path and map variables
        String localVarPath = "/variation/set/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postVariantSetsCollectionValidateBeforeCall(VariantSet variantSet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variantSet' is set
        if (variantSet == null) {
            throw new ApiException("Missing the required parameter 'variantSet' when calling postVariantSetsCollection(Async)");
        }

        return postVariantSetsCollectionCall(variantSet, _callback);

    }

    /**
     * Creates a new variant set
     * 
     * @param variantSet  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void postVariantSetsCollection(VariantSet variantSet) throws ApiException {
        postVariantSetsCollectionWithHttpInfo(variantSet);
    }

    /**
     * Creates a new variant set
     * 
     * @param variantSet  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postVariantSetsCollectionWithHttpInfo(VariantSet variantSet) throws ApiException {
        okhttp3.Call localVarCall = postVariantSetsCollectionValidateBeforeCall(variantSet, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a new variant set (asynchronously)
     * 
     * @param variantSet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVariantSetsCollectionAsync(VariantSet variantSet, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postVariantSetsCollectionValidateBeforeCall(variantSet, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVariantSetItem
     * @param id  (required)
     * @param variantSet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> VariantSet successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVariantSetItemCall(String id, VariantSet variantSet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = variantSet;

        // create path and map variables
        String localVarPath = "/variation/set/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVariantSetItemValidateBeforeCall(String id, VariantSet variantSet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putVariantSetItem(Async)");
        }

        // verify the required parameter 'variantSet' is set
        if (variantSet == null) {
            throw new ApiException("Missing the required parameter 'variantSet' when calling putVariantSetItem(Async)");
        }

        return putVariantSetItemCall(id, variantSet, _callback);

    }

    /**
     * Updates a variant set
     * 
     * @param id  (required)
     * @param variantSet  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> VariantSet successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public void putVariantSetItem(String id, VariantSet variantSet) throws ApiException {
        putVariantSetItemWithHttpInfo(id, variantSet);
    }

    /**
     * Updates a variant set
     * 
     * @param id  (required)
     * @param variantSet  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> VariantSet successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putVariantSetItemWithHttpInfo(String id, VariantSet variantSet) throws ApiException {
        okhttp3.Call localVarCall = putVariantSetItemValidateBeforeCall(id, variantSet, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates a variant set (asynchronously)
     * 
     * @param id  (required)
     * @param variantSet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> VariantSet successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> VariantSet not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVariantSetItemAsync(String id, VariantSet variantSet, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVariantSetItemValidateBeforeCall(id, variantSet, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
