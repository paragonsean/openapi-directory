/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AutocompleteResults;
import org.openapitools.client.model.LayResults;
import org.openapitools.client.model.SearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAutocomplete
     * @param term  (required)
     * @param fq fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior. (optional)
     * @param category e.g. gene, disease (optional)
     * @param prefix ontology prefix: HP, -MONDO (optional)
     * @param includeEqs Include equivalent ids in prefix filter (optional, default to false)
     * @param boostFx boost function e.g. pow(edges,0.334) (optional)
     * @param boostQ boost query e.g. category:genotype^-10 (optional)
     * @param taxon taxon filter, eg NCBITaxon:9606, includes inferred taxa (optional)
     * @param rows number of rows (optional, default to 20)
     * @param start row number to start from (optional, default to 0)
     * @param highlightClass highlight class (optional)
     * @param minMatch minimum should match parameter, see solr docs for details (optional)
     * @param excludeGroups Exclude grouping classes (classes with subclasses) (optional, default to false)
     * @param minimalTokenizer set to true to use the minimal tokenizer, good for variants and genotypes (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutocompleteCall(String term, List<String> fq, List<String> category, List<String> prefix, Boolean includeEqs, List<String> boostFx, List<String> boostQ, List<String> taxon, Integer rows, String start, String highlightClass, String minMatch, Boolean excludeGroups, Boolean minimalTokenizer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/entity/autocomplete/{term}"
            .replace("{" + "term" + "}", localVarApiClient.escapeString(term.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fq", fq));
        }

        if (category != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category", category));
        }

        if (prefix != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "prefix", prefix));
        }

        if (includeEqs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_eqs", includeEqs));
        }

        if (boostFx != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "boost_fx", boostFx));
        }

        if (boostQ != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "boost_q", boostQ));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (highlightClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highlight_class", highlightClass));
        }

        if (minMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_match", minMatch));
        }

        if (excludeGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_groups", excludeGroups));
        }

        if (minimalTokenizer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimal_tokenizer", minimalTokenizer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutocompleteValidateBeforeCall(String term, List<String> fq, List<String> category, List<String> prefix, Boolean includeEqs, List<String> boostFx, List<String> boostQ, List<String> taxon, Integer rows, String start, String highlightClass, String minMatch, Boolean excludeGroups, Boolean minimalTokenizer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling getAutocomplete(Async)");
        }

        return getAutocompleteCall(term, fq, category, prefix, includeEqs, boostFx, boostQ, taxon, rows, start, highlightClass, minMatch, excludeGroups, minimalTokenizer, _callback);

    }

    /**
     * Returns list of matching concepts or entities using lexical search
     * 
     * @param term  (required)
     * @param fq fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior. (optional)
     * @param category e.g. gene, disease (optional)
     * @param prefix ontology prefix: HP, -MONDO (optional)
     * @param includeEqs Include equivalent ids in prefix filter (optional, default to false)
     * @param boostFx boost function e.g. pow(edges,0.334) (optional)
     * @param boostQ boost query e.g. category:genotype^-10 (optional)
     * @param taxon taxon filter, eg NCBITaxon:9606, includes inferred taxa (optional)
     * @param rows number of rows (optional, default to 20)
     * @param start row number to start from (optional, default to 0)
     * @param highlightClass highlight class (optional)
     * @param minMatch minimum should match parameter, see solr docs for details (optional)
     * @param excludeGroups Exclude grouping classes (classes with subclasses) (optional, default to false)
     * @param minimalTokenizer set to true to use the minimal tokenizer, good for variants and genotypes (optional, default to false)
     * @return AutocompleteResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AutocompleteResults getAutocomplete(String term, List<String> fq, List<String> category, List<String> prefix, Boolean includeEqs, List<String> boostFx, List<String> boostQ, List<String> taxon, Integer rows, String start, String highlightClass, String minMatch, Boolean excludeGroups, Boolean minimalTokenizer) throws ApiException {
        ApiResponse<AutocompleteResults> localVarResp = getAutocompleteWithHttpInfo(term, fq, category, prefix, includeEqs, boostFx, boostQ, taxon, rows, start, highlightClass, minMatch, excludeGroups, minimalTokenizer);
        return localVarResp.getData();
    }

    /**
     * Returns list of matching concepts or entities using lexical search
     * 
     * @param term  (required)
     * @param fq fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior. (optional)
     * @param category e.g. gene, disease (optional)
     * @param prefix ontology prefix: HP, -MONDO (optional)
     * @param includeEqs Include equivalent ids in prefix filter (optional, default to false)
     * @param boostFx boost function e.g. pow(edges,0.334) (optional)
     * @param boostQ boost query e.g. category:genotype^-10 (optional)
     * @param taxon taxon filter, eg NCBITaxon:9606, includes inferred taxa (optional)
     * @param rows number of rows (optional, default to 20)
     * @param start row number to start from (optional, default to 0)
     * @param highlightClass highlight class (optional)
     * @param minMatch minimum should match parameter, see solr docs for details (optional)
     * @param excludeGroups Exclude grouping classes (classes with subclasses) (optional, default to false)
     * @param minimalTokenizer set to true to use the minimal tokenizer, good for variants and genotypes (optional, default to false)
     * @return ApiResponse&lt;AutocompleteResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutocompleteResults> getAutocompleteWithHttpInfo(String term, List<String> fq, List<String> category, List<String> prefix, Boolean includeEqs, List<String> boostFx, List<String> boostQ, List<String> taxon, Integer rows, String start, String highlightClass, String minMatch, Boolean excludeGroups, Boolean minimalTokenizer) throws ApiException {
        okhttp3.Call localVarCall = getAutocompleteValidateBeforeCall(term, fq, category, prefix, includeEqs, boostFx, boostQ, taxon, rows, start, highlightClass, minMatch, excludeGroups, minimalTokenizer, null);
        Type localVarReturnType = new TypeToken<AutocompleteResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of matching concepts or entities using lexical search (asynchronously)
     * 
     * @param term  (required)
     * @param fq fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior. (optional)
     * @param category e.g. gene, disease (optional)
     * @param prefix ontology prefix: HP, -MONDO (optional)
     * @param includeEqs Include equivalent ids in prefix filter (optional, default to false)
     * @param boostFx boost function e.g. pow(edges,0.334) (optional)
     * @param boostQ boost query e.g. category:genotype^-10 (optional)
     * @param taxon taxon filter, eg NCBITaxon:9606, includes inferred taxa (optional)
     * @param rows number of rows (optional, default to 20)
     * @param start row number to start from (optional, default to 0)
     * @param highlightClass highlight class (optional)
     * @param minMatch minimum should match parameter, see solr docs for details (optional)
     * @param excludeGroups Exclude grouping classes (classes with subclasses) (optional, default to false)
     * @param minimalTokenizer set to true to use the minimal tokenizer, good for variants and genotypes (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutocompleteAsync(String term, List<String> fq, List<String> category, List<String> prefix, Boolean includeEqs, List<String> boostFx, List<String> boostQ, List<String> taxon, Integer rows, String start, String highlightClass, String minMatch, Boolean excludeGroups, Boolean minimalTokenizer, final ApiCallback<AutocompleteResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutocompleteValidateBeforeCall(term, fq, category, prefix, includeEqs, boostFx, boostQ, taxon, rows, start, highlightClass, minMatch, excludeGroups, minimalTokenizer, _callback);
        Type localVarReturnType = new TypeToken<AutocompleteResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSearchEntities
     * @param term search string, e.g. shh, parkinson, femur (required)
     * @param fq fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior. (optional)
     * @param category e.g. gene, disease (optional)
     * @param prefix ontology prefix: HP, -MONDO (optional)
     * @param includeEqs Include equivalent ids in prefix filter (optional, default to false)
     * @param boostFx boost function e.g. pow(edges,0.334) (optional)
     * @param boostQ boost query e.g. category:genotype^-10 (optional)
     * @param taxon taxon filter, eg NCBITaxon:9606, includes inferred taxa (optional)
     * @param rows number of rows (optional, default to 20)
     * @param start row number to start from (optional, default to 0)
     * @param highlightClass highlight class (optional)
     * @param minMatch minimum should match parameter, see solr docs for details (optional)
     * @param excludeGroups Exclude grouping classes (classes with subclasses) (optional, default to false)
     * @param minimalTokenizer set to true to use the minimal tokenizer, good for variants and genotypes (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchEntitiesCall(String term, List<String> fq, List<String> category, List<String> prefix, Boolean includeEqs, List<String> boostFx, List<String> boostQ, List<String> taxon, Integer rows, String start, String highlightClass, String minMatch, Boolean excludeGroups, Boolean minimalTokenizer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/entity/{term}"
            .replace("{" + "term" + "}", localVarApiClient.escapeString(term.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fq", fq));
        }

        if (category != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category", category));
        }

        if (prefix != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "prefix", prefix));
        }

        if (includeEqs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_eqs", includeEqs));
        }

        if (boostFx != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "boost_fx", boostFx));
        }

        if (boostQ != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "boost_q", boostQ));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (highlightClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highlight_class", highlightClass));
        }

        if (minMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_match", minMatch));
        }

        if (excludeGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_groups", excludeGroups));
        }

        if (minimalTokenizer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimal_tokenizer", minimalTokenizer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchEntitiesValidateBeforeCall(String term, List<String> fq, List<String> category, List<String> prefix, Boolean includeEqs, List<String> boostFx, List<String> boostQ, List<String> taxon, Integer rows, String start, String highlightClass, String minMatch, Boolean excludeGroups, Boolean minimalTokenizer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling getSearchEntities(Async)");
        }

        return getSearchEntitiesCall(term, fq, category, prefix, includeEqs, boostFx, boostQ, taxon, rows, start, highlightClass, minMatch, excludeGroups, minimalTokenizer, _callback);

    }

    /**
     * Returns list of matching concepts or entities using lexical search
     * 
     * @param term search string, e.g. shh, parkinson, femur (required)
     * @param fq fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior. (optional)
     * @param category e.g. gene, disease (optional)
     * @param prefix ontology prefix: HP, -MONDO (optional)
     * @param includeEqs Include equivalent ids in prefix filter (optional, default to false)
     * @param boostFx boost function e.g. pow(edges,0.334) (optional)
     * @param boostQ boost query e.g. category:genotype^-10 (optional)
     * @param taxon taxon filter, eg NCBITaxon:9606, includes inferred taxa (optional)
     * @param rows number of rows (optional, default to 20)
     * @param start row number to start from (optional, default to 0)
     * @param highlightClass highlight class (optional)
     * @param minMatch minimum should match parameter, see solr docs for details (optional)
     * @param excludeGroups Exclude grouping classes (classes with subclasses) (optional, default to false)
     * @param minimalTokenizer set to true to use the minimal tokenizer, good for variants and genotypes (optional, default to false)
     * @return SearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchResult getSearchEntities(String term, List<String> fq, List<String> category, List<String> prefix, Boolean includeEqs, List<String> boostFx, List<String> boostQ, List<String> taxon, Integer rows, String start, String highlightClass, String minMatch, Boolean excludeGroups, Boolean minimalTokenizer) throws ApiException {
        ApiResponse<SearchResult> localVarResp = getSearchEntitiesWithHttpInfo(term, fq, category, prefix, includeEqs, boostFx, boostQ, taxon, rows, start, highlightClass, minMatch, excludeGroups, minimalTokenizer);
        return localVarResp.getData();
    }

    /**
     * Returns list of matching concepts or entities using lexical search
     * 
     * @param term search string, e.g. shh, parkinson, femur (required)
     * @param fq fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior. (optional)
     * @param category e.g. gene, disease (optional)
     * @param prefix ontology prefix: HP, -MONDO (optional)
     * @param includeEqs Include equivalent ids in prefix filter (optional, default to false)
     * @param boostFx boost function e.g. pow(edges,0.334) (optional)
     * @param boostQ boost query e.g. category:genotype^-10 (optional)
     * @param taxon taxon filter, eg NCBITaxon:9606, includes inferred taxa (optional)
     * @param rows number of rows (optional, default to 20)
     * @param start row number to start from (optional, default to 0)
     * @param highlightClass highlight class (optional)
     * @param minMatch minimum should match parameter, see solr docs for details (optional)
     * @param excludeGroups Exclude grouping classes (classes with subclasses) (optional, default to false)
     * @param minimalTokenizer set to true to use the minimal tokenizer, good for variants and genotypes (optional, default to false)
     * @return ApiResponse&lt;SearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResult> getSearchEntitiesWithHttpInfo(String term, List<String> fq, List<String> category, List<String> prefix, Boolean includeEqs, List<String> boostFx, List<String> boostQ, List<String> taxon, Integer rows, String start, String highlightClass, String minMatch, Boolean excludeGroups, Boolean minimalTokenizer) throws ApiException {
        okhttp3.Call localVarCall = getSearchEntitiesValidateBeforeCall(term, fq, category, prefix, includeEqs, boostFx, boostQ, taxon, rows, start, highlightClass, minMatch, excludeGroups, minimalTokenizer, null);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of matching concepts or entities using lexical search (asynchronously)
     * 
     * @param term search string, e.g. shh, parkinson, femur (required)
     * @param fq fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior. (optional)
     * @param category e.g. gene, disease (optional)
     * @param prefix ontology prefix: HP, -MONDO (optional)
     * @param includeEqs Include equivalent ids in prefix filter (optional, default to false)
     * @param boostFx boost function e.g. pow(edges,0.334) (optional)
     * @param boostQ boost query e.g. category:genotype^-10 (optional)
     * @param taxon taxon filter, eg NCBITaxon:9606, includes inferred taxa (optional)
     * @param rows number of rows (optional, default to 20)
     * @param start row number to start from (optional, default to 0)
     * @param highlightClass highlight class (optional)
     * @param minMatch minimum should match parameter, see solr docs for details (optional)
     * @param excludeGroups Exclude grouping classes (classes with subclasses) (optional, default to false)
     * @param minimalTokenizer set to true to use the minimal tokenizer, good for variants and genotypes (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchEntitiesAsync(String term, List<String> fq, List<String> category, List<String> prefix, Boolean includeEqs, List<String> boostFx, List<String> boostQ, List<String> taxon, Integer rows, String start, String highlightClass, String minMatch, Boolean excludeGroups, Boolean minimalTokenizer, final ApiCallback<SearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchEntitiesValidateBeforeCall(term, fq, category, prefix, includeEqs, boostFx, boostQ, taxon, rows, start, highlightClass, minMatch, excludeGroups, minimalTokenizer, _callback);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSearchHpoEntities
     * @param term search string, e.g. muscle atrophy, frequent infections (required)
     * @param rows number of rows (optional, default to 10)
     * @param start row number to start from (optional, default to 0)
     * @param phenotypeGroup phenotype group id (optional)
     * @param phenotypeGroupLabel phenotype group label (optional)
     * @param anatomicalSystem anatomical system id (optional)
     * @param anatomicalSystemLabel anatomical system label (optional)
     * @param highlightClass highlight class (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchHpoEntitiesCall(String term, Integer rows, String start, String phenotypeGroup, String phenotypeGroupLabel, String anatomicalSystem, String anatomicalSystemLabel, String highlightClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/entity/hpo-pl/{term}"
            .replace("{" + "term" + "}", localVarApiClient.escapeString(term.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (phenotypeGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phenotype_group", phenotypeGroup));
        }

        if (phenotypeGroupLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phenotype_group_label", phenotypeGroupLabel));
        }

        if (anatomicalSystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anatomical_system", anatomicalSystem));
        }

        if (anatomicalSystemLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anatomical_system_label", anatomicalSystemLabel));
        }

        if (highlightClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highlight_class", highlightClass));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchHpoEntitiesValidateBeforeCall(String term, Integer rows, String start, String phenotypeGroup, String phenotypeGroupLabel, String anatomicalSystem, String anatomicalSystemLabel, String highlightClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling getSearchHpoEntities(Async)");
        }

        return getSearchHpoEntitiesCall(term, rows, start, phenotypeGroup, phenotypeGroupLabel, anatomicalSystem, anatomicalSystemLabel, highlightClass, _callback);

    }

    /**
     * Returns list of matching concepts or entities using lexical search
     * 
     * @param term search string, e.g. muscle atrophy, frequent infections (required)
     * @param rows number of rows (optional, default to 10)
     * @param start row number to start from (optional, default to 0)
     * @param phenotypeGroup phenotype group id (optional)
     * @param phenotypeGroupLabel phenotype group label (optional)
     * @param anatomicalSystem anatomical system id (optional)
     * @param anatomicalSystemLabel anatomical system label (optional)
     * @param highlightClass highlight class (optional)
     * @return LayResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LayResults getSearchHpoEntities(String term, Integer rows, String start, String phenotypeGroup, String phenotypeGroupLabel, String anatomicalSystem, String anatomicalSystemLabel, String highlightClass) throws ApiException {
        ApiResponse<LayResults> localVarResp = getSearchHpoEntitiesWithHttpInfo(term, rows, start, phenotypeGroup, phenotypeGroupLabel, anatomicalSystem, anatomicalSystemLabel, highlightClass);
        return localVarResp.getData();
    }

    /**
     * Returns list of matching concepts or entities using lexical search
     * 
     * @param term search string, e.g. muscle atrophy, frequent infections (required)
     * @param rows number of rows (optional, default to 10)
     * @param start row number to start from (optional, default to 0)
     * @param phenotypeGroup phenotype group id (optional)
     * @param phenotypeGroupLabel phenotype group label (optional)
     * @param anatomicalSystem anatomical system id (optional)
     * @param anatomicalSystemLabel anatomical system label (optional)
     * @param highlightClass highlight class (optional)
     * @return ApiResponse&lt;LayResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LayResults> getSearchHpoEntitiesWithHttpInfo(String term, Integer rows, String start, String phenotypeGroup, String phenotypeGroupLabel, String anatomicalSystem, String anatomicalSystemLabel, String highlightClass) throws ApiException {
        okhttp3.Call localVarCall = getSearchHpoEntitiesValidateBeforeCall(term, rows, start, phenotypeGroup, phenotypeGroupLabel, anatomicalSystem, anatomicalSystemLabel, highlightClass, null);
        Type localVarReturnType = new TypeToken<LayResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of matching concepts or entities using lexical search (asynchronously)
     * 
     * @param term search string, e.g. muscle atrophy, frequent infections (required)
     * @param rows number of rows (optional, default to 10)
     * @param start row number to start from (optional, default to 0)
     * @param phenotypeGroup phenotype group id (optional)
     * @param phenotypeGroupLabel phenotype group label (optional)
     * @param anatomicalSystem anatomical system id (optional)
     * @param anatomicalSystemLabel anatomical system label (optional)
     * @param highlightClass highlight class (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchHpoEntitiesAsync(String term, Integer rows, String start, String phenotypeGroup, String phenotypeGroupLabel, String anatomicalSystem, String anatomicalSystemLabel, String highlightClass, final ApiCallback<LayResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchHpoEntitiesValidateBeforeCall(term, rows, start, phenotypeGroup, phenotypeGroupLabel, anatomicalSystem, anatomicalSystemLabel, highlightClass, _callback);
        Type localVarReturnType = new TypeToken<LayResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
