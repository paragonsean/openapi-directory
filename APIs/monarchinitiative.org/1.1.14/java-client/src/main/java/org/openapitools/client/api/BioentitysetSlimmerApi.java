/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BioentitysetSlimmerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BioentitysetSlimmerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BioentitysetSlimmerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getEntitySetAnatomySlimmer
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetAnatomySlimmerCall(List<String> subject, List<String> slim, Boolean excludeAutomaticAssertions, Integer rows, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentityset/slimmer/anatomy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitySetAnatomySlimmerValidateBeforeCall(List<String> subject, List<String> slim, Boolean excludeAutomaticAssertions, Integer rows, Integer start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling getEntitySetAnatomySlimmer(Async)");
        }

        // verify the required parameter 'slim' is set
        if (slim == null) {
            throw new ApiException("Missing the required parameter 'slim' when calling getEntitySetAnatomySlimmer(Async)");
        }

        return getEntitySetAnatomySlimmerCall(subject, slim, excludeAutomaticAssertions, rows, start, _callback);

    }

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getEntitySetAnatomySlimmer(List<String> subject, List<String> slim, Boolean excludeAutomaticAssertions, Integer rows, Integer start) throws ApiException {
        getEntitySetAnatomySlimmerWithHttpInfo(subject, slim, excludeAutomaticAssertions, rows, start);
    }

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getEntitySetAnatomySlimmerWithHttpInfo(List<String> subject, List<String> slim, Boolean excludeAutomaticAssertions, Integer rows, Integer start) throws ApiException {
        okhttp3.Call localVarCall = getEntitySetAnatomySlimmerValidateBeforeCall(subject, slim, excludeAutomaticAssertions, rows, start, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim (asynchronously)
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetAnatomySlimmerAsync(List<String> subject, List<String> slim, Boolean excludeAutomaticAssertions, Integer rows, Integer start, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitySetAnatomySlimmerValidateBeforeCall(subject, slim, excludeAutomaticAssertions, rows, start, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEntitySetFunctionSlimmer
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param relationshipType relationship type (&#39;involved_in&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to acts_upstream_of_or_within)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetFunctionSlimmerCall(List<String> subject, List<String> slim, String relationshipType, Boolean excludeAutomaticAssertions, Integer rows, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentityset/slimmer/function";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (relationshipType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relationship_type", relationshipType));
        }

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitySetFunctionSlimmerValidateBeforeCall(List<String> subject, List<String> slim, String relationshipType, Boolean excludeAutomaticAssertions, Integer rows, Integer start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling getEntitySetFunctionSlimmer(Async)");
        }

        // verify the required parameter 'slim' is set
        if (slim == null) {
            throw new ApiException("Missing the required parameter 'slim' when calling getEntitySetFunctionSlimmer(Async)");
        }

        return getEntitySetFunctionSlimmerCall(subject, slim, relationshipType, excludeAutomaticAssertions, rows, start, _callback);

    }

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param relationshipType relationship type (&#39;involved_in&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to acts_upstream_of_or_within)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getEntitySetFunctionSlimmer(List<String> subject, List<String> slim, String relationshipType, Boolean excludeAutomaticAssertions, Integer rows, Integer start) throws ApiException {
        getEntitySetFunctionSlimmerWithHttpInfo(subject, slim, relationshipType, excludeAutomaticAssertions, rows, start);
    }

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param relationshipType relationship type (&#39;involved_in&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to acts_upstream_of_or_within)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getEntitySetFunctionSlimmerWithHttpInfo(List<String> subject, List<String> slim, String relationshipType, Boolean excludeAutomaticAssertions, Integer rows, Integer start) throws ApiException {
        okhttp3.Call localVarCall = getEntitySetFunctionSlimmerValidateBeforeCall(subject, slim, relationshipType, excludeAutomaticAssertions, rows, start, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim (asynchronously)
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param relationshipType relationship type (&#39;involved_in&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to acts_upstream_of_or_within)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetFunctionSlimmerAsync(List<String> subject, List<String> slim, String relationshipType, Boolean excludeAutomaticAssertions, Integer rows, Integer start, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitySetFunctionSlimmerValidateBeforeCall(subject, slim, relationshipType, excludeAutomaticAssertions, rows, start, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEntitySetPhenotypeSlimmer
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetPhenotypeSlimmerCall(List<String> subject, List<String> slim, Boolean excludeAutomaticAssertions, Integer rows, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentityset/slimmer/phenotype";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitySetPhenotypeSlimmerValidateBeforeCall(List<String> subject, List<String> slim, Boolean excludeAutomaticAssertions, Integer rows, Integer start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling getEntitySetPhenotypeSlimmer(Async)");
        }

        // verify the required parameter 'slim' is set
        if (slim == null) {
            throw new ApiException("Missing the required parameter 'slim' when calling getEntitySetPhenotypeSlimmer(Async)");
        }

        return getEntitySetPhenotypeSlimmerCall(subject, slim, excludeAutomaticAssertions, rows, start, _callback);

    }

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getEntitySetPhenotypeSlimmer(List<String> subject, List<String> slim, Boolean excludeAutomaticAssertions, Integer rows, Integer start) throws ApiException {
        getEntitySetPhenotypeSlimmerWithHttpInfo(subject, slim, excludeAutomaticAssertions, rows, start);
    }

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getEntitySetPhenotypeSlimmerWithHttpInfo(List<String> subject, List<String> slim, Boolean excludeAutomaticAssertions, Integer rows, Integer start) throws ApiException {
        okhttp3.Call localVarCall = getEntitySetPhenotypeSlimmerValidateBeforeCall(subject, slim, excludeAutomaticAssertions, rows, start, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * For a given gene(s), summarize its annotations over a defined set of slim (asynchronously)
     * 
     * @param subject Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387 (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO) (required)
     * @param excludeAutomaticAssertions If set, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitySetPhenotypeSlimmerAsync(List<String> subject, List<String> slim, Boolean excludeAutomaticAssertions, Integer rows, Integer start, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitySetPhenotypeSlimmerValidateBeforeCall(subject, slim, excludeAutomaticAssertions, rows, start, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
