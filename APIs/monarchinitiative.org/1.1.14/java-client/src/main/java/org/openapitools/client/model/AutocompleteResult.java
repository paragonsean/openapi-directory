/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutocompleteResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.559774-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutocompleteResult {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<String> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_EQUIVALENT_IDS = "equivalent_ids";
  @SerializedName(SERIALIZED_NAME_EQUIVALENT_IDS)
  private List<String> equivalentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_HIGHLIGHT = "has_highlight";
  @SerializedName(SERIALIZED_NAME_HAS_HIGHLIGHT)
  private Boolean hasHighlight;

  public static final String SERIALIZED_NAME_HIGHLIGHT = "highlight";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHT)
  private String highlight;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private List<String> label = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private String match;

  public static final String SERIALIZED_NAME_TAXON = "taxon";
  @SerializedName(SERIALIZED_NAME_TAXON)
  private String taxon;

  public static final String SERIALIZED_NAME_TAXON_LABEL = "taxon_label";
  @SerializedName(SERIALIZED_NAME_TAXON_LABEL)
  private String taxonLabel;

  public AutocompleteResult() {
  }

  public AutocompleteResult category(List<String> category) {
    this.category = category;
    return this;
  }

  public AutocompleteResult addCategoryItem(String categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * node categories
   * @return category
   */
  @javax.annotation.Nullable
  public List<String> getCategory() {
    return category;
  }

  public void setCategory(List<String> category) {
    this.category = category;
  }


  public AutocompleteResult equivalentIds(List<String> equivalentIds) {
    this.equivalentIds = equivalentIds;
    return this;
  }

  public AutocompleteResult addEquivalentIdsItem(String equivalentIdsItem) {
    if (this.equivalentIds == null) {
      this.equivalentIds = new ArrayList<>();
    }
    this.equivalentIds.add(equivalentIdsItem);
    return this;
  }

  /**
   * Equivalent IDs
   * @return equivalentIds
   */
  @javax.annotation.Nullable
  public List<String> getEquivalentIds() {
    return equivalentIds;
  }

  public void setEquivalentIds(List<String> equivalentIds) {
    this.equivalentIds = equivalentIds;
  }


  public AutocompleteResult hasHighlight(Boolean hasHighlight) {
    this.hasHighlight = hasHighlight;
    return this;
  }

  /**
   * True if highlight can be interpreted as html, else False
   * @return hasHighlight
   */
  @javax.annotation.Nullable
  public Boolean getHasHighlight() {
    return hasHighlight;
  }

  public void setHasHighlight(Boolean hasHighlight) {
    this.hasHighlight = hasHighlight;
  }


  public AutocompleteResult highlight(String highlight) {
    this.highlight = highlight;
    return this;
  }

  /**
   * solr highlight
   * @return highlight
   */
  @javax.annotation.Nullable
  public String getHighlight() {
    return highlight;
  }

  public void setHighlight(String highlight) {
    this.highlight = highlight;
  }


  public AutocompleteResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * curie formatted id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AutocompleteResult label(List<String> label) {
    this.label = label;
    return this;
  }

  public AutocompleteResult addLabelItem(String labelItem) {
    if (this.label == null) {
      this.label = new ArrayList<>();
    }
    this.label.add(labelItem);
    return this;
  }

  /**
   * primary label (rdfs:label)
   * @return label
   */
  @javax.annotation.Nullable
  public List<String> getLabel() {
    return label;
  }

  public void setLabel(List<String> label) {
    this.label = label;
  }


  public AutocompleteResult match(String match) {
    this.match = match;
    return this;
  }

  /**
   * matched part of document (may be primary label, synonym, id, etc)
   * @return match
   */
  @javax.annotation.Nullable
  public String getMatch() {
    return match;
  }

  public void setMatch(String match) {
    this.match = match;
  }


  public AutocompleteResult taxon(String taxon) {
    this.taxon = taxon;
    return this;
  }

  /**
   * taxon as NCBITaxon curie
   * @return taxon
   */
  @javax.annotation.Nullable
  public String getTaxon() {
    return taxon;
  }

  public void setTaxon(String taxon) {
    this.taxon = taxon;
  }


  public AutocompleteResult taxonLabel(String taxonLabel) {
    this.taxonLabel = taxonLabel;
    return this;
  }

  /**
   * taxon label
   * @return taxonLabel
   */
  @javax.annotation.Nullable
  public String getTaxonLabel() {
    return taxonLabel;
  }

  public void setTaxonLabel(String taxonLabel) {
    this.taxonLabel = taxonLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutocompleteResult autocompleteResult = (AutocompleteResult) o;
    return Objects.equals(this.category, autocompleteResult.category) &&
        Objects.equals(this.equivalentIds, autocompleteResult.equivalentIds) &&
        Objects.equals(this.hasHighlight, autocompleteResult.hasHighlight) &&
        Objects.equals(this.highlight, autocompleteResult.highlight) &&
        Objects.equals(this.id, autocompleteResult.id) &&
        Objects.equals(this.label, autocompleteResult.label) &&
        Objects.equals(this.match, autocompleteResult.match) &&
        Objects.equals(this.taxon, autocompleteResult.taxon) &&
        Objects.equals(this.taxonLabel, autocompleteResult.taxonLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, equivalentIds, hasHighlight, highlight, id, label, match, taxon, taxonLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutocompleteResult {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    equivalentIds: ").append(toIndentedString(equivalentIds)).append("\n");
    sb.append("    hasHighlight: ").append(toIndentedString(hasHighlight)).append("\n");
    sb.append("    highlight: ").append(toIndentedString(highlight)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    taxon: ").append(toIndentedString(taxon)).append("\n");
    sb.append("    taxonLabel: ").append(toIndentedString(taxonLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("equivalent_ids");
    openapiFields.add("has_highlight");
    openapiFields.add("highlight");
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("match");
    openapiFields.add("taxon");
    openapiFields.add("taxon_label");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutocompleteResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutocompleteResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutocompleteResult is not found in the empty JSON string", AutocompleteResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutocompleteResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutocompleteResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull() && !jsonObj.get("category").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("equivalent_ids") != null && !jsonObj.get("equivalent_ids").isJsonNull() && !jsonObj.get("equivalent_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `equivalent_ids` to be an array in the JSON string but got `%s`", jsonObj.get("equivalent_ids").toString()));
      }
      if ((jsonObj.get("highlight") != null && !jsonObj.get("highlight").isJsonNull()) && !jsonObj.get("highlight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highlight").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull() && !jsonObj.get("label").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be an array in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("match") != null && !jsonObj.get("match").isJsonNull()) && !jsonObj.get("match").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `match` to be a primitive type in the JSON string but got `%s`", jsonObj.get("match").toString()));
      }
      if ((jsonObj.get("taxon") != null && !jsonObj.get("taxon").isJsonNull()) && !jsonObj.get("taxon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxon").toString()));
      }
      if ((jsonObj.get("taxon_label") != null && !jsonObj.get("taxon_label").isJsonNull()) && !jsonObj.get("taxon_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxon_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxon_label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutocompleteResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutocompleteResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutocompleteResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutocompleteResult.class));

       return (TypeAdapter<T>) new TypeAdapter<AutocompleteResult>() {
           @Override
           public void write(JsonWriter out, AutocompleteResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutocompleteResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutocompleteResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutocompleteResult
   * @throws IOException if the JSON string is invalid with respect to AutocompleteResult
   */
  public static AutocompleteResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutocompleteResult.class);
  }

  /**
   * Convert an instance of AutocompleteResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

