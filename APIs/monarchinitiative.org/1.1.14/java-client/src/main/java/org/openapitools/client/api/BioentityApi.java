/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Association;
import org.openapitools.client.model.AssociationResults;
import org.openapitools.client.model.BioObject;
import org.openapitools.client.model.D2PAssociationResults;
import org.openapitools.client.model.NamedObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BioentityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BioentityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BioentityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAnatomyGeneAssociations
     * @param id CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnatomyGeneAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/anatomy/{id}/genes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnatomyGeneAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnatomyGeneAssociations(Async)");
        }

        return getAnatomyGeneAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genes associated with a given anatomy
     * 
     * @param id CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getAnatomyGeneAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getAnatomyGeneAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genes associated with a given anatomy
     * 
     * @param id CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getAnatomyGeneAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getAnatomyGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genes associated with a given anatomy (asynchronously)
     * 
     * @param id CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnatomyGeneAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnatomyGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnatomyGeneByTaxonAssociations
     * @param taxid Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
     * @param id CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAnatomyGeneByTaxonAssociationsCall(String taxid, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/anatomy/{id}/genes/{taxid}"
            .replace("{" + "taxid" + "}", localVarApiClient.escapeString(taxid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnatomyGeneByTaxonAssociationsValidateBeforeCall(String taxid, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxid' is set
        if (taxid == null) {
            throw new ApiException("Missing the required parameter 'taxid' when calling getAnatomyGeneByTaxonAssociations(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnatomyGeneByTaxonAssociations(Async)");
        }

        return getAnatomyGeneByTaxonAssociationsCall(taxid, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns gene IDs for all genes associated with a given anatomy, filtered by taxon
     * For example, + NCBITaxon:10090 (mouse)
     * @param taxid Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
     * @param id CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void getAnatomyGeneByTaxonAssociations(String taxid, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        getAnatomyGeneByTaxonAssociationsWithHttpInfo(taxid, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
    }

    /**
     * Returns gene IDs for all genes associated with a given anatomy, filtered by taxon
     * For example, + NCBITaxon:10090 (mouse)
     * @param taxid Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
     * @param id CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> getAnatomyGeneByTaxonAssociationsWithHttpInfo(String taxid, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getAnatomyGeneByTaxonAssociationsValidateBeforeCall(taxid, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns gene IDs for all genes associated with a given anatomy, filtered by taxon (asynchronously)
     * For example, + NCBITaxon:10090 (mouse)
     * @param taxid Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
     * @param id CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAnatomyGeneByTaxonAssociationsAsync(String taxid, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnatomyGeneByTaxonAssociationsValidateBeforeCall(taxid, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCaseDiseaseAssociations
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCaseDiseaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/case/{id}/diseases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseDiseaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCaseDiseaseAssociations(Async)");
        }

        return getCaseDiseaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns diseases associated with a case
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getCaseDiseaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getCaseDiseaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns diseases associated with a case
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getCaseDiseaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getCaseDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns diseases associated with a case (asynchronously)
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCaseDiseaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCaseGenotypeAssociations
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCaseGenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/case/{id}/genotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseGenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCaseGenotypeAssociations(Async)");
        }

        return getCaseGenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns genotypes associated with a case
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getCaseGenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getCaseGenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns genotypes associated with a case
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getCaseGenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getCaseGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genotypes associated with a case (asynchronously)
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCaseGenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCaseModelAssociations
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCaseModelAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/case/{id}/models"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseModelAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCaseModelAssociations(Async)");
        }

        return getCaseModelAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns models associated with a case
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getCaseModelAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getCaseModelAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns models associated with a case
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getCaseModelAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getCaseModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns models associated with a case (asynchronously)
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCaseModelAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCasePhenotypeAssociations
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCasePhenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/case/{id}/phenotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCasePhenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCasePhenotypeAssociations(Async)");
        }

        return getCasePhenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns phenotypes associated with a case
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getCasePhenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getCasePhenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns phenotypes associated with a case
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getCasePhenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getCasePhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns phenotypes associated with a case (asynchronously)
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCasePhenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCasePhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCaseVariantAssociations
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCaseVariantAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/case/{id}/variants"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseVariantAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCaseVariantAssociations(Async)");
        }

        return getCaseVariantAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns variants associated with a case
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getCaseVariantAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getCaseVariantAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns variants associated with a case
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getCaseVariantAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getCaseVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns variants associated with a case (asynchronously)
     * 
     * @param id CURIE identifier for a case (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCaseVariantAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiseaseCaseAssociations
     * @param id CURIE identifier of disease, e.g. MONDO:0007103, MONDO:0010918. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseCaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/disease/{id}/cases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiseaseCaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiseaseCaseAssociations(Async)");
        }

        return getDiseaseCaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns cases associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. MONDO:0007103, MONDO:0010918. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getDiseaseCaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getDiseaseCaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns cases associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. MONDO:0007103, MONDO:0010918. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getDiseaseCaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getDiseaseCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns cases associated with a disease (asynchronously)
     * 
     * @param id CURIE identifier of disease, e.g. MONDO:0007103, MONDO:0010918. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseCaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiseaseCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiseaseGeneAssociations
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param associationType Additional filters: causal, non_causal, both (optional, default to both)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseGeneAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String associationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/disease/{id}/genes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (associationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("association_type", associationType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiseaseGeneAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String associationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiseaseGeneAssociations(Async)");
        }

        return getDiseaseGeneAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, associationType, _callback);

    }

    /**
     * Returns genes associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param associationType Additional filters: causal, non_causal, both (optional, default to both)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getDiseaseGeneAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String associationType) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getDiseaseGeneAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, associationType);
        return localVarResp.getData();
    }

    /**
     * Returns genes associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param associationType Additional filters: causal, non_causal, both (optional, default to both)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getDiseaseGeneAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String associationType) throws ApiException {
        okhttp3.Call localVarCall = getDiseaseGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, associationType, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genes associated with a disease (asynchronously)
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param associationType Additional filters: causal, non_causal, both (optional, default to both)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseGeneAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String associationType, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiseaseGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, associationType, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiseaseGenotypeAssociations
     * @param id CURIE identifier of disease, e.g. Orphanet:399158, DOID:0080008. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseGenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/disease/{id}/genotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiseaseGenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiseaseGenotypeAssociations(Async)");
        }

        return getDiseaseGenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genotypes associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. Orphanet:399158, DOID:0080008. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getDiseaseGenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getDiseaseGenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genotypes associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. Orphanet:399158, DOID:0080008. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getDiseaseGenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getDiseaseGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genotypes associated with a disease (asynchronously)
     * 
     * @param id CURIE identifier of disease, e.g. Orphanet:399158, DOID:0080008. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseGenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiseaseGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiseaseModelAssociations
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseModelAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/disease/{id}/models"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiseaseModelAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiseaseModelAssociations(Async)");
        }

        return getDiseaseModelAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns associations to models of the disease
     * In the association object returned, the subject will be the disease, and the object will be the model. The model may be a gene or genetic element.  If the query disease is a general class, the association subject may be to a specific disease.  In some cases the association will be *direct*, for example if a paper asserts a genotype is a model of a disease.  In other cases, the association will be *indirect*, for example, chaining over orthology. In these cases the chain will be reflected in the *evidence graph*  * TODO: provide hook into owlsim for dynamic computation of models by similarity
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getDiseaseModelAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getDiseaseModelAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns associations to models of the disease
     * In the association object returned, the subject will be the disease, and the object will be the model. The model may be a gene or genetic element.  If the query disease is a general class, the association subject may be to a specific disease.  In some cases the association will be *direct*, for example if a paper asserts a genotype is a model of a disease.  In other cases, the association will be *indirect*, for example, chaining over orthology. In these cases the chain will be reflected in the *evidence graph*  * TODO: provide hook into owlsim for dynamic computation of models by similarity
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getDiseaseModelAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getDiseaseModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns associations to models of the disease (asynchronously)
     * In the association object returned, the subject will be the disease, and the object will be the model. The model may be a gene or genetic element.  If the query disease is a general class, the association subject may be to a specific disease.  In some cases the association will be *direct*, for example if a paper asserts a genotype is a model of a disease.  In other cases, the association will be *indirect*, for example, chaining over orthology. In these cases the chain will be reflected in the *evidence graph*  * TODO: provide hook into owlsim for dynamic computation of models by similarity
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseModelAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiseaseModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiseaseModelTaxonAssociations
     * @param taxon CURIE of organism taxonomy class to constrain models, e.g NCBITaxon:10090 (M. musculus).   Higher level taxa may be used (required)
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getDiseaseModelTaxonAssociationsCall(String taxon, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/disease/{id}/models/{taxon}"
            .replace("{" + "taxon" + "}", localVarApiClient.escapeString(taxon.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiseaseModelTaxonAssociationsValidateBeforeCall(String taxon, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxon' is set
        if (taxon == null) {
            throw new ApiException("Missing the required parameter 'taxon' when calling getDiseaseModelTaxonAssociations(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiseaseModelTaxonAssociations(Async)");
        }

        return getDiseaseModelTaxonAssociationsCall(taxon, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns associations to models of the disease constrained by taxon
     * See /disease/&lt;id&gt;/models route for full details
     * @param taxon CURIE of organism taxonomy class to constrain models, e.g NCBITaxon:10090 (M. musculus).   Higher level taxa may be used (required)
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AssociationResults getDiseaseModelTaxonAssociations(String taxon, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getDiseaseModelTaxonAssociationsWithHttpInfo(taxon, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns associations to models of the disease constrained by taxon
     * See /disease/&lt;id&gt;/models route for full details
     * @param taxon CURIE of organism taxonomy class to constrain models, e.g NCBITaxon:10090 (M. musculus).   Higher level taxa may be used (required)
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AssociationResults> getDiseaseModelTaxonAssociationsWithHttpInfo(String taxon, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getDiseaseModelTaxonAssociationsValidateBeforeCall(taxon, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns associations to models of the disease constrained by taxon (asynchronously)
     * See /disease/&lt;id&gt;/models route for full details
     * @param taxon CURIE of organism taxonomy class to constrain models, e.g NCBITaxon:10090 (M. musculus).   Higher level taxa may be used (required)
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getDiseaseModelTaxonAssociationsAsync(String taxon, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiseaseModelTaxonAssociationsValidateBeforeCall(taxon, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiseasePathwayAssociations
     * @param id CURIE identifier of disease, e.g. DOID:4450. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseasePathwayAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/disease/{id}/pathways"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiseasePathwayAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiseasePathwayAssociations(Async)");
        }

        return getDiseasePathwayAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns pathways associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. DOID:4450. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getDiseasePathwayAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getDiseasePathwayAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns pathways associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. DOID:4450. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getDiseasePathwayAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getDiseasePathwayAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns pathways associated with a disease (asynchronously)
     * 
     * @param id CURIE identifier of disease, e.g. DOID:4450. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseasePathwayAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiseasePathwayAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiseasePhenotypeAssociations
     * @param id CURIE identifier of disease, e.g. OMIM:605543, Orphanet:1934, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseasePhenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/disease/{id}/phenotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiseasePhenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiseasePhenotypeAssociations(Async)");
        }

        return getDiseasePhenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns phenotypes associated with disease
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, Orphanet:1934, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return D2PAssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public D2PAssociationResults getDiseasePhenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<D2PAssociationResults> localVarResp = getDiseasePhenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns phenotypes associated with disease
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, Orphanet:1934, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;D2PAssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<D2PAssociationResults> getDiseasePhenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getDiseasePhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<D2PAssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns phenotypes associated with disease (asynchronously)
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, Orphanet:1934, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseasePhenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<D2PAssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiseasePhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<D2PAssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiseasePublicationAssociations
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseasePublicationAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/disease/{id}/publications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiseasePublicationAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiseasePublicationAssociations(Async)");
        }

        return getDiseasePublicationAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns publications associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getDiseasePublicationAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getDiseasePublicationAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns publications associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getDiseasePublicationAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getDiseasePublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns publications associated with a disease (asynchronously)
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseasePublicationAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiseasePublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiseaseSubstanceAssociations
     * @param id CURIE identifier of disease, e.g. DOID:2841 (asthma). Equivalent IDs not yet supported (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseSubstanceAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/disease/{id}/treatment"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiseaseSubstanceAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiseaseSubstanceAssociations(Async)");
        }

        return getDiseaseSubstanceAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns substances associated with a disease
     * e.g. drugs or small molecules used to treat
     * @param id CURIE identifier of disease, e.g. DOID:2841 (asthma). Equivalent IDs not yet supported (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getDiseaseSubstanceAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        getDiseaseSubstanceAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
    }

    /**
     * Returns substances associated with a disease
     * e.g. drugs or small molecules used to treat
     * @param id CURIE identifier of disease, e.g. DOID:2841 (asthma). Equivalent IDs not yet supported (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDiseaseSubstanceAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getDiseaseSubstanceAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns substances associated with a disease (asynchronously)
     * e.g. drugs or small molecules used to treat
     * @param id CURIE identifier of disease, e.g. DOID:2841 (asthma). Equivalent IDs not yet supported (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseSubstanceAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiseaseSubstanceAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiseaseVariantAssociations
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseVariantAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/disease/{id}/variants"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiseaseVariantAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiseaseVariantAssociations(Async)");
        }

        return getDiseaseVariantAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns variants associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getDiseaseVariantAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getDiseaseVariantAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns variants associated with a disease
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getDiseaseVariantAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getDiseaseVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns variants associated with a disease (asynchronously)
     * 
     * @param id CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiseaseVariantAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiseaseVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFunctionAssociations
     * @param id CURIE identifier of a function term (e.g. GO:0044598) (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunctionAssociationsCall(String id, Integer start, Integer rows, List<String> evidence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/function/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (evidence != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "evidence", evidence));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFunctionAssociationsValidateBeforeCall(String id, Integer start, Integer rows, List<String> evidence, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFunctionAssociations(Async)");
        }

        return getFunctionAssociationsCall(id, start, rows, evidence, _callback);

    }

    /**
     * Returns annotations associated to a function term
     * 
     * @param id CURIE identifier of a function term (e.g. GO:0044598) (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getFunctionAssociations(String id, Integer start, Integer rows, List<String> evidence) throws ApiException {
        getFunctionAssociationsWithHttpInfo(id, start, rows, evidence);
    }

    /**
     * Returns annotations associated to a function term
     * 
     * @param id CURIE identifier of a function term (e.g. GO:0044598) (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getFunctionAssociationsWithHttpInfo(String id, Integer start, Integer rows, List<String> evidence) throws ApiException {
        okhttp3.Call localVarCall = getFunctionAssociationsValidateBeforeCall(id, start, rows, evidence, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns annotations associated to a function term (asynchronously)
     * 
     * @param id CURIE identifier of a function term (e.g. GO:0044598) (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunctionAssociationsAsync(String id, Integer start, Integer rows, List<String> evidence, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFunctionAssociationsValidateBeforeCall(id, start, rows, evidence, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFunctionGeneAssociations
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param relationshipType relationship type (&#39;involved_in&#39;, &#39;involved_in_regulation_of&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to involved_in)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunctionGeneAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String relationshipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/function/{id}/genes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (relationshipType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relationship_type", relationshipType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFunctionGeneAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String relationshipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFunctionGeneAssociations(Async)");
        }

        return getFunctionGeneAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, relationshipType, _callback);

    }

    /**
     * Returns genes associated to a GO term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param relationshipType relationship type (&#39;involved_in&#39;, &#39;involved_in_regulation_of&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to involved_in)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getFunctionGeneAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String relationshipType) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getFunctionGeneAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, relationshipType);
        return localVarResp.getData();
    }

    /**
     * Returns genes associated to a GO term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param relationshipType relationship type (&#39;involved_in&#39;, &#39;involved_in_regulation_of&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to involved_in)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getFunctionGeneAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String relationshipType) throws ApiException {
        okhttp3.Call localVarCall = getFunctionGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, relationshipType, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genes associated to a GO term (asynchronously)
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param relationshipType relationship type (&#39;involved_in&#39;, &#39;involved_in_regulation_of&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to involved_in)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunctionGeneAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String relationshipType, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFunctionGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, relationshipType, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFunctionPublicationAssociations
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunctionPublicationAssociationsCall(String id, Integer start, Integer rows, List<String> evidence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/function/{id}/publications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (evidence != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "evidence", evidence));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFunctionPublicationAssociationsValidateBeforeCall(String id, Integer start, Integer rows, List<String> evidence, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFunctionPublicationAssociations(Async)");
        }

        return getFunctionPublicationAssociationsCall(id, start, rows, evidence, _callback);

    }

    /**
     * Returns publications associated to a GO term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getFunctionPublicationAssociations(String id, Integer start, Integer rows, List<String> evidence) throws ApiException {
        getFunctionPublicationAssociationsWithHttpInfo(id, start, rows, evidence);
    }

    /**
     * Returns publications associated to a GO term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getFunctionPublicationAssociationsWithHttpInfo(String id, Integer start, Integer rows, List<String> evidence) throws ApiException {
        okhttp3.Call localVarCall = getFunctionPublicationAssociationsValidateBeforeCall(id, start, rows, evidence, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns publications associated to a GO term (asynchronously)
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunctionPublicationAssociationsAsync(String id, Integer start, Integer rows, List<String> evidence, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFunctionPublicationAssociationsValidateBeforeCall(id, start, rows, evidence, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFunctionTaxonAssociations
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunctionTaxonAssociationsCall(String id, Integer start, Integer rows, List<String> evidence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/function/{id}/taxons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (evidence != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "evidence", evidence));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFunctionTaxonAssociationsValidateBeforeCall(String id, Integer start, Integer rows, List<String> evidence, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFunctionTaxonAssociations(Async)");
        }

        return getFunctionTaxonAssociationsCall(id, start, rows, evidence, _callback);

    }

    /**
     * Returns taxons associated to a GO term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getFunctionTaxonAssociations(String id, Integer start, Integer rows, List<String> evidence) throws ApiException {
        getFunctionTaxonAssociationsWithHttpInfo(id, start, rows, evidence);
    }

    /**
     * Returns taxons associated to a GO term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getFunctionTaxonAssociationsWithHttpInfo(String id, Integer start, Integer rows, List<String> evidence) throws ApiException {
        okhttp3.Call localVarCall = getFunctionTaxonAssociationsValidateBeforeCall(id, start, rows, evidence, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns taxons associated to a GO term (asynchronously)
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param start beginning row (optional, default to 0)
     * @param rows number of rows (optional, default to 100)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunctionTaxonAssociationsAsync(String id, Integer start, Integer rows, List<String> evidence, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFunctionTaxonAssociationsValidateBeforeCall(id, start, rows, evidence, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneAnatomyAssociations
     * @param id CURIE identifier of gene, e.g. NCBIGene:13434 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneAnatomyAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/anatomy"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneAnatomyAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneAnatomyAssociations(Async)");
        }

        return getGeneAnatomyAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns anatomical entities associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:13434 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneAnatomyAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneAnatomyAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns anatomical entities associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:13434 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneAnatomyAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGeneAnatomyAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns anatomical entities associated with a gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:13434 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneAnatomyAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneAnatomyAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneCaseAssociations
     * @param id CURIE identifier of gene, e.g. HGNC:613, HGNC:11025 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneCaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/cases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneCaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneCaseAssociations(Async)");
        }

        return getGeneCaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns cases associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. HGNC:613, HGNC:11025 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneCaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneCaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns cases associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. HGNC:613, HGNC:11025 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneCaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getGeneCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns cases associated with a gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. HGNC:613, HGNC:11025 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneCaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneDiseaseAssociations
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param associationType Additional filters: causal, non_causal, both (optional, default to both)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneDiseaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String associationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/diseases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (associationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("association_type", associationType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneDiseaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String associationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneDiseaseAssociations(Async)");
        }

        return getGeneDiseaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, associationType, _callback);

    }

    /**
     * Returns diseases associated with gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param associationType Additional filters: causal, non_causal, both (optional, default to both)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneDiseaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String associationType) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneDiseaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, associationType);
        return localVarResp.getData();
    }

    /**
     * Returns diseases associated with gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param associationType Additional filters: causal, non_causal, both (optional, default to both)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneDiseaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String associationType) throws ApiException {
        okhttp3.Call localVarCall = getGeneDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, associationType, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns diseases associated with gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param associationType Additional filters: causal, non_causal, both (optional, default to both)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneDiseaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, String associationType, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, associationType, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneExpressionAssociations
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneExpressionAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/expression/anatomy"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneExpressionAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneExpressionAssociations(Async)");
        }

        return getGeneExpressionAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns expression events for a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneExpressionAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneExpressionAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns expression events for a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneExpressionAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGeneExpressionAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns expression events for a gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneExpressionAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneExpressionAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneFunctionAssociations
     * @param id id, e.g. NCBIGene:6469. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneFunctionAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/function"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneFunctionAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneFunctionAssociations(Async)");
        }

        return getGeneFunctionAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns function associations for a gene
     * IMPLEMENTATION DETAILS ----------------------  Note: currently this is implemented as a query to the GO/AmiGO solr instance. This directly supports IDs such as:   - ZFIN e.g. ZFIN:ZDB-GENE-050417-357  Note that the AmiGO GOlr natively stores MGI annotations to MGI:MGI:nn. However, the standard for biolink is MGI:nnnn, so you should use this (will be transparently mapped to legacy ID)  Additionally, for some species such as Human, GO has the annotation attached to the UniProt ID. Again, this should be transparently handled; e.g. you can use NCBIGene:6469, and this will be mapped behind the scenes for querying.
     * @param id id, e.g. NCBIGene:6469. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneFunctionAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneFunctionAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns function associations for a gene
     * IMPLEMENTATION DETAILS ----------------------  Note: currently this is implemented as a query to the GO/AmiGO solr instance. This directly supports IDs such as:   - ZFIN e.g. ZFIN:ZDB-GENE-050417-357  Note that the AmiGO GOlr natively stores MGI annotations to MGI:MGI:nn. However, the standard for biolink is MGI:nnnn, so you should use this (will be transparently mapped to legacy ID)  Additionally, for some species such as Human, GO has the annotation attached to the UniProt ID. Again, this should be transparently handled; e.g. you can use NCBIGene:6469, and this will be mapped behind the scenes for querying.
     * @param id id, e.g. NCBIGene:6469. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneFunctionAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getGeneFunctionAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns function associations for a gene (asynchronously)
     * IMPLEMENTATION DETAILS ----------------------  Note: currently this is implemented as a query to the GO/AmiGO solr instance. This directly supports IDs such as:   - ZFIN e.g. ZFIN:ZDB-GENE-050417-357  Note that the AmiGO GOlr natively stores MGI annotations to MGI:MGI:nn. However, the standard for biolink is MGI:nnnn, so you should use this (will be transparently mapped to legacy ID)  Additionally, for some species such as Human, GO has the annotation attached to the UniProt ID. Again, this should be transparently handled; e.g. you can use NCBIGene:6469, and this will be mapped behind the scenes for querying.
     * @param id id, e.g. NCBIGene:6469. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneFunctionAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneFunctionAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneGenotypeAssociations
     * @param id CURIE identifier of gene, e.g. ZFIN:ZDB-GENE-980526-166 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneGenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/genotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneGenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneGenotypeAssociations(Async)");
        }

        return getGeneGenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genotypes associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. ZFIN:ZDB-GENE-980526-166 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneGenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneGenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genotypes associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. ZFIN:ZDB-GENE-980526-166 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneGenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGeneGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genotypes associated with a gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. ZFIN:ZDB-GENE-980526-166 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneGenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneHomologAssociations
     * @param id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon Taxon CURIE of homolog, e.g. NCBITaxon:9606 (Can be an ancestral node in the ontology; includes inferred associations by default) (optional)
     * @param homologyType P (paralog), O (Ortholog) or LDO (least-diverged ortholog) (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneHomologAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, String homologyType, Boolean directTaxon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/homologs"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (homologyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("homology_type", homologyType));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneHomologAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, String homologyType, Boolean directTaxon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneHomologAssociations(Async)");
        }

        return getGeneHomologAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, homologyType, directTaxon, _callback);

    }

    /**
     * Returns homologs for a gene
     * 
     * @param id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon Taxon CURIE of homolog, e.g. NCBITaxon:9606 (Can be an ancestral node in the ontology; includes inferred associations by default) (optional)
     * @param homologyType P (paralog), O (Ortholog) or LDO (least-diverged ortholog) (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneHomologAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, String homologyType, Boolean directTaxon) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneHomologAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, homologyType, directTaxon);
        return localVarResp.getData();
    }

    /**
     * Returns homologs for a gene
     * 
     * @param id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon Taxon CURIE of homolog, e.g. NCBITaxon:9606 (Can be an ancestral node in the ontology; includes inferred associations by default) (optional)
     * @param homologyType P (paralog), O (Ortholog) or LDO (least-diverged ortholog) (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneHomologAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, String homologyType, Boolean directTaxon) throws ApiException {
        okhttp3.Call localVarCall = getGeneHomologAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, homologyType, directTaxon, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns homologs for a gene (asynchronously)
     * 
     * @param id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon Taxon CURIE of homolog, e.g. NCBITaxon:9606 (Can be an ancestral node in the ontology; includes inferred associations by default) (optional)
     * @param homologyType P (paralog), O (Ortholog) or LDO (least-diverged ortholog) (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneHomologAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, String homologyType, Boolean directTaxon, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneHomologAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, homologyType, directTaxon, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneInteractions
     * @param id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneInteractionsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/interactions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneInteractionsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneInteractions(Async)");
        }

        return getGeneInteractionsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns interactions for a gene
     * 
     * @param id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneInteractions(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneInteractionsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns interactions for a gene
     * 
     * @param id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneInteractionsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGeneInteractionsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns interactions for a gene (asynchronously)
     * 
     * @param id id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneInteractionsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneInteractionsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneModelAssociations
     * @param id CURIE identifier of gene, e.g. NCBIGene:17988 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneModelAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/models"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneModelAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneModelAssociations(Async)");
        }

        return getGeneModelAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns models associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:17988 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneModelAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneModelAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns models associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:17988 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneModelAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGeneModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns models associated with a gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:17988 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneModelAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneOrthologDiseaseAssociations
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneOrthologDiseaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/ortholog/diseases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneOrthologDiseaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneOrthologDiseaseAssociations(Async)");
        }

        return getGeneOrthologDiseaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Return diseases associated with orthologs of a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneOrthologDiseaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneOrthologDiseaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Return diseases associated with orthologs of a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneOrthologDiseaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGeneOrthologDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return diseases associated with orthologs of a gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneOrthologDiseaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneOrthologDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneOrthologPhenotypeAssociations
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneOrthologPhenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/ortholog/phenotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneOrthologPhenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneOrthologPhenotypeAssociations(Async)");
        }

        return getGeneOrthologPhenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Return phenotypes associated with orthologs for a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneOrthologPhenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneOrthologPhenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Return phenotypes associated with orthologs for a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneOrthologPhenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGeneOrthologPhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return phenotypes associated with orthologs for a gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneOrthologPhenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneOrthologPhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenePathwayAssociations
     * @param id CURIE identifier of gene, e.g. NCBIGene:50846. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenePathwayAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/pathways"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenePathwayAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenePathwayAssociations(Async)");
        }

        return getGenePathwayAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns pathways associated with gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:50846. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenePathwayAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenePathwayAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns pathways associated with gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:50846. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenePathwayAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGenePathwayAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns pathways associated with gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:50846. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenePathwayAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenePathwayAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenePhenotypeAssociations
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenePhenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/phenotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenePhenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenePhenotypeAssociations(Async)");
        }

        return getGenePhenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns phenotypes associated with gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenePhenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenePhenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns phenotypes associated with gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenePhenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGenePhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns phenotypes associated with gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenePhenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenePhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenePublicationAssociations
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenePublicationAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/publications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenePublicationAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenePublicationAssociations(Async)");
        }

        return getGenePublicationAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns publications associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenePublicationAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenePublicationAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns publications associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenePublicationAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGenePublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns publications associated with a gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. NCBIGene:4750 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenePublicationAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenePublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneVariantAssociations
     * @param id CURIE identifier of gene, e.g. HGNC:10896 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneVariantAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/gene/{id}/variants"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneVariantAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGeneVariantAssociations(Async)");
        }

        return getGeneVariantAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns variants associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. HGNC:10896 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGeneVariantAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGeneVariantAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns variants associated with a gene
     * 
     * @param id CURIE identifier of gene, e.g. HGNC:10896 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGeneVariantAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGeneVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns variants associated with a gene (asynchronously)
     * 
     * @param id CURIE identifier of gene, e.g. HGNC:10896 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneVariantAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenericAssociations
     * @param id  (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenericAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/{id}/associations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenericAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenericAssociations(Async)");
        }

        return getGenericAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns associations for an entity regardless of the type
     * 
     * @param id  (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenericAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenericAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns associations for an entity regardless of the type
     * 
     * @param id  (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenericAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGenericAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns associations for an entity regardless of the type (asynchronously)
     * 
     * @param id  (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenericAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenericAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenericObject
     * @param id id, e.g. NCBIGene:84570 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenericObjectCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenericObjectValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenericObject(Async)");
        }

        return getGenericObjectCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns basic info on object of any type
     * 
     * @param id id, e.g. NCBIGene:84570 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return BioObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BioObject getGenericObject(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<BioObject> localVarResp = getGenericObjectWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns basic info on object of any type
     * 
     * @param id id, e.g. NCBIGene:84570 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;BioObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BioObject> getGenericObjectWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getGenericObjectValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<BioObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns basic info on object of any type (asynchronously)
     * 
     * @param id id, e.g. NCBIGene:84570 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenericObjectAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<BioObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenericObjectValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<BioObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenericObjectByType
     * @param type bioentity type (required)
     * @param id id, e.g. NCBIGene:84570 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param getAssociationCounts Get association counts (optional, default to false)
     * @param distinctCounts Get distinct counts for associations (to be used in conjunction with &#39;get_association_counts&#39; parameter) (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenericObjectByTypeCall(String type, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, Boolean getAssociationCounts, Boolean distinctCounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/{type}/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (getAssociationCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("get_association_counts", getAssociationCounts));
        }

        if (distinctCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distinct_counts", distinctCounts));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenericObjectByTypeValidateBeforeCall(String type, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, Boolean getAssociationCounts, Boolean distinctCounts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getGenericObjectByType(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenericObjectByType(Async)");
        }

        return getGenericObjectByTypeCall(type, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, getAssociationCounts, distinctCounts, _callback);

    }

    /**
     * Return basic info on an object for a given type
     * 
     * @param type bioentity type (required)
     * @param id id, e.g. NCBIGene:84570 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param getAssociationCounts Get association counts (optional, default to false)
     * @param distinctCounts Get distinct counts for associations (to be used in conjunction with &#39;get_association_counts&#39; parameter) (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getGenericObjectByType(String type, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, Boolean getAssociationCounts, Boolean distinctCounts) throws ApiException {
        getGenericObjectByTypeWithHttpInfo(type, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, getAssociationCounts, distinctCounts);
    }

    /**
     * Return basic info on an object for a given type
     * 
     * @param type bioentity type (required)
     * @param id id, e.g. NCBIGene:84570 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param getAssociationCounts Get association counts (optional, default to false)
     * @param distinctCounts Get distinct counts for associations (to be used in conjunction with &#39;get_association_counts&#39; parameter) (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getGenericObjectByTypeWithHttpInfo(String type, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, Boolean getAssociationCounts, Boolean distinctCounts) throws ApiException {
        okhttp3.Call localVarCall = getGenericObjectByTypeValidateBeforeCall(type, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, getAssociationCounts, distinctCounts, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return basic info on an object for a given type (asynchronously)
     * 
     * @param type bioentity type (required)
     * @param id id, e.g. NCBIGene:84570 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param getAssociationCounts Get association counts (optional, default to false)
     * @param distinctCounts Get distinct counts for associations (to be used in conjunction with &#39;get_association_counts&#39; parameter) (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenericObjectByTypeAsync(String type, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, Boolean getAssociationCounts, Boolean distinctCounts, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenericObjectByTypeValidateBeforeCall(type, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, getAssociationCounts, distinctCounts, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenotypeCaseAssociations
     * @param id CURIE identifier of genotype, e.g. dbSNPIndividual:10440, dbSNPIndividual:22633 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeCaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/genotype/{id}/cases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenotypeCaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenotypeCaseAssociations(Async)");
        }

        return getGenotypeCaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns cases associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. dbSNPIndividual:10440, dbSNPIndividual:22633 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenotypeCaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenotypeCaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns cases associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. dbSNPIndividual:10440, dbSNPIndividual:22633 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenotypeCaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getGenotypeCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns cases associated with a genotype (asynchronously)
     * 
     * @param id CURIE identifier of genotype, e.g. dbSNPIndividual:10440, dbSNPIndividual:22633 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeCaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenotypeCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenotypeDiseaseAssociations
     * @param id CURIE identifier of genotype, e.g. dbSNPIndividual:11441 (if non-human will return models) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeDiseaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/genotype/{id}/diseases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenotypeDiseaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenotypeDiseaseAssociations(Async)");
        }

        return getGenotypeDiseaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns diseases associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. dbSNPIndividual:11441 (if non-human will return models) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenotypeDiseaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenotypeDiseaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns diseases associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. dbSNPIndividual:11441 (if non-human will return models) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenotypeDiseaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGenotypeDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns diseases associated with a genotype (asynchronously)
     * 
     * @param id CURIE identifier of genotype, e.g. dbSNPIndividual:11441 (if non-human will return models) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeDiseaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenotypeDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenotypeGeneAssociations
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeGeneAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/genotype/{id}/genes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenotypeGeneAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenotypeGeneAssociations(Async)");
        }

        return getGenotypeGeneAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genes associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenotypeGeneAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenotypeGeneAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genes associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenotypeGeneAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGenotypeGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genes associated with a genotype (asynchronously)
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeGeneAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenotypeGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenotypeGenotypeAssociations
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeGenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/genotype/{id}/genotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenotypeGenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenotypeGenotypeAssociations(Async)");
        }

        return getGenotypeGenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genotypes-genotype associations
     * Genotypes may be related to one another according to the GENO model
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenotypeGenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenotypeGenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genotypes-genotype associations
     * Genotypes may be related to one another according to the GENO model
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenotypeGenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGenotypeGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genotypes-genotype associations (asynchronously)
     * Genotypes may be related to one another according to the GENO model
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeGenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenotypeGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenotypeModelAssociations
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeModelAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/genotype/{id}/models"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenotypeModelAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenotypeModelAssociations(Async)");
        }

        return getGenotypeModelAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns models associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenotypeModelAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenotypeModelAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns models associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenotypeModelAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGenotypeModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns models associated with a genotype (asynchronously)
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeModelAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenotypeModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenotypePhenotypeAssociations
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-4286 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypePhenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/genotype/{id}/phenotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenotypePhenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenotypePhenotypeAssociations(Async)");
        }

        return getGenotypePhenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns phenotypes associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-4286 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenotypePhenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenotypePhenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns phenotypes associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-4286 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenotypePhenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGenotypePhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns phenotypes associated with a genotype (asynchronously)
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-4286 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypePhenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenotypePhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenotypePublicationAssociations
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypePublicationAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/genotype/{id}/publications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenotypePublicationAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenotypePublicationAssociations(Async)");
        }

        return getGenotypePublicationAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns publications associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenotypePublicationAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenotypePublicationAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns publications associated with a genotype
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenotypePublicationAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGenotypePublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns publications associated with a genotype (asynchronously)
     * 
     * @param id CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypePublicationAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenotypePublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenotypeVariantAssociations
     * @param id CURIE identifier of genotype, e.g. MONARCH:FBgeno422705 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeVariantAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/genotype/{id}/variants"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenotypeVariantAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenotypeVariantAssociations(Async)");
        }

        return getGenotypeVariantAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genotypes-variant associations
     * 
     * @param id CURIE identifier of genotype, e.g. MONARCH:FBgeno422705 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getGenotypeVariantAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGenotypeVariantAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genotypes-variant associations
     * 
     * @param id CURIE identifier of genotype, e.g. MONARCH:FBgeno422705 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getGenotypeVariantAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getGenotypeVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genotypes-variant associations (asynchronously)
     * 
     * @param id CURIE identifier of genotype, e.g. MONARCH:FBgeno422705 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenotypeVariantAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenotypeVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGotermGeneAssociations
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param relationshipType relationship type (&#39;involved_in&#39;, &#39;involved_in_regulation_of&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to involved_in)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getGotermGeneAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, String relationshipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/goterm/{id}/genes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (relationshipType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relationship_type", relationshipType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGotermGeneAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, String relationshipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGotermGeneAssociations(Async)");
        }

        return getGotermGeneAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, relationshipType, _callback);

    }

    /**
     * Returns associations to GO terms for a gene
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param relationshipType relationship type (&#39;involved_in&#39;, &#39;involved_in_regulation_of&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to involved_in)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AssociationResults getGotermGeneAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, String relationshipType) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getGotermGeneAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, relationshipType);
        return localVarResp.getData();
    }

    /**
     * Returns associations to GO terms for a gene
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param relationshipType relationship type (&#39;involved_in&#39;, &#39;involved_in_regulation_of&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to involved_in)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AssociationResults> getGotermGeneAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, String relationshipType) throws ApiException {
        okhttp3.Call localVarCall = getGotermGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, relationshipType, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns associations to GO terms for a gene (asynchronously)
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0044598 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param relationshipType relationship type (&#39;involved_in&#39;, &#39;involved_in_regulation_of&#39; or &#39;acts_upstream_of_or_within&#39;) (optional, default to involved_in)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getGotermGeneAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, String relationshipType, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGotermGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, relationshipType, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelCaseAssociations
     * @param id CURIE identifier for a model, e.g. Coriell:GM22295, Coriell:HG02187 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelCaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/model/{id}/cases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelCaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getModelCaseAssociations(Async)");
        }

        return getModelCaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns cases associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. Coriell:GM22295, Coriell:HG02187 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getModelCaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getModelCaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns cases associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. Coriell:GM22295, Coriell:HG02187 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getModelCaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getModelCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns cases associated with a model (asynchronously)
     * 
     * @param id CURIE identifier for a model, e.g. Coriell:GM22295, Coriell:HG02187 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelCaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelDiseaseAssociations
     * @param id CURIE identifier for a model, e.g. MGI:5573196 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelDiseaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/model/{id}/diseases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelDiseaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getModelDiseaseAssociations(Async)");
        }

        return getModelDiseaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns diseases associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. MGI:5573196 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getModelDiseaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getModelDiseaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns diseases associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. MGI:5573196 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getModelDiseaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getModelDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns diseases associated with a model (asynchronously)
     * 
     * @param id CURIE identifier for a model, e.g. MGI:5573196 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelDiseaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelGeneAssociations
     * @param id CURIE identifier for a model, e.g. MMRRC:042787 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelGeneAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/model/{id}/genes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelGeneAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getModelGeneAssociations(Async)");
        }

        return getModelGeneAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genes associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. MMRRC:042787 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getModelGeneAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getModelGeneAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genes associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. MMRRC:042787 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getModelGeneAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getModelGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genes associated with a model (asynchronously)
     * 
     * @param id CURIE identifier for a model, e.g. MMRRC:042787 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelGeneAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelGenotypeAssociations
     * @param id CURIE identifier for a model, e.g. Coriell:NA16660 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelGenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/model/{id}/genotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelGenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getModelGenotypeAssociations(Async)");
        }

        return getModelGenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genotypes associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. Coriell:NA16660 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getModelGenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getModelGenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genotypes associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. Coriell:NA16660 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getModelGenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getModelGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genotypes associated with a model (asynchronously)
     * 
     * @param id CURIE identifier for a model, e.g. Coriell:NA16660 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelGenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelPhenotypeAssociations
     * @param id id (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelPhenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/model/{id}/phenotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelPhenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getModelPhenotypeAssociations(Async)");
        }

        return getModelPhenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns phenotypes associated with a model
     * 
     * @param id id (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getModelPhenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getModelPhenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns phenotypes associated with a model
     * 
     * @param id id (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getModelPhenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getModelPhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns phenotypes associated with a model (asynchronously)
     * 
     * @param id id (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelPhenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelPhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelPublicationAssociations
     * @param id CURIE identifier for a model, e.g. MGI:5644542 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelPublicationAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/model/{id}/publications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelPublicationAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getModelPublicationAssociations(Async)");
        }

        return getModelPublicationAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns publications associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. MGI:5644542 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getModelPublicationAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getModelPublicationAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns publications associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. MGI:5644542 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getModelPublicationAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getModelPublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns publications associated with a model (asynchronously)
     * 
     * @param id CURIE identifier for a model, e.g. MGI:5644542 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelPublicationAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelPublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelVariantAssociations
     * @param id CURIE identifier for a model, e.g. MMRRC:042787 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelVariantAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/model/{id}/variants"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelVariantAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getModelVariantAssociations(Async)");
        }

        return getModelVariantAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns variants associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. MMRRC:042787 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getModelVariantAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getModelVariantAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns variants associated with a model
     * 
     * @param id CURIE identifier for a model, e.g. MMRRC:042787 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getModelVariantAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getModelVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns variants associated with a model (asynchronously)
     * 
     * @param id CURIE identifier for a model, e.g. MMRRC:042787 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelVariantAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPathwayDiseaseAssociations
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPathwayDiseaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/pathway/{id}/diseases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPathwayDiseaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPathwayDiseaseAssociations(Async)");
        }

        return getPathwayDiseaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns diseases associated with a pathway
     * 
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPathwayDiseaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPathwayDiseaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns diseases associated with a pathway
     * 
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPathwayDiseaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPathwayDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns diseases associated with a pathway (asynchronously)
     * 
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPathwayDiseaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPathwayDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPathwayGeneAssociations
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPathwayGeneAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/pathway/{id}/genes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPathwayGeneAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPathwayGeneAssociations(Async)");
        }

        return getPathwayGeneAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genes associated with a pathway
     * 
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPathwayGeneAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPathwayGeneAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genes associated with a pathway
     * 
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPathwayGeneAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPathwayGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genes associated with a pathway (asynchronously)
     * 
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPathwayGeneAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPathwayGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPathwayPhenotypeAssociations
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPathwayPhenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/pathway/{id}/phenotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPathwayPhenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPathwayPhenotypeAssociations(Async)");
        }

        return getPathwayPhenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns phenotypes associated with a pathway
     * 
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPathwayPhenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPathwayPhenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns phenotypes associated with a pathway
     * 
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPathwayPhenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPathwayPhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns phenotypes associated with a pathway (asynchronously)
     * 
     * @param id CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPathwayPhenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPathwayPhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhenotypeAnatomyAssociations
     * @param id CURIE identifier of phenotype, e.g. MP:0008521. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeAnatomyAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/phenotype/{id}/anatomy"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhenotypeAnatomyAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPhenotypeAnatomyAssociations(Async)");
        }

        return getPhenotypeAnatomyAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns anatomical entities associated with a phenotype
     * Example IDs:   * MP:0008521 abnormal Bowman membrane
     * @param id CURIE identifier of phenotype, e.g. MP:0008521. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return List&lt;NamedObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<NamedObject> getPhenotypeAnatomyAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<List<NamedObject>> localVarResp = getPhenotypeAnatomyAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns anatomical entities associated with a phenotype
     * Example IDs:   * MP:0008521 abnormal Bowman membrane
     * @param id CURIE identifier of phenotype, e.g. MP:0008521. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;List&lt;NamedObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NamedObject>> getPhenotypeAnatomyAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getPhenotypeAnatomyAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<List<NamedObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns anatomical entities associated with a phenotype (asynchronously)
     * Example IDs:   * MP:0008521 abnormal Bowman membrane
     * @param id CURIE identifier of phenotype, e.g. MP:0008521. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeAnatomyAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<List<NamedObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhenotypeAnatomyAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<List<NamedObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhenotypeCaseAssociations
     * @param id Pheno class CURIE identifier, e.g  HP:0011951 (Aspiration pneumonia), HP:0002450 (Abnormal motor neuron morphology) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeCaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/phenotype/{id}/cases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhenotypeCaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPhenotypeCaseAssociations(Async)");
        }

        return getPhenotypeCaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns cases associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  HP:0011951 (Aspiration pneumonia), HP:0002450 (Abnormal motor neuron morphology) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPhenotypeCaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPhenotypeCaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns cases associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  HP:0011951 (Aspiration pneumonia), HP:0002450 (Abnormal motor neuron morphology) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPhenotypeCaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getPhenotypeCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns cases associated with a phenotype (asynchronously)
     * 
     * @param id Pheno class CURIE identifier, e.g  HP:0011951 (Aspiration pneumonia), HP:0002450 (Abnormal motor neuron morphology) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeCaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhenotypeCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhenotypeDiseaseAssociations
     * @param id CURIE identifier of phenotype, e.g. HP:0007359. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeDiseaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/phenotype/{id}/diseases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhenotypeDiseaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPhenotypeDiseaseAssociations(Async)");
        }

        return getPhenotypeDiseaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns diseases associated with a phenotype
     * 
     * @param id CURIE identifier of phenotype, e.g. HP:0007359. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return D2PAssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public D2PAssociationResults getPhenotypeDiseaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<D2PAssociationResults> localVarResp = getPhenotypeDiseaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns diseases associated with a phenotype
     * 
     * @param id CURIE identifier of phenotype, e.g. HP:0007359. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;D2PAssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<D2PAssociationResults> getPhenotypeDiseaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPhenotypeDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<D2PAssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns diseases associated with a phenotype (asynchronously)
     * 
     * @param id CURIE identifier of phenotype, e.g. HP:0007359. Equivalent IDs can be used with same results (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeDiseaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<D2PAssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhenotypeDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<D2PAssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhenotypeGeneAssociations
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level),  (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeGeneAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/phenotype/{id}/genes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhenotypeGeneAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPhenotypeGeneAssociations(Async)");
        }

        return getPhenotypeGeneAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genes associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level),  (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPhenotypeGeneAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPhenotypeGeneAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genes associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level),  (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPhenotypeGeneAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPhenotypeGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genes associated with a phenotype (asynchronously)
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level),  (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeGeneAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhenotypeGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhenotypeGeneByTaxonAssociations
     * @param taxid Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
     * @param id Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPhenotypeGeneByTaxonAssociationsCall(String taxid, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/phenotype/{id}/gene/{taxid}/ids"
            .replace("{" + "taxid" + "}", localVarApiClient.escapeString(taxid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhenotypeGeneByTaxonAssociationsValidateBeforeCall(String taxid, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxid' is set
        if (taxid == null) {
            throw new ApiException("Missing the required parameter 'taxid' when calling getPhenotypeGeneByTaxonAssociations(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPhenotypeGeneByTaxonAssociations(Async)");
        }

        return getPhenotypeGeneByTaxonAssociationsCall(taxid, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns gene IDs for all genes associated with a given phenotype, filtered by taxon
     * For example, MP:0001569 + NCBITaxon:10090 (mouse)
     * @param taxid Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
     * @param id Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void getPhenotypeGeneByTaxonAssociations(String taxid, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        getPhenotypeGeneByTaxonAssociationsWithHttpInfo(taxid, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
    }

    /**
     * Returns gene IDs for all genes associated with a given phenotype, filtered by taxon
     * For example, MP:0001569 + NCBITaxon:10090 (mouse)
     * @param taxid Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
     * @param id Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> getPhenotypeGeneByTaxonAssociationsWithHttpInfo(String taxid, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getPhenotypeGeneByTaxonAssociationsValidateBeforeCall(taxid, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns gene IDs for all genes associated with a given phenotype, filtered by taxon (asynchronously)
     * For example, MP:0001569 + NCBITaxon:10090 (mouse)
     * @param taxid Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
     * @param id Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPhenotypeGeneByTaxonAssociationsAsync(String taxid, String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhenotypeGeneByTaxonAssociationsValidateBeforeCall(taxid, id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhenotypeGenotypeAssociations
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeGenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/phenotype/{id}/genotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhenotypeGenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPhenotypeGenotypeAssociations(Async)");
        }

        return getPhenotypeGenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genotypes associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPhenotypeGenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPhenotypeGenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genotypes associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPhenotypeGenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPhenotypeGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genotypes associated with a phenotype (asynchronously)
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeGenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhenotypeGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhenotypePathwayAssociations
     * @param id Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypePathwayAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/phenotype/{id}/pathways"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhenotypePathwayAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPhenotypePathwayAssociations(Async)");
        }

        return getPhenotypePathwayAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns pathways associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPhenotypePathwayAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPhenotypePathwayAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns pathways associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPhenotypePathwayAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPhenotypePathwayAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns pathways associated with a phenotype (asynchronously)
     * 
     * @param id Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypePathwayAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhenotypePathwayAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhenotypePublicationAssociations
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypePublicationAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/phenotype/{id}/publications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhenotypePublicationAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPhenotypePublicationAssociations(Async)");
        }

        return getPhenotypePublicationAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns publications associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPhenotypePublicationAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPhenotypePublicationAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns publications associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPhenotypePublicationAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPhenotypePublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns publications associated with a phenotype (asynchronously)
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypePublicationAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhenotypePublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhenotypeVariantAssociations
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeVariantAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/phenotype/{id}/variants"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhenotypeVariantAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPhenotypeVariantAssociations(Async)");
        }

        return getPhenotypeVariantAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns variants associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPhenotypeVariantAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPhenotypeVariantAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns variants associated with a phenotype
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPhenotypeVariantAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPhenotypeVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns variants associated with a phenotype (asynchronously)
     * 
     * @param id Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhenotypeVariantAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhenotypeVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicationDiseaseAssociations
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationDiseaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/publication/{id}/diseases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicationDiseaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPublicationDiseaseAssociations(Async)");
        }

        return getPublicationDiseaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns diseases associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPublicationDiseaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPublicationDiseaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns diseases associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPublicationDiseaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPublicationDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns diseases associated with a publication (asynchronously)
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationDiseaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicationDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicationGeneAssociations
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationGeneAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/publication/{id}/genes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicationGeneAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPublicationGeneAssociations(Async)");
        }

        return getPublicationGeneAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genes associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPublicationGeneAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPublicationGeneAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genes associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPublicationGeneAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPublicationGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genes associated with a publication (asynchronously)
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationGeneAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicationGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicationGenotypeAssociations
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationGenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/publication/{id}/genotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicationGenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPublicationGenotypeAssociations(Async)");
        }

        return getPublicationGenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genotypes associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPublicationGenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPublicationGenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genotypes associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPublicationGenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPublicationGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genotypes associated with a publication (asynchronously)
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationGenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicationGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicationModelAssociations
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationModelAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/publication/{id}/models"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicationModelAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPublicationModelAssociations(Async)");
        }

        return getPublicationModelAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns models associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPublicationModelAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPublicationModelAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns models associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPublicationModelAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPublicationModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns models associated with a publication (asynchronously)
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationModelAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicationModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicationPhenotypeAssociations
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationPhenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/publication/{id}/phenotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicationPhenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPublicationPhenotypeAssociations(Async)");
        }

        return getPublicationPhenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns phenotypes associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPublicationPhenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPublicationPhenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns phenotypes associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPublicationPhenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPublicationPhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns phenotypes associated with a publication (asynchronously)
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationPhenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicationPhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicationVariantAssociations
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationVariantAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/publication/{id}/variants"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicationVariantAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPublicationVariantAssociations(Async)");
        }

        return getPublicationVariantAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns variants associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getPublicationVariantAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getPublicationVariantAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns variants associated with a publication
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getPublicationVariantAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getPublicationVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns variants associated with a publication (asynchronously)
     * 
     * @param id CURIE identifier for a publication, e.g. PMID:11751940 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationVariantAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicationVariantAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubstanceParticipantInAssociations
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceParticipantInAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/substance/{id}/participant_in"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubstanceParticipantInAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSubstanceParticipantInAssociations(Async)");
        }

        return getSubstanceParticipantInAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns associations between an activity and process and the specified substance
     * Examples relationships:   * substance is a metabolite of a process  * substance is synthesized by a process  * substance is modified by an activity  * substance elicits a response program/pathway  * substance is transported by activity or pathway  For example, CHEBI:40036 (amitrole)
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return List&lt;Association&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Association> getSubstanceParticipantInAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<List<Association>> localVarResp = getSubstanceParticipantInAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns associations between an activity and process and the specified substance
     * Examples relationships:   * substance is a metabolite of a process  * substance is synthesized by a process  * substance is modified by an activity  * substance elicits a response program/pathway  * substance is transported by activity or pathway  For example, CHEBI:40036 (amitrole)
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;List&lt;Association&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Association>> getSubstanceParticipantInAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getSubstanceParticipantInAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns associations between an activity and process and the specified substance (asynchronously)
     * Examples relationships:   * substance is a metabolite of a process  * substance is synthesized by a process  * substance is modified by an activity  * substance elicits a response program/pathway  * substance is transported by activity or pathway  For example, CHEBI:40036 (amitrole)
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceParticipantInAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<List<Association>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubstanceParticipantInAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubstanceRoleAssociations
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceRoleAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/substance/{id}/roles"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubstanceRoleAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSubstanceRoleAssociations(Async)");
        }

        return getSubstanceRoleAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns associations between given drug and roles
     * Roles may be human-oriented (e.g. pesticide) or molecular (e.g. enzyme inhibitor)
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return List&lt;Association&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Association> getSubstanceRoleAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<List<Association>> localVarResp = getSubstanceRoleAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns associations between given drug and roles
     * Roles may be human-oriented (e.g. pesticide) or molecular (e.g. enzyme inhibitor)
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;List&lt;Association&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Association>> getSubstanceRoleAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getSubstanceRoleAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns associations between given drug and roles (asynchronously)
     * Roles may be human-oriented (e.g. pesticide) or molecular (e.g. enzyme inhibitor)
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceRoleAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<List<Association>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubstanceRoleAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubstanceTreatsAssociations
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceTreatsAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/substance/{id}/treats"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubstanceTreatsAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSubstanceTreatsAssociations(Async)");
        }

        return getSubstanceTreatsAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns substances associated with a disease
     * e.g. drugs or small molecules used to treat
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getSubstanceTreatsAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        getSubstanceTreatsAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
    }

    /**
     * Returns substances associated with a disease
     * e.g. drugs or small molecules used to treat
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSubstanceTreatsAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getSubstanceTreatsAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns substances associated with a disease (asynchronously)
     * e.g. drugs or small molecules used to treat
     * @param id CURIE identifier of substance, e.g. CHEBI:40036 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceTreatsAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubstanceTreatsAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantCaseAssociations
     * @param id CURIE identifier of variant, e.g. OMIM:309550.0004, dbSNP:rs5030868 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantCaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/variant/{id}/cases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantCaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVariantCaseAssociations(Async)");
        }

        return getVariantCaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns cases associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. OMIM:309550.0004, dbSNP:rs5030868 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getVariantCaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getVariantCaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns cases associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. OMIM:309550.0004, dbSNP:rs5030868 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getVariantCaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getVariantCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns cases associated with a variant (asynchronously)
     * 
     * @param id CURIE identifier of variant, e.g. OMIM:309550.0004, dbSNP:rs5030868 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantCaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantCaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantDiseaseAssociations
     * @param id CURIE identifier of variant, e.g. ClinVarVariant:14925 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantDiseaseAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/variant/{id}/diseases"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantDiseaseAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVariantDiseaseAssociations(Async)");
        }

        return getVariantDiseaseAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns diseases associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. ClinVarVariant:14925 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getVariantDiseaseAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getVariantDiseaseAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns diseases associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. ClinVarVariant:14925 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getVariantDiseaseAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getVariantDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns diseases associated with a variant (asynchronously)
     * 
     * @param id CURIE identifier of variant, e.g. ClinVarVariant:14925 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantDiseaseAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantDiseaseAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantGeneAssociations
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantGeneAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/variant/{id}/genes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantGeneAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVariantGeneAssociations(Async)");
        }

        return getVariantGeneAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genes associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getVariantGeneAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getVariantGeneAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genes associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getVariantGeneAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getVariantGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genes associated with a variant (asynchronously)
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantGeneAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantGeneAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantGenotypeAssociations
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantGenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/variant/{id}/genotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantGenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVariantGenotypeAssociations(Async)");
        }

        return getVariantGenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns genotypes associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getVariantGenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getVariantGenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns genotypes associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getVariantGenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getVariantGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns genotypes associated with a variant (asynchronously)
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantGenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantGenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantModelAssociations
     * @param id CURIE identifier of variant, e.g. OMIM:607623.0012, dbSNP:rs5030868 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantModelAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/variant/{id}/models"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantModelAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVariantModelAssociations(Async)");
        }

        return getVariantModelAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);

    }

    /**
     * Returns models associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. OMIM:607623.0012, dbSNP:rs5030868 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getVariantModelAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getVariantModelAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct);
        return localVarResp.getData();
    }

    /**
     * Returns models associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. OMIM:607623.0012, dbSNP:rs5030868 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getVariantModelAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct) throws ApiException {
        okhttp3.Call localVarCall = getVariantModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns models associated with a variant (asynchronously)
     * 
     * @param id CURIE identifier of variant, e.g. OMIM:607623.0012, dbSNP:rs5030868 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantModelAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantModelAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantPhenotypeAssociations
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantPhenotypeAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/variant/{id}/phenotypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantPhenotypeAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVariantPhenotypeAssociations(Async)");
        }

        return getVariantPhenotypeAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns phenotypes associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getVariantPhenotypeAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getVariantPhenotypeAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns phenotypes associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getVariantPhenotypeAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getVariantPhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns phenotypes associated with a variant (asynchronously)
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantPhenotypeAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantPhenotypeAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantPublicationAssociations
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantPublicationAssociationsCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioentity/variant/{id}/publications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet_fields", facetFields));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (fetchObjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_objects", fetchObjects));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (taxon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxon", taxon));
        }

        if (directTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct_taxon", directTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantPublicationAssociationsValidateBeforeCall(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVariantPublicationAssociations(Async)");
        }

        return getVariantPublicationAssociationsCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);

    }

    /**
     * Returns publications associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return AssociationResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociationResults getVariantPublicationAssociations(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        ApiResponse<AssociationResults> localVarResp = getVariantPublicationAssociationsWithHttpInfo(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q);
        return localVarResp.getData();
    }

    /**
     * Returns publications associated with a variant
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @return ApiResponse&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociationResults> getVariantPublicationAssociationsWithHttpInfo(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q) throws ApiException {
        okhttp3.Call localVarCall = getVariantPublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, null);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns publications associated with a variant (asynchronously)
     * 
     * @param id CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param facet Enable faceting (optional, default to false)
     * @param facetFields Fields to facet on (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param fetchObjects If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param direct Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default&#x3D;False (optional, default to false)
     * @param taxon One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default (optional)
     * @param directTaxon Set true to exclude inferred taxa (optional, default to false)
     * @param relation A relation CURIE to filter associations (optional)
     * @param sort Sorting responses &lt;field&gt; &lt;desc,asc&gt; (optional)
     * @param q Query string to filter documents (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantPublicationAssociationsAsync(String id, Integer rows, Integer start, Boolean facet, List<String> facetFields, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean fetchObjects, Boolean useCompactAssociations, List<String> slim, String evidence, Boolean direct, List<String> taxon, Boolean directTaxon, String relation, String sort, String q, final ApiCallback<AssociationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantPublicationAssociationsValidateBeforeCall(id, rows, start, facet, facetFields, unselectEvidence, excludeAutomaticAssertions, fetchObjects, useCompactAssociations, slim, evidence, direct, taxon, directTaxon, relation, sort, q, _callback);
        Type localVarReturnType = new TypeToken<AssociationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
