/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CompareInput;
import org.openapitools.client.model.SimResult;
import org.openapitools.client.model.SufficiencyOutput;
import org.openapitools.client.model.SufficiencyPostInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SimApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SimApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SimApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAnnotationScore
     * @param id Phenotype identifier (eg HP:0004935) (optional)
     * @param absentId absent phenotype (eg HP:0002828) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationScoreCall(List<String> id, List<String> absentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sim/score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (absentId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "absent_id", absentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationScoreValidateBeforeCall(List<String> id, List<String> absentId, final ApiCallback _callback) throws ApiException {
        return getAnnotationScoreCall(id, absentId, _callback);

    }

    /**
     * Get annotation score
     * 
     * @param id Phenotype identifier (eg HP:0004935) (optional)
     * @param absentId absent phenotype (eg HP:0002828) (optional)
     * @return SufficiencyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SufficiencyOutput getAnnotationScore(List<String> id, List<String> absentId) throws ApiException {
        ApiResponse<SufficiencyOutput> localVarResp = getAnnotationScoreWithHttpInfo(id, absentId);
        return localVarResp.getData();
    }

    /**
     * Get annotation score
     * 
     * @param id Phenotype identifier (eg HP:0004935) (optional)
     * @param absentId absent phenotype (eg HP:0002828) (optional)
     * @return ApiResponse&lt;SufficiencyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SufficiencyOutput> getAnnotationScoreWithHttpInfo(List<String> id, List<String> absentId) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationScoreValidateBeforeCall(id, absentId, null);
        Type localVarReturnType = new TypeToken<SufficiencyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get annotation score (asynchronously)
     * 
     * @param id Phenotype identifier (eg HP:0004935) (optional)
     * @param absentId absent phenotype (eg HP:0002828) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnnotationScoreAsync(List<String> id, List<String> absentId, final ApiCallback<SufficiencyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationScoreValidateBeforeCall(id, absentId, _callback);
        Type localVarReturnType = new TypeToken<SufficiencyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimCompare
     * @param isFeatureSet set to true if *all* input ids are phenotypic features, else set to false (optional, default to true)
     * @param metric Metric for computing similarity (optional, default to phenodigm)
     * @param refId A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @param queryId A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimCompareCall(Boolean isFeatureSet, String metric, List<String> refId, List<String> queryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sim/compare";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isFeatureSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_feature_set", isFeatureSet));
        }

        if (metric != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric", metric));
        }

        if (refId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ref_id", refId));
        }

        if (queryId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "query_id", queryId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimCompareValidateBeforeCall(Boolean isFeatureSet, String metric, List<String> refId, List<String> queryId, final ApiCallback _callback) throws ApiException {
        return getSimCompareCall(isFeatureSet, metric, refId, queryId, _callback);

    }

    /**
     * Compare a reference profile vs one profiles
     * 
     * @param isFeatureSet set to true if *all* input ids are phenotypic features, else set to false (optional, default to true)
     * @param metric Metric for computing similarity (optional, default to phenodigm)
     * @param refId A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @param queryId A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @return SimResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SimResult getSimCompare(Boolean isFeatureSet, String metric, List<String> refId, List<String> queryId) throws ApiException {
        ApiResponse<SimResult> localVarResp = getSimCompareWithHttpInfo(isFeatureSet, metric, refId, queryId);
        return localVarResp.getData();
    }

    /**
     * Compare a reference profile vs one profiles
     * 
     * @param isFeatureSet set to true if *all* input ids are phenotypic features, else set to false (optional, default to true)
     * @param metric Metric for computing similarity (optional, default to phenodigm)
     * @param refId A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @param queryId A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @return ApiResponse&lt;SimResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimResult> getSimCompareWithHttpInfo(Boolean isFeatureSet, String metric, List<String> refId, List<String> queryId) throws ApiException {
        okhttp3.Call localVarCall = getSimCompareValidateBeforeCall(isFeatureSet, metric, refId, queryId, null);
        Type localVarReturnType = new TypeToken<SimResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compare a reference profile vs one profiles (asynchronously)
     * 
     * @param isFeatureSet set to true if *all* input ids are phenotypic features, else set to false (optional, default to true)
     * @param metric Metric for computing similarity (optional, default to phenodigm)
     * @param refId A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @param queryId A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimCompareAsync(Boolean isFeatureSet, String metric, List<String> refId, List<String> queryId, final ApiCallback<SimResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimCompareValidateBeforeCall(isFeatureSet, metric, refId, queryId, _callback);
        Type localVarReturnType = new TypeToken<SimResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimSearch
     * @param isFeatureSet set to true if *all* input ids are phenotypic features, else set to false (optional, default to true)
     * @param metric Metric for computing similarity (optional, default to phenodigm)
     * @param id A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @param limit number of rows, max 500 (optional, default to 20)
     * @param taxon ncbi taxon id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimSearchCall(Boolean isFeatureSet, String metric, List<String> id, Integer limit, String taxon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sim/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isFeatureSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_feature_set", isFeatureSet));
        }

        if (metric != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric", metric));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (taxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxon", taxon));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimSearchValidateBeforeCall(Boolean isFeatureSet, String metric, List<String> id, Integer limit, String taxon, final ApiCallback _callback) throws ApiException {
        return getSimSearchCall(isFeatureSet, metric, id, limit, taxon, _callback);

    }

    /**
     * Search for phenotypically similar diseases or model genes
     * 
     * @param isFeatureSet set to true if *all* input ids are phenotypic features, else set to false (optional, default to true)
     * @param metric Metric for computing similarity (optional, default to phenodigm)
     * @param id A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @param limit number of rows, max 500 (optional, default to 20)
     * @param taxon ncbi taxon id (optional)
     * @return SimResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SimResult getSimSearch(Boolean isFeatureSet, String metric, List<String> id, Integer limit, String taxon) throws ApiException {
        ApiResponse<SimResult> localVarResp = getSimSearchWithHttpInfo(isFeatureSet, metric, id, limit, taxon);
        return localVarResp.getData();
    }

    /**
     * Search for phenotypically similar diseases or model genes
     * 
     * @param isFeatureSet set to true if *all* input ids are phenotypic features, else set to false (optional, default to true)
     * @param metric Metric for computing similarity (optional, default to phenodigm)
     * @param id A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @param limit number of rows, max 500 (optional, default to 20)
     * @param taxon ncbi taxon id (optional)
     * @return ApiResponse&lt;SimResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimResult> getSimSearchWithHttpInfo(Boolean isFeatureSet, String metric, List<String> id, Integer limit, String taxon) throws ApiException {
        okhttp3.Call localVarCall = getSimSearchValidateBeforeCall(isFeatureSet, metric, id, limit, taxon, null);
        Type localVarReturnType = new TypeToken<SimResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for phenotypically similar diseases or model genes (asynchronously)
     * 
     * @param isFeatureSet set to true if *all* input ids are phenotypic features, else set to false (optional, default to true)
     * @param metric Metric for computing similarity (optional, default to phenodigm)
     * @param id A phenotype or identifier that is composed of phenotypes (eg disease, gene) (optional)
     * @param limit number of rows, max 500 (optional, default to 20)
     * @param taxon ncbi taxon id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimSearchAsync(Boolean isFeatureSet, String metric, List<String> id, Integer limit, String taxon, final ApiCallback<SimResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimSearchValidateBeforeCall(isFeatureSet, metric, id, limit, taxon, _callback);
        Type localVarReturnType = new TypeToken<SimResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAnnotationScore
     * @param sufficiencyPostInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAnnotationScoreCall(SufficiencyPostInput sufficiencyPostInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sufficiencyPostInput;

        // create path and map variables
        String localVarPath = "/sim/score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAnnotationScoreValidateBeforeCall(SufficiencyPostInput sufficiencyPostInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sufficiencyPostInput' is set
        if (sufficiencyPostInput == null) {
            throw new ApiException("Missing the required parameter 'sufficiencyPostInput' when calling postAnnotationScore(Async)");
        }

        return postAnnotationScoreCall(sufficiencyPostInput, _callback);

    }

    /**
     * Get annotation score
     * 
     * @param sufficiencyPostInput  (required)
     * @return SufficiencyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SufficiencyOutput postAnnotationScore(SufficiencyPostInput sufficiencyPostInput) throws ApiException {
        ApiResponse<SufficiencyOutput> localVarResp = postAnnotationScoreWithHttpInfo(sufficiencyPostInput);
        return localVarResp.getData();
    }

    /**
     * Get annotation score
     * 
     * @param sufficiencyPostInput  (required)
     * @return ApiResponse&lt;SufficiencyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SufficiencyOutput> postAnnotationScoreWithHttpInfo(SufficiencyPostInput sufficiencyPostInput) throws ApiException {
        okhttp3.Call localVarCall = postAnnotationScoreValidateBeforeCall(sufficiencyPostInput, null);
        Type localVarReturnType = new TypeToken<SufficiencyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get annotation score (asynchronously)
     * 
     * @param sufficiencyPostInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAnnotationScoreAsync(SufficiencyPostInput sufficiencyPostInput, final ApiCallback<SufficiencyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAnnotationScoreValidateBeforeCall(sufficiencyPostInput, _callback);
        Type localVarReturnType = new TypeToken<SufficiencyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSimCompare
     * @param compareInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSimCompareCall(CompareInput compareInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = compareInput;

        // create path and map variables
        String localVarPath = "/sim/compare";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSimCompareValidateBeforeCall(CompareInput compareInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'compareInput' is set
        if (compareInput == null) {
            throw new ApiException("Missing the required parameter 'compareInput' when calling postSimCompare(Async)");
        }

        return postSimCompareCall(compareInput, _callback);

    }

    /**
     * Compare a reference profile vs one or more profiles
     * 
     * @param compareInput  (required)
     * @return SimResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SimResult postSimCompare(CompareInput compareInput) throws ApiException {
        ApiResponse<SimResult> localVarResp = postSimCompareWithHttpInfo(compareInput);
        return localVarResp.getData();
    }

    /**
     * Compare a reference profile vs one or more profiles
     * 
     * @param compareInput  (required)
     * @return ApiResponse&lt;SimResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimResult> postSimCompareWithHttpInfo(CompareInput compareInput) throws ApiException {
        okhttp3.Call localVarCall = postSimCompareValidateBeforeCall(compareInput, null);
        Type localVarReturnType = new TypeToken<SimResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compare a reference profile vs one or more profiles (asynchronously)
     * 
     * @param compareInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSimCompareAsync(CompareInput compareInput, final ApiCallback<SimResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSimCompareValidateBeforeCall(compareInput, _callback);
        Type localVarReturnType = new TypeToken<SimResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
