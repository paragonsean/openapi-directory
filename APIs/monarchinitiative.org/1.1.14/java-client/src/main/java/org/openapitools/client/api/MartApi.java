/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MartApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MartApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MartApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getMartCaseAssociationsResource
     * @param taxon taxon of case, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Subject (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMartCaseAssociationsResourceCall(String taxon, String objectCategory, List<String> slim, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mart/case/{object_category}/{taxon}"
            .replace("{" + "taxon" + "}", localVarApiClient.escapeString(taxon.toString()))
            .replace("{" + "object_category" + "}", localVarApiClient.escapeString(objectCategory.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMartCaseAssociationsResourceValidateBeforeCall(String taxon, String objectCategory, List<String> slim, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxon' is set
        if (taxon == null) {
            throw new ApiException("Missing the required parameter 'taxon' when calling getMartCaseAssociationsResource(Async)");
        }

        // verify the required parameter 'objectCategory' is set
        if (objectCategory == null) {
            throw new ApiException("Missing the required parameter 'objectCategory' when calling getMartCaseAssociationsResource(Async)");
        }

        return getMartCaseAssociationsResourceCall(taxon, objectCategory, slim, _callback);

    }

    /**
     * Bulk download of case associations
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param taxon taxon of case, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Subject (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getMartCaseAssociationsResource(String taxon, String objectCategory, List<String> slim) throws ApiException {
        getMartCaseAssociationsResourceWithHttpInfo(taxon, objectCategory, slim);
    }

    /**
     * Bulk download of case associations
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param taxon taxon of case, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Subject (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMartCaseAssociationsResourceWithHttpInfo(String taxon, String objectCategory, List<String> slim) throws ApiException {
        okhttp3.Call localVarCall = getMartCaseAssociationsResourceValidateBeforeCall(taxon, objectCategory, slim, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk download of case associations (asynchronously)
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param taxon taxon of case, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Subject (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMartCaseAssociationsResourceAsync(String taxon, String objectCategory, List<String> slim, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMartCaseAssociationsResourceValidateBeforeCall(taxon, objectCategory, slim, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMartDiseaseAssociationsResource
     * @param taxon taxon of disease, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Object (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMartDiseaseAssociationsResourceCall(String taxon, String objectCategory, List<String> slim, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mart/disease/{object_category}/{taxon}"
            .replace("{" + "taxon" + "}", localVarApiClient.escapeString(taxon.toString()))
            .replace("{" + "object_category" + "}", localVarApiClient.escapeString(objectCategory.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMartDiseaseAssociationsResourceValidateBeforeCall(String taxon, String objectCategory, List<String> slim, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxon' is set
        if (taxon == null) {
            throw new ApiException("Missing the required parameter 'taxon' when calling getMartDiseaseAssociationsResource(Async)");
        }

        // verify the required parameter 'objectCategory' is set
        if (objectCategory == null) {
            throw new ApiException("Missing the required parameter 'objectCategory' when calling getMartDiseaseAssociationsResource(Async)");
        }

        return getMartDiseaseAssociationsResourceCall(taxon, objectCategory, slim, _callback);

    }

    /**
     * Bulk download of disease associations
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param taxon taxon of disease, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Object (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getMartDiseaseAssociationsResource(String taxon, String objectCategory, List<String> slim) throws ApiException {
        getMartDiseaseAssociationsResourceWithHttpInfo(taxon, objectCategory, slim);
    }

    /**
     * Bulk download of disease associations
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param taxon taxon of disease, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Object (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMartDiseaseAssociationsResourceWithHttpInfo(String taxon, String objectCategory, List<String> slim) throws ApiException {
        okhttp3.Call localVarCall = getMartDiseaseAssociationsResourceValidateBeforeCall(taxon, objectCategory, slim, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk download of disease associations (asynchronously)
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param taxon taxon of disease, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Object (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMartDiseaseAssociationsResourceAsync(String taxon, String objectCategory, List<String> slim, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMartDiseaseAssociationsResourceValidateBeforeCall(taxon, objectCategory, slim, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMartGeneAssociationsResource
     * @param taxon taxon of gene, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Object (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMartGeneAssociationsResourceCall(String taxon, String objectCategory, List<String> slim, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mart/gene/{object_category}/{taxon}"
            .replace("{" + "taxon" + "}", localVarApiClient.escapeString(taxon.toString()))
            .replace("{" + "object_category" + "}", localVarApiClient.escapeString(objectCategory.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (slim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "slim", slim));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMartGeneAssociationsResourceValidateBeforeCall(String taxon, String objectCategory, List<String> slim, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxon' is set
        if (taxon == null) {
            throw new ApiException("Missing the required parameter 'taxon' when calling getMartGeneAssociationsResource(Async)");
        }

        // verify the required parameter 'objectCategory' is set
        if (objectCategory == null) {
            throw new ApiException("Missing the required parameter 'objectCategory' when calling getMartGeneAssociationsResource(Async)");
        }

        return getMartGeneAssociationsResourceCall(taxon, objectCategory, slim, _callback);

    }

    /**
     * Bulk download of gene associations
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param taxon taxon of gene, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Object (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getMartGeneAssociationsResource(String taxon, String objectCategory, List<String> slim) throws ApiException {
        getMartGeneAssociationsResourceWithHttpInfo(taxon, objectCategory, slim);
    }

    /**
     * Bulk download of gene associations
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param taxon taxon of gene, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Object (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMartGeneAssociationsResourceWithHttpInfo(String taxon, String objectCategory, List<String> slim) throws ApiException {
        okhttp3.Call localVarCall = getMartGeneAssociationsResourceValidateBeforeCall(taxon, objectCategory, slim, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk download of gene associations (asynchronously)
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * @param taxon taxon of gene, must be of form NCBITaxon:9606 (required)
     * @param objectCategory Category of entity at link Object (target), e.g. phenotype, disease (required)
     * @param slim Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMartGeneAssociationsResourceAsync(String taxon, String objectCategory, List<String> slim, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMartGeneAssociationsResourceValidateBeforeCall(taxon, objectCategory, slim, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMartOrthologAssociationsResource
     * @param taxon2 object taxon, e.g. NCBITaxon:10090 (required)
     * @param taxon1 subject taxon, e.g. NCBITaxon:9606 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMartOrthologAssociationsResourceCall(String taxon2, String taxon1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mart/ortholog/{taxon1}/{taxon2}"
            .replace("{" + "taxon2" + "}", localVarApiClient.escapeString(taxon2.toString()))
            .replace("{" + "taxon1" + "}", localVarApiClient.escapeString(taxon1.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMartOrthologAssociationsResourceValidateBeforeCall(String taxon2, String taxon1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxon2' is set
        if (taxon2 == null) {
            throw new ApiException("Missing the required parameter 'taxon2' when calling getMartOrthologAssociationsResource(Async)");
        }

        // verify the required parameter 'taxon1' is set
        if (taxon1 == null) {
            throw new ApiException("Missing the required parameter 'taxon1' when calling getMartOrthologAssociationsResource(Async)");
        }

        return getMartOrthologAssociationsResourceCall(taxon2, taxon1, _callback);

    }

    /**
     * Bulk download of orthologs
     * 
     * @param taxon2 object taxon, e.g. NCBITaxon:10090 (required)
     * @param taxon1 subject taxon, e.g. NCBITaxon:9606 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getMartOrthologAssociationsResource(String taxon2, String taxon1) throws ApiException {
        getMartOrthologAssociationsResourceWithHttpInfo(taxon2, taxon1);
    }

    /**
     * Bulk download of orthologs
     * 
     * @param taxon2 object taxon, e.g. NCBITaxon:10090 (required)
     * @param taxon1 subject taxon, e.g. NCBITaxon:9606 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMartOrthologAssociationsResourceWithHttpInfo(String taxon2, String taxon1) throws ApiException {
        okhttp3.Call localVarCall = getMartOrthologAssociationsResourceValidateBeforeCall(taxon2, taxon1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk download of orthologs (asynchronously)
     * 
     * @param taxon2 object taxon, e.g. NCBITaxon:10090 (required)
     * @param taxon1 subject taxon, e.g. NCBITaxon:9606 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMartOrthologAssociationsResourceAsync(String taxon2, String taxon1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMartOrthologAssociationsResourceValidateBeforeCall(taxon2, taxon1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMartParalogAssociationsResource
     * @param taxon2 object taxon, e.g. NCBITaxon:9606 (required)
     * @param taxon1 subject taxon, e.g. NCBITaxon:9606 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMartParalogAssociationsResourceCall(String taxon2, String taxon1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mart/paralog/{taxon1}/{taxon2}"
            .replace("{" + "taxon2" + "}", localVarApiClient.escapeString(taxon2.toString()))
            .replace("{" + "taxon1" + "}", localVarApiClient.escapeString(taxon1.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMartParalogAssociationsResourceValidateBeforeCall(String taxon2, String taxon1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxon2' is set
        if (taxon2 == null) {
            throw new ApiException("Missing the required parameter 'taxon2' when calling getMartParalogAssociationsResource(Async)");
        }

        // verify the required parameter 'taxon1' is set
        if (taxon1 == null) {
            throw new ApiException("Missing the required parameter 'taxon1' when calling getMartParalogAssociationsResource(Async)");
        }

        return getMartParalogAssociationsResourceCall(taxon2, taxon1, _callback);

    }

    /**
     * Bulk download of paralogs
     * 
     * @param taxon2 object taxon, e.g. NCBITaxon:9606 (required)
     * @param taxon1 subject taxon, e.g. NCBITaxon:9606 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getMartParalogAssociationsResource(String taxon2, String taxon1) throws ApiException {
        getMartParalogAssociationsResourceWithHttpInfo(taxon2, taxon1);
    }

    /**
     * Bulk download of paralogs
     * 
     * @param taxon2 object taxon, e.g. NCBITaxon:9606 (required)
     * @param taxon1 subject taxon, e.g. NCBITaxon:9606 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMartParalogAssociationsResourceWithHttpInfo(String taxon2, String taxon1) throws ApiException {
        okhttp3.Call localVarCall = getMartParalogAssociationsResourceValidateBeforeCall(taxon2, taxon1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk download of paralogs (asynchronously)
     * 
     * @param taxon2 object taxon, e.g. NCBITaxon:9606 (required)
     * @param taxon1 subject taxon, e.g. NCBITaxon:9606 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMartParalogAssociationsResourceAsync(String taxon2, String taxon1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMartParalogAssociationsResourceValidateBeforeCall(taxon2, taxon1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
