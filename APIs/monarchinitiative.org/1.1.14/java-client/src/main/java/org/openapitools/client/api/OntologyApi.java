/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OntologyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OntologyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OntologyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOntologySubset
     * @param id name of a slim subset, e.g. goslim_agr, goslim_generic (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologySubsetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontology/subset/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOntologySubsetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOntologySubset(Async)");
        }

        return getOntologySubsetCall(id, _callback);

    }

    /**
     * Returns meta data of an ontology subset (slim)
     * 
     * @param id name of a slim subset, e.g. goslim_agr, goslim_generic (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getOntologySubset(String id) throws ApiException {
        getOntologySubsetWithHttpInfo(id);
    }

    /**
     * Returns meta data of an ontology subset (slim)
     * 
     * @param id name of a slim subset, e.g. goslim_agr, goslim_generic (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOntologySubsetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOntologySubsetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns meta data of an ontology subset (slim) (asynchronously)
     * 
     * @param id name of a slim subset, e.g. goslim_agr, goslim_generic (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologySubsetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOntologySubsetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOntologyTerm
     * @param id CURIE identifier of a GO term, e.g. GO:0003677 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologyTermCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontology/term/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOntologyTermValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOntologyTerm(Async)");
        }

        return getOntologyTermCall(id, _callback);

    }

    /**
     * Returns meta data of an ontology term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0003677 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getOntologyTerm(String id) throws ApiException {
        getOntologyTermWithHttpInfo(id);
    }

    /**
     * Returns meta data of an ontology term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0003677 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOntologyTermWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOntologyTermValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns meta data of an ontology term (asynchronously)
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0003677 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologyTermAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOntologyTermValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOntologyTermGraph
     * @param id CURIE identifier of a GO term, e.g. GO:0000981 (required)
     * @param graphType graph type (&#39;topology_graph&#39;, &#39;regulates_transitivity_graph&#39; or &#39;neighborhood_graph&#39;) (optional, default to topology_graph)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologyTermGraphCall(String id, String graphType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontology/term/{id}/graph"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (graphType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("graph_type", graphType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOntologyTermGraphValidateBeforeCall(String id, String graphType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOntologyTermGraph(Async)");
        }

        return getOntologyTermGraphCall(id, graphType, _callback);

    }

    /**
     * Returns graph of an ontology term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0000981 (required)
     * @param graphType graph type (&#39;topology_graph&#39;, &#39;regulates_transitivity_graph&#39; or &#39;neighborhood_graph&#39;) (optional, default to topology_graph)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getOntologyTermGraph(String id, String graphType) throws ApiException {
        getOntologyTermGraphWithHttpInfo(id, graphType);
    }

    /**
     * Returns graph of an ontology term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0000981 (required)
     * @param graphType graph type (&#39;topology_graph&#39;, &#39;regulates_transitivity_graph&#39; or &#39;neighborhood_graph&#39;) (optional, default to topology_graph)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOntologyTermGraphWithHttpInfo(String id, String graphType) throws ApiException {
        okhttp3.Call localVarCall = getOntologyTermGraphValidateBeforeCall(id, graphType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns graph of an ontology term (asynchronously)
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0000981 (required)
     * @param graphType graph type (&#39;topology_graph&#39;, &#39;regulates_transitivity_graph&#39; or &#39;neighborhood_graph&#39;) (optional, default to topology_graph)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologyTermGraphAsync(String id, String graphType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOntologyTermGraphValidateBeforeCall(id, graphType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOntologyTermSubgraph
     * @param id CURIE identifier of a GO term, e.g. GO:0007275 (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologyTermSubgraphCall(String id, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontology/term/{id}/subgraph"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cnode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cnode", cnode));
        }

        if (includeAncestors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_ancestors", includeAncestors));
        }

        if (includeDescendants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_descendants", includeDescendants));
        }

        if (relation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "relation", relation));
        }

        if (includeMeta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_meta", includeMeta));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOntologyTermSubgraphValidateBeforeCall(String id, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOntologyTermSubgraph(Async)");
        }

        return getOntologyTermSubgraphCall(id, cnode, includeAncestors, includeDescendants, relation, includeMeta, _callback);

    }

    /**
     * Extract a subgraph from an ontology term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0007275 (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getOntologyTermSubgraph(String id, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta) throws ApiException {
        getOntologyTermSubgraphWithHttpInfo(id, cnode, includeAncestors, includeDescendants, relation, includeMeta);
    }

    /**
     * Extract a subgraph from an ontology term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0007275 (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOntologyTermSubgraphWithHttpInfo(String id, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta) throws ApiException {
        okhttp3.Call localVarCall = getOntologyTermSubgraphValidateBeforeCall(id, cnode, includeAncestors, includeDescendants, relation, includeMeta, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Extract a subgraph from an ontology term (asynchronously)
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0007275 (required)
     * @param cnode Additional classes (optional)
     * @param includeAncestors Include Ancestors (optional, default to true)
     * @param includeDescendants Include Descendants (optional)
     * @param relation Additional classes (optional)
     * @param includeMeta Include metadata in response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologyTermSubgraphAsync(String id, List<String> cnode, Boolean includeAncestors, Boolean includeDescendants, List<String> relation, Boolean includeMeta, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOntologyTermSubgraphValidateBeforeCall(id, cnode, includeAncestors, includeDescendants, relation, includeMeta, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOntologyTermSubsets
     * @param id CURIE identifier of a GO term, e.g. GO:0006259 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologyTermSubsetsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontology/term/{id}/subsets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOntologyTermSubsetsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOntologyTermSubsets(Async)");
        }

        return getOntologyTermSubsetsCall(id, _callback);

    }

    /**
     * Returns subsets (slims) associated to an ontology term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0006259 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getOntologyTermSubsets(String id) throws ApiException {
        getOntologyTermSubsetsWithHttpInfo(id);
    }

    /**
     * Returns subsets (slims) associated to an ontology term
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0006259 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOntologyTermSubsetsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOntologyTermSubsetsValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns subsets (slims) associated to an ontology term (asynchronously)
     * 
     * @param id CURIE identifier of a GO term, e.g. GO:0006259 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologyTermSubsetsAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOntologyTermSubsetsValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOntologyTermsSharedAncestor
     * @param subject CURIE identifier of a GO term, e.g. GO:0006259 (required)
     * @param _object CURIE identifier of a GO term, e.g. GO:0046483 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologyTermsSharedAncestorCall(String subject, String _object, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontology/shared/{subject}/{object}"
            .replace("{" + "subject" + "}", localVarApiClient.escapeString(subject.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOntologyTermsSharedAncestorValidateBeforeCall(String subject, String _object, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling getOntologyTermsSharedAncestor(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling getOntologyTermsSharedAncestor(Async)");
        }

        return getOntologyTermsSharedAncestorCall(subject, _object, _callback);

    }

    /**
     * Returns the ancestor ontology terms shared by two ontology terms
     * 
     * @param subject CURIE identifier of a GO term, e.g. GO:0006259 (required)
     * @param _object CURIE identifier of a GO term, e.g. GO:0046483 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getOntologyTermsSharedAncestor(String subject, String _object) throws ApiException {
        getOntologyTermsSharedAncestorWithHttpInfo(subject, _object);
    }

    /**
     * Returns the ancestor ontology terms shared by two ontology terms
     * 
     * @param subject CURIE identifier of a GO term, e.g. GO:0006259 (required)
     * @param _object CURIE identifier of a GO term, e.g. GO:0046483 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOntologyTermsSharedAncestorWithHttpInfo(String subject, String _object) throws ApiException {
        okhttp3.Call localVarCall = getOntologyTermsSharedAncestorValidateBeforeCall(subject, _object, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns the ancestor ontology terms shared by two ontology terms (asynchronously)
     * 
     * @param subject CURIE identifier of a GO term, e.g. GO:0006259 (required)
     * @param _object CURIE identifier of a GO term, e.g. GO:0046483 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOntologyTermsSharedAncestorAsync(String subject, String _object, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOntologyTermsSharedAncestorValidateBeforeCall(subject, _object, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
