/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnnotationExtension;
import org.openapitools.client.model.BioObjectCore;
import org.openapitools.client.model.EntityReference;
import org.openapitools.client.model.Graph;
import org.openapitools.client.model.RelationRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * D2PAssociation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.559774-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class D2PAssociation {
  public static final String SERIALIZED_NAME_EVIDENCE_GRAPH = "evidence_graph";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_GRAPH)
  private Graph evidenceGraph;

  public static final String SERIALIZED_NAME_EVIDENCE_TYPES = "evidence_types";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_TYPES)
  private List<EntityReference> evidenceTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NEGATED = "negated";
  @SerializedName(SERIALIZED_NAME_NEGATED)
  private Boolean negated;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private BioObjectCore _object;

  public static final String SERIALIZED_NAME_OBJECT_EQ = "object_eq";
  @SerializedName(SERIALIZED_NAME_OBJECT_EQ)
  private List<String> objectEq = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECT_EXTENSIONS = "object_extensions";
  @SerializedName(SERIALIZED_NAME_OBJECT_EXTENSIONS)
  private List<AnnotationExtension> objectExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDED_BY = "provided_by";
  @SerializedName(SERIALIZED_NAME_PROVIDED_BY)
  private List<String> providedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLICATIONS = "publications";
  @SerializedName(SERIALIZED_NAME_PUBLICATIONS)
  private List<EntityReference> publications = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUALIFIERS = "qualifiers";
  @SerializedName(SERIALIZED_NAME_QUALIFIERS)
  private List<String> qualifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private RelationRef relation;

  public static final String SERIALIZED_NAME_SLIM = "slim";
  @SerializedName(SERIALIZED_NAME_SLIM)
  private List<String> slim = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private BioObjectCore subject;

  public static final String SERIALIZED_NAME_SUBJECT_EQ = "subject_eq";
  @SerializedName(SERIALIZED_NAME_SUBJECT_EQ)
  private List<String> subjectEq = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECT_EXTENSIONS = "subject_extensions";
  @SerializedName(SERIALIZED_NAME_SUBJECT_EXTENSIONS)
  private List<AnnotationExtension> subjectExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private EntityReference frequency;

  public static final String SERIALIZED_NAME_ONSET = "onset";
  @SerializedName(SERIALIZED_NAME_ONSET)
  private EntityReference onset;

  public D2PAssociation() {
  }

  public D2PAssociation evidenceGraph(Graph evidenceGraph) {
    this.evidenceGraph = evidenceGraph;
    return this;
  }

  /**
   * An indirect association is a join between two or more direct assocations, e.g. gene to disease via ortholog. We record the full set of associations as a graph object
   * @return evidenceGraph
   */
  @javax.annotation.Nullable
  public Graph getEvidenceGraph() {
    return evidenceGraph;
  }

  public void setEvidenceGraph(Graph evidenceGraph) {
    this.evidenceGraph = evidenceGraph;
  }


  public D2PAssociation evidenceTypes(List<EntityReference> evidenceTypes) {
    this.evidenceTypes = evidenceTypes;
    return this;
  }

  public D2PAssociation addEvidenceTypesItem(EntityReference evidenceTypesItem) {
    if (this.evidenceTypes == null) {
      this.evidenceTypes = new ArrayList<>();
    }
    this.evidenceTypes.add(evidenceTypesItem);
    return this;
  }

  /**
   * Evidence types (ECO classes)
   * @return evidenceTypes
   */
  @javax.annotation.Nullable
  public List<EntityReference> getEvidenceTypes() {
    return evidenceTypes;
  }

  public void setEvidenceTypes(List<EntityReference> evidenceTypes) {
    this.evidenceTypes = evidenceTypes;
  }


  public D2PAssociation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Association/annotation unique ID
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public D2PAssociation negated(Boolean negated) {
    this.negated = negated;
    return this;
  }

  /**
   * True if association is negated
   * @return negated
   */
  @javax.annotation.Nullable
  public Boolean getNegated() {
    return negated;
  }

  public void setNegated(Boolean negated) {
    this.negated = negated;
  }


  public D2PAssociation _object(BioObjectCore _object) {
    this._object = _object;
    return this;
  }

  /**
   * Object (sensu RDF), aka target, e.g. HP:0000448, MP:0002109, DOID:14330
   * @return _object
   */
  @javax.annotation.Nonnull
  public BioObjectCore getObject() {
    return _object;
  }

  public void setObject(BioObjectCore _object) {
    this._object = _object;
  }


  public D2PAssociation objectEq(List<String> objectEq) {
    this.objectEq = objectEq;
    return this;
  }

  public D2PAssociation addObjectEqItem(String objectEqItem) {
    if (this.objectEq == null) {
      this.objectEq = new ArrayList<>();
    }
    this.objectEq.add(objectEqItem);
    return this;
  }

  /**
   * Equivalent identifiers to object node
   * @return objectEq
   */
  @javax.annotation.Nullable
  public List<String> getObjectEq() {
    return objectEq;
  }

  public void setObjectEq(List<String> objectEq) {
    this.objectEq = objectEq;
  }


  public D2PAssociation objectExtensions(List<AnnotationExtension> objectExtensions) {
    this.objectExtensions = objectExtensions;
    return this;
  }

  public D2PAssociation addObjectExtensionsItem(AnnotationExtension objectExtensionsItem) {
    if (this.objectExtensions == null) {
      this.objectExtensions = new ArrayList<>();
    }
    this.objectExtensions.add(objectExtensionsItem);
    return this;
  }

  /**
   * Get objectExtensions
   * @return objectExtensions
   */
  @javax.annotation.Nullable
  public List<AnnotationExtension> getObjectExtensions() {
    return objectExtensions;
  }

  public void setObjectExtensions(List<AnnotationExtension> objectExtensions) {
    this.objectExtensions = objectExtensions;
  }


  public D2PAssociation providedBy(List<String> providedBy) {
    this.providedBy = providedBy;
    return this;
  }

  public D2PAssociation addProvidedByItem(String providedByItem) {
    if (this.providedBy == null) {
      this.providedBy = new ArrayList<>();
    }
    this.providedBy.add(providedByItem);
    return this;
  }

  /**
   * Provider of association, e.g. Orphanet, ClinVar
   * @return providedBy
   */
  @javax.annotation.Nullable
  public List<String> getProvidedBy() {
    return providedBy;
  }

  public void setProvidedBy(List<String> providedBy) {
    this.providedBy = providedBy;
  }


  public D2PAssociation publications(List<EntityReference> publications) {
    this.publications = publications;
    return this;
  }

  public D2PAssociation addPublicationsItem(EntityReference publicationsItem) {
    if (this.publications == null) {
      this.publications = new ArrayList<>();
    }
    this.publications.add(publicationsItem);
    return this;
  }

  /**
   * Publications supporting association, extracted from evidence graph
   * @return publications
   */
  @javax.annotation.Nullable
  public List<EntityReference> getPublications() {
    return publications;
  }

  public void setPublications(List<EntityReference> publications) {
    this.publications = publications;
  }


  public D2PAssociation qualifiers(List<String> qualifiers) {
    this.qualifiers = qualifiers;
    return this;
  }

  public D2PAssociation addQualifiersItem(String qualifiersItem) {
    if (this.qualifiers == null) {
      this.qualifiers = new ArrayList<>();
    }
    this.qualifiers.add(qualifiersItem);
    return this;
  }

  /**
   * Qualifier on the association
   * @return qualifiers
   */
  @javax.annotation.Nullable
  public List<String> getQualifiers() {
    return qualifiers;
  }

  public void setQualifiers(List<String> qualifiers) {
    this.qualifiers = qualifiers;
  }


  public D2PAssociation relation(RelationRef relation) {
    this.relation = relation;
    return this;
  }

  /**
   * Relationship type connecting subject and object
   * @return relation
   */
  @javax.annotation.Nonnull
  public RelationRef getRelation() {
    return relation;
  }

  public void setRelation(RelationRef relation) {
    this.relation = relation;
  }


  public D2PAssociation slim(List<String> slim) {
    this.slim = slim;
    return this;
  }

  public D2PAssociation addSlimItem(String slimItem) {
    if (this.slim == null) {
      this.slim = new ArrayList<>();
    }
    this.slim.add(slimItem);
    return this;
  }

  /**
   * Objects mapped to a slim
   * @return slim
   */
  @javax.annotation.Nullable
  public List<String> getSlim() {
    return slim;
  }

  public void setSlim(List<String> slim) {
    this.slim = slim;
  }


  public D2PAssociation subject(BioObjectCore subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject of association (what it is about), e.g. ClinVar:nnn, MGI:1201606
   * @return subject
   */
  @javax.annotation.Nonnull
  public BioObjectCore getSubject() {
    return subject;
  }

  public void setSubject(BioObjectCore subject) {
    this.subject = subject;
  }


  public D2PAssociation subjectEq(List<String> subjectEq) {
    this.subjectEq = subjectEq;
    return this;
  }

  public D2PAssociation addSubjectEqItem(String subjectEqItem) {
    if (this.subjectEq == null) {
      this.subjectEq = new ArrayList<>();
    }
    this.subjectEq.add(subjectEqItem);
    return this;
  }

  /**
   * Equivalent identifiers to subject node
   * @return subjectEq
   */
  @javax.annotation.Nullable
  public List<String> getSubjectEq() {
    return subjectEq;
  }

  public void setSubjectEq(List<String> subjectEq) {
    this.subjectEq = subjectEq;
  }


  public D2PAssociation subjectExtensions(List<AnnotationExtension> subjectExtensions) {
    this.subjectExtensions = subjectExtensions;
    return this;
  }

  public D2PAssociation addSubjectExtensionsItem(AnnotationExtension subjectExtensionsItem) {
    if (this.subjectExtensions == null) {
      this.subjectExtensions = new ArrayList<>();
    }
    this.subjectExtensions.add(subjectExtensionsItem);
    return this;
  }

  /**
   * Get subjectExtensions
   * @return subjectExtensions
   */
  @javax.annotation.Nullable
  public List<AnnotationExtension> getSubjectExtensions() {
    return subjectExtensions;
  }

  public void setSubjectExtensions(List<AnnotationExtension> subjectExtensions) {
    this.subjectExtensions = subjectExtensions;
  }


  public D2PAssociation type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of association, e.g. gene-phenotype
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public D2PAssociation frequency(EntityReference frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Frequency of phenotype in patients with disease
   * @return frequency
   */
  @javax.annotation.Nullable
  public EntityReference getFrequency() {
    return frequency;
  }

  public void setFrequency(EntityReference frequency) {
    this.frequency = frequency;
  }


  public D2PAssociation onset(EntityReference onset) {
    this.onset = onset;
    return this;
  }

  /**
   * Onset of phenotype in disease process
   * @return onset
   */
  @javax.annotation.Nullable
  public EntityReference getOnset() {
    return onset;
  }

  public void setOnset(EntityReference onset) {
    this.onset = onset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    D2PAssociation d2PAssociation = (D2PAssociation) o;
    return Objects.equals(this.evidenceGraph, d2PAssociation.evidenceGraph) &&
        Objects.equals(this.evidenceTypes, d2PAssociation.evidenceTypes) &&
        Objects.equals(this.id, d2PAssociation.id) &&
        Objects.equals(this.negated, d2PAssociation.negated) &&
        Objects.equals(this._object, d2PAssociation._object) &&
        Objects.equals(this.objectEq, d2PAssociation.objectEq) &&
        Objects.equals(this.objectExtensions, d2PAssociation.objectExtensions) &&
        Objects.equals(this.providedBy, d2PAssociation.providedBy) &&
        Objects.equals(this.publications, d2PAssociation.publications) &&
        Objects.equals(this.qualifiers, d2PAssociation.qualifiers) &&
        Objects.equals(this.relation, d2PAssociation.relation) &&
        Objects.equals(this.slim, d2PAssociation.slim) &&
        Objects.equals(this.subject, d2PAssociation.subject) &&
        Objects.equals(this.subjectEq, d2PAssociation.subjectEq) &&
        Objects.equals(this.subjectExtensions, d2PAssociation.subjectExtensions) &&
        Objects.equals(this.type, d2PAssociation.type) &&
        Objects.equals(this.frequency, d2PAssociation.frequency) &&
        Objects.equals(this.onset, d2PAssociation.onset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evidenceGraph, evidenceTypes, id, negated, _object, objectEq, objectExtensions, providedBy, publications, qualifiers, relation, slim, subject, subjectEq, subjectExtensions, type, frequency, onset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class D2PAssociation {\n");
    sb.append("    evidenceGraph: ").append(toIndentedString(evidenceGraph)).append("\n");
    sb.append("    evidenceTypes: ").append(toIndentedString(evidenceTypes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    negated: ").append(toIndentedString(negated)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    objectEq: ").append(toIndentedString(objectEq)).append("\n");
    sb.append("    objectExtensions: ").append(toIndentedString(objectExtensions)).append("\n");
    sb.append("    providedBy: ").append(toIndentedString(providedBy)).append("\n");
    sb.append("    publications: ").append(toIndentedString(publications)).append("\n");
    sb.append("    qualifiers: ").append(toIndentedString(qualifiers)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    slim: ").append(toIndentedString(slim)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    subjectEq: ").append(toIndentedString(subjectEq)).append("\n");
    sb.append("    subjectExtensions: ").append(toIndentedString(subjectExtensions)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    onset: ").append(toIndentedString(onset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evidence_graph");
    openapiFields.add("evidence_types");
    openapiFields.add("id");
    openapiFields.add("negated");
    openapiFields.add("object");
    openapiFields.add("object_eq");
    openapiFields.add("object_extensions");
    openapiFields.add("provided_by");
    openapiFields.add("publications");
    openapiFields.add("qualifiers");
    openapiFields.add("relation");
    openapiFields.add("slim");
    openapiFields.add("subject");
    openapiFields.add("subject_eq");
    openapiFields.add("subject_extensions");
    openapiFields.add("type");
    openapiFields.add("frequency");
    openapiFields.add("onset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("relation");
    openapiRequiredFields.add("subject");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to D2PAssociation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!D2PAssociation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in D2PAssociation is not found in the empty JSON string", D2PAssociation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!D2PAssociation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `D2PAssociation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : D2PAssociation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `evidence_graph`
      if (jsonObj.get("evidence_graph") != null && !jsonObj.get("evidence_graph").isJsonNull()) {
        Graph.validateJsonElement(jsonObj.get("evidence_graph"));
      }
      if (jsonObj.get("evidence_types") != null && !jsonObj.get("evidence_types").isJsonNull()) {
        JsonArray jsonArrayevidenceTypes = jsonObj.getAsJsonArray("evidence_types");
        if (jsonArrayevidenceTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("evidence_types").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `evidence_types` to be an array in the JSON string but got `%s`", jsonObj.get("evidence_types").toString()));
          }

          // validate the optional field `evidence_types` (array)
          for (int i = 0; i < jsonArrayevidenceTypes.size(); i++) {
            EntityReference.validateJsonElement(jsonArrayevidenceTypes.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `object`
      BioObjectCore.validateJsonElement(jsonObj.get("object"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("object_eq") != null && !jsonObj.get("object_eq").isJsonNull() && !jsonObj.get("object_eq").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_eq` to be an array in the JSON string but got `%s`", jsonObj.get("object_eq").toString()));
      }
      if (jsonObj.get("object_extensions") != null && !jsonObj.get("object_extensions").isJsonNull()) {
        JsonArray jsonArrayobjectExtensions = jsonObj.getAsJsonArray("object_extensions");
        if (jsonArrayobjectExtensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("object_extensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `object_extensions` to be an array in the JSON string but got `%s`", jsonObj.get("object_extensions").toString()));
          }

          // validate the optional field `object_extensions` (array)
          for (int i = 0; i < jsonArrayobjectExtensions.size(); i++) {
            AnnotationExtension.validateJsonElement(jsonArrayobjectExtensions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("provided_by") != null && !jsonObj.get("provided_by").isJsonNull() && !jsonObj.get("provided_by").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `provided_by` to be an array in the JSON string but got `%s`", jsonObj.get("provided_by").toString()));
      }
      if (jsonObj.get("publications") != null && !jsonObj.get("publications").isJsonNull()) {
        JsonArray jsonArraypublications = jsonObj.getAsJsonArray("publications");
        if (jsonArraypublications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("publications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `publications` to be an array in the JSON string but got `%s`", jsonObj.get("publications").toString()));
          }

          // validate the optional field `publications` (array)
          for (int i = 0; i < jsonArraypublications.size(); i++) {
            EntityReference.validateJsonElement(jsonArraypublications.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("qualifiers") != null && !jsonObj.get("qualifiers").isJsonNull() && !jsonObj.get("qualifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `qualifiers` to be an array in the JSON string but got `%s`", jsonObj.get("qualifiers").toString()));
      }
      // validate the required field `relation`
      RelationRef.validateJsonElement(jsonObj.get("relation"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("slim") != null && !jsonObj.get("slim").isJsonNull() && !jsonObj.get("slim").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `slim` to be an array in the JSON string but got `%s`", jsonObj.get("slim").toString()));
      }
      // validate the required field `subject`
      BioObjectCore.validateJsonElement(jsonObj.get("subject"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("subject_eq") != null && !jsonObj.get("subject_eq").isJsonNull() && !jsonObj.get("subject_eq").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_eq` to be an array in the JSON string but got `%s`", jsonObj.get("subject_eq").toString()));
      }
      if (jsonObj.get("subject_extensions") != null && !jsonObj.get("subject_extensions").isJsonNull()) {
        JsonArray jsonArraysubjectExtensions = jsonObj.getAsJsonArray("subject_extensions");
        if (jsonArraysubjectExtensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subject_extensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subject_extensions` to be an array in the JSON string but got `%s`", jsonObj.get("subject_extensions").toString()));
          }

          // validate the optional field `subject_extensions` (array)
          for (int i = 0; i < jsonArraysubjectExtensions.size(); i++) {
            AnnotationExtension.validateJsonElement(jsonArraysubjectExtensions.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        EntityReference.validateJsonElement(jsonObj.get("frequency"));
      }
      // validate the optional field `onset`
      if (jsonObj.get("onset") != null && !jsonObj.get("onset").isJsonNull()) {
        EntityReference.validateJsonElement(jsonObj.get("onset"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!D2PAssociation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'D2PAssociation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<D2PAssociation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(D2PAssociation.class));

       return (TypeAdapter<T>) new TypeAdapter<D2PAssociation>() {
           @Override
           public void write(JsonWriter out, D2PAssociation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public D2PAssociation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of D2PAssociation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of D2PAssociation
   * @throws IOException if the JSON string is invalid with respect to D2PAssociation
   */
  public static D2PAssociation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, D2PAssociation.class);
  }

  /**
   * Convert an instance of D2PAssociation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

