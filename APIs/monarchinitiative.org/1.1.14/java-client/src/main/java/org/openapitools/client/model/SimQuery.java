/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Node;
import org.openapitools.client.model.TypedNode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.559774-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimQuery {
  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<Node> ids = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEGATED_IDS = "negated_ids";
  @SerializedName(SERIALIZED_NAME_NEGATED_IDS)
  private List<Node> negatedIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private TypedNode reference;

  public static final String SERIALIZED_NAME_TARGET_IDS = "target_ids";
  @SerializedName(SERIALIZED_NAME_TARGET_IDS)
  private List<List<Node>> targetIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNRESOLVED_IDS = "unresolved_ids";
  @SerializedName(SERIALIZED_NAME_UNRESOLVED_IDS)
  private List<String> unresolvedIds = new ArrayList<>();

  public SimQuery() {
  }

  public SimQuery ids(List<Node> ids) {
    this.ids = ids;
    return this;
  }

  public SimQuery addIdsItem(Node idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

  /**
   * Get ids
   * @return ids
   */
  @javax.annotation.Nullable
  public List<Node> getIds() {
    return ids;
  }

  public void setIds(List<Node> ids) {
    this.ids = ids;
  }


  public SimQuery negatedIds(List<Node> negatedIds) {
    this.negatedIds = negatedIds;
    return this;
  }

  public SimQuery addNegatedIdsItem(Node negatedIdsItem) {
    if (this.negatedIds == null) {
      this.negatedIds = new ArrayList<>();
    }
    this.negatedIds.add(negatedIdsItem);
    return this;
  }

  /**
   * Get negatedIds
   * @return negatedIds
   */
  @javax.annotation.Nullable
  public List<Node> getNegatedIds() {
    return negatedIds;
  }

  public void setNegatedIds(List<Node> negatedIds) {
    this.negatedIds = negatedIds;
  }


  public SimQuery reference(TypedNode reference) {
    this.reference = reference;
    return this;
  }

  /**
   * reference individual or class (eg gene, disease)
   * @return reference
   */
  @javax.annotation.Nullable
  public TypedNode getReference() {
    return reference;
  }

  public void setReference(TypedNode reference) {
    this.reference = reference;
  }


  public SimQuery targetIds(List<List<Node>> targetIds) {
    this.targetIds = targetIds;
    return this;
  }

  public SimQuery addTargetIdsItem(List<Node> targetIdsItem) {
    if (this.targetIds == null) {
      this.targetIds = new ArrayList<>();
    }
    this.targetIds.add(targetIdsItem);
    return this;
  }

  /**
   * Get targetIds
   * @return targetIds
   */
  @javax.annotation.Nullable
  public List<List<Node>> getTargetIds() {
    return targetIds;
  }

  public void setTargetIds(List<List<Node>> targetIds) {
    this.targetIds = targetIds;
  }


  public SimQuery unresolvedIds(List<String> unresolvedIds) {
    this.unresolvedIds = unresolvedIds;
    return this;
  }

  public SimQuery addUnresolvedIdsItem(String unresolvedIdsItem) {
    if (this.unresolvedIds == null) {
      this.unresolvedIds = new ArrayList<>();
    }
    this.unresolvedIds.add(unresolvedIdsItem);
    return this;
  }

  /**
   * list of unresolved ids
   * @return unresolvedIds
   */
  @javax.annotation.Nullable
  public List<String> getUnresolvedIds() {
    return unresolvedIds;
  }

  public void setUnresolvedIds(List<String> unresolvedIds) {
    this.unresolvedIds = unresolvedIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimQuery simQuery = (SimQuery) o;
    return Objects.equals(this.ids, simQuery.ids) &&
        Objects.equals(this.negatedIds, simQuery.negatedIds) &&
        Objects.equals(this.reference, simQuery.reference) &&
        Objects.equals(this.targetIds, simQuery.targetIds) &&
        Objects.equals(this.unresolvedIds, simQuery.unresolvedIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, negatedIds, reference, targetIds, unresolvedIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimQuery {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    negatedIds: ").append(toIndentedString(negatedIds)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    targetIds: ").append(toIndentedString(targetIds)).append("\n");
    sb.append("    unresolvedIds: ").append(toIndentedString(unresolvedIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ids");
    openapiFields.add("negated_ids");
    openapiFields.add("reference");
    openapiFields.add("target_ids");
    openapiFields.add("unresolved_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimQuery is not found in the empty JSON string", SimQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull()) {
        JsonArray jsonArrayids = jsonObj.getAsJsonArray("ids");
        if (jsonArrayids != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
          }

          // validate the optional field `ids` (array)
          for (int i = 0; i < jsonArrayids.size(); i++) {
            Node.validateJsonElement(jsonArrayids.get(i));
          };
        }
      }
      if (jsonObj.get("negated_ids") != null && !jsonObj.get("negated_ids").isJsonNull()) {
        JsonArray jsonArraynegatedIds = jsonObj.getAsJsonArray("negated_ids");
        if (jsonArraynegatedIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("negated_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `negated_ids` to be an array in the JSON string but got `%s`", jsonObj.get("negated_ids").toString()));
          }

          // validate the optional field `negated_ids` (array)
          for (int i = 0; i < jsonArraynegatedIds.size(); i++) {
            Node.validateJsonElement(jsonArraynegatedIds.get(i));
          };
        }
      }
      // validate the optional field `reference`
      if (jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) {
        TypedNode.validateJsonElement(jsonObj.get("reference"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_ids") != null && !jsonObj.get("target_ids").isJsonNull() && !jsonObj.get("target_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_ids` to be an array in the JSON string but got `%s`", jsonObj.get("target_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unresolved_ids") != null && !jsonObj.get("unresolved_ids").isJsonNull() && !jsonObj.get("unresolved_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unresolved_ids` to be an array in the JSON string but got `%s`", jsonObj.get("unresolved_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<SimQuery>() {
           @Override
           public void write(JsonWriter out, SimQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimQuery
   * @throws IOException if the JSON string is invalid with respect to SimQuery
   */
  public static SimQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimQuery.class);
  }

  /**
   * Convert an instance of SimQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

