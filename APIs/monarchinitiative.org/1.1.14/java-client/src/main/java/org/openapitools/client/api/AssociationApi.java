/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssociationResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssociationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssociationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssociationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAssociationBySubjectAndAssocType
     * @param associationType Association type, eg gene_phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subject Subject CURIE (optional)
     * @param _object Object CURIE (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationBySubjectAndAssocTypeCall(String associationType, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subject, String _object, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/association/type/{association_type}"
            .replace("{" + "association_type" + "}", localVarApiClient.escapeString(associationType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject", subject));
        }

        if (_object != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object", _object));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociationBySubjectAndAssocTypeValidateBeforeCall(String associationType, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subject, String _object, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'associationType' is set
        if (associationType == null) {
            throw new ApiException("Missing the required parameter 'associationType' when calling getAssociationBySubjectAndAssocType(Async)");
        }

        return getAssociationBySubjectAndAssocTypeCall(associationType, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subject, _object, _callback);

    }

    /**
     * Returns list of matching associations of a given type
     * 
     * @param associationType Association type, eg gene_phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subject Subject CURIE (optional)
     * @param _object Object CURIE (optional)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getAssociationBySubjectAndAssocType(String associationType, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subject, String _object) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getAssociationBySubjectAndAssocTypeWithHttpInfo(associationType, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subject, _object);
        return localVarResp.getData();
    }

    /**
     * Returns list of matching associations of a given type
     * 
     * @param associationType Association type, eg gene_phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subject Subject CURIE (optional)
     * @param _object Object CURIE (optional)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getAssociationBySubjectAndAssocTypeWithHttpInfo(String associationType, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subject, String _object) throws ApiException {
        okhttp3.Call localVarCall = getAssociationBySubjectAndAssocTypeValidateBeforeCall(associationType, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subject, _object, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of matching associations of a given type (asynchronously)
     * 
     * @param associationType Association type, eg gene_phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subject Subject CURIE (optional)
     * @param _object Object CURIE (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationBySubjectAndAssocTypeAsync(String associationType, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subject, String _object, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociationBySubjectAndAssocTypeValidateBeforeCall(associationType, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subject, _object, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssociationBySubjectAndObjectCategorySearch
     * @param objectCategory Category of entity at link Object (target), e.g. gene, disease, phenotype (required)
     * @param subjectCategory Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subject Subject CURIE (optional)
     * @param _object Object CURIE (optional)
     * @param subjectTaxon Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default) (optional)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationBySubjectAndObjectCategorySearchCall(String objectCategory, String subjectCategory, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subject, String _object, String subjectTaxon, String objectTaxon, String relation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/association/find/{subject_category}/{object_category}"
            .replace("{" + "object_category" + "}", localVarApiClient.escapeString(objectCategory.toString()))
            .replace("{" + "subject_category" + "}", localVarApiClient.escapeString(subjectCategory.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject", subject));
        }

        if (_object != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object", _object));
        }

        if (subjectTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject_taxon", subjectTaxon));
        }

        if (objectTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_taxon", objectTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociationBySubjectAndObjectCategorySearchValidateBeforeCall(String objectCategory, String subjectCategory, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subject, String _object, String subjectTaxon, String objectTaxon, String relation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectCategory' is set
        if (objectCategory == null) {
            throw new ApiException("Missing the required parameter 'objectCategory' when calling getAssociationBySubjectAndObjectCategorySearch(Async)");
        }

        // verify the required parameter 'subjectCategory' is set
        if (subjectCategory == null) {
            throw new ApiException("Missing the required parameter 'subjectCategory' when calling getAssociationBySubjectAndObjectCategorySearch(Async)");
        }

        return getAssociationBySubjectAndObjectCategorySearchCall(objectCategory, subjectCategory, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subject, _object, subjectTaxon, objectTaxon, relation, _callback);

    }

    /**
     * Returns list of matching associations between a given subject and object category
     * 
     * @param objectCategory Category of entity at link Object (target), e.g. gene, disease, phenotype (required)
     * @param subjectCategory Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subject Subject CURIE (optional)
     * @param _object Object CURIE (optional)
     * @param subjectTaxon Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default) (optional)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getAssociationBySubjectAndObjectCategorySearch(String objectCategory, String subjectCategory, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subject, String _object, String subjectTaxon, String objectTaxon, String relation) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getAssociationBySubjectAndObjectCategorySearchWithHttpInfo(objectCategory, subjectCategory, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subject, _object, subjectTaxon, objectTaxon, relation);
        return localVarResp.getData();
    }

    /**
     * Returns list of matching associations between a given subject and object category
     * 
     * @param objectCategory Category of entity at link Object (target), e.g. gene, disease, phenotype (required)
     * @param subjectCategory Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subject Subject CURIE (optional)
     * @param _object Object CURIE (optional)
     * @param subjectTaxon Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default) (optional)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getAssociationBySubjectAndObjectCategorySearchWithHttpInfo(String objectCategory, String subjectCategory, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subject, String _object, String subjectTaxon, String objectTaxon, String relation) throws ApiException {
        okhttp3.Call localVarCall = getAssociationBySubjectAndObjectCategorySearchValidateBeforeCall(objectCategory, subjectCategory, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subject, _object, subjectTaxon, objectTaxon, relation, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of matching associations between a given subject and object category (asynchronously)
     * 
     * @param objectCategory Category of entity at link Object (target), e.g. gene, disease, phenotype (required)
     * @param subjectCategory Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subject Subject CURIE (optional)
     * @param _object Object CURIE (optional)
     * @param subjectTaxon Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default) (optional)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationBySubjectAndObjectCategorySearchAsync(String objectCategory, String subjectCategory, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subject, String _object, String subjectTaxon, String objectTaxon, String relation, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociationBySubjectAndObjectCategorySearchValidateBeforeCall(objectCategory, subjectCategory, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subject, _object, subjectTaxon, objectTaxon, relation, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssociationBySubjectCategorySearch
     * @param subjectCategory Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subjectTaxon Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default) (optional)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationBySubjectCategorySearchCall(String subjectCategory, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subjectTaxon, String objectTaxon, String relation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/association/find/{subject_category}"
            .replace("{" + "subject_category" + "}", localVarApiClient.escapeString(subjectCategory.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (subjectTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject_taxon", subjectTaxon));
        }

        if (objectTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_taxon", objectTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociationBySubjectCategorySearchValidateBeforeCall(String subjectCategory, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subjectTaxon, String objectTaxon, String relation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subjectCategory' is set
        if (subjectCategory == null) {
            throw new ApiException("Missing the required parameter 'subjectCategory' when calling getAssociationBySubjectCategorySearch(Async)");
        }

        return getAssociationBySubjectCategorySearchCall(subjectCategory, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subjectTaxon, objectTaxon, relation, _callback);

    }

    /**
     * Returns list of matching associations for a given subject category
     * 
     * @param subjectCategory Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subjectTaxon Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default) (optional)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getAssociationBySubjectCategorySearch(String subjectCategory, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subjectTaxon, String objectTaxon, String relation) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getAssociationBySubjectCategorySearchWithHttpInfo(subjectCategory, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subjectTaxon, objectTaxon, relation);
        return localVarResp.getData();
    }

    /**
     * Returns list of matching associations for a given subject category
     * 
     * @param subjectCategory Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subjectTaxon Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default) (optional)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getAssociationBySubjectCategorySearchWithHttpInfo(String subjectCategory, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subjectTaxon, String objectTaxon, String relation) throws ApiException {
        okhttp3.Call localVarCall = getAssociationBySubjectCategorySearchValidateBeforeCall(subjectCategory, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subjectTaxon, objectTaxon, relation, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of matching associations for a given subject category (asynchronously)
     * 
     * @param subjectCategory Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param subjectTaxon Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default) (optional)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationBySubjectCategorySearchAsync(String subjectCategory, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String subjectTaxon, String objectTaxon, String relation, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociationBySubjectCategorySearchValidateBeforeCall(subjectCategory, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, subjectTaxon, objectTaxon, relation, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssociationObject
     * @param id identifier for an association, e.g. f5ba436c-f851-41b3-9d9d-bb2b5fc879d4 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationObjectCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/association/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociationObjectValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAssociationObject(Async)");
        }

        return getAssociationObjectCall(id, _callback);

    }

    /**
     * Returns the association with a given identifier
     * An association connects, at a minimum, two things, designated subject and object, via some relationship. Associations also include evidence, provenance etc.
     * @param id identifier for an association, e.g. f5ba436c-f851-41b3-9d9d-bb2b5fc879d4 (required)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getAssociationObject(String id) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getAssociationObjectWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns the association with a given identifier
     * An association connects, at a minimum, two things, designated subject and object, via some relationship. Associations also include evidence, provenance etc.
     * @param id identifier for an association, e.g. f5ba436c-f851-41b3-9d9d-bb2b5fc879d4 (required)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getAssociationObjectWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getAssociationObjectValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the association with a given identifier (asynchronously)
     * An association connects, at a minimum, two things, designated subject and object, via some relationship. Associations also include evidence, provenance etc.
     * @param id identifier for an association, e.g. f5ba436c-f851-41b3-9d9d-bb2b5fc879d4 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationObjectAsync(String id, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociationObjectValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssociationsBetween
     * @param _object Return associations pointing to this node, e.g. MP:0013765. Can also be a biological entity such as a gene (required)
     * @param subject Return associations emanating from this node, e.g. MGI:1342287 (If ID is from an ontology then results would include inferred associations, by default) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationsBetweenCall(String _object, String subject, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/association/between/{subject}/{object}"
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "subject" + "}", localVarApiClient.escapeString(subject.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociationsBetweenValidateBeforeCall(String _object, String subject, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling getAssociationsBetween(Async)");
        }

        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling getAssociationsBetween(Async)");
        }

        return getAssociationsBetweenCall(_object, subject, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, _callback);

    }

    /**
     * Returns associations connecting two entities
     * Given two entities (e.g. a particular gene and a particular disease), if these two entities are connected (directly or indirectly), then return the association objects describing the connection.
     * @param _object Return associations pointing to this node, e.g. MP:0013765. Can also be a biological entity such as a gene (required)
     * @param subject Return associations emanating from this node, e.g. MGI:1342287 (If ID is from an ontology then results would include inferred associations, by default) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getAssociationsBetween(String _object, String subject, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getAssociationsBetweenWithHttpInfo(_object, subject, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations);
        return localVarResp.getData();
    }

    /**
     * Returns associations connecting two entities
     * Given two entities (e.g. a particular gene and a particular disease), if these two entities are connected (directly or indirectly), then return the association objects describing the connection.
     * @param _object Return associations pointing to this node, e.g. MP:0013765. Can also be a biological entity such as a gene (required)
     * @param subject Return associations emanating from this node, e.g. MGI:1342287 (If ID is from an ontology then results would include inferred associations, by default) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getAssociationsBetweenWithHttpInfo(String _object, String subject, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations) throws ApiException {
        okhttp3.Call localVarCall = getAssociationsBetweenValidateBeforeCall(_object, subject, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns associations connecting two entities (asynchronously)
     * Given two entities (e.g. a particular gene and a particular disease), if these two entities are connected (directly or indirectly), then return the association objects describing the connection.
     * @param _object Return associations pointing to this node, e.g. MP:0013765. Can also be a biological entity such as a gene (required)
     * @param subject Return associations emanating from this node, e.g. MGI:1342287 (If ID is from an ontology then results would include inferred associations, by default) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationsBetweenAsync(String _object, String subject, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociationsBetweenValidateBeforeCall(_object, subject, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssociationsFrom
     * @param subject Return associations emanating from this node, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357 (If ID is from an ontology then results would include inferred associations, by default) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationsFromCall(String subject, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String objectTaxon, String relation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/association/from/{subject}"
            .replace("{" + "subject" + "}", localVarApiClient.escapeString(subject.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        if (objectTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_taxon", objectTaxon));
        }

        if (relation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relation", relation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociationsFromValidateBeforeCall(String subject, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String objectTaxon, String relation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling getAssociationsFrom(Async)");
        }

        return getAssociationsFromCall(subject, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, objectTaxon, relation, _callback);

    }

    /**
     * Returns list of matching associations starting from a given subject (source)
     * 
     * @param subject Return associations emanating from this node, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357 (If ID is from an ontology then results would include inferred associations, by default) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getAssociationsFrom(String subject, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String objectTaxon, String relation) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getAssociationsFromWithHttpInfo(subject, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, objectTaxon, relation);
        return localVarResp.getData();
    }

    /**
     * Returns list of matching associations starting from a given subject (source)
     * 
     * @param subject Return associations emanating from this node, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357 (If ID is from an ontology then results would include inferred associations, by default) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getAssociationsFromWithHttpInfo(String subject, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String objectTaxon, String relation) throws ApiException {
        okhttp3.Call localVarCall = getAssociationsFromValidateBeforeCall(subject, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, objectTaxon, relation, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of matching associations starting from a given subject (source) (asynchronously)
     * 
     * @param subject Return associations emanating from this node, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357 (If ID is from an ontology then results would include inferred associations, by default) (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param objectTaxon Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default) (optional)
     * @param relation Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationsFromAsync(String subject, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, String objectTaxon, String relation, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociationsFromValidateBeforeCall(subject, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, objectTaxon, relation, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssociationsTo
     * @param _object Return associations pointing to this node, e.g. specifying MP:0013765 will return all genes, variants, strains, etc. annotated with this term. Can also be a biological entity such as a gene (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationsToCall(String _object, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/association/to/{object}"
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        if (unselectEvidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unselect_evidence", unselectEvidence));
        }

        if (excludeAutomaticAssertions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_automatic_assertions", excludeAutomaticAssertions));
        }

        if (useCompactAssociations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_compact_associations", useCompactAssociations));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociationsToValidateBeforeCall(String _object, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling getAssociationsTo(Async)");
        }

        return getAssociationsToCall(_object, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, _callback);

    }

    /**
     * Returns list of matching associations pointing to a given object (target)
     * 
     * @param _object Return associations pointing to this node, e.g. specifying MP:0013765 will return all genes, variants, strains, etc. annotated with this term. Can also be a biological entity such as a gene (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getAssociationsTo(String _object, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getAssociationsToWithHttpInfo(_object, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations);
        return localVarResp.getData();
    }

    /**
     * Returns list of matching associations pointing to a given object (target)
     * 
     * @param _object Return associations pointing to this node, e.g. specifying MP:0013765 will return all genes, variants, strains, etc. annotated with this term. Can also be a biological entity such as a gene (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getAssociationsToWithHttpInfo(String _object, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations) throws ApiException {
        okhttp3.Call localVarCall = getAssociationsToValidateBeforeCall(_object, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of matching associations pointing to a given object (target) (asynchronously)
     * 
     * @param _object Return associations pointing to this node, e.g. specifying MP:0013765 will return all genes, variants, strains, etc. annotated with this term. Can also be a biological entity such as a gene (required)
     * @param rows number of rows (optional, default to 100)
     * @param start beginning row (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2 (optional)
     * @param unselectEvidence If true, excludes evidence objects in response (optional, default to false)
     * @param excludeAutomaticAssertions If true, excludes associations that involve IEAs (ECO:0000501) (optional, default to false)
     * @param useCompactAssociations If true, returns results in compact associations format (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationsToAsync(String _object, Integer rows, Integer start, String evidence, Boolean unselectEvidence, Boolean excludeAutomaticAssertions, Boolean useCompactAssociations, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociationsToValidateBeforeCall(_object, rows, start, evidence, unselectEvidence, excludeAutomaticAssertions, useCompactAssociations, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
