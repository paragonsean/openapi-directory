/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IcNode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PairwiseMatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.559774-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PairwiseMatch {
  public static final String SERIALIZED_NAME_LCS = "lcs";
  @SerializedName(SERIALIZED_NAME_LCS)
  private IcNode lcs;

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private IcNode match;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private IcNode reference;

  public PairwiseMatch() {
  }

  public PairwiseMatch lcs(IcNode lcs) {
    this.lcs = lcs;
    return this;
  }

  /**
   * lowest common subsumer
   * @return lcs
   */
  @javax.annotation.Nullable
  public IcNode getLcs() {
    return lcs;
  }

  public void setLcs(IcNode lcs) {
    this.lcs = lcs;
  }


  public PairwiseMatch match(IcNode match) {
    this.match = match;
    return this;
  }

  /**
   * match id
   * @return match
   */
  @javax.annotation.Nullable
  public IcNode getMatch() {
    return match;
  }

  public void setMatch(IcNode match) {
    this.match = match;
  }


  public PairwiseMatch reference(IcNode reference) {
    this.reference = reference;
    return this;
  }

  /**
   * reference id
   * @return reference
   */
  @javax.annotation.Nullable
  public IcNode getReference() {
    return reference;
  }

  public void setReference(IcNode reference) {
    this.reference = reference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PairwiseMatch pairwiseMatch = (PairwiseMatch) o;
    return Objects.equals(this.lcs, pairwiseMatch.lcs) &&
        Objects.equals(this.match, pairwiseMatch.match) &&
        Objects.equals(this.reference, pairwiseMatch.reference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lcs, match, reference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PairwiseMatch {\n");
    sb.append("    lcs: ").append(toIndentedString(lcs)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lcs");
    openapiFields.add("match");
    openapiFields.add("reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PairwiseMatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PairwiseMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PairwiseMatch is not found in the empty JSON string", PairwiseMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PairwiseMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PairwiseMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `lcs`
      if (jsonObj.get("lcs") != null && !jsonObj.get("lcs").isJsonNull()) {
        IcNode.validateJsonElement(jsonObj.get("lcs"));
      }
      // validate the optional field `match`
      if (jsonObj.get("match") != null && !jsonObj.get("match").isJsonNull()) {
        IcNode.validateJsonElement(jsonObj.get("match"));
      }
      // validate the optional field `reference`
      if (jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) {
        IcNode.validateJsonElement(jsonObj.get("reference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PairwiseMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PairwiseMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PairwiseMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PairwiseMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<PairwiseMatch>() {
           @Override
           public void write(JsonWriter out, PairwiseMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PairwiseMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PairwiseMatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PairwiseMatch
   * @throws IOException if the JSON string is invalid with respect to PairwiseMatch
   */
  public static PairwiseMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PairwiseMatch.class);
  }

  /**
   * Convert an instance of PairwiseMatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

