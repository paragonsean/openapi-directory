/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssociationResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RelationUsageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RelationUsageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RelationUsageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRelationUsageBetweenResource
     * @param subjectCategory  (required)
     * @param objectCategory  (required)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationUsageBetweenResourceCall(String subjectCategory, String objectCategory, String subjectTaxon, String evidence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/relation/usage/between/{subject_category}/{object_category}"
            .replace("{" + "subject_category" + "}", localVarApiClient.escapeString(subjectCategory.toString()))
            .replace("{" + "object_category" + "}", localVarApiClient.escapeString(objectCategory.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subjectTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject_taxon", subjectTaxon));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationUsageBetweenResourceValidateBeforeCall(String subjectCategory, String objectCategory, String subjectTaxon, String evidence, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subjectCategory' is set
        if (subjectCategory == null) {
            throw new ApiException("Missing the required parameter 'subjectCategory' when calling getRelationUsageBetweenResource(Async)");
        }

        // verify the required parameter 'objectCategory' is set
        if (objectCategory == null) {
            throw new ApiException("Missing the required parameter 'objectCategory' when calling getRelationUsageBetweenResource(Async)");
        }

        return getRelationUsageBetweenResourceCall(subjectCategory, objectCategory, subjectTaxon, evidence, _callback);

    }

    /**
     * All relations used plus count of associations
     * 
     * @param subjectCategory  (required)
     * @param objectCategory  (required)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getRelationUsageBetweenResource(String subjectCategory, String objectCategory, String subjectTaxon, String evidence) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getRelationUsageBetweenResourceWithHttpInfo(subjectCategory, objectCategory, subjectTaxon, evidence);
        return localVarResp.getData();
    }

    /**
     * All relations used plus count of associations
     * 
     * @param subjectCategory  (required)
     * @param objectCategory  (required)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getRelationUsageBetweenResourceWithHttpInfo(String subjectCategory, String objectCategory, String subjectTaxon, String evidence) throws ApiException {
        okhttp3.Call localVarCall = getRelationUsageBetweenResourceValidateBeforeCall(subjectCategory, objectCategory, subjectTaxon, evidence, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All relations used plus count of associations (asynchronously)
     * 
     * @param subjectCategory  (required)
     * @param objectCategory  (required)
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationUsageBetweenResourceAsync(String subjectCategory, String objectCategory, String subjectTaxon, String evidence, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelationUsageBetweenResourceValidateBeforeCall(subjectCategory, objectCategory, subjectTaxon, evidence, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRelationUsagePivotLabelResource
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationUsagePivotLabelResourceCall(String subjectTaxon, String evidence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/relation/usage/pivot/label";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subjectTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject_taxon", subjectTaxon));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationUsagePivotLabelResourceValidateBeforeCall(String subjectTaxon, String evidence, final ApiCallback _callback) throws ApiException {
        return getRelationUsagePivotLabelResourceCall(subjectTaxon, evidence, _callback);

    }

    /**
     * Relation usage count for all subj x obj category combinations, showing label
     * 
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getRelationUsagePivotLabelResource(String subjectTaxon, String evidence) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getRelationUsagePivotLabelResourceWithHttpInfo(subjectTaxon, evidence);
        return localVarResp.getData();
    }

    /**
     * Relation usage count for all subj x obj category combinations, showing label
     * 
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getRelationUsagePivotLabelResourceWithHttpInfo(String subjectTaxon, String evidence) throws ApiException {
        okhttp3.Call localVarCall = getRelationUsagePivotLabelResourceValidateBeforeCall(subjectTaxon, evidence, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Relation usage count for all subj x obj category combinations, showing label (asynchronously)
     * 
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationUsagePivotLabelResourceAsync(String subjectTaxon, String evidence, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelationUsagePivotLabelResourceValidateBeforeCall(subjectTaxon, evidence, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRelationUsagePivotResource
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationUsagePivotResourceCall(String subjectTaxon, String evidence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/relation/usage/pivot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subjectTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject_taxon", subjectTaxon));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationUsagePivotResourceValidateBeforeCall(String subjectTaxon, String evidence, final ApiCallback _callback) throws ApiException {
        return getRelationUsagePivotResourceCall(subjectTaxon, evidence, _callback);

    }

    /**
     * Relation usage count for all subj x obj category combinations
     * 
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getRelationUsagePivotResource(String subjectTaxon, String evidence) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getRelationUsagePivotResourceWithHttpInfo(subjectTaxon, evidence);
        return localVarResp.getData();
    }

    /**
     * Relation usage count for all subj x obj category combinations
     * 
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getRelationUsagePivotResourceWithHttpInfo(String subjectTaxon, String evidence) throws ApiException {
        okhttp3.Call localVarCall = getRelationUsagePivotResourceValidateBeforeCall(subjectTaxon, evidence, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Relation usage count for all subj x obj category combinations (asynchronously)
     * 
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationUsagePivotResourceAsync(String subjectTaxon, String evidence, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelationUsagePivotResourceValidateBeforeCall(subjectTaxon, evidence, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRelationUsageResource
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationUsageResourceCall(String subjectTaxon, String evidence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/relation/usage/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subjectTaxon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject_taxon", subjectTaxon));
        }

        if (evidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidence", evidence));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationUsageResourceValidateBeforeCall(String subjectTaxon, String evidence, final ApiCallback _callback) throws ApiException {
        return getRelationUsageResourceCall(subjectTaxon, evidence, _callback);

    }

    /**
     * All relations used plus count of associations
     * 
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @return List&lt;AssociationResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssociationResults> getRelationUsageResource(String subjectTaxon, String evidence) throws ApiException {
        ApiResponse<List<AssociationResults>> localVarResp = getRelationUsageResourceWithHttpInfo(subjectTaxon, evidence);
        return localVarResp.getData();
    }

    /**
     * All relations used plus count of associations
     * 
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @return ApiResponse&lt;List&lt;AssociationResults&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssociationResults>> getRelationUsageResourceWithHttpInfo(String subjectTaxon, String evidence) throws ApiException {
        okhttp3.Call localVarCall = getRelationUsageResourceValidateBeforeCall(subjectTaxon, evidence, null);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All relations used plus count of associations (asynchronously)
     * 
     * @param subjectTaxon SUBJECT TAXON id, e.g. NCBITaxon:9606. Includes inferred by default (optional)
     * @param evidence Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                      (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationUsageResourceAsync(String subjectTaxon, String evidence, final ApiCallback<List<AssociationResults>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelationUsageResourceValidateBeforeCall(subjectTaxon, evidence, _callback);
        Type localVarReturnType = new TypeToken<List<AssociationResults>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
