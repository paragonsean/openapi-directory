/*
 * BioLink API
 * API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/
 *
 * The version of the OpenAPI document: 1.1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SynonymPropertyValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NamedObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:42.559774-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NamedObject {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<String> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IRI = "iri";
  @SerializedName(SERIALIZED_NAME_IRI)
  private String iri;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_CONSIDER = "consider";
  @SerializedName(SERIALIZED_NAME_CONSIDER)
  private List<String> consider = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPRECATED = "deprecated";
  @SerializedName(SERIALIZED_NAME_DEPRECATED)
  private Boolean deprecated;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_REPLACED_BY = "replaced_by";
  @SerializedName(SERIALIZED_NAME_REPLACED_BY)
  private List<String> replacedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYNONYMS = "synonyms";
  @SerializedName(SERIALIZED_NAME_SYNONYMS)
  private List<SynonymPropertyValue> synonyms = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = new ArrayList<>();

  public NamedObject() {
  }

  public NamedObject category(List<String> category) {
    this.category = category;
    return this;
  }

  public NamedObject addCategoryItem(String categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public List<String> getCategory() {
    return category;
  }

  public void setCategory(List<String> category) {
    this.category = category;
  }


  public NamedObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID or CURIE e.g. MGI:1201606
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NamedObject iri(String iri) {
    this.iri = iri;
    return this;
  }

  /**
   * IRI
   * @return iri
   */
  @javax.annotation.Nullable
  public String getIri() {
    return iri;
  }

  public void setIri(String iri) {
    this.iri = iri;
  }


  public NamedObject label(String label) {
    this.label = label;
    return this;
  }

  /**
   * RDFS Label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public NamedObject consider(List<String> consider) {
    this.consider = consider;
    return this;
  }

  public NamedObject addConsiderItem(String considerItem) {
    if (this.consider == null) {
      this.consider = new ArrayList<>();
    }
    this.consider.add(considerItem);
    return this;
  }

  /**
   * Get consider
   * @return consider
   */
  @javax.annotation.Nullable
  public List<String> getConsider() {
    return consider;
  }

  public void setConsider(List<String> consider) {
    this.consider = consider;
  }


  public NamedObject deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  /**
   * True if the node is deprecated/obsoleted.
   * @return deprecated
   */
  @javax.annotation.Nullable
  public Boolean getDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }


  public NamedObject description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Descriptive text for the entity. For ontology classes, this will be a definition.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NamedObject replacedBy(List<String> replacedBy) {
    this.replacedBy = replacedBy;
    return this;
  }

  public NamedObject addReplacedByItem(String replacedByItem) {
    if (this.replacedBy == null) {
      this.replacedBy = new ArrayList<>();
    }
    this.replacedBy.add(replacedByItem);
    return this;
  }

  /**
   * Get replacedBy
   * @return replacedBy
   */
  @javax.annotation.Nullable
  public List<String> getReplacedBy() {
    return replacedBy;
  }

  public void setReplacedBy(List<String> replacedBy) {
    this.replacedBy = replacedBy;
  }


  public NamedObject synonyms(List<SynonymPropertyValue> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public NamedObject addSynonymsItem(SynonymPropertyValue synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

  /**
   * list of synonyms or alternate labels
   * @return synonyms
   */
  @javax.annotation.Nullable
  public List<SynonymPropertyValue> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List<SynonymPropertyValue> synonyms) {
    this.synonyms = synonyms;
  }


  public NamedObject types(List<String> types) {
    this.types = types;
    return this;
  }

  public NamedObject addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * Get types
   * @return types
   */
  @javax.annotation.Nullable
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NamedObject namedObject = (NamedObject) o;
    return Objects.equals(this.category, namedObject.category) &&
        Objects.equals(this.id, namedObject.id) &&
        Objects.equals(this.iri, namedObject.iri) &&
        Objects.equals(this.label, namedObject.label) &&
        Objects.equals(this.consider, namedObject.consider) &&
        Objects.equals(this.deprecated, namedObject.deprecated) &&
        Objects.equals(this.description, namedObject.description) &&
        Objects.equals(this.replacedBy, namedObject.replacedBy) &&
        Objects.equals(this.synonyms, namedObject.synonyms) &&
        Objects.equals(this.types, namedObject.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, id, iri, label, consider, deprecated, description, replacedBy, synonyms, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NamedObject {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    iri: ").append(toIndentedString(iri)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    consider: ").append(toIndentedString(consider)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    replacedBy: ").append(toIndentedString(replacedBy)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("id");
    openapiFields.add("iri");
    openapiFields.add("label");
    openapiFields.add("consider");
    openapiFields.add("deprecated");
    openapiFields.add("description");
    openapiFields.add("replaced_by");
    openapiFields.add("synonyms");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NamedObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NamedObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NamedObject is not found in the empty JSON string", NamedObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NamedObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NamedObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NamedObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull() && !jsonObj.get("category").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("iri") != null && !jsonObj.get("iri").isJsonNull()) && !jsonObj.get("iri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iri").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("consider") != null && !jsonObj.get("consider").isJsonNull() && !jsonObj.get("consider").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `consider` to be an array in the JSON string but got `%s`", jsonObj.get("consider").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("replaced_by") != null && !jsonObj.get("replaced_by").isJsonNull() && !jsonObj.get("replaced_by").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replaced_by` to be an array in the JSON string but got `%s`", jsonObj.get("replaced_by").toString()));
      }
      if (jsonObj.get("synonyms") != null && !jsonObj.get("synonyms").isJsonNull()) {
        JsonArray jsonArraysynonyms = jsonObj.getAsJsonArray("synonyms");
        if (jsonArraysynonyms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("synonyms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `synonyms` to be an array in the JSON string but got `%s`", jsonObj.get("synonyms").toString()));
          }

          // validate the optional field `synonyms` (array)
          for (int i = 0; i < jsonArraysynonyms.size(); i++) {
            SynonymPropertyValue.validateJsonElement(jsonArraysynonyms.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NamedObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NamedObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NamedObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NamedObject.class));

       return (TypeAdapter<T>) new TypeAdapter<NamedObject>() {
           @Override
           public void write(JsonWriter out, NamedObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NamedObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NamedObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NamedObject
   * @throws IOException if the JSON string is invalid with respect to NamedObject
   */
  public static NamedObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NamedObject.class);
  }

  /**
   * Convert an instance of NamedObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

