/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BestPodcastsResponse from '../model/BestPodcastsResponse';
import CuratedListFull from '../model/CuratedListFull';
import EpisodeFull from '../model/EpisodeFull';
import EpisodeSimple from '../model/EpisodeSimple';
import GetCuratedPodcastsResponse from '../model/GetCuratedPodcastsResponse';
import GetEpisodeRecommendationsResponse from '../model/GetEpisodeRecommendationsResponse';
import GetEpisodesInBatchResponse from '../model/GetEpisodesInBatchResponse';
import GetGenresResponse from '../model/GetGenresResponse';
import GetLanguagesResponse from '../model/GetLanguagesResponse';
import GetPodcastRecommendationsResponse from '../model/GetPodcastRecommendationsResponse';
import GetPodcastsInBatchResponse from '../model/GetPodcastsInBatchResponse';
import GetRegionsResponse from '../model/GetRegionsResponse';
import PodcastFull from '../model/PodcastFull';

/**
* DirectoryAPI service.
* @module api/DirectoryAPIApi
* @version 2.0
*/
export default class DirectoryAPIApi {

    /**
    * Constructs a new DirectoryAPIApi. 
    * @alias module:api/DirectoryAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBestPodcasts operation.
     * @callback module:api/DirectoryAPIApi~getBestPodcastsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BestPodcastsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of best podcasts by genre
     * Get a list of curated best podcasts by genre, which are curated by Listen Notes staffs based on various signals from the Internet, e.g., top charts on other podcast platforms, recommendations from mainstream media, user activities on listennotes.com... You can get the genre ids from `GET /genres` endpoint. This endpoint returns same data as https://www.listennotes.com/best-podcasts/ 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {Object} opts Optional parameters
     * @param {String} [genreId] You can get the id from `GET /genres`. If not specified, it'll be the overall best podcasts, which can be considered as a special genre.
     * @param {Number} [page] Page number of those podcasts in this genre.
     * @param {String} [region = 'us')] Filter best podcasts by country/region. Please note that podcasts that are \"best\" in a country/region may not be produced in that country/region. For example, a podcast from the US may be very popular in Canada. You can get the supported country codes (e.g., us, jp, gb...) from `GET /regions`. If not specified, you'll get \"best podcasts\" in United States. 
     * @param {String} [publisherRegion] Filter best podcasts by the publisher's country/region. This is to narrow down the results to include \"best podcasts\" produced in a specific country/region. You can get the supported country codes (e.g., us, jp, gb...) from `GET /regions`. If not specified, you'll get \"best podcasts\" produced in any country/region. If you want to get a country/region's \"best podcasts\" that are also produced in that country/region, then you need to specify both **region** and **publisher_region**, e.g., `region=jp` and `publisher_region=jp`. 
     * @param {String} [language] Filter best podcasts by language. You can get a list of supported languages (e.g., English, Chinese, Japanese...) from `GET /languages`. If not specified, you'll get \"best podcasts\" in any language. 
     * @param {module:model/String} [sort = 'recent_added_first')] How do you want to sort these podcasts? If you'd like to sort by popularity, please use **listen_score**. 
     * @param {module:model/Number} [safeMode = 0)] Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no.
     * @param {module:api/DirectoryAPIApi~getBestPodcastsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BestPodcastsResponse}
     */
    getBestPodcasts(xListenAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getBestPodcasts");
      }

      let pathParams = {
      };
      let queryParams = {
        'genre_id': opts['genreId'],
        'page': opts['page'],
        'region': opts['region'],
        'publisher_region': opts['publisherRegion'],
        'language': opts['language'],
        'sort': opts['sort'],
        'safe_mode': opts['safeMode']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BestPodcastsResponse;
      return this.apiClient.callApi(
        '/best_podcasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCuratedPodcastById operation.
     * @callback module:api/DirectoryAPIApi~getCuratedPodcastByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CuratedListFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a curated list of podcasts by id
     * Get detailed meta data of all podcasts in a specific curated list. This endpoint returns same data as https://www.listennotes.com/curated-podcasts/ 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} id id for a specific curated list of podcasts. You can get the id from the response of `GET /search?type=curated` or `GET /curated_podcasts`. 
     * @param {module:api/DirectoryAPIApi~getCuratedPodcastByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CuratedListFull}
     */
    getCuratedPodcastById(xListenAPIKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getCuratedPodcastById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCuratedPodcastById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CuratedListFull;
      return this.apiClient.callApi(
        '/curated_podcasts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCuratedPodcasts operation.
     * @callback module:api/DirectoryAPIApi~getCuratedPodcastsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCuratedPodcastsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch curated lists of podcasts
     * A bunch of curated lists from online media. For each list, you'll get basic info of up to 5 podcasts. To get detailed meta data of all podcasts in a specific list, you need to use `GET /curated_podcasts/{id}`. We add new curated lists to the database on a daily basis. 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number of curated lists.
     * @param {module:api/DirectoryAPIApi~getCuratedPodcastsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCuratedPodcastsResponse}
     */
    getCuratedPodcasts(xListenAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getCuratedPodcasts");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCuratedPodcastsResponse;
      return this.apiClient.callApi(
        '/curated_podcasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEpisodeById operation.
     * @callback module:api/DirectoryAPIApi~getEpisodeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EpisodeFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch detailed meta data for an episode by id
     * Fetch detailed meta data for a specific episode.
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} id id for a specific episode. You can get episode id from using other endpoints, e.g., `GET /search`...
     * @param {Object} opts Optional parameters
     * @param {Number} [showTranscript = 0)] To include the transcript of this episode or not? If it is 1, then include the transcript in the **transcript** field. The default value is 0 - we don't include transcript by default, because 1) it would make the response data very big, thus slow response time; 2) less than 1% of episodes have transcripts. The transcript field is available only in the PRO/ENTERPRISE plan.
     * @param {module:api/DirectoryAPIApi~getEpisodeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EpisodeFull}
     */
    getEpisodeById(xListenAPIKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getEpisodeById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEpisodeById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'show_transcript': opts['showTranscript']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EpisodeFull;
      return this.apiClient.callApi(
        '/episodes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEpisodeRecommendations operation.
     * @callback module:api/DirectoryAPIApi~getEpisodeRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEpisodeRecommendationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch recommendations for an episode
     * Fetch up to 8 episode recommendations based on the given episode id.
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} id Episode id.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [safeMode = 0)] Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no.
     * @param {module:api/DirectoryAPIApi~getEpisodeRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEpisodeRecommendationsResponse}
     */
    getEpisodeRecommendations(xListenAPIKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getEpisodeRecommendations");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEpisodeRecommendations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'safe_mode': opts['safeMode']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEpisodeRecommendationsResponse;
      return this.apiClient.callApi(
        '/episodes/{id}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEpisodesInBatch operation.
     * @callback module:api/DirectoryAPIApi~getEpisodesInBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEpisodesInBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch fetch basic meta data for episodes
     * Batch fetch basic meta data for up to 10 episodes. This endpoint could be used to implement custom playlists for individual episodes. For detailed meta data of an individual episode, you need to use `GET /episodes/{id}`. This endpoint is available only in the PRO/ENTERPRISE plan. 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} ids Comma-separated list of episode ids.
     * @param {module:api/DirectoryAPIApi~getEpisodesInBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEpisodesInBatchResponse}
     */
    getEpisodesInBatch(xListenAPIKey, ids, callback) {
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getEpisodesInBatch");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getEpisodesInBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
        'ids': ids
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = GetEpisodesInBatchResponse;
      return this.apiClient.callApi(
        '/episodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenres operation.
     * @callback module:api/DirectoryAPIApi~getGenresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGenresResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of podcast genres
     * Get a list of podcast genres that are supported in Listen Notes. The genre id can be passed to other endpoints as a parameter to get podcasts in a specific genre, e.g., `GET /best_podcasts`, `GET /search`... You may want to cache the list of genres on the client side. 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [topLevelOnly = 0)] Just show top level genres? If 1, yes, just show top level genres. If 0, no, show all genres. 
     * @param {module:api/DirectoryAPIApi~getGenresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGenresResponse}
     */
    getGenres(xListenAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getGenres");
      }

      let pathParams = {
      };
      let queryParams = {
        'top_level_only': opts['topLevelOnly']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGenresResponse;
      return this.apiClient.callApi(
        '/genres', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLanguages operation.
     * @callback module:api/DirectoryAPIApi~getLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLanguagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of supported languages for podcasts
     * Get a list of languages that are supported in Listen Notes database. You can use the language string as query parameter in `GET /search`. 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {module:api/DirectoryAPIApi~getLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLanguagesResponse}
     */
    getLanguages(xListenAPIKey, callback) {
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getLanguages");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLanguagesResponse;
      return this.apiClient.callApi(
        '/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcastById operation.
     * @callback module:api/DirectoryAPIApi~getPodcastByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch detailed meta data and episodes for a podcast by id
     * Fetch detailed meta data and episodes for a specific podcast (up to 10 episodes each time). You can use the **next_episode_pub_date** parameter to do pagination and fetch more episodes. 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} id Podcast id. You can get podcast id from using other endpoints, e.g., `GET /search`, `GET /best_podcasts`...
     * @param {Object} opts Optional parameters
     * @param {Number} [nextEpisodePubDate] For episodes pagination. It's the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 10 episodes or oldest 10 episodes, depending on the value of the **sort** parameter. 
     * @param {module:model/String} [sort = 'recent_first')] How do you want to sort the episodes of this podcast? 
     * @param {module:api/DirectoryAPIApi~getPodcastByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastFull}
     */
    getPodcastById(xListenAPIKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getPodcastById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPodcastById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'next_episode_pub_date': opts['nextEpisodePubDate'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PodcastFull;
      return this.apiClient.callApi(
        '/podcasts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcastRecommendations operation.
     * @callback module:api/DirectoryAPIApi~getPodcastRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPodcastRecommendationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch recommendations for a podcast
     * Fetch up to 8 podcast recommendations based on the given podcast id.
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} id Podcast id.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [safeMode = 0)] Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no.
     * @param {module:api/DirectoryAPIApi~getPodcastRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPodcastRecommendationsResponse}
     */
    getPodcastRecommendations(xListenAPIKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getPodcastRecommendations");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPodcastRecommendations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'safe_mode': opts['safeMode']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPodcastRecommendationsResponse;
      return this.apiClient.callApi(
        '/podcasts/{id}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcastsInBatch operation.
     * @callback module:api/DirectoryAPIApi~getPodcastsInBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPodcastsInBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch fetch basic meta data for podcasts
     * Batch fetch basic meta data for up to 10 podcasts. This endpoint could be used to build something like OPML import, allowing users to import a bunch of podcasts via rss urls. For detailed meta data (including episodes) of an individual podcast, you need to use `GET /podcasts/{id}`. This endpoint is available only in the PRO/ENTERPRISE plan. 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {Object} opts Optional parameters
     * @param {String} [ids] Comma-separated list of podcast ids.
     * @param {String} [itunesIds] Comma-separated Apple Podcasts (iTunes) ids, e.g., 659155419
     * @param {Number} [nextEpisodePubDate] For latest episodes pagination. It's the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 15 episodes. 
     * @param {String} [rsses] Comma-separated rss urls.
     * @param {module:model/Number} [showLatestEpisodes = 0)] Whether or not to fetch up to 15 latest episodes from these podcasts, sorted by pub_date. 1 is yes, and 0 is no. 
     * @param {String} [spotifyIds] Comma-separated Spotify ids, e.g., 3DDfEsKDIDrTlnPOiG4ZF4
     * @param {module:api/DirectoryAPIApi~getPodcastsInBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPodcastsInBatchResponse}
     */
    getPodcastsInBatch(xListenAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getPodcastsInBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
        'ids': opts['ids'],
        'itunes_ids': opts['itunesIds'],
        'next_episode_pub_date': opts['nextEpisodePubDate'],
        'rsses': opts['rsses'],
        'show_latest_episodes': opts['showLatestEpisodes'],
        'spotify_ids': opts['spotifyIds']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = GetPodcastsInBatchResponse;
      return this.apiClient.callApi(
        '/podcasts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegions operation.
     * @callback module:api/DirectoryAPIApi~getRegionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRegionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of supported countries/regions for best podcasts
     * It returns a dictionary of country codes (e.g., us, gb...) & country names (United States, United Kingdom...). The country code is used in the query parameter **region** of `GET /best_podcasts`. 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {module:api/DirectoryAPIApi~getRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRegionsResponse}
     */
    getRegions(xListenAPIKey, callback) {
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getRegions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRegionsResponse;
      return this.apiClient.callApi(
        '/regions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the justListen operation.
     * @callback module:api/DirectoryAPIApi~justListenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EpisodeSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a random podcast episode
     * Recently published episodes are more likely to be fetched. Good luck!
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {module:api/DirectoryAPIApi~justListenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EpisodeSimple}
     */
    justListen(xListenAPIKey, callback) {
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling justListen");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EpisodeSimple;
      return this.apiClient.callApi(
        '/just_listen', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
