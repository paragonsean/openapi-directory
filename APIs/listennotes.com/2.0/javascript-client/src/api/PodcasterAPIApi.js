/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeletePodcastResponse from '../model/DeletePodcastResponse';
import SubmitPodcastResponse from '../model/SubmitPodcastResponse';

/**
* PodcasterAPI service.
* @module api/PodcasterAPIApi
* @version 2.0
*/
export default class PodcasterAPIApi {

    /**
    * Constructs a new PodcasterAPIApi. 
    * @alias module:api/PodcasterAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePodcastById operation.
     * @callback module:api/PodcasterAPIApi~deletePodcastByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePodcastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request to delete a podcast
     * Podcast hosting services can use this endpoint to streamline the process of podcast deletion on behave of their users (podcasters). We will review the deletion request within 12 hours. If the podcast is already deleted, the \"status\" field in the response will be \"deleted\". Otherwise, the status field will be \"in review\". If you want to get a notification once the podcast is deleted, you can configure a webhook url in the dashboard: listennotes.com/api/dashboard/#webhooks 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} id Podcast id. You can get podcast id from using other endpoints, e.g., `GET /search`, `GET /best_podcasts`...
     * @param {Object} opts Optional parameters
     * @param {String} [reason] The reason why this podcast should be deleted, e.g., copyright violation, the podcaster wants to delete it... You can put \"testing\" here to indicate that you are testing this endpoint, so we will not actually delete the podcast.
     * @param {module:api/PodcasterAPIApi~deletePodcastByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePodcastResponse}
     */
    deletePodcastById(xListenAPIKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling deletePodcastById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePodcastById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'reason': opts['reason']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletePodcastResponse;
      return this.apiClient.callApi(
        '/podcasts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitPodcast operation.
     * @callback module:api/PodcasterAPIApi~submitPodcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitPodcastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a podcast to Listen Notes database
     * Podcast hosting services can use this endpoint to help your users directly submit a new podcast to Listen Notes database. If the podcast doesn't exist in the database, \"status\" in the response will be \"in review\", and we'll review it within 12 hours. If the podcast exists, \"status\" in the response will be \"found\". If this submission is rejected, \"status\" in the response will be \"rejected\". You can use `POST /podcasts` to check if multiple podcasts exist in the database. If you want to get a notification once the podcast is accepted, you can either specify the \"email\" parameter or configure a webhook url in the dashboard: listennotes.com/api/dashboard/#webhooks 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} rss A valid podcast rss url.
     * @param {Object} opts Optional parameters
     * @param {String} [email] A valid email address. If **email** is specified, then we'll notify this email address once the podcast is accepted.
     * @param {module:api/PodcasterAPIApi~submitPodcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmitPodcastResponse}
     */
    submitPodcast(xListenAPIKey, rss, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling submitPodcast");
      }
      // verify the required parameter 'rss' is set
      if (rss === undefined || rss === null) {
        throw new Error("Missing the required parameter 'rss' when calling submitPodcast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
        'email': opts['email'],
        'rss': rss
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SubmitPodcastResponse;
      return this.apiClient.callApi(
        '/podcasts/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
