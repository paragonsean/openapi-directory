/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PlaylistResponse from '../model/PlaylistResponse';
import PlaylistsResponse from '../model/PlaylistsResponse';

/**
* PlaylistAPI service.
* @module api/PlaylistAPIApi
* @version 2.0
*/
export default class PlaylistAPIApi {

    /**
    * Constructs a new PlaylistAPIApi. 
    * @alias module:api/PlaylistAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPlaylistById operation.
     * @callback module:api/PlaylistAPIApi~getPlaylistByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a playlist's info and items (i.e., episodes or podcasts).
     * A playlist can be an episode list (i.e., all items are episodes) or a podcast list (i.e., all items are podcasts), which is essentially the same as those created via listennotes.com/listen/. This endpoint fetches a list of items (i.e., episodes or podcasts) in the playlist. You can use the **last_pub_date_ms** parameter to do pagination and fetch more items. A playlist can be **public** (discoverable on ListenNotes.com), **unlisted** (accessible to anyone who knows the playlist id), or **private** (accessible to its owner). You can fetch all playlists created by you, and **public** / **unlisted** playlists created by others. 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} id Playlist id (always 11 characters, e.g., m1pe7z60bsw). You can get the podcast id from the url of a playlist, e.g., m1pe7z60bsw is the playlist id of listennotes.com/listen/podcasts-about-podcasting-m1pe7z60bsw 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type = 'episode_list')] The type of this playlist, which should be either **episode_list** or **podcast_list**. 
     * @param {Number} [lastTimestampMs = 0)] For playlist items pagination. It's the value of **last_timestamp_ms** from the response of last request. If it's 0 or not specified, just return the latest or the oldest 20 items, depending on the value of the **sort** parameter. 
     * @param {module:model/String} [sort = 'recent_added_first')] How do you want to sort playlist items? 
     * @param {module:api/PlaylistAPIApi~getPlaylistByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistResponse}
     */
    getPlaylistById(xListenAPIKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getPlaylistById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPlaylistById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'type': opts['type'],
        'last_timestamp_ms': opts['lastTimestampMs'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlaylistResponse;
      return this.apiClient.callApi(
        '/playlists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylists operation.
     * @callback module:api/PlaylistAPIApi~getPlaylistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of your playlists.
     * This endpoint returns same data as listennotes.com/listen under your account. You can use the **page** parameter to do pagination and fetch more playlists. 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'recent_added_first')] How do you want to sort playlists? 
     * @param {Number} [page = 1)] Page number of playlists. 
     * @param {module:api/PlaylistAPIApi~getPlaylistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistsResponse}
     */
    getPlaylists(xListenAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getPlaylists");
      }

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'page': opts['page']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlaylistsResponse;
      return this.apiClient.callApi(
        '/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
