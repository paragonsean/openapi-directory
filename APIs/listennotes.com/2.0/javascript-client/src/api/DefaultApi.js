/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PodcastMinimumRss from '../model/PodcastMinimumRss';
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Default service.
* @module api/DefaultApi
* @version 2.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the podcastDeletedPost operation.
     * @callback module:api/DefaultApi~podcastDeletedPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {} [podcastMinimumRss] Triggered by your request to DELETE /podcasts/{id}, if the podcast is actually deleted.
     * @param {module:api/DefaultApi~podcastDeletedPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    podcastDeletedPost() {
      let postBody = opts['podcastMinimumRss'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/podcastDeleted', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the podcastsSubmitAcceptedPost operation.
     * @callback module:api/DefaultApi~podcastsSubmitAcceptedPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {} [podcastMinimumRss] Triggered by your request to POST /podcasts/submit, if the podcast submission is accepted.
     * @param {module:api/DefaultApi~podcastsSubmitAcceptedPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    podcastsSubmitAcceptedPost() {
      let postBody = opts['podcastMinimumRss'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/podcastsSubmitAccepted', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the podcastsSubmitRejectedPost operation.
     * @callback module:api/DefaultApi~podcastsSubmitRejectedPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {} [UNKNOWN_BASE_TYPE] Triggered by your request to POST /podcasts/submit, if the podcast submission is rejected.
     * @param {module:api/DefaultApi~podcastsSubmitRejectedPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    podcastsSubmitRejectedPost() {
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/podcastsSubmitRejected', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
