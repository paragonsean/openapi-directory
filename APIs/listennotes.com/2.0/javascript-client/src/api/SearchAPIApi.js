/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RelatedSearchesResponse from '../model/RelatedSearchesResponse';
import SearchResponse from '../model/SearchResponse';
import SpellCheckResponse from '../model/SpellCheckResponse';
import TrendingSearchesResponse from '../model/TrendingSearchesResponse';
import TypeaheadResponse from '../model/TypeaheadResponse';

/**
* SearchAPI service.
* @module api/SearchAPIApi
* @version 2.0
*/
export default class SearchAPIApi {

    /**
    * Constructs a new SearchAPIApi. 
    * @alias module:api/SearchAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRelatedSearches operation.
     * @callback module:api/SearchAPIApi~getRelatedSearchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedSearchesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch related search terms
     * Suggest related search terms. The results are more comprehensive than from `GET /typeahead`. This endpoint is available only in the PRO/ENTERPRISE plan.
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} q Search term, e.g., person, place, topic... 
     * @param {module:api/SearchAPIApi~getRelatedSearchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedSearchesResponse}
     */
    getRelatedSearches(xListenAPIKey, q, callback) {
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getRelatedSearches");
      }
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling getRelatedSearches");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedSearchesResponse;
      return this.apiClient.callApi(
        '/related_searches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrendingSearches operation.
     * @callback module:api/SearchAPIApi~getTrendingSearchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrendingSearchesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch trending search terms
     * Fetch up to 10 most recent trending search terms on the Listen Notes platform.
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {module:api/SearchAPIApi~getTrendingSearchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrendingSearchesResponse}
     */
    getTrendingSearches(xListenAPIKey, callback) {
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getTrendingSearches");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrendingSearchesResponse;
      return this.apiClient.callApi(
        '/trending_searches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/SearchAPIApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Full-text search
     * Full-text search on episodes, podcasts, or curated lists of podcasts. Use the `offset` parameter to paginate through search results. The FREE plan allows to see up to 30 search results (or `offset` < 30) per query. The PRO plan allows to see up to 300 search results (or `offset` < 300) per query. The ENTERPRISE plan allows to see up to 10,000 search results (or `offset` < 10000) per query. 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} q Search term, e.g., person, place, topic... You can use double quotes to do verbatim match, e.g., \"game of thrones\". Otherwise, it's fuzzy search. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [sortByDate = 0)] Sort by date or not? If 0, then sort by relevance. If 1, then sort by date. 
     * @param {module:model/String} [type = 'episode')] What type of contents do you want to search for?  
     * @param {Number} [offset = 0)] Offset for search results, for pagination. You'll use **next_offset** from response for this parameter. 
     * @param {Number} [lenMin = 0)] Minimum audio length in minutes. Applicable only when **type** parameter is **episode** or **podcast**. If **type** parameter is **episode**, it's for audio length of an episode. If **type** parameter is **podcast**, it's for average audio length of all episodes in a podcast. 
     * @param {Number} [lenMax] Maximum audio length in minutes. Applicable only when **type** parameter is **episode** or **podcast**. If **type** parameter is **episode**, it's for audio length of an episode. If **type** parameter is **podcast**, it's for average audio length of all episodes in a podcast. 
     * @param {Number} [episodeCountMin] Minimum number of episodes. Applicable only when type parameter is **podcast**. 
     * @param {Number} [episodeCountMax] Maximum number of episodes. Applicable only when type parameter is **podcast**. 
     * @param {Number} [updateFreqMin] Minimum update frequency in hours (how frequently does a podcast release a new episode). For example, if you want to find \"weekly\" podcasts, then you can set **update_freq_min**=144 hours (or 6 days) and **update_freq_max**=192 hours (or 8 days). Applicable only when type parameter is **podcast**. 
     * @param {Number} [updateFreqMax] Maximum update frequency in hours (how frequently does a podcast release a new episode). For example, if you want to find \"weekly\" podcasts, then you can set **update_freq_min**=144 hours (or 6 days) and **update_freq_max**=192 hours (or 8 days). Applicable only when type parameter is **podcast**. 
     * @param {String} [genreIds] A comma-delimited string of a list of genre ids. If not specified, then all genres are included. You can find the id and the name of all genres from `GET /genres`. It works only when **type** is *episode* or *podcast*. 
     * @param {Number} [publishedBefore] Only show episodes/podcasts/curated lists published before this timestamp (in milliseconds). If **published_before** & **published_after** are used at the same time, **published_before** should be bigger than **published_after**. 
     * @param {Number} [publishedAfter = 0)] Only show episodes/podcasts/curated lists published after this timestamp (in milliseconds). If **published_before** & **published_after** are used at the same time, **published_before** should be bigger than **published_after**. 
     * @param {String} [onlyIn = 'title,description,author,audio')] A comma-delimited string to search only in specific fields. Allowed values are title, description, author, and audio. If not specified, then search every fields. 
     * @param {String} [language] Limit search results to a specific language. If not specified, it'll be any language. You can get a list of supported languages from `GET /languages`. It works only when **type** is *episode* or *podcast*. 
     * @param {String} [region] Limit search results to a specific region (e.g., us, gb, in...). If not specified, it'll be any region. You can get the supported country codes from `GET /regions`. It works only when **type** is *episode* or *podcast*. 
     * @param {String} [ocid] A comma-delimited string of podcast ids (up to 5 podcasts) - you can get a podcast id from the **podcast_id** field in response. This parameter is to limit search results from only a few specific podcasts. It works only when **type** is *episode*. 
     * @param {String} [ncid] A comma-delimited string of podcast ids (up to 5 podcasts) - you can get a podcast id from the **podcast_id** field in response. This parameter is to exclude search results of a few specific podcasts. It works only when **type** is *episode*. 
     * @param {module:model/Number} [safeMode = 0)] Whether or not to exclude podcasts/episodes with explicit language. 1 is yes and 0 is no. It works only when **type** is *episode* or *podcast*. 
     * @param {module:model/Number} [uniquePodcasts = 0)] Whether or not to keep only one episode per podcast in search results. 1 is yes and 0 is no. It works only when **type** is *episode*. 
     * @param {Number} [pageSize = 10)] The maximum number of search results per page. A valid value should be an integer between 1 and 10 (inclusive). 
     * @param {module:api/SearchAPIApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResponse}
     */
    search(xListenAPIKey, q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling search");
      }
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling search");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'sort_by_date': opts['sortByDate'],
        'type': opts['type'],
        'offset': opts['offset'],
        'len_min': opts['lenMin'],
        'len_max': opts['lenMax'],
        'episode_count_min': opts['episodeCountMin'],
        'episode_count_max': opts['episodeCountMax'],
        'update_freq_min': opts['updateFreqMin'],
        'update_freq_max': opts['updateFreqMax'],
        'genre_ids': opts['genreIds'],
        'published_before': opts['publishedBefore'],
        'published_after': opts['publishedAfter'],
        'only_in': opts['onlyIn'],
        'language': opts['language'],
        'region': opts['region'],
        'ocid': opts['ocid'],
        'ncid': opts['ncid'],
        'safe_mode': opts['safeMode'],
        'unique_podcasts': opts['uniquePodcasts'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResponse;
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spellcheck operation.
     * @callback module:api/SearchAPIApi~spellcheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpellCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Spell check on a search term
     * Suggest a list of words that correct the spelling errors of a search term. This endpoint is available only in the PRO/ENTERPRISE plan.
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} q Search term, e.g., person, place, topic... 
     * @param {module:api/SearchAPIApi~spellcheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpellCheckResponse}
     */
    spellcheck(xListenAPIKey, q, callback) {
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling spellcheck");
      }
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling spellcheck");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SpellCheckResponse;
      return this.apiClient.callApi(
        '/spellcheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the typeahead operation.
     * @callback module:api/SearchAPIApi~typeaheadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TypeaheadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Typeahead search
     * Suggest search terms, podcast genres, and podcasts.
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} q Search term, e.g., person, place, topic... You can use double quotes to do verbatim match, e.g., \"game of thrones\". Otherwise, it's fuzzy search. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [showPodcasts = 0)] Autosuggest podcasts. This only searches podcast title and publisher and returns very limited info of 5 podcasts. 1 is yes, 0 is no. It's a bit slow to autosuggest podcasts, so we turn it off by default. If show_podcasts=1, you can also pass iTunes id (e.g., 474722933) to the q parameter to fetch podcast meta data. 
     * @param {module:model/Number} [showGenres = 0)] Whether or not to autosuggest genres. 1 is yes, 0 is no. 
     * @param {module:model/Number} [safeMode = 0)] Whether or not to exclude podcasts/episodes with explicit language. 1 is yes and 0 is no. It works only when **show_podcasts** is *1*. 
     * @param {module:api/SearchAPIApi~typeaheadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TypeaheadResponse}
     */
    typeahead(xListenAPIKey, q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling typeahead");
      }
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling typeahead");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'show_podcasts': opts['showPodcasts'],
        'show_genres': opts['showGenres'],
        'safe_mode': opts['safeMode']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TypeaheadResponse;
      return this.apiClient.callApi(
        '/typeahead', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
