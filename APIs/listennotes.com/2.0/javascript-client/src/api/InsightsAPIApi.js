/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PodcastAudienceResponse from '../model/PodcastAudienceResponse';
import PodcastDomainResponse from '../model/PodcastDomainResponse';

/**
* InsightsAPI service.
* @module api/InsightsAPIApi
* @version 2.0
*/
export default class InsightsAPIApi {

    /**
    * Constructs a new InsightsAPIApi. 
    * @alias module:api/InsightsAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPodcastAudience operation.
     * @callback module:api/InsightsAPIApi~getPodcastAudienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastAudienceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch audience demographics for a podcast
     * Fetch audience demographics for a podcast - 1) directly measured on the Listen Notes platform; 2) only supports audience breakdown by regions for now; 3) not every podcast has data.
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} id Podcast id.
     * @param {module:api/InsightsAPIApi~getPodcastAudienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastAudienceResponse}
     */
    getPodcastAudience(xListenAPIKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getPodcastAudience");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPodcastAudience");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PodcastAudienceResponse;
      return this.apiClient.callApi(
        '/podcasts/{id}/audience', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcastsByDomainName operation.
     * @callback module:api/InsightsAPIApi~getPodcastsByDomainNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch podcasts by a publisher's domain name
     * Fetch podcasts by a publisher's domain name, e.g., nytimes.com, wondery.com, npr.org... Each request will return up to 10 podcasts. You can use the `page` parameter to paginate. 
     * @param {String} xListenAPIKey Get API Key on listennotes.com/api
     * @param {String} domainName A publisher's domain name, e.g., nytimes.com, wondery.com, npr.org...
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number of the podcasts from this domain name
     * @param {module:api/InsightsAPIApi~getPodcastsByDomainNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastDomainResponse}
     */
    getPodcastsByDomainName(xListenAPIKey, domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xListenAPIKey' is set
      if (xListenAPIKey === undefined || xListenAPIKey === null) {
        throw new Error("Missing the required parameter 'xListenAPIKey' when calling getPodcastsByDomainName");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getPodcastsByDomainName");
      }

      let pathParams = {
        'domain_name': domainName
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
        'X-ListenAPI-Key': xListenAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PodcastDomainResponse;
      return this.apiClient.callApi(
        '/podcasts/domains/{domain_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
