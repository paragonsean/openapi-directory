/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodcastSimple from './PodcastSimple';

/**
 * The PodcastDomainResponse model module.
 * @module model/PodcastDomainResponse
 * @version 2.0
 */
class PodcastDomainResponse {
    /**
     * Constructs a new <code>PodcastDomainResponse</code>.
     * @alias module:model/PodcastDomainResponse
     */
    constructor() { 
        
        PodcastDomainResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PodcastDomainResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodcastDomainResponse} obj Optional instance to populate.
     * @return {module:model/PodcastDomainResponse} The populated <code>PodcastDomainResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodcastDomainResponse();

            if (data.hasOwnProperty('has_next')) {
                obj['has_next'] = ApiClient.convertToType(data['has_next'], 'Boolean');
            }
            if (data.hasOwnProperty('has_previous')) {
                obj['has_previous'] = ApiClient.convertToType(data['has_previous'], 'Boolean');
            }
            if (data.hasOwnProperty('next_page_number')) {
                obj['next_page_number'] = ApiClient.convertToType(data['next_page_number'], 'Number');
            }
            if (data.hasOwnProperty('page_number')) {
                obj['page_number'] = ApiClient.convertToType(data['page_number'], 'Number');
            }
            if (data.hasOwnProperty('podcasts')) {
                obj['podcasts'] = ApiClient.convertToType(data['podcasts'], [PodcastSimple]);
            }
            if (data.hasOwnProperty('previous_page_number')) {
                obj['previous_page_number'] = ApiClient.convertToType(data['previous_page_number'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodcastDomainResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodcastDomainResponse</code>.
     */
    static validateJSON(data) {
        if (data['podcasts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['podcasts'])) {
                throw new Error("Expected the field `podcasts` to be an array in the JSON data but got " + data['podcasts']);
            }
            // validate the optional field `podcasts` (array)
            for (const item of data['podcasts']) {
                PodcastSimple.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Boolean} has_next
 */
PodcastDomainResponse.prototype['has_next'] = undefined;

/**
 * @member {Boolean} has_previous
 */
PodcastDomainResponse.prototype['has_previous'] = undefined;

/**
 * @member {Number} next_page_number
 */
PodcastDomainResponse.prototype['next_page_number'] = undefined;

/**
 * @member {Number} page_number
 */
PodcastDomainResponse.prototype['page_number'] = undefined;

/**
 * @member {Array.<module:model/PodcastSimple>} podcasts
 */
PodcastDomainResponse.prototype['podcasts'] = undefined;

/**
 * @member {Number} previous_page_number
 */
PodcastDomainResponse.prototype['previous_page_number'] = undefined;






export default PodcastDomainResponse;

