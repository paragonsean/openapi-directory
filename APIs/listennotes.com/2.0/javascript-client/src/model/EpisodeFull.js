/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodcastSimple from './PodcastSimple';

/**
 * The EpisodeFull model module.
 * @module model/EpisodeFull
 * @version 2.0
 */
class EpisodeFull {
    /**
     * Constructs a new <code>EpisodeFull</code>.
     * @alias module:model/EpisodeFull
     */
    constructor() { 
        
        EpisodeFull.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EpisodeFull</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EpisodeFull} obj Optional instance to populate.
     * @return {module:model/EpisodeFull} The populated <code>EpisodeFull</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EpisodeFull();

            if (data.hasOwnProperty('audio')) {
                obj['audio'] = ApiClient.convertToType(data['audio'], 'String');
            }
            if (data.hasOwnProperty('audio_length_sec')) {
                obj['audio_length_sec'] = ApiClient.convertToType(data['audio_length_sec'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('explicit_content')) {
                obj['explicit_content'] = ApiClient.convertToType(data['explicit_content'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('listennotes_edit_url')) {
                obj['listennotes_edit_url'] = ApiClient.convertToType(data['listennotes_edit_url'], 'String');
            }
            if (data.hasOwnProperty('listennotes_url')) {
                obj['listennotes_url'] = ApiClient.convertToType(data['listennotes_url'], 'String');
            }
            if (data.hasOwnProperty('maybe_audio_invalid')) {
                obj['maybe_audio_invalid'] = ApiClient.convertToType(data['maybe_audio_invalid'], 'Boolean');
            }
            if (data.hasOwnProperty('podcast')) {
                obj['podcast'] = PodcastSimple.constructFromObject(data['podcast']);
            }
            if (data.hasOwnProperty('pub_date_ms')) {
                obj['pub_date_ms'] = ApiClient.convertToType(data['pub_date_ms'], 'Number');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('transcript')) {
                obj['transcript'] = ApiClient.convertToType(data['transcript'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EpisodeFull</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EpisodeFull</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['audio'] && !(typeof data['audio'] === 'string' || data['audio'] instanceof String)) {
            throw new Error("Expected the field `audio` to be a primitive type in the JSON string but got " + data['audio']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['listennotes_edit_url'] && !(typeof data['listennotes_edit_url'] === 'string' || data['listennotes_edit_url'] instanceof String)) {
            throw new Error("Expected the field `listennotes_edit_url` to be a primitive type in the JSON string but got " + data['listennotes_edit_url']);
        }
        // ensure the json data is a string
        if (data['listennotes_url'] && !(typeof data['listennotes_url'] === 'string' || data['listennotes_url'] instanceof String)) {
            throw new Error("Expected the field `listennotes_url` to be a primitive type in the JSON string but got " + data['listennotes_url']);
        }
        // validate the optional field `podcast`
        if (data['podcast']) { // data not null
          PodcastSimple.validateJSON(data['podcast']);
        }
        // ensure the json data is a string
        if (data['thumbnail'] && !(typeof data['thumbnail'] === 'string' || data['thumbnail'] instanceof String)) {
            throw new Error("Expected the field `thumbnail` to be a primitive type in the JSON string but got " + data['thumbnail']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['transcript'] && !(typeof data['transcript'] === 'string' || data['transcript'] instanceof String)) {
            throw new Error("Expected the field `transcript` to be a primitive type in the JSON string but got " + data['transcript']);
        }

        return true;
    }


}



/**
 * Audio url of this episode, which can be played directly.
 * @member {String} audio
 */
EpisodeFull.prototype['audio'] = undefined;

/**
 * Audio length of this episode. In seconds.
 * @member {Number} audio_length_sec
 */
EpisodeFull.prototype['audio_length_sec'] = undefined;

/**
 * Html of this episode's full description
 * @member {String} description
 */
EpisodeFull.prototype['description'] = undefined;

/**
 * Whether this podcast contains explicit language.
 * @member {Boolean} explicit_content
 */
EpisodeFull.prototype['explicit_content'] = undefined;

/**
 * Episode id, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`.
 * @member {String} id
 */
EpisodeFull.prototype['id'] = undefined;

/**
 * Image url for this episode. If an episode doesn't have its own image, then this field would be the url of the podcast artwork image. If you are using PRO/ENTERPRISE plan, then it's a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**, low resolution image (300x300). 
 * @member {String} image
 */
EpisodeFull.prototype['image'] = undefined;

/**
 * Web link of this episode.
 * @member {String} link
 */
EpisodeFull.prototype['link'] = undefined;

/**
 * Edit url of this episode where you can update the audio url if you find the audio is broken.
 * @member {String} listennotes_edit_url
 */
EpisodeFull.prototype['listennotes_edit_url'] = undefined;

/**
 * The url of this episode on [ListenNotes.com](https://www.ListenNotes.com).
 * @member {String} listennotes_url
 */
EpisodeFull.prototype['listennotes_url'] = undefined;

/**
 * Whether or not this episode's audio is invalid. Podcasters may delete the original audio.
 * @member {Boolean} maybe_audio_invalid
 */
EpisodeFull.prototype['maybe_audio_invalid'] = undefined;

/**
 * @member {module:model/PodcastSimple} podcast
 */
EpisodeFull.prototype['podcast'] = undefined;

/**
 * Published date for this episode. In millisecond.
 * @member {Number} pub_date_ms
 */
EpisodeFull.prototype['pub_date_ms'] = undefined;

/**
 * Thumbnail image (300x300) url for this episode. If an episode doesn't have its own image, then this field would be the url of the podcast artwork thumbnail image. 
 * @member {String} thumbnail
 */
EpisodeFull.prototype['thumbnail'] = undefined;

/**
 * Episode name.
 * @member {String} title
 */
EpisodeFull.prototype['title'] = undefined;

/**
 * The transcript of this episode, in plain text (with the newline character \\n). If there's not transcript, it is null. This field is available only in the PRO/ENTERPRISE plan.
 * @member {String} transcript
 */
EpisodeFull.prototype['transcript'] = undefined;






export default EpisodeFull;

