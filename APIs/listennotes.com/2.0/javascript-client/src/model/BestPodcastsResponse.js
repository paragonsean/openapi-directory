/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodcastSimple from './PodcastSimple';

/**
 * The BestPodcastsResponse model module.
 * @module model/BestPodcastsResponse
 * @version 2.0
 */
class BestPodcastsResponse {
    /**
     * Constructs a new <code>BestPodcastsResponse</code>.
     * @alias module:model/BestPodcastsResponse
     * @param hasNext {Boolean} 
     * @param hasPrevious {Boolean} 
     * @param id {Number} The id of this genre
     * @param listennotesUrl {String} Url of the list of best podcasts on [ListenNotes.com](https://www.ListenNotes.com).
     * @param name {String} This genre's name.
     * @param nextPageNumber {Number} 
     * @param pageNumber {Number} 
     * @param parentId {Number} The id of parent genre.
     * @param podcasts {Array.<module:model/PodcastSimple>} 
     * @param previousPageNumber {Number} 
     * @param total {Number} 
     */
    constructor(hasNext, hasPrevious, id, listennotesUrl, name, nextPageNumber, pageNumber, parentId, podcasts, previousPageNumber, total) { 
        
        BestPodcastsResponse.initialize(this, hasNext, hasPrevious, id, listennotesUrl, name, nextPageNumber, pageNumber, parentId, podcasts, previousPageNumber, total);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hasNext, hasPrevious, id, listennotesUrl, name, nextPageNumber, pageNumber, parentId, podcasts, previousPageNumber, total) { 
        obj['has_next'] = hasNext;
        obj['has_previous'] = hasPrevious;
        obj['id'] = id;
        obj['listennotes_url'] = listennotesUrl;
        obj['name'] = name;
        obj['next_page_number'] = nextPageNumber;
        obj['page_number'] = pageNumber;
        obj['parent_id'] = parentId;
        obj['podcasts'] = podcasts;
        obj['previous_page_number'] = previousPageNumber;
        obj['total'] = total;
    }

    /**
     * Constructs a <code>BestPodcastsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BestPodcastsResponse} obj Optional instance to populate.
     * @return {module:model/BestPodcastsResponse} The populated <code>BestPodcastsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BestPodcastsResponse();

            if (data.hasOwnProperty('has_next')) {
                obj['has_next'] = ApiClient.convertToType(data['has_next'], 'Boolean');
            }
            if (data.hasOwnProperty('has_previous')) {
                obj['has_previous'] = ApiClient.convertToType(data['has_previous'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('listennotes_url')) {
                obj['listennotes_url'] = ApiClient.convertToType(data['listennotes_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('next_page_number')) {
                obj['next_page_number'] = ApiClient.convertToType(data['next_page_number'], 'Number');
            }
            if (data.hasOwnProperty('page_number')) {
                obj['page_number'] = ApiClient.convertToType(data['page_number'], 'Number');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
            if (data.hasOwnProperty('podcasts')) {
                obj['podcasts'] = ApiClient.convertToType(data['podcasts'], [PodcastSimple]);
            }
            if (data.hasOwnProperty('previous_page_number')) {
                obj['previous_page_number'] = ApiClient.convertToType(data['previous_page_number'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BestPodcastsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BestPodcastsResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BestPodcastsResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['listennotes_url'] && !(typeof data['listennotes_url'] === 'string' || data['listennotes_url'] instanceof String)) {
            throw new Error("Expected the field `listennotes_url` to be a primitive type in the JSON string but got " + data['listennotes_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['podcasts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['podcasts'])) {
                throw new Error("Expected the field `podcasts` to be an array in the JSON data but got " + data['podcasts']);
            }
            // validate the optional field `podcasts` (array)
            for (const item of data['podcasts']) {
                PodcastSimple.validateJSON(item);
            };
        }

        return true;
    }


}

BestPodcastsResponse.RequiredProperties = ["has_next", "has_previous", "id", "listennotes_url", "name", "next_page_number", "page_number", "parent_id", "podcasts", "previous_page_number", "total"];

/**
 * @member {Boolean} has_next
 */
BestPodcastsResponse.prototype['has_next'] = undefined;

/**
 * @member {Boolean} has_previous
 */
BestPodcastsResponse.prototype['has_previous'] = undefined;

/**
 * The id of this genre
 * @member {Number} id
 */
BestPodcastsResponse.prototype['id'] = undefined;

/**
 * Url of the list of best podcasts on [ListenNotes.com](https://www.ListenNotes.com).
 * @member {String} listennotes_url
 */
BestPodcastsResponse.prototype['listennotes_url'] = undefined;

/**
 * This genre's name.
 * @member {String} name
 */
BestPodcastsResponse.prototype['name'] = undefined;

/**
 * @member {Number} next_page_number
 */
BestPodcastsResponse.prototype['next_page_number'] = undefined;

/**
 * @member {Number} page_number
 */
BestPodcastsResponse.prototype['page_number'] = undefined;

/**
 * The id of parent genre.
 * @member {Number} parent_id
 */
BestPodcastsResponse.prototype['parent_id'] = undefined;

/**
 * @member {Array.<module:model/PodcastSimple>} podcasts
 */
BestPodcastsResponse.prototype['podcasts'] = undefined;

/**
 * @member {Number} previous_page_number
 */
BestPodcastsResponse.prototype['previous_page_number'] = undefined;

/**
 * @member {Number} total
 */
BestPodcastsResponse.prototype['total'] = undefined;






export default BestPodcastsResponse;

