/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodcastMinimum from './PodcastMinimum';

/**
 * The SubmitPodcastResponse model module.
 * @module model/SubmitPodcastResponse
 * @version 2.0
 */
class SubmitPodcastResponse {
    /**
     * Constructs a new <code>SubmitPodcastResponse</code>.
     * @alias module:model/SubmitPodcastResponse
     * @param podcast {module:model/PodcastMinimum} 
     * @param status {module:model/SubmitPodcastResponse.StatusEnum} The status of this submission.
     */
    constructor(podcast, status) { 
        
        SubmitPodcastResponse.initialize(this, podcast, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, podcast, status) { 
        obj['podcast'] = podcast;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>SubmitPodcastResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubmitPodcastResponse} obj Optional instance to populate.
     * @return {module:model/SubmitPodcastResponse} The populated <code>SubmitPodcastResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubmitPodcastResponse();

            if (data.hasOwnProperty('podcast')) {
                obj['podcast'] = PodcastMinimum.constructFromObject(data['podcast']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubmitPodcastResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubmitPodcastResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubmitPodcastResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `podcast`
        if (data['podcast']) { // data not null
          PodcastMinimum.validateJSON(data['podcast']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

SubmitPodcastResponse.RequiredProperties = ["podcast", "status"];

/**
 * @member {module:model/PodcastMinimum} podcast
 */
SubmitPodcastResponse.prototype['podcast'] = undefined;

/**
 * The status of this submission.
 * @member {module:model/SubmitPodcastResponse.StatusEnum} status
 */
SubmitPodcastResponse.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SubmitPodcastResponse['StatusEnum'] = {

    /**
     * value: "found"
     * @const
     */
    "found": "found",

    /**
     * value: "in review"
     * @const
     */
    "in review": "in review",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected"
};



export default SubmitPodcastResponse;

