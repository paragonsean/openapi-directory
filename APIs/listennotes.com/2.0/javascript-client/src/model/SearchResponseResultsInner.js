/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CuratedListSearchResult from './CuratedListSearchResult';
import EpisodeSearchResult from './EpisodeSearchResult';
import EpisodeSearchResultPodcast from './EpisodeSearchResultPodcast';
import PodcastMinimum from './PodcastMinimum';
import PodcastSearchResult from './PodcastSearchResult';

/**
 * The SearchResponseResultsInner model module.
 * @module model/SearchResponseResultsInner
 * @version 2.0
 */
class SearchResponseResultsInner {
    /**
     * Constructs a new <code>SearchResponseResultsInner</code>.
     * @alias module:model/SearchResponseResultsInner
     * @param {(module:model/CuratedListSearchResult|module:model/EpisodeSearchResult|module:model/PodcastSearchResult)} instance The actual instance to initialize SearchResponseResultsInner.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "EpisodeSearchResult") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                EpisodeSearchResult.validateJSON(instance); // throw an exception if no match
                // create EpisodeSearchResult from JS object
                this.actualInstance = EpisodeSearchResult.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EpisodeSearchResult
            errorMessages.push("Failed to construct EpisodeSearchResult: " + err)
        }

        try {
            if (typeof instance === "PodcastSearchResult") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PodcastSearchResult.validateJSON(instance); // throw an exception if no match
                // create PodcastSearchResult from JS object
                this.actualInstance = PodcastSearchResult.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PodcastSearchResult
            errorMessages.push("Failed to construct PodcastSearchResult: " + err)
        }

        try {
            if (typeof instance === "CuratedListSearchResult") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CuratedListSearchResult.validateJSON(instance); // throw an exception if no match
                // create CuratedListSearchResult from JS object
                this.actualInstance = CuratedListSearchResult.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CuratedListSearchResult
            errorMessages.push("Failed to construct CuratedListSearchResult: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SearchResponseResultsInner` with oneOf schemas CuratedListSearchResult, EpisodeSearchResult, PodcastSearchResult. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SearchResponseResultsInner` with oneOf schemas CuratedListSearchResult, EpisodeSearchResult, PodcastSearchResult. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SearchResponseResultsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchResponseResultsInner} obj Optional instance to populate.
     * @return {module:model/SearchResponseResultsInner} The populated <code>SearchResponseResultsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SearchResponseResultsInner(data);
    }

    /**
     * Gets the actual instance, which can be <code>CuratedListSearchResult</code>, <code>EpisodeSearchResult</code>, <code>PodcastSearchResult</code>.
     * @return {(module:model/CuratedListSearchResult|module:model/EpisodeSearchResult|module:model/PodcastSearchResult)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CuratedListSearchResult</code>, <code>EpisodeSearchResult</code>, <code>PodcastSearchResult</code>.
     * @param {(module:model/CuratedListSearchResult|module:model/EpisodeSearchResult|module:model/PodcastSearchResult)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SearchResponseResultsInner.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SearchResponseResultsInner from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SearchResponseResultsInner} An instance of SearchResponseResultsInner.
     */
    static fromJSON = function(json_string){
        return SearchResponseResultsInner.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Audio url of this episode, which can be played directly.
 * @member {String} audio
 */
SearchResponseResultsInner.prototype['audio'] = undefined;

/**
 * Average audio length of all episodes of this podcast. In seconds.
 * @member {Number} audio_length_sec
 */
SearchResponseResultsInner.prototype['audio_length_sec'] = undefined;

/**
 * Highlighted segment of this curated list's description
 * @member {String} description_highlighted
 */
SearchResponseResultsInner.prototype['description_highlighted'] = undefined;

/**
 * Plain text of this curated list's description
 * @member {String} description_original
 */
SearchResponseResultsInner.prototype['description_original'] = undefined;

/**
 * Whether this podcast contains explicit language.
 * @member {Boolean} explicit_content
 */
SearchResponseResultsInner.prototype['explicit_content'] = undefined;

/**
 * Curated list id, which can be used to further fetch detailed curated list metadata via `GET /curated_podcasts/{id}`.
 * @member {String} id
 */
SearchResponseResultsInner.prototype['id'] = undefined;

/**
 * Image url for this podcast's artwork. If you are using PRO/ENTERPRISE plan, then it's a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**, low resolution image (300x300). 
 * @member {String} image
 */
SearchResponseResultsInner.prototype['image'] = undefined;

/**
 * iTunes id for this podcast.
 * @member {Number} itunes_id
 */
SearchResponseResultsInner.prototype['itunes_id'] = undefined;

/**
 * Web link of this episode.
 * @member {String} link
 */
SearchResponseResultsInner.prototype['link'] = undefined;

/**
 * The url of this curated list on [ListenNotes.com](https://www.ListenNotes.com).
 * @member {String} listennotes_url
 */
SearchResponseResultsInner.prototype['listennotes_url'] = undefined;

/**
 * @member {module:model/EpisodeSearchResultPodcast} podcast
 */
SearchResponseResultsInner.prototype['podcast'] = undefined;

/**
 * Published date of this curated list. In milliseconds.
 * @member {Number} pub_date_ms
 */
SearchResponseResultsInner.prototype['pub_date_ms'] = undefined;

/**
 * RSS url of this podcast. This field is available only in the PRO/ENTERPRISE plan.
 * @member {String} rss
 */
SearchResponseResultsInner.prototype['rss'] = undefined;

/**
 * Thumbnail image url for this podcast's artwork (300x300).
 * @member {String} thumbnail
 */
SearchResponseResultsInner.prototype['thumbnail'] = undefined;

/**
 * Highlighted segment of this curated list's title
 * @member {String} title_highlighted
 */
SearchResponseResultsInner.prototype['title_highlighted'] = undefined;

/**
 * Plain text of this curated list's title
 * @member {String} title_original
 */
SearchResponseResultsInner.prototype['title_original'] = undefined;

/**
 * Up to 2 highlighted segments of the audio transcript of this episode.
 * @member {Array.<String>} transcripts_highlighted
 */
SearchResponseResultsInner.prototype['transcripts_highlighted'] = undefined;

/**
 * The published date of the oldest episode of this podcast. In milliseconds
 * @member {Number} earliest_pub_date_ms
 */
SearchResponseResultsInner.prototype['earliest_pub_date_ms'] = undefined;

/**
 * The email of this podcast's producer. This field is available only in the PRO/ENTERPRISE plan.
 * @member {String} email
 */
SearchResponseResultsInner.prototype['email'] = undefined;

/**
 * @member {Array.<Number>} genre_ids
 */
SearchResponseResultsInner.prototype['genre_ids'] = undefined;

/**
 * The id of the most recently published episode of this podcast, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`.
 * @member {String} latest_episode_id
 */
SearchResponseResultsInner.prototype['latest_episode_id'] = undefined;

/**
 * The published date of the latest episode of this podcast. In milliseconds
 * @member {Number} latest_pub_date_ms
 */
SearchResponseResultsInner.prototype['latest_pub_date_ms'] = undefined;

/**
 * The estimated popularity score of a podcast compared to all other rss-based public podcasts in the world on a scale from 0 to 100. If the score is not available, it'll be null. Learn more at listennotes.com/listen-score 
 * @member {Number} listen_score
 */
SearchResponseResultsInner.prototype['listen_score'] = undefined;

/**
 * The estimated popularity ranking of a podcast compared to all other rss-based public podcasts in the world. For example, if the value is 0.5%, then this podcast is one of the top 0.5% most popular shows out of all podcasts globally, ranked by Listen Score. If the ranking is not available, it'll be null. Learn more at listennotes.com/listen-score 
 * @member {String} listen_score_global_rank
 */
SearchResponseResultsInner.prototype['listen_score_global_rank'] = undefined;

/**
 * Highlighted segment of this podcast's publisher name.
 * @member {String} publisher_highlighted
 */
SearchResponseResultsInner.prototype['publisher_highlighted'] = undefined;

/**
 * Plain text of this podcast's publisher name.
 * @member {String} publisher_original
 */
SearchResponseResultsInner.prototype['publisher_original'] = undefined;

/**
 * Total number of episodes in this podcast.
 * @member {Number} total_episodes
 */
SearchResponseResultsInner.prototype['total_episodes'] = undefined;

/**
 * How frequently does this podcast release a new episode? In hours. For example, if the value is 166, then it's every 166 hours (or weekly).
 * @member {Number} update_frequency_hours
 */
SearchResponseResultsInner.prototype['update_frequency_hours'] = undefined;

/**
 * Website url of this podcast.
 * @member {String} website
 */
SearchResponseResultsInner.prototype['website'] = undefined;

/**
 * Up to 5 podcasts in this curated list.
 * @member {Array.<module:model/PodcastMinimum>} podcasts
 */
SearchResponseResultsInner.prototype['podcasts'] = undefined;

/**
 * The domain name of the source of this curated list.
 * @member {String} source_domain
 */
SearchResponseResultsInner.prototype['source_domain'] = undefined;

/**
 * Url of the source of this curated list.
 * @member {String} source_url
 */
SearchResponseResultsInner.prototype['source_url'] = undefined;

/**
 * The total number of podcasts in this curated list.
 * @member {Number} total
 */
SearchResponseResultsInner.prototype['total'] = undefined;


SearchResponseResultsInner.OneOf = ["CuratedListSearchResult", "EpisodeSearchResult", "PodcastSearchResult"];

export default SearchResponseResultsInner;

