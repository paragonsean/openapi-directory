/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodcastMinimum from './PodcastMinimum';

/**
 * The CuratedListSearchResult model module.
 * @module model/CuratedListSearchResult
 * @version 2.0
 */
class CuratedListSearchResult {
    /**
     * Constructs a new <code>CuratedListSearchResult</code>.
     * When **type** is *curated*.
     * @alias module:model/CuratedListSearchResult
     */
    constructor() { 
        
        CuratedListSearchResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CuratedListSearchResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CuratedListSearchResult} obj Optional instance to populate.
     * @return {module:model/CuratedListSearchResult} The populated <code>CuratedListSearchResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CuratedListSearchResult();

            if (data.hasOwnProperty('description_highlighted')) {
                obj['description_highlighted'] = ApiClient.convertToType(data['description_highlighted'], 'String');
            }
            if (data.hasOwnProperty('description_original')) {
                obj['description_original'] = ApiClient.convertToType(data['description_original'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('listennotes_url')) {
                obj['listennotes_url'] = ApiClient.convertToType(data['listennotes_url'], 'String');
            }
            if (data.hasOwnProperty('podcasts')) {
                obj['podcasts'] = ApiClient.convertToType(data['podcasts'], [PodcastMinimum]);
            }
            if (data.hasOwnProperty('pub_date_ms')) {
                obj['pub_date_ms'] = ApiClient.convertToType(data['pub_date_ms'], 'Number');
            }
            if (data.hasOwnProperty('source_domain')) {
                obj['source_domain'] = ApiClient.convertToType(data['source_domain'], 'String');
            }
            if (data.hasOwnProperty('source_url')) {
                obj['source_url'] = ApiClient.convertToType(data['source_url'], 'String');
            }
            if (data.hasOwnProperty('title_highlighted')) {
                obj['title_highlighted'] = ApiClient.convertToType(data['title_highlighted'], 'String');
            }
            if (data.hasOwnProperty('title_original')) {
                obj['title_original'] = ApiClient.convertToType(data['title_original'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CuratedListSearchResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CuratedListSearchResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description_highlighted'] && !(typeof data['description_highlighted'] === 'string' || data['description_highlighted'] instanceof String)) {
            throw new Error("Expected the field `description_highlighted` to be a primitive type in the JSON string but got " + data['description_highlighted']);
        }
        // ensure the json data is a string
        if (data['description_original'] && !(typeof data['description_original'] === 'string' || data['description_original'] instanceof String)) {
            throw new Error("Expected the field `description_original` to be a primitive type in the JSON string but got " + data['description_original']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['listennotes_url'] && !(typeof data['listennotes_url'] === 'string' || data['listennotes_url'] instanceof String)) {
            throw new Error("Expected the field `listennotes_url` to be a primitive type in the JSON string but got " + data['listennotes_url']);
        }
        if (data['podcasts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['podcasts'])) {
                throw new Error("Expected the field `podcasts` to be an array in the JSON data but got " + data['podcasts']);
            }
            // validate the optional field `podcasts` (array)
            for (const item of data['podcasts']) {
                PodcastMinimum.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['source_domain'] && !(typeof data['source_domain'] === 'string' || data['source_domain'] instanceof String)) {
            throw new Error("Expected the field `source_domain` to be a primitive type in the JSON string but got " + data['source_domain']);
        }
        // ensure the json data is a string
        if (data['source_url'] && !(typeof data['source_url'] === 'string' || data['source_url'] instanceof String)) {
            throw new Error("Expected the field `source_url` to be a primitive type in the JSON string but got " + data['source_url']);
        }
        // ensure the json data is a string
        if (data['title_highlighted'] && !(typeof data['title_highlighted'] === 'string' || data['title_highlighted'] instanceof String)) {
            throw new Error("Expected the field `title_highlighted` to be a primitive type in the JSON string but got " + data['title_highlighted']);
        }
        // ensure the json data is a string
        if (data['title_original'] && !(typeof data['title_original'] === 'string' || data['title_original'] instanceof String)) {
            throw new Error("Expected the field `title_original` to be a primitive type in the JSON string but got " + data['title_original']);
        }

        return true;
    }


}



/**
 * Highlighted segment of this curated list's description
 * @member {String} description_highlighted
 */
CuratedListSearchResult.prototype['description_highlighted'] = undefined;

/**
 * Plain text of this curated list's description
 * @member {String} description_original
 */
CuratedListSearchResult.prototype['description_original'] = undefined;

/**
 * Curated list id, which can be used to further fetch detailed curated list metadata via `GET /curated_podcasts/{id}`.
 * @member {String} id
 */
CuratedListSearchResult.prototype['id'] = undefined;

/**
 * The url of this curated list on [ListenNotes.com](https://www.ListenNotes.com).
 * @member {String} listennotes_url
 */
CuratedListSearchResult.prototype['listennotes_url'] = undefined;

/**
 * Up to 5 podcasts in this curated list.
 * @member {Array.<module:model/PodcastMinimum>} podcasts
 */
CuratedListSearchResult.prototype['podcasts'] = undefined;

/**
 * Published date of this curated list. In milliseconds.
 * @member {Number} pub_date_ms
 */
CuratedListSearchResult.prototype['pub_date_ms'] = undefined;

/**
 * The domain name of the source of this curated list.
 * @member {String} source_domain
 */
CuratedListSearchResult.prototype['source_domain'] = undefined;

/**
 * Url of the source of this curated list.
 * @member {String} source_url
 */
CuratedListSearchResult.prototype['source_url'] = undefined;

/**
 * Highlighted segment of this curated list's title
 * @member {String} title_highlighted
 */
CuratedListSearchResult.prototype['title_highlighted'] = undefined;

/**
 * Plain text of this curated list's title
 * @member {String} title_original
 */
CuratedListSearchResult.prototype['title_original'] = undefined;

/**
 * The total number of podcasts in this curated list.
 * @member {Number} total
 */
CuratedListSearchResult.prototype['total'] = undefined;






export default CuratedListSearchResult;

