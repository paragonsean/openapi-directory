/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomAudio from './CustomAudio';
import DeletedItem from './DeletedItem';
import EpisodeSimple from './EpisodeSimple';
import PodcastExtraField from './PodcastExtraField';
import PodcastLookingForField from './PodcastLookingForField';
import PodcastMinimum from './PodcastMinimum';
import PodcastSimple from './PodcastSimple';
import PodcastTypeField from './PodcastTypeField';

/**
 * The PlaylistItemData model module.
 * @module model/PlaylistItemData
 * @version 2.0
 */
class PlaylistItemData {
    /**
     * Constructs a new <code>PlaylistItemData</code>.
     * @alias module:model/PlaylistItemData
     * @param {(module:model/CustomAudio|module:model/DeletedItem|module:model/EpisodeSimple|module:model/PodcastSimple)} instance The actual instance to initialize PlaylistItemData.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "EpisodeSimple") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                EpisodeSimple.validateJSON(instance); // throw an exception if no match
                // create EpisodeSimple from JS object
                this.actualInstance = EpisodeSimple.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EpisodeSimple
            errorMessages.push("Failed to construct EpisodeSimple: " + err)
        }

        try {
            if (typeof instance === "PodcastSimple") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PodcastSimple.validateJSON(instance); // throw an exception if no match
                // create PodcastSimple from JS object
                this.actualInstance = PodcastSimple.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PodcastSimple
            errorMessages.push("Failed to construct PodcastSimple: " + err)
        }

        try {
            if (typeof instance === "CustomAudio") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CustomAudio.validateJSON(instance); // throw an exception if no match
                // create CustomAudio from JS object
                this.actualInstance = CustomAudio.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CustomAudio
            errorMessages.push("Failed to construct CustomAudio: " + err)
        }

        try {
            if (typeof instance === "DeletedItem") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DeletedItem.validateJSON(instance); // throw an exception if no match
                // create DeletedItem from JS object
                this.actualInstance = DeletedItem.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DeletedItem
            errorMessages.push("Failed to construct DeletedItem: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `PlaylistItemData` with oneOf schemas CustomAudio, DeletedItem, EpisodeSimple, PodcastSimple. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `PlaylistItemData` with oneOf schemas CustomAudio, DeletedItem, EpisodeSimple, PodcastSimple. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PlaylistItemData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlaylistItemData} obj Optional instance to populate.
     * @return {module:model/PlaylistItemData} The populated <code>PlaylistItemData</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PlaylistItemData(data);
    }

    /**
     * Gets the actual instance, which can be <code>CustomAudio</code>, <code>DeletedItem</code>, <code>EpisodeSimple</code>, <code>PodcastSimple</code>.
     * @return {(module:model/CustomAudio|module:model/DeletedItem|module:model/EpisodeSimple|module:model/PodcastSimple)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CustomAudio</code>, <code>DeletedItem</code>, <code>EpisodeSimple</code>, <code>PodcastSimple</code>.
     * @param {(module:model/CustomAudio|module:model/DeletedItem|module:model/EpisodeSimple|module:model/PodcastSimple)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PlaylistItemData.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PlaylistItemData from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PlaylistItemData} An instance of PlaylistItemData.
     */
    static fromJSON = function(json_string){
        return PlaylistItemData.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Audio url, which can be played directly.
 * @member {String} audio
 */
PlaylistItemData.prototype['audio'] = undefined;

/**
 * Audio length in seconds.
 * @member {Number} audio_length_sec
 */
PlaylistItemData.prototype['audio_length_sec'] = undefined;

/**
 * Html of this episode's full description
 * @member {String} description
 */
PlaylistItemData.prototype['description'] = undefined;

/**
 * Whether this podcast contains explicit language.
 * @member {Boolean} explicit_content
 */
PlaylistItemData.prototype['explicit_content'] = undefined;

/**
 * Episode id or podcast id.
 * @member {String} id
 */
PlaylistItemData.prototype['id'] = undefined;

/**
 * High resolution image url of this custom audio.
 * @member {String} image
 */
PlaylistItemData.prototype['image'] = undefined;

/**
 * Web link of this episode.
 * @member {String} link
 */
PlaylistItemData.prototype['link'] = undefined;

/**
 * Edit url of this episode where you can update the audio url if you find the audio is broken.
 * @member {String} listennotes_edit_url
 */
PlaylistItemData.prototype['listennotes_edit_url'] = undefined;

/**
 * The url of this podcast on [ListenNotes.com](https://www.ListenNotes.com).
 * @member {String} listennotes_url
 */
PlaylistItemData.prototype['listennotes_url'] = undefined;

/**
 * Whether or not this episode's audio is invalid. Podcasters may delete the original audio.
 * @member {Boolean} maybe_audio_invalid
 */
PlaylistItemData.prototype['maybe_audio_invalid'] = undefined;

/**
 * @member {module:model/PodcastMinimum} podcast
 */
PlaylistItemData.prototype['podcast'] = undefined;

/**
 * Published date (in milliseconds) of this custom audio. For now, it's the same as **added_at_ms** of this playlist item. 
 * @member {Number} pub_date_ms
 */
PlaylistItemData.prototype['pub_date_ms'] = undefined;

/**
 * Low resolution image url of this custom audio.
 * @member {String} thumbnail
 */
PlaylistItemData.prototype['thumbnail'] = undefined;

/**
 * Episode title or podcast title.
 * @member {String} title
 */
PlaylistItemData.prototype['title'] = undefined;

/**
 * The country where this podcast is produced.
 * @member {String} country
 */
PlaylistItemData.prototype['country'] = undefined;

/**
 * The published date of the oldest episode of this podcast. In milliseconds
 * @member {Number} earliest_pub_date_ms
 */
PlaylistItemData.prototype['earliest_pub_date_ms'] = undefined;

/**
 * The email of this podcast's producer. This field is available only in the PRO/ENTERPRISE plan.
 * @member {String} email
 */
PlaylistItemData.prototype['email'] = undefined;

/**
 * @member {module:model/PodcastExtraField} extra
 */
PlaylistItemData.prototype['extra'] = undefined;

/**
 * @member {Array.<Number>} genre_ids
 */
PlaylistItemData.prototype['genre_ids'] = undefined;

/**
 * Whether this podcast is claimed by its producer on [ListenNotes.com](https://www.ListenNotes.com).
 * @member {Boolean} is_claimed
 */
PlaylistItemData.prototype['is_claimed'] = undefined;

/**
 * iTunes id for this podcast.
 * @member {Number} itunes_id
 */
PlaylistItemData.prototype['itunes_id'] = undefined;

/**
 * The language of this podcast. You can get all supported languages from `GET /languages`.
 * @member {String} language
 */
PlaylistItemData.prototype['language'] = undefined;

/**
 * The id of the most recently published episode of this podcast, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`.
 * @member {String} latest_episode_id
 */
PlaylistItemData.prototype['latest_episode_id'] = undefined;

/**
 * The published date of the latest episode of this podcast. In milliseconds
 * @member {Number} latest_pub_date_ms
 */
PlaylistItemData.prototype['latest_pub_date_ms'] = undefined;

/**
 * The estimated popularity score of a podcast compared to all other rss-based public podcasts in the world on a scale from 0 to 100. If the score is not available, it'll be null. Learn more at listennotes.com/listen-score 
 * @member {Number} listen_score
 */
PlaylistItemData.prototype['listen_score'] = undefined;

/**
 * The estimated popularity ranking of a podcast compared to all other rss-based public podcasts in the world. For example, if the value is 0.5%, then this podcast is one of the top 0.5% most popular shows out of all podcasts globally, ranked by Listen Score. If the ranking is not available, it'll be null. Learn more at listennotes.com/listen-score 
 * @member {String} listen_score_global_rank
 */
PlaylistItemData.prototype['listen_score_global_rank'] = undefined;

/**
 * @member {module:model/PodcastLookingForField} looking_for
 */
PlaylistItemData.prototype['looking_for'] = undefined;

/**
 * Podcast publisher name.
 * @member {String} publisher
 */
PlaylistItemData.prototype['publisher'] = undefined;

/**
 * RSS url of this podcast. This field is available only in the PRO/ENTERPRISE plan.
 * @member {String} rss
 */
PlaylistItemData.prototype['rss'] = undefined;

/**
 * Total number of episodes in this podcast.
 * @member {Number} total_episodes
 */
PlaylistItemData.prototype['total_episodes'] = undefined;

/**
 * @member {module:model/PodcastTypeField} type
 */
PlaylistItemData.prototype['type'] = undefined;

/**
 * How frequently does this podcast release a new episode? In hours. For example, if the value is 166, then it's every 166 hours (or weekly).
 * @member {Number} update_frequency_hours
 */
PlaylistItemData.prototype['update_frequency_hours'] = undefined;

/**
 * Website url of this podcast.
 * @member {String} website
 */
PlaylistItemData.prototype['website'] = undefined;

/**
 * Why this episode or podcast is deleted?
 * @member {String} error
 */
PlaylistItemData.prototype['error'] = undefined;

/**
 * The status of this episode or podcast. For now, the only possible value is **deleted**.
 * @member {String} status
 */
PlaylistItemData.prototype['status'] = undefined;


PlaylistItemData.OneOf = ["CustomAudio", "DeletedItem", "EpisodeSimple", "PodcastSimple"];

export default PlaylistItemData;

