/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomAudio model module.
 * @module model/CustomAudio
 * @version 2.0
 */
class CustomAudio {
    /**
     * Constructs a new <code>CustomAudio</code>.
     * A custom audio in a playlist, which is a type of playlist item.
     * @alias module:model/CustomAudio
     */
    constructor() { 
        
        CustomAudio.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomAudio</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomAudio} obj Optional instance to populate.
     * @return {module:model/CustomAudio} The populated <code>CustomAudio</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomAudio();

            if (data.hasOwnProperty('audio')) {
                obj['audio'] = ApiClient.convertToType(data['audio'], 'String');
            }
            if (data.hasOwnProperty('audio_length_sec')) {
                obj['audio_length_sec'] = ApiClient.convertToType(data['audio_length_sec'], 'Number');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('pub_date_ms')) {
                obj['pub_date_ms'] = ApiClient.convertToType(data['pub_date_ms'], 'Number');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomAudio</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomAudio</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['audio'] && !(typeof data['audio'] === 'string' || data['audio'] instanceof String)) {
            throw new Error("Expected the field `audio` to be a primitive type in the JSON string but got " + data['audio']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['thumbnail'] && !(typeof data['thumbnail'] === 'string' || data['thumbnail'] instanceof String)) {
            throw new Error("Expected the field `thumbnail` to be a primitive type in the JSON string but got " + data['thumbnail']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * Audio url, which can be played directly.
 * @member {String} audio
 */
CustomAudio.prototype['audio'] = undefined;

/**
 * Audio length in seconds.
 * @member {Number} audio_length_sec
 */
CustomAudio.prototype['audio_length_sec'] = undefined;

/**
 * High resolution image url of this custom audio.
 * @member {String} image
 */
CustomAudio.prototype['image'] = undefined;

/**
 * Published date (in milliseconds) of this custom audio. For now, it's the same as **added_at_ms** of this playlist item. 
 * @member {Number} pub_date_ms
 */
CustomAudio.prototype['pub_date_ms'] = undefined;

/**
 * Low resolution image url of this custom audio.
 * @member {String} thumbnail
 */
CustomAudio.prototype['thumbnail'] = undefined;

/**
 * Custom audio title.
 * @member {String} title
 */
CustomAudio.prototype['title'] = undefined;






export default CustomAudio;

