/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PodcastLookingForField model module.
 * @module model/PodcastLookingForField
 * @version 2.0
 */
class PodcastLookingForField {
    /**
     * Constructs a new <code>PodcastLookingForField</code>.
     * @alias module:model/PodcastLookingForField
     */
    constructor() { 
        
        PodcastLookingForField.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PodcastLookingForField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodcastLookingForField} obj Optional instance to populate.
     * @return {module:model/PodcastLookingForField} The populated <code>PodcastLookingForField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodcastLookingForField();

            if (data.hasOwnProperty('cohosts')) {
                obj['cohosts'] = ApiClient.convertToType(data['cohosts'], 'Boolean');
            }
            if (data.hasOwnProperty('cross_promotion')) {
                obj['cross_promotion'] = ApiClient.convertToType(data['cross_promotion'], 'Boolean');
            }
            if (data.hasOwnProperty('guests')) {
                obj['guests'] = ApiClient.convertToType(data['guests'], 'Boolean');
            }
            if (data.hasOwnProperty('sponsors')) {
                obj['sponsors'] = ApiClient.convertToType(data['sponsors'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodcastLookingForField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodcastLookingForField</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Whether this podcast is looking for cohosts.
 * @member {Boolean} cohosts
 */
PodcastLookingForField.prototype['cohosts'] = undefined;

/**
 * Whether this podcast is looking for cross promotion opportunities with other podcasts.
 * @member {Boolean} cross_promotion
 */
PodcastLookingForField.prototype['cross_promotion'] = undefined;

/**
 * Whether this podcast is looking for guests.
 * @member {Boolean} guests
 */
PodcastLookingForField.prototype['guests'] = undefined;

/**
 * Whether this podcast is looking for sponsors.
 * @member {Boolean} sponsors
 */
PodcastLookingForField.prototype['sponsors'] = undefined;






export default PodcastLookingForField;

