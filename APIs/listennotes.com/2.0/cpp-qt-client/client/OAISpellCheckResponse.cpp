/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpellCheckResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpellCheckResponse::OAISpellCheckResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpellCheckResponse::OAISpellCheckResponse() {
    this->initializeModel();
}

OAISpellCheckResponse::~OAISpellCheckResponse() {}

void OAISpellCheckResponse::initializeModel() {

    m_corrected_text_html_isSet = false;
    m_corrected_text_html_isValid = false;

    m_tokens_isSet = false;
    m_tokens_isValid = false;
}

void OAISpellCheckResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpellCheckResponse::fromJsonObject(QJsonObject json) {

    m_corrected_text_html_isValid = ::OpenAPI::fromJsonValue(m_corrected_text_html, json[QString("corrected_text_html")]);
    m_corrected_text_html_isSet = !json[QString("corrected_text_html")].isNull() && m_corrected_text_html_isValid;

    m_tokens_isValid = ::OpenAPI::fromJsonValue(m_tokens, json[QString("tokens")]);
    m_tokens_isSet = !json[QString("tokens")].isNull() && m_tokens_isValid;
}

QString OAISpellCheckResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpellCheckResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_corrected_text_html_isSet) {
        obj.insert(QString("corrected_text_html"), ::OpenAPI::toJsonValue(m_corrected_text_html));
    }
    if (m_tokens.size() > 0) {
        obj.insert(QString("tokens"), ::OpenAPI::toJsonValue(m_tokens));
    }
    return obj;
}

QString OAISpellCheckResponse::getCorrectedTextHtml() const {
    return m_corrected_text_html;
}
void OAISpellCheckResponse::setCorrectedTextHtml(const QString &corrected_text_html) {
    m_corrected_text_html = corrected_text_html;
    m_corrected_text_html_isSet = true;
}

bool OAISpellCheckResponse::is_corrected_text_html_Set() const{
    return m_corrected_text_html_isSet;
}

bool OAISpellCheckResponse::is_corrected_text_html_Valid() const{
    return m_corrected_text_html_isValid;
}

QList<OAISpellCheckResponse_tokens_inner> OAISpellCheckResponse::getTokens() const {
    return m_tokens;
}
void OAISpellCheckResponse::setTokens(const QList<OAISpellCheckResponse_tokens_inner> &tokens) {
    m_tokens = tokens;
    m_tokens_isSet = true;
}

bool OAISpellCheckResponse::is_tokens_Set() const{
    return m_tokens_isSet;
}

bool OAISpellCheckResponse::is_tokens_Valid() const{
    return m_tokens_isValid;
}

bool OAISpellCheckResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corrected_text_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpellCheckResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_corrected_text_html_isValid && m_tokens_isValid && true;
}

} // namespace OpenAPI
