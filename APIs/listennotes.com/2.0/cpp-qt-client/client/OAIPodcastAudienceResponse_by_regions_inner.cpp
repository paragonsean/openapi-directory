/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcastAudienceResponse_by_regions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcastAudienceResponse_by_regions_inner::OAIPodcastAudienceResponse_by_regions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcastAudienceResponse_by_regions_inner::OAIPodcastAudienceResponse_by_regions_inner() {
    this->initializeModel();
}

OAIPodcastAudienceResponse_by_regions_inner::~OAIPodcastAudienceResponse_by_regions_inner() {}

void OAIPodcastAudienceResponse_by_regions_inner::initializeModel() {

    m_ratio_isSet = false;
    m_ratio_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIPodcastAudienceResponse_by_regions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcastAudienceResponse_by_regions_inner::fromJsonObject(QJsonObject json) {

    m_ratio_isValid = ::OpenAPI::fromJsonValue(m_ratio, json[QString("ratio")]);
    m_ratio_isSet = !json[QString("ratio")].isNull() && m_ratio_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;
}

QString OAIPodcastAudienceResponse_by_regions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcastAudienceResponse_by_regions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_ratio_isSet) {
        obj.insert(QString("ratio"), ::OpenAPI::toJsonValue(m_ratio));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QString OAIPodcastAudienceResponse_by_regions_inner::getRatio() const {
    return m_ratio;
}
void OAIPodcastAudienceResponse_by_regions_inner::setRatio(const QString &ratio) {
    m_ratio = ratio;
    m_ratio_isSet = true;
}

bool OAIPodcastAudienceResponse_by_regions_inner::is_ratio_Set() const{
    return m_ratio_isSet;
}

bool OAIPodcastAudienceResponse_by_regions_inner::is_ratio_Valid() const{
    return m_ratio_isValid;
}

QString OAIPodcastAudienceResponse_by_regions_inner::getRegion() const {
    return m_region;
}
void OAIPodcastAudienceResponse_by_regions_inner::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIPodcastAudienceResponse_by_regions_inner::is_region_Set() const{
    return m_region_isSet;
}

bool OAIPodcastAudienceResponse_by_regions_inner::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIPodcastAudienceResponse_by_regions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcastAudienceResponse_by_regions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
