/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICuratedListSimple.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICuratedListSimple::OAICuratedListSimple(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICuratedListSimple::OAICuratedListSimple() {
    this->initializeModel();
}

OAICuratedListSimple::~OAICuratedListSimple() {}

void OAICuratedListSimple::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_listennotes_url_isSet = false;
    m_listennotes_url_isValid = false;

    m_podcasts_isSet = false;
    m_podcasts_isValid = false;

    m_pub_date_ms_isSet = false;
    m_pub_date_ms_isValid = false;

    m_source_domain_isSet = false;
    m_source_domain_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAICuratedListSimple::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICuratedListSimple::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_listennotes_url_isValid = ::OpenAPI::fromJsonValue(m_listennotes_url, json[QString("listennotes_url")]);
    m_listennotes_url_isSet = !json[QString("listennotes_url")].isNull() && m_listennotes_url_isValid;

    m_podcasts_isValid = ::OpenAPI::fromJsonValue(m_podcasts, json[QString("podcasts")]);
    m_podcasts_isSet = !json[QString("podcasts")].isNull() && m_podcasts_isValid;

    m_pub_date_ms_isValid = ::OpenAPI::fromJsonValue(m_pub_date_ms, json[QString("pub_date_ms")]);
    m_pub_date_ms_isSet = !json[QString("pub_date_ms")].isNull() && m_pub_date_ms_isValid;

    m_source_domain_isValid = ::OpenAPI::fromJsonValue(m_source_domain, json[QString("source_domain")]);
    m_source_domain_isSet = !json[QString("source_domain")].isNull() && m_source_domain_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAICuratedListSimple::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICuratedListSimple::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_listennotes_url_isSet) {
        obj.insert(QString("listennotes_url"), ::OpenAPI::toJsonValue(m_listennotes_url));
    }
    if (m_podcasts.size() > 0) {
        obj.insert(QString("podcasts"), ::OpenAPI::toJsonValue(m_podcasts));
    }
    if (m_pub_date_ms_isSet) {
        obj.insert(QString("pub_date_ms"), ::OpenAPI::toJsonValue(m_pub_date_ms));
    }
    if (m_source_domain_isSet) {
        obj.insert(QString("source_domain"), ::OpenAPI::toJsonValue(m_source_domain));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QString OAICuratedListSimple::getDescription() const {
    return m_description;
}
void OAICuratedListSimple::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICuratedListSimple::is_description_Set() const{
    return m_description_isSet;
}

bool OAICuratedListSimple::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICuratedListSimple::getId() const {
    return m_id;
}
void OAICuratedListSimple::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICuratedListSimple::is_id_Set() const{
    return m_id_isSet;
}

bool OAICuratedListSimple::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICuratedListSimple::getListennotesUrl() const {
    return m_listennotes_url;
}
void OAICuratedListSimple::setListennotesUrl(const QString &listennotes_url) {
    m_listennotes_url = listennotes_url;
    m_listennotes_url_isSet = true;
}

bool OAICuratedListSimple::is_listennotes_url_Set() const{
    return m_listennotes_url_isSet;
}

bool OAICuratedListSimple::is_listennotes_url_Valid() const{
    return m_listennotes_url_isValid;
}

QList<OAIPodcastMinimum> OAICuratedListSimple::getPodcasts() const {
    return m_podcasts;
}
void OAICuratedListSimple::setPodcasts(const QList<OAIPodcastMinimum> &podcasts) {
    m_podcasts = podcasts;
    m_podcasts_isSet = true;
}

bool OAICuratedListSimple::is_podcasts_Set() const{
    return m_podcasts_isSet;
}

bool OAICuratedListSimple::is_podcasts_Valid() const{
    return m_podcasts_isValid;
}

qint32 OAICuratedListSimple::getPubDateMs() const {
    return m_pub_date_ms;
}
void OAICuratedListSimple::setPubDateMs(const qint32 &pub_date_ms) {
    m_pub_date_ms = pub_date_ms;
    m_pub_date_ms_isSet = true;
}

bool OAICuratedListSimple::is_pub_date_ms_Set() const{
    return m_pub_date_ms_isSet;
}

bool OAICuratedListSimple::is_pub_date_ms_Valid() const{
    return m_pub_date_ms_isValid;
}

QString OAICuratedListSimple::getSourceDomain() const {
    return m_source_domain;
}
void OAICuratedListSimple::setSourceDomain(const QString &source_domain) {
    m_source_domain = source_domain;
    m_source_domain_isSet = true;
}

bool OAICuratedListSimple::is_source_domain_Set() const{
    return m_source_domain_isSet;
}

bool OAICuratedListSimple::is_source_domain_Valid() const{
    return m_source_domain_isValid;
}

QString OAICuratedListSimple::getSourceUrl() const {
    return m_source_url;
}
void OAICuratedListSimple::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAICuratedListSimple::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAICuratedListSimple::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAICuratedListSimple::getTitle() const {
    return m_title;
}
void OAICuratedListSimple::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICuratedListSimple::is_title_Set() const{
    return m_title_isSet;
}

bool OAICuratedListSimple::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAICuratedListSimple::getTotal() const {
    return m_total;
}
void OAICuratedListSimple::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAICuratedListSimple::is_total_Set() const{
    return m_total_isSet;
}

bool OAICuratedListSimple::is_total_Valid() const{
    return m_total_isValid;
}

bool OAICuratedListSimple::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listennotes_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_podcasts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pub_date_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICuratedListSimple::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
