/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEpisodeSearchResult_podcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEpisodeSearchResult_podcast::OAIEpisodeSearchResult_podcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEpisodeSearchResult_podcast::OAIEpisodeSearchResult_podcast() {
    this->initializeModel();
}

OAIEpisodeSearchResult_podcast::~OAIEpisodeSearchResult_podcast() {}

void OAIEpisodeSearchResult_podcast::initializeModel() {

    m_genre_ids_isSet = false;
    m_genre_ids_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_listen_score_isSet = false;
    m_listen_score_isValid = false;

    m_listen_score_global_rank_isSet = false;
    m_listen_score_global_rank_isValid = false;

    m_listennotes_url_isSet = false;
    m_listennotes_url_isValid = false;

    m_publisher_highlighted_isSet = false;
    m_publisher_highlighted_isValid = false;

    m_publisher_original_isSet = false;
    m_publisher_original_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_title_highlighted_isSet = false;
    m_title_highlighted_isValid = false;

    m_title_original_isSet = false;
    m_title_original_isValid = false;
}

void OAIEpisodeSearchResult_podcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEpisodeSearchResult_podcast::fromJsonObject(QJsonObject json) {

    m_genre_ids_isValid = ::OpenAPI::fromJsonValue(m_genre_ids, json[QString("genre_ids")]);
    m_genre_ids_isSet = !json[QString("genre_ids")].isNull() && m_genre_ids_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_listen_score_isValid = ::OpenAPI::fromJsonValue(m_listen_score, json[QString("listen_score")]);
    m_listen_score_isSet = !json[QString("listen_score")].isNull() && m_listen_score_isValid;

    m_listen_score_global_rank_isValid = ::OpenAPI::fromJsonValue(m_listen_score_global_rank, json[QString("listen_score_global_rank")]);
    m_listen_score_global_rank_isSet = !json[QString("listen_score_global_rank")].isNull() && m_listen_score_global_rank_isValid;

    m_listennotes_url_isValid = ::OpenAPI::fromJsonValue(m_listennotes_url, json[QString("listennotes_url")]);
    m_listennotes_url_isSet = !json[QString("listennotes_url")].isNull() && m_listennotes_url_isValid;

    m_publisher_highlighted_isValid = ::OpenAPI::fromJsonValue(m_publisher_highlighted, json[QString("publisher_highlighted")]);
    m_publisher_highlighted_isSet = !json[QString("publisher_highlighted")].isNull() && m_publisher_highlighted_isValid;

    m_publisher_original_isValid = ::OpenAPI::fromJsonValue(m_publisher_original, json[QString("publisher_original")]);
    m_publisher_original_isSet = !json[QString("publisher_original")].isNull() && m_publisher_original_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_title_highlighted_isValid = ::OpenAPI::fromJsonValue(m_title_highlighted, json[QString("title_highlighted")]);
    m_title_highlighted_isSet = !json[QString("title_highlighted")].isNull() && m_title_highlighted_isValid;

    m_title_original_isValid = ::OpenAPI::fromJsonValue(m_title_original, json[QString("title_original")]);
    m_title_original_isSet = !json[QString("title_original")].isNull() && m_title_original_isValid;
}

QString OAIEpisodeSearchResult_podcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEpisodeSearchResult_podcast::asJsonObject() const {
    QJsonObject obj;
    if (m_genre_ids.size() > 0) {
        obj.insert(QString("genre_ids"), ::OpenAPI::toJsonValue(m_genre_ids));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_listen_score_isSet) {
        obj.insert(QString("listen_score"), ::OpenAPI::toJsonValue(m_listen_score));
    }
    if (m_listen_score_global_rank_isSet) {
        obj.insert(QString("listen_score_global_rank"), ::OpenAPI::toJsonValue(m_listen_score_global_rank));
    }
    if (m_listennotes_url_isSet) {
        obj.insert(QString("listennotes_url"), ::OpenAPI::toJsonValue(m_listennotes_url));
    }
    if (m_publisher_highlighted_isSet) {
        obj.insert(QString("publisher_highlighted"), ::OpenAPI::toJsonValue(m_publisher_highlighted));
    }
    if (m_publisher_original_isSet) {
        obj.insert(QString("publisher_original"), ::OpenAPI::toJsonValue(m_publisher_original));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_title_highlighted_isSet) {
        obj.insert(QString("title_highlighted"), ::OpenAPI::toJsonValue(m_title_highlighted));
    }
    if (m_title_original_isSet) {
        obj.insert(QString("title_original"), ::OpenAPI::toJsonValue(m_title_original));
    }
    return obj;
}

QList<qint32> OAIEpisodeSearchResult_podcast::getGenreIds() const {
    return m_genre_ids;
}
void OAIEpisodeSearchResult_podcast::setGenreIds(const QList<qint32> &genre_ids) {
    m_genre_ids = genre_ids;
    m_genre_ids_isSet = true;
}

bool OAIEpisodeSearchResult_podcast::is_genre_ids_Set() const{
    return m_genre_ids_isSet;
}

bool OAIEpisodeSearchResult_podcast::is_genre_ids_Valid() const{
    return m_genre_ids_isValid;
}

QString OAIEpisodeSearchResult_podcast::getId() const {
    return m_id;
}
void OAIEpisodeSearchResult_podcast::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEpisodeSearchResult_podcast::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEpisodeSearchResult_podcast::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEpisodeSearchResult_podcast::getImage() const {
    return m_image;
}
void OAIEpisodeSearchResult_podcast::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIEpisodeSearchResult_podcast::is_image_Set() const{
    return m_image_isSet;
}

bool OAIEpisodeSearchResult_podcast::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIEpisodeSearchResult_podcast::getListenScore() const {
    return m_listen_score;
}
void OAIEpisodeSearchResult_podcast::setListenScore(const qint32 &listen_score) {
    m_listen_score = listen_score;
    m_listen_score_isSet = true;
}

bool OAIEpisodeSearchResult_podcast::is_listen_score_Set() const{
    return m_listen_score_isSet;
}

bool OAIEpisodeSearchResult_podcast::is_listen_score_Valid() const{
    return m_listen_score_isValid;
}

QString OAIEpisodeSearchResult_podcast::getListenScoreGlobalRank() const {
    return m_listen_score_global_rank;
}
void OAIEpisodeSearchResult_podcast::setListenScoreGlobalRank(const QString &listen_score_global_rank) {
    m_listen_score_global_rank = listen_score_global_rank;
    m_listen_score_global_rank_isSet = true;
}

bool OAIEpisodeSearchResult_podcast::is_listen_score_global_rank_Set() const{
    return m_listen_score_global_rank_isSet;
}

bool OAIEpisodeSearchResult_podcast::is_listen_score_global_rank_Valid() const{
    return m_listen_score_global_rank_isValid;
}

QString OAIEpisodeSearchResult_podcast::getListennotesUrl() const {
    return m_listennotes_url;
}
void OAIEpisodeSearchResult_podcast::setListennotesUrl(const QString &listennotes_url) {
    m_listennotes_url = listennotes_url;
    m_listennotes_url_isSet = true;
}

bool OAIEpisodeSearchResult_podcast::is_listennotes_url_Set() const{
    return m_listennotes_url_isSet;
}

bool OAIEpisodeSearchResult_podcast::is_listennotes_url_Valid() const{
    return m_listennotes_url_isValid;
}

QString OAIEpisodeSearchResult_podcast::getPublisherHighlighted() const {
    return m_publisher_highlighted;
}
void OAIEpisodeSearchResult_podcast::setPublisherHighlighted(const QString &publisher_highlighted) {
    m_publisher_highlighted = publisher_highlighted;
    m_publisher_highlighted_isSet = true;
}

bool OAIEpisodeSearchResult_podcast::is_publisher_highlighted_Set() const{
    return m_publisher_highlighted_isSet;
}

bool OAIEpisodeSearchResult_podcast::is_publisher_highlighted_Valid() const{
    return m_publisher_highlighted_isValid;
}

QString OAIEpisodeSearchResult_podcast::getPublisherOriginal() const {
    return m_publisher_original;
}
void OAIEpisodeSearchResult_podcast::setPublisherOriginal(const QString &publisher_original) {
    m_publisher_original = publisher_original;
    m_publisher_original_isSet = true;
}

bool OAIEpisodeSearchResult_podcast::is_publisher_original_Set() const{
    return m_publisher_original_isSet;
}

bool OAIEpisodeSearchResult_podcast::is_publisher_original_Valid() const{
    return m_publisher_original_isValid;
}

QString OAIEpisodeSearchResult_podcast::getThumbnail() const {
    return m_thumbnail;
}
void OAIEpisodeSearchResult_podcast::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIEpisodeSearchResult_podcast::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIEpisodeSearchResult_podcast::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAIEpisodeSearchResult_podcast::getTitleHighlighted() const {
    return m_title_highlighted;
}
void OAIEpisodeSearchResult_podcast::setTitleHighlighted(const QString &title_highlighted) {
    m_title_highlighted = title_highlighted;
    m_title_highlighted_isSet = true;
}

bool OAIEpisodeSearchResult_podcast::is_title_highlighted_Set() const{
    return m_title_highlighted_isSet;
}

bool OAIEpisodeSearchResult_podcast::is_title_highlighted_Valid() const{
    return m_title_highlighted_isValid;
}

QString OAIEpisodeSearchResult_podcast::getTitleOriginal() const {
    return m_title_original;
}
void OAIEpisodeSearchResult_podcast::setTitleOriginal(const QString &title_original) {
    m_title_original = title_original;
    m_title_original_isSet = true;
}

bool OAIEpisodeSearchResult_podcast::is_title_original_Set() const{
    return m_title_original_isSet;
}

bool OAIEpisodeSearchResult_podcast::is_title_original_Valid() const{
    return m_title_original_isValid;
}

bool OAIEpisodeSearchResult_podcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_genre_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listen_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listen_score_global_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listennotes_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_highlighted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_highlighted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_original_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEpisodeSearchResult_podcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
