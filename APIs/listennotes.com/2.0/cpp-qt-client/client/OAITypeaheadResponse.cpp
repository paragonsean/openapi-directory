/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypeaheadResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypeaheadResponse::OAITypeaheadResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypeaheadResponse::OAITypeaheadResponse() {
    this->initializeModel();
}

OAITypeaheadResponse::~OAITypeaheadResponse() {}

void OAITypeaheadResponse::initializeModel() {

    m_genres_isSet = false;
    m_genres_isValid = false;

    m_podcasts_isSet = false;
    m_podcasts_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;
}

void OAITypeaheadResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITypeaheadResponse::fromJsonObject(QJsonObject json) {

    m_genres_isValid = ::OpenAPI::fromJsonValue(m_genres, json[QString("genres")]);
    m_genres_isSet = !json[QString("genres")].isNull() && m_genres_isValid;

    m_podcasts_isValid = ::OpenAPI::fromJsonValue(m_podcasts, json[QString("podcasts")]);
    m_podcasts_isSet = !json[QString("podcasts")].isNull() && m_podcasts_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;
}

QString OAITypeaheadResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITypeaheadResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_genres.size() > 0) {
        obj.insert(QString("genres"), ::OpenAPI::toJsonValue(m_genres));
    }
    if (m_podcasts.size() > 0) {
        obj.insert(QString("podcasts"), ::OpenAPI::toJsonValue(m_podcasts));
    }
    if (m_terms.size() > 0) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    return obj;
}

QList<OAIGenre> OAITypeaheadResponse::getGenres() const {
    return m_genres;
}
void OAITypeaheadResponse::setGenres(const QList<OAIGenre> &genres) {
    m_genres = genres;
    m_genres_isSet = true;
}

bool OAITypeaheadResponse::is_genres_Set() const{
    return m_genres_isSet;
}

bool OAITypeaheadResponse::is_genres_Valid() const{
    return m_genres_isValid;
}

QList<OAIPodcastTypeaheadResult> OAITypeaheadResponse::getPodcasts() const {
    return m_podcasts;
}
void OAITypeaheadResponse::setPodcasts(const QList<OAIPodcastTypeaheadResult> &podcasts) {
    m_podcasts = podcasts;
    m_podcasts_isSet = true;
}

bool OAITypeaheadResponse::is_podcasts_Set() const{
    return m_podcasts_isSet;
}

bool OAITypeaheadResponse::is_podcasts_Valid() const{
    return m_podcasts_isValid;
}

QList<QString> OAITypeaheadResponse::getTerms() const {
    return m_terms;
}
void OAITypeaheadResponse::setTerms(const QList<QString> &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAITypeaheadResponse::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAITypeaheadResponse::is_terms_Valid() const{
    return m_terms_isValid;
}

bool OAITypeaheadResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_genres.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_podcasts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITypeaheadResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_terms_isValid && true;
}

} // namespace OpenAPI
