/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmitPodcastResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmitPodcastResponse::OAISubmitPodcastResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmitPodcastResponse::OAISubmitPodcastResponse() {
    this->initializeModel();
}

OAISubmitPodcastResponse::~OAISubmitPodcastResponse() {}

void OAISubmitPodcastResponse::initializeModel() {

    m_podcast_isSet = false;
    m_podcast_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISubmitPodcastResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmitPodcastResponse::fromJsonObject(QJsonObject json) {

    m_podcast_isValid = ::OpenAPI::fromJsonValue(m_podcast, json[QString("podcast")]);
    m_podcast_isSet = !json[QString("podcast")].isNull() && m_podcast_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISubmitPodcastResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmitPodcastResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_podcast.isSet()) {
        obj.insert(QString("podcast"), ::OpenAPI::toJsonValue(m_podcast));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIPodcastMinimum OAISubmitPodcastResponse::getPodcast() const {
    return m_podcast;
}
void OAISubmitPodcastResponse::setPodcast(const OAIPodcastMinimum &podcast) {
    m_podcast = podcast;
    m_podcast_isSet = true;
}

bool OAISubmitPodcastResponse::is_podcast_Set() const{
    return m_podcast_isSet;
}

bool OAISubmitPodcastResponse::is_podcast_Valid() const{
    return m_podcast_isValid;
}

QString OAISubmitPodcastResponse::getStatus() const {
    return m_status;
}
void OAISubmitPodcastResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubmitPodcastResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubmitPodcastResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISubmitPodcastResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_podcast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmitPodcastResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_podcast_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
