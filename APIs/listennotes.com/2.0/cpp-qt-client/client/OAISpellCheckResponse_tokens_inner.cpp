/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpellCheckResponse_tokens_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpellCheckResponse_tokens_inner::OAISpellCheckResponse_tokens_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpellCheckResponse_tokens_inner::OAISpellCheckResponse_tokens_inner() {
    this->initializeModel();
}

OAISpellCheckResponse_tokens_inner::~OAISpellCheckResponse_tokens_inner() {}

void OAISpellCheckResponse_tokens_inner::initializeModel() {

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_suggestion_isSet = false;
    m_suggestion_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAISpellCheckResponse_tokens_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpellCheckResponse_tokens_inner::fromJsonObject(QJsonObject json) {

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_suggestion_isValid = ::OpenAPI::fromJsonValue(m_suggestion, json[QString("suggestion")]);
    m_suggestion_isSet = !json[QString("suggestion")].isNull() && m_suggestion_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAISpellCheckResponse_tokens_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpellCheckResponse_tokens_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_suggestion_isSet) {
        obj.insert(QString("suggestion"), ::OpenAPI::toJsonValue(m_suggestion));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

qint32 OAISpellCheckResponse_tokens_inner::getOffset() const {
    return m_offset;
}
void OAISpellCheckResponse_tokens_inner::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAISpellCheckResponse_tokens_inner::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAISpellCheckResponse_tokens_inner::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAISpellCheckResponse_tokens_inner::getSuggestion() const {
    return m_suggestion;
}
void OAISpellCheckResponse_tokens_inner::setSuggestion(const QString &suggestion) {
    m_suggestion = suggestion;
    m_suggestion_isSet = true;
}

bool OAISpellCheckResponse_tokens_inner::is_suggestion_Set() const{
    return m_suggestion_isSet;
}

bool OAISpellCheckResponse_tokens_inner::is_suggestion_Valid() const{
    return m_suggestion_isValid;
}

QString OAISpellCheckResponse_tokens_inner::getToken() const {
    return m_token;
}
void OAISpellCheckResponse_tokens_inner::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAISpellCheckResponse_tokens_inner::is_token_Set() const{
    return m_token_isSet;
}

bool OAISpellCheckResponse_tokens_inner::is_token_Valid() const{
    return m_token_isValid;
}

bool OAISpellCheckResponse_tokens_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpellCheckResponse_tokens_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
