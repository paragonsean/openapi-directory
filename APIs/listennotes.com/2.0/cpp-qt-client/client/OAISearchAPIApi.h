/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISearchAPIApi_H
#define OAI_OAISearchAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRelatedSearchesResponse.h"
#include "OAISearchResponse.h"
#include "OAISpellCheckResponse.h"
#include "OAITrendingSearchesResponse.h"
#include "OAITypeaheadResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISearchAPIApi : public QObject {
    Q_OBJECT

public:
    OAISearchAPIApi(const int timeOut = 0);
    ~OAISearchAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  q QString [required]
    */
    virtual void getRelatedSearches(const QString &x_listen_api_key, const QString &q);

    /**
    * @param[in]  x_listen_api_key QString [required]
    */
    virtual void getTrendingSearches(const QString &x_listen_api_key);

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  q QString [required]
    * @param[in]  sort_by_date qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  len_min qint32 [optional]
    * @param[in]  len_max qint32 [optional]
    * @param[in]  episode_count_min qint32 [optional]
    * @param[in]  episode_count_max qint32 [optional]
    * @param[in]  update_freq_min qint32 [optional]
    * @param[in]  update_freq_max qint32 [optional]
    * @param[in]  genre_ids QString [optional]
    * @param[in]  published_before qint32 [optional]
    * @param[in]  published_after qint32 [optional]
    * @param[in]  only_in QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  ocid QString [optional]
    * @param[in]  ncid QString [optional]
    * @param[in]  safe_mode qint32 [optional]
    * @param[in]  unique_podcasts qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void search(const QString &x_listen_api_key, const QString &q, const ::OpenAPI::OptionalParam<qint32> &sort_by_date = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &len_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &len_max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &episode_count_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &episode_count_max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &update_freq_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &update_freq_max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &genre_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &published_before = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &published_after = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &only_in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ocid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ncid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &safe_mode = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &unique_podcasts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  q QString [required]
    */
    virtual void spellcheck(const QString &x_listen_api_key, const QString &q);

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  q QString [required]
    * @param[in]  show_podcasts qint32 [optional]
    * @param[in]  show_genres qint32 [optional]
    * @param[in]  safe_mode qint32 [optional]
    */
    virtual void typeahead(const QString &x_listen_api_key, const QString &q, const ::OpenAPI::OptionalParam<qint32> &show_podcasts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &show_genres = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &safe_mode = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getRelatedSearchesCallback(OAIHttpRequestWorker *worker);
    void getTrendingSearchesCallback(OAIHttpRequestWorker *worker);
    void searchCallback(OAIHttpRequestWorker *worker);
    void spellcheckCallback(OAIHttpRequestWorker *worker);
    void typeaheadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getRelatedSearchesSignal(OAIRelatedSearchesResponse summary);
    void getTrendingSearchesSignal(OAITrendingSearchesResponse summary);
    void searchSignal(OAISearchResponse summary);
    void spellcheckSignal(OAISpellCheckResponse summary);
    void typeaheadSignal(OAITypeaheadResponse summary);


    void getRelatedSearchesSignalFull(OAIHttpRequestWorker *worker, OAIRelatedSearchesResponse summary);
    void getTrendingSearchesSignalFull(OAIHttpRequestWorker *worker, OAITrendingSearchesResponse summary);
    void searchSignalFull(OAIHttpRequestWorker *worker, OAISearchResponse summary);
    void spellcheckSignalFull(OAIHttpRequestWorker *worker, OAISpellCheckResponse summary);
    void typeaheadSignalFull(OAIHttpRequestWorker *worker, OAITypeaheadResponse summary);

    Q_DECL_DEPRECATED_X("Use getRelatedSearchesSignalError() instead")
    void getRelatedSearchesSignalE(OAIRelatedSearchesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRelatedSearchesSignalError(OAIRelatedSearchesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrendingSearchesSignalError() instead")
    void getTrendingSearchesSignalE(OAITrendingSearchesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrendingSearchesSignalError(OAITrendingSearchesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalError() instead")
    void searchSignalE(OAISearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalError(OAISearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spellcheckSignalError() instead")
    void spellcheckSignalE(OAISpellCheckResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spellcheckSignalError(OAISpellCheckResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use typeaheadSignalError() instead")
    void typeaheadSignalE(OAITypeaheadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void typeaheadSignalError(OAITypeaheadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getRelatedSearchesSignalErrorFull() instead")
    void getRelatedSearchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRelatedSearchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrendingSearchesSignalErrorFull() instead")
    void getTrendingSearchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrendingSearchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalErrorFull() instead")
    void searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spellcheckSignalErrorFull() instead")
    void spellcheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spellcheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use typeaheadSignalErrorFull() instead")
    void typeaheadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void typeaheadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
