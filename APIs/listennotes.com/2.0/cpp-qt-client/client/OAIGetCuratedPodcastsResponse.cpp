/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCuratedPodcastsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCuratedPodcastsResponse::OAIGetCuratedPodcastsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCuratedPodcastsResponse::OAIGetCuratedPodcastsResponse() {
    this->initializeModel();
}

OAIGetCuratedPodcastsResponse::~OAIGetCuratedPodcastsResponse() {}

void OAIGetCuratedPodcastsResponse::initializeModel() {

    m_curated_lists_isSet = false;
    m_curated_lists_isValid = false;

    m_has_next_isSet = false;
    m_has_next_isValid = false;

    m_has_previous_isSet = false;
    m_has_previous_isValid = false;

    m_next_page_number_isSet = false;
    m_next_page_number_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_previous_page_number_isSet = false;
    m_previous_page_number_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIGetCuratedPodcastsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCuratedPodcastsResponse::fromJsonObject(QJsonObject json) {

    m_curated_lists_isValid = ::OpenAPI::fromJsonValue(m_curated_lists, json[QString("curated_lists")]);
    m_curated_lists_isSet = !json[QString("curated_lists")].isNull() && m_curated_lists_isValid;

    m_has_next_isValid = ::OpenAPI::fromJsonValue(m_has_next, json[QString("has_next")]);
    m_has_next_isSet = !json[QString("has_next")].isNull() && m_has_next_isValid;

    m_has_previous_isValid = ::OpenAPI::fromJsonValue(m_has_previous, json[QString("has_previous")]);
    m_has_previous_isSet = !json[QString("has_previous")].isNull() && m_has_previous_isValid;

    m_next_page_number_isValid = ::OpenAPI::fromJsonValue(m_next_page_number, json[QString("next_page_number")]);
    m_next_page_number_isSet = !json[QString("next_page_number")].isNull() && m_next_page_number_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("page_number")]);
    m_page_number_isSet = !json[QString("page_number")].isNull() && m_page_number_isValid;

    m_previous_page_number_isValid = ::OpenAPI::fromJsonValue(m_previous_page_number, json[QString("previous_page_number")]);
    m_previous_page_number_isSet = !json[QString("previous_page_number")].isNull() && m_previous_page_number_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIGetCuratedPodcastsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCuratedPodcastsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_curated_lists.size() > 0) {
        obj.insert(QString("curated_lists"), ::OpenAPI::toJsonValue(m_curated_lists));
    }
    if (m_has_next_isSet) {
        obj.insert(QString("has_next"), ::OpenAPI::toJsonValue(m_has_next));
    }
    if (m_has_previous_isSet) {
        obj.insert(QString("has_previous"), ::OpenAPI::toJsonValue(m_has_previous));
    }
    if (m_next_page_number_isSet) {
        obj.insert(QString("next_page_number"), ::OpenAPI::toJsonValue(m_next_page_number));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("page_number"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_previous_page_number_isSet) {
        obj.insert(QString("previous_page_number"), ::OpenAPI::toJsonValue(m_previous_page_number));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList<OAICuratedListSimple> OAIGetCuratedPodcastsResponse::getCuratedLists() const {
    return m_curated_lists;
}
void OAIGetCuratedPodcastsResponse::setCuratedLists(const QList<OAICuratedListSimple> &curated_lists) {
    m_curated_lists = curated_lists;
    m_curated_lists_isSet = true;
}

bool OAIGetCuratedPodcastsResponse::is_curated_lists_Set() const{
    return m_curated_lists_isSet;
}

bool OAIGetCuratedPodcastsResponse::is_curated_lists_Valid() const{
    return m_curated_lists_isValid;
}

bool OAIGetCuratedPodcastsResponse::isHasNext() const {
    return m_has_next;
}
void OAIGetCuratedPodcastsResponse::setHasNext(const bool &has_next) {
    m_has_next = has_next;
    m_has_next_isSet = true;
}

bool OAIGetCuratedPodcastsResponse::is_has_next_Set() const{
    return m_has_next_isSet;
}

bool OAIGetCuratedPodcastsResponse::is_has_next_Valid() const{
    return m_has_next_isValid;
}

bool OAIGetCuratedPodcastsResponse::isHasPrevious() const {
    return m_has_previous;
}
void OAIGetCuratedPodcastsResponse::setHasPrevious(const bool &has_previous) {
    m_has_previous = has_previous;
    m_has_previous_isSet = true;
}

bool OAIGetCuratedPodcastsResponse::is_has_previous_Set() const{
    return m_has_previous_isSet;
}

bool OAIGetCuratedPodcastsResponse::is_has_previous_Valid() const{
    return m_has_previous_isValid;
}

qint32 OAIGetCuratedPodcastsResponse::getNextPageNumber() const {
    return m_next_page_number;
}
void OAIGetCuratedPodcastsResponse::setNextPageNumber(const qint32 &next_page_number) {
    m_next_page_number = next_page_number;
    m_next_page_number_isSet = true;
}

bool OAIGetCuratedPodcastsResponse::is_next_page_number_Set() const{
    return m_next_page_number_isSet;
}

bool OAIGetCuratedPodcastsResponse::is_next_page_number_Valid() const{
    return m_next_page_number_isValid;
}

qint32 OAIGetCuratedPodcastsResponse::getPageNumber() const {
    return m_page_number;
}
void OAIGetCuratedPodcastsResponse::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIGetCuratedPodcastsResponse::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIGetCuratedPodcastsResponse::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIGetCuratedPodcastsResponse::getPreviousPageNumber() const {
    return m_previous_page_number;
}
void OAIGetCuratedPodcastsResponse::setPreviousPageNumber(const qint32 &previous_page_number) {
    m_previous_page_number = previous_page_number;
    m_previous_page_number_isSet = true;
}

bool OAIGetCuratedPodcastsResponse::is_previous_page_number_Set() const{
    return m_previous_page_number_isSet;
}

bool OAIGetCuratedPodcastsResponse::is_previous_page_number_Valid() const{
    return m_previous_page_number_isValid;
}

qint32 OAIGetCuratedPodcastsResponse::getTotal() const {
    return m_total;
}
void OAIGetCuratedPodcastsResponse::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetCuratedPodcastsResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetCuratedPodcastsResponse::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIGetCuratedPodcastsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_curated_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_previous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCuratedPodcastsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_curated_lists_isValid && m_has_next_isValid && m_has_previous_isValid && m_next_page_number_isValid && m_page_number_isValid && m_previous_page_number_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
