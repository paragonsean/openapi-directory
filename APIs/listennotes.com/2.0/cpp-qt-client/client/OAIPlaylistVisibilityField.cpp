/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistVisibilityField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistVisibilityField::OAIPlaylistVisibilityField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistVisibilityField::OAIPlaylistVisibilityField() {
    this->initializeModel();
}

OAIPlaylistVisibilityField::~OAIPlaylistVisibilityField() {}

void OAIPlaylistVisibilityField::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPlaylistVisibilityField::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPlaylistVisibilityField::fromJson(QString jsonString) {
    
    if ( jsonString.compare("public", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaylistVisibilityField::PUBLIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unlisted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaylistVisibilityField::UNLISTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("private", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaylistVisibilityField::PRIVATE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPlaylistVisibilityField::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPlaylistVisibilityField::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPlaylistVisibilityField::PUBLIC:
            val = "public";
            break;
        case eOAIPlaylistVisibilityField::UNLISTED:
            val = "unlisted";
            break;
        case eOAIPlaylistVisibilityField::PRIVATE:
            val = "private";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPlaylistVisibilityField::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPlaylistVisibilityField::eOAIPlaylistVisibilityField OAIPlaylistVisibilityField::getValue() const {
    return m_value;
}

void OAIPlaylistVisibilityField::setValue(const OAIPlaylistVisibilityField::eOAIPlaylistVisibilityField& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPlaylistVisibilityField::isSet() const {
    
    return m_value_isSet;
}

bool OAIPlaylistVisibilityField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
