/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistsResponse_playlists_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistsResponse_playlists_inner::OAIPlaylistsResponse_playlists_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistsResponse_playlists_inner::OAIPlaylistsResponse_playlists_inner() {
    this->initializeModel();
}

OAIPlaylistsResponse_playlists_inner::~OAIPlaylistsResponse_playlists_inner() {}

void OAIPlaylistsResponse_playlists_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_episode_count_isSet = false;
    m_episode_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_last_timestamp_ms_isSet = false;
    m_last_timestamp_ms_isValid = false;

    m_listennotes_url_isSet = false;
    m_listennotes_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_podcast_count_isSet = false;
    m_podcast_count_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_total_audio_length_sec_isSet = false;
    m_total_audio_length_sec_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIPlaylistsResponse_playlists_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylistsResponse_playlists_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_episode_count_isValid = ::OpenAPI::fromJsonValue(m_episode_count, json[QString("episode_count")]);
    m_episode_count_isSet = !json[QString("episode_count")].isNull() && m_episode_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_last_timestamp_ms_isValid = ::OpenAPI::fromJsonValue(m_last_timestamp_ms, json[QString("last_timestamp_ms")]);
    m_last_timestamp_ms_isSet = !json[QString("last_timestamp_ms")].isNull() && m_last_timestamp_ms_isValid;

    m_listennotes_url_isValid = ::OpenAPI::fromJsonValue(m_listennotes_url, json[QString("listennotes_url")]);
    m_listennotes_url_isSet = !json[QString("listennotes_url")].isNull() && m_listennotes_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_podcast_count_isValid = ::OpenAPI::fromJsonValue(m_podcast_count, json[QString("podcast_count")]);
    m_podcast_count_isSet = !json[QString("podcast_count")].isNull() && m_podcast_count_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_total_audio_length_sec_isValid = ::OpenAPI::fromJsonValue(m_total_audio_length_sec, json[QString("total_audio_length_sec")]);
    m_total_audio_length_sec_isSet = !json[QString("total_audio_length_sec")].isNull() && m_total_audio_length_sec_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIPlaylistsResponse_playlists_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylistsResponse_playlists_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_episode_count_isSet) {
        obj.insert(QString("episode_count"), ::OpenAPI::toJsonValue(m_episode_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_last_timestamp_ms_isSet) {
        obj.insert(QString("last_timestamp_ms"), ::OpenAPI::toJsonValue(m_last_timestamp_ms));
    }
    if (m_listennotes_url_isSet) {
        obj.insert(QString("listennotes_url"), ::OpenAPI::toJsonValue(m_listennotes_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_podcast_count_isSet) {
        obj.insert(QString("podcast_count"), ::OpenAPI::toJsonValue(m_podcast_count));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_total_audio_length_sec_isSet) {
        obj.insert(QString("total_audio_length_sec"), ::OpenAPI::toJsonValue(m_total_audio_length_sec));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIPlaylistsResponse_playlists_inner::getDescription() const {
    return m_description;
}
void OAIPlaylistsResponse_playlists_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlaylistsResponse_playlists_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlaylistsResponse_playlists_inner::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIPlaylistsResponse_playlists_inner::getEpisodeCount() const {
    return m_episode_count;
}
void OAIPlaylistsResponse_playlists_inner::setEpisodeCount(const qint32 &episode_count) {
    m_episode_count = episode_count;
    m_episode_count_isSet = true;
}

bool OAIPlaylistsResponse_playlists_inner::is_episode_count_Set() const{
    return m_episode_count_isSet;
}

bool OAIPlaylistsResponse_playlists_inner::is_episode_count_Valid() const{
    return m_episode_count_isValid;
}

QString OAIPlaylistsResponse_playlists_inner::getId() const {
    return m_id;
}
void OAIPlaylistsResponse_playlists_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlaylistsResponse_playlists_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlaylistsResponse_playlists_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlaylistsResponse_playlists_inner::getImage() const {
    return m_image;
}
void OAIPlaylistsResponse_playlists_inner::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPlaylistsResponse_playlists_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPlaylistsResponse_playlists_inner::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIPlaylistsResponse_playlists_inner::getLastTimestampMs() const {
    return m_last_timestamp_ms;
}
void OAIPlaylistsResponse_playlists_inner::setLastTimestampMs(const qint32 &last_timestamp_ms) {
    m_last_timestamp_ms = last_timestamp_ms;
    m_last_timestamp_ms_isSet = true;
}

bool OAIPlaylistsResponse_playlists_inner::is_last_timestamp_ms_Set() const{
    return m_last_timestamp_ms_isSet;
}

bool OAIPlaylistsResponse_playlists_inner::is_last_timestamp_ms_Valid() const{
    return m_last_timestamp_ms_isValid;
}

QString OAIPlaylistsResponse_playlists_inner::getListennotesUrl() const {
    return m_listennotes_url;
}
void OAIPlaylistsResponse_playlists_inner::setListennotesUrl(const QString &listennotes_url) {
    m_listennotes_url = listennotes_url;
    m_listennotes_url_isSet = true;
}

bool OAIPlaylistsResponse_playlists_inner::is_listennotes_url_Set() const{
    return m_listennotes_url_isSet;
}

bool OAIPlaylistsResponse_playlists_inner::is_listennotes_url_Valid() const{
    return m_listennotes_url_isValid;
}

QString OAIPlaylistsResponse_playlists_inner::getName() const {
    return m_name;
}
void OAIPlaylistsResponse_playlists_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlaylistsResponse_playlists_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlaylistsResponse_playlists_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlaylistsResponse_playlists_inner::getPodcastCount() const {
    return m_podcast_count;
}
void OAIPlaylistsResponse_playlists_inner::setPodcastCount(const qint32 &podcast_count) {
    m_podcast_count = podcast_count;
    m_podcast_count_isSet = true;
}

bool OAIPlaylistsResponse_playlists_inner::is_podcast_count_Set() const{
    return m_podcast_count_isSet;
}

bool OAIPlaylistsResponse_playlists_inner::is_podcast_count_Valid() const{
    return m_podcast_count_isValid;
}

QString OAIPlaylistsResponse_playlists_inner::getThumbnail() const {
    return m_thumbnail;
}
void OAIPlaylistsResponse_playlists_inner::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIPlaylistsResponse_playlists_inner::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIPlaylistsResponse_playlists_inner::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

qint32 OAIPlaylistsResponse_playlists_inner::getTotalAudioLengthSec() const {
    return m_total_audio_length_sec;
}
void OAIPlaylistsResponse_playlists_inner::setTotalAudioLengthSec(const qint32 &total_audio_length_sec) {
    m_total_audio_length_sec = total_audio_length_sec;
    m_total_audio_length_sec_isSet = true;
}

bool OAIPlaylistsResponse_playlists_inner::is_total_audio_length_sec_Set() const{
    return m_total_audio_length_sec_isSet;
}

bool OAIPlaylistsResponse_playlists_inner::is_total_audio_length_sec_Valid() const{
    return m_total_audio_length_sec_isValid;
}

OAIPlaylistVisibilityField OAIPlaylistsResponse_playlists_inner::getVisibility() const {
    return m_visibility;
}
void OAIPlaylistsResponse_playlists_inner::setVisibility(const OAIPlaylistVisibilityField &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIPlaylistsResponse_playlists_inner::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIPlaylistsResponse_playlists_inner::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIPlaylistsResponse_playlists_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_timestamp_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listennotes_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_podcast_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_audio_length_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylistsResponse_playlists_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
