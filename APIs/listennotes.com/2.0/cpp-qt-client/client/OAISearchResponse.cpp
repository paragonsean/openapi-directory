/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResponse::OAISearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResponse::OAISearchResponse() {
    this->initializeModel();
}

OAISearchResponse::~OAISearchResponse() {}

void OAISearchResponse::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_next_offset_isSet = false;
    m_next_offset_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_took_isSet = false;
    m_took_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAISearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResponse::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_next_offset_isValid = ::OpenAPI::fromJsonValue(m_next_offset, json[QString("next_offset")]);
    m_next_offset_isSet = !json[QString("next_offset")].isNull() && m_next_offset_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_took_isValid = ::OpenAPI::fromJsonValue(m_took, json[QString("took")]);
    m_took_isSet = !json[QString("took")].isNull() && m_took_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAISearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_next_offset_isSet) {
        obj.insert(QString("next_offset"), ::OpenAPI::toJsonValue(m_next_offset));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_took_isSet) {
        obj.insert(QString("took"), ::OpenAPI::toJsonValue(m_took));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAISearchResponse::getCount() const {
    return m_count;
}
void OAISearchResponse::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAISearchResponse::is_count_Set() const{
    return m_count_isSet;
}

bool OAISearchResponse::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAISearchResponse::getNextOffset() const {
    return m_next_offset;
}
void OAISearchResponse::setNextOffset(const qint32 &next_offset) {
    m_next_offset = next_offset;
    m_next_offset_isSet = true;
}

bool OAISearchResponse::is_next_offset_Set() const{
    return m_next_offset_isSet;
}

bool OAISearchResponse::is_next_offset_Valid() const{
    return m_next_offset_isValid;
}

QList<OAISearchResponse_results_inner> OAISearchResponse::getResults() const {
    return m_results;
}
void OAISearchResponse::setResults(const QList<OAISearchResponse_results_inner> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAISearchResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAISearchResponse::is_results_Valid() const{
    return m_results_isValid;
}

double OAISearchResponse::getTook() const {
    return m_took;
}
void OAISearchResponse::setTook(const double &took) {
    m_took = took;
    m_took_isSet = true;
}

bool OAISearchResponse::is_took_Set() const{
    return m_took_isSet;
}

bool OAISearchResponse::is_took_Valid() const{
    return m_took_isValid;
}

qint32 OAISearchResponse::getTotal() const {
    return m_total;
}
void OAISearchResponse::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAISearchResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAISearchResponse::is_total_Valid() const{
    return m_total_isValid;
}

bool OAISearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_took_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
