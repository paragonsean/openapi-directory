/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistItem::OAIPlaylistItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistItem::OAIPlaylistItem() {
    this->initializeModel();
}

OAIPlaylistItem::~OAIPlaylistItem() {}

void OAIPlaylistItem::initializeModel() {

    m_added_at_ms_isSet = false;
    m_added_at_ms_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPlaylistItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylistItem::fromJsonObject(QJsonObject json) {

    m_added_at_ms_isValid = ::OpenAPI::fromJsonValue(m_added_at_ms, json[QString("added_at_ms")]);
    m_added_at_ms_isSet = !json[QString("added_at_ms")].isNull() && m_added_at_ms_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPlaylistItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylistItem::asJsonObject() const {
    QJsonObject obj;
    if (m_added_at_ms_isSet) {
        obj.insert(QString("added_at_ms"), ::OpenAPI::toJsonValue(m_added_at_ms));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIPlaylistItem::getAddedAtMs() const {
    return m_added_at_ms;
}
void OAIPlaylistItem::setAddedAtMs(const qint32 &added_at_ms) {
    m_added_at_ms = added_at_ms;
    m_added_at_ms_isSet = true;
}

bool OAIPlaylistItem::is_added_at_ms_Set() const{
    return m_added_at_ms_isSet;
}

bool OAIPlaylistItem::is_added_at_ms_Valid() const{
    return m_added_at_ms_isValid;
}

OAIPlaylistItem_data OAIPlaylistItem::getData() const {
    return m_data;
}
void OAIPlaylistItem::setData(const OAIPlaylistItem_data &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIPlaylistItem::is_data_Set() const{
    return m_data_isSet;
}

bool OAIPlaylistItem::is_data_Valid() const{
    return m_data_isValid;
}

qint32 OAIPlaylistItem::getId() const {
    return m_id;
}
void OAIPlaylistItem::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlaylistItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlaylistItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlaylistItem::getNotes() const {
    return m_notes;
}
void OAIPlaylistItem::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIPlaylistItem::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIPlaylistItem::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIPlaylistItem::getType() const {
    return m_type;
}
void OAIPlaylistItem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlaylistItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlaylistItem::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPlaylistItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_at_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylistItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
