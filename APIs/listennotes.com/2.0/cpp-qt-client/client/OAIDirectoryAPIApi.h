/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDirectoryAPIApi_H
#define OAI_OAIDirectoryAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBestPodcastsResponse.h"
#include "OAICuratedListFull.h"
#include "OAIEpisodeFull.h"
#include "OAIEpisodeSimple.h"
#include "OAIGetCuratedPodcastsResponse.h"
#include "OAIGetEpisodeRecommendationsResponse.h"
#include "OAIGetEpisodesInBatchResponse.h"
#include "OAIGetGenresResponse.h"
#include "OAIGetLanguagesResponse.h"
#include "OAIGetPodcastRecommendationsResponse.h"
#include "OAIGetPodcastsInBatchResponse.h"
#include "OAIGetRegionsResponse.h"
#include "OAIPodcastFull.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDirectoryAPIApi : public QObject {
    Q_OBJECT

public:
    OAIDirectoryAPIApi(const int timeOut = 0);
    ~OAIDirectoryAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  genre_id QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  region QString [optional]
    * @param[in]  publisher_region QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  safe_mode qint32 [optional]
    */
    virtual void getBestPodcasts(const QString &x_listen_api_key, const ::OpenAPI::OptionalParam<QString> &genre_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &publisher_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &safe_mode = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getCuratedPodcastById(const QString &x_listen_api_key, const QString &id);

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void getCuratedPodcasts(const QString &x_listen_api_key, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  show_transcript qint32 [optional]
    */
    virtual void getEpisodeById(const QString &x_listen_api_key, const QString &id, const ::OpenAPI::OptionalParam<qint32> &show_transcript = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  safe_mode qint32 [optional]
    */
    virtual void getEpisodeRecommendations(const QString &x_listen_api_key, const QString &id, const ::OpenAPI::OptionalParam<qint32> &safe_mode = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  ids QString [required]
    */
    virtual void getEpisodesInBatch(const QString &x_listen_api_key, const QString &ids);

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  top_level_only qint32 [optional]
    */
    virtual void getGenres(const QString &x_listen_api_key, const ::OpenAPI::OptionalParam<qint32> &top_level_only = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_listen_api_key QString [required]
    */
    virtual void getLanguages(const QString &x_listen_api_key);

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  next_episode_pub_date qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getPodcastById(const QString &x_listen_api_key, const QString &id, const ::OpenAPI::OptionalParam<qint32> &next_episode_pub_date = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  safe_mode qint32 [optional]
    */
    virtual void getPodcastRecommendations(const QString &x_listen_api_key, const QString &id, const ::OpenAPI::OptionalParam<qint32> &safe_mode = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_listen_api_key QString [required]
    * @param[in]  ids QString [optional]
    * @param[in]  itunes_ids QString [optional]
    * @param[in]  next_episode_pub_date qint32 [optional]
    * @param[in]  rsses QString [optional]
    * @param[in]  show_latest_episodes qint32 [optional]
    * @param[in]  spotify_ids QString [optional]
    */
    virtual void getPodcastsInBatch(const QString &x_listen_api_key, const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &itunes_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &next_episode_pub_date = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &rsses = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &show_latest_episodes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &spotify_ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_listen_api_key QString [required]
    */
    virtual void getRegions(const QString &x_listen_api_key);

    /**
    * @param[in]  x_listen_api_key QString [required]
    */
    virtual void justListen(const QString &x_listen_api_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getBestPodcastsCallback(OAIHttpRequestWorker *worker);
    void getCuratedPodcastByIdCallback(OAIHttpRequestWorker *worker);
    void getCuratedPodcastsCallback(OAIHttpRequestWorker *worker);
    void getEpisodeByIdCallback(OAIHttpRequestWorker *worker);
    void getEpisodeRecommendationsCallback(OAIHttpRequestWorker *worker);
    void getEpisodesInBatchCallback(OAIHttpRequestWorker *worker);
    void getGenresCallback(OAIHttpRequestWorker *worker);
    void getLanguagesCallback(OAIHttpRequestWorker *worker);
    void getPodcastByIdCallback(OAIHttpRequestWorker *worker);
    void getPodcastRecommendationsCallback(OAIHttpRequestWorker *worker);
    void getPodcastsInBatchCallback(OAIHttpRequestWorker *worker);
    void getRegionsCallback(OAIHttpRequestWorker *worker);
    void justListenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getBestPodcastsSignal(OAIBestPodcastsResponse summary);
    void getCuratedPodcastByIdSignal(OAICuratedListFull summary);
    void getCuratedPodcastsSignal(OAIGetCuratedPodcastsResponse summary);
    void getEpisodeByIdSignal(OAIEpisodeFull summary);
    void getEpisodeRecommendationsSignal(OAIGetEpisodeRecommendationsResponse summary);
    void getEpisodesInBatchSignal(OAIGetEpisodesInBatchResponse summary);
    void getGenresSignal(OAIGetGenresResponse summary);
    void getLanguagesSignal(OAIGetLanguagesResponse summary);
    void getPodcastByIdSignal(OAIPodcastFull summary);
    void getPodcastRecommendationsSignal(OAIGetPodcastRecommendationsResponse summary);
    void getPodcastsInBatchSignal(OAIGetPodcastsInBatchResponse summary);
    void getRegionsSignal(OAIGetRegionsResponse summary);
    void justListenSignal(OAIEpisodeSimple summary);


    void getBestPodcastsSignalFull(OAIHttpRequestWorker *worker, OAIBestPodcastsResponse summary);
    void getCuratedPodcastByIdSignalFull(OAIHttpRequestWorker *worker, OAICuratedListFull summary);
    void getCuratedPodcastsSignalFull(OAIHttpRequestWorker *worker, OAIGetCuratedPodcastsResponse summary);
    void getEpisodeByIdSignalFull(OAIHttpRequestWorker *worker, OAIEpisodeFull summary);
    void getEpisodeRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIGetEpisodeRecommendationsResponse summary);
    void getEpisodesInBatchSignalFull(OAIHttpRequestWorker *worker, OAIGetEpisodesInBatchResponse summary);
    void getGenresSignalFull(OAIHttpRequestWorker *worker, OAIGetGenresResponse summary);
    void getLanguagesSignalFull(OAIHttpRequestWorker *worker, OAIGetLanguagesResponse summary);
    void getPodcastByIdSignalFull(OAIHttpRequestWorker *worker, OAIPodcastFull summary);
    void getPodcastRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIGetPodcastRecommendationsResponse summary);
    void getPodcastsInBatchSignalFull(OAIHttpRequestWorker *worker, OAIGetPodcastsInBatchResponse summary);
    void getRegionsSignalFull(OAIHttpRequestWorker *worker, OAIGetRegionsResponse summary);
    void justListenSignalFull(OAIHttpRequestWorker *worker, OAIEpisodeSimple summary);

    Q_DECL_DEPRECATED_X("Use getBestPodcastsSignalError() instead")
    void getBestPodcastsSignalE(OAIBestPodcastsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBestPodcastsSignalError(OAIBestPodcastsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCuratedPodcastByIdSignalError() instead")
    void getCuratedPodcastByIdSignalE(OAICuratedListFull summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCuratedPodcastByIdSignalError(OAICuratedListFull summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCuratedPodcastsSignalError() instead")
    void getCuratedPodcastsSignalE(OAIGetCuratedPodcastsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCuratedPodcastsSignalError(OAIGetCuratedPodcastsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodeByIdSignalError() instead")
    void getEpisodeByIdSignalE(OAIEpisodeFull summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodeByIdSignalError(OAIEpisodeFull summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodeRecommendationsSignalError() instead")
    void getEpisodeRecommendationsSignalE(OAIGetEpisodeRecommendationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodeRecommendationsSignalError(OAIGetEpisodeRecommendationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodesInBatchSignalError() instead")
    void getEpisodesInBatchSignalE(OAIGetEpisodesInBatchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodesInBatchSignalError(OAIGetEpisodesInBatchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenresSignalError() instead")
    void getGenresSignalE(OAIGetGenresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenresSignalError(OAIGetGenresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLanguagesSignalError() instead")
    void getLanguagesSignalE(OAIGetLanguagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLanguagesSignalError(OAIGetLanguagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastByIdSignalError() instead")
    void getPodcastByIdSignalE(OAIPodcastFull summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastByIdSignalError(OAIPodcastFull summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastRecommendationsSignalError() instead")
    void getPodcastRecommendationsSignalE(OAIGetPodcastRecommendationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastRecommendationsSignalError(OAIGetPodcastRecommendationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastsInBatchSignalError() instead")
    void getPodcastsInBatchSignalE(OAIGetPodcastsInBatchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastsInBatchSignalError(OAIGetPodcastsInBatchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegionsSignalError() instead")
    void getRegionsSignalE(OAIGetRegionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegionsSignalError(OAIGetRegionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use justListenSignalError() instead")
    void justListenSignalE(OAIEpisodeSimple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void justListenSignalError(OAIEpisodeSimple summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getBestPodcastsSignalErrorFull() instead")
    void getBestPodcastsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBestPodcastsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCuratedPodcastByIdSignalErrorFull() instead")
    void getCuratedPodcastByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCuratedPodcastByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCuratedPodcastsSignalErrorFull() instead")
    void getCuratedPodcastsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCuratedPodcastsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodeByIdSignalErrorFull() instead")
    void getEpisodeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodeRecommendationsSignalErrorFull() instead")
    void getEpisodeRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodeRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEpisodesInBatchSignalErrorFull() instead")
    void getEpisodesInBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodesInBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenresSignalErrorFull() instead")
    void getGenresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLanguagesSignalErrorFull() instead")
    void getLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastByIdSignalErrorFull() instead")
    void getPodcastByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastRecommendationsSignalErrorFull() instead")
    void getPodcastRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastsInBatchSignalErrorFull() instead")
    void getPodcastsInBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastsInBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegionsSignalErrorFull() instead")
    void getRegionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use justListenSignalErrorFull() instead")
    void justListenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void justListenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
