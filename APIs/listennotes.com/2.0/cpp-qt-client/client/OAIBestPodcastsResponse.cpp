/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBestPodcastsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBestPodcastsResponse::OAIBestPodcastsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBestPodcastsResponse::OAIBestPodcastsResponse() {
    this->initializeModel();
}

OAIBestPodcastsResponse::~OAIBestPodcastsResponse() {}

void OAIBestPodcastsResponse::initializeModel() {

    m_has_next_isSet = false;
    m_has_next_isValid = false;

    m_has_previous_isSet = false;
    m_has_previous_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_listennotes_url_isSet = false;
    m_listennotes_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_page_number_isSet = false;
    m_next_page_number_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_podcasts_isSet = false;
    m_podcasts_isValid = false;

    m_previous_page_number_isSet = false;
    m_previous_page_number_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIBestPodcastsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBestPodcastsResponse::fromJsonObject(QJsonObject json) {

    m_has_next_isValid = ::OpenAPI::fromJsonValue(m_has_next, json[QString("has_next")]);
    m_has_next_isSet = !json[QString("has_next")].isNull() && m_has_next_isValid;

    m_has_previous_isValid = ::OpenAPI::fromJsonValue(m_has_previous, json[QString("has_previous")]);
    m_has_previous_isSet = !json[QString("has_previous")].isNull() && m_has_previous_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_listennotes_url_isValid = ::OpenAPI::fromJsonValue(m_listennotes_url, json[QString("listennotes_url")]);
    m_listennotes_url_isSet = !json[QString("listennotes_url")].isNull() && m_listennotes_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_page_number_isValid = ::OpenAPI::fromJsonValue(m_next_page_number, json[QString("next_page_number")]);
    m_next_page_number_isSet = !json[QString("next_page_number")].isNull() && m_next_page_number_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("page_number")]);
    m_page_number_isSet = !json[QString("page_number")].isNull() && m_page_number_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_podcasts_isValid = ::OpenAPI::fromJsonValue(m_podcasts, json[QString("podcasts")]);
    m_podcasts_isSet = !json[QString("podcasts")].isNull() && m_podcasts_isValid;

    m_previous_page_number_isValid = ::OpenAPI::fromJsonValue(m_previous_page_number, json[QString("previous_page_number")]);
    m_previous_page_number_isSet = !json[QString("previous_page_number")].isNull() && m_previous_page_number_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIBestPodcastsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBestPodcastsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_has_next_isSet) {
        obj.insert(QString("has_next"), ::OpenAPI::toJsonValue(m_has_next));
    }
    if (m_has_previous_isSet) {
        obj.insert(QString("has_previous"), ::OpenAPI::toJsonValue(m_has_previous));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_listennotes_url_isSet) {
        obj.insert(QString("listennotes_url"), ::OpenAPI::toJsonValue(m_listennotes_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_page_number_isSet) {
        obj.insert(QString("next_page_number"), ::OpenAPI::toJsonValue(m_next_page_number));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("page_number"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_podcasts.size() > 0) {
        obj.insert(QString("podcasts"), ::OpenAPI::toJsonValue(m_podcasts));
    }
    if (m_previous_page_number_isSet) {
        obj.insert(QString("previous_page_number"), ::OpenAPI::toJsonValue(m_previous_page_number));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

bool OAIBestPodcastsResponse::isHasNext() const {
    return m_has_next;
}
void OAIBestPodcastsResponse::setHasNext(const bool &has_next) {
    m_has_next = has_next;
    m_has_next_isSet = true;
}

bool OAIBestPodcastsResponse::is_has_next_Set() const{
    return m_has_next_isSet;
}

bool OAIBestPodcastsResponse::is_has_next_Valid() const{
    return m_has_next_isValid;
}

bool OAIBestPodcastsResponse::isHasPrevious() const {
    return m_has_previous;
}
void OAIBestPodcastsResponse::setHasPrevious(const bool &has_previous) {
    m_has_previous = has_previous;
    m_has_previous_isSet = true;
}

bool OAIBestPodcastsResponse::is_has_previous_Set() const{
    return m_has_previous_isSet;
}

bool OAIBestPodcastsResponse::is_has_previous_Valid() const{
    return m_has_previous_isValid;
}

qint32 OAIBestPodcastsResponse::getId() const {
    return m_id;
}
void OAIBestPodcastsResponse::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBestPodcastsResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBestPodcastsResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBestPodcastsResponse::getListennotesUrl() const {
    return m_listennotes_url;
}
void OAIBestPodcastsResponse::setListennotesUrl(const QString &listennotes_url) {
    m_listennotes_url = listennotes_url;
    m_listennotes_url_isSet = true;
}

bool OAIBestPodcastsResponse::is_listennotes_url_Set() const{
    return m_listennotes_url_isSet;
}

bool OAIBestPodcastsResponse::is_listennotes_url_Valid() const{
    return m_listennotes_url_isValid;
}

QString OAIBestPodcastsResponse::getName() const {
    return m_name;
}
void OAIBestPodcastsResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBestPodcastsResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBestPodcastsResponse::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIBestPodcastsResponse::getNextPageNumber() const {
    return m_next_page_number;
}
void OAIBestPodcastsResponse::setNextPageNumber(const qint32 &next_page_number) {
    m_next_page_number = next_page_number;
    m_next_page_number_isSet = true;
}

bool OAIBestPodcastsResponse::is_next_page_number_Set() const{
    return m_next_page_number_isSet;
}

bool OAIBestPodcastsResponse::is_next_page_number_Valid() const{
    return m_next_page_number_isValid;
}

qint32 OAIBestPodcastsResponse::getPageNumber() const {
    return m_page_number;
}
void OAIBestPodcastsResponse::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIBestPodcastsResponse::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIBestPodcastsResponse::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIBestPodcastsResponse::getParentId() const {
    return m_parent_id;
}
void OAIBestPodcastsResponse::setParentId(const qint32 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIBestPodcastsResponse::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIBestPodcastsResponse::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QList<OAIPodcastSimple> OAIBestPodcastsResponse::getPodcasts() const {
    return m_podcasts;
}
void OAIBestPodcastsResponse::setPodcasts(const QList<OAIPodcastSimple> &podcasts) {
    m_podcasts = podcasts;
    m_podcasts_isSet = true;
}

bool OAIBestPodcastsResponse::is_podcasts_Set() const{
    return m_podcasts_isSet;
}

bool OAIBestPodcastsResponse::is_podcasts_Valid() const{
    return m_podcasts_isValid;
}

qint32 OAIBestPodcastsResponse::getPreviousPageNumber() const {
    return m_previous_page_number;
}
void OAIBestPodcastsResponse::setPreviousPageNumber(const qint32 &previous_page_number) {
    m_previous_page_number = previous_page_number;
    m_previous_page_number_isSet = true;
}

bool OAIBestPodcastsResponse::is_previous_page_number_Set() const{
    return m_previous_page_number_isSet;
}

bool OAIBestPodcastsResponse::is_previous_page_number_Valid() const{
    return m_previous_page_number_isValid;
}

qint32 OAIBestPodcastsResponse::getTotal() const {
    return m_total;
}
void OAIBestPodcastsResponse::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIBestPodcastsResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAIBestPodcastsResponse::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIBestPodcastsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_previous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listennotes_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_podcasts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBestPodcastsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_has_next_isValid && m_has_previous_isValid && m_id_isValid && m_listennotes_url_isValid && m_name_isValid && m_next_page_number_isValid && m_page_number_isValid && m_parent_id_isValid && m_podcasts_isValid && m_previous_page_number_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
