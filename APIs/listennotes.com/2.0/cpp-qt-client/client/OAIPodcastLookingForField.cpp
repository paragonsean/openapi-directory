/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcastLookingForField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcastLookingForField::OAIPodcastLookingForField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcastLookingForField::OAIPodcastLookingForField() {
    this->initializeModel();
}

OAIPodcastLookingForField::~OAIPodcastLookingForField() {}

void OAIPodcastLookingForField::initializeModel() {

    m_cohosts_isSet = false;
    m_cohosts_isValid = false;

    m_cross_promotion_isSet = false;
    m_cross_promotion_isValid = false;

    m_guests_isSet = false;
    m_guests_isValid = false;

    m_sponsors_isSet = false;
    m_sponsors_isValid = false;
}

void OAIPodcastLookingForField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcastLookingForField::fromJsonObject(QJsonObject json) {

    m_cohosts_isValid = ::OpenAPI::fromJsonValue(m_cohosts, json[QString("cohosts")]);
    m_cohosts_isSet = !json[QString("cohosts")].isNull() && m_cohosts_isValid;

    m_cross_promotion_isValid = ::OpenAPI::fromJsonValue(m_cross_promotion, json[QString("cross_promotion")]);
    m_cross_promotion_isSet = !json[QString("cross_promotion")].isNull() && m_cross_promotion_isValid;

    m_guests_isValid = ::OpenAPI::fromJsonValue(m_guests, json[QString("guests")]);
    m_guests_isSet = !json[QString("guests")].isNull() && m_guests_isValid;

    m_sponsors_isValid = ::OpenAPI::fromJsonValue(m_sponsors, json[QString("sponsors")]);
    m_sponsors_isSet = !json[QString("sponsors")].isNull() && m_sponsors_isValid;
}

QString OAIPodcastLookingForField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcastLookingForField::asJsonObject() const {
    QJsonObject obj;
    if (m_cohosts_isSet) {
        obj.insert(QString("cohosts"), ::OpenAPI::toJsonValue(m_cohosts));
    }
    if (m_cross_promotion_isSet) {
        obj.insert(QString("cross_promotion"), ::OpenAPI::toJsonValue(m_cross_promotion));
    }
    if (m_guests_isSet) {
        obj.insert(QString("guests"), ::OpenAPI::toJsonValue(m_guests));
    }
    if (m_sponsors_isSet) {
        obj.insert(QString("sponsors"), ::OpenAPI::toJsonValue(m_sponsors));
    }
    return obj;
}

bool OAIPodcastLookingForField::isCohosts() const {
    return m_cohosts;
}
void OAIPodcastLookingForField::setCohosts(const bool &cohosts) {
    m_cohosts = cohosts;
    m_cohosts_isSet = true;
}

bool OAIPodcastLookingForField::is_cohosts_Set() const{
    return m_cohosts_isSet;
}

bool OAIPodcastLookingForField::is_cohosts_Valid() const{
    return m_cohosts_isValid;
}

bool OAIPodcastLookingForField::isCrossPromotion() const {
    return m_cross_promotion;
}
void OAIPodcastLookingForField::setCrossPromotion(const bool &cross_promotion) {
    m_cross_promotion = cross_promotion;
    m_cross_promotion_isSet = true;
}

bool OAIPodcastLookingForField::is_cross_promotion_Set() const{
    return m_cross_promotion_isSet;
}

bool OAIPodcastLookingForField::is_cross_promotion_Valid() const{
    return m_cross_promotion_isValid;
}

bool OAIPodcastLookingForField::isGuests() const {
    return m_guests;
}
void OAIPodcastLookingForField::setGuests(const bool &guests) {
    m_guests = guests;
    m_guests_isSet = true;
}

bool OAIPodcastLookingForField::is_guests_Set() const{
    return m_guests_isSet;
}

bool OAIPodcastLookingForField::is_guests_Valid() const{
    return m_guests_isValid;
}

bool OAIPodcastLookingForField::isSponsors() const {
    return m_sponsors;
}
void OAIPodcastLookingForField::setSponsors(const bool &sponsors) {
    m_sponsors = sponsors;
    m_sponsors_isSet = true;
}

bool OAIPodcastLookingForField::is_sponsors_Set() const{
    return m_sponsors_isSet;
}

bool OAIPodcastLookingForField::is_sponsors_Valid() const{
    return m_sponsors_isValid;
}

bool OAIPodcastLookingForField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cohosts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_promotion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsors_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcastLookingForField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
