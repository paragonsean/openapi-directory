/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEpisodeSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEpisodeSearchResult::OAIEpisodeSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEpisodeSearchResult::OAIEpisodeSearchResult() {
    this->initializeModel();
}

OAIEpisodeSearchResult::~OAIEpisodeSearchResult() {}

void OAIEpisodeSearchResult::initializeModel() {

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_audio_length_sec_isSet = false;
    m_audio_length_sec_isValid = false;

    m_description_highlighted_isSet = false;
    m_description_highlighted_isValid = false;

    m_description_original_isSet = false;
    m_description_original_isValid = false;

    m_explicit_content_isSet = false;
    m_explicit_content_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_itunes_id_isSet = false;
    m_itunes_id_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_listennotes_url_isSet = false;
    m_listennotes_url_isValid = false;

    m_podcast_isSet = false;
    m_podcast_isValid = false;

    m_pub_date_ms_isSet = false;
    m_pub_date_ms_isValid = false;

    m_rss_isSet = false;
    m_rss_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_title_highlighted_isSet = false;
    m_title_highlighted_isValid = false;

    m_title_original_isSet = false;
    m_title_original_isValid = false;

    m_transcripts_highlighted_isSet = false;
    m_transcripts_highlighted_isValid = false;
}

void OAIEpisodeSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEpisodeSearchResult::fromJsonObject(QJsonObject json) {

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("audio")]);
    m_audio_isSet = !json[QString("audio")].isNull() && m_audio_isValid;

    m_audio_length_sec_isValid = ::OpenAPI::fromJsonValue(m_audio_length_sec, json[QString("audio_length_sec")]);
    m_audio_length_sec_isSet = !json[QString("audio_length_sec")].isNull() && m_audio_length_sec_isValid;

    m_description_highlighted_isValid = ::OpenAPI::fromJsonValue(m_description_highlighted, json[QString("description_highlighted")]);
    m_description_highlighted_isSet = !json[QString("description_highlighted")].isNull() && m_description_highlighted_isValid;

    m_description_original_isValid = ::OpenAPI::fromJsonValue(m_description_original, json[QString("description_original")]);
    m_description_original_isSet = !json[QString("description_original")].isNull() && m_description_original_isValid;

    m_explicit_content_isValid = ::OpenAPI::fromJsonValue(m_explicit_content, json[QString("explicit_content")]);
    m_explicit_content_isSet = !json[QString("explicit_content")].isNull() && m_explicit_content_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_itunes_id_isValid = ::OpenAPI::fromJsonValue(m_itunes_id, json[QString("itunes_id")]);
    m_itunes_id_isSet = !json[QString("itunes_id")].isNull() && m_itunes_id_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_listennotes_url_isValid = ::OpenAPI::fromJsonValue(m_listennotes_url, json[QString("listennotes_url")]);
    m_listennotes_url_isSet = !json[QString("listennotes_url")].isNull() && m_listennotes_url_isValid;

    m_podcast_isValid = ::OpenAPI::fromJsonValue(m_podcast, json[QString("podcast")]);
    m_podcast_isSet = !json[QString("podcast")].isNull() && m_podcast_isValid;

    m_pub_date_ms_isValid = ::OpenAPI::fromJsonValue(m_pub_date_ms, json[QString("pub_date_ms")]);
    m_pub_date_ms_isSet = !json[QString("pub_date_ms")].isNull() && m_pub_date_ms_isValid;

    m_rss_isValid = ::OpenAPI::fromJsonValue(m_rss, json[QString("rss")]);
    m_rss_isSet = !json[QString("rss")].isNull() && m_rss_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_title_highlighted_isValid = ::OpenAPI::fromJsonValue(m_title_highlighted, json[QString("title_highlighted")]);
    m_title_highlighted_isSet = !json[QString("title_highlighted")].isNull() && m_title_highlighted_isValid;

    m_title_original_isValid = ::OpenAPI::fromJsonValue(m_title_original, json[QString("title_original")]);
    m_title_original_isSet = !json[QString("title_original")].isNull() && m_title_original_isValid;

    m_transcripts_highlighted_isValid = ::OpenAPI::fromJsonValue(m_transcripts_highlighted, json[QString("transcripts_highlighted")]);
    m_transcripts_highlighted_isSet = !json[QString("transcripts_highlighted")].isNull() && m_transcripts_highlighted_isValid;
}

QString OAIEpisodeSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEpisodeSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_isSet) {
        obj.insert(QString("audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_audio_length_sec_isSet) {
        obj.insert(QString("audio_length_sec"), ::OpenAPI::toJsonValue(m_audio_length_sec));
    }
    if (m_description_highlighted_isSet) {
        obj.insert(QString("description_highlighted"), ::OpenAPI::toJsonValue(m_description_highlighted));
    }
    if (m_description_original_isSet) {
        obj.insert(QString("description_original"), ::OpenAPI::toJsonValue(m_description_original));
    }
    if (m_explicit_content_isSet) {
        obj.insert(QString("explicit_content"), ::OpenAPI::toJsonValue(m_explicit_content));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_itunes_id_isSet) {
        obj.insert(QString("itunes_id"), ::OpenAPI::toJsonValue(m_itunes_id));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_listennotes_url_isSet) {
        obj.insert(QString("listennotes_url"), ::OpenAPI::toJsonValue(m_listennotes_url));
    }
    if (m_podcast.isSet()) {
        obj.insert(QString("podcast"), ::OpenAPI::toJsonValue(m_podcast));
    }
    if (m_pub_date_ms_isSet) {
        obj.insert(QString("pub_date_ms"), ::OpenAPI::toJsonValue(m_pub_date_ms));
    }
    if (m_rss_isSet) {
        obj.insert(QString("rss"), ::OpenAPI::toJsonValue(m_rss));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_title_highlighted_isSet) {
        obj.insert(QString("title_highlighted"), ::OpenAPI::toJsonValue(m_title_highlighted));
    }
    if (m_title_original_isSet) {
        obj.insert(QString("title_original"), ::OpenAPI::toJsonValue(m_title_original));
    }
    if (m_transcripts_highlighted.size() > 0) {
        obj.insert(QString("transcripts_highlighted"), ::OpenAPI::toJsonValue(m_transcripts_highlighted));
    }
    return obj;
}

QString OAIEpisodeSearchResult::getAudio() const {
    return m_audio;
}
void OAIEpisodeSearchResult::setAudio(const QString &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAIEpisodeSearchResult::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAIEpisodeSearchResult::is_audio_Valid() const{
    return m_audio_isValid;
}

qint32 OAIEpisodeSearchResult::getAudioLengthSec() const {
    return m_audio_length_sec;
}
void OAIEpisodeSearchResult::setAudioLengthSec(const qint32 &audio_length_sec) {
    m_audio_length_sec = audio_length_sec;
    m_audio_length_sec_isSet = true;
}

bool OAIEpisodeSearchResult::is_audio_length_sec_Set() const{
    return m_audio_length_sec_isSet;
}

bool OAIEpisodeSearchResult::is_audio_length_sec_Valid() const{
    return m_audio_length_sec_isValid;
}

QString OAIEpisodeSearchResult::getDescriptionHighlighted() const {
    return m_description_highlighted;
}
void OAIEpisodeSearchResult::setDescriptionHighlighted(const QString &description_highlighted) {
    m_description_highlighted = description_highlighted;
    m_description_highlighted_isSet = true;
}

bool OAIEpisodeSearchResult::is_description_highlighted_Set() const{
    return m_description_highlighted_isSet;
}

bool OAIEpisodeSearchResult::is_description_highlighted_Valid() const{
    return m_description_highlighted_isValid;
}

QString OAIEpisodeSearchResult::getDescriptionOriginal() const {
    return m_description_original;
}
void OAIEpisodeSearchResult::setDescriptionOriginal(const QString &description_original) {
    m_description_original = description_original;
    m_description_original_isSet = true;
}

bool OAIEpisodeSearchResult::is_description_original_Set() const{
    return m_description_original_isSet;
}

bool OAIEpisodeSearchResult::is_description_original_Valid() const{
    return m_description_original_isValid;
}

bool OAIEpisodeSearchResult::isExplicitContent() const {
    return m_explicit_content;
}
void OAIEpisodeSearchResult::setExplicitContent(const bool &explicit_content) {
    m_explicit_content = explicit_content;
    m_explicit_content_isSet = true;
}

bool OAIEpisodeSearchResult::is_explicit_content_Set() const{
    return m_explicit_content_isSet;
}

bool OAIEpisodeSearchResult::is_explicit_content_Valid() const{
    return m_explicit_content_isValid;
}

QString OAIEpisodeSearchResult::getId() const {
    return m_id;
}
void OAIEpisodeSearchResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEpisodeSearchResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEpisodeSearchResult::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEpisodeSearchResult::getImage() const {
    return m_image;
}
void OAIEpisodeSearchResult::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIEpisodeSearchResult::is_image_Set() const{
    return m_image_isSet;
}

bool OAIEpisodeSearchResult::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIEpisodeSearchResult::getItunesId() const {
    return m_itunes_id;
}
void OAIEpisodeSearchResult::setItunesId(const qint32 &itunes_id) {
    m_itunes_id = itunes_id;
    m_itunes_id_isSet = true;
}

bool OAIEpisodeSearchResult::is_itunes_id_Set() const{
    return m_itunes_id_isSet;
}

bool OAIEpisodeSearchResult::is_itunes_id_Valid() const{
    return m_itunes_id_isValid;
}

QString OAIEpisodeSearchResult::getLink() const {
    return m_link;
}
void OAIEpisodeSearchResult::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIEpisodeSearchResult::is_link_Set() const{
    return m_link_isSet;
}

bool OAIEpisodeSearchResult::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIEpisodeSearchResult::getListennotesUrl() const {
    return m_listennotes_url;
}
void OAIEpisodeSearchResult::setListennotesUrl(const QString &listennotes_url) {
    m_listennotes_url = listennotes_url;
    m_listennotes_url_isSet = true;
}

bool OAIEpisodeSearchResult::is_listennotes_url_Set() const{
    return m_listennotes_url_isSet;
}

bool OAIEpisodeSearchResult::is_listennotes_url_Valid() const{
    return m_listennotes_url_isValid;
}

OAIEpisodeSearchResult_podcast OAIEpisodeSearchResult::getPodcast() const {
    return m_podcast;
}
void OAIEpisodeSearchResult::setPodcast(const OAIEpisodeSearchResult_podcast &podcast) {
    m_podcast = podcast;
    m_podcast_isSet = true;
}

bool OAIEpisodeSearchResult::is_podcast_Set() const{
    return m_podcast_isSet;
}

bool OAIEpisodeSearchResult::is_podcast_Valid() const{
    return m_podcast_isValid;
}

qint32 OAIEpisodeSearchResult::getPubDateMs() const {
    return m_pub_date_ms;
}
void OAIEpisodeSearchResult::setPubDateMs(const qint32 &pub_date_ms) {
    m_pub_date_ms = pub_date_ms;
    m_pub_date_ms_isSet = true;
}

bool OAIEpisodeSearchResult::is_pub_date_ms_Set() const{
    return m_pub_date_ms_isSet;
}

bool OAIEpisodeSearchResult::is_pub_date_ms_Valid() const{
    return m_pub_date_ms_isValid;
}

QString OAIEpisodeSearchResult::getRss() const {
    return m_rss;
}
void OAIEpisodeSearchResult::setRss(const QString &rss) {
    m_rss = rss;
    m_rss_isSet = true;
}

bool OAIEpisodeSearchResult::is_rss_Set() const{
    return m_rss_isSet;
}

bool OAIEpisodeSearchResult::is_rss_Valid() const{
    return m_rss_isValid;
}

QString OAIEpisodeSearchResult::getThumbnail() const {
    return m_thumbnail;
}
void OAIEpisodeSearchResult::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIEpisodeSearchResult::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIEpisodeSearchResult::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAIEpisodeSearchResult::getTitleHighlighted() const {
    return m_title_highlighted;
}
void OAIEpisodeSearchResult::setTitleHighlighted(const QString &title_highlighted) {
    m_title_highlighted = title_highlighted;
    m_title_highlighted_isSet = true;
}

bool OAIEpisodeSearchResult::is_title_highlighted_Set() const{
    return m_title_highlighted_isSet;
}

bool OAIEpisodeSearchResult::is_title_highlighted_Valid() const{
    return m_title_highlighted_isValid;
}

QString OAIEpisodeSearchResult::getTitleOriginal() const {
    return m_title_original;
}
void OAIEpisodeSearchResult::setTitleOriginal(const QString &title_original) {
    m_title_original = title_original;
    m_title_original_isSet = true;
}

bool OAIEpisodeSearchResult::is_title_original_Set() const{
    return m_title_original_isSet;
}

bool OAIEpisodeSearchResult::is_title_original_Valid() const{
    return m_title_original_isValid;
}

QList<QString> OAIEpisodeSearchResult::getTranscriptsHighlighted() const {
    return m_transcripts_highlighted;
}
void OAIEpisodeSearchResult::setTranscriptsHighlighted(const QList<QString> &transcripts_highlighted) {
    m_transcripts_highlighted = transcripts_highlighted;
    m_transcripts_highlighted_isSet = true;
}

bool OAIEpisodeSearchResult::is_transcripts_highlighted_Set() const{
    return m_transcripts_highlighted_isSet;
}

bool OAIEpisodeSearchResult::is_transcripts_highlighted_Valid() const{
    return m_transcripts_highlighted_isValid;
}

bool OAIEpisodeSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_length_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_highlighted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explicit_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itunes_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listennotes_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_podcast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pub_date_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_highlighted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcripts_highlighted.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEpisodeSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
