/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcastSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcastSearchResult::OAIPodcastSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcastSearchResult::OAIPodcastSearchResult() {
    this->initializeModel();
}

OAIPodcastSearchResult::~OAIPodcastSearchResult() {}

void OAIPodcastSearchResult::initializeModel() {

    m_audio_length_sec_isSet = false;
    m_audio_length_sec_isValid = false;

    m_description_highlighted_isSet = false;
    m_description_highlighted_isValid = false;

    m_description_original_isSet = false;
    m_description_original_isValid = false;

    m_earliest_pub_date_ms_isSet = false;
    m_earliest_pub_date_ms_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_explicit_content_isSet = false;
    m_explicit_content_isValid = false;

    m_genre_ids_isSet = false;
    m_genre_ids_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_itunes_id_isSet = false;
    m_itunes_id_isValid = false;

    m_latest_episode_id_isSet = false;
    m_latest_episode_id_isValid = false;

    m_latest_pub_date_ms_isSet = false;
    m_latest_pub_date_ms_isValid = false;

    m_listen_score_isSet = false;
    m_listen_score_isValid = false;

    m_listen_score_global_rank_isSet = false;
    m_listen_score_global_rank_isValid = false;

    m_listennotes_url_isSet = false;
    m_listennotes_url_isValid = false;

    m_publisher_highlighted_isSet = false;
    m_publisher_highlighted_isValid = false;

    m_publisher_original_isSet = false;
    m_publisher_original_isValid = false;

    m_rss_isSet = false;
    m_rss_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_title_highlighted_isSet = false;
    m_title_highlighted_isValid = false;

    m_title_original_isSet = false;
    m_title_original_isValid = false;

    m_total_episodes_isSet = false;
    m_total_episodes_isValid = false;

    m_update_frequency_hours_isSet = false;
    m_update_frequency_hours_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIPodcastSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcastSearchResult::fromJsonObject(QJsonObject json) {

    m_audio_length_sec_isValid = ::OpenAPI::fromJsonValue(m_audio_length_sec, json[QString("audio_length_sec")]);
    m_audio_length_sec_isSet = !json[QString("audio_length_sec")].isNull() && m_audio_length_sec_isValid;

    m_description_highlighted_isValid = ::OpenAPI::fromJsonValue(m_description_highlighted, json[QString("description_highlighted")]);
    m_description_highlighted_isSet = !json[QString("description_highlighted")].isNull() && m_description_highlighted_isValid;

    m_description_original_isValid = ::OpenAPI::fromJsonValue(m_description_original, json[QString("description_original")]);
    m_description_original_isSet = !json[QString("description_original")].isNull() && m_description_original_isValid;

    m_earliest_pub_date_ms_isValid = ::OpenAPI::fromJsonValue(m_earliest_pub_date_ms, json[QString("earliest_pub_date_ms")]);
    m_earliest_pub_date_ms_isSet = !json[QString("earliest_pub_date_ms")].isNull() && m_earliest_pub_date_ms_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_explicit_content_isValid = ::OpenAPI::fromJsonValue(m_explicit_content, json[QString("explicit_content")]);
    m_explicit_content_isSet = !json[QString("explicit_content")].isNull() && m_explicit_content_isValid;

    m_genre_ids_isValid = ::OpenAPI::fromJsonValue(m_genre_ids, json[QString("genre_ids")]);
    m_genre_ids_isSet = !json[QString("genre_ids")].isNull() && m_genre_ids_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_itunes_id_isValid = ::OpenAPI::fromJsonValue(m_itunes_id, json[QString("itunes_id")]);
    m_itunes_id_isSet = !json[QString("itunes_id")].isNull() && m_itunes_id_isValid;

    m_latest_episode_id_isValid = ::OpenAPI::fromJsonValue(m_latest_episode_id, json[QString("latest_episode_id")]);
    m_latest_episode_id_isSet = !json[QString("latest_episode_id")].isNull() && m_latest_episode_id_isValid;

    m_latest_pub_date_ms_isValid = ::OpenAPI::fromJsonValue(m_latest_pub_date_ms, json[QString("latest_pub_date_ms")]);
    m_latest_pub_date_ms_isSet = !json[QString("latest_pub_date_ms")].isNull() && m_latest_pub_date_ms_isValid;

    m_listen_score_isValid = ::OpenAPI::fromJsonValue(m_listen_score, json[QString("listen_score")]);
    m_listen_score_isSet = !json[QString("listen_score")].isNull() && m_listen_score_isValid;

    m_listen_score_global_rank_isValid = ::OpenAPI::fromJsonValue(m_listen_score_global_rank, json[QString("listen_score_global_rank")]);
    m_listen_score_global_rank_isSet = !json[QString("listen_score_global_rank")].isNull() && m_listen_score_global_rank_isValid;

    m_listennotes_url_isValid = ::OpenAPI::fromJsonValue(m_listennotes_url, json[QString("listennotes_url")]);
    m_listennotes_url_isSet = !json[QString("listennotes_url")].isNull() && m_listennotes_url_isValid;

    m_publisher_highlighted_isValid = ::OpenAPI::fromJsonValue(m_publisher_highlighted, json[QString("publisher_highlighted")]);
    m_publisher_highlighted_isSet = !json[QString("publisher_highlighted")].isNull() && m_publisher_highlighted_isValid;

    m_publisher_original_isValid = ::OpenAPI::fromJsonValue(m_publisher_original, json[QString("publisher_original")]);
    m_publisher_original_isSet = !json[QString("publisher_original")].isNull() && m_publisher_original_isValid;

    m_rss_isValid = ::OpenAPI::fromJsonValue(m_rss, json[QString("rss")]);
    m_rss_isSet = !json[QString("rss")].isNull() && m_rss_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_title_highlighted_isValid = ::OpenAPI::fromJsonValue(m_title_highlighted, json[QString("title_highlighted")]);
    m_title_highlighted_isSet = !json[QString("title_highlighted")].isNull() && m_title_highlighted_isValid;

    m_title_original_isValid = ::OpenAPI::fromJsonValue(m_title_original, json[QString("title_original")]);
    m_title_original_isSet = !json[QString("title_original")].isNull() && m_title_original_isValid;

    m_total_episodes_isValid = ::OpenAPI::fromJsonValue(m_total_episodes, json[QString("total_episodes")]);
    m_total_episodes_isSet = !json[QString("total_episodes")].isNull() && m_total_episodes_isValid;

    m_update_frequency_hours_isValid = ::OpenAPI::fromJsonValue(m_update_frequency_hours, json[QString("update_frequency_hours")]);
    m_update_frequency_hours_isSet = !json[QString("update_frequency_hours")].isNull() && m_update_frequency_hours_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIPodcastSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcastSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_length_sec_isSet) {
        obj.insert(QString("audio_length_sec"), ::OpenAPI::toJsonValue(m_audio_length_sec));
    }
    if (m_description_highlighted_isSet) {
        obj.insert(QString("description_highlighted"), ::OpenAPI::toJsonValue(m_description_highlighted));
    }
    if (m_description_original_isSet) {
        obj.insert(QString("description_original"), ::OpenAPI::toJsonValue(m_description_original));
    }
    if (m_earliest_pub_date_ms_isSet) {
        obj.insert(QString("earliest_pub_date_ms"), ::OpenAPI::toJsonValue(m_earliest_pub_date_ms));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_explicit_content_isSet) {
        obj.insert(QString("explicit_content"), ::OpenAPI::toJsonValue(m_explicit_content));
    }
    if (m_genre_ids.size() > 0) {
        obj.insert(QString("genre_ids"), ::OpenAPI::toJsonValue(m_genre_ids));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_itunes_id_isSet) {
        obj.insert(QString("itunes_id"), ::OpenAPI::toJsonValue(m_itunes_id));
    }
    if (m_latest_episode_id_isSet) {
        obj.insert(QString("latest_episode_id"), ::OpenAPI::toJsonValue(m_latest_episode_id));
    }
    if (m_latest_pub_date_ms_isSet) {
        obj.insert(QString("latest_pub_date_ms"), ::OpenAPI::toJsonValue(m_latest_pub_date_ms));
    }
    if (m_listen_score_isSet) {
        obj.insert(QString("listen_score"), ::OpenAPI::toJsonValue(m_listen_score));
    }
    if (m_listen_score_global_rank_isSet) {
        obj.insert(QString("listen_score_global_rank"), ::OpenAPI::toJsonValue(m_listen_score_global_rank));
    }
    if (m_listennotes_url_isSet) {
        obj.insert(QString("listennotes_url"), ::OpenAPI::toJsonValue(m_listennotes_url));
    }
    if (m_publisher_highlighted_isSet) {
        obj.insert(QString("publisher_highlighted"), ::OpenAPI::toJsonValue(m_publisher_highlighted));
    }
    if (m_publisher_original_isSet) {
        obj.insert(QString("publisher_original"), ::OpenAPI::toJsonValue(m_publisher_original));
    }
    if (m_rss_isSet) {
        obj.insert(QString("rss"), ::OpenAPI::toJsonValue(m_rss));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_title_highlighted_isSet) {
        obj.insert(QString("title_highlighted"), ::OpenAPI::toJsonValue(m_title_highlighted));
    }
    if (m_title_original_isSet) {
        obj.insert(QString("title_original"), ::OpenAPI::toJsonValue(m_title_original));
    }
    if (m_total_episodes_isSet) {
        obj.insert(QString("total_episodes"), ::OpenAPI::toJsonValue(m_total_episodes));
    }
    if (m_update_frequency_hours_isSet) {
        obj.insert(QString("update_frequency_hours"), ::OpenAPI::toJsonValue(m_update_frequency_hours));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

qint32 OAIPodcastSearchResult::getAudioLengthSec() const {
    return m_audio_length_sec;
}
void OAIPodcastSearchResult::setAudioLengthSec(const qint32 &audio_length_sec) {
    m_audio_length_sec = audio_length_sec;
    m_audio_length_sec_isSet = true;
}

bool OAIPodcastSearchResult::is_audio_length_sec_Set() const{
    return m_audio_length_sec_isSet;
}

bool OAIPodcastSearchResult::is_audio_length_sec_Valid() const{
    return m_audio_length_sec_isValid;
}

QString OAIPodcastSearchResult::getDescriptionHighlighted() const {
    return m_description_highlighted;
}
void OAIPodcastSearchResult::setDescriptionHighlighted(const QString &description_highlighted) {
    m_description_highlighted = description_highlighted;
    m_description_highlighted_isSet = true;
}

bool OAIPodcastSearchResult::is_description_highlighted_Set() const{
    return m_description_highlighted_isSet;
}

bool OAIPodcastSearchResult::is_description_highlighted_Valid() const{
    return m_description_highlighted_isValid;
}

QString OAIPodcastSearchResult::getDescriptionOriginal() const {
    return m_description_original;
}
void OAIPodcastSearchResult::setDescriptionOriginal(const QString &description_original) {
    m_description_original = description_original;
    m_description_original_isSet = true;
}

bool OAIPodcastSearchResult::is_description_original_Set() const{
    return m_description_original_isSet;
}

bool OAIPodcastSearchResult::is_description_original_Valid() const{
    return m_description_original_isValid;
}

qint32 OAIPodcastSearchResult::getEarliestPubDateMs() const {
    return m_earliest_pub_date_ms;
}
void OAIPodcastSearchResult::setEarliestPubDateMs(const qint32 &earliest_pub_date_ms) {
    m_earliest_pub_date_ms = earliest_pub_date_ms;
    m_earliest_pub_date_ms_isSet = true;
}

bool OAIPodcastSearchResult::is_earliest_pub_date_ms_Set() const{
    return m_earliest_pub_date_ms_isSet;
}

bool OAIPodcastSearchResult::is_earliest_pub_date_ms_Valid() const{
    return m_earliest_pub_date_ms_isValid;
}

QString OAIPodcastSearchResult::getEmail() const {
    return m_email;
}
void OAIPodcastSearchResult::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIPodcastSearchResult::is_email_Set() const{
    return m_email_isSet;
}

bool OAIPodcastSearchResult::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIPodcastSearchResult::isExplicitContent() const {
    return m_explicit_content;
}
void OAIPodcastSearchResult::setExplicitContent(const bool &explicit_content) {
    m_explicit_content = explicit_content;
    m_explicit_content_isSet = true;
}

bool OAIPodcastSearchResult::is_explicit_content_Set() const{
    return m_explicit_content_isSet;
}

bool OAIPodcastSearchResult::is_explicit_content_Valid() const{
    return m_explicit_content_isValid;
}

QList<qint32> OAIPodcastSearchResult::getGenreIds() const {
    return m_genre_ids;
}
void OAIPodcastSearchResult::setGenreIds(const QList<qint32> &genre_ids) {
    m_genre_ids = genre_ids;
    m_genre_ids_isSet = true;
}

bool OAIPodcastSearchResult::is_genre_ids_Set() const{
    return m_genre_ids_isSet;
}

bool OAIPodcastSearchResult::is_genre_ids_Valid() const{
    return m_genre_ids_isValid;
}

QString OAIPodcastSearchResult::getId() const {
    return m_id;
}
void OAIPodcastSearchResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPodcastSearchResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPodcastSearchResult::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPodcastSearchResult::getImage() const {
    return m_image;
}
void OAIPodcastSearchResult::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPodcastSearchResult::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPodcastSearchResult::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIPodcastSearchResult::getItunesId() const {
    return m_itunes_id;
}
void OAIPodcastSearchResult::setItunesId(const qint32 &itunes_id) {
    m_itunes_id = itunes_id;
    m_itunes_id_isSet = true;
}

bool OAIPodcastSearchResult::is_itunes_id_Set() const{
    return m_itunes_id_isSet;
}

bool OAIPodcastSearchResult::is_itunes_id_Valid() const{
    return m_itunes_id_isValid;
}

QString OAIPodcastSearchResult::getLatestEpisodeId() const {
    return m_latest_episode_id;
}
void OAIPodcastSearchResult::setLatestEpisodeId(const QString &latest_episode_id) {
    m_latest_episode_id = latest_episode_id;
    m_latest_episode_id_isSet = true;
}

bool OAIPodcastSearchResult::is_latest_episode_id_Set() const{
    return m_latest_episode_id_isSet;
}

bool OAIPodcastSearchResult::is_latest_episode_id_Valid() const{
    return m_latest_episode_id_isValid;
}

qint32 OAIPodcastSearchResult::getLatestPubDateMs() const {
    return m_latest_pub_date_ms;
}
void OAIPodcastSearchResult::setLatestPubDateMs(const qint32 &latest_pub_date_ms) {
    m_latest_pub_date_ms = latest_pub_date_ms;
    m_latest_pub_date_ms_isSet = true;
}

bool OAIPodcastSearchResult::is_latest_pub_date_ms_Set() const{
    return m_latest_pub_date_ms_isSet;
}

bool OAIPodcastSearchResult::is_latest_pub_date_ms_Valid() const{
    return m_latest_pub_date_ms_isValid;
}

qint32 OAIPodcastSearchResult::getListenScore() const {
    return m_listen_score;
}
void OAIPodcastSearchResult::setListenScore(const qint32 &listen_score) {
    m_listen_score = listen_score;
    m_listen_score_isSet = true;
}

bool OAIPodcastSearchResult::is_listen_score_Set() const{
    return m_listen_score_isSet;
}

bool OAIPodcastSearchResult::is_listen_score_Valid() const{
    return m_listen_score_isValid;
}

QString OAIPodcastSearchResult::getListenScoreGlobalRank() const {
    return m_listen_score_global_rank;
}
void OAIPodcastSearchResult::setListenScoreGlobalRank(const QString &listen_score_global_rank) {
    m_listen_score_global_rank = listen_score_global_rank;
    m_listen_score_global_rank_isSet = true;
}

bool OAIPodcastSearchResult::is_listen_score_global_rank_Set() const{
    return m_listen_score_global_rank_isSet;
}

bool OAIPodcastSearchResult::is_listen_score_global_rank_Valid() const{
    return m_listen_score_global_rank_isValid;
}

QString OAIPodcastSearchResult::getListennotesUrl() const {
    return m_listennotes_url;
}
void OAIPodcastSearchResult::setListennotesUrl(const QString &listennotes_url) {
    m_listennotes_url = listennotes_url;
    m_listennotes_url_isSet = true;
}

bool OAIPodcastSearchResult::is_listennotes_url_Set() const{
    return m_listennotes_url_isSet;
}

bool OAIPodcastSearchResult::is_listennotes_url_Valid() const{
    return m_listennotes_url_isValid;
}

QString OAIPodcastSearchResult::getPublisherHighlighted() const {
    return m_publisher_highlighted;
}
void OAIPodcastSearchResult::setPublisherHighlighted(const QString &publisher_highlighted) {
    m_publisher_highlighted = publisher_highlighted;
    m_publisher_highlighted_isSet = true;
}

bool OAIPodcastSearchResult::is_publisher_highlighted_Set() const{
    return m_publisher_highlighted_isSet;
}

bool OAIPodcastSearchResult::is_publisher_highlighted_Valid() const{
    return m_publisher_highlighted_isValid;
}

QString OAIPodcastSearchResult::getPublisherOriginal() const {
    return m_publisher_original;
}
void OAIPodcastSearchResult::setPublisherOriginal(const QString &publisher_original) {
    m_publisher_original = publisher_original;
    m_publisher_original_isSet = true;
}

bool OAIPodcastSearchResult::is_publisher_original_Set() const{
    return m_publisher_original_isSet;
}

bool OAIPodcastSearchResult::is_publisher_original_Valid() const{
    return m_publisher_original_isValid;
}

QString OAIPodcastSearchResult::getRss() const {
    return m_rss;
}
void OAIPodcastSearchResult::setRss(const QString &rss) {
    m_rss = rss;
    m_rss_isSet = true;
}

bool OAIPodcastSearchResult::is_rss_Set() const{
    return m_rss_isSet;
}

bool OAIPodcastSearchResult::is_rss_Valid() const{
    return m_rss_isValid;
}

QString OAIPodcastSearchResult::getThumbnail() const {
    return m_thumbnail;
}
void OAIPodcastSearchResult::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIPodcastSearchResult::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIPodcastSearchResult::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAIPodcastSearchResult::getTitleHighlighted() const {
    return m_title_highlighted;
}
void OAIPodcastSearchResult::setTitleHighlighted(const QString &title_highlighted) {
    m_title_highlighted = title_highlighted;
    m_title_highlighted_isSet = true;
}

bool OAIPodcastSearchResult::is_title_highlighted_Set() const{
    return m_title_highlighted_isSet;
}

bool OAIPodcastSearchResult::is_title_highlighted_Valid() const{
    return m_title_highlighted_isValid;
}

QString OAIPodcastSearchResult::getTitleOriginal() const {
    return m_title_original;
}
void OAIPodcastSearchResult::setTitleOriginal(const QString &title_original) {
    m_title_original = title_original;
    m_title_original_isSet = true;
}

bool OAIPodcastSearchResult::is_title_original_Set() const{
    return m_title_original_isSet;
}

bool OAIPodcastSearchResult::is_title_original_Valid() const{
    return m_title_original_isValid;
}

qint32 OAIPodcastSearchResult::getTotalEpisodes() const {
    return m_total_episodes;
}
void OAIPodcastSearchResult::setTotalEpisodes(const qint32 &total_episodes) {
    m_total_episodes = total_episodes;
    m_total_episodes_isSet = true;
}

bool OAIPodcastSearchResult::is_total_episodes_Set() const{
    return m_total_episodes_isSet;
}

bool OAIPodcastSearchResult::is_total_episodes_Valid() const{
    return m_total_episodes_isValid;
}

qint32 OAIPodcastSearchResult::getUpdateFrequencyHours() const {
    return m_update_frequency_hours;
}
void OAIPodcastSearchResult::setUpdateFrequencyHours(const qint32 &update_frequency_hours) {
    m_update_frequency_hours = update_frequency_hours;
    m_update_frequency_hours_isSet = true;
}

bool OAIPodcastSearchResult::is_update_frequency_hours_Set() const{
    return m_update_frequency_hours_isSet;
}

bool OAIPodcastSearchResult::is_update_frequency_hours_Valid() const{
    return m_update_frequency_hours_isValid;
}

QString OAIPodcastSearchResult::getWebsite() const {
    return m_website;
}
void OAIPodcastSearchResult::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIPodcastSearchResult::is_website_Set() const{
    return m_website_isSet;
}

bool OAIPodcastSearchResult::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIPodcastSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_length_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_highlighted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest_pub_date_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explicit_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itunes_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_episode_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_pub_date_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listen_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listen_score_global_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listennotes_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_highlighted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_highlighted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_episodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_frequency_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcastSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
