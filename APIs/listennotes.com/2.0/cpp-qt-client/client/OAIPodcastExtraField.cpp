/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcastExtraField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcastExtraField::OAIPodcastExtraField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcastExtraField::OAIPodcastExtraField() {
    this->initializeModel();
}

OAIPodcastExtraField::~OAIPodcastExtraField() {}

void OAIPodcastExtraField::initializeModel() {

    m_amazon_music_url_isSet = false;
    m_amazon_music_url_isValid = false;

    m_facebook_handle_isSet = false;
    m_facebook_handle_isValid = false;

    m_google_url_isSet = false;
    m_google_url_isValid = false;

    m_instagram_handle_isSet = false;
    m_instagram_handle_isValid = false;

    m_linkedin_url_isSet = false;
    m_linkedin_url_isValid = false;

    m_patreon_handle_isSet = false;
    m_patreon_handle_isValid = false;

    m_spotify_url_isSet = false;
    m_spotify_url_isValid = false;

    m_twitter_handle_isSet = false;
    m_twitter_handle_isValid = false;

    m_url1_isSet = false;
    m_url1_isValid = false;

    m_url2_isSet = false;
    m_url2_isValid = false;

    m_url3_isSet = false;
    m_url3_isValid = false;

    m_wechat_handle_isSet = false;
    m_wechat_handle_isValid = false;

    m_youtube_url_isSet = false;
    m_youtube_url_isValid = false;
}

void OAIPodcastExtraField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcastExtraField::fromJsonObject(QJsonObject json) {

    m_amazon_music_url_isValid = ::OpenAPI::fromJsonValue(m_amazon_music_url, json[QString("amazon_music_url")]);
    m_amazon_music_url_isSet = !json[QString("amazon_music_url")].isNull() && m_amazon_music_url_isValid;

    m_facebook_handle_isValid = ::OpenAPI::fromJsonValue(m_facebook_handle, json[QString("facebook_handle")]);
    m_facebook_handle_isSet = !json[QString("facebook_handle")].isNull() && m_facebook_handle_isValid;

    m_google_url_isValid = ::OpenAPI::fromJsonValue(m_google_url, json[QString("google_url")]);
    m_google_url_isSet = !json[QString("google_url")].isNull() && m_google_url_isValid;

    m_instagram_handle_isValid = ::OpenAPI::fromJsonValue(m_instagram_handle, json[QString("instagram_handle")]);
    m_instagram_handle_isSet = !json[QString("instagram_handle")].isNull() && m_instagram_handle_isValid;

    m_linkedin_url_isValid = ::OpenAPI::fromJsonValue(m_linkedin_url, json[QString("linkedin_url")]);
    m_linkedin_url_isSet = !json[QString("linkedin_url")].isNull() && m_linkedin_url_isValid;

    m_patreon_handle_isValid = ::OpenAPI::fromJsonValue(m_patreon_handle, json[QString("patreon_handle")]);
    m_patreon_handle_isSet = !json[QString("patreon_handle")].isNull() && m_patreon_handle_isValid;

    m_spotify_url_isValid = ::OpenAPI::fromJsonValue(m_spotify_url, json[QString("spotify_url")]);
    m_spotify_url_isSet = !json[QString("spotify_url")].isNull() && m_spotify_url_isValid;

    m_twitter_handle_isValid = ::OpenAPI::fromJsonValue(m_twitter_handle, json[QString("twitter_handle")]);
    m_twitter_handle_isSet = !json[QString("twitter_handle")].isNull() && m_twitter_handle_isValid;

    m_url1_isValid = ::OpenAPI::fromJsonValue(m_url1, json[QString("url1")]);
    m_url1_isSet = !json[QString("url1")].isNull() && m_url1_isValid;

    m_url2_isValid = ::OpenAPI::fromJsonValue(m_url2, json[QString("url2")]);
    m_url2_isSet = !json[QString("url2")].isNull() && m_url2_isValid;

    m_url3_isValid = ::OpenAPI::fromJsonValue(m_url3, json[QString("url3")]);
    m_url3_isSet = !json[QString("url3")].isNull() && m_url3_isValid;

    m_wechat_handle_isValid = ::OpenAPI::fromJsonValue(m_wechat_handle, json[QString("wechat_handle")]);
    m_wechat_handle_isSet = !json[QString("wechat_handle")].isNull() && m_wechat_handle_isValid;

    m_youtube_url_isValid = ::OpenAPI::fromJsonValue(m_youtube_url, json[QString("youtube_url")]);
    m_youtube_url_isSet = !json[QString("youtube_url")].isNull() && m_youtube_url_isValid;
}

QString OAIPodcastExtraField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcastExtraField::asJsonObject() const {
    QJsonObject obj;
    if (m_amazon_music_url_isSet) {
        obj.insert(QString("amazon_music_url"), ::OpenAPI::toJsonValue(m_amazon_music_url));
    }
    if (m_facebook_handle_isSet) {
        obj.insert(QString("facebook_handle"), ::OpenAPI::toJsonValue(m_facebook_handle));
    }
    if (m_google_url_isSet) {
        obj.insert(QString("google_url"), ::OpenAPI::toJsonValue(m_google_url));
    }
    if (m_instagram_handle_isSet) {
        obj.insert(QString("instagram_handle"), ::OpenAPI::toJsonValue(m_instagram_handle));
    }
    if (m_linkedin_url_isSet) {
        obj.insert(QString("linkedin_url"), ::OpenAPI::toJsonValue(m_linkedin_url));
    }
    if (m_patreon_handle_isSet) {
        obj.insert(QString("patreon_handle"), ::OpenAPI::toJsonValue(m_patreon_handle));
    }
    if (m_spotify_url_isSet) {
        obj.insert(QString("spotify_url"), ::OpenAPI::toJsonValue(m_spotify_url));
    }
    if (m_twitter_handle_isSet) {
        obj.insert(QString("twitter_handle"), ::OpenAPI::toJsonValue(m_twitter_handle));
    }
    if (m_url1_isSet) {
        obj.insert(QString("url1"), ::OpenAPI::toJsonValue(m_url1));
    }
    if (m_url2_isSet) {
        obj.insert(QString("url2"), ::OpenAPI::toJsonValue(m_url2));
    }
    if (m_url3_isSet) {
        obj.insert(QString("url3"), ::OpenAPI::toJsonValue(m_url3));
    }
    if (m_wechat_handle_isSet) {
        obj.insert(QString("wechat_handle"), ::OpenAPI::toJsonValue(m_wechat_handle));
    }
    if (m_youtube_url_isSet) {
        obj.insert(QString("youtube_url"), ::OpenAPI::toJsonValue(m_youtube_url));
    }
    return obj;
}

QString OAIPodcastExtraField::getAmazonMusicUrl() const {
    return m_amazon_music_url;
}
void OAIPodcastExtraField::setAmazonMusicUrl(const QString &amazon_music_url) {
    m_amazon_music_url = amazon_music_url;
    m_amazon_music_url_isSet = true;
}

bool OAIPodcastExtraField::is_amazon_music_url_Set() const{
    return m_amazon_music_url_isSet;
}

bool OAIPodcastExtraField::is_amazon_music_url_Valid() const{
    return m_amazon_music_url_isValid;
}

QString OAIPodcastExtraField::getFacebookHandle() const {
    return m_facebook_handle;
}
void OAIPodcastExtraField::setFacebookHandle(const QString &facebook_handle) {
    m_facebook_handle = facebook_handle;
    m_facebook_handle_isSet = true;
}

bool OAIPodcastExtraField::is_facebook_handle_Set() const{
    return m_facebook_handle_isSet;
}

bool OAIPodcastExtraField::is_facebook_handle_Valid() const{
    return m_facebook_handle_isValid;
}

QString OAIPodcastExtraField::getGoogleUrl() const {
    return m_google_url;
}
void OAIPodcastExtraField::setGoogleUrl(const QString &google_url) {
    m_google_url = google_url;
    m_google_url_isSet = true;
}

bool OAIPodcastExtraField::is_google_url_Set() const{
    return m_google_url_isSet;
}

bool OAIPodcastExtraField::is_google_url_Valid() const{
    return m_google_url_isValid;
}

QString OAIPodcastExtraField::getInstagramHandle() const {
    return m_instagram_handle;
}
void OAIPodcastExtraField::setInstagramHandle(const QString &instagram_handle) {
    m_instagram_handle = instagram_handle;
    m_instagram_handle_isSet = true;
}

bool OAIPodcastExtraField::is_instagram_handle_Set() const{
    return m_instagram_handle_isSet;
}

bool OAIPodcastExtraField::is_instagram_handle_Valid() const{
    return m_instagram_handle_isValid;
}

QString OAIPodcastExtraField::getLinkedinUrl() const {
    return m_linkedin_url;
}
void OAIPodcastExtraField::setLinkedinUrl(const QString &linkedin_url) {
    m_linkedin_url = linkedin_url;
    m_linkedin_url_isSet = true;
}

bool OAIPodcastExtraField::is_linkedin_url_Set() const{
    return m_linkedin_url_isSet;
}

bool OAIPodcastExtraField::is_linkedin_url_Valid() const{
    return m_linkedin_url_isValid;
}

QString OAIPodcastExtraField::getPatreonHandle() const {
    return m_patreon_handle;
}
void OAIPodcastExtraField::setPatreonHandle(const QString &patreon_handle) {
    m_patreon_handle = patreon_handle;
    m_patreon_handle_isSet = true;
}

bool OAIPodcastExtraField::is_patreon_handle_Set() const{
    return m_patreon_handle_isSet;
}

bool OAIPodcastExtraField::is_patreon_handle_Valid() const{
    return m_patreon_handle_isValid;
}

QString OAIPodcastExtraField::getSpotifyUrl() const {
    return m_spotify_url;
}
void OAIPodcastExtraField::setSpotifyUrl(const QString &spotify_url) {
    m_spotify_url = spotify_url;
    m_spotify_url_isSet = true;
}

bool OAIPodcastExtraField::is_spotify_url_Set() const{
    return m_spotify_url_isSet;
}

bool OAIPodcastExtraField::is_spotify_url_Valid() const{
    return m_spotify_url_isValid;
}

QString OAIPodcastExtraField::getTwitterHandle() const {
    return m_twitter_handle;
}
void OAIPodcastExtraField::setTwitterHandle(const QString &twitter_handle) {
    m_twitter_handle = twitter_handle;
    m_twitter_handle_isSet = true;
}

bool OAIPodcastExtraField::is_twitter_handle_Set() const{
    return m_twitter_handle_isSet;
}

bool OAIPodcastExtraField::is_twitter_handle_Valid() const{
    return m_twitter_handle_isValid;
}

QString OAIPodcastExtraField::getUrl1() const {
    return m_url1;
}
void OAIPodcastExtraField::setUrl1(const QString &url1) {
    m_url1 = url1;
    m_url1_isSet = true;
}

bool OAIPodcastExtraField::is_url1_Set() const{
    return m_url1_isSet;
}

bool OAIPodcastExtraField::is_url1_Valid() const{
    return m_url1_isValid;
}

QString OAIPodcastExtraField::getUrl2() const {
    return m_url2;
}
void OAIPodcastExtraField::setUrl2(const QString &url2) {
    m_url2 = url2;
    m_url2_isSet = true;
}

bool OAIPodcastExtraField::is_url2_Set() const{
    return m_url2_isSet;
}

bool OAIPodcastExtraField::is_url2_Valid() const{
    return m_url2_isValid;
}

QString OAIPodcastExtraField::getUrl3() const {
    return m_url3;
}
void OAIPodcastExtraField::setUrl3(const QString &url3) {
    m_url3 = url3;
    m_url3_isSet = true;
}

bool OAIPodcastExtraField::is_url3_Set() const{
    return m_url3_isSet;
}

bool OAIPodcastExtraField::is_url3_Valid() const{
    return m_url3_isValid;
}

QString OAIPodcastExtraField::getWechatHandle() const {
    return m_wechat_handle;
}
void OAIPodcastExtraField::setWechatHandle(const QString &wechat_handle) {
    m_wechat_handle = wechat_handle;
    m_wechat_handle_isSet = true;
}

bool OAIPodcastExtraField::is_wechat_handle_Set() const{
    return m_wechat_handle_isSet;
}

bool OAIPodcastExtraField::is_wechat_handle_Valid() const{
    return m_wechat_handle_isValid;
}

QString OAIPodcastExtraField::getYoutubeUrl() const {
    return m_youtube_url;
}
void OAIPodcastExtraField::setYoutubeUrl(const QString &youtube_url) {
    m_youtube_url = youtube_url;
    m_youtube_url_isSet = true;
}

bool OAIPodcastExtraField::is_youtube_url_Set() const{
    return m_youtube_url_isSet;
}

bool OAIPodcastExtraField::is_youtube_url_Valid() const{
    return m_youtube_url_isValid;
}

bool OAIPodcastExtraField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amazon_music_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instagram_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patreon_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spotify_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wechat_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_youtube_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcastExtraField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
