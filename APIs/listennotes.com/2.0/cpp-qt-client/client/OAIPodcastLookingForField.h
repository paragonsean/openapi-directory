/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPodcastLookingForField.h
 *
 * 
 */

#ifndef OAIPodcastLookingForField_H
#define OAIPodcastLookingForField_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPodcastLookingForField : public OAIObject {
public:
    OAIPodcastLookingForField();
    OAIPodcastLookingForField(QString json);
    ~OAIPodcastLookingForField() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCohosts() const;
    void setCohosts(const bool &cohosts);
    bool is_cohosts_Set() const;
    bool is_cohosts_Valid() const;

    bool isCrossPromotion() const;
    void setCrossPromotion(const bool &cross_promotion);
    bool is_cross_promotion_Set() const;
    bool is_cross_promotion_Valid() const;

    bool isGuests() const;
    void setGuests(const bool &guests);
    bool is_guests_Set() const;
    bool is_guests_Valid() const;

    bool isSponsors() const;
    void setSponsors(const bool &sponsors);
    bool is_sponsors_Set() const;
    bool is_sponsors_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_cohosts;
    bool m_cohosts_isSet;
    bool m_cohosts_isValid;

    bool m_cross_promotion;
    bool m_cross_promotion_isSet;
    bool m_cross_promotion_isValid;

    bool m_guests;
    bool m_guests_isSet;
    bool m_guests_isValid;

    bool m_sponsors;
    bool m_sponsors_isSet;
    bool m_sponsors_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPodcastLookingForField)

#endif // OAIPodcastLookingForField_H
