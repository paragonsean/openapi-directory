/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITypeaheadResponse.h
 *
 * 
 */

#ifndef OAITypeaheadResponse_H
#define OAITypeaheadResponse_H

#include <QJsonObject>

#include "OAIGenre.h"
#include "OAIPodcastTypeaheadResult.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGenre;
class OAIPodcastTypeaheadResult;

class OAITypeaheadResponse : public OAIObject {
public:
    OAITypeaheadResponse();
    OAITypeaheadResponse(QString json);
    ~OAITypeaheadResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGenre> getGenres() const;
    void setGenres(const QList<OAIGenre> &genres);
    bool is_genres_Set() const;
    bool is_genres_Valid() const;

    QList<OAIPodcastTypeaheadResult> getPodcasts() const;
    void setPodcasts(const QList<OAIPodcastTypeaheadResult> &podcasts);
    bool is_podcasts_Set() const;
    bool is_podcasts_Valid() const;

    QList<QString> getTerms() const;
    void setTerms(const QList<QString> &terms);
    bool is_terms_Set() const;
    bool is_terms_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGenre> m_genres;
    bool m_genres_isSet;
    bool m_genres_isValid;

    QList<OAIPodcastTypeaheadResult> m_podcasts;
    bool m_podcasts_isSet;
    bool m_podcasts_isValid;

    QList<QString> m_terms;
    bool m_terms_isSet;
    bool m_terms_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITypeaheadResponse)

#endif // OAITypeaheadResponse_H
