/**
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPodcastExtraField.h
 *
 * 
 */

#ifndef OAIPodcastExtraField_H
#define OAIPodcastExtraField_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPodcastExtraField : public OAIObject {
public:
    OAIPodcastExtraField();
    OAIPodcastExtraField(QString json);
    ~OAIPodcastExtraField() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAmazonMusicUrl() const;
    void setAmazonMusicUrl(const QString &amazon_music_url);
    bool is_amazon_music_url_Set() const;
    bool is_amazon_music_url_Valid() const;

    QString getFacebookHandle() const;
    void setFacebookHandle(const QString &facebook_handle);
    bool is_facebook_handle_Set() const;
    bool is_facebook_handle_Valid() const;

    QString getGoogleUrl() const;
    void setGoogleUrl(const QString &google_url);
    bool is_google_url_Set() const;
    bool is_google_url_Valid() const;

    QString getInstagramHandle() const;
    void setInstagramHandle(const QString &instagram_handle);
    bool is_instagram_handle_Set() const;
    bool is_instagram_handle_Valid() const;

    QString getLinkedinUrl() const;
    void setLinkedinUrl(const QString &linkedin_url);
    bool is_linkedin_url_Set() const;
    bool is_linkedin_url_Valid() const;

    QString getPatreonHandle() const;
    void setPatreonHandle(const QString &patreon_handle);
    bool is_patreon_handle_Set() const;
    bool is_patreon_handle_Valid() const;

    QString getSpotifyUrl() const;
    void setSpotifyUrl(const QString &spotify_url);
    bool is_spotify_url_Set() const;
    bool is_spotify_url_Valid() const;

    QString getTwitterHandle() const;
    void setTwitterHandle(const QString &twitter_handle);
    bool is_twitter_handle_Set() const;
    bool is_twitter_handle_Valid() const;

    QString getUrl1() const;
    void setUrl1(const QString &url1);
    bool is_url1_Set() const;
    bool is_url1_Valid() const;

    QString getUrl2() const;
    void setUrl2(const QString &url2);
    bool is_url2_Set() const;
    bool is_url2_Valid() const;

    QString getUrl3() const;
    void setUrl3(const QString &url3);
    bool is_url3_Set() const;
    bool is_url3_Valid() const;

    QString getWechatHandle() const;
    void setWechatHandle(const QString &wechat_handle);
    bool is_wechat_handle_Set() const;
    bool is_wechat_handle_Valid() const;

    QString getYoutubeUrl() const;
    void setYoutubeUrl(const QString &youtube_url);
    bool is_youtube_url_Set() const;
    bool is_youtube_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_amazon_music_url;
    bool m_amazon_music_url_isSet;
    bool m_amazon_music_url_isValid;

    QString m_facebook_handle;
    bool m_facebook_handle_isSet;
    bool m_facebook_handle_isValid;

    QString m_google_url;
    bool m_google_url_isSet;
    bool m_google_url_isValid;

    QString m_instagram_handle;
    bool m_instagram_handle_isSet;
    bool m_instagram_handle_isValid;

    QString m_linkedin_url;
    bool m_linkedin_url_isSet;
    bool m_linkedin_url_isValid;

    QString m_patreon_handle;
    bool m_patreon_handle_isSet;
    bool m_patreon_handle_isValid;

    QString m_spotify_url;
    bool m_spotify_url_isSet;
    bool m_spotify_url_isValid;

    QString m_twitter_handle;
    bool m_twitter_handle_isSet;
    bool m_twitter_handle_isValid;

    QString m_url1;
    bool m_url1_isSet;
    bool m_url1_isValid;

    QString m_url2;
    bool m_url2_isSet;
    bool m_url2_isValid;

    QString m_url3;
    bool m_url3_isSet;
    bool m_url3_isValid;

    QString m_wechat_handle;
    bool m_wechat_handle_isSet;
    bool m_wechat_handle_isValid;

    QString m_youtube_url;
    bool m_youtube_url_isSet;
    bool m_youtube_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPodcastExtraField)

#endif // OAIPodcastExtraField_H
