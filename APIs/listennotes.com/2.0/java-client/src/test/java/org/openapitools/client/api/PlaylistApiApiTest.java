/*
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PlaylistResponse;
import org.openapitools.client.model.PlaylistsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlaylistApiApi
 */
@Disabled
public class PlaylistApiApiTest {

    private final PlaylistApiApi api = new PlaylistApiApi();

    /**
     * Fetch a playlist&#39;s info and items (i.e., episodes or podcasts).
     *
     * A playlist can be an episode list (i.e., all items are episodes) or a podcast list (i.e., all items are podcasts), which is essentially the same as those created via listennotes.com/listen/. This endpoint fetches a list of items (i.e., episodes or podcasts) in the playlist. You can use the **last_pub_date_ms** parameter to do pagination and fetch more items. A playlist can be **public** (discoverable on ListenNotes.com), **unlisted** (accessible to anyone who knows the playlist id), or **private** (accessible to its owner). You can fetch all playlists created by you, and **public** / **unlisted** playlists created by others. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlaylistByIdTest() throws ApiException {
        String xListenAPIKey = null;
        String id = null;
        String type = null;
        Integer lastTimestampMs = null;
        String sort = null;
        PlaylistResponse response = api.getPlaylistById(xListenAPIKey, id, type, lastTimestampMs, sort);
        // TODO: test validations
    }

    /**
     * Fetch a list of your playlists.
     *
     * This endpoint returns same data as listennotes.com/listen under your account. You can use the **page** parameter to do pagination and fetch more playlists. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlaylistsTest() throws ApiException {
        String xListenAPIKey = null;
        String sort = null;
        Integer page = null;
        PlaylistsResponse response = api.getPlaylists(xListenAPIKey, sort, page);
        // TODO: test validations
    }

}
