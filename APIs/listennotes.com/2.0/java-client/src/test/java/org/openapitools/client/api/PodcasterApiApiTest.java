/*
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DeletePodcastResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SubmitPodcastResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PodcasterApiApi
 */
@Disabled
public class PodcasterApiApiTest {

    private final PodcasterApiApi api = new PodcasterApiApi();

    /**
     * Request to delete a podcast
     *
     * Podcast hosting services can use this endpoint to streamline the process of podcast deletion on behave of their users (podcasters). We will review the deletion request within 12 hours. If the podcast is already deleted, the \&quot;status\&quot; field in the response will be \&quot;deleted\&quot;. Otherwise, the status field will be \&quot;in review\&quot;. If you want to get a notification once the podcast is deleted, you can configure a webhook url in the dashboard: listennotes.com/api/dashboard/#webhooks 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePodcastByIdTest() throws ApiException {
        String xListenAPIKey = null;
        String id = null;
        String reason = null;
        DeletePodcastResponse response = api.deletePodcastById(xListenAPIKey, id, reason);
        // TODO: test validations
    }

    /**
     * Submit a podcast to Listen Notes database
     *
     * Podcast hosting services can use this endpoint to help your users directly submit a new podcast to Listen Notes database. If the podcast doesn&#39;t exist in the database, \&quot;status\&quot; in the response will be \&quot;in review\&quot;, and we&#39;ll review it within 12 hours. If the podcast exists, \&quot;status\&quot; in the response will be \&quot;found\&quot;. If this submission is rejected, \&quot;status\&quot; in the response will be \&quot;rejected\&quot;. You can use &#x60;POST /podcasts&#x60; to check if multiple podcasts exist in the database. If you want to get a notification once the podcast is accepted, you can either specify the \&quot;email\&quot; parameter or configure a webhook url in the dashboard: listennotes.com/api/dashboard/#webhooks 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitPodcastTest() throws ApiException {
        String xListenAPIKey = null;
        String rss = null;
        String email = null;
        SubmitPodcastResponse response = api.submitPodcast(xListenAPIKey, rss, email);
        // TODO: test validations
    }

}
