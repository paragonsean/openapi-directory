/*
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BestPodcastsResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.CuratedListFull;
import org.openapitools.client.model.EpisodeFull;
import org.openapitools.client.model.EpisodeSimple;
import org.openapitools.client.model.GetCuratedPodcastsResponse;
import org.openapitools.client.model.GetEpisodeRecommendationsResponse;
import org.openapitools.client.model.GetEpisodesInBatchResponse;
import org.openapitools.client.model.GetGenresResponse;
import org.openapitools.client.model.GetLanguagesResponse;
import org.openapitools.client.model.GetPodcastRecommendationsResponse;
import org.openapitools.client.model.GetPodcastsInBatchResponse;
import org.openapitools.client.model.GetRegionsResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PodcastFull;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DirectoryApiApi
 */
@Disabled
public class DirectoryApiApiTest {

    private final DirectoryApiApi api = new DirectoryApiApi();

    /**
     * Fetch a list of best podcasts by genre
     *
     * Get a list of curated best podcasts by genre, which are curated by Listen Notes staffs based on various signals from the Internet, e.g., top charts on other podcast platforms, recommendations from mainstream media, user activities on listennotes.com... You can get the genre ids from &#x60;GET /genres&#x60; endpoint. This endpoint returns same data as https://www.listennotes.com/best-podcasts/ 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBestPodcastsTest() throws ApiException {
        String xListenAPIKey = null;
        String genreId = null;
        Integer page = null;
        String region = null;
        String publisherRegion = null;
        String language = null;
        String sort = null;
        Integer safeMode = null;
        BestPodcastsResponse response = api.getBestPodcasts(xListenAPIKey, genreId, page, region, publisherRegion, language, sort, safeMode);
        // TODO: test validations
    }

    /**
     * Fetch a curated list of podcasts by id
     *
     * Get detailed meta data of all podcasts in a specific curated list. This endpoint returns same data as https://www.listennotes.com/curated-podcasts/ 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCuratedPodcastByIdTest() throws ApiException {
        String xListenAPIKey = null;
        String id = null;
        CuratedListFull response = api.getCuratedPodcastById(xListenAPIKey, id);
        // TODO: test validations
    }

    /**
     * Fetch curated lists of podcasts
     *
     * A bunch of curated lists from online media. For each list, you&#39;ll get basic info of up to 5 podcasts. To get detailed meta data of all podcasts in a specific list, you need to use &#x60;GET /curated_podcasts/{id}&#x60;. We add new curated lists to the database on a daily basis. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCuratedPodcastsTest() throws ApiException {
        String xListenAPIKey = null;
        Integer page = null;
        GetCuratedPodcastsResponse response = api.getCuratedPodcasts(xListenAPIKey, page);
        // TODO: test validations
    }

    /**
     * Fetch detailed meta data for an episode by id
     *
     * Fetch detailed meta data for a specific episode.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEpisodeByIdTest() throws ApiException {
        String xListenAPIKey = null;
        String id = null;
        Integer showTranscript = null;
        EpisodeFull response = api.getEpisodeById(xListenAPIKey, id, showTranscript);
        // TODO: test validations
    }

    /**
     * Fetch recommendations for an episode
     *
     * Fetch up to 8 episode recommendations based on the given episode id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEpisodeRecommendationsTest() throws ApiException {
        String xListenAPIKey = null;
        String id = null;
        Integer safeMode = null;
        GetEpisodeRecommendationsResponse response = api.getEpisodeRecommendations(xListenAPIKey, id, safeMode);
        // TODO: test validations
    }

    /**
     * Batch fetch basic meta data for episodes
     *
     * Batch fetch basic meta data for up to 10 episodes. This endpoint could be used to implement custom playlists for individual episodes. For detailed meta data of an individual episode, you need to use &#x60;GET /episodes/{id}&#x60;. This endpoint is available only in the PRO/ENTERPRISE plan. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEpisodesInBatchTest() throws ApiException {
        String xListenAPIKey = null;
        String ids = null;
        GetEpisodesInBatchResponse response = api.getEpisodesInBatch(xListenAPIKey, ids);
        // TODO: test validations
    }

    /**
     * Fetch a list of podcast genres
     *
     * Get a list of podcast genres that are supported in Listen Notes. The genre id can be passed to other endpoints as a parameter to get podcasts in a specific genre, e.g., &#x60;GET /best_podcasts&#x60;, &#x60;GET /search&#x60;... You may want to cache the list of genres on the client side. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenresTest() throws ApiException {
        String xListenAPIKey = null;
        Integer topLevelOnly = null;
        GetGenresResponse response = api.getGenres(xListenAPIKey, topLevelOnly);
        // TODO: test validations
    }

    /**
     * Fetch a list of supported languages for podcasts
     *
     * Get a list of languages that are supported in Listen Notes database. You can use the language string as query parameter in &#x60;GET /search&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLanguagesTest() throws ApiException {
        String xListenAPIKey = null;
        GetLanguagesResponse response = api.getLanguages(xListenAPIKey);
        // TODO: test validations
    }

    /**
     * Fetch detailed meta data and episodes for a podcast by id
     *
     * Fetch detailed meta data and episodes for a specific podcast (up to 10 episodes each time). You can use the **next_episode_pub_date** parameter to do pagination and fetch more episodes. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPodcastByIdTest() throws ApiException {
        String xListenAPIKey = null;
        String id = null;
        Integer nextEpisodePubDate = null;
        String sort = null;
        PodcastFull response = api.getPodcastById(xListenAPIKey, id, nextEpisodePubDate, sort);
        // TODO: test validations
    }

    /**
     * Fetch recommendations for a podcast
     *
     * Fetch up to 8 podcast recommendations based on the given podcast id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPodcastRecommendationsTest() throws ApiException {
        String xListenAPIKey = null;
        String id = null;
        Integer safeMode = null;
        GetPodcastRecommendationsResponse response = api.getPodcastRecommendations(xListenAPIKey, id, safeMode);
        // TODO: test validations
    }

    /**
     * Batch fetch basic meta data for podcasts
     *
     * Batch fetch basic meta data for up to 10 podcasts. This endpoint could be used to build something like OPML import, allowing users to import a bunch of podcasts via rss urls. For detailed meta data (including episodes) of an individual podcast, you need to use &#x60;GET /podcasts/{id}&#x60;. This endpoint is available only in the PRO/ENTERPRISE plan. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPodcastsInBatchTest() throws ApiException {
        String xListenAPIKey = null;
        String ids = null;
        String itunesIds = null;
        Integer nextEpisodePubDate = null;
        String rsses = null;
        Integer showLatestEpisodes = null;
        String spotifyIds = null;
        GetPodcastsInBatchResponse response = api.getPodcastsInBatch(xListenAPIKey, ids, itunesIds, nextEpisodePubDate, rsses, showLatestEpisodes, spotifyIds);
        // TODO: test validations
    }

    /**
     * Fetch a list of supported countries/regions for best podcasts
     *
     * It returns a dictionary of country codes (e.g., us, gb...) &amp; country names (United States, United Kingdom...). The country code is used in the query parameter **region** of &#x60;GET /best_podcasts&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegionsTest() throws ApiException {
        String xListenAPIKey = null;
        GetRegionsResponse response = api.getRegions(xListenAPIKey);
        // TODO: test validations
    }

    /**
     * Fetch a random podcast episode
     *
     * Recently published episodes are more likely to be fetched. Good luck!
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void justListenTest() throws ApiException {
        String xListenAPIKey = null;
        EpisodeSimple response = api.justListen(xListenAPIKey);
        // TODO: test validations
    }

}
