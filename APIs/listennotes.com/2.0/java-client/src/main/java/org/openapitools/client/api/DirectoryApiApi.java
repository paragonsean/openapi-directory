/*
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BestPodcastsResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.CuratedListFull;
import org.openapitools.client.model.EpisodeFull;
import org.openapitools.client.model.EpisodeSimple;
import org.openapitools.client.model.GetCuratedPodcastsResponse;
import org.openapitools.client.model.GetEpisodeRecommendationsResponse;
import org.openapitools.client.model.GetEpisodesInBatchResponse;
import org.openapitools.client.model.GetGenresResponse;
import org.openapitools.client.model.GetLanguagesResponse;
import org.openapitools.client.model.GetPodcastRecommendationsResponse;
import org.openapitools.client.model.GetPodcastsInBatchResponse;
import org.openapitools.client.model.GetRegionsResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PodcastFull;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DirectoryApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DirectoryApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectoryApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBestPodcasts
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param genreId You can get the id from &#x60;GET /genres&#x60;. If not specified, it&#39;ll be the overall best podcasts, which can be considered as a special genre. (optional)
     * @param page Page number of those podcasts in this genre. (optional)
     * @param region Filter best podcasts by country/region. Please note that podcasts that are \&quot;best\&quot; in a country/region may not be produced in that country/region. For example, a podcast from the US may be very popular in Canada. You can get the supported country codes (e.g., us, jp, gb...) from &#x60;GET /regions&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; in United States.  (optional, default to us)
     * @param publisherRegion Filter best podcasts by the publisher&#39;s country/region. This is to narrow down the results to include \&quot;best podcasts\&quot; produced in a specific country/region. You can get the supported country codes (e.g., us, jp, gb...) from &#x60;GET /regions&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; produced in any country/region. If you want to get a country/region&#39;s \&quot;best podcasts\&quot; that are also produced in that country/region, then you need to specify both **region** and **publisher_region**, e.g., &#x60;region&#x3D;jp&#x60; and &#x60;publisher_region&#x3D;jp&#x60;.  (optional)
     * @param language Filter best podcasts by language. You can get a list of supported languages (e.g., English, Chinese, Japanese...) from &#x60;GET /languages&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; in any language.  (optional)
     * @param sort How do you want to sort these podcasts? If you&#39;d like to sort by popularity, please use **listen_score**.  (optional, default to recent_added_first)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBestPodcastsCall(String xListenAPIKey, String genreId, Integer page, String region, String publisherRegion, String language, String sort, Integer safeMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/best_podcasts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (genreId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genre_id", genreId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (publisherRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publisher_region", publisherRegion));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (safeMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe_mode", safeMode));
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBestPodcastsValidateBeforeCall(String xListenAPIKey, String genreId, Integer page, String region, String publisherRegion, String language, String sort, Integer safeMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getBestPodcasts(Async)");
        }

        return getBestPodcastsCall(xListenAPIKey, genreId, page, region, publisherRegion, language, sort, safeMode, _callback);

    }

    /**
     * Fetch a list of best podcasts by genre
     * Get a list of curated best podcasts by genre, which are curated by Listen Notes staffs based on various signals from the Internet, e.g., top charts on other podcast platforms, recommendations from mainstream media, user activities on listennotes.com... You can get the genre ids from &#x60;GET /genres&#x60; endpoint. This endpoint returns same data as https://www.listennotes.com/best-podcasts/ 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param genreId You can get the id from &#x60;GET /genres&#x60;. If not specified, it&#39;ll be the overall best podcasts, which can be considered as a special genre. (optional)
     * @param page Page number of those podcasts in this genre. (optional)
     * @param region Filter best podcasts by country/region. Please note that podcasts that are \&quot;best\&quot; in a country/region may not be produced in that country/region. For example, a podcast from the US may be very popular in Canada. You can get the supported country codes (e.g., us, jp, gb...) from &#x60;GET /regions&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; in United States.  (optional, default to us)
     * @param publisherRegion Filter best podcasts by the publisher&#39;s country/region. This is to narrow down the results to include \&quot;best podcasts\&quot; produced in a specific country/region. You can get the supported country codes (e.g., us, jp, gb...) from &#x60;GET /regions&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; produced in any country/region. If you want to get a country/region&#39;s \&quot;best podcasts\&quot; that are also produced in that country/region, then you need to specify both **region** and **publisher_region**, e.g., &#x60;region&#x3D;jp&#x60; and &#x60;publisher_region&#x3D;jp&#x60;.  (optional)
     * @param language Filter best podcasts by language. You can get a list of supported languages (e.g., English, Chinese, Japanese...) from &#x60;GET /languages&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; in any language.  (optional)
     * @param sort How do you want to sort these podcasts? If you&#39;d like to sort by popularity, please use **listen_score**.  (optional, default to recent_added_first)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @return BestPodcastsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BestPodcastsResponse getBestPodcasts(String xListenAPIKey, String genreId, Integer page, String region, String publisherRegion, String language, String sort, Integer safeMode) throws ApiException {
        ApiResponse<BestPodcastsResponse> localVarResp = getBestPodcastsWithHttpInfo(xListenAPIKey, genreId, page, region, publisherRegion, language, sort, safeMode);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of best podcasts by genre
     * Get a list of curated best podcasts by genre, which are curated by Listen Notes staffs based on various signals from the Internet, e.g., top charts on other podcast platforms, recommendations from mainstream media, user activities on listennotes.com... You can get the genre ids from &#x60;GET /genres&#x60; endpoint. This endpoint returns same data as https://www.listennotes.com/best-podcasts/ 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param genreId You can get the id from &#x60;GET /genres&#x60;. If not specified, it&#39;ll be the overall best podcasts, which can be considered as a special genre. (optional)
     * @param page Page number of those podcasts in this genre. (optional)
     * @param region Filter best podcasts by country/region. Please note that podcasts that are \&quot;best\&quot; in a country/region may not be produced in that country/region. For example, a podcast from the US may be very popular in Canada. You can get the supported country codes (e.g., us, jp, gb...) from &#x60;GET /regions&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; in United States.  (optional, default to us)
     * @param publisherRegion Filter best podcasts by the publisher&#39;s country/region. This is to narrow down the results to include \&quot;best podcasts\&quot; produced in a specific country/region. You can get the supported country codes (e.g., us, jp, gb...) from &#x60;GET /regions&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; produced in any country/region. If you want to get a country/region&#39;s \&quot;best podcasts\&quot; that are also produced in that country/region, then you need to specify both **region** and **publisher_region**, e.g., &#x60;region&#x3D;jp&#x60; and &#x60;publisher_region&#x3D;jp&#x60;.  (optional)
     * @param language Filter best podcasts by language. You can get a list of supported languages (e.g., English, Chinese, Japanese...) from &#x60;GET /languages&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; in any language.  (optional)
     * @param sort How do you want to sort these podcasts? If you&#39;d like to sort by popularity, please use **listen_score**.  (optional, default to recent_added_first)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @return ApiResponse&lt;BestPodcastsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BestPodcastsResponse> getBestPodcastsWithHttpInfo(String xListenAPIKey, String genreId, Integer page, String region, String publisherRegion, String language, String sort, Integer safeMode) throws ApiException {
        okhttp3.Call localVarCall = getBestPodcastsValidateBeforeCall(xListenAPIKey, genreId, page, region, publisherRegion, language, sort, safeMode, null);
        Type localVarReturnType = new TypeToken<BestPodcastsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of best podcasts by genre (asynchronously)
     * Get a list of curated best podcasts by genre, which are curated by Listen Notes staffs based on various signals from the Internet, e.g., top charts on other podcast platforms, recommendations from mainstream media, user activities on listennotes.com... You can get the genre ids from &#x60;GET /genres&#x60; endpoint. This endpoint returns same data as https://www.listennotes.com/best-podcasts/ 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param genreId You can get the id from &#x60;GET /genres&#x60;. If not specified, it&#39;ll be the overall best podcasts, which can be considered as a special genre. (optional)
     * @param page Page number of those podcasts in this genre. (optional)
     * @param region Filter best podcasts by country/region. Please note that podcasts that are \&quot;best\&quot; in a country/region may not be produced in that country/region. For example, a podcast from the US may be very popular in Canada. You can get the supported country codes (e.g., us, jp, gb...) from &#x60;GET /regions&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; in United States.  (optional, default to us)
     * @param publisherRegion Filter best podcasts by the publisher&#39;s country/region. This is to narrow down the results to include \&quot;best podcasts\&quot; produced in a specific country/region. You can get the supported country codes (e.g., us, jp, gb...) from &#x60;GET /regions&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; produced in any country/region. If you want to get a country/region&#39;s \&quot;best podcasts\&quot; that are also produced in that country/region, then you need to specify both **region** and **publisher_region**, e.g., &#x60;region&#x3D;jp&#x60; and &#x60;publisher_region&#x3D;jp&#x60;.  (optional)
     * @param language Filter best podcasts by language. You can get a list of supported languages (e.g., English, Chinese, Japanese...) from &#x60;GET /languages&#x60;. If not specified, you&#39;ll get \&quot;best podcasts\&quot; in any language.  (optional)
     * @param sort How do you want to sort these podcasts? If you&#39;d like to sort by popularity, please use **listen_score**.  (optional, default to recent_added_first)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBestPodcastsAsync(String xListenAPIKey, String genreId, Integer page, String region, String publisherRegion, String language, String sort, Integer safeMode, final ApiCallback<BestPodcastsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBestPodcastsValidateBeforeCall(xListenAPIKey, genreId, page, region, publisherRegion, language, sort, safeMode, _callback);
        Type localVarReturnType = new TypeToken<BestPodcastsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCuratedPodcastById
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id id for a specific curated list of podcasts. You can get the id from the response of &#x60;GET /search?type&#x3D;curated&#x60; or &#x60;GET /curated_podcasts&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCuratedPodcastByIdCall(String xListenAPIKey, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/curated_podcasts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCuratedPodcastByIdValidateBeforeCall(String xListenAPIKey, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getCuratedPodcastById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCuratedPodcastById(Async)");
        }

        return getCuratedPodcastByIdCall(xListenAPIKey, id, _callback);

    }

    /**
     * Fetch a curated list of podcasts by id
     * Get detailed meta data of all podcasts in a specific curated list. This endpoint returns same data as https://www.listennotes.com/curated-podcasts/ 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id id for a specific curated list of podcasts. You can get the id from the response of &#x60;GET /search?type&#x3D;curated&#x60; or &#x60;GET /curated_podcasts&#x60;.  (required)
     * @return CuratedListFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CuratedListFull getCuratedPodcastById(String xListenAPIKey, String id) throws ApiException {
        ApiResponse<CuratedListFull> localVarResp = getCuratedPodcastByIdWithHttpInfo(xListenAPIKey, id);
        return localVarResp.getData();
    }

    /**
     * Fetch a curated list of podcasts by id
     * Get detailed meta data of all podcasts in a specific curated list. This endpoint returns same data as https://www.listennotes.com/curated-podcasts/ 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id id for a specific curated list of podcasts. You can get the id from the response of &#x60;GET /search?type&#x3D;curated&#x60; or &#x60;GET /curated_podcasts&#x60;.  (required)
     * @return ApiResponse&lt;CuratedListFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CuratedListFull> getCuratedPodcastByIdWithHttpInfo(String xListenAPIKey, String id) throws ApiException {
        okhttp3.Call localVarCall = getCuratedPodcastByIdValidateBeforeCall(xListenAPIKey, id, null);
        Type localVarReturnType = new TypeToken<CuratedListFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a curated list of podcasts by id (asynchronously)
     * Get detailed meta data of all podcasts in a specific curated list. This endpoint returns same data as https://www.listennotes.com/curated-podcasts/ 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id id for a specific curated list of podcasts. You can get the id from the response of &#x60;GET /search?type&#x3D;curated&#x60; or &#x60;GET /curated_podcasts&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCuratedPodcastByIdAsync(String xListenAPIKey, String id, final ApiCallback<CuratedListFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCuratedPodcastByIdValidateBeforeCall(xListenAPIKey, id, _callback);
        Type localVarReturnType = new TypeToken<CuratedListFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCuratedPodcasts
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param page Page number of curated lists. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCuratedPodcastsCall(String xListenAPIKey, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/curated_podcasts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCuratedPodcastsValidateBeforeCall(String xListenAPIKey, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getCuratedPodcasts(Async)");
        }

        return getCuratedPodcastsCall(xListenAPIKey, page, _callback);

    }

    /**
     * Fetch curated lists of podcasts
     * A bunch of curated lists from online media. For each list, you&#39;ll get basic info of up to 5 podcasts. To get detailed meta data of all podcasts in a specific list, you need to use &#x60;GET /curated_podcasts/{id}&#x60;. We add new curated lists to the database on a daily basis. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param page Page number of curated lists. (optional, default to 1)
     * @return GetCuratedPodcastsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetCuratedPodcastsResponse getCuratedPodcasts(String xListenAPIKey, Integer page) throws ApiException {
        ApiResponse<GetCuratedPodcastsResponse> localVarResp = getCuratedPodcastsWithHttpInfo(xListenAPIKey, page);
        return localVarResp.getData();
    }

    /**
     * Fetch curated lists of podcasts
     * A bunch of curated lists from online media. For each list, you&#39;ll get basic info of up to 5 podcasts. To get detailed meta data of all podcasts in a specific list, you need to use &#x60;GET /curated_podcasts/{id}&#x60;. We add new curated lists to the database on a daily basis. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param page Page number of curated lists. (optional, default to 1)
     * @return ApiResponse&lt;GetCuratedPodcastsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCuratedPodcastsResponse> getCuratedPodcastsWithHttpInfo(String xListenAPIKey, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getCuratedPodcastsValidateBeforeCall(xListenAPIKey, page, null);
        Type localVarReturnType = new TypeToken<GetCuratedPodcastsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch curated lists of podcasts (asynchronously)
     * A bunch of curated lists from online media. For each list, you&#39;ll get basic info of up to 5 podcasts. To get detailed meta data of all podcasts in a specific list, you need to use &#x60;GET /curated_podcasts/{id}&#x60;. We add new curated lists to the database on a daily basis. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param page Page number of curated lists. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCuratedPodcastsAsync(String xListenAPIKey, Integer page, final ApiCallback<GetCuratedPodcastsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCuratedPodcastsValidateBeforeCall(xListenAPIKey, page, _callback);
        Type localVarReturnType = new TypeToken<GetCuratedPodcastsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEpisodeById
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id id for a specific episode. You can get episode id from using other endpoints, e.g., &#x60;GET /search&#x60;... (required)
     * @param showTranscript To include the transcript of this episode or not? If it is 1, then include the transcript in the **transcript** field. The default value is 0 - we don&#39;t include transcript by default, because 1) it would make the response data very big, thus slow response time; 2) less than 1% of episodes have transcripts. The transcript field is available only in the PRO/ENTERPRISE plan. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodeByIdCall(String xListenAPIKey, String id, Integer showTranscript, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showTranscript != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_transcript", showTranscript));
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEpisodeByIdValidateBeforeCall(String xListenAPIKey, String id, Integer showTranscript, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getEpisodeById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEpisodeById(Async)");
        }

        return getEpisodeByIdCall(xListenAPIKey, id, showTranscript, _callback);

    }

    /**
     * Fetch detailed meta data for an episode by id
     * Fetch detailed meta data for a specific episode.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id id for a specific episode. You can get episode id from using other endpoints, e.g., &#x60;GET /search&#x60;... (required)
     * @param showTranscript To include the transcript of this episode or not? If it is 1, then include the transcript in the **transcript** field. The default value is 0 - we don&#39;t include transcript by default, because 1) it would make the response data very big, thus slow response time; 2) less than 1% of episodes have transcripts. The transcript field is available only in the PRO/ENTERPRISE plan. (optional, default to 0)
     * @return EpisodeFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EpisodeFull getEpisodeById(String xListenAPIKey, String id, Integer showTranscript) throws ApiException {
        ApiResponse<EpisodeFull> localVarResp = getEpisodeByIdWithHttpInfo(xListenAPIKey, id, showTranscript);
        return localVarResp.getData();
    }

    /**
     * Fetch detailed meta data for an episode by id
     * Fetch detailed meta data for a specific episode.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id id for a specific episode. You can get episode id from using other endpoints, e.g., &#x60;GET /search&#x60;... (required)
     * @param showTranscript To include the transcript of this episode or not? If it is 1, then include the transcript in the **transcript** field. The default value is 0 - we don&#39;t include transcript by default, because 1) it would make the response data very big, thus slow response time; 2) less than 1% of episodes have transcripts. The transcript field is available only in the PRO/ENTERPRISE plan. (optional, default to 0)
     * @return ApiResponse&lt;EpisodeFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EpisodeFull> getEpisodeByIdWithHttpInfo(String xListenAPIKey, String id, Integer showTranscript) throws ApiException {
        okhttp3.Call localVarCall = getEpisodeByIdValidateBeforeCall(xListenAPIKey, id, showTranscript, null);
        Type localVarReturnType = new TypeToken<EpisodeFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch detailed meta data for an episode by id (asynchronously)
     * Fetch detailed meta data for a specific episode.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id id for a specific episode. You can get episode id from using other endpoints, e.g., &#x60;GET /search&#x60;... (required)
     * @param showTranscript To include the transcript of this episode or not? If it is 1, then include the transcript in the **transcript** field. The default value is 0 - we don&#39;t include transcript by default, because 1) it would make the response data very big, thus slow response time; 2) less than 1% of episodes have transcripts. The transcript field is available only in the PRO/ENTERPRISE plan. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodeByIdAsync(String xListenAPIKey, String id, Integer showTranscript, final ApiCallback<EpisodeFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEpisodeByIdValidateBeforeCall(xListenAPIKey, id, showTranscript, _callback);
        Type localVarReturnType = new TypeToken<EpisodeFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEpisodeRecommendations
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Episode id. (required)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodeRecommendationsCall(String xListenAPIKey, String id, Integer safeMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes/{id}/recommendations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (safeMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe_mode", safeMode));
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEpisodeRecommendationsValidateBeforeCall(String xListenAPIKey, String id, Integer safeMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getEpisodeRecommendations(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEpisodeRecommendations(Async)");
        }

        return getEpisodeRecommendationsCall(xListenAPIKey, id, safeMode, _callback);

    }

    /**
     * Fetch recommendations for an episode
     * Fetch up to 8 episode recommendations based on the given episode id.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Episode id. (required)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @return GetEpisodeRecommendationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetEpisodeRecommendationsResponse getEpisodeRecommendations(String xListenAPIKey, String id, Integer safeMode) throws ApiException {
        ApiResponse<GetEpisodeRecommendationsResponse> localVarResp = getEpisodeRecommendationsWithHttpInfo(xListenAPIKey, id, safeMode);
        return localVarResp.getData();
    }

    /**
     * Fetch recommendations for an episode
     * Fetch up to 8 episode recommendations based on the given episode id.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Episode id. (required)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @return ApiResponse&lt;GetEpisodeRecommendationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEpisodeRecommendationsResponse> getEpisodeRecommendationsWithHttpInfo(String xListenAPIKey, String id, Integer safeMode) throws ApiException {
        okhttp3.Call localVarCall = getEpisodeRecommendationsValidateBeforeCall(xListenAPIKey, id, safeMode, null);
        Type localVarReturnType = new TypeToken<GetEpisodeRecommendationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch recommendations for an episode (asynchronously)
     * Fetch up to 8 episode recommendations based on the given episode id.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Episode id. (required)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodeRecommendationsAsync(String xListenAPIKey, String id, Integer safeMode, final ApiCallback<GetEpisodeRecommendationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEpisodeRecommendationsValidateBeforeCall(xListenAPIKey, id, safeMode, _callback);
        Type localVarReturnType = new TypeToken<GetEpisodeRecommendationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEpisodesInBatch
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param ids Comma-separated list of episode ids. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodesInBatchCall(String xListenAPIKey, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/episodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarFormParams.put("ids", ids);
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEpisodesInBatchValidateBeforeCall(String xListenAPIKey, String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getEpisodesInBatch(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getEpisodesInBatch(Async)");
        }

        return getEpisodesInBatchCall(xListenAPIKey, ids, _callback);

    }

    /**
     * Batch fetch basic meta data for episodes
     * Batch fetch basic meta data for up to 10 episodes. This endpoint could be used to implement custom playlists for individual episodes. For detailed meta data of an individual episode, you need to use &#x60;GET /episodes/{id}&#x60;. This endpoint is available only in the PRO/ENTERPRISE plan. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param ids Comma-separated list of episode ids. (required)
     * @return GetEpisodesInBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetEpisodesInBatchResponse getEpisodesInBatch(String xListenAPIKey, String ids) throws ApiException {
        ApiResponse<GetEpisodesInBatchResponse> localVarResp = getEpisodesInBatchWithHttpInfo(xListenAPIKey, ids);
        return localVarResp.getData();
    }

    /**
     * Batch fetch basic meta data for episodes
     * Batch fetch basic meta data for up to 10 episodes. This endpoint could be used to implement custom playlists for individual episodes. For detailed meta data of an individual episode, you need to use &#x60;GET /episodes/{id}&#x60;. This endpoint is available only in the PRO/ENTERPRISE plan. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param ids Comma-separated list of episode ids. (required)
     * @return ApiResponse&lt;GetEpisodesInBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEpisodesInBatchResponse> getEpisodesInBatchWithHttpInfo(String xListenAPIKey, String ids) throws ApiException {
        okhttp3.Call localVarCall = getEpisodesInBatchValidateBeforeCall(xListenAPIKey, ids, null);
        Type localVarReturnType = new TypeToken<GetEpisodesInBatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch fetch basic meta data for episodes (asynchronously)
     * Batch fetch basic meta data for up to 10 episodes. This endpoint could be used to implement custom playlists for individual episodes. For detailed meta data of an individual episode, you need to use &#x60;GET /episodes/{id}&#x60;. This endpoint is available only in the PRO/ENTERPRISE plan. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param ids Comma-separated list of episode ids. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodesInBatchAsync(String xListenAPIKey, String ids, final ApiCallback<GetEpisodesInBatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEpisodesInBatchValidateBeforeCall(xListenAPIKey, ids, _callback);
        Type localVarReturnType = new TypeToken<GetEpisodesInBatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenres
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param topLevelOnly Just show top level genres? If 1, yes, just show top level genres. If 0, no, show all genres.  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenresCall(String xListenAPIKey, Integer topLevelOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genres";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topLevelOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top_level_only", topLevelOnly));
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenresValidateBeforeCall(String xListenAPIKey, Integer topLevelOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getGenres(Async)");
        }

        return getGenresCall(xListenAPIKey, topLevelOnly, _callback);

    }

    /**
     * Fetch a list of podcast genres
     * Get a list of podcast genres that are supported in Listen Notes. The genre id can be passed to other endpoints as a parameter to get podcasts in a specific genre, e.g., &#x60;GET /best_podcasts&#x60;, &#x60;GET /search&#x60;... You may want to cache the list of genres on the client side. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param topLevelOnly Just show top level genres? If 1, yes, just show top level genres. If 0, no, show all genres.  (optional, default to 0)
     * @return GetGenresResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetGenresResponse getGenres(String xListenAPIKey, Integer topLevelOnly) throws ApiException {
        ApiResponse<GetGenresResponse> localVarResp = getGenresWithHttpInfo(xListenAPIKey, topLevelOnly);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of podcast genres
     * Get a list of podcast genres that are supported in Listen Notes. The genre id can be passed to other endpoints as a parameter to get podcasts in a specific genre, e.g., &#x60;GET /best_podcasts&#x60;, &#x60;GET /search&#x60;... You may want to cache the list of genres on the client side. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param topLevelOnly Just show top level genres? If 1, yes, just show top level genres. If 0, no, show all genres.  (optional, default to 0)
     * @return ApiResponse&lt;GetGenresResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGenresResponse> getGenresWithHttpInfo(String xListenAPIKey, Integer topLevelOnly) throws ApiException {
        okhttp3.Call localVarCall = getGenresValidateBeforeCall(xListenAPIKey, topLevelOnly, null);
        Type localVarReturnType = new TypeToken<GetGenresResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of podcast genres (asynchronously)
     * Get a list of podcast genres that are supported in Listen Notes. The genre id can be passed to other endpoints as a parameter to get podcasts in a specific genre, e.g., &#x60;GET /best_podcasts&#x60;, &#x60;GET /search&#x60;... You may want to cache the list of genres on the client side. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param topLevelOnly Just show top level genres? If 1, yes, just show top level genres. If 0, no, show all genres.  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenresAsync(String xListenAPIKey, Integer topLevelOnly, final ApiCallback<GetGenresResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenresValidateBeforeCall(xListenAPIKey, topLevelOnly, _callback);
        Type localVarReturnType = new TypeToken<GetGenresResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLanguages
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLanguagesCall(String xListenAPIKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLanguagesValidateBeforeCall(String xListenAPIKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getLanguages(Async)");
        }

        return getLanguagesCall(xListenAPIKey, _callback);

    }

    /**
     * Fetch a list of supported languages for podcasts
     * Get a list of languages that are supported in Listen Notes database. You can use the language string as query parameter in &#x60;GET /search&#x60;. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @return GetLanguagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetLanguagesResponse getLanguages(String xListenAPIKey) throws ApiException {
        ApiResponse<GetLanguagesResponse> localVarResp = getLanguagesWithHttpInfo(xListenAPIKey);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of supported languages for podcasts
     * Get a list of languages that are supported in Listen Notes database. You can use the language string as query parameter in &#x60;GET /search&#x60;. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @return ApiResponse&lt;GetLanguagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLanguagesResponse> getLanguagesWithHttpInfo(String xListenAPIKey) throws ApiException {
        okhttp3.Call localVarCall = getLanguagesValidateBeforeCall(xListenAPIKey, null);
        Type localVarReturnType = new TypeToken<GetLanguagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of supported languages for podcasts (asynchronously)
     * Get a list of languages that are supported in Listen Notes database. You can use the language string as query parameter in &#x60;GET /search&#x60;. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLanguagesAsync(String xListenAPIKey, final ApiCallback<GetLanguagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLanguagesValidateBeforeCall(xListenAPIKey, _callback);
        Type localVarReturnType = new TypeToken<GetLanguagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcastById
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. You can get podcast id from using other endpoints, e.g., &#x60;GET /search&#x60;, &#x60;GET /best_podcasts&#x60;... (required)
     * @param nextEpisodePubDate For episodes pagination. It&#39;s the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 10 episodes or oldest 10 episodes, depending on the value of the **sort** parameter.  (optional)
     * @param sort How do you want to sort the episodes of this podcast?  (optional, default to recent_first)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastByIdCall(String xListenAPIKey, String id, Integer nextEpisodePubDate, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/podcasts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextEpisodePubDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_episode_pub_date", nextEpisodePubDate));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastByIdValidateBeforeCall(String xListenAPIKey, String id, Integer nextEpisodePubDate, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getPodcastById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPodcastById(Async)");
        }

        return getPodcastByIdCall(xListenAPIKey, id, nextEpisodePubDate, sort, _callback);

    }

    /**
     * Fetch detailed meta data and episodes for a podcast by id
     * Fetch detailed meta data and episodes for a specific podcast (up to 10 episodes each time). You can use the **next_episode_pub_date** parameter to do pagination and fetch more episodes. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. You can get podcast id from using other endpoints, e.g., &#x60;GET /search&#x60;, &#x60;GET /best_podcasts&#x60;... (required)
     * @param nextEpisodePubDate For episodes pagination. It&#39;s the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 10 episodes or oldest 10 episodes, depending on the value of the **sort** parameter.  (optional)
     * @param sort How do you want to sort the episodes of this podcast?  (optional, default to recent_first)
     * @return PodcastFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PodcastFull getPodcastById(String xListenAPIKey, String id, Integer nextEpisodePubDate, String sort) throws ApiException {
        ApiResponse<PodcastFull> localVarResp = getPodcastByIdWithHttpInfo(xListenAPIKey, id, nextEpisodePubDate, sort);
        return localVarResp.getData();
    }

    /**
     * Fetch detailed meta data and episodes for a podcast by id
     * Fetch detailed meta data and episodes for a specific podcast (up to 10 episodes each time). You can use the **next_episode_pub_date** parameter to do pagination and fetch more episodes. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. You can get podcast id from using other endpoints, e.g., &#x60;GET /search&#x60;, &#x60;GET /best_podcasts&#x60;... (required)
     * @param nextEpisodePubDate For episodes pagination. It&#39;s the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 10 episodes or oldest 10 episodes, depending on the value of the **sort** parameter.  (optional)
     * @param sort How do you want to sort the episodes of this podcast?  (optional, default to recent_first)
     * @return ApiResponse&lt;PodcastFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastFull> getPodcastByIdWithHttpInfo(String xListenAPIKey, String id, Integer nextEpisodePubDate, String sort) throws ApiException {
        okhttp3.Call localVarCall = getPodcastByIdValidateBeforeCall(xListenAPIKey, id, nextEpisodePubDate, sort, null);
        Type localVarReturnType = new TypeToken<PodcastFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch detailed meta data and episodes for a podcast by id (asynchronously)
     * Fetch detailed meta data and episodes for a specific podcast (up to 10 episodes each time). You can use the **next_episode_pub_date** parameter to do pagination and fetch more episodes. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. You can get podcast id from using other endpoints, e.g., &#x60;GET /search&#x60;, &#x60;GET /best_podcasts&#x60;... (required)
     * @param nextEpisodePubDate For episodes pagination. It&#39;s the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 10 episodes or oldest 10 episodes, depending on the value of the **sort** parameter.  (optional)
     * @param sort How do you want to sort the episodes of this podcast?  (optional, default to recent_first)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastByIdAsync(String xListenAPIKey, String id, Integer nextEpisodePubDate, String sort, final ApiCallback<PodcastFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastByIdValidateBeforeCall(xListenAPIKey, id, nextEpisodePubDate, sort, _callback);
        Type localVarReturnType = new TypeToken<PodcastFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcastRecommendations
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. (required)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastRecommendationsCall(String xListenAPIKey, String id, Integer safeMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/podcasts/{id}/recommendations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (safeMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe_mode", safeMode));
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastRecommendationsValidateBeforeCall(String xListenAPIKey, String id, Integer safeMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getPodcastRecommendations(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPodcastRecommendations(Async)");
        }

        return getPodcastRecommendationsCall(xListenAPIKey, id, safeMode, _callback);

    }

    /**
     * Fetch recommendations for a podcast
     * Fetch up to 8 podcast recommendations based on the given podcast id.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. (required)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @return GetPodcastRecommendationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetPodcastRecommendationsResponse getPodcastRecommendations(String xListenAPIKey, String id, Integer safeMode) throws ApiException {
        ApiResponse<GetPodcastRecommendationsResponse> localVarResp = getPodcastRecommendationsWithHttpInfo(xListenAPIKey, id, safeMode);
        return localVarResp.getData();
    }

    /**
     * Fetch recommendations for a podcast
     * Fetch up to 8 podcast recommendations based on the given podcast id.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. (required)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @return ApiResponse&lt;GetPodcastRecommendationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPodcastRecommendationsResponse> getPodcastRecommendationsWithHttpInfo(String xListenAPIKey, String id, Integer safeMode) throws ApiException {
        okhttp3.Call localVarCall = getPodcastRecommendationsValidateBeforeCall(xListenAPIKey, id, safeMode, null);
        Type localVarReturnType = new TypeToken<GetPodcastRecommendationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch recommendations for a podcast (asynchronously)
     * Fetch up to 8 podcast recommendations based on the given podcast id.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. (required)
     * @param safeMode Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastRecommendationsAsync(String xListenAPIKey, String id, Integer safeMode, final ApiCallback<GetPodcastRecommendationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastRecommendationsValidateBeforeCall(xListenAPIKey, id, safeMode, _callback);
        Type localVarReturnType = new TypeToken<GetPodcastRecommendationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcastsInBatch
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param ids Comma-separated list of podcast ids. (optional)
     * @param itunesIds Comma-separated Apple Podcasts (iTunes) ids, e.g., 659155419 (optional)
     * @param nextEpisodePubDate For latest episodes pagination. It&#39;s the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 15 episodes.  (optional)
     * @param rsses Comma-separated rss urls. (optional)
     * @param showLatestEpisodes Whether or not to fetch up to 15 latest episodes from these podcasts, sorted by pub_date. 1 is yes, and 0 is no.  (optional, default to 0)
     * @param spotifyIds Comma-separated Spotify ids, e.g., 3DDfEsKDIDrTlnPOiG4ZF4 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastsInBatchCall(String xListenAPIKey, String ids, String itunesIds, Integer nextEpisodePubDate, String rsses, Integer showLatestEpisodes, String spotifyIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/podcasts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarFormParams.put("ids", ids);
        }

        if (itunesIds != null) {
            localVarFormParams.put("itunes_ids", itunesIds);
        }

        if (nextEpisodePubDate != null) {
            localVarFormParams.put("next_episode_pub_date", nextEpisodePubDate);
        }

        if (rsses != null) {
            localVarFormParams.put("rsses", rsses);
        }

        if (showLatestEpisodes != null) {
            localVarFormParams.put("show_latest_episodes", showLatestEpisodes);
        }

        if (spotifyIds != null) {
            localVarFormParams.put("spotify_ids", spotifyIds);
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastsInBatchValidateBeforeCall(String xListenAPIKey, String ids, String itunesIds, Integer nextEpisodePubDate, String rsses, Integer showLatestEpisodes, String spotifyIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getPodcastsInBatch(Async)");
        }

        return getPodcastsInBatchCall(xListenAPIKey, ids, itunesIds, nextEpisodePubDate, rsses, showLatestEpisodes, spotifyIds, _callback);

    }

    /**
     * Batch fetch basic meta data for podcasts
     * Batch fetch basic meta data for up to 10 podcasts. This endpoint could be used to build something like OPML import, allowing users to import a bunch of podcasts via rss urls. For detailed meta data (including episodes) of an individual podcast, you need to use &#x60;GET /podcasts/{id}&#x60;. This endpoint is available only in the PRO/ENTERPRISE plan. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param ids Comma-separated list of podcast ids. (optional)
     * @param itunesIds Comma-separated Apple Podcasts (iTunes) ids, e.g., 659155419 (optional)
     * @param nextEpisodePubDate For latest episodes pagination. It&#39;s the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 15 episodes.  (optional)
     * @param rsses Comma-separated rss urls. (optional)
     * @param showLatestEpisodes Whether or not to fetch up to 15 latest episodes from these podcasts, sorted by pub_date. 1 is yes, and 0 is no.  (optional, default to 0)
     * @param spotifyIds Comma-separated Spotify ids, e.g., 3DDfEsKDIDrTlnPOiG4ZF4 (optional)
     * @return GetPodcastsInBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetPodcastsInBatchResponse getPodcastsInBatch(String xListenAPIKey, String ids, String itunesIds, Integer nextEpisodePubDate, String rsses, Integer showLatestEpisodes, String spotifyIds) throws ApiException {
        ApiResponse<GetPodcastsInBatchResponse> localVarResp = getPodcastsInBatchWithHttpInfo(xListenAPIKey, ids, itunesIds, nextEpisodePubDate, rsses, showLatestEpisodes, spotifyIds);
        return localVarResp.getData();
    }

    /**
     * Batch fetch basic meta data for podcasts
     * Batch fetch basic meta data for up to 10 podcasts. This endpoint could be used to build something like OPML import, allowing users to import a bunch of podcasts via rss urls. For detailed meta data (including episodes) of an individual podcast, you need to use &#x60;GET /podcasts/{id}&#x60;. This endpoint is available only in the PRO/ENTERPRISE plan. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param ids Comma-separated list of podcast ids. (optional)
     * @param itunesIds Comma-separated Apple Podcasts (iTunes) ids, e.g., 659155419 (optional)
     * @param nextEpisodePubDate For latest episodes pagination. It&#39;s the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 15 episodes.  (optional)
     * @param rsses Comma-separated rss urls. (optional)
     * @param showLatestEpisodes Whether or not to fetch up to 15 latest episodes from these podcasts, sorted by pub_date. 1 is yes, and 0 is no.  (optional, default to 0)
     * @param spotifyIds Comma-separated Spotify ids, e.g., 3DDfEsKDIDrTlnPOiG4ZF4 (optional)
     * @return ApiResponse&lt;GetPodcastsInBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPodcastsInBatchResponse> getPodcastsInBatchWithHttpInfo(String xListenAPIKey, String ids, String itunesIds, Integer nextEpisodePubDate, String rsses, Integer showLatestEpisodes, String spotifyIds) throws ApiException {
        okhttp3.Call localVarCall = getPodcastsInBatchValidateBeforeCall(xListenAPIKey, ids, itunesIds, nextEpisodePubDate, rsses, showLatestEpisodes, spotifyIds, null);
        Type localVarReturnType = new TypeToken<GetPodcastsInBatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch fetch basic meta data for podcasts (asynchronously)
     * Batch fetch basic meta data for up to 10 podcasts. This endpoint could be used to build something like OPML import, allowing users to import a bunch of podcasts via rss urls. For detailed meta data (including episodes) of an individual podcast, you need to use &#x60;GET /podcasts/{id}&#x60;. This endpoint is available only in the PRO/ENTERPRISE plan. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param ids Comma-separated list of podcast ids. (optional)
     * @param itunesIds Comma-separated Apple Podcasts (iTunes) ids, e.g., 659155419 (optional)
     * @param nextEpisodePubDate For latest episodes pagination. It&#39;s the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 15 episodes.  (optional)
     * @param rsses Comma-separated rss urls. (optional)
     * @param showLatestEpisodes Whether or not to fetch up to 15 latest episodes from these podcasts, sorted by pub_date. 1 is yes, and 0 is no.  (optional, default to 0)
     * @param spotifyIds Comma-separated Spotify ids, e.g., 3DDfEsKDIDrTlnPOiG4ZF4 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastsInBatchAsync(String xListenAPIKey, String ids, String itunesIds, Integer nextEpisodePubDate, String rsses, Integer showLatestEpisodes, String spotifyIds, final ApiCallback<GetPodcastsInBatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastsInBatchValidateBeforeCall(xListenAPIKey, ids, itunesIds, nextEpisodePubDate, rsses, showLatestEpisodes, spotifyIds, _callback);
        Type localVarReturnType = new TypeToken<GetPodcastsInBatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegions
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegionsCall(String xListenAPIKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/regions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegionsValidateBeforeCall(String xListenAPIKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getRegions(Async)");
        }

        return getRegionsCall(xListenAPIKey, _callback);

    }

    /**
     * Fetch a list of supported countries/regions for best podcasts
     * It returns a dictionary of country codes (e.g., us, gb...) &amp; country names (United States, United Kingdom...). The country code is used in the query parameter **region** of &#x60;GET /best_podcasts&#x60;. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @return GetRegionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetRegionsResponse getRegions(String xListenAPIKey) throws ApiException {
        ApiResponse<GetRegionsResponse> localVarResp = getRegionsWithHttpInfo(xListenAPIKey);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of supported countries/regions for best podcasts
     * It returns a dictionary of country codes (e.g., us, gb...) &amp; country names (United States, United Kingdom...). The country code is used in the query parameter **region** of &#x60;GET /best_podcasts&#x60;. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @return ApiResponse&lt;GetRegionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRegionsResponse> getRegionsWithHttpInfo(String xListenAPIKey) throws ApiException {
        okhttp3.Call localVarCall = getRegionsValidateBeforeCall(xListenAPIKey, null);
        Type localVarReturnType = new TypeToken<GetRegionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of supported countries/regions for best podcasts (asynchronously)
     * It returns a dictionary of country codes (e.g., us, gb...) &amp; country names (United States, United Kingdom...). The country code is used in the query parameter **region** of &#x60;GET /best_podcasts&#x60;. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegionsAsync(String xListenAPIKey, final ApiCallback<GetRegionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegionsValidateBeforeCall(xListenAPIKey, _callback);
        Type localVarReturnType = new TypeToken<GetRegionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for justListen
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call justListenCall(String xListenAPIKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/just_listen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call justListenValidateBeforeCall(String xListenAPIKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling justListen(Async)");
        }

        return justListenCall(xListenAPIKey, _callback);

    }

    /**
     * Fetch a random podcast episode
     * Recently published episodes are more likely to be fetched. Good luck!
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @return EpisodeSimple
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EpisodeSimple justListen(String xListenAPIKey) throws ApiException {
        ApiResponse<EpisodeSimple> localVarResp = justListenWithHttpInfo(xListenAPIKey);
        return localVarResp.getData();
    }

    /**
     * Fetch a random podcast episode
     * Recently published episodes are more likely to be fetched. Good luck!
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @return ApiResponse&lt;EpisodeSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EpisodeSimple> justListenWithHttpInfo(String xListenAPIKey) throws ApiException {
        okhttp3.Call localVarCall = justListenValidateBeforeCall(xListenAPIKey, null);
        Type localVarReturnType = new TypeToken<EpisodeSimple>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a random podcast episode (asynchronously)
     * Recently published episodes are more likely to be fetched. Good luck!
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call justListenAsync(String xListenAPIKey, final ApiCallback<EpisodeSimple> _callback) throws ApiException {

        okhttp3.Call localVarCall = justListenValidateBeforeCall(xListenAPIKey, _callback);
        Type localVarReturnType = new TypeToken<EpisodeSimple>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
