/*
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DeletePodcastResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SubmitPodcastResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PodcasterApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PodcasterApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PodcasterApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletePodcastById
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. You can get podcast id from using other endpoints, e.g., &#x60;GET /search&#x60;, &#x60;GET /best_podcasts&#x60;... (required)
     * @param reason The reason why this podcast should be deleted, e.g., copyright violation, the podcaster wants to delete it... You can put \&quot;testing\&quot; here to indicate that you are testing this endpoint, so we will not actually delete the podcast. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePodcastByIdCall(String xListenAPIKey, String id, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/podcasts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePodcastByIdValidateBeforeCall(String xListenAPIKey, String id, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling deletePodcastById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePodcastById(Async)");
        }

        return deletePodcastByIdCall(xListenAPIKey, id, reason, _callback);

    }

    /**
     * Request to delete a podcast
     * Podcast hosting services can use this endpoint to streamline the process of podcast deletion on behave of their users (podcasters). We will review the deletion request within 12 hours. If the podcast is already deleted, the \&quot;status\&quot; field in the response will be \&quot;deleted\&quot;. Otherwise, the status field will be \&quot;in review\&quot;. If you want to get a notification once the podcast is deleted, you can configure a webhook url in the dashboard: listennotes.com/api/dashboard/#webhooks 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. You can get podcast id from using other endpoints, e.g., &#x60;GET /search&#x60;, &#x60;GET /best_podcasts&#x60;... (required)
     * @param reason The reason why this podcast should be deleted, e.g., copyright violation, the podcaster wants to delete it... You can put \&quot;testing\&quot; here to indicate that you are testing this endpoint, so we will not actually delete the podcast. (optional)
     * @return DeletePodcastResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeletePodcastResponse deletePodcastById(String xListenAPIKey, String id, String reason) throws ApiException {
        ApiResponse<DeletePodcastResponse> localVarResp = deletePodcastByIdWithHttpInfo(xListenAPIKey, id, reason);
        return localVarResp.getData();
    }

    /**
     * Request to delete a podcast
     * Podcast hosting services can use this endpoint to streamline the process of podcast deletion on behave of their users (podcasters). We will review the deletion request within 12 hours. If the podcast is already deleted, the \&quot;status\&quot; field in the response will be \&quot;deleted\&quot;. Otherwise, the status field will be \&quot;in review\&quot;. If you want to get a notification once the podcast is deleted, you can configure a webhook url in the dashboard: listennotes.com/api/dashboard/#webhooks 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. You can get podcast id from using other endpoints, e.g., &#x60;GET /search&#x60;, &#x60;GET /best_podcasts&#x60;... (required)
     * @param reason The reason why this podcast should be deleted, e.g., copyright violation, the podcaster wants to delete it... You can put \&quot;testing\&quot; here to indicate that you are testing this endpoint, so we will not actually delete the podcast. (optional)
     * @return ApiResponse&lt;DeletePodcastResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletePodcastResponse> deletePodcastByIdWithHttpInfo(String xListenAPIKey, String id, String reason) throws ApiException {
        okhttp3.Call localVarCall = deletePodcastByIdValidateBeforeCall(xListenAPIKey, id, reason, null);
        Type localVarReturnType = new TypeToken<DeletePodcastResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request to delete a podcast (asynchronously)
     * Podcast hosting services can use this endpoint to streamline the process of podcast deletion on behave of their users (podcasters). We will review the deletion request within 12 hours. If the podcast is already deleted, the \&quot;status\&quot; field in the response will be \&quot;deleted\&quot;. Otherwise, the status field will be \&quot;in review\&quot;. If you want to get a notification once the podcast is deleted, you can configure a webhook url in the dashboard: listennotes.com/api/dashboard/#webhooks 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. You can get podcast id from using other endpoints, e.g., &#x60;GET /search&#x60;, &#x60;GET /best_podcasts&#x60;... (required)
     * @param reason The reason why this podcast should be deleted, e.g., copyright violation, the podcaster wants to delete it... You can put \&quot;testing\&quot; here to indicate that you are testing this endpoint, so we will not actually delete the podcast. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePodcastByIdAsync(String xListenAPIKey, String id, String reason, final ApiCallback<DeletePodcastResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePodcastByIdValidateBeforeCall(xListenAPIKey, id, reason, _callback);
        Type localVarReturnType = new TypeToken<DeletePodcastResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitPodcast
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param rss A valid podcast rss url. (required)
     * @param email A valid email address. If **email** is specified, then we&#39;ll notify this email address once the podcast is accepted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitPodcastCall(String xListenAPIKey, String rss, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/podcasts/submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarFormParams.put("email", email);
        }

        if (rss != null) {
            localVarFormParams.put("rss", rss);
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitPodcastValidateBeforeCall(String xListenAPIKey, String rss, String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling submitPodcast(Async)");
        }

        // verify the required parameter 'rss' is set
        if (rss == null) {
            throw new ApiException("Missing the required parameter 'rss' when calling submitPodcast(Async)");
        }

        return submitPodcastCall(xListenAPIKey, rss, email, _callback);

    }

    /**
     * Submit a podcast to Listen Notes database
     * Podcast hosting services can use this endpoint to help your users directly submit a new podcast to Listen Notes database. If the podcast doesn&#39;t exist in the database, \&quot;status\&quot; in the response will be \&quot;in review\&quot;, and we&#39;ll review it within 12 hours. If the podcast exists, \&quot;status\&quot; in the response will be \&quot;found\&quot;. If this submission is rejected, \&quot;status\&quot; in the response will be \&quot;rejected\&quot;. You can use &#x60;POST /podcasts&#x60; to check if multiple podcasts exist in the database. If you want to get a notification once the podcast is accepted, you can either specify the \&quot;email\&quot; parameter or configure a webhook url in the dashboard: listennotes.com/api/dashboard/#webhooks 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param rss A valid podcast rss url. (required)
     * @param email A valid email address. If **email** is specified, then we&#39;ll notify this email address once the podcast is accepted. (optional)
     * @return SubmitPodcastResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SubmitPodcastResponse submitPodcast(String xListenAPIKey, String rss, String email) throws ApiException {
        ApiResponse<SubmitPodcastResponse> localVarResp = submitPodcastWithHttpInfo(xListenAPIKey, rss, email);
        return localVarResp.getData();
    }

    /**
     * Submit a podcast to Listen Notes database
     * Podcast hosting services can use this endpoint to help your users directly submit a new podcast to Listen Notes database. If the podcast doesn&#39;t exist in the database, \&quot;status\&quot; in the response will be \&quot;in review\&quot;, and we&#39;ll review it within 12 hours. If the podcast exists, \&quot;status\&quot; in the response will be \&quot;found\&quot;. If this submission is rejected, \&quot;status\&quot; in the response will be \&quot;rejected\&quot;. You can use &#x60;POST /podcasts&#x60; to check if multiple podcasts exist in the database. If you want to get a notification once the podcast is accepted, you can either specify the \&quot;email\&quot; parameter or configure a webhook url in the dashboard: listennotes.com/api/dashboard/#webhooks 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param rss A valid podcast rss url. (required)
     * @param email A valid email address. If **email** is specified, then we&#39;ll notify this email address once the podcast is accepted. (optional)
     * @return ApiResponse&lt;SubmitPodcastResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitPodcastResponse> submitPodcastWithHttpInfo(String xListenAPIKey, String rss, String email) throws ApiException {
        okhttp3.Call localVarCall = submitPodcastValidateBeforeCall(xListenAPIKey, rss, email, null);
        Type localVarReturnType = new TypeToken<SubmitPodcastResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a podcast to Listen Notes database (asynchronously)
     * Podcast hosting services can use this endpoint to help your users directly submit a new podcast to Listen Notes database. If the podcast doesn&#39;t exist in the database, \&quot;status\&quot; in the response will be \&quot;in review\&quot;, and we&#39;ll review it within 12 hours. If the podcast exists, \&quot;status\&quot; in the response will be \&quot;found\&quot;. If this submission is rejected, \&quot;status\&quot; in the response will be \&quot;rejected\&quot;. You can use &#x60;POST /podcasts&#x60; to check if multiple podcasts exist in the database. If you want to get a notification once the podcast is accepted, you can either specify the \&quot;email\&quot; parameter or configure a webhook url in the dashboard: listennotes.com/api/dashboard/#webhooks 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param rss A valid podcast rss url. (required)
     * @param email A valid email address. If **email** is specified, then we&#39;ll notify this email address once the podcast is accepted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitPodcastAsync(String xListenAPIKey, String rss, String email, final ApiCallback<SubmitPodcastResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitPodcastValidateBeforeCall(xListenAPIKey, rss, email, _callback);
        Type localVarReturnType = new TypeToken<SubmitPodcastResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
