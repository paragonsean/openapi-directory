/*
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PlaylistVisibilityField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A playlist
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:39.439950-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlaylistsResponsePlaylistsInner {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EPISODE_COUNT = "episode_count";
  @SerializedName(SERIALIZED_NAME_EPISODE_COUNT)
  private Integer episodeCount;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_LAST_TIMESTAMP_MS = "last_timestamp_ms";
  @SerializedName(SERIALIZED_NAME_LAST_TIMESTAMP_MS)
  private Integer lastTimestampMs;

  public static final String SERIALIZED_NAME_LISTENNOTES_URL = "listennotes_url";
  @SerializedName(SERIALIZED_NAME_LISTENNOTES_URL)
  private String listennotesUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PODCAST_COUNT = "podcast_count";
  @SerializedName(SERIALIZED_NAME_PODCAST_COUNT)
  private Integer podcastCount;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private String thumbnail;

  public static final String SERIALIZED_NAME_TOTAL_AUDIO_LENGTH_SEC = "total_audio_length_sec";
  @SerializedName(SERIALIZED_NAME_TOTAL_AUDIO_LENGTH_SEC)
  private Integer totalAudioLengthSec;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private PlaylistVisibilityField visibility;

  public PlaylistsResponsePlaylistsInner() {
  }

  public PlaylistsResponsePlaylistsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Playlist description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PlaylistsResponsePlaylistsInner episodeCount(Integer episodeCount) {
    this.episodeCount = episodeCount;
    return this;
  }

  /**
   * The number of episodes (including custom audio) in this playlist.
   * @return episodeCount
   */
  @javax.annotation.Nullable
  public Integer getEpisodeCount() {
    return episodeCount;
  }

  public void setEpisodeCount(Integer episodeCount) {
    this.episodeCount = episodeCount;
  }


  public PlaylistsResponsePlaylistsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A 11-character playlist id, which can be used to further fetch detailed playlist metadata via &#x60;GET /playlists/{id}&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PlaylistsResponsePlaylistsInner image(String image) {
    this.image = image;
    return this;
  }

  /**
   * High resolution image url of the playlist.
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public PlaylistsResponsePlaylistsInner lastTimestampMs(Integer lastTimestampMs) {
    this.lastTimestampMs = lastTimestampMs;
    return this;
  }

  /**
   * Passed to the **last_timestamp_ms** parameter of &#x60;GET /playlists/{id}&#x60; to paginate through items of that playlist. 
   * @return lastTimestampMs
   */
  @javax.annotation.Nullable
  public Integer getLastTimestampMs() {
    return lastTimestampMs;
  }

  public void setLastTimestampMs(Integer lastTimestampMs) {
    this.lastTimestampMs = lastTimestampMs;
  }


  public PlaylistsResponsePlaylistsInner listennotesUrl(String listennotesUrl) {
    this.listennotesUrl = listennotesUrl;
    return this;
  }

  /**
   * The url of this playlist on ListenNotes.com.
   * @return listennotesUrl
   */
  @javax.annotation.Nullable
  public String getListennotesUrl() {
    return listennotesUrl;
  }

  public void setListennotesUrl(String listennotesUrl) {
    this.listennotesUrl = listennotesUrl;
  }


  public PlaylistsResponsePlaylistsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Playlist name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlaylistsResponsePlaylistsInner podcastCount(Integer podcastCount) {
    this.podcastCount = podcastCount;
    return this;
  }

  /**
   * The number of podcasts in this playlist.
   * @return podcastCount
   */
  @javax.annotation.Nullable
  public Integer getPodcastCount() {
    return podcastCount;
  }

  public void setPodcastCount(Integer podcastCount) {
    this.podcastCount = podcastCount;
  }


  public PlaylistsResponsePlaylistsInner thumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Low resolution image url of the playlist.
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public String getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }


  public PlaylistsResponsePlaylistsInner totalAudioLengthSec(Integer totalAudioLengthSec) {
    this.totalAudioLengthSec = totalAudioLengthSec;
    return this;
  }

  /**
   * Total audio length of all episodes in this playlist, in seconds.
   * @return totalAudioLengthSec
   */
  @javax.annotation.Nullable
  public Integer getTotalAudioLengthSec() {
    return totalAudioLengthSec;
  }

  public void setTotalAudioLengthSec(Integer totalAudioLengthSec) {
    this.totalAudioLengthSec = totalAudioLengthSec;
  }


  public PlaylistsResponsePlaylistsInner visibility(PlaylistVisibilityField visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nullable
  public PlaylistVisibilityField getVisibility() {
    return visibility;
  }

  public void setVisibility(PlaylistVisibilityField visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaylistsResponsePlaylistsInner playlistsResponsePlaylistsInner = (PlaylistsResponsePlaylistsInner) o;
    return Objects.equals(this.description, playlistsResponsePlaylistsInner.description) &&
        Objects.equals(this.episodeCount, playlistsResponsePlaylistsInner.episodeCount) &&
        Objects.equals(this.id, playlistsResponsePlaylistsInner.id) &&
        Objects.equals(this.image, playlistsResponsePlaylistsInner.image) &&
        Objects.equals(this.lastTimestampMs, playlistsResponsePlaylistsInner.lastTimestampMs) &&
        Objects.equals(this.listennotesUrl, playlistsResponsePlaylistsInner.listennotesUrl) &&
        Objects.equals(this.name, playlistsResponsePlaylistsInner.name) &&
        Objects.equals(this.podcastCount, playlistsResponsePlaylistsInner.podcastCount) &&
        Objects.equals(this.thumbnail, playlistsResponsePlaylistsInner.thumbnail) &&
        Objects.equals(this.totalAudioLengthSec, playlistsResponsePlaylistsInner.totalAudioLengthSec) &&
        Objects.equals(this.visibility, playlistsResponsePlaylistsInner.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, episodeCount, id, image, lastTimestampMs, listennotesUrl, name, podcastCount, thumbnail, totalAudioLengthSec, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaylistsResponsePlaylistsInner {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    episodeCount: ").append(toIndentedString(episodeCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    lastTimestampMs: ").append(toIndentedString(lastTimestampMs)).append("\n");
    sb.append("    listennotesUrl: ").append(toIndentedString(listennotesUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    podcastCount: ").append(toIndentedString(podcastCount)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    totalAudioLengthSec: ").append(toIndentedString(totalAudioLengthSec)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("episode_count");
    openapiFields.add("id");
    openapiFields.add("image");
    openapiFields.add("last_timestamp_ms");
    openapiFields.add("listennotes_url");
    openapiFields.add("name");
    openapiFields.add("podcast_count");
    openapiFields.add("thumbnail");
    openapiFields.add("total_audio_length_sec");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaylistsResponsePlaylistsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaylistsResponsePlaylistsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaylistsResponsePlaylistsInner is not found in the empty JSON string", PlaylistsResponsePlaylistsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaylistsResponsePlaylistsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaylistsResponsePlaylistsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("listennotes_url") != null && !jsonObj.get("listennotes_url").isJsonNull()) && !jsonObj.get("listennotes_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listennotes_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listennotes_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        PlaylistVisibilityField.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaylistsResponsePlaylistsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaylistsResponsePlaylistsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaylistsResponsePlaylistsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaylistsResponsePlaylistsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaylistsResponsePlaylistsInner>() {
           @Override
           public void write(JsonWriter out, PlaylistsResponsePlaylistsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaylistsResponsePlaylistsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaylistsResponsePlaylistsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaylistsResponsePlaylistsInner
   * @throws IOException if the JSON string is invalid with respect to PlaylistsResponsePlaylistsInner
   */
  public static PlaylistsResponsePlaylistsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaylistsResponsePlaylistsInner.class);
  }

  /**
   * Convert an instance of PlaylistsResponsePlaylistsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

