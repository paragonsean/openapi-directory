/*
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlaylistItem;
import org.openapitools.client.model.PlaylistVisibilityField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlaylistResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:39.439950-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlaylistResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<PlaylistItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_TIMESTAMP_MS = "last_timestamp_ms";
  @SerializedName(SERIALIZED_NAME_LAST_TIMESTAMP_MS)
  private Integer lastTimestampMs;

  public static final String SERIALIZED_NAME_LISTENNOTES_URL = "listennotes_url";
  @SerializedName(SERIALIZED_NAME_LISTENNOTES_URL)
  private String listennotesUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private String thumbnail;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_TOTAL_AUDIO_LENGTH_SEC = "total_audio_length_sec";
  @SerializedName(SERIALIZED_NAME_TOTAL_AUDIO_LENGTH_SEC)
  private Integer totalAudioLengthSec;

  /**
   * The type of this playlist, which should be either **episode_list** or **podcast_list**. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EPISODE_LIST("episode_list"),
    
    PODCAST_LIST("podcast_list");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private PlaylistVisibilityField visibility;

  public PlaylistResponse() {
  }

  public PlaylistResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Playlist description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PlaylistResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A 11-character playlist id, which can be used to further fetch detailed playlist metadata via &#x60;GET /playlists/{id}&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PlaylistResponse image(String image) {
    this.image = image;
    return this;
  }

  /**
   * High resolution image url of the playlist.
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public PlaylistResponse items(List<PlaylistItem> items) {
    this.items = items;
    return this;
  }

  public PlaylistResponse addItemsItem(PlaylistItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * A list of playlist items.
   * @return items
   */
  @javax.annotation.Nullable
  public List<PlaylistItem> getItems() {
    return items;
  }

  public void setItems(List<PlaylistItem> items) {
    this.items = items;
  }


  public PlaylistResponse lastTimestampMs(Integer lastTimestampMs) {
    this.lastTimestampMs = lastTimestampMs;
    return this;
  }

  /**
   * Passed to the **last_timestamp_ms** parameter of &#x60;GET /playlists/{id}&#x60; to paginate through items of that playlist. 
   * @return lastTimestampMs
   */
  @javax.annotation.Nullable
  public Integer getLastTimestampMs() {
    return lastTimestampMs;
  }

  public void setLastTimestampMs(Integer lastTimestampMs) {
    this.lastTimestampMs = lastTimestampMs;
  }


  public PlaylistResponse listennotesUrl(String listennotesUrl) {
    this.listennotesUrl = listennotesUrl;
    return this;
  }

  /**
   * The url of this playlist on ListenNotes.com.
   * @return listennotesUrl
   */
  @javax.annotation.Nullable
  public String getListennotesUrl() {
    return listennotesUrl;
  }

  public void setListennotesUrl(String listennotesUrl) {
    this.listennotesUrl = listennotesUrl;
  }


  public PlaylistResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Playlist name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlaylistResponse thumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Low resolution image url of the playlist.
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public String getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }


  public PlaylistResponse total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Total number of items in this playlist.
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public PlaylistResponse totalAudioLengthSec(Integer totalAudioLengthSec) {
    this.totalAudioLengthSec = totalAudioLengthSec;
    return this;
  }

  /**
   * Total audio length of all episodes in this playlist, in seconds. It will have a valid value only when type is **episode_list**. In other words, it will be 0 if type is **podcast_list**.
   * @return totalAudioLengthSec
   */
  @javax.annotation.Nullable
  public Integer getTotalAudioLengthSec() {
    return totalAudioLengthSec;
  }

  public void setTotalAudioLengthSec(Integer totalAudioLengthSec) {
    this.totalAudioLengthSec = totalAudioLengthSec;
  }


  public PlaylistResponse type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this playlist, which should be either **episode_list** or **podcast_list**. 
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PlaylistResponse visibility(PlaylistVisibilityField visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nullable
  public PlaylistVisibilityField getVisibility() {
    return visibility;
  }

  public void setVisibility(PlaylistVisibilityField visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaylistResponse playlistResponse = (PlaylistResponse) o;
    return Objects.equals(this.description, playlistResponse.description) &&
        Objects.equals(this.id, playlistResponse.id) &&
        Objects.equals(this.image, playlistResponse.image) &&
        Objects.equals(this.items, playlistResponse.items) &&
        Objects.equals(this.lastTimestampMs, playlistResponse.lastTimestampMs) &&
        Objects.equals(this.listennotesUrl, playlistResponse.listennotesUrl) &&
        Objects.equals(this.name, playlistResponse.name) &&
        Objects.equals(this.thumbnail, playlistResponse.thumbnail) &&
        Objects.equals(this.total, playlistResponse.total) &&
        Objects.equals(this.totalAudioLengthSec, playlistResponse.totalAudioLengthSec) &&
        Objects.equals(this.type, playlistResponse.type) &&
        Objects.equals(this.visibility, playlistResponse.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, image, items, lastTimestampMs, listennotesUrl, name, thumbnail, total, totalAudioLengthSec, type, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaylistResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    lastTimestampMs: ").append(toIndentedString(lastTimestampMs)).append("\n");
    sb.append("    listennotesUrl: ").append(toIndentedString(listennotesUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalAudioLengthSec: ").append(toIndentedString(totalAudioLengthSec)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("image");
    openapiFields.add("items");
    openapiFields.add("last_timestamp_ms");
    openapiFields.add("listennotes_url");
    openapiFields.add("name");
    openapiFields.add("thumbnail");
    openapiFields.add("total");
    openapiFields.add("total_audio_length_sec");
    openapiFields.add("type");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaylistResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaylistResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaylistResponse is not found in the empty JSON string", PlaylistResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaylistResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaylistResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            PlaylistItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("listennotes_url") != null && !jsonObj.get("listennotes_url").isJsonNull()) && !jsonObj.get("listennotes_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listennotes_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listennotes_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        PlaylistVisibilityField.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaylistResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaylistResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaylistResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaylistResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaylistResponse>() {
           @Override
           public void write(JsonWriter out, PlaylistResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaylistResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaylistResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaylistResponse
   * @throws IOException if the JSON string is invalid with respect to PlaylistResponse
   */
  public static PlaylistResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaylistResponse.class);
  }

  /**
   * Convert an instance of PlaylistResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

