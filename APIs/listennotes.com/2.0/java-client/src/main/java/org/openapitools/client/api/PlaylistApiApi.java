/*
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PlaylistResponse;
import org.openapitools.client.model.PlaylistsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaylistApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaylistApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaylistApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPlaylistById
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Playlist id (always 11 characters, e.g., m1pe7z60bsw). You can get the podcast id from the url of a playlist, e.g., m1pe7z60bsw is the playlist id of listennotes.com/listen/podcasts-about-podcasting-m1pe7z60bsw  (required)
     * @param type The type of this playlist, which should be either **episode_list** or **podcast_list**.  (optional, default to episode_list)
     * @param lastTimestampMs For playlist items pagination. It&#39;s the value of **last_timestamp_ms** from the response of last request. If it&#39;s 0 or not specified, just return the latest or the oldest 20 items, depending on the value of the **sort** parameter.  (optional, default to 0)
     * @param sort How do you want to sort playlist items?  (optional, default to recent_added_first)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistByIdCall(String xListenAPIKey, String id, String type, Integer lastTimestampMs, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (lastTimestampMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_timestamp_ms", lastTimestampMs));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistByIdValidateBeforeCall(String xListenAPIKey, String id, String type, Integer lastTimestampMs, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getPlaylistById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPlaylistById(Async)");
        }

        return getPlaylistByIdCall(xListenAPIKey, id, type, lastTimestampMs, sort, _callback);

    }

    /**
     * Fetch a playlist&#39;s info and items (i.e., episodes or podcasts).
     * A playlist can be an episode list (i.e., all items are episodes) or a podcast list (i.e., all items are podcasts), which is essentially the same as those created via listennotes.com/listen/. This endpoint fetches a list of items (i.e., episodes or podcasts) in the playlist. You can use the **last_pub_date_ms** parameter to do pagination and fetch more items. A playlist can be **public** (discoverable on ListenNotes.com), **unlisted** (accessible to anyone who knows the playlist id), or **private** (accessible to its owner). You can fetch all playlists created by you, and **public** / **unlisted** playlists created by others. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Playlist id (always 11 characters, e.g., m1pe7z60bsw). You can get the podcast id from the url of a playlist, e.g., m1pe7z60bsw is the playlist id of listennotes.com/listen/podcasts-about-podcasting-m1pe7z60bsw  (required)
     * @param type The type of this playlist, which should be either **episode_list** or **podcast_list**.  (optional, default to episode_list)
     * @param lastTimestampMs For playlist items pagination. It&#39;s the value of **last_timestamp_ms** from the response of last request. If it&#39;s 0 or not specified, just return the latest or the oldest 20 items, depending on the value of the **sort** parameter.  (optional, default to 0)
     * @param sort How do you want to sort playlist items?  (optional, default to recent_added_first)
     * @return PlaylistResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PlaylistResponse getPlaylistById(String xListenAPIKey, String id, String type, Integer lastTimestampMs, String sort) throws ApiException {
        ApiResponse<PlaylistResponse> localVarResp = getPlaylistByIdWithHttpInfo(xListenAPIKey, id, type, lastTimestampMs, sort);
        return localVarResp.getData();
    }

    /**
     * Fetch a playlist&#39;s info and items (i.e., episodes or podcasts).
     * A playlist can be an episode list (i.e., all items are episodes) or a podcast list (i.e., all items are podcasts), which is essentially the same as those created via listennotes.com/listen/. This endpoint fetches a list of items (i.e., episodes or podcasts) in the playlist. You can use the **last_pub_date_ms** parameter to do pagination and fetch more items. A playlist can be **public** (discoverable on ListenNotes.com), **unlisted** (accessible to anyone who knows the playlist id), or **private** (accessible to its owner). You can fetch all playlists created by you, and **public** / **unlisted** playlists created by others. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Playlist id (always 11 characters, e.g., m1pe7z60bsw). You can get the podcast id from the url of a playlist, e.g., m1pe7z60bsw is the playlist id of listennotes.com/listen/podcasts-about-podcasting-m1pe7z60bsw  (required)
     * @param type The type of this playlist, which should be either **episode_list** or **podcast_list**.  (optional, default to episode_list)
     * @param lastTimestampMs For playlist items pagination. It&#39;s the value of **last_timestamp_ms** from the response of last request. If it&#39;s 0 or not specified, just return the latest or the oldest 20 items, depending on the value of the **sort** parameter.  (optional, default to 0)
     * @param sort How do you want to sort playlist items?  (optional, default to recent_added_first)
     * @return ApiResponse&lt;PlaylistResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaylistResponse> getPlaylistByIdWithHttpInfo(String xListenAPIKey, String id, String type, Integer lastTimestampMs, String sort) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistByIdValidateBeforeCall(xListenAPIKey, id, type, lastTimestampMs, sort, null);
        Type localVarReturnType = new TypeToken<PlaylistResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a playlist&#39;s info and items (i.e., episodes or podcasts). (asynchronously)
     * A playlist can be an episode list (i.e., all items are episodes) or a podcast list (i.e., all items are podcasts), which is essentially the same as those created via listennotes.com/listen/. This endpoint fetches a list of items (i.e., episodes or podcasts) in the playlist. You can use the **last_pub_date_ms** parameter to do pagination and fetch more items. A playlist can be **public** (discoverable on ListenNotes.com), **unlisted** (accessible to anyone who knows the playlist id), or **private** (accessible to its owner). You can fetch all playlists created by you, and **public** / **unlisted** playlists created by others. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Playlist id (always 11 characters, e.g., m1pe7z60bsw). You can get the podcast id from the url of a playlist, e.g., m1pe7z60bsw is the playlist id of listennotes.com/listen/podcasts-about-podcasting-m1pe7z60bsw  (required)
     * @param type The type of this playlist, which should be either **episode_list** or **podcast_list**.  (optional, default to episode_list)
     * @param lastTimestampMs For playlist items pagination. It&#39;s the value of **last_timestamp_ms** from the response of last request. If it&#39;s 0 or not specified, just return the latest or the oldest 20 items, depending on the value of the **sort** parameter.  (optional, default to 0)
     * @param sort How do you want to sort playlist items?  (optional, default to recent_added_first)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistByIdAsync(String xListenAPIKey, String id, String type, Integer lastTimestampMs, String sort, final ApiCallback<PlaylistResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistByIdValidateBeforeCall(xListenAPIKey, id, type, lastTimestampMs, sort, _callback);
        Type localVarReturnType = new TypeToken<PlaylistResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlaylists
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param sort How do you want to sort playlists?  (optional, default to recent_added_first)
     * @param page Page number of playlists.  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistsCall(String xListenAPIKey, String sort, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistsValidateBeforeCall(String xListenAPIKey, String sort, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getPlaylists(Async)");
        }

        return getPlaylistsCall(xListenAPIKey, sort, page, _callback);

    }

    /**
     * Fetch a list of your playlists.
     * This endpoint returns same data as listennotes.com/listen under your account. You can use the **page** parameter to do pagination and fetch more playlists. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param sort How do you want to sort playlists?  (optional, default to recent_added_first)
     * @param page Page number of playlists.  (optional, default to 1)
     * @return PlaylistsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PlaylistsResponse getPlaylists(String xListenAPIKey, String sort, Integer page) throws ApiException {
        ApiResponse<PlaylistsResponse> localVarResp = getPlaylistsWithHttpInfo(xListenAPIKey, sort, page);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of your playlists.
     * This endpoint returns same data as listennotes.com/listen under your account. You can use the **page** parameter to do pagination and fetch more playlists. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param sort How do you want to sort playlists?  (optional, default to recent_added_first)
     * @param page Page number of playlists.  (optional, default to 1)
     * @return ApiResponse&lt;PlaylistsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaylistsResponse> getPlaylistsWithHttpInfo(String xListenAPIKey, String sort, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistsValidateBeforeCall(xListenAPIKey, sort, page, null);
        Type localVarReturnType = new TypeToken<PlaylistsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of your playlists. (asynchronously)
     * This endpoint returns same data as listennotes.com/listen under your account. You can use the **page** parameter to do pagination and fetch more playlists. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param sort How do you want to sort playlists?  (optional, default to recent_added_first)
     * @param page Page number of playlists.  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaylistsAsync(String xListenAPIKey, String sort, Integer page, final ApiCallback<PlaylistsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistsValidateBeforeCall(xListenAPIKey, sort, page, _callback);
        Type localVarReturnType = new TypeToken<PlaylistsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
