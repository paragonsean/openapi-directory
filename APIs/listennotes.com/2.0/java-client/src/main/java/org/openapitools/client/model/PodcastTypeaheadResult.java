/*
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PodcastTypeaheadResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:39.439950-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PodcastTypeaheadResult {
  public static final String SERIALIZED_NAME_EXPLICIT_CONTENT = "explicit_content";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_CONTENT)
  private Boolean explicitContent;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_PUBLISHER_HIGHLIGHTED = "publisher_highlighted";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_HIGHLIGHTED)
  private String publisherHighlighted;

  public static final String SERIALIZED_NAME_PUBLISHER_ORIGINAL = "publisher_original";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_ORIGINAL)
  private String publisherOriginal;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private String thumbnail;

  public static final String SERIALIZED_NAME_TITLE_HIGHLIGHTED = "title_highlighted";
  @SerializedName(SERIALIZED_NAME_TITLE_HIGHLIGHTED)
  private String titleHighlighted;

  public static final String SERIALIZED_NAME_TITLE_ORIGINAL = "title_original";
  @SerializedName(SERIALIZED_NAME_TITLE_ORIGINAL)
  private String titleOriginal;

  public PodcastTypeaheadResult() {
  }

  public PodcastTypeaheadResult explicitContent(Boolean explicitContent) {
    this.explicitContent = explicitContent;
    return this;
  }

  /**
   * Whether this podcast contains explicit language.
   * @return explicitContent
   */
  @javax.annotation.Nullable
  public Boolean getExplicitContent() {
    return explicitContent;
  }

  public void setExplicitContent(Boolean explicitContent) {
    this.explicitContent = explicitContent;
  }


  public PodcastTypeaheadResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Podcast id, which can be used to further fetch detailed podcast metadata via &#x60;GET /podcasts/{id}&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PodcastTypeaheadResult image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Image url for this podcast&#39;s artwork. If you are using PRO/ENTERPRISE plan, then it&#39;s a high resolution image (1400x1400). If you are using FREE plan, then it&#39;s the same as **thumbnail**, low resolution image (300x300). 
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public PodcastTypeaheadResult publisherHighlighted(String publisherHighlighted) {
    this.publisherHighlighted = publisherHighlighted;
    return this;
  }

  /**
   * Highlighted segment of this podcast&#39;s publisher name.
   * @return publisherHighlighted
   */
  @javax.annotation.Nullable
  public String getPublisherHighlighted() {
    return publisherHighlighted;
  }

  public void setPublisherHighlighted(String publisherHighlighted) {
    this.publisherHighlighted = publisherHighlighted;
  }


  public PodcastTypeaheadResult publisherOriginal(String publisherOriginal) {
    this.publisherOriginal = publisherOriginal;
    return this;
  }

  /**
   * Plain text of this podcast&#39;s publisher name.
   * @return publisherOriginal
   */
  @javax.annotation.Nullable
  public String getPublisherOriginal() {
    return publisherOriginal;
  }

  public void setPublisherOriginal(String publisherOriginal) {
    this.publisherOriginal = publisherOriginal;
  }


  public PodcastTypeaheadResult thumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Thumbnail image url for this podcast&#39;s artwork (300x300).
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public String getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }


  public PodcastTypeaheadResult titleHighlighted(String titleHighlighted) {
    this.titleHighlighted = titleHighlighted;
    return this;
  }

  /**
   * Highlighted segment of podcast name.
   * @return titleHighlighted
   */
  @javax.annotation.Nullable
  public String getTitleHighlighted() {
    return titleHighlighted;
  }

  public void setTitleHighlighted(String titleHighlighted) {
    this.titleHighlighted = titleHighlighted;
  }


  public PodcastTypeaheadResult titleOriginal(String titleOriginal) {
    this.titleOriginal = titleOriginal;
    return this;
  }

  /**
   * Plain text of podcast name.
   * @return titleOriginal
   */
  @javax.annotation.Nullable
  public String getTitleOriginal() {
    return titleOriginal;
  }

  public void setTitleOriginal(String titleOriginal) {
    this.titleOriginal = titleOriginal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PodcastTypeaheadResult podcastTypeaheadResult = (PodcastTypeaheadResult) o;
    return Objects.equals(this.explicitContent, podcastTypeaheadResult.explicitContent) &&
        Objects.equals(this.id, podcastTypeaheadResult.id) &&
        Objects.equals(this.image, podcastTypeaheadResult.image) &&
        Objects.equals(this.publisherHighlighted, podcastTypeaheadResult.publisherHighlighted) &&
        Objects.equals(this.publisherOriginal, podcastTypeaheadResult.publisherOriginal) &&
        Objects.equals(this.thumbnail, podcastTypeaheadResult.thumbnail) &&
        Objects.equals(this.titleHighlighted, podcastTypeaheadResult.titleHighlighted) &&
        Objects.equals(this.titleOriginal, podcastTypeaheadResult.titleOriginal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(explicitContent, id, image, publisherHighlighted, publisherOriginal, thumbnail, titleHighlighted, titleOriginal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PodcastTypeaheadResult {\n");
    sb.append("    explicitContent: ").append(toIndentedString(explicitContent)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    publisherHighlighted: ").append(toIndentedString(publisherHighlighted)).append("\n");
    sb.append("    publisherOriginal: ").append(toIndentedString(publisherOriginal)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    titleHighlighted: ").append(toIndentedString(titleHighlighted)).append("\n");
    sb.append("    titleOriginal: ").append(toIndentedString(titleOriginal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("explicit_content");
    openapiFields.add("id");
    openapiFields.add("image");
    openapiFields.add("publisher_highlighted");
    openapiFields.add("publisher_original");
    openapiFields.add("thumbnail");
    openapiFields.add("title_highlighted");
    openapiFields.add("title_original");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PodcastTypeaheadResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PodcastTypeaheadResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PodcastTypeaheadResult is not found in the empty JSON string", PodcastTypeaheadResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PodcastTypeaheadResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PodcastTypeaheadResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("publisher_highlighted") != null && !jsonObj.get("publisher_highlighted").isJsonNull()) && !jsonObj.get("publisher_highlighted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher_highlighted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher_highlighted").toString()));
      }
      if ((jsonObj.get("publisher_original") != null && !jsonObj.get("publisher_original").isJsonNull()) && !jsonObj.get("publisher_original").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher_original` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher_original").toString()));
      }
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
      if ((jsonObj.get("title_highlighted") != null && !jsonObj.get("title_highlighted").isJsonNull()) && !jsonObj.get("title_highlighted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_highlighted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_highlighted").toString()));
      }
      if ((jsonObj.get("title_original") != null && !jsonObj.get("title_original").isJsonNull()) && !jsonObj.get("title_original").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_original` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_original").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PodcastTypeaheadResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PodcastTypeaheadResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PodcastTypeaheadResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PodcastTypeaheadResult.class));

       return (TypeAdapter<T>) new TypeAdapter<PodcastTypeaheadResult>() {
           @Override
           public void write(JsonWriter out, PodcastTypeaheadResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PodcastTypeaheadResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PodcastTypeaheadResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PodcastTypeaheadResult
   * @throws IOException if the JSON string is invalid with respect to PodcastTypeaheadResult
   */
  public static PodcastTypeaheadResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PodcastTypeaheadResult.class);
  }

  /**
   * Convert an instance of PodcastTypeaheadResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

