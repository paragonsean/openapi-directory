/*
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PodcastExtraField;
import org.openapitools.client.model.PodcastLookingForField;
import org.openapitools.client.model.PodcastTypeField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PodcastSimple
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:39.439950-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PodcastSimple {
  public static final String SERIALIZED_NAME_AUDIO_LENGTH_SEC = "audio_length_sec";
  @SerializedName(SERIALIZED_NAME_AUDIO_LENGTH_SEC)
  private Integer audioLengthSec;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EARLIEST_PUB_DATE_MS = "earliest_pub_date_ms";
  @SerializedName(SERIALIZED_NAME_EARLIEST_PUB_DATE_MS)
  private Integer earliestPubDateMs;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPLICIT_CONTENT = "explicit_content";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_CONTENT)
  private Boolean explicitContent;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private PodcastExtraField extra;

  public static final String SERIALIZED_NAME_GENRE_IDS = "genre_ids";
  @SerializedName(SERIALIZED_NAME_GENRE_IDS)
  private List<Integer> genreIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_IS_CLAIMED = "is_claimed";
  @SerializedName(SERIALIZED_NAME_IS_CLAIMED)
  private Boolean isClaimed;

  public static final String SERIALIZED_NAME_ITUNES_ID = "itunes_id";
  @SerializedName(SERIALIZED_NAME_ITUNES_ID)
  private Integer itunesId;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LATEST_EPISODE_ID = "latest_episode_id";
  @SerializedName(SERIALIZED_NAME_LATEST_EPISODE_ID)
  private String latestEpisodeId;

  public static final String SERIALIZED_NAME_LATEST_PUB_DATE_MS = "latest_pub_date_ms";
  @SerializedName(SERIALIZED_NAME_LATEST_PUB_DATE_MS)
  private Integer latestPubDateMs;

  public static final String SERIALIZED_NAME_LISTEN_SCORE = "listen_score";
  @SerializedName(SERIALIZED_NAME_LISTEN_SCORE)
  private Integer listenScore;

  public static final String SERIALIZED_NAME_LISTEN_SCORE_GLOBAL_RANK = "listen_score_global_rank";
  @SerializedName(SERIALIZED_NAME_LISTEN_SCORE_GLOBAL_RANK)
  private String listenScoreGlobalRank;

  public static final String SERIALIZED_NAME_LISTENNOTES_URL = "listennotes_url";
  @SerializedName(SERIALIZED_NAME_LISTENNOTES_URL)
  private String listennotesUrl;

  public static final String SERIALIZED_NAME_LOOKING_FOR = "looking_for";
  @SerializedName(SERIALIZED_NAME_LOOKING_FOR)
  private PodcastLookingForField lookingFor;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_RSS = "rss";
  @SerializedName(SERIALIZED_NAME_RSS)
  private String rss;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private String thumbnail;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOTAL_EPISODES = "total_episodes";
  @SerializedName(SERIALIZED_NAME_TOTAL_EPISODES)
  private Integer totalEpisodes;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private PodcastTypeField type;

  public static final String SERIALIZED_NAME_UPDATE_FREQUENCY_HOURS = "update_frequency_hours";
  @SerializedName(SERIALIZED_NAME_UPDATE_FREQUENCY_HOURS)
  private Integer updateFrequencyHours;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public PodcastSimple() {
  }

  public PodcastSimple audioLengthSec(Integer audioLengthSec) {
    this.audioLengthSec = audioLengthSec;
    return this;
  }

  /**
   * Average audio length of all episodes of this podcast. In seconds.
   * @return audioLengthSec
   */
  @javax.annotation.Nullable
  public Integer getAudioLengthSec() {
    return audioLengthSec;
  }

  public void setAudioLengthSec(Integer audioLengthSec) {
    this.audioLengthSec = audioLengthSec;
  }


  public PodcastSimple country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country where this podcast is produced.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public PodcastSimple description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Html of this episode&#39;s full description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PodcastSimple earliestPubDateMs(Integer earliestPubDateMs) {
    this.earliestPubDateMs = earliestPubDateMs;
    return this;
  }

  /**
   * The published date of the oldest episode of this podcast. In milliseconds
   * @return earliestPubDateMs
   */
  @javax.annotation.Nullable
  public Integer getEarliestPubDateMs() {
    return earliestPubDateMs;
  }

  public void setEarliestPubDateMs(Integer earliestPubDateMs) {
    this.earliestPubDateMs = earliestPubDateMs;
  }


  public PodcastSimple email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of this podcast&#39;s producer. This field is available only in the PRO/ENTERPRISE plan.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public PodcastSimple explicitContent(Boolean explicitContent) {
    this.explicitContent = explicitContent;
    return this;
  }

  /**
   * Whether this podcast contains explicit language.
   * @return explicitContent
   */
  @javax.annotation.Nullable
  public Boolean getExplicitContent() {
    return explicitContent;
  }

  public void setExplicitContent(Boolean explicitContent) {
    this.explicitContent = explicitContent;
  }


  public PodcastSimple extra(PodcastExtraField extra) {
    this.extra = extra;
    return this;
  }

  /**
   * Get extra
   * @return extra
   */
  @javax.annotation.Nullable
  public PodcastExtraField getExtra() {
    return extra;
  }

  public void setExtra(PodcastExtraField extra) {
    this.extra = extra;
  }


  public PodcastSimple genreIds(List<Integer> genreIds) {
    this.genreIds = genreIds;
    return this;
  }

  public PodcastSimple addGenreIdsItem(Integer genreIdsItem) {
    if (this.genreIds == null) {
      this.genreIds = new ArrayList<>();
    }
    this.genreIds.add(genreIdsItem);
    return this;
  }

  /**
   * Get genreIds
   * @return genreIds
   */
  @javax.annotation.Nullable
  public List<Integer> getGenreIds() {
    return genreIds;
  }

  public void setGenreIds(List<Integer> genreIds) {
    this.genreIds = genreIds;
  }


  public PodcastSimple id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Podcast id, which can be used to further fetch detailed podcast metadata via &#x60;GET /podcasts/{id}&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PodcastSimple image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Image url for this podcast&#39;s artwork. If you are using PRO/ENTERPRISE plan, then it&#39;s a high resolution image (1400x1400). If you are using FREE plan, then it&#39;s the same as **thumbnail**, low resolution image (300x300). 
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public PodcastSimple isClaimed(Boolean isClaimed) {
    this.isClaimed = isClaimed;
    return this;
  }

  /**
   * Whether this podcast is claimed by its producer on [ListenNotes.com](https://www.ListenNotes.com).
   * @return isClaimed
   */
  @javax.annotation.Nullable
  public Boolean getIsClaimed() {
    return isClaimed;
  }

  public void setIsClaimed(Boolean isClaimed) {
    this.isClaimed = isClaimed;
  }


  public PodcastSimple itunesId(Integer itunesId) {
    this.itunesId = itunesId;
    return this;
  }

  /**
   * iTunes id for this podcast.
   * @return itunesId
   */
  @javax.annotation.Nullable
  public Integer getItunesId() {
    return itunesId;
  }

  public void setItunesId(Integer itunesId) {
    this.itunesId = itunesId;
  }


  public PodcastSimple language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The language of this podcast. You can get all supported languages from &#x60;GET /languages&#x60;.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public PodcastSimple latestEpisodeId(String latestEpisodeId) {
    this.latestEpisodeId = latestEpisodeId;
    return this;
  }

  /**
   * The id of the most recently published episode of this podcast, which can be used to further fetch detailed episode metadata via &#x60;GET /episodes/{id}&#x60;.
   * @return latestEpisodeId
   */
  @javax.annotation.Nullable
  public String getLatestEpisodeId() {
    return latestEpisodeId;
  }

  public void setLatestEpisodeId(String latestEpisodeId) {
    this.latestEpisodeId = latestEpisodeId;
  }


  public PodcastSimple latestPubDateMs(Integer latestPubDateMs) {
    this.latestPubDateMs = latestPubDateMs;
    return this;
  }

  /**
   * The published date of the latest episode of this podcast. In milliseconds
   * @return latestPubDateMs
   */
  @javax.annotation.Nullable
  public Integer getLatestPubDateMs() {
    return latestPubDateMs;
  }

  public void setLatestPubDateMs(Integer latestPubDateMs) {
    this.latestPubDateMs = latestPubDateMs;
  }


  public PodcastSimple listenScore(Integer listenScore) {
    this.listenScore = listenScore;
    return this;
  }

  /**
   * The estimated popularity score of a podcast compared to all other rss-based public podcasts in the world on a scale from 0 to 100. If the score is not available, it&#39;ll be null. Learn more at listennotes.com/listen-score 
   * @return listenScore
   */
  @javax.annotation.Nullable
  public Integer getListenScore() {
    return listenScore;
  }

  public void setListenScore(Integer listenScore) {
    this.listenScore = listenScore;
  }


  public PodcastSimple listenScoreGlobalRank(String listenScoreGlobalRank) {
    this.listenScoreGlobalRank = listenScoreGlobalRank;
    return this;
  }

  /**
   * The estimated popularity ranking of a podcast compared to all other rss-based public podcasts in the world. For example, if the value is 0.5%, then this podcast is one of the top 0.5% most popular shows out of all podcasts globally, ranked by Listen Score. If the ranking is not available, it&#39;ll be null. Learn more at listennotes.com/listen-score 
   * @return listenScoreGlobalRank
   */
  @javax.annotation.Nullable
  public String getListenScoreGlobalRank() {
    return listenScoreGlobalRank;
  }

  public void setListenScoreGlobalRank(String listenScoreGlobalRank) {
    this.listenScoreGlobalRank = listenScoreGlobalRank;
  }


  public PodcastSimple listennotesUrl(String listennotesUrl) {
    this.listennotesUrl = listennotesUrl;
    return this;
  }

  /**
   * The url of this podcast on [ListenNotes.com](https://www.ListenNotes.com).
   * @return listennotesUrl
   */
  @javax.annotation.Nullable
  public String getListennotesUrl() {
    return listennotesUrl;
  }

  public void setListennotesUrl(String listennotesUrl) {
    this.listennotesUrl = listennotesUrl;
  }


  public PodcastSimple lookingFor(PodcastLookingForField lookingFor) {
    this.lookingFor = lookingFor;
    return this;
  }

  /**
   * Get lookingFor
   * @return lookingFor
   */
  @javax.annotation.Nullable
  public PodcastLookingForField getLookingFor() {
    return lookingFor;
  }

  public void setLookingFor(PodcastLookingForField lookingFor) {
    this.lookingFor = lookingFor;
  }


  public PodcastSimple publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * Podcast publisher name.
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public PodcastSimple rss(String rss) {
    this.rss = rss;
    return this;
  }

  /**
   * RSS url of this podcast. This field is available only in the PRO/ENTERPRISE plan.
   * @return rss
   */
  @javax.annotation.Nullable
  public String getRss() {
    return rss;
  }

  public void setRss(String rss) {
    this.rss = rss;
  }


  public PodcastSimple thumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Thumbnail image url for this podcast&#39;s artwork (300x300).
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public String getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }


  public PodcastSimple title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Podcast name.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PodcastSimple totalEpisodes(Integer totalEpisodes) {
    this.totalEpisodes = totalEpisodes;
    return this;
  }

  /**
   * Total number of episodes in this podcast.
   * @return totalEpisodes
   */
  @javax.annotation.Nullable
  public Integer getTotalEpisodes() {
    return totalEpisodes;
  }

  public void setTotalEpisodes(Integer totalEpisodes) {
    this.totalEpisodes = totalEpisodes;
  }


  public PodcastSimple type(PodcastTypeField type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public PodcastTypeField getType() {
    return type;
  }

  public void setType(PodcastTypeField type) {
    this.type = type;
  }


  public PodcastSimple updateFrequencyHours(Integer updateFrequencyHours) {
    this.updateFrequencyHours = updateFrequencyHours;
    return this;
  }

  /**
   * How frequently does this podcast release a new episode? In hours. For example, if the value is 166, then it&#39;s every 166 hours (or weekly).
   * @return updateFrequencyHours
   */
  @javax.annotation.Nullable
  public Integer getUpdateFrequencyHours() {
    return updateFrequencyHours;
  }

  public void setUpdateFrequencyHours(Integer updateFrequencyHours) {
    this.updateFrequencyHours = updateFrequencyHours;
  }


  public PodcastSimple website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Website url of this podcast.
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PodcastSimple podcastSimple = (PodcastSimple) o;
    return Objects.equals(this.audioLengthSec, podcastSimple.audioLengthSec) &&
        Objects.equals(this.country, podcastSimple.country) &&
        Objects.equals(this.description, podcastSimple.description) &&
        Objects.equals(this.earliestPubDateMs, podcastSimple.earliestPubDateMs) &&
        Objects.equals(this.email, podcastSimple.email) &&
        Objects.equals(this.explicitContent, podcastSimple.explicitContent) &&
        Objects.equals(this.extra, podcastSimple.extra) &&
        Objects.equals(this.genreIds, podcastSimple.genreIds) &&
        Objects.equals(this.id, podcastSimple.id) &&
        Objects.equals(this.image, podcastSimple.image) &&
        Objects.equals(this.isClaimed, podcastSimple.isClaimed) &&
        Objects.equals(this.itunesId, podcastSimple.itunesId) &&
        Objects.equals(this.language, podcastSimple.language) &&
        Objects.equals(this.latestEpisodeId, podcastSimple.latestEpisodeId) &&
        Objects.equals(this.latestPubDateMs, podcastSimple.latestPubDateMs) &&
        Objects.equals(this.listenScore, podcastSimple.listenScore) &&
        Objects.equals(this.listenScoreGlobalRank, podcastSimple.listenScoreGlobalRank) &&
        Objects.equals(this.listennotesUrl, podcastSimple.listennotesUrl) &&
        Objects.equals(this.lookingFor, podcastSimple.lookingFor) &&
        Objects.equals(this.publisher, podcastSimple.publisher) &&
        Objects.equals(this.rss, podcastSimple.rss) &&
        Objects.equals(this.thumbnail, podcastSimple.thumbnail) &&
        Objects.equals(this.title, podcastSimple.title) &&
        Objects.equals(this.totalEpisodes, podcastSimple.totalEpisodes) &&
        Objects.equals(this.type, podcastSimple.type) &&
        Objects.equals(this.updateFrequencyHours, podcastSimple.updateFrequencyHours) &&
        Objects.equals(this.website, podcastSimple.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioLengthSec, country, description, earliestPubDateMs, email, explicitContent, extra, genreIds, id, image, isClaimed, itunesId, language, latestEpisodeId, latestPubDateMs, listenScore, listenScoreGlobalRank, listennotesUrl, lookingFor, publisher, rss, thumbnail, title, totalEpisodes, type, updateFrequencyHours, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PodcastSimple {\n");
    sb.append("    audioLengthSec: ").append(toIndentedString(audioLengthSec)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    earliestPubDateMs: ").append(toIndentedString(earliestPubDateMs)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    explicitContent: ").append(toIndentedString(explicitContent)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    genreIds: ").append(toIndentedString(genreIds)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    isClaimed: ").append(toIndentedString(isClaimed)).append("\n");
    sb.append("    itunesId: ").append(toIndentedString(itunesId)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    latestEpisodeId: ").append(toIndentedString(latestEpisodeId)).append("\n");
    sb.append("    latestPubDateMs: ").append(toIndentedString(latestPubDateMs)).append("\n");
    sb.append("    listenScore: ").append(toIndentedString(listenScore)).append("\n");
    sb.append("    listenScoreGlobalRank: ").append(toIndentedString(listenScoreGlobalRank)).append("\n");
    sb.append("    listennotesUrl: ").append(toIndentedString(listennotesUrl)).append("\n");
    sb.append("    lookingFor: ").append(toIndentedString(lookingFor)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    rss: ").append(toIndentedString(rss)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    totalEpisodes: ").append(toIndentedString(totalEpisodes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateFrequencyHours: ").append(toIndentedString(updateFrequencyHours)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio_length_sec");
    openapiFields.add("country");
    openapiFields.add("description");
    openapiFields.add("earliest_pub_date_ms");
    openapiFields.add("email");
    openapiFields.add("explicit_content");
    openapiFields.add("extra");
    openapiFields.add("genre_ids");
    openapiFields.add("id");
    openapiFields.add("image");
    openapiFields.add("is_claimed");
    openapiFields.add("itunes_id");
    openapiFields.add("language");
    openapiFields.add("latest_episode_id");
    openapiFields.add("latest_pub_date_ms");
    openapiFields.add("listen_score");
    openapiFields.add("listen_score_global_rank");
    openapiFields.add("listennotes_url");
    openapiFields.add("looking_for");
    openapiFields.add("publisher");
    openapiFields.add("rss");
    openapiFields.add("thumbnail");
    openapiFields.add("title");
    openapiFields.add("total_episodes");
    openapiFields.add("type");
    openapiFields.add("update_frequency_hours");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PodcastSimple
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PodcastSimple.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PodcastSimple is not found in the empty JSON string", PodcastSimple.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PodcastSimple.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PodcastSimple` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `extra`
      if (jsonObj.get("extra") != null && !jsonObj.get("extra").isJsonNull()) {
        PodcastExtraField.validateJsonElement(jsonObj.get("extra"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("genre_ids") != null && !jsonObj.get("genre_ids").isJsonNull() && !jsonObj.get("genre_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `genre_ids` to be an array in the JSON string but got `%s`", jsonObj.get("genre_ids").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("latest_episode_id") != null && !jsonObj.get("latest_episode_id").isJsonNull()) && !jsonObj.get("latest_episode_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_episode_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_episode_id").toString()));
      }
      if ((jsonObj.get("listen_score_global_rank") != null && !jsonObj.get("listen_score_global_rank").isJsonNull()) && !jsonObj.get("listen_score_global_rank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listen_score_global_rank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listen_score_global_rank").toString()));
      }
      if ((jsonObj.get("listennotes_url") != null && !jsonObj.get("listennotes_url").isJsonNull()) && !jsonObj.get("listennotes_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listennotes_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listennotes_url").toString()));
      }
      // validate the optional field `looking_for`
      if (jsonObj.get("looking_for") != null && !jsonObj.get("looking_for").isJsonNull()) {
        PodcastLookingForField.validateJsonElement(jsonObj.get("looking_for"));
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      if ((jsonObj.get("rss") != null && !jsonObj.get("rss").isJsonNull()) && !jsonObj.get("rss").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rss` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rss").toString()));
      }
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        PodcastTypeField.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PodcastSimple.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PodcastSimple' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PodcastSimple> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PodcastSimple.class));

       return (TypeAdapter<T>) new TypeAdapter<PodcastSimple>() {
           @Override
           public void write(JsonWriter out, PodcastSimple value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PodcastSimple read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PodcastSimple given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PodcastSimple
   * @throws IOException if the JSON string is invalid with respect to PodcastSimple
   */
  public static PodcastSimple fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PodcastSimple.class);
  }

  /**
   * Convert an instance of PodcastSimple to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

