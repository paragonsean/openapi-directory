/*
 * Listen API: Podcast Search, Directory, and Insights API
 * Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@listennotes.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PodcastAudienceResponse;
import org.openapitools.client.model.PodcastDomainResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsightsApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InsightsApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InsightsApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPodcastAudience
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastAudienceCall(String xListenAPIKey, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/podcasts/{id}/audience"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastAudienceValidateBeforeCall(String xListenAPIKey, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getPodcastAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPodcastAudience(Async)");
        }

        return getPodcastAudienceCall(xListenAPIKey, id, _callback);

    }

    /**
     * Fetch audience demographics for a podcast
     * Fetch audience demographics for a podcast - 1) directly measured on the Listen Notes platform; 2) only supports audience breakdown by regions for now; 3) not every podcast has data.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. (required)
     * @return PodcastAudienceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PodcastAudienceResponse getPodcastAudience(String xListenAPIKey, String id) throws ApiException {
        ApiResponse<PodcastAudienceResponse> localVarResp = getPodcastAudienceWithHttpInfo(xListenAPIKey, id);
        return localVarResp.getData();
    }

    /**
     * Fetch audience demographics for a podcast
     * Fetch audience demographics for a podcast - 1) directly measured on the Listen Notes platform; 2) only supports audience breakdown by regions for now; 3) not every podcast has data.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. (required)
     * @return ApiResponse&lt;PodcastAudienceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastAudienceResponse> getPodcastAudienceWithHttpInfo(String xListenAPIKey, String id) throws ApiException {
        okhttp3.Call localVarCall = getPodcastAudienceValidateBeforeCall(xListenAPIKey, id, null);
        Type localVarReturnType = new TypeToken<PodcastAudienceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch audience demographics for a podcast (asynchronously)
     * Fetch audience demographics for a podcast - 1) directly measured on the Listen Notes platform; 2) only supports audience breakdown by regions for now; 3) not every podcast has data.
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param id Podcast id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastAudienceAsync(String xListenAPIKey, String id, final ApiCallback<PodcastAudienceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastAudienceValidateBeforeCall(xListenAPIKey, id, _callback);
        Type localVarReturnType = new TypeToken<PodcastAudienceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcastsByDomainName
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param domainName A publisher&#39;s domain name, e.g., nytimes.com, wondery.com, npr.org... (required)
     * @param page Page number of the podcasts from this domain name (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastsByDomainNameCall(String xListenAPIKey, String domainName, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/podcasts/domains/{domain_name}"
            .replace("{" + "domain_name" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xListenAPIKey != null) {
            localVarHeaderParams.put("X-ListenAPI-Key", localVarApiClient.parameterToString(xListenAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastsByDomainNameValidateBeforeCall(String xListenAPIKey, String domainName, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xListenAPIKey' is set
        if (xListenAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xListenAPIKey' when calling getPodcastsByDomainName(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling getPodcastsByDomainName(Async)");
        }

        return getPodcastsByDomainNameCall(xListenAPIKey, domainName, page, _callback);

    }

    /**
     * Fetch podcasts by a publisher&#39;s domain name
     * Fetch podcasts by a publisher&#39;s domain name, e.g., nytimes.com, wondery.com, npr.org... Each request will return up to 10 podcasts. You can use the &#x60;page&#x60; parameter to paginate. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param domainName A publisher&#39;s domain name, e.g., nytimes.com, wondery.com, npr.org... (required)
     * @param page Page number of the podcasts from this domain name (optional, default to 1)
     * @return PodcastDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PodcastDomainResponse getPodcastsByDomainName(String xListenAPIKey, String domainName, Integer page) throws ApiException {
        ApiResponse<PodcastDomainResponse> localVarResp = getPodcastsByDomainNameWithHttpInfo(xListenAPIKey, domainName, page);
        return localVarResp.getData();
    }

    /**
     * Fetch podcasts by a publisher&#39;s domain name
     * Fetch podcasts by a publisher&#39;s domain name, e.g., nytimes.com, wondery.com, npr.org... Each request will return up to 10 podcasts. You can use the &#x60;page&#x60; parameter to paginate. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param domainName A publisher&#39;s domain name, e.g., nytimes.com, wondery.com, npr.org... (required)
     * @param page Page number of the podcasts from this domain name (optional, default to 1)
     * @return ApiResponse&lt;PodcastDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastDomainResponse> getPodcastsByDomainNameWithHttpInfo(String xListenAPIKey, String domainName, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getPodcastsByDomainNameValidateBeforeCall(xListenAPIKey, domainName, page, null);
        Type localVarReturnType = new TypeToken<PodcastDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch podcasts by a publisher&#39;s domain name (asynchronously)
     * Fetch podcasts by a publisher&#39;s domain name, e.g., nytimes.com, wondery.com, npr.org... Each request will return up to 10 podcasts. You can use the &#x60;page&#x60; parameter to paginate. 
     * @param xListenAPIKey Get API Key on listennotes.com/api (required)
     * @param domainName A publisher&#39;s domain name, e.g., nytimes.com, wondery.com, npr.org... (required)
     * @param page Page number of the podcasts from this domain name (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-ListenAPI-FreeQuota -  <br>  * X-ListenAPI-NextBillingDate -  <br>  * X-ListenAPI-Usage -  <br>  * X-listenAPI-Latency-Seconds -  <br>  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastsByDomainNameAsync(String xListenAPIKey, String domainName, Integer page, final ApiCallback<PodcastDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastsByDomainNameValidateBeforeCall(xListenAPIKey, domainName, page, _callback);
        Type localVarReturnType = new TypeToken<PodcastDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
