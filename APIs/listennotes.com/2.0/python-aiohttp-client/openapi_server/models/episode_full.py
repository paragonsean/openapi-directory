# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.podcast_simple import PodcastSimple
from openapi_server import util


class EpisodeFull(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio: str=None, audio_length_sec: int=None, description: str=None, explicit_content: bool=None, id: str=None, image: str=None, link: str=None, listennotes_edit_url: str=None, listennotes_url: str=None, maybe_audio_invalid: bool=None, podcast: PodcastSimple=None, pub_date_ms: int=None, thumbnail: str=None, title: str=None, transcript: str=None):
        """EpisodeFull - a model defined in OpenAPI

        :param audio: The audio of this EpisodeFull.
        :param audio_length_sec: The audio_length_sec of this EpisodeFull.
        :param description: The description of this EpisodeFull.
        :param explicit_content: The explicit_content of this EpisodeFull.
        :param id: The id of this EpisodeFull.
        :param image: The image of this EpisodeFull.
        :param link: The link of this EpisodeFull.
        :param listennotes_edit_url: The listennotes_edit_url of this EpisodeFull.
        :param listennotes_url: The listennotes_url of this EpisodeFull.
        :param maybe_audio_invalid: The maybe_audio_invalid of this EpisodeFull.
        :param podcast: The podcast of this EpisodeFull.
        :param pub_date_ms: The pub_date_ms of this EpisodeFull.
        :param thumbnail: The thumbnail of this EpisodeFull.
        :param title: The title of this EpisodeFull.
        :param transcript: The transcript of this EpisodeFull.
        """
        self.openapi_types = {
            'audio': str,
            'audio_length_sec': int,
            'description': str,
            'explicit_content': bool,
            'id': str,
            'image': str,
            'link': str,
            'listennotes_edit_url': str,
            'listennotes_url': str,
            'maybe_audio_invalid': bool,
            'podcast': PodcastSimple,
            'pub_date_ms': int,
            'thumbnail': str,
            'title': str,
            'transcript': str
        }

        self.attribute_map = {
            'audio': 'audio',
            'audio_length_sec': 'audio_length_sec',
            'description': 'description',
            'explicit_content': 'explicit_content',
            'id': 'id',
            'image': 'image',
            'link': 'link',
            'listennotes_edit_url': 'listennotes_edit_url',
            'listennotes_url': 'listennotes_url',
            'maybe_audio_invalid': 'maybe_audio_invalid',
            'podcast': 'podcast',
            'pub_date_ms': 'pub_date_ms',
            'thumbnail': 'thumbnail',
            'title': 'title',
            'transcript': 'transcript'
        }

        self._audio = audio
        self._audio_length_sec = audio_length_sec
        self._description = description
        self._explicit_content = explicit_content
        self._id = id
        self._image = image
        self._link = link
        self._listennotes_edit_url = listennotes_edit_url
        self._listennotes_url = listennotes_url
        self._maybe_audio_invalid = maybe_audio_invalid
        self._podcast = podcast
        self._pub_date_ms = pub_date_ms
        self._thumbnail = thumbnail
        self._title = title
        self._transcript = transcript

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EpisodeFull':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EpisodeFull of this EpisodeFull.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio(self):
        """Gets the audio of this EpisodeFull.

        Audio url of this episode, which can be played directly.

        :return: The audio of this EpisodeFull.
        :rtype: str
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this EpisodeFull.

        Audio url of this episode, which can be played directly.

        :param audio: The audio of this EpisodeFull.
        :type audio: str
        """

        self._audio = audio

    @property
    def audio_length_sec(self):
        """Gets the audio_length_sec of this EpisodeFull.

        Audio length of this episode. In seconds.

        :return: The audio_length_sec of this EpisodeFull.
        :rtype: int
        """
        return self._audio_length_sec

    @audio_length_sec.setter
    def audio_length_sec(self, audio_length_sec):
        """Sets the audio_length_sec of this EpisodeFull.

        Audio length of this episode. In seconds.

        :param audio_length_sec: The audio_length_sec of this EpisodeFull.
        :type audio_length_sec: int
        """

        self._audio_length_sec = audio_length_sec

    @property
    def description(self):
        """Gets the description of this EpisodeFull.

        Html of this episode's full description

        :return: The description of this EpisodeFull.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EpisodeFull.

        Html of this episode's full description

        :param description: The description of this EpisodeFull.
        :type description: str
        """

        self._description = description

    @property
    def explicit_content(self):
        """Gets the explicit_content of this EpisodeFull.

        Whether this podcast contains explicit language.

        :return: The explicit_content of this EpisodeFull.
        :rtype: bool
        """
        return self._explicit_content

    @explicit_content.setter
    def explicit_content(self, explicit_content):
        """Sets the explicit_content of this EpisodeFull.

        Whether this podcast contains explicit language.

        :param explicit_content: The explicit_content of this EpisodeFull.
        :type explicit_content: bool
        """

        self._explicit_content = explicit_content

    @property
    def id(self):
        """Gets the id of this EpisodeFull.

        Episode id, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`.

        :return: The id of this EpisodeFull.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EpisodeFull.

        Episode id, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`.

        :param id: The id of this EpisodeFull.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this EpisodeFull.

        Image url for this episode. If an episode doesn't have its own image, then this field would be the url of the podcast artwork image. If you are using PRO/ENTERPRISE plan, then it's a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**, low resolution image (300x300). 

        :return: The image of this EpisodeFull.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this EpisodeFull.

        Image url for this episode. If an episode doesn't have its own image, then this field would be the url of the podcast artwork image. If you are using PRO/ENTERPRISE plan, then it's a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**, low resolution image (300x300). 

        :param image: The image of this EpisodeFull.
        :type image: str
        """

        self._image = image

    @property
    def link(self):
        """Gets the link of this EpisodeFull.

        Web link of this episode.

        :return: The link of this EpisodeFull.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this EpisodeFull.

        Web link of this episode.

        :param link: The link of this EpisodeFull.
        :type link: str
        """

        self._link = link

    @property
    def listennotes_edit_url(self):
        """Gets the listennotes_edit_url of this EpisodeFull.

        Edit url of this episode where you can update the audio url if you find the audio is broken.

        :return: The listennotes_edit_url of this EpisodeFull.
        :rtype: str
        """
        return self._listennotes_edit_url

    @listennotes_edit_url.setter
    def listennotes_edit_url(self, listennotes_edit_url):
        """Sets the listennotes_edit_url of this EpisodeFull.

        Edit url of this episode where you can update the audio url if you find the audio is broken.

        :param listennotes_edit_url: The listennotes_edit_url of this EpisodeFull.
        :type listennotes_edit_url: str
        """

        self._listennotes_edit_url = listennotes_edit_url

    @property
    def listennotes_url(self):
        """Gets the listennotes_url of this EpisodeFull.

        The url of this episode on [ListenNotes.com](https://www.ListenNotes.com).

        :return: The listennotes_url of this EpisodeFull.
        :rtype: str
        """
        return self._listennotes_url

    @listennotes_url.setter
    def listennotes_url(self, listennotes_url):
        """Sets the listennotes_url of this EpisodeFull.

        The url of this episode on [ListenNotes.com](https://www.ListenNotes.com).

        :param listennotes_url: The listennotes_url of this EpisodeFull.
        :type listennotes_url: str
        """

        self._listennotes_url = listennotes_url

    @property
    def maybe_audio_invalid(self):
        """Gets the maybe_audio_invalid of this EpisodeFull.

        Whether or not this episode's audio is invalid. Podcasters may delete the original audio.

        :return: The maybe_audio_invalid of this EpisodeFull.
        :rtype: bool
        """
        return self._maybe_audio_invalid

    @maybe_audio_invalid.setter
    def maybe_audio_invalid(self, maybe_audio_invalid):
        """Sets the maybe_audio_invalid of this EpisodeFull.

        Whether or not this episode's audio is invalid. Podcasters may delete the original audio.

        :param maybe_audio_invalid: The maybe_audio_invalid of this EpisodeFull.
        :type maybe_audio_invalid: bool
        """

        self._maybe_audio_invalid = maybe_audio_invalid

    @property
    def podcast(self):
        """Gets the podcast of this EpisodeFull.


        :return: The podcast of this EpisodeFull.
        :rtype: PodcastSimple
        """
        return self._podcast

    @podcast.setter
    def podcast(self, podcast):
        """Sets the podcast of this EpisodeFull.


        :param podcast: The podcast of this EpisodeFull.
        :type podcast: PodcastSimple
        """

        self._podcast = podcast

    @property
    def pub_date_ms(self):
        """Gets the pub_date_ms of this EpisodeFull.

        Published date for this episode. In millisecond.

        :return: The pub_date_ms of this EpisodeFull.
        :rtype: int
        """
        return self._pub_date_ms

    @pub_date_ms.setter
    def pub_date_ms(self, pub_date_ms):
        """Sets the pub_date_ms of this EpisodeFull.

        Published date for this episode. In millisecond.

        :param pub_date_ms: The pub_date_ms of this EpisodeFull.
        :type pub_date_ms: int
        """

        self._pub_date_ms = pub_date_ms

    @property
    def thumbnail(self):
        """Gets the thumbnail of this EpisodeFull.

        Thumbnail image (300x300) url for this episode. If an episode doesn't have its own image, then this field would be the url of the podcast artwork thumbnail image. 

        :return: The thumbnail of this EpisodeFull.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this EpisodeFull.

        Thumbnail image (300x300) url for this episode. If an episode doesn't have its own image, then this field would be the url of the podcast artwork thumbnail image. 

        :param thumbnail: The thumbnail of this EpisodeFull.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def title(self):
        """Gets the title of this EpisodeFull.

        Episode name.

        :return: The title of this EpisodeFull.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EpisodeFull.

        Episode name.

        :param title: The title of this EpisodeFull.
        :type title: str
        """

        self._title = title

    @property
    def transcript(self):
        """Gets the transcript of this EpisodeFull.

        The transcript of this episode, in plain text (with the newline character \\n). If there's not transcript, it is null. This field is available only in the PRO/ENTERPRISE plan.

        :return: The transcript of this EpisodeFull.
        :rtype: str
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript):
        """Sets the transcript of this EpisodeFull.

        The transcript of this episode, in plain text (with the newline character \\n). If there's not transcript, it is null. This field is available only in the PRO/ENTERPRISE plan.

        :param transcript: The transcript of this EpisodeFull.
        :type transcript: str
        """

        self._transcript = transcript
