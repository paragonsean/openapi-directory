# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.playlist_item_data import PlaylistItemData
from openapi_server import util


class PlaylistItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_at_ms: int=None, data: PlaylistItemData=None, id: int=None, notes: str=None, type: str=None):
        """PlaylistItem - a model defined in OpenAPI

        :param added_at_ms: The added_at_ms of this PlaylistItem.
        :param data: The data of this PlaylistItem.
        :param id: The id of this PlaylistItem.
        :param notes: The notes of this PlaylistItem.
        :param type: The type of this PlaylistItem.
        """
        self.openapi_types = {
            'added_at_ms': int,
            'data': PlaylistItemData,
            'id': int,
            'notes': str,
            'type': str
        }

        self.attribute_map = {
            'added_at_ms': 'added_at_ms',
            'data': 'data',
            'id': 'id',
            'notes': 'notes',
            'type': 'type'
        }

        self._added_at_ms = added_at_ms
        self._data = data
        self._id = id
        self._notes = notes
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaylistItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaylistItem of this PlaylistItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_at_ms(self):
        """Gets the added_at_ms of this PlaylistItem.

        Timestamp (in milliseconds) when this item is added.

        :return: The added_at_ms of this PlaylistItem.
        :rtype: int
        """
        return self._added_at_ms

    @added_at_ms.setter
    def added_at_ms(self, added_at_ms):
        """Sets the added_at_ms of this PlaylistItem.

        Timestamp (in milliseconds) when this item is added.

        :param added_at_ms: The added_at_ms of this PlaylistItem.
        :type added_at_ms: int
        """

        self._added_at_ms = added_at_ms

    @property
    def data(self):
        """Gets the data of this PlaylistItem.


        :return: The data of this PlaylistItem.
        :rtype: PlaylistItemData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PlaylistItem.


        :param data: The data of this PlaylistItem.
        :type data: PlaylistItemData
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this PlaylistItem.

        Playlist item id.

        :return: The id of this PlaylistItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaylistItem.

        Playlist item id.

        :param id: The id of this PlaylistItem.
        :type id: int
        """

        self._id = id

    @property
    def notes(self):
        """Gets the notes of this PlaylistItem.

        Notes for this item.

        :return: The notes of this PlaylistItem.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PlaylistItem.

        Notes for this item.

        :param notes: The notes of this PlaylistItem.
        :type notes: str
        """

        self._notes = notes

    @property
    def type(self):
        """Gets the type of this PlaylistItem.

        The type of this playlist item. If a playlist is **episode_list**, then an item could be either **episode** or **custom_audio**. If it's **podcast_list**, then an item can only be **podcast**. 

        :return: The type of this PlaylistItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlaylistItem.

        The type of this playlist item. If a playlist is **episode_list**, then an item could be either **episode** or **custom_audio**. If it's **podcast_list**, then an item can only be **podcast**. 

        :param type: The type of this PlaylistItem.
        :type type: str
        """
        allowed_values = ["episode", "custom_audio", "podcast"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
