# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PodcastAudienceResponseByRegionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ratio: str=None, region: str=None):
        """PodcastAudienceResponseByRegionsInner - a model defined in OpenAPI

        :param ratio: The ratio of this PodcastAudienceResponseByRegionsInner.
        :param region: The region of this PodcastAudienceResponseByRegionsInner.
        """
        self.openapi_types = {
            'ratio': str,
            'region': str
        }

        self.attribute_map = {
            'ratio': 'ratio',
            'region': 'region'
        }

        self._ratio = ratio
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PodcastAudienceResponseByRegionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PodcastAudienceResponse_by_regions_inner of this PodcastAudienceResponseByRegionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ratio(self):
        """Gets the ratio of this PodcastAudienceResponseByRegionsInner.

        percentage of audience from this specific region

        :return: The ratio of this PodcastAudienceResponseByRegionsInner.
        :rtype: str
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this PodcastAudienceResponseByRegionsInner.

        percentage of audience from this specific region

        :param ratio: The ratio of this PodcastAudienceResponseByRegionsInner.
        :type ratio: str
        """

        self._ratio = ratio

    @property
    def region(self):
        """Gets the region of this PodcastAudienceResponseByRegionsInner.

        2-letter country code of a region.

        :return: The region of this PodcastAudienceResponseByRegionsInner.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this PodcastAudienceResponseByRegionsInner.

        2-letter country code of a region.

        :param region: The region of this PodcastAudienceResponseByRegionsInner.
        :type region: str
        """

        self._region = region
