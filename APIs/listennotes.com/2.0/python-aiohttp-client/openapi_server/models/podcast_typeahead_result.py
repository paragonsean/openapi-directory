# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PodcastTypeaheadResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, explicit_content: bool=None, id: str=None, image: str=None, publisher_highlighted: str=None, publisher_original: str=None, thumbnail: str=None, title_highlighted: str=None, title_original: str=None):
        """PodcastTypeaheadResult - a model defined in OpenAPI

        :param explicit_content: The explicit_content of this PodcastTypeaheadResult.
        :param id: The id of this PodcastTypeaheadResult.
        :param image: The image of this PodcastTypeaheadResult.
        :param publisher_highlighted: The publisher_highlighted of this PodcastTypeaheadResult.
        :param publisher_original: The publisher_original of this PodcastTypeaheadResult.
        :param thumbnail: The thumbnail of this PodcastTypeaheadResult.
        :param title_highlighted: The title_highlighted of this PodcastTypeaheadResult.
        :param title_original: The title_original of this PodcastTypeaheadResult.
        """
        self.openapi_types = {
            'explicit_content': bool,
            'id': str,
            'image': str,
            'publisher_highlighted': str,
            'publisher_original': str,
            'thumbnail': str,
            'title_highlighted': str,
            'title_original': str
        }

        self.attribute_map = {
            'explicit_content': 'explicit_content',
            'id': 'id',
            'image': 'image',
            'publisher_highlighted': 'publisher_highlighted',
            'publisher_original': 'publisher_original',
            'thumbnail': 'thumbnail',
            'title_highlighted': 'title_highlighted',
            'title_original': 'title_original'
        }

        self._explicit_content = explicit_content
        self._id = id
        self._image = image
        self._publisher_highlighted = publisher_highlighted
        self._publisher_original = publisher_original
        self._thumbnail = thumbnail
        self._title_highlighted = title_highlighted
        self._title_original = title_original

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PodcastTypeaheadResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PodcastTypeaheadResult of this PodcastTypeaheadResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def explicit_content(self):
        """Gets the explicit_content of this PodcastTypeaheadResult.

        Whether this podcast contains explicit language.

        :return: The explicit_content of this PodcastTypeaheadResult.
        :rtype: bool
        """
        return self._explicit_content

    @explicit_content.setter
    def explicit_content(self, explicit_content):
        """Sets the explicit_content of this PodcastTypeaheadResult.

        Whether this podcast contains explicit language.

        :param explicit_content: The explicit_content of this PodcastTypeaheadResult.
        :type explicit_content: bool
        """

        self._explicit_content = explicit_content

    @property
    def id(self):
        """Gets the id of this PodcastTypeaheadResult.

        Podcast id, which can be used to further fetch detailed podcast metadata via `GET /podcasts/{id}`.

        :return: The id of this PodcastTypeaheadResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PodcastTypeaheadResult.

        Podcast id, which can be used to further fetch detailed podcast metadata via `GET /podcasts/{id}`.

        :param id: The id of this PodcastTypeaheadResult.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this PodcastTypeaheadResult.

        Image url for this podcast's artwork. If you are using PRO/ENTERPRISE plan, then it's a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**, low resolution image (300x300). 

        :return: The image of this PodcastTypeaheadResult.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this PodcastTypeaheadResult.

        Image url for this podcast's artwork. If you are using PRO/ENTERPRISE plan, then it's a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**, low resolution image (300x300). 

        :param image: The image of this PodcastTypeaheadResult.
        :type image: str
        """

        self._image = image

    @property
    def publisher_highlighted(self):
        """Gets the publisher_highlighted of this PodcastTypeaheadResult.

        Highlighted segment of this podcast's publisher name.

        :return: The publisher_highlighted of this PodcastTypeaheadResult.
        :rtype: str
        """
        return self._publisher_highlighted

    @publisher_highlighted.setter
    def publisher_highlighted(self, publisher_highlighted):
        """Sets the publisher_highlighted of this PodcastTypeaheadResult.

        Highlighted segment of this podcast's publisher name.

        :param publisher_highlighted: The publisher_highlighted of this PodcastTypeaheadResult.
        :type publisher_highlighted: str
        """

        self._publisher_highlighted = publisher_highlighted

    @property
    def publisher_original(self):
        """Gets the publisher_original of this PodcastTypeaheadResult.

        Plain text of this podcast's publisher name.

        :return: The publisher_original of this PodcastTypeaheadResult.
        :rtype: str
        """
        return self._publisher_original

    @publisher_original.setter
    def publisher_original(self, publisher_original):
        """Sets the publisher_original of this PodcastTypeaheadResult.

        Plain text of this podcast's publisher name.

        :param publisher_original: The publisher_original of this PodcastTypeaheadResult.
        :type publisher_original: str
        """

        self._publisher_original = publisher_original

    @property
    def thumbnail(self):
        """Gets the thumbnail of this PodcastTypeaheadResult.

        Thumbnail image url for this podcast's artwork (300x300).

        :return: The thumbnail of this PodcastTypeaheadResult.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this PodcastTypeaheadResult.

        Thumbnail image url for this podcast's artwork (300x300).

        :param thumbnail: The thumbnail of this PodcastTypeaheadResult.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def title_highlighted(self):
        """Gets the title_highlighted of this PodcastTypeaheadResult.

        Highlighted segment of podcast name.

        :return: The title_highlighted of this PodcastTypeaheadResult.
        :rtype: str
        """
        return self._title_highlighted

    @title_highlighted.setter
    def title_highlighted(self, title_highlighted):
        """Sets the title_highlighted of this PodcastTypeaheadResult.

        Highlighted segment of podcast name.

        :param title_highlighted: The title_highlighted of this PodcastTypeaheadResult.
        :type title_highlighted: str
        """

        self._title_highlighted = title_highlighted

    @property
    def title_original(self):
        """Gets the title_original of this PodcastTypeaheadResult.

        Plain text of podcast name.

        :return: The title_original of this PodcastTypeaheadResult.
        :rtype: str
        """
        return self._title_original

    @title_original.setter
    def title_original(self, title_original):
        """Sets the title_original of this PodcastTypeaheadResult.

        Plain text of podcast name.

        :param title_original: The title_original of this PodcastTypeaheadResult.
        :type title_original: str
        """

        self._title_original = title_original
