# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_audio import CustomAudio
from openapi_server.models.deleted_item import DeletedItem
from openapi_server.models.episode_simple import EpisodeSimple
from openapi_server.models.podcast_extra_field import PodcastExtraField
from openapi_server.models.podcast_looking_for_field import PodcastLookingForField
from openapi_server.models.podcast_minimum import PodcastMinimum
from openapi_server.models.podcast_simple import PodcastSimple
from openapi_server.models.podcast_type_field import PodcastTypeField
from openapi_server import util


class PlaylistItemData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio: str=None, audio_length_sec: int=None, description: str=None, explicit_content: bool=None, id: str=None, image: str=None, link: str=None, listennotes_edit_url: str=None, listennotes_url: str=None, maybe_audio_invalid: bool=None, podcast: PodcastMinimum=None, pub_date_ms: int=None, thumbnail: str=None, title: str=None, country: str=None, earliest_pub_date_ms: int=None, email: str=None, extra: PodcastExtraField=None, genre_ids: List[int]=None, is_claimed: bool=None, itunes_id: int=None, language: str=None, latest_episode_id: str=None, latest_pub_date_ms: int=None, listen_score: int=None, listen_score_global_rank: str=None, looking_for: PodcastLookingForField=None, publisher: str=None, rss: str=None, total_episodes: int=None, type: PodcastTypeField=None, update_frequency_hours: int=None, website: str=None, error: str=None, status: str=None):
        """PlaylistItemData - a model defined in OpenAPI

        :param audio: The audio of this PlaylistItemData.
        :param audio_length_sec: The audio_length_sec of this PlaylistItemData.
        :param description: The description of this PlaylistItemData.
        :param explicit_content: The explicit_content of this PlaylistItemData.
        :param id: The id of this PlaylistItemData.
        :param image: The image of this PlaylistItemData.
        :param link: The link of this PlaylistItemData.
        :param listennotes_edit_url: The listennotes_edit_url of this PlaylistItemData.
        :param listennotes_url: The listennotes_url of this PlaylistItemData.
        :param maybe_audio_invalid: The maybe_audio_invalid of this PlaylistItemData.
        :param podcast: The podcast of this PlaylistItemData.
        :param pub_date_ms: The pub_date_ms of this PlaylistItemData.
        :param thumbnail: The thumbnail of this PlaylistItemData.
        :param title: The title of this PlaylistItemData.
        :param country: The country of this PlaylistItemData.
        :param earliest_pub_date_ms: The earliest_pub_date_ms of this PlaylistItemData.
        :param email: The email of this PlaylistItemData.
        :param extra: The extra of this PlaylistItemData.
        :param genre_ids: The genre_ids of this PlaylistItemData.
        :param is_claimed: The is_claimed of this PlaylistItemData.
        :param itunes_id: The itunes_id of this PlaylistItemData.
        :param language: The language of this PlaylistItemData.
        :param latest_episode_id: The latest_episode_id of this PlaylistItemData.
        :param latest_pub_date_ms: The latest_pub_date_ms of this PlaylistItemData.
        :param listen_score: The listen_score of this PlaylistItemData.
        :param listen_score_global_rank: The listen_score_global_rank of this PlaylistItemData.
        :param looking_for: The looking_for of this PlaylistItemData.
        :param publisher: The publisher of this PlaylistItemData.
        :param rss: The rss of this PlaylistItemData.
        :param total_episodes: The total_episodes of this PlaylistItemData.
        :param type: The type of this PlaylistItemData.
        :param update_frequency_hours: The update_frequency_hours of this PlaylistItemData.
        :param website: The website of this PlaylistItemData.
        :param error: The error of this PlaylistItemData.
        :param status: The status of this PlaylistItemData.
        """
        self.openapi_types = {
            'audio': str,
            'audio_length_sec': int,
            'description': str,
            'explicit_content': bool,
            'id': str,
            'image': str,
            'link': str,
            'listennotes_edit_url': str,
            'listennotes_url': str,
            'maybe_audio_invalid': bool,
            'podcast': PodcastMinimum,
            'pub_date_ms': int,
            'thumbnail': str,
            'title': str,
            'country': str,
            'earliest_pub_date_ms': int,
            'email': str,
            'extra': PodcastExtraField,
            'genre_ids': List[int],
            'is_claimed': bool,
            'itunes_id': int,
            'language': str,
            'latest_episode_id': str,
            'latest_pub_date_ms': int,
            'listen_score': int,
            'listen_score_global_rank': str,
            'looking_for': PodcastLookingForField,
            'publisher': str,
            'rss': str,
            'total_episodes': int,
            'type': PodcastTypeField,
            'update_frequency_hours': int,
            'website': str,
            'error': str,
            'status': str
        }

        self.attribute_map = {
            'audio': 'audio',
            'audio_length_sec': 'audio_length_sec',
            'description': 'description',
            'explicit_content': 'explicit_content',
            'id': 'id',
            'image': 'image',
            'link': 'link',
            'listennotes_edit_url': 'listennotes_edit_url',
            'listennotes_url': 'listennotes_url',
            'maybe_audio_invalid': 'maybe_audio_invalid',
            'podcast': 'podcast',
            'pub_date_ms': 'pub_date_ms',
            'thumbnail': 'thumbnail',
            'title': 'title',
            'country': 'country',
            'earliest_pub_date_ms': 'earliest_pub_date_ms',
            'email': 'email',
            'extra': 'extra',
            'genre_ids': 'genre_ids',
            'is_claimed': 'is_claimed',
            'itunes_id': 'itunes_id',
            'language': 'language',
            'latest_episode_id': 'latest_episode_id',
            'latest_pub_date_ms': 'latest_pub_date_ms',
            'listen_score': 'listen_score',
            'listen_score_global_rank': 'listen_score_global_rank',
            'looking_for': 'looking_for',
            'publisher': 'publisher',
            'rss': 'rss',
            'total_episodes': 'total_episodes',
            'type': 'type',
            'update_frequency_hours': 'update_frequency_hours',
            'website': 'website',
            'error': 'error',
            'status': 'status'
        }

        self._audio = audio
        self._audio_length_sec = audio_length_sec
        self._description = description
        self._explicit_content = explicit_content
        self._id = id
        self._image = image
        self._link = link
        self._listennotes_edit_url = listennotes_edit_url
        self._listennotes_url = listennotes_url
        self._maybe_audio_invalid = maybe_audio_invalid
        self._podcast = podcast
        self._pub_date_ms = pub_date_ms
        self._thumbnail = thumbnail
        self._title = title
        self._country = country
        self._earliest_pub_date_ms = earliest_pub_date_ms
        self._email = email
        self._extra = extra
        self._genre_ids = genre_ids
        self._is_claimed = is_claimed
        self._itunes_id = itunes_id
        self._language = language
        self._latest_episode_id = latest_episode_id
        self._latest_pub_date_ms = latest_pub_date_ms
        self._listen_score = listen_score
        self._listen_score_global_rank = listen_score_global_rank
        self._looking_for = looking_for
        self._publisher = publisher
        self._rss = rss
        self._total_episodes = total_episodes
        self._type = type
        self._update_frequency_hours = update_frequency_hours
        self._website = website
        self._error = error
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaylistItemData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaylistItem_data of this PlaylistItemData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio(self):
        """Gets the audio of this PlaylistItemData.

        Audio url, which can be played directly.

        :return: The audio of this PlaylistItemData.
        :rtype: str
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this PlaylistItemData.

        Audio url, which can be played directly.

        :param audio: The audio of this PlaylistItemData.
        :type audio: str
        """

        self._audio = audio

    @property
    def audio_length_sec(self):
        """Gets the audio_length_sec of this PlaylistItemData.

        Audio length in seconds.

        :return: The audio_length_sec of this PlaylistItemData.
        :rtype: int
        """
        return self._audio_length_sec

    @audio_length_sec.setter
    def audio_length_sec(self, audio_length_sec):
        """Sets the audio_length_sec of this PlaylistItemData.

        Audio length in seconds.

        :param audio_length_sec: The audio_length_sec of this PlaylistItemData.
        :type audio_length_sec: int
        """

        self._audio_length_sec = audio_length_sec

    @property
    def description(self):
        """Gets the description of this PlaylistItemData.

        Html of this episode's full description

        :return: The description of this PlaylistItemData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlaylistItemData.

        Html of this episode's full description

        :param description: The description of this PlaylistItemData.
        :type description: str
        """

        self._description = description

    @property
    def explicit_content(self):
        """Gets the explicit_content of this PlaylistItemData.

        Whether this podcast contains explicit language.

        :return: The explicit_content of this PlaylistItemData.
        :rtype: bool
        """
        return self._explicit_content

    @explicit_content.setter
    def explicit_content(self, explicit_content):
        """Sets the explicit_content of this PlaylistItemData.

        Whether this podcast contains explicit language.

        :param explicit_content: The explicit_content of this PlaylistItemData.
        :type explicit_content: bool
        """

        self._explicit_content = explicit_content

    @property
    def id(self):
        """Gets the id of this PlaylistItemData.

        Episode id or podcast id.

        :return: The id of this PlaylistItemData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaylistItemData.

        Episode id or podcast id.

        :param id: The id of this PlaylistItemData.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this PlaylistItemData.

        High resolution image url of this custom audio.

        :return: The image of this PlaylistItemData.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this PlaylistItemData.

        High resolution image url of this custom audio.

        :param image: The image of this PlaylistItemData.
        :type image: str
        """

        self._image = image

    @property
    def link(self):
        """Gets the link of this PlaylistItemData.

        Web link of this episode.

        :return: The link of this PlaylistItemData.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PlaylistItemData.

        Web link of this episode.

        :param link: The link of this PlaylistItemData.
        :type link: str
        """

        self._link = link

    @property
    def listennotes_edit_url(self):
        """Gets the listennotes_edit_url of this PlaylistItemData.

        Edit url of this episode where you can update the audio url if you find the audio is broken.

        :return: The listennotes_edit_url of this PlaylistItemData.
        :rtype: str
        """
        return self._listennotes_edit_url

    @listennotes_edit_url.setter
    def listennotes_edit_url(self, listennotes_edit_url):
        """Sets the listennotes_edit_url of this PlaylistItemData.

        Edit url of this episode where you can update the audio url if you find the audio is broken.

        :param listennotes_edit_url: The listennotes_edit_url of this PlaylistItemData.
        :type listennotes_edit_url: str
        """

        self._listennotes_edit_url = listennotes_edit_url

    @property
    def listennotes_url(self):
        """Gets the listennotes_url of this PlaylistItemData.

        The url of this podcast on [ListenNotes.com](https://www.ListenNotes.com).

        :return: The listennotes_url of this PlaylistItemData.
        :rtype: str
        """
        return self._listennotes_url

    @listennotes_url.setter
    def listennotes_url(self, listennotes_url):
        """Sets the listennotes_url of this PlaylistItemData.

        The url of this podcast on [ListenNotes.com](https://www.ListenNotes.com).

        :param listennotes_url: The listennotes_url of this PlaylistItemData.
        :type listennotes_url: str
        """

        self._listennotes_url = listennotes_url

    @property
    def maybe_audio_invalid(self):
        """Gets the maybe_audio_invalid of this PlaylistItemData.

        Whether or not this episode's audio is invalid. Podcasters may delete the original audio.

        :return: The maybe_audio_invalid of this PlaylistItemData.
        :rtype: bool
        """
        return self._maybe_audio_invalid

    @maybe_audio_invalid.setter
    def maybe_audio_invalid(self, maybe_audio_invalid):
        """Sets the maybe_audio_invalid of this PlaylistItemData.

        Whether or not this episode's audio is invalid. Podcasters may delete the original audio.

        :param maybe_audio_invalid: The maybe_audio_invalid of this PlaylistItemData.
        :type maybe_audio_invalid: bool
        """

        self._maybe_audio_invalid = maybe_audio_invalid

    @property
    def podcast(self):
        """Gets the podcast of this PlaylistItemData.


        :return: The podcast of this PlaylistItemData.
        :rtype: PodcastMinimum
        """
        return self._podcast

    @podcast.setter
    def podcast(self, podcast):
        """Sets the podcast of this PlaylistItemData.


        :param podcast: The podcast of this PlaylistItemData.
        :type podcast: PodcastMinimum
        """

        self._podcast = podcast

    @property
    def pub_date_ms(self):
        """Gets the pub_date_ms of this PlaylistItemData.

        Published date (in milliseconds) of this custom audio. For now, it's the same as **added_at_ms** of this playlist item. 

        :return: The pub_date_ms of this PlaylistItemData.
        :rtype: int
        """
        return self._pub_date_ms

    @pub_date_ms.setter
    def pub_date_ms(self, pub_date_ms):
        """Sets the pub_date_ms of this PlaylistItemData.

        Published date (in milliseconds) of this custom audio. For now, it's the same as **added_at_ms** of this playlist item. 

        :param pub_date_ms: The pub_date_ms of this PlaylistItemData.
        :type pub_date_ms: int
        """

        self._pub_date_ms = pub_date_ms

    @property
    def thumbnail(self):
        """Gets the thumbnail of this PlaylistItemData.

        Low resolution image url of this custom audio.

        :return: The thumbnail of this PlaylistItemData.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this PlaylistItemData.

        Low resolution image url of this custom audio.

        :param thumbnail: The thumbnail of this PlaylistItemData.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def title(self):
        """Gets the title of this PlaylistItemData.

        Episode title or podcast title.

        :return: The title of this PlaylistItemData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PlaylistItemData.

        Episode title or podcast title.

        :param title: The title of this PlaylistItemData.
        :type title: str
        """

        self._title = title

    @property
    def country(self):
        """Gets the country of this PlaylistItemData.

        The country where this podcast is produced.

        :return: The country of this PlaylistItemData.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PlaylistItemData.

        The country where this podcast is produced.

        :param country: The country of this PlaylistItemData.
        :type country: str
        """

        self._country = country

    @property
    def earliest_pub_date_ms(self):
        """Gets the earliest_pub_date_ms of this PlaylistItemData.

        The published date of the oldest episode of this podcast. In milliseconds

        :return: The earliest_pub_date_ms of this PlaylistItemData.
        :rtype: int
        """
        return self._earliest_pub_date_ms

    @earliest_pub_date_ms.setter
    def earliest_pub_date_ms(self, earliest_pub_date_ms):
        """Sets the earliest_pub_date_ms of this PlaylistItemData.

        The published date of the oldest episode of this podcast. In milliseconds

        :param earliest_pub_date_ms: The earliest_pub_date_ms of this PlaylistItemData.
        :type earliest_pub_date_ms: int
        """

        self._earliest_pub_date_ms = earliest_pub_date_ms

    @property
    def email(self):
        """Gets the email of this PlaylistItemData.

        The email of this podcast's producer. This field is available only in the PRO/ENTERPRISE plan.

        :return: The email of this PlaylistItemData.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PlaylistItemData.

        The email of this podcast's producer. This field is available only in the PRO/ENTERPRISE plan.

        :param email: The email of this PlaylistItemData.
        :type email: str
        """

        self._email = email

    @property
    def extra(self):
        """Gets the extra of this PlaylistItemData.


        :return: The extra of this PlaylistItemData.
        :rtype: PodcastExtraField
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this PlaylistItemData.


        :param extra: The extra of this PlaylistItemData.
        :type extra: PodcastExtraField
        """

        self._extra = extra

    @property
    def genre_ids(self):
        """Gets the genre_ids of this PlaylistItemData.


        :return: The genre_ids of this PlaylistItemData.
        :rtype: List[int]
        """
        return self._genre_ids

    @genre_ids.setter
    def genre_ids(self, genre_ids):
        """Sets the genre_ids of this PlaylistItemData.


        :param genre_ids: The genre_ids of this PlaylistItemData.
        :type genre_ids: List[int]
        """

        self._genre_ids = genre_ids

    @property
    def is_claimed(self):
        """Gets the is_claimed of this PlaylistItemData.

        Whether this podcast is claimed by its producer on [ListenNotes.com](https://www.ListenNotes.com).

        :return: The is_claimed of this PlaylistItemData.
        :rtype: bool
        """
        return self._is_claimed

    @is_claimed.setter
    def is_claimed(self, is_claimed):
        """Sets the is_claimed of this PlaylistItemData.

        Whether this podcast is claimed by its producer on [ListenNotes.com](https://www.ListenNotes.com).

        :param is_claimed: The is_claimed of this PlaylistItemData.
        :type is_claimed: bool
        """

        self._is_claimed = is_claimed

    @property
    def itunes_id(self):
        """Gets the itunes_id of this PlaylistItemData.

        iTunes id for this podcast.

        :return: The itunes_id of this PlaylistItemData.
        :rtype: int
        """
        return self._itunes_id

    @itunes_id.setter
    def itunes_id(self, itunes_id):
        """Sets the itunes_id of this PlaylistItemData.

        iTunes id for this podcast.

        :param itunes_id: The itunes_id of this PlaylistItemData.
        :type itunes_id: int
        """

        self._itunes_id = itunes_id

    @property
    def language(self):
        """Gets the language of this PlaylistItemData.

        The language of this podcast. You can get all supported languages from `GET /languages`.

        :return: The language of this PlaylistItemData.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PlaylistItemData.

        The language of this podcast. You can get all supported languages from `GET /languages`.

        :param language: The language of this PlaylistItemData.
        :type language: str
        """

        self._language = language

    @property
    def latest_episode_id(self):
        """Gets the latest_episode_id of this PlaylistItemData.

        The id of the most recently published episode of this podcast, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`.

        :return: The latest_episode_id of this PlaylistItemData.
        :rtype: str
        """
        return self._latest_episode_id

    @latest_episode_id.setter
    def latest_episode_id(self, latest_episode_id):
        """Sets the latest_episode_id of this PlaylistItemData.

        The id of the most recently published episode of this podcast, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`.

        :param latest_episode_id: The latest_episode_id of this PlaylistItemData.
        :type latest_episode_id: str
        """

        self._latest_episode_id = latest_episode_id

    @property
    def latest_pub_date_ms(self):
        """Gets the latest_pub_date_ms of this PlaylistItemData.

        The published date of the latest episode of this podcast. In milliseconds

        :return: The latest_pub_date_ms of this PlaylistItemData.
        :rtype: int
        """
        return self._latest_pub_date_ms

    @latest_pub_date_ms.setter
    def latest_pub_date_ms(self, latest_pub_date_ms):
        """Sets the latest_pub_date_ms of this PlaylistItemData.

        The published date of the latest episode of this podcast. In milliseconds

        :param latest_pub_date_ms: The latest_pub_date_ms of this PlaylistItemData.
        :type latest_pub_date_ms: int
        """

        self._latest_pub_date_ms = latest_pub_date_ms

    @property
    def listen_score(self):
        """Gets the listen_score of this PlaylistItemData.

        The estimated popularity score of a podcast compared to all other rss-based public podcasts in the world on a scale from 0 to 100. If the score is not available, it'll be null. Learn more at listennotes.com/listen-score 

        :return: The listen_score of this PlaylistItemData.
        :rtype: int
        """
        return self._listen_score

    @listen_score.setter
    def listen_score(self, listen_score):
        """Sets the listen_score of this PlaylistItemData.

        The estimated popularity score of a podcast compared to all other rss-based public podcasts in the world on a scale from 0 to 100. If the score is not available, it'll be null. Learn more at listennotes.com/listen-score 

        :param listen_score: The listen_score of this PlaylistItemData.
        :type listen_score: int
        """

        self._listen_score = listen_score

    @property
    def listen_score_global_rank(self):
        """Gets the listen_score_global_rank of this PlaylistItemData.

        The estimated popularity ranking of a podcast compared to all other rss-based public podcasts in the world. For example, if the value is 0.5%, then this podcast is one of the top 0.5% most popular shows out of all podcasts globally, ranked by Listen Score. If the ranking is not available, it'll be null. Learn more at listennotes.com/listen-score 

        :return: The listen_score_global_rank of this PlaylistItemData.
        :rtype: str
        """
        return self._listen_score_global_rank

    @listen_score_global_rank.setter
    def listen_score_global_rank(self, listen_score_global_rank):
        """Sets the listen_score_global_rank of this PlaylistItemData.

        The estimated popularity ranking of a podcast compared to all other rss-based public podcasts in the world. For example, if the value is 0.5%, then this podcast is one of the top 0.5% most popular shows out of all podcasts globally, ranked by Listen Score. If the ranking is not available, it'll be null. Learn more at listennotes.com/listen-score 

        :param listen_score_global_rank: The listen_score_global_rank of this PlaylistItemData.
        :type listen_score_global_rank: str
        """

        self._listen_score_global_rank = listen_score_global_rank

    @property
    def looking_for(self):
        """Gets the looking_for of this PlaylistItemData.


        :return: The looking_for of this PlaylistItemData.
        :rtype: PodcastLookingForField
        """
        return self._looking_for

    @looking_for.setter
    def looking_for(self, looking_for):
        """Sets the looking_for of this PlaylistItemData.


        :param looking_for: The looking_for of this PlaylistItemData.
        :type looking_for: PodcastLookingForField
        """

        self._looking_for = looking_for

    @property
    def publisher(self):
        """Gets the publisher of this PlaylistItemData.

        Podcast publisher name.

        :return: The publisher of this PlaylistItemData.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this PlaylistItemData.

        Podcast publisher name.

        :param publisher: The publisher of this PlaylistItemData.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def rss(self):
        """Gets the rss of this PlaylistItemData.

        RSS url of this podcast. This field is available only in the PRO/ENTERPRISE plan.

        :return: The rss of this PlaylistItemData.
        :rtype: str
        """
        return self._rss

    @rss.setter
    def rss(self, rss):
        """Sets the rss of this PlaylistItemData.

        RSS url of this podcast. This field is available only in the PRO/ENTERPRISE plan.

        :param rss: The rss of this PlaylistItemData.
        :type rss: str
        """

        self._rss = rss

    @property
    def total_episodes(self):
        """Gets the total_episodes of this PlaylistItemData.

        Total number of episodes in this podcast.

        :return: The total_episodes of this PlaylistItemData.
        :rtype: int
        """
        return self._total_episodes

    @total_episodes.setter
    def total_episodes(self, total_episodes):
        """Sets the total_episodes of this PlaylistItemData.

        Total number of episodes in this podcast.

        :param total_episodes: The total_episodes of this PlaylistItemData.
        :type total_episodes: int
        """

        self._total_episodes = total_episodes

    @property
    def type(self):
        """Gets the type of this PlaylistItemData.


        :return: The type of this PlaylistItemData.
        :rtype: PodcastTypeField
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlaylistItemData.


        :param type: The type of this PlaylistItemData.
        :type type: PodcastTypeField
        """

        self._type = type

    @property
    def update_frequency_hours(self):
        """Gets the update_frequency_hours of this PlaylistItemData.

        How frequently does this podcast release a new episode? In hours. For example, if the value is 166, then it's every 166 hours (or weekly).

        :return: The update_frequency_hours of this PlaylistItemData.
        :rtype: int
        """
        return self._update_frequency_hours

    @update_frequency_hours.setter
    def update_frequency_hours(self, update_frequency_hours):
        """Sets the update_frequency_hours of this PlaylistItemData.

        How frequently does this podcast release a new episode? In hours. For example, if the value is 166, then it's every 166 hours (or weekly).

        :param update_frequency_hours: The update_frequency_hours of this PlaylistItemData.
        :type update_frequency_hours: int
        """

        self._update_frequency_hours = update_frequency_hours

    @property
    def website(self):
        """Gets the website of this PlaylistItemData.

        Website url of this podcast.

        :return: The website of this PlaylistItemData.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this PlaylistItemData.

        Website url of this podcast.

        :param website: The website of this PlaylistItemData.
        :type website: str
        """

        self._website = website

    @property
    def error(self):
        """Gets the error of this PlaylistItemData.

        Why this episode or podcast is deleted?

        :return: The error of this PlaylistItemData.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this PlaylistItemData.

        Why this episode or podcast is deleted?

        :param error: The error of this PlaylistItemData.
        :type error: str
        """

        self._error = error

    @property
    def status(self):
        """Gets the status of this PlaylistItemData.

        The status of this episode or podcast. For now, the only possible value is **deleted**.

        :return: The status of this PlaylistItemData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PlaylistItemData.

        The status of this episode or podcast. For now, the only possible value is **deleted**.

        :param status: The status of this PlaylistItemData.
        :type status: str
        """

        self._status = status
