# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EpisodeSearchResultPodcast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, genre_ids: List[int]=None, id: str=None, image: str=None, listen_score: int=None, listen_score_global_rank: str=None, listennotes_url: str=None, publisher_highlighted: str=None, publisher_original: str=None, thumbnail: str=None, title_highlighted: str=None, title_original: str=None):
        """EpisodeSearchResultPodcast - a model defined in OpenAPI

        :param genre_ids: The genre_ids of this EpisodeSearchResultPodcast.
        :param id: The id of this EpisodeSearchResultPodcast.
        :param image: The image of this EpisodeSearchResultPodcast.
        :param listen_score: The listen_score of this EpisodeSearchResultPodcast.
        :param listen_score_global_rank: The listen_score_global_rank of this EpisodeSearchResultPodcast.
        :param listennotes_url: The listennotes_url of this EpisodeSearchResultPodcast.
        :param publisher_highlighted: The publisher_highlighted of this EpisodeSearchResultPodcast.
        :param publisher_original: The publisher_original of this EpisodeSearchResultPodcast.
        :param thumbnail: The thumbnail of this EpisodeSearchResultPodcast.
        :param title_highlighted: The title_highlighted of this EpisodeSearchResultPodcast.
        :param title_original: The title_original of this EpisodeSearchResultPodcast.
        """
        self.openapi_types = {
            'genre_ids': List[int],
            'id': str,
            'image': str,
            'listen_score': int,
            'listen_score_global_rank': str,
            'listennotes_url': str,
            'publisher_highlighted': str,
            'publisher_original': str,
            'thumbnail': str,
            'title_highlighted': str,
            'title_original': str
        }

        self.attribute_map = {
            'genre_ids': 'genre_ids',
            'id': 'id',
            'image': 'image',
            'listen_score': 'listen_score',
            'listen_score_global_rank': 'listen_score_global_rank',
            'listennotes_url': 'listennotes_url',
            'publisher_highlighted': 'publisher_highlighted',
            'publisher_original': 'publisher_original',
            'thumbnail': 'thumbnail',
            'title_highlighted': 'title_highlighted',
            'title_original': 'title_original'
        }

        self._genre_ids = genre_ids
        self._id = id
        self._image = image
        self._listen_score = listen_score
        self._listen_score_global_rank = listen_score_global_rank
        self._listennotes_url = listennotes_url
        self._publisher_highlighted = publisher_highlighted
        self._publisher_original = publisher_original
        self._thumbnail = thumbnail
        self._title_highlighted = title_highlighted
        self._title_original = title_original

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EpisodeSearchResultPodcast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EpisodeSearchResult_podcast of this EpisodeSearchResultPodcast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def genre_ids(self):
        """Gets the genre_ids of this EpisodeSearchResultPodcast.


        :return: The genre_ids of this EpisodeSearchResultPodcast.
        :rtype: List[int]
        """
        return self._genre_ids

    @genre_ids.setter
    def genre_ids(self, genre_ids):
        """Sets the genre_ids of this EpisodeSearchResultPodcast.


        :param genre_ids: The genre_ids of this EpisodeSearchResultPodcast.
        :type genre_ids: List[int]
        """

        self._genre_ids = genre_ids

    @property
    def id(self):
        """Gets the id of this EpisodeSearchResultPodcast.

        Podcast id, which can be used to further fetch detailed podcast metadata via `GET /podcasts/{id}`.

        :return: The id of this EpisodeSearchResultPodcast.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EpisodeSearchResultPodcast.

        Podcast id, which can be used to further fetch detailed podcast metadata via `GET /podcasts/{id}`.

        :param id: The id of this EpisodeSearchResultPodcast.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this EpisodeSearchResultPodcast.

        Image url for this podcast's artwork. If you are using PRO/ENTERPRISE plan, then it's a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**, low resolution image (300x300). 

        :return: The image of this EpisodeSearchResultPodcast.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this EpisodeSearchResultPodcast.

        Image url for this podcast's artwork. If you are using PRO/ENTERPRISE plan, then it's a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**, low resolution image (300x300). 

        :param image: The image of this EpisodeSearchResultPodcast.
        :type image: str
        """

        self._image = image

    @property
    def listen_score(self):
        """Gets the listen_score of this EpisodeSearchResultPodcast.

        The estimated popularity score of a podcast compared to all other rss-based public podcasts in the world on a scale from 0 to 100. If the score is not available, it'll be null. Learn more at listennotes.com/listen-score 

        :return: The listen_score of this EpisodeSearchResultPodcast.
        :rtype: int
        """
        return self._listen_score

    @listen_score.setter
    def listen_score(self, listen_score):
        """Sets the listen_score of this EpisodeSearchResultPodcast.

        The estimated popularity score of a podcast compared to all other rss-based public podcasts in the world on a scale from 0 to 100. If the score is not available, it'll be null. Learn more at listennotes.com/listen-score 

        :param listen_score: The listen_score of this EpisodeSearchResultPodcast.
        :type listen_score: int
        """

        self._listen_score = listen_score

    @property
    def listen_score_global_rank(self):
        """Gets the listen_score_global_rank of this EpisodeSearchResultPodcast.

        The estimated popularity ranking of a podcast compared to all other rss-based public podcasts in the world. For example, if the value is 0.5%, then this podcast is one of the top 0.5% most popular shows out of all podcasts globally, ranked by Listen Score. If the ranking is not available, it'll be null. Learn more at listennotes.com/listen-score 

        :return: The listen_score_global_rank of this EpisodeSearchResultPodcast.
        :rtype: str
        """
        return self._listen_score_global_rank

    @listen_score_global_rank.setter
    def listen_score_global_rank(self, listen_score_global_rank):
        """Sets the listen_score_global_rank of this EpisodeSearchResultPodcast.

        The estimated popularity ranking of a podcast compared to all other rss-based public podcasts in the world. For example, if the value is 0.5%, then this podcast is one of the top 0.5% most popular shows out of all podcasts globally, ranked by Listen Score. If the ranking is not available, it'll be null. Learn more at listennotes.com/listen-score 

        :param listen_score_global_rank: The listen_score_global_rank of this EpisodeSearchResultPodcast.
        :type listen_score_global_rank: str
        """

        self._listen_score_global_rank = listen_score_global_rank

    @property
    def listennotes_url(self):
        """Gets the listennotes_url of this EpisodeSearchResultPodcast.

        The url of this podcast on [ListenNotes.com](https://www.ListenNotes.com).

        :return: The listennotes_url of this EpisodeSearchResultPodcast.
        :rtype: str
        """
        return self._listennotes_url

    @listennotes_url.setter
    def listennotes_url(self, listennotes_url):
        """Sets the listennotes_url of this EpisodeSearchResultPodcast.

        The url of this podcast on [ListenNotes.com](https://www.ListenNotes.com).

        :param listennotes_url: The listennotes_url of this EpisodeSearchResultPodcast.
        :type listennotes_url: str
        """

        self._listennotes_url = listennotes_url

    @property
    def publisher_highlighted(self):
        """Gets the publisher_highlighted of this EpisodeSearchResultPodcast.

        Highlighted segment of this podcast's publisher name.

        :return: The publisher_highlighted of this EpisodeSearchResultPodcast.
        :rtype: str
        """
        return self._publisher_highlighted

    @publisher_highlighted.setter
    def publisher_highlighted(self, publisher_highlighted):
        """Sets the publisher_highlighted of this EpisodeSearchResultPodcast.

        Highlighted segment of this podcast's publisher name.

        :param publisher_highlighted: The publisher_highlighted of this EpisodeSearchResultPodcast.
        :type publisher_highlighted: str
        """

        self._publisher_highlighted = publisher_highlighted

    @property
    def publisher_original(self):
        """Gets the publisher_original of this EpisodeSearchResultPodcast.

        Plain text of this podcast's publisher name.

        :return: The publisher_original of this EpisodeSearchResultPodcast.
        :rtype: str
        """
        return self._publisher_original

    @publisher_original.setter
    def publisher_original(self, publisher_original):
        """Sets the publisher_original of this EpisodeSearchResultPodcast.

        Plain text of this podcast's publisher name.

        :param publisher_original: The publisher_original of this EpisodeSearchResultPodcast.
        :type publisher_original: str
        """

        self._publisher_original = publisher_original

    @property
    def thumbnail(self):
        """Gets the thumbnail of this EpisodeSearchResultPodcast.

        Thumbnail image url for this podcast's artwork (300x300).

        :return: The thumbnail of this EpisodeSearchResultPodcast.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this EpisodeSearchResultPodcast.

        Thumbnail image url for this podcast's artwork (300x300).

        :param thumbnail: The thumbnail of this EpisodeSearchResultPodcast.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def title_highlighted(self):
        """Gets the title_highlighted of this EpisodeSearchResultPodcast.

        Highlighted segment of podcast name.

        :return: The title_highlighted of this EpisodeSearchResultPodcast.
        :rtype: str
        """
        return self._title_highlighted

    @title_highlighted.setter
    def title_highlighted(self, title_highlighted):
        """Sets the title_highlighted of this EpisodeSearchResultPodcast.

        Highlighted segment of podcast name.

        :param title_highlighted: The title_highlighted of this EpisodeSearchResultPodcast.
        :type title_highlighted: str
        """

        self._title_highlighted = title_highlighted

    @property
    def title_original(self):
        """Gets the title_original of this EpisodeSearchResultPodcast.

        Plain text of podcast name.

        :return: The title_original of this EpisodeSearchResultPodcast.
        :rtype: str
        """
        return self._title_original

    @title_original.setter
    def title_original(self, title_original):
        """Sets the title_original of this EpisodeSearchResultPodcast.

        Plain text of podcast name.

        :param title_original: The title_original of this EpisodeSearchResultPodcast.
        :type title_original: str
        """

        self._title_original = title_original
