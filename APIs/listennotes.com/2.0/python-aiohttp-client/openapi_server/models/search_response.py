# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_response_results_inner import SearchResponseResultsInner
from openapi_server import util


class SearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, next_offset: int=None, results: List[SearchResponseResultsInner]=None, took: float=None, total: int=None):
        """SearchResponse - a model defined in OpenAPI

        :param count: The count of this SearchResponse.
        :param next_offset: The next_offset of this SearchResponse.
        :param results: The results of this SearchResponse.
        :param took: The took of this SearchResponse.
        :param total: The total of this SearchResponse.
        """
        self.openapi_types = {
            'count': int,
            'next_offset': int,
            'results': List[SearchResponseResultsInner],
            'took': float,
            'total': int
        }

        self.attribute_map = {
            'count': 'count',
            'next_offset': 'next_offset',
            'results': 'results',
            'took': 'took',
            'total': 'total'
        }

        self._count = count
        self._next_offset = next_offset
        self._results = results
        self._took = took
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResponse of this SearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this SearchResponse.

        The number of search results in this page.

        :return: The count of this SearchResponse.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SearchResponse.

        The number of search results in this page.

        :param count: The count of this SearchResponse.
        :type count: int
        """

        self._count = count

    @property
    def next_offset(self):
        """Gets the next_offset of this SearchResponse.

        Pass this value to the **offset** parameter to do pagination of search results.

        :return: The next_offset of this SearchResponse.
        :rtype: int
        """
        return self._next_offset

    @next_offset.setter
    def next_offset(self, next_offset):
        """Sets the next_offset of this SearchResponse.

        Pass this value to the **offset** parameter to do pagination of search results.

        :param next_offset: The next_offset of this SearchResponse.
        :type next_offset: int
        """

        self._next_offset = next_offset

    @property
    def results(self):
        """Gets the results of this SearchResponse.

        A list of search results.

        :return: The results of this SearchResponse.
        :rtype: List[SearchResponseResultsInner]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this SearchResponse.

        A list of search results.

        :param results: The results of this SearchResponse.
        :type results: List[SearchResponseResultsInner]
        """

        self._results = results

    @property
    def took(self):
        """Gets the took of this SearchResponse.

        The time it took to fetch these search results. In seconds.

        :return: The took of this SearchResponse.
        :rtype: float
        """
        return self._took

    @took.setter
    def took(self, took):
        """Sets the took of this SearchResponse.

        The time it took to fetch these search results. In seconds.

        :param took: The took of this SearchResponse.
        :type took: float
        """

        self._took = took

    @property
    def total(self):
        """Gets the total of this SearchResponse.

        The total number of search results.

        :return: The total of this SearchResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SearchResponse.

        The total number of search results.

        :param total: The total of this SearchResponse.
        :type total: int
        """

        self._total = total
