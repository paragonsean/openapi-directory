# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PodcastLookingForField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cohosts: bool=None, cross_promotion: bool=None, guests: bool=None, sponsors: bool=None):
        """PodcastLookingForField - a model defined in OpenAPI

        :param cohosts: The cohosts of this PodcastLookingForField.
        :param cross_promotion: The cross_promotion of this PodcastLookingForField.
        :param guests: The guests of this PodcastLookingForField.
        :param sponsors: The sponsors of this PodcastLookingForField.
        """
        self.openapi_types = {
            'cohosts': bool,
            'cross_promotion': bool,
            'guests': bool,
            'sponsors': bool
        }

        self.attribute_map = {
            'cohosts': 'cohosts',
            'cross_promotion': 'cross_promotion',
            'guests': 'guests',
            'sponsors': 'sponsors'
        }

        self._cohosts = cohosts
        self._cross_promotion = cross_promotion
        self._guests = guests
        self._sponsors = sponsors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PodcastLookingForField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PodcastLookingForField of this PodcastLookingForField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cohosts(self):
        """Gets the cohosts of this PodcastLookingForField.

        Whether this podcast is looking for cohosts.

        :return: The cohosts of this PodcastLookingForField.
        :rtype: bool
        """
        return self._cohosts

    @cohosts.setter
    def cohosts(self, cohosts):
        """Sets the cohosts of this PodcastLookingForField.

        Whether this podcast is looking for cohosts.

        :param cohosts: The cohosts of this PodcastLookingForField.
        :type cohosts: bool
        """

        self._cohosts = cohosts

    @property
    def cross_promotion(self):
        """Gets the cross_promotion of this PodcastLookingForField.

        Whether this podcast is looking for cross promotion opportunities with other podcasts.

        :return: The cross_promotion of this PodcastLookingForField.
        :rtype: bool
        """
        return self._cross_promotion

    @cross_promotion.setter
    def cross_promotion(self, cross_promotion):
        """Sets the cross_promotion of this PodcastLookingForField.

        Whether this podcast is looking for cross promotion opportunities with other podcasts.

        :param cross_promotion: The cross_promotion of this PodcastLookingForField.
        :type cross_promotion: bool
        """

        self._cross_promotion = cross_promotion

    @property
    def guests(self):
        """Gets the guests of this PodcastLookingForField.

        Whether this podcast is looking for guests.

        :return: The guests of this PodcastLookingForField.
        :rtype: bool
        """
        return self._guests

    @guests.setter
    def guests(self, guests):
        """Sets the guests of this PodcastLookingForField.

        Whether this podcast is looking for guests.

        :param guests: The guests of this PodcastLookingForField.
        :type guests: bool
        """

        self._guests = guests

    @property
    def sponsors(self):
        """Gets the sponsors of this PodcastLookingForField.

        Whether this podcast is looking for sponsors.

        :return: The sponsors of this PodcastLookingForField.
        :rtype: bool
        """
        return self._sponsors

    @sponsors.setter
    def sponsors(self, sponsors):
        """Sets the sponsors of this PodcastLookingForField.

        Whether this podcast is looking for sponsors.

        :param sponsors: The sponsors of this PodcastLookingForField.
        :type sponsors: bool
        """

        self._sponsors = sponsors
