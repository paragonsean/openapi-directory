# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.episode_simple import EpisodeSimple
from openapi_server import util


class GetEpisodesInBatchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, episodes: List[EpisodeSimple]=None):
        """GetEpisodesInBatchResponse - a model defined in OpenAPI

        :param episodes: The episodes of this GetEpisodesInBatchResponse.
        """
        self.openapi_types = {
            'episodes': List[EpisodeSimple]
        }

        self.attribute_map = {
            'episodes': 'episodes'
        }

        self._episodes = episodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetEpisodesInBatchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetEpisodesInBatchResponse of this GetEpisodesInBatchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def episodes(self):
        """Gets the episodes of this GetEpisodesInBatchResponse.


        :return: The episodes of this GetEpisodesInBatchResponse.
        :rtype: List[EpisodeSimple]
        """
        return self._episodes

    @episodes.setter
    def episodes(self, episodes):
        """Sets the episodes of this GetEpisodesInBatchResponse.


        :param episodes: The episodes of this GetEpisodesInBatchResponse.
        :type episodes: List[EpisodeSimple]
        """
        if episodes is None:
            raise ValueError("Invalid value for `episodes`, must not be `None`")

        self._episodes = episodes
