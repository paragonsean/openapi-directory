# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.playlist_item import PlaylistItem
from openapi_server.models.playlist_visibility_field import PlaylistVisibilityField
from openapi_server import util


class PlaylistResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, image: str=None, items: List[PlaylistItem]=None, last_timestamp_ms: int=None, listennotes_url: str=None, name: str=None, thumbnail: str=None, total: int=None, total_audio_length_sec: int=None, type: str=None, visibility: PlaylistVisibilityField=None):
        """PlaylistResponse - a model defined in OpenAPI

        :param description: The description of this PlaylistResponse.
        :param id: The id of this PlaylistResponse.
        :param image: The image of this PlaylistResponse.
        :param items: The items of this PlaylistResponse.
        :param last_timestamp_ms: The last_timestamp_ms of this PlaylistResponse.
        :param listennotes_url: The listennotes_url of this PlaylistResponse.
        :param name: The name of this PlaylistResponse.
        :param thumbnail: The thumbnail of this PlaylistResponse.
        :param total: The total of this PlaylistResponse.
        :param total_audio_length_sec: The total_audio_length_sec of this PlaylistResponse.
        :param type: The type of this PlaylistResponse.
        :param visibility: The visibility of this PlaylistResponse.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'image': str,
            'items': List[PlaylistItem],
            'last_timestamp_ms': int,
            'listennotes_url': str,
            'name': str,
            'thumbnail': str,
            'total': int,
            'total_audio_length_sec': int,
            'type': str,
            'visibility': PlaylistVisibilityField
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'image': 'image',
            'items': 'items',
            'last_timestamp_ms': 'last_timestamp_ms',
            'listennotes_url': 'listennotes_url',
            'name': 'name',
            'thumbnail': 'thumbnail',
            'total': 'total',
            'total_audio_length_sec': 'total_audio_length_sec',
            'type': 'type',
            'visibility': 'visibility'
        }

        self._description = description
        self._id = id
        self._image = image
        self._items = items
        self._last_timestamp_ms = last_timestamp_ms
        self._listennotes_url = listennotes_url
        self._name = name
        self._thumbnail = thumbnail
        self._total = total
        self._total_audio_length_sec = total_audio_length_sec
        self._type = type
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaylistResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaylistResponse of this PlaylistResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PlaylistResponse.

        Playlist description.

        :return: The description of this PlaylistResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlaylistResponse.

        Playlist description.

        :param description: The description of this PlaylistResponse.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this PlaylistResponse.

        A 11-character playlist id, which can be used to further fetch detailed playlist metadata via `GET /playlists/{id}`.

        :return: The id of this PlaylistResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaylistResponse.

        A 11-character playlist id, which can be used to further fetch detailed playlist metadata via `GET /playlists/{id}`.

        :param id: The id of this PlaylistResponse.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this PlaylistResponse.

        High resolution image url of the playlist.

        :return: The image of this PlaylistResponse.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this PlaylistResponse.

        High resolution image url of the playlist.

        :param image: The image of this PlaylistResponse.
        :type image: str
        """

        self._image = image

    @property
    def items(self):
        """Gets the items of this PlaylistResponse.

        A list of playlist items.

        :return: The items of this PlaylistResponse.
        :rtype: List[PlaylistItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PlaylistResponse.

        A list of playlist items.

        :param items: The items of this PlaylistResponse.
        :type items: List[PlaylistItem]
        """

        self._items = items

    @property
    def last_timestamp_ms(self):
        """Gets the last_timestamp_ms of this PlaylistResponse.

        Passed to the **last_timestamp_ms** parameter of `GET /playlists/{id}` to paginate through items of that playlist. 

        :return: The last_timestamp_ms of this PlaylistResponse.
        :rtype: int
        """
        return self._last_timestamp_ms

    @last_timestamp_ms.setter
    def last_timestamp_ms(self, last_timestamp_ms):
        """Sets the last_timestamp_ms of this PlaylistResponse.

        Passed to the **last_timestamp_ms** parameter of `GET /playlists/{id}` to paginate through items of that playlist. 

        :param last_timestamp_ms: The last_timestamp_ms of this PlaylistResponse.
        :type last_timestamp_ms: int
        """

        self._last_timestamp_ms = last_timestamp_ms

    @property
    def listennotes_url(self):
        """Gets the listennotes_url of this PlaylistResponse.

        The url of this playlist on ListenNotes.com.

        :return: The listennotes_url of this PlaylistResponse.
        :rtype: str
        """
        return self._listennotes_url

    @listennotes_url.setter
    def listennotes_url(self, listennotes_url):
        """Sets the listennotes_url of this PlaylistResponse.

        The url of this playlist on ListenNotes.com.

        :param listennotes_url: The listennotes_url of this PlaylistResponse.
        :type listennotes_url: str
        """

        self._listennotes_url = listennotes_url

    @property
    def name(self):
        """Gets the name of this PlaylistResponse.

        Playlist name.

        :return: The name of this PlaylistResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlaylistResponse.

        Playlist name.

        :param name: The name of this PlaylistResponse.
        :type name: str
        """

        self._name = name

    @property
    def thumbnail(self):
        """Gets the thumbnail of this PlaylistResponse.

        Low resolution image url of the playlist.

        :return: The thumbnail of this PlaylistResponse.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this PlaylistResponse.

        Low resolution image url of the playlist.

        :param thumbnail: The thumbnail of this PlaylistResponse.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def total(self):
        """Gets the total of this PlaylistResponse.

        Total number of items in this playlist.

        :return: The total of this PlaylistResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PlaylistResponse.

        Total number of items in this playlist.

        :param total: The total of this PlaylistResponse.
        :type total: int
        """

        self._total = total

    @property
    def total_audio_length_sec(self):
        """Gets the total_audio_length_sec of this PlaylistResponse.

        Total audio length of all episodes in this playlist, in seconds. It will have a valid value only when type is **episode_list**. In other words, it will be 0 if type is **podcast_list**.

        :return: The total_audio_length_sec of this PlaylistResponse.
        :rtype: int
        """
        return self._total_audio_length_sec

    @total_audio_length_sec.setter
    def total_audio_length_sec(self, total_audio_length_sec):
        """Sets the total_audio_length_sec of this PlaylistResponse.

        Total audio length of all episodes in this playlist, in seconds. It will have a valid value only when type is **episode_list**. In other words, it will be 0 if type is **podcast_list**.

        :param total_audio_length_sec: The total_audio_length_sec of this PlaylistResponse.
        :type total_audio_length_sec: int
        """

        self._total_audio_length_sec = total_audio_length_sec

    @property
    def type(self):
        """Gets the type of this PlaylistResponse.

        The type of this playlist, which should be either **episode_list** or **podcast_list**. 

        :return: The type of this PlaylistResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlaylistResponse.

        The type of this playlist, which should be either **episode_list** or **podcast_list**. 

        :param type: The type of this PlaylistResponse.
        :type type: str
        """
        allowed_values = ["episode_list", "podcast_list"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def visibility(self):
        """Gets the visibility of this PlaylistResponse.


        :return: The visibility of this PlaylistResponse.
        :rtype: PlaylistVisibilityField
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this PlaylistResponse.


        :param visibility: The visibility of this PlaylistResponse.
        :type visibility: PlaylistVisibilityField
        """

        self._visibility = visibility
