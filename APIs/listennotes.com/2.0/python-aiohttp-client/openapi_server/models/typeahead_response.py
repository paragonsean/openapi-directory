# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.genre import Genre
from openapi_server.models.podcast_typeahead_result import PodcastTypeaheadResult
from openapi_server import util


class TypeaheadResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, genres: List[Genre]=None, podcasts: List[PodcastTypeaheadResult]=None, terms: List[str]=None):
        """TypeaheadResponse - a model defined in OpenAPI

        :param genres: The genres of this TypeaheadResponse.
        :param podcasts: The podcasts of this TypeaheadResponse.
        :param terms: The terms of this TypeaheadResponse.
        """
        self.openapi_types = {
            'genres': List[Genre],
            'podcasts': List[PodcastTypeaheadResult],
            'terms': List[str]
        }

        self.attribute_map = {
            'genres': 'genres',
            'podcasts': 'podcasts',
            'terms': 'terms'
        }

        self._genres = genres
        self._podcasts = podcasts
        self._terms = terms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TypeaheadResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TypeaheadResponse of this TypeaheadResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def genres(self):
        """Gets the genres of this TypeaheadResponse.

        Genre suggestions. It'll show up when the **show_genres** parameter is *1*.

        :return: The genres of this TypeaheadResponse.
        :rtype: List[Genre]
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this TypeaheadResponse.

        Genre suggestions. It'll show up when the **show_genres** parameter is *1*.

        :param genres: The genres of this TypeaheadResponse.
        :type genres: List[Genre]
        """

        self._genres = genres

    @property
    def podcasts(self):
        """Gets the podcasts of this TypeaheadResponse.

        Podcast suggestions. It'll show up when the **show_podcasts** parameter is 1.

        :return: The podcasts of this TypeaheadResponse.
        :rtype: List[PodcastTypeaheadResult]
        """
        return self._podcasts

    @podcasts.setter
    def podcasts(self, podcasts):
        """Sets the podcasts of this TypeaheadResponse.

        Podcast suggestions. It'll show up when the **show_podcasts** parameter is 1.

        :param podcasts: The podcasts of this TypeaheadResponse.
        :type podcasts: List[PodcastTypeaheadResult]
        """

        self._podcasts = podcasts

    @property
    def terms(self):
        """Gets the terms of this TypeaheadResponse.

        Search term suggestions.

        :return: The terms of this TypeaheadResponse.
        :rtype: List[str]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this TypeaheadResponse.

        Search term suggestions.

        :param terms: The terms of this TypeaheadResponse.
        :type terms: List[str]
        """
        if terms is None:
            raise ValueError("Invalid value for `terms`, must not be `None`")

        self._terms = terms
