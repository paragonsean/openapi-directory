# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.podcast_simple import PodcastSimple
from openapi_server import util


class BestPodcastsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_next: bool=None, has_previous: bool=None, id: int=None, listennotes_url: str=None, name: str=None, next_page_number: int=None, page_number: int=None, parent_id: int=None, podcasts: List[PodcastSimple]=None, previous_page_number: int=None, total: int=None):
        """BestPodcastsResponse - a model defined in OpenAPI

        :param has_next: The has_next of this BestPodcastsResponse.
        :param has_previous: The has_previous of this BestPodcastsResponse.
        :param id: The id of this BestPodcastsResponse.
        :param listennotes_url: The listennotes_url of this BestPodcastsResponse.
        :param name: The name of this BestPodcastsResponse.
        :param next_page_number: The next_page_number of this BestPodcastsResponse.
        :param page_number: The page_number of this BestPodcastsResponse.
        :param parent_id: The parent_id of this BestPodcastsResponse.
        :param podcasts: The podcasts of this BestPodcastsResponse.
        :param previous_page_number: The previous_page_number of this BestPodcastsResponse.
        :param total: The total of this BestPodcastsResponse.
        """
        self.openapi_types = {
            'has_next': bool,
            'has_previous': bool,
            'id': int,
            'listennotes_url': str,
            'name': str,
            'next_page_number': int,
            'page_number': int,
            'parent_id': int,
            'podcasts': List[PodcastSimple],
            'previous_page_number': int,
            'total': int
        }

        self.attribute_map = {
            'has_next': 'has_next',
            'has_previous': 'has_previous',
            'id': 'id',
            'listennotes_url': 'listennotes_url',
            'name': 'name',
            'next_page_number': 'next_page_number',
            'page_number': 'page_number',
            'parent_id': 'parent_id',
            'podcasts': 'podcasts',
            'previous_page_number': 'previous_page_number',
            'total': 'total'
        }

        self._has_next = has_next
        self._has_previous = has_previous
        self._id = id
        self._listennotes_url = listennotes_url
        self._name = name
        self._next_page_number = next_page_number
        self._page_number = page_number
        self._parent_id = parent_id
        self._podcasts = podcasts
        self._previous_page_number = previous_page_number
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BestPodcastsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BestPodcastsResponse of this BestPodcastsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_next(self):
        """Gets the has_next of this BestPodcastsResponse.


        :return: The has_next of this BestPodcastsResponse.
        :rtype: bool
        """
        return self._has_next

    @has_next.setter
    def has_next(self, has_next):
        """Sets the has_next of this BestPodcastsResponse.


        :param has_next: The has_next of this BestPodcastsResponse.
        :type has_next: bool
        """
        if has_next is None:
            raise ValueError("Invalid value for `has_next`, must not be `None`")

        self._has_next = has_next

    @property
    def has_previous(self):
        """Gets the has_previous of this BestPodcastsResponse.


        :return: The has_previous of this BestPodcastsResponse.
        :rtype: bool
        """
        return self._has_previous

    @has_previous.setter
    def has_previous(self, has_previous):
        """Sets the has_previous of this BestPodcastsResponse.


        :param has_previous: The has_previous of this BestPodcastsResponse.
        :type has_previous: bool
        """
        if has_previous is None:
            raise ValueError("Invalid value for `has_previous`, must not be `None`")

        self._has_previous = has_previous

    @property
    def id(self):
        """Gets the id of this BestPodcastsResponse.

        The id of this genre

        :return: The id of this BestPodcastsResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BestPodcastsResponse.

        The id of this genre

        :param id: The id of this BestPodcastsResponse.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def listennotes_url(self):
        """Gets the listennotes_url of this BestPodcastsResponse.

        Url of the list of best podcasts on [ListenNotes.com](https://www.ListenNotes.com).

        :return: The listennotes_url of this BestPodcastsResponse.
        :rtype: str
        """
        return self._listennotes_url

    @listennotes_url.setter
    def listennotes_url(self, listennotes_url):
        """Sets the listennotes_url of this BestPodcastsResponse.

        Url of the list of best podcasts on [ListenNotes.com](https://www.ListenNotes.com).

        :param listennotes_url: The listennotes_url of this BestPodcastsResponse.
        :type listennotes_url: str
        """
        if listennotes_url is None:
            raise ValueError("Invalid value for `listennotes_url`, must not be `None`")

        self._listennotes_url = listennotes_url

    @property
    def name(self):
        """Gets the name of this BestPodcastsResponse.

        This genre's name.

        :return: The name of this BestPodcastsResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BestPodcastsResponse.

        This genre's name.

        :param name: The name of this BestPodcastsResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def next_page_number(self):
        """Gets the next_page_number of this BestPodcastsResponse.


        :return: The next_page_number of this BestPodcastsResponse.
        :rtype: int
        """
        return self._next_page_number

    @next_page_number.setter
    def next_page_number(self, next_page_number):
        """Sets the next_page_number of this BestPodcastsResponse.


        :param next_page_number: The next_page_number of this BestPodcastsResponse.
        :type next_page_number: int
        """
        if next_page_number is None:
            raise ValueError("Invalid value for `next_page_number`, must not be `None`")

        self._next_page_number = next_page_number

    @property
    def page_number(self):
        """Gets the page_number of this BestPodcastsResponse.


        :return: The page_number of this BestPodcastsResponse.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this BestPodcastsResponse.


        :param page_number: The page_number of this BestPodcastsResponse.
        :type page_number: int
        """
        if page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")

        self._page_number = page_number

    @property
    def parent_id(self):
        """Gets the parent_id of this BestPodcastsResponse.

        The id of parent genre.

        :return: The parent_id of this BestPodcastsResponse.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this BestPodcastsResponse.

        The id of parent genre.

        :param parent_id: The parent_id of this BestPodcastsResponse.
        :type parent_id: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def podcasts(self):
        """Gets the podcasts of this BestPodcastsResponse.


        :return: The podcasts of this BestPodcastsResponse.
        :rtype: List[PodcastSimple]
        """
        return self._podcasts

    @podcasts.setter
    def podcasts(self, podcasts):
        """Sets the podcasts of this BestPodcastsResponse.


        :param podcasts: The podcasts of this BestPodcastsResponse.
        :type podcasts: List[PodcastSimple]
        """
        if podcasts is None:
            raise ValueError("Invalid value for `podcasts`, must not be `None`")

        self._podcasts = podcasts

    @property
    def previous_page_number(self):
        """Gets the previous_page_number of this BestPodcastsResponse.


        :return: The previous_page_number of this BestPodcastsResponse.
        :rtype: int
        """
        return self._previous_page_number

    @previous_page_number.setter
    def previous_page_number(self, previous_page_number):
        """Sets the previous_page_number of this BestPodcastsResponse.


        :param previous_page_number: The previous_page_number of this BestPodcastsResponse.
        :type previous_page_number: int
        """
        if previous_page_number is None:
            raise ValueError("Invalid value for `previous_page_number`, must not be `None`")

        self._previous_page_number = previous_page_number

    @property
    def total(self):
        """Gets the total of this BestPodcastsResponse.


        :return: The total of this BestPodcastsResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this BestPodcastsResponse.


        :param total: The total of this BestPodcastsResponse.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
