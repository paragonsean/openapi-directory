/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiUsage from '../model/ApiUsage';
import ConvertPrice from '../model/ConvertPrice';
import CountryCodeCheck from '../model/CountryCodeCheck';
import CreateInvoice from '../model/CreateInvoice';
import CurrencyConversion from '../model/CurrencyConversion';
import IPCheck from '../model/IPCheck';
import InvoiceData from '../model/InvoiceData';
import RetrieveInvoice from '../model/RetrieveInvoice';
import UpdateInvoice from '../model/UpdateInvoice';
import UpdateInvoiceArray from '../model/UpdateInvoiceArray';
import VatRates from '../model/VatRates';

/**
* Api service.
* @module api/ApiApi
* @version 1
*/
export default class ApiApi {

    /**
    * Constructs a new ApiApi. 
    * @alias module:api/ApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiUsage operation.
     * @callback module:api/ApiApi~apiUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUsage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check api requests remaining on current subscription plan
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] The default response type is application/json if you would like to receive an XML response then set this to XML
     * @param {module:api/ApiApi~apiUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUsage}
     */
    apiUsage(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Response-Type': opts['responseType']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApiUsage;
      return this.apiClient.callApi(
        '/usage-check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertPrice operation.
     * @callback module:api/ApiApi~convertPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConvertPrice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a price to or from VAT price.
     * @param {String} code The 2 digit country code
     * @param {Number} price The price you want converting
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] The default response type is application/json if you would like to receive an XML response then set this to XML
     * @param {String} [countryRate] The VAT rate to get the price for. Default: standard
     * @param {String} [type] Optional, if the price is including VAT set the type to 'incl'. Otherwise the default is assumed as excluding VAT already, 'excl'
     * @param {module:api/ApiApi~convertPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConvertPrice}
     */
    convertPrice(code, price, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling convertPrice");
      }
      // verify the required parameter 'price' is set
      if (price === undefined || price === null) {
        throw new Error("Missing the required parameter 'price' when calling convertPrice");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code,
        'country_rate': opts['countryRate'],
        'price': price,
        'type': opts['type']
      };
      let headerParams = {
        'Response-Type': opts['responseType']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ConvertPrice;
      return this.apiClient.callApi(
        '/vat-price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countryCodeCheck operation.
     * @callback module:api/ApiApi~countryCodeCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountryCodeCheck} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a countries VAT rates by its 2 digit country code
     * @param {String} code The 2 digit country code
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] The default response type is application/json if you would like to receive an XML response then set this to XML
     * @param {module:api/ApiApi~countryCodeCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountryCodeCheck}
     */
    countryCodeCheck(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling countryCodeCheck");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code
      };
      let headerParams = {
        'Response-Type': opts['responseType']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CountryCodeCheck;
      return this.apiClient.callApi(
        '/country-code-check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInvoice operation.
     * @callback module:api/ApiApi~createInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a VAT invoice
     * @param {module:model/InvoiceData} body Enter invoice data as JSON
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] The default response type is application/json if you would like to receive an XML response then set this to XML
     * @param {module:api/ApiApi~createInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInvoice}
     */
    createInvoice(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createInvoice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Response-Type': opts['responseType']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CreateInvoice;
      return this.apiClient.callApi(
        '/invoice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currencyConversion operation.
     * @callback module:api/ApiApi~currencyConversionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyConversion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a currency
     * @param {String} currencyFrom The currency code you are converting from
     * @param {String} currencyTo The currency code you are converting to
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] The default response type is application/json if you would like to receive an XML response then set this to XML
     * @param {Number} [amount] Optional, an amount you are wanting to convert. Leave blank to just get the current rate
     * @param {module:api/ApiApi~currencyConversionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyConversion}
     */
    currencyConversion(currencyFrom, currencyTo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'currencyFrom' is set
      if (currencyFrom === undefined || currencyFrom === null) {
        throw new Error("Missing the required parameter 'currencyFrom' when calling currencyConversion");
      }
      // verify the required parameter 'currencyTo' is set
      if (currencyTo === undefined || currencyTo === null) {
        throw new Error("Missing the required parameter 'currencyTo' when calling currencyConversion");
      }

      let pathParams = {
      };
      let queryParams = {
        'currency_from': currencyFrom,
        'currency_to': currencyTo,
        'amount': opts['amount']
      };
      let headerParams = {
        'Response-Type': opts['responseType']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CurrencyConversion;
      return this.apiClient.callApi(
        '/currency-conversion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoice operation.
     * @callback module:api/ApiApi~getInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an invoice
     * @param {Number} id Enter the invoice id
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] The default response type is application/json if you would like to receive an XML response then set this to XML
     * @param {module:api/ApiApi~getInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveInvoice}
     */
    getInvoice(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvoice");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Response-Type': opts['responseType']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RetrieveInvoice;
      return this.apiClient.callApi(
        '/invoice/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceDelete operation.
     * @callback module:api/ApiApi~invoiceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an invoice
     * @param {Number} id Enter an invoice id
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] The default response type is application/json if you would like to receive an XML response then set this to XML
     * @param {module:api/ApiApi~invoiceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    invoiceDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling invoiceDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Response-Type': opts['responseType']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/invoice/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceUpdate operation.
     * @callback module:api/ApiApi~invoiceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing invoice
     * @param {Number} id Enter an invoice id
     * @param {module:model/UpdateInvoiceArray} body Enter invoice data as JSON
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] The default response type is application/json if you would like to receive an XML response then set this to XML
     * @param {module:api/ApiApi~invoiceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateInvoice}
     */
    invoiceUpdate(id, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling invoiceUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling invoiceUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Response-Type': opts['responseType']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UpdateInvoice;
      return this.apiClient.callApi(
        '/invoice/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipCheck operation.
     * @callback module:api/ApiApi~ipCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPCheck} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a countries VAT rates from an IP address
     * @param {String} address The IP address to search against
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] The default response type is application/json if you would like to receive an XML response then set this to XML
     * @param {module:api/ApiApi~ipCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPCheck}
     */
    ipCheck(address, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling ipCheck");
      }

      let pathParams = {
      };
      let queryParams = {
        'address': address
      };
      let headerParams = {
        'Response-Type': opts['responseType']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IPCheck;
      return this.apiClient.callApi(
        '/ip-check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vatNumberValidate operation.
     * @callback module:api/ApiApi~vatNumberValidateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate a VAT number
     * <p>We highly recommend if you are able, to check a VAT number on your end first to save wasted API lookups. It maybe that your customer has simply entered the wrong format. <a href='http://www.braemoor.co.uk/software/vat.shtml' target='_blank'>Heres a client side way to check the format using Javascript</a></p>
     * @param {String} vatid The VAT number to validate
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] The default response type is application/json if you would like to receive an XML response then set this to XML
     * @param {module:api/ApiApi~vatNumberValidateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vatNumberValidate(vatid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vatid' is set
      if (vatid === undefined || vatid === null) {
        throw new Error("Missing the required parameter 'vatid' when calling vatNumberValidate");
      }

      let pathParams = {
      };
      let queryParams = {
        'vatid': vatid
      };
      let headerParams = {
        'Response-Type': opts['responseType']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vat-number-check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vatRates operation.
     * @callback module:api/ApiApi~vatRatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VatRates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all current EU VAT rates
     * @param {Object} opts Optional parameters
     * @param {String} [responseType] The default response type is application/json if you would like to receive an XML response then set this to XML
     * @param {module:api/ApiApi~vatRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VatRates}
     */
    vatRates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Response-Type': opts['responseType']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = VatRates;
      return this.apiClient.callApi(
        '/vat-rates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
