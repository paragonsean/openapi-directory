/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ApiUsage from './model/ApiUsage';
import ConvertPrice from './model/ConvertPrice';
import CountryCodeCheck from './model/CountryCodeCheck';
import CountryData from './model/CountryData';
import CountryRates from './model/CountryRates';
import CreateInvoice from './model/CreateInvoice';
import CurrencyConversion from './model/CurrencyConversion';
import IPCheck from './model/IPCheck';
import InvoiceArray from './model/InvoiceArray';
import InvoiceData from './model/InvoiceData';
import InvoiceItems from './model/InvoiceItems';
import Parking from './model/Parking';
import Reduced from './model/Reduced';
import ReducedAlt from './model/ReducedAlt';
import RetrieveInvoice from './model/RetrieveInvoice';
import RetrieveInvoiceArray from './model/RetrieveInvoiceArray';
import Standard from './model/Standard';
import SuperReduced from './model/SuperReduced';
import UpdateInvoice from './model/UpdateInvoice';
import UpdateInvoiceArray from './model/UpdateInvoiceArray';
import VatRates from './model/VatRates';
import VatRatesCountries from './model/VatRatesCountries';
import ApiApi from './api/ApiApi';


/**
* A developer friendly API to help your business achieve VAT compliance.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var VatApi = require('index'); // See note below*.
* var xxxSvc = new VatApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new VatApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new VatApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new VatApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ApiUsage model constructor.
     * @property {module:model/ApiUsage}
     */
    ApiUsage,

    /**
     * The ConvertPrice model constructor.
     * @property {module:model/ConvertPrice}
     */
    ConvertPrice,

    /**
     * The CountryCodeCheck model constructor.
     * @property {module:model/CountryCodeCheck}
     */
    CountryCodeCheck,

    /**
     * The CountryData model constructor.
     * @property {module:model/CountryData}
     */
    CountryData,

    /**
     * The CountryRates model constructor.
     * @property {module:model/CountryRates}
     */
    CountryRates,

    /**
     * The CreateInvoice model constructor.
     * @property {module:model/CreateInvoice}
     */
    CreateInvoice,

    /**
     * The CurrencyConversion model constructor.
     * @property {module:model/CurrencyConversion}
     */
    CurrencyConversion,

    /**
     * The IPCheck model constructor.
     * @property {module:model/IPCheck}
     */
    IPCheck,

    /**
     * The InvoiceArray model constructor.
     * @property {module:model/InvoiceArray}
     */
    InvoiceArray,

    /**
     * The InvoiceData model constructor.
     * @property {module:model/InvoiceData}
     */
    InvoiceData,

    /**
     * The InvoiceItems model constructor.
     * @property {module:model/InvoiceItems}
     */
    InvoiceItems,

    /**
     * The Parking model constructor.
     * @property {module:model/Parking}
     */
    Parking,

    /**
     * The Reduced model constructor.
     * @property {module:model/Reduced}
     */
    Reduced,

    /**
     * The ReducedAlt model constructor.
     * @property {module:model/ReducedAlt}
     */
    ReducedAlt,

    /**
     * The RetrieveInvoice model constructor.
     * @property {module:model/RetrieveInvoice}
     */
    RetrieveInvoice,

    /**
     * The RetrieveInvoiceArray model constructor.
     * @property {module:model/RetrieveInvoiceArray}
     */
    RetrieveInvoiceArray,

    /**
     * The Standard model constructor.
     * @property {module:model/Standard}
     */
    Standard,

    /**
     * The SuperReduced model constructor.
     * @property {module:model/SuperReduced}
     */
    SuperReduced,

    /**
     * The UpdateInvoice model constructor.
     * @property {module:model/UpdateInvoice}
     */
    UpdateInvoice,

    /**
     * The UpdateInvoiceArray model constructor.
     * @property {module:model/UpdateInvoiceArray}
     */
    UpdateInvoiceArray,

    /**
     * The VatRates model constructor.
     * @property {module:model/VatRates}
     */
    VatRates,

    /**
     * The VatRatesCountries model constructor.
     * @property {module:model/VatRatesCountries}
     */
    VatRatesCountries,

    /**
    * The ApiApi service constructor.
    * @property {module:api/ApiApi}
    */
    ApiApi
};
