/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InvoiceItems from './InvoiceItems';

/**
 * The InvoiceData model module.
 * @module model/InvoiceData
 * @version 1
 */
class InvoiceData {
    /**
     * Constructs a new <code>InvoiceData</code>.
     * @alias module:model/InvoiceData
     * @param businessAddress {String} Your business address
     * @param businessName {String} Your business name
     * @param currencyCode {String} 3 character currency code for invoice
     * @param items {Array.<module:model/InvoiceItems>} An array of your invoice items
     * @param type {String} The type of invoice. Either 'sale' or 'refund'
     * @param vatNumber {String} Your VAT number
     */
    constructor(businessAddress, businessName, currencyCode, items, type, vatNumber) { 
        
        InvoiceData.initialize(this, businessAddress, businessName, currencyCode, items, type, vatNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, businessAddress, businessName, currencyCode, items, type, vatNumber) { 
        obj['business_address'] = businessAddress;
        obj['business_name'] = businessName;
        obj['currency_code'] = currencyCode;
        obj['items'] = items;
        obj['type'] = type;
        obj['vat_number'] = vatNumber;
    }

    /**
     * Constructs a <code>InvoiceData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvoiceData} obj Optional instance to populate.
     * @return {module:model/InvoiceData} The populated <code>InvoiceData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvoiceData();

            if (data.hasOwnProperty('business_address')) {
                obj['business_address'] = ApiClient.convertToType(data['business_address'], 'String');
            }
            if (data.hasOwnProperty('business_name')) {
                obj['business_name'] = ApiClient.convertToType(data['business_name'], 'String');
            }
            if (data.hasOwnProperty('conversion_rate')) {
                obj['conversion_rate'] = ApiClient.convertToType(data['conversion_rate'], 'Number');
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('currency_code_conversion')) {
                obj['currency_code_conversion'] = ApiClient.convertToType(data['currency_code_conversion'], 'String');
            }
            if (data.hasOwnProperty('customer_address')) {
                obj['customer_address'] = ApiClient.convertToType(data['customer_address'], 'String');
            }
            if (data.hasOwnProperty('customer_name')) {
                obj['customer_name'] = ApiClient.convertToType(data['customer_name'], 'String');
            }
            if (data.hasOwnProperty('customer_vat_number')) {
                obj['customer_vat_number'] = ApiClient.convertToType(data['customer_vat_number'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('discount_rate')) {
                obj['discount_rate'] = ApiClient.convertToType(data['discount_rate'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [InvoiceItems]);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('price_type')) {
                obj['price_type'] = ApiClient.convertToType(data['price_type'], 'String');
            }
            if (data.hasOwnProperty('tax_point')) {
                obj['tax_point'] = ApiClient.convertToType(data['tax_point'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vat_number')) {
                obj['vat_number'] = ApiClient.convertToType(data['vat_number'], 'String');
            }
            if (data.hasOwnProperty('zero_rated')) {
                obj['zero_rated'] = ApiClient.convertToType(data['zero_rated'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvoiceData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvoiceData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InvoiceData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['business_address'] && !(typeof data['business_address'] === 'string' || data['business_address'] instanceof String)) {
            throw new Error("Expected the field `business_address` to be a primitive type in the JSON string but got " + data['business_address']);
        }
        // ensure the json data is a string
        if (data['business_name'] && !(typeof data['business_name'] === 'string' || data['business_name'] instanceof String)) {
            throw new Error("Expected the field `business_name` to be a primitive type in the JSON string but got " + data['business_name']);
        }
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['currency_code_conversion'] && !(typeof data['currency_code_conversion'] === 'string' || data['currency_code_conversion'] instanceof String)) {
            throw new Error("Expected the field `currency_code_conversion` to be a primitive type in the JSON string but got " + data['currency_code_conversion']);
        }
        // ensure the json data is a string
        if (data['customer_address'] && !(typeof data['customer_address'] === 'string' || data['customer_address'] instanceof String)) {
            throw new Error("Expected the field `customer_address` to be a primitive type in the JSON string but got " + data['customer_address']);
        }
        // ensure the json data is a string
        if (data['customer_name'] && !(typeof data['customer_name'] === 'string' || data['customer_name'] instanceof String)) {
            throw new Error("Expected the field `customer_name` to be a primitive type in the JSON string but got " + data['customer_name']);
        }
        // ensure the json data is a string
        if (data['customer_vat_number'] && !(typeof data['customer_vat_number'] === 'string' || data['customer_vat_number'] instanceof String)) {
            throw new Error("Expected the field `customer_vat_number` to be a primitive type in the JSON string but got " + data['customer_vat_number']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['discount_rate'] && !(typeof data['discount_rate'] === 'string' || data['discount_rate'] instanceof String)) {
            throw new Error("Expected the field `discount_rate` to be a primitive type in the JSON string but got " + data['discount_rate']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                InvoiceItems.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['price_type'] && !(typeof data['price_type'] === 'string' || data['price_type'] instanceof String)) {
            throw new Error("Expected the field `price_type` to be a primitive type in the JSON string but got " + data['price_type']);
        }
        // ensure the json data is a string
        if (data['tax_point'] && !(typeof data['tax_point'] === 'string' || data['tax_point'] instanceof String)) {
            throw new Error("Expected the field `tax_point` to be a primitive type in the JSON string but got " + data['tax_point']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['vat_number'] && !(typeof data['vat_number'] === 'string' || data['vat_number'] instanceof String)) {
            throw new Error("Expected the field `vat_number` to be a primitive type in the JSON string but got " + data['vat_number']);
        }
        // ensure the json data is a string
        if (data['zero_rated'] && !(typeof data['zero_rated'] === 'string' || data['zero_rated'] instanceof String)) {
            throw new Error("Expected the field `zero_rated` to be a primitive type in the JSON string but got " + data['zero_rated']);
        }

        return true;
    }


}

InvoiceData.RequiredProperties = ["business_address", "business_name", "currency_code", "items", "type", "vat_number"];

/**
 * Your business address
 * @member {String} business_address
 */
InvoiceData.prototype['business_address'] = undefined;

/**
 * Your business name
 * @member {String} business_name
 */
InvoiceData.prototype['business_name'] = undefined;

/**
 * The rate of conversion at time of supply
 * @member {Number} conversion_rate
 */
InvoiceData.prototype['conversion_rate'] = undefined;

/**
 * 3 character currency code for invoice
 * @member {String} currency_code
 */
InvoiceData.prototype['currency_code'] = undefined;

/**
 * 3 character currency code to be converted from original transaction currency
 * @member {String} currency_code_conversion
 */
InvoiceData.prototype['currency_code_conversion'] = undefined;

/**
 * Your customers address
 * @member {String} customer_address
 */
InvoiceData.prototype['customer_address'] = undefined;

/**
 * Your customers name or trading name
 * @member {String} customer_name
 */
InvoiceData.prototype['customer_name'] = undefined;

/**
 * Optional customers VAT number
 * @member {String} customer_vat_number
 */
InvoiceData.prototype['customer_vat_number'] = undefined;

/**
 * The date the invoice was issued
 * @member {String} date
 */
InvoiceData.prototype['date'] = undefined;

/**
 * The discount rate per item
 * @member {String} discount_rate
 */
InvoiceData.prototype['discount_rate'] = undefined;

/**
 * An array of your invoice items
 * @member {Array.<module:model/InvoiceItems>} items
 */
InvoiceData.prototype['items'] = undefined;

/**
 * Add a note to the invoice.
 * @member {String} notes
 */
InvoiceData.prototype['notes'] = undefined;

/**
 * Optional, if the price is including VAT set the type to 'incl'. Otherwise the default is assumed as excluding VAT already, 'excl'
 * @member {String} price_type
 */
InvoiceData.prototype['price_type'] = undefined;

/**
 * (or 'time of supply') if this is different from the invoice date
 * @member {String} tax_point
 */
InvoiceData.prototype['tax_point'] = undefined;

/**
 * The type of invoice. Either 'sale' or 'refund'
 * @member {String} type
 */
InvoiceData.prototype['type'] = undefined;

/**
 * Your VAT number
 * @member {String} vat_number
 */
InvoiceData.prototype['vat_number'] = undefined;

/**
 * To Zero-Rate the VAT, set to true.
 * @member {String} zero_rated
 */
InvoiceData.prototype['zero_rated'] = undefined;






export default InvoiceData;

