/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConvertPrice model module.
 * @module model/ConvertPrice
 * @version 1
 */
class ConvertPrice {
    /**
     * Constructs a new <code>ConvertPrice</code>.
     * @alias module:model/ConvertPrice
     * @param countryCode {String} The 2 digit country code
     * @param countryRate {String} The country_rate
     * @param priceExclVat {Number} The price excluding VAT
     * @param priceInclVat {Number} The price including VAT
     * @param rate {Number} The rate % for the country_rate
     * @param status {Number} Response code
     * @param vat {Number} The total amount of VAT applied
     */
    constructor(countryCode, countryRate, priceExclVat, priceInclVat, rate, status, vat) { 
        
        ConvertPrice.initialize(this, countryCode, countryRate, priceExclVat, priceInclVat, rate, status, vat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, countryCode, countryRate, priceExclVat, priceInclVat, rate, status, vat) { 
        obj['country_code'] = countryCode;
        obj['country_rate'] = countryRate;
        obj['price_excl_vat'] = priceExclVat;
        obj['price_incl_vat'] = priceInclVat;
        obj['rate'] = rate;
        obj['status'] = status;
        obj['vat'] = vat;
    }

    /**
     * Constructs a <code>ConvertPrice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConvertPrice} obj Optional instance to populate.
     * @return {module:model/ConvertPrice} The populated <code>ConvertPrice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConvertPrice();

            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('country_rate')) {
                obj['country_rate'] = ApiClient.convertToType(data['country_rate'], 'String');
            }
            if (data.hasOwnProperty('price_excl_vat')) {
                obj['price_excl_vat'] = ApiClient.convertToType(data['price_excl_vat'], 'Number');
            }
            if (data.hasOwnProperty('price_incl_vat')) {
                obj['price_incl_vat'] = ApiClient.convertToType(data['price_incl_vat'], 'Number');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('vat')) {
                obj['vat'] = ApiClient.convertToType(data['vat'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConvertPrice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConvertPrice</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConvertPrice.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['country_rate'] && !(typeof data['country_rate'] === 'string' || data['country_rate'] instanceof String)) {
            throw new Error("Expected the field `country_rate` to be a primitive type in the JSON string but got " + data['country_rate']);
        }

        return true;
    }


}

ConvertPrice.RequiredProperties = ["country_code", "country_rate", "price_excl_vat", "price_incl_vat", "rate", "status", "vat"];

/**
 * The 2 digit country code
 * @member {String} country_code
 */
ConvertPrice.prototype['country_code'] = undefined;

/**
 * The country_rate
 * @member {String} country_rate
 */
ConvertPrice.prototype['country_rate'] = undefined;

/**
 * The price excluding VAT
 * @member {Number} price_excl_vat
 */
ConvertPrice.prototype['price_excl_vat'] = undefined;

/**
 * The price including VAT
 * @member {Number} price_incl_vat
 */
ConvertPrice.prototype['price_incl_vat'] = undefined;

/**
 * The rate % for the country_rate
 * @member {Number} rate
 */
ConvertPrice.prototype['rate'] = undefined;

/**
 * Response code
 * @member {Number} status
 */
ConvertPrice.prototype['status'] = undefined;

/**
 * The total amount of VAT applied
 * @member {Number} vat
 */
ConvertPrice.prototype['vat'] = undefined;






export default ConvertPrice;

