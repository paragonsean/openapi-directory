/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CurrencyConversion model module.
 * @module model/CurrencyConversion
 * @version 1
 */
class CurrencyConversion {
    /**
     * Constructs a new <code>CurrencyConversion</code>.
     * @alias module:model/CurrencyConversion
     * @param currencyFrom {String} The currency code you are converting from
     * @param currencyTo {Number} The currency code you are converting to
     * @param rate {String} The rate according to HMRC at time of sale
     * @param status {Number} Response code
     */
    constructor(currencyFrom, currencyTo, rate, status) { 
        
        CurrencyConversion.initialize(this, currencyFrom, currencyTo, rate, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currencyFrom, currencyTo, rate, status) { 
        obj['currency_from'] = currencyFrom;
        obj['currency_to'] = currencyTo;
        obj['rate'] = rate;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>CurrencyConversion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CurrencyConversion} obj Optional instance to populate.
     * @return {module:model/CurrencyConversion} The populated <code>CurrencyConversion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CurrencyConversion();

            if (data.hasOwnProperty('amount_from')) {
                obj['amount_from'] = ApiClient.convertToType(data['amount_from'], 'String');
            }
            if (data.hasOwnProperty('amount_to')) {
                obj['amount_to'] = ApiClient.convertToType(data['amount_to'], 'String');
            }
            if (data.hasOwnProperty('currency_from')) {
                obj['currency_from'] = ApiClient.convertToType(data['currency_from'], 'String');
            }
            if (data.hasOwnProperty('currency_to')) {
                obj['currency_to'] = ApiClient.convertToType(data['currency_to'], 'Number');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CurrencyConversion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CurrencyConversion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CurrencyConversion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['amount_from'] && !(typeof data['amount_from'] === 'string' || data['amount_from'] instanceof String)) {
            throw new Error("Expected the field `amount_from` to be a primitive type in the JSON string but got " + data['amount_from']);
        }
        // ensure the json data is a string
        if (data['amount_to'] && !(typeof data['amount_to'] === 'string' || data['amount_to'] instanceof String)) {
            throw new Error("Expected the field `amount_to` to be a primitive type in the JSON string but got " + data['amount_to']);
        }
        // ensure the json data is a string
        if (data['currency_from'] && !(typeof data['currency_from'] === 'string' || data['currency_from'] instanceof String)) {
            throw new Error("Expected the field `currency_from` to be a primitive type in the JSON string but got " + data['currency_from']);
        }
        // ensure the json data is a string
        if (data['rate'] && !(typeof data['rate'] === 'string' || data['rate'] instanceof String)) {
            throw new Error("Expected the field `rate` to be a primitive type in the JSON string but got " + data['rate']);
        }

        return true;
    }


}

CurrencyConversion.RequiredProperties = ["currency_from", "currency_to", "rate", "status"];

/**
 * The amount you are converting from
 * @member {String} amount_from
 */
CurrencyConversion.prototype['amount_from'] = undefined;

/**
 * The result amount you have converted to
 * @member {String} amount_to
 */
CurrencyConversion.prototype['amount_to'] = undefined;

/**
 * The currency code you are converting from
 * @member {String} currency_from
 */
CurrencyConversion.prototype['currency_from'] = undefined;

/**
 * The currency code you are converting to
 * @member {Number} currency_to
 */
CurrencyConversion.prototype['currency_to'] = undefined;

/**
 * The rate according to HMRC at time of sale
 * @member {String} rate
 */
CurrencyConversion.prototype['rate'] = undefined;

/**
 * Response code
 * @member {Number} status
 */
CurrencyConversion.prototype['status'] = undefined;






export default CurrencyConversion;

