/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CountryRates from './CountryRates';

/**
 * The CountryData model module.
 * @module model/CountryData
 * @version 1
 */
class CountryData {
    /**
     * Constructs a new <code>CountryData</code>.
     * @alias module:model/CountryData
     * @param country {String} The country name
     * @param rates {module:model/CountryRates} 
     */
    constructor(country, rates) { 
        
        CountryData.initialize(this, country, rates);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, rates) { 
        obj['country'] = country;
        obj['rates'] = rates;
    }

    /**
     * Constructs a <code>CountryData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CountryData} obj Optional instance to populate.
     * @return {module:model/CountryData} The populated <code>CountryData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CountryData();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('rates')) {
                obj['rates'] = CountryRates.constructFromObject(data['rates']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CountryData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CountryData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CountryData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // validate the optional field `rates`
        if (data['rates']) { // data not null
          CountryRates.validateJSON(data['rates']);
        }

        return true;
    }


}

CountryData.RequiredProperties = ["country", "rates"];

/**
 * The country name
 * @member {String} country
 */
CountryData.prototype['country'] = undefined;

/**
 * @member {module:model/CountryRates} rates
 */
CountryData.prototype['rates'] = undefined;






export default CountryData;

