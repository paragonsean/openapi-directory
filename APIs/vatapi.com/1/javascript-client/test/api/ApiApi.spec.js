/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VatApi);
  }
}(this, function(expect, VatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VatApi.ApiApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApiApi', function() {
    describe('apiUsage', function() {
      it('should call apiUsage successfully', function(done) {
        //uncomment below and update the code to test apiUsage
        //instance.apiUsage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertPrice', function() {
      it('should call convertPrice successfully', function(done) {
        //uncomment below and update the code to test convertPrice
        //instance.convertPrice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('countryCodeCheck', function() {
      it('should call countryCodeCheck successfully', function(done) {
        //uncomment below and update the code to test countryCodeCheck
        //instance.countryCodeCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createInvoice', function() {
      it('should call createInvoice successfully', function(done) {
        //uncomment below and update the code to test createInvoice
        //instance.createInvoice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('currencyConversion', function() {
      it('should call currencyConversion successfully', function(done) {
        //uncomment below and update the code to test currencyConversion
        //instance.currencyConversion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInvoice', function() {
      it('should call getInvoice successfully', function(done) {
        //uncomment below and update the code to test getInvoice
        //instance.getInvoice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('invoiceDelete', function() {
      it('should call invoiceDelete successfully', function(done) {
        //uncomment below and update the code to test invoiceDelete
        //instance.invoiceDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('invoiceUpdate', function() {
      it('should call invoiceUpdate successfully', function(done) {
        //uncomment below and update the code to test invoiceUpdate
        //instance.invoiceUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipCheck', function() {
      it('should call ipCheck successfully', function(done) {
        //uncomment below and update the code to test ipCheck
        //instance.ipCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vatNumberValidate', function() {
      it('should call vatNumberValidate successfully', function(done) {
        //uncomment below and update the code to test vatNumberValidate
        //instance.vatNumberValidate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vatRates', function() {
      it('should call vatRates successfully', function(done) {
        //uncomment below and update the code to test vatRates
        //instance.vatRates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
