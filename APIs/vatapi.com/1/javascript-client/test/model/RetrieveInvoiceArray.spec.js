/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VatApi);
  }
}(this, function(expect, VatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VatApi.RetrieveInvoiceArray();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RetrieveInvoiceArray', function() {
    it('should create an instance of RetrieveInvoiceArray', function() {
      // uncomment below and update the code to test RetrieveInvoiceArray
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be.a(VatApi.RetrieveInvoiceArray);
    });

    it('should have the property businessAddress (base name: "business_address")', function() {
      // uncomment below and update the code to test the property businessAddress
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property businessName (base name: "business_name")', function() {
      // uncomment below and update the code to test the property businessName
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property conversionRate (base name: "conversion_rate")', function() {
      // uncomment below and update the code to test the property conversionRate
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currency_code")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property currencyCodeConversion (base name: "currency_code_conversion")', function() {
      // uncomment below and update the code to test the property currencyCodeConversion
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property customerAddress (base name: "customer_address")', function() {
      // uncomment below and update the code to test the property customerAddress
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property customerName (base name: "customer_name")', function() {
      // uncomment below and update the code to test the property customerName
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property customerVatNumber (base name: "customer_vat_number")', function() {
      // uncomment below and update the code to test the property customerVatNumber
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property date (base name: "date")', function() {
      // uncomment below and update the code to test the property date
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property discountRate (base name: "discount_rate")', function() {
      // uncomment below and update the code to test the property discountRate
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property discountTotal (base name: "discount_total")', function() {
      // uncomment below and update the code to test the property discountTotal
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property invoiceUrl (base name: "invoice_url")', function() {
      // uncomment below and update the code to test the property invoiceUrl
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property logoUrl (base name: "logo_url")', function() {
      // uncomment below and update the code to test the property logoUrl
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property priceType (base name: "price_type")', function() {
      // uncomment below and update the code to test the property priceType
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property subtotal (base name: "subtotal")', function() {
      // uncomment below and update the code to test the property subtotal
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property taxPoint (base name: "tax_point")', function() {
      // uncomment below and update the code to test the property taxPoint
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property vatNumber (base name: "vat_number")', function() {
      // uncomment below and update the code to test the property vatNumber
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property vatTotal (base name: "vat_total")', function() {
      // uncomment below and update the code to test the property vatTotal
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

    it('should have the property zeroRated (base name: "zero_rated")', function() {
      // uncomment below and update the code to test the property zeroRated
      //var instance = new VatApi.RetrieveInvoiceArray();
      //expect(instance).to.be();
    });

  });

}));
