# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_items import InvoiceItems
from openapi_server import util


class InvoiceArray(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_address: str=None, business_name: str=None, conversion_rate: int=None, currency_code: str=None, currency_code_conversion: str=None, customer_address: str=None, customer_name: str=None, customer_vat_number: str=None, _date: str=None, discount_rate: int=None, discount_total: int=None, invoice_number: int=None, invoice_url: str=None, items: List[InvoiceItems]=None, logo_url: str=None, notes: str=None, subtotal: int=None, tax_point: str=None, total: int=None, type: str=None, vat_number: str=None, vat_total: int=None):
        """InvoiceArray - a model defined in OpenAPI

        :param business_address: The business_address of this InvoiceArray.
        :param business_name: The business_name of this InvoiceArray.
        :param conversion_rate: The conversion_rate of this InvoiceArray.
        :param currency_code: The currency_code of this InvoiceArray.
        :param currency_code_conversion: The currency_code_conversion of this InvoiceArray.
        :param customer_address: The customer_address of this InvoiceArray.
        :param customer_name: The customer_name of this InvoiceArray.
        :param customer_vat_number: The customer_vat_number of this InvoiceArray.
        :param _date: The _date of this InvoiceArray.
        :param discount_rate: The discount_rate of this InvoiceArray.
        :param discount_total: The discount_total of this InvoiceArray.
        :param invoice_number: The invoice_number of this InvoiceArray.
        :param invoice_url: The invoice_url of this InvoiceArray.
        :param items: The items of this InvoiceArray.
        :param logo_url: The logo_url of this InvoiceArray.
        :param notes: The notes of this InvoiceArray.
        :param subtotal: The subtotal of this InvoiceArray.
        :param tax_point: The tax_point of this InvoiceArray.
        :param total: The total of this InvoiceArray.
        :param type: The type of this InvoiceArray.
        :param vat_number: The vat_number of this InvoiceArray.
        :param vat_total: The vat_total of this InvoiceArray.
        """
        self.openapi_types = {
            'business_address': str,
            'business_name': str,
            'conversion_rate': int,
            'currency_code': str,
            'currency_code_conversion': str,
            'customer_address': str,
            'customer_name': str,
            'customer_vat_number': str,
            '_date': str,
            'discount_rate': int,
            'discount_total': int,
            'invoice_number': int,
            'invoice_url': str,
            'items': List[InvoiceItems],
            'logo_url': str,
            'notes': str,
            'subtotal': int,
            'tax_point': str,
            'total': int,
            'type': str,
            'vat_number': str,
            'vat_total': int
        }

        self.attribute_map = {
            'business_address': 'business_address',
            'business_name': 'business_name',
            'conversion_rate': 'conversion_rate',
            'currency_code': 'currency_code',
            'currency_code_conversion': 'currency_code_conversion',
            'customer_address': 'customer_address',
            'customer_name': 'customer_name',
            'customer_vat_number': 'customer_vat_number',
            '_date': 'date',
            'discount_rate': 'discount_rate',
            'discount_total': 'discount_total',
            'invoice_number': 'invoice_number',
            'invoice_url': 'invoice_url',
            'items': 'items',
            'logo_url': 'logo_url',
            'notes': 'notes',
            'subtotal': 'subtotal',
            'tax_point': 'tax_point',
            'total': 'total',
            'type': 'type',
            'vat_number': 'vat_number',
            'vat_total': 'vat_total'
        }

        self._business_address = business_address
        self._business_name = business_name
        self._conversion_rate = conversion_rate
        self._currency_code = currency_code
        self._currency_code_conversion = currency_code_conversion
        self._customer_address = customer_address
        self._customer_name = customer_name
        self._customer_vat_number = customer_vat_number
        self.__date = _date
        self._discount_rate = discount_rate
        self._discount_total = discount_total
        self._invoice_number = invoice_number
        self._invoice_url = invoice_url
        self._items = items
        self._logo_url = logo_url
        self._notes = notes
        self._subtotal = subtotal
        self._tax_point = tax_point
        self._total = total
        self._type = type
        self._vat_number = vat_number
        self._vat_total = vat_total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceArray':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invoice_Array of this InvoiceArray.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_address(self):
        """Gets the business_address of this InvoiceArray.

        Your business address

        :return: The business_address of this InvoiceArray.
        :rtype: str
        """
        return self._business_address

    @business_address.setter
    def business_address(self, business_address):
        """Sets the business_address of this InvoiceArray.

        Your business address

        :param business_address: The business_address of this InvoiceArray.
        :type business_address: str
        """
        if business_address is None:
            raise ValueError("Invalid value for `business_address`, must not be `None`")

        self._business_address = business_address

    @property
    def business_name(self):
        """Gets the business_name of this InvoiceArray.

        Your business name

        :return: The business_name of this InvoiceArray.
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this InvoiceArray.

        Your business name

        :param business_name: The business_name of this InvoiceArray.
        :type business_name: str
        """
        if business_name is None:
            raise ValueError("Invalid value for `business_name`, must not be `None`")

        self._business_name = business_name

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this InvoiceArray.

        The rate of conversion at time of supply

        :return: The conversion_rate of this InvoiceArray.
        :rtype: int
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this InvoiceArray.

        The rate of conversion at time of supply

        :param conversion_rate: The conversion_rate of this InvoiceArray.
        :type conversion_rate: int
        """

        self._conversion_rate = conversion_rate

    @property
    def currency_code(self):
        """Gets the currency_code of this InvoiceArray.

        3 character currency code for invoice

        :return: The currency_code of this InvoiceArray.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this InvoiceArray.

        3 character currency code for invoice

        :param currency_code: The currency_code of this InvoiceArray.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def currency_code_conversion(self):
        """Gets the currency_code_conversion of this InvoiceArray.

        3 character currency code to be converted from original transaction currency

        :return: The currency_code_conversion of this InvoiceArray.
        :rtype: str
        """
        return self._currency_code_conversion

    @currency_code_conversion.setter
    def currency_code_conversion(self, currency_code_conversion):
        """Sets the currency_code_conversion of this InvoiceArray.

        3 character currency code to be converted from original transaction currency

        :param currency_code_conversion: The currency_code_conversion of this InvoiceArray.
        :type currency_code_conversion: str
        """

        self._currency_code_conversion = currency_code_conversion

    @property
    def customer_address(self):
        """Gets the customer_address of this InvoiceArray.

        Your customers address

        :return: The customer_address of this InvoiceArray.
        :rtype: str
        """
        return self._customer_address

    @customer_address.setter
    def customer_address(self, customer_address):
        """Sets the customer_address of this InvoiceArray.

        Your customers address

        :param customer_address: The customer_address of this InvoiceArray.
        :type customer_address: str
        """

        self._customer_address = customer_address

    @property
    def customer_name(self):
        """Gets the customer_name of this InvoiceArray.

        Your customers name or trading name

        :return: The customer_name of this InvoiceArray.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this InvoiceArray.

        Your customers name or trading name

        :param customer_name: The customer_name of this InvoiceArray.
        :type customer_name: str
        """

        self._customer_name = customer_name

    @property
    def customer_vat_number(self):
        """Gets the customer_vat_number of this InvoiceArray.

        Customers VAT number

        :return: The customer_vat_number of this InvoiceArray.
        :rtype: str
        """
        return self._customer_vat_number

    @customer_vat_number.setter
    def customer_vat_number(self, customer_vat_number):
        """Sets the customer_vat_number of this InvoiceArray.

        Customers VAT number

        :param customer_vat_number: The customer_vat_number of this InvoiceArray.
        :type customer_vat_number: str
        """

        self._customer_vat_number = customer_vat_number

    @property
    def _date(self):
        """Gets the _date of this InvoiceArray.

        The date the invoice was issued

        :return: The _date of this InvoiceArray.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InvoiceArray.

        The date the invoice was issued

        :param _date: The _date of this InvoiceArray.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def discount_rate(self):
        """Gets the discount_rate of this InvoiceArray.

        The discount rate per item

        :return: The discount_rate of this InvoiceArray.
        :rtype: int
        """
        return self._discount_rate

    @discount_rate.setter
    def discount_rate(self, discount_rate):
        """Sets the discount_rate of this InvoiceArray.

        The discount rate per item

        :param discount_rate: The discount_rate of this InvoiceArray.
        :type discount_rate: int
        """

        self._discount_rate = discount_rate

    @property
    def discount_total(self):
        """Gets the discount_total of this InvoiceArray.

        Total amount of discount

        :return: The discount_total of this InvoiceArray.
        :rtype: int
        """
        return self._discount_total

    @discount_total.setter
    def discount_total(self, discount_total):
        """Sets the discount_total of this InvoiceArray.

        Total amount of discount

        :param discount_total: The discount_total of this InvoiceArray.
        :type discount_total: int
        """
        if discount_total is None:
            raise ValueError("Invalid value for `discount_total`, must not be `None`")

        self._discount_total = discount_total

    @property
    def invoice_number(self):
        """Gets the invoice_number of this InvoiceArray.

        A sequential invoice number

        :return: The invoice_number of this InvoiceArray.
        :rtype: int
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this InvoiceArray.

        A sequential invoice number

        :param invoice_number: The invoice_number of this InvoiceArray.
        :type invoice_number: int
        """
        if invoice_number is None:
            raise ValueError("Invalid value for `invoice_number`, must not be `None`")

        self._invoice_number = invoice_number

    @property
    def invoice_url(self):
        """Gets the invoice_url of this InvoiceArray.

        A perminant URL to your VAT invoice

        :return: The invoice_url of this InvoiceArray.
        :rtype: str
        """
        return self._invoice_url

    @invoice_url.setter
    def invoice_url(self, invoice_url):
        """Sets the invoice_url of this InvoiceArray.

        A perminant URL to your VAT invoice

        :param invoice_url: The invoice_url of this InvoiceArray.
        :type invoice_url: str
        """
        if invoice_url is None:
            raise ValueError("Invalid value for `invoice_url`, must not be `None`")

        self._invoice_url = invoice_url

    @property
    def items(self):
        """Gets the items of this InvoiceArray.

        An array of your invoice items

        :return: The items of this InvoiceArray.
        :rtype: List[InvoiceItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this InvoiceArray.

        An array of your invoice items

        :param items: The items of this InvoiceArray.
        :type items: List[InvoiceItems]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def logo_url(self):
        """Gets the logo_url of this InvoiceArray.

        A URL to your logo image. Must be SSL hosted. https://sslimagehost.com is recommended

        :return: The logo_url of this InvoiceArray.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this InvoiceArray.

        A URL to your logo image. Must be SSL hosted. https://sslimagehost.com is recommended

        :param logo_url: The logo_url of this InvoiceArray.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def notes(self):
        """Gets the notes of this InvoiceArray.

        Any notes attached to the invoice

        :return: The notes of this InvoiceArray.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this InvoiceArray.

        Any notes attached to the invoice

        :param notes: The notes of this InvoiceArray.
        :type notes: str
        """

        self._notes = notes

    @property
    def subtotal(self):
        """Gets the subtotal of this InvoiceArray.

        Total amount excluding VAT

        :return: The subtotal of this InvoiceArray.
        :rtype: int
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this InvoiceArray.

        Total amount excluding VAT

        :param subtotal: The subtotal of this InvoiceArray.
        :type subtotal: int
        """
        if subtotal is None:
            raise ValueError("Invalid value for `subtotal`, must not be `None`")

        self._subtotal = subtotal

    @property
    def tax_point(self):
        """Gets the tax_point of this InvoiceArray.

        (or 'time of supply') if this is different from the invoice date

        :return: The tax_point of this InvoiceArray.
        :rtype: str
        """
        return self._tax_point

    @tax_point.setter
    def tax_point(self, tax_point):
        """Sets the tax_point of this InvoiceArray.

        (or 'time of supply') if this is different from the invoice date

        :param tax_point: The tax_point of this InvoiceArray.
        :type tax_point: str
        """
        if tax_point is None:
            raise ValueError("Invalid value for `tax_point`, must not be `None`")

        self._tax_point = tax_point

    @property
    def total(self):
        """Gets the total of this InvoiceArray.

        Total amount of including VAT

        :return: The total of this InvoiceArray.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InvoiceArray.

        Total amount of including VAT

        :param total: The total of this InvoiceArray.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def type(self):
        """Gets the type of this InvoiceArray.

        The type of invoice. Either 'sale' or 'refund'

        :return: The type of this InvoiceArray.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvoiceArray.

        The type of invoice. Either 'sale' or 'refund'

        :param type: The type of this InvoiceArray.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def vat_number(self):
        """Gets the vat_number of this InvoiceArray.

        Your VAT number

        :return: The vat_number of this InvoiceArray.
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this InvoiceArray.

        Your VAT number

        :param vat_number: The vat_number of this InvoiceArray.
        :type vat_number: str
        """
        if vat_number is None:
            raise ValueError("Invalid value for `vat_number`, must not be `None`")

        self._vat_number = vat_number

    @property
    def vat_total(self):
        """Gets the vat_total of this InvoiceArray.

        Total amount of VAT

        :return: The vat_total of this InvoiceArray.
        :rtype: int
        """
        return self._vat_total

    @vat_total.setter
    def vat_total(self, vat_total):
        """Sets the vat_total of this InvoiceArray.

        Total amount of VAT

        :param vat_total: The vat_total of this InvoiceArray.
        :type vat_total: int
        """
        if vat_total is None:
            raise ValueError("Invalid value for `vat_total`, must not be `None`")

        self._vat_total = vat_total
