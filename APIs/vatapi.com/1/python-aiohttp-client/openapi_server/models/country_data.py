# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country_rates import CountryRates
from openapi_server import util


class CountryData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, rates: CountryRates=None):
        """CountryData - a model defined in OpenAPI

        :param country: The country of this CountryData.
        :param rates: The rates of this CountryData.
        """
        self.openapi_types = {
            'country': str,
            'rates': CountryRates
        }

        self.attribute_map = {
            'country': 'country',
            'rates': 'rates'
        }

        self._country = country
        self._rates = rates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountryData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Country_Data of this CountryData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this CountryData.

        The country name

        :return: The country of this CountryData.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CountryData.

        The country name

        :param country: The country of this CountryData.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def rates(self):
        """Gets the rates of this CountryData.


        :return: The rates of this CountryData.
        :rtype: CountryRates
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this CountryData.


        :param rates: The rates of this CountryData.
        :type rates: CountryRates
        """
        if rates is None:
            raise ValueError("Invalid value for `rates`, must not be `None`")

        self._rates = rates
