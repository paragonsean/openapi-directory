# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parking import Parking
from openapi_server.models.reduced import Reduced
from openapi_server.models.reduced_alt import ReducedAlt
from openapi_server.models.standard import Standard
from openapi_server.models.super_reduced import SuperReduced
from openapi_server import util


class CountryRates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parking: Parking=None, reduced: Reduced=None, reduced_alt: ReducedAlt=None, standard: Standard=None, super_reduced: SuperReduced=None):
        """CountryRates - a model defined in OpenAPI

        :param parking: The parking of this CountryRates.
        :param reduced: The reduced of this CountryRates.
        :param reduced_alt: The reduced_alt of this CountryRates.
        :param standard: The standard of this CountryRates.
        :param super_reduced: The super_reduced of this CountryRates.
        """
        self.openapi_types = {
            'parking': Parking,
            'reduced': Reduced,
            'reduced_alt': ReducedAlt,
            'standard': Standard,
            'super_reduced': SuperReduced
        }

        self.attribute_map = {
            'parking': 'parking',
            'reduced': 'reduced',
            'reduced_alt': 'reduced_alt',
            'standard': 'standard',
            'super_reduced': 'super_reduced'
        }

        self._parking = parking
        self._reduced = reduced
        self._reduced_alt = reduced_alt
        self._standard = standard
        self._super_reduced = super_reduced

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountryRates':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Country_Rates of this CountryRates.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parking(self):
        """Gets the parking of this CountryRates.


        :return: The parking of this CountryRates.
        :rtype: Parking
        """
        return self._parking

    @parking.setter
    def parking(self, parking):
        """Sets the parking of this CountryRates.


        :param parking: The parking of this CountryRates.
        :type parking: Parking
        """
        if parking is None:
            raise ValueError("Invalid value for `parking`, must not be `None`")

        self._parking = parking

    @property
    def reduced(self):
        """Gets the reduced of this CountryRates.


        :return: The reduced of this CountryRates.
        :rtype: Reduced
        """
        return self._reduced

    @reduced.setter
    def reduced(self, reduced):
        """Sets the reduced of this CountryRates.


        :param reduced: The reduced of this CountryRates.
        :type reduced: Reduced
        """
        if reduced is None:
            raise ValueError("Invalid value for `reduced`, must not be `None`")

        self._reduced = reduced

    @property
    def reduced_alt(self):
        """Gets the reduced_alt of this CountryRates.


        :return: The reduced_alt of this CountryRates.
        :rtype: ReducedAlt
        """
        return self._reduced_alt

    @reduced_alt.setter
    def reduced_alt(self, reduced_alt):
        """Sets the reduced_alt of this CountryRates.


        :param reduced_alt: The reduced_alt of this CountryRates.
        :type reduced_alt: ReducedAlt
        """
        if reduced_alt is None:
            raise ValueError("Invalid value for `reduced_alt`, must not be `None`")

        self._reduced_alt = reduced_alt

    @property
    def standard(self):
        """Gets the standard of this CountryRates.


        :return: The standard of this CountryRates.
        :rtype: Standard
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this CountryRates.


        :param standard: The standard of this CountryRates.
        :type standard: Standard
        """
        if standard is None:
            raise ValueError("Invalid value for `standard`, must not be `None`")

        self._standard = standard

    @property
    def super_reduced(self):
        """Gets the super_reduced of this CountryRates.


        :return: The super_reduced of this CountryRates.
        :rtype: SuperReduced
        """
        return self._super_reduced

    @super_reduced.setter
    def super_reduced(self, super_reduced):
        """Sets the super_reduced of this CountryRates.


        :param super_reduced: The super_reduced of this CountryRates.
        :type super_reduced: SuperReduced
        """
        if super_reduced is None:
            raise ValueError("Invalid value for `super_reduced`, must not be `None`")

        self._super_reduced = super_reduced
