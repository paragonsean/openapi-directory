# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CurrencyConversion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_from: str=None, amount_to: str=None, currency_from: str=None, currency_to: int=None, rate: str=None, status: int=None):
        """CurrencyConversion - a model defined in OpenAPI

        :param amount_from: The amount_from of this CurrencyConversion.
        :param amount_to: The amount_to of this CurrencyConversion.
        :param currency_from: The currency_from of this CurrencyConversion.
        :param currency_to: The currency_to of this CurrencyConversion.
        :param rate: The rate of this CurrencyConversion.
        :param status: The status of this CurrencyConversion.
        """
        self.openapi_types = {
            'amount_from': str,
            'amount_to': str,
            'currency_from': str,
            'currency_to': int,
            'rate': str,
            'status': int
        }

        self.attribute_map = {
            'amount_from': 'amount_from',
            'amount_to': 'amount_to',
            'currency_from': 'currency_from',
            'currency_to': 'currency_to',
            'rate': 'rate',
            'status': 'status'
        }

        self._amount_from = amount_from
        self._amount_to = amount_to
        self._currency_from = currency_from
        self._currency_to = currency_to
        self._rate = rate
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrencyConversion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Currency_Conversion of this CurrencyConversion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_from(self):
        """Gets the amount_from of this CurrencyConversion.

        The amount you are converting from

        :return: The amount_from of this CurrencyConversion.
        :rtype: str
        """
        return self._amount_from

    @amount_from.setter
    def amount_from(self, amount_from):
        """Sets the amount_from of this CurrencyConversion.

        The amount you are converting from

        :param amount_from: The amount_from of this CurrencyConversion.
        :type amount_from: str
        """

        self._amount_from = amount_from

    @property
    def amount_to(self):
        """Gets the amount_to of this CurrencyConversion.

        The result amount you have converted to

        :return: The amount_to of this CurrencyConversion.
        :rtype: str
        """
        return self._amount_to

    @amount_to.setter
    def amount_to(self, amount_to):
        """Sets the amount_to of this CurrencyConversion.

        The result amount you have converted to

        :param amount_to: The amount_to of this CurrencyConversion.
        :type amount_to: str
        """

        self._amount_to = amount_to

    @property
    def currency_from(self):
        """Gets the currency_from of this CurrencyConversion.

        The currency code you are converting from

        :return: The currency_from of this CurrencyConversion.
        :rtype: str
        """
        return self._currency_from

    @currency_from.setter
    def currency_from(self, currency_from):
        """Sets the currency_from of this CurrencyConversion.

        The currency code you are converting from

        :param currency_from: The currency_from of this CurrencyConversion.
        :type currency_from: str
        """
        if currency_from is None:
            raise ValueError("Invalid value for `currency_from`, must not be `None`")

        self._currency_from = currency_from

    @property
    def currency_to(self):
        """Gets the currency_to of this CurrencyConversion.

        The currency code you are converting to

        :return: The currency_to of this CurrencyConversion.
        :rtype: int
        """
        return self._currency_to

    @currency_to.setter
    def currency_to(self, currency_to):
        """Sets the currency_to of this CurrencyConversion.

        The currency code you are converting to

        :param currency_to: The currency_to of this CurrencyConversion.
        :type currency_to: int
        """
        if currency_to is None:
            raise ValueError("Invalid value for `currency_to`, must not be `None`")

        self._currency_to = currency_to

    @property
    def rate(self):
        """Gets the rate of this CurrencyConversion.

        The rate according to HMRC at time of sale

        :return: The rate of this CurrencyConversion.
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this CurrencyConversion.

        The rate according to HMRC at time of sale

        :param rate: The rate of this CurrencyConversion.
        :type rate: str
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate

    @property
    def status(self):
        """Gets the status of this CurrencyConversion.

        Response code

        :return: The status of this CurrencyConversion.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CurrencyConversion.

        Response code

        :param status: The status of this CurrencyConversion.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
