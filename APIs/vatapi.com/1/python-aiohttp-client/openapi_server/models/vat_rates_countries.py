# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country_data import CountryData
from openapi_server import util


class VatRatesCountries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: CountryData=None):
        """VatRatesCountries - a model defined in OpenAPI

        :param country_code: The country_code of this VatRatesCountries.
        """
        self.openapi_types = {
            'country_code': CountryData
        }

        self.attribute_map = {
            'country_code': 'country_code'
        }

        self._country_code = country_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VatRatesCountries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Vat_Rates_Countries of this VatRatesCountries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this VatRatesCountries.


        :return: The country_code of this VatRatesCountries.
        :rtype: CountryData
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this VatRatesCountries.


        :param country_code: The country_code of this VatRatesCountries.
        :type country_code: CountryData
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code
