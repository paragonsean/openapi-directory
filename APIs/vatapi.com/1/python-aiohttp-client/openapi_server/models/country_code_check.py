# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country_rates import CountryRates
from openapi_server import util


class CountryCodeCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, country_code: str=None, rates: CountryRates=None, status: int=None, vat_applies: str=None):
        """CountryCodeCheck - a model defined in OpenAPI

        :param country: The country of this CountryCodeCheck.
        :param country_code: The country_code of this CountryCodeCheck.
        :param rates: The rates of this CountryCodeCheck.
        :param status: The status of this CountryCodeCheck.
        :param vat_applies: The vat_applies of this CountryCodeCheck.
        """
        self.openapi_types = {
            'country': str,
            'country_code': str,
            'rates': CountryRates,
            'status': int,
            'vat_applies': str
        }

        self.attribute_map = {
            'country': 'country',
            'country_code': 'country_code',
            'rates': 'rates',
            'status': 'status',
            'vat_applies': 'vat_applies'
        }

        self._country = country
        self._country_code = country_code
        self._rates = rates
        self._status = status
        self._vat_applies = vat_applies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountryCodeCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Country_Code_Check of this CountryCodeCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this CountryCodeCheck.

        The country name

        :return: The country of this CountryCodeCheck.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CountryCodeCheck.

        The country name

        :param country: The country of this CountryCodeCheck.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this CountryCodeCheck.

        The 2 digit country code

        :return: The country_code of this CountryCodeCheck.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CountryCodeCheck.

        The 2 digit country code

        :param country_code: The country_code of this CountryCodeCheck.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def rates(self):
        """Gets the rates of this CountryCodeCheck.


        :return: The rates of this CountryCodeCheck.
        :rtype: CountryRates
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this CountryCodeCheck.


        :param rates: The rates of this CountryCodeCheck.
        :type rates: CountryRates
        """
        if rates is None:
            raise ValueError("Invalid value for `rates`, must not be `None`")

        self._rates = rates

    @property
    def status(self):
        """Gets the status of this CountryCodeCheck.

        Response code

        :return: The status of this CountryCodeCheck.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CountryCodeCheck.

        Response code

        :param status: The status of this CountryCodeCheck.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def vat_applies(self):
        """Gets the vat_applies of this CountryCodeCheck.

        TRUE or FALSE, depending if country is within the EU.

        :return: The vat_applies of this CountryCodeCheck.
        :rtype: str
        """
        return self._vat_applies

    @vat_applies.setter
    def vat_applies(self, vat_applies):
        """Sets the vat_applies of this CountryCodeCheck.

        TRUE or FALSE, depending if country is within the EU.

        :param vat_applies: The vat_applies of this CountryCodeCheck.
        :type vat_applies: str
        """
        if vat_applies is None:
            raise ValueError("Invalid value for `vat_applies`, must not be `None`")

        self._vat_applies = vat_applies
