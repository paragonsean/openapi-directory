# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceItems(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, price_each: int=None, quantity: int=None, vat_rate: int=None):
        """InvoiceItems - a model defined in OpenAPI

        :param description: The description of this InvoiceItems.
        :param price_each: The price_each of this InvoiceItems.
        :param quantity: The quantity of this InvoiceItems.
        :param vat_rate: The vat_rate of this InvoiceItems.
        """
        self.openapi_types = {
            'description': str,
            'price_each': int,
            'quantity': int,
            'vat_rate': int
        }

        self.attribute_map = {
            'description': 'description',
            'price_each': 'price_each',
            'quantity': 'quantity',
            'vat_rate': 'vat_rate'
        }

        self._description = description
        self._price_each = price_each
        self._quantity = quantity
        self._vat_rate = vat_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceItems':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invoice_Items of this InvoiceItems.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this InvoiceItems.

        The item line description

        :return: The description of this InvoiceItems.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceItems.

        The item line description

        :param description: The description of this InvoiceItems.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def price_each(self):
        """Gets the price_each of this InvoiceItems.

        The price of the individual item (Ex VAT)

        :return: The price_each of this InvoiceItems.
        :rtype: int
        """
        return self._price_each

    @price_each.setter
    def price_each(self, price_each):
        """Sets the price_each of this InvoiceItems.

        The price of the individual item (Ex VAT)

        :param price_each: The price_each of this InvoiceItems.
        :type price_each: int
        """
        if price_each is None:
            raise ValueError("Invalid value for `price_each`, must not be `None`")

        self._price_each = price_each

    @property
    def quantity(self):
        """Gets the quantity of this InvoiceItems.

        The quantity of the item

        :return: The quantity of this InvoiceItems.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InvoiceItems.

        The quantity of the item

        :param quantity: The quantity of this InvoiceItems.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def vat_rate(self):
        """Gets the vat_rate of this InvoiceItems.

        The VAT rate at which the item is charged

        :return: The vat_rate of this InvoiceItems.
        :rtype: int
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this InvoiceItems.

        The VAT rate at which the item is charged

        :param vat_rate: The vat_rate of this InvoiceItems.
        :type vat_rate: int
        """
        if vat_rate is None:
            raise ValueError("Invalid value for `vat_rate`, must not be `None`")

        self._vat_rate = vat_rate
