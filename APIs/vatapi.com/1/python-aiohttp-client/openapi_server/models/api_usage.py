# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, requests_remaining: int=None, requests_used: int=None, status: int=None):
        """ApiUsage - a model defined in OpenAPI

        :param requests_remaining: The requests_remaining of this ApiUsage.
        :param requests_used: The requests_used of this ApiUsage.
        :param status: The status of this ApiUsage.
        """
        self.openapi_types = {
            'requests_remaining': int,
            'requests_used': int,
            'status': int
        }

        self.attribute_map = {
            'requests_remaining': 'requests_remaining',
            'requests_used': 'requests_used',
            'status': 'status'
        }

        self._requests_remaining = requests_remaining
        self._requests_used = requests_used
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api_Usage of this ApiUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def requests_remaining(self):
        """Gets the requests_remaining of this ApiUsage.

        The number of api requests remaining in the current billing period

        :return: The requests_remaining of this ApiUsage.
        :rtype: int
        """
        return self._requests_remaining

    @requests_remaining.setter
    def requests_remaining(self, requests_remaining):
        """Sets the requests_remaining of this ApiUsage.

        The number of api requests remaining in the current billing period

        :param requests_remaining: The requests_remaining of this ApiUsage.
        :type requests_remaining: int
        """
        if requests_remaining is None:
            raise ValueError("Invalid value for `requests_remaining`, must not be `None`")

        self._requests_remaining = requests_remaining

    @property
    def requests_used(self):
        """Gets the requests_used of this ApiUsage.

        The number of api requests consumed within the last 30 days

        :return: The requests_used of this ApiUsage.
        :rtype: int
        """
        return self._requests_used

    @requests_used.setter
    def requests_used(self, requests_used):
        """Sets the requests_used of this ApiUsage.

        The number of api requests consumed within the last 30 days

        :param requests_used: The requests_used of this ApiUsage.
        :type requests_used: int
        """
        if requests_used is None:
            raise ValueError("Invalid value for `requests_used`, must not be `None`")

        self._requests_used = requests_used

    @property
    def status(self):
        """Gets the status of this ApiUsage.

        Response code

        :return: The status of this ApiUsage.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiUsage.

        Response code

        :param status: The status of this ApiUsage.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
