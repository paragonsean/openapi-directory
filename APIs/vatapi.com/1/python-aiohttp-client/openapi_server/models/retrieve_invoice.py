# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.retrieve_invoice_array import RetrieveInvoiceArray
from openapi_server import util


class RetrieveInvoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invoice: RetrieveInvoiceArray=None, status: str=None):
        """RetrieveInvoice - a model defined in OpenAPI

        :param invoice: The invoice of this RetrieveInvoice.
        :param status: The status of this RetrieveInvoice.
        """
        self.openapi_types = {
            'invoice': RetrieveInvoiceArray,
            'status': str
        }

        self.attribute_map = {
            'invoice': 'invoice',
            'status': 'status'
        }

        self._invoice = invoice
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetrieveInvoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Retrieve_Invoice of this RetrieveInvoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invoice(self):
        """Gets the invoice of this RetrieveInvoice.


        :return: The invoice of this RetrieveInvoice.
        :rtype: RetrieveInvoiceArray
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this RetrieveInvoice.


        :param invoice: The invoice of this RetrieveInvoice.
        :type invoice: RetrieveInvoiceArray
        """
        if invoice is None:
            raise ValueError("Invalid value for `invoice`, must not be `None`")

        self._invoice = invoice

    @property
    def status(self):
        """Gets the status of this RetrieveInvoice.

        Response code

        :return: The status of this RetrieveInvoice.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RetrieveInvoice.

        Response code

        :param status: The status of this RetrieveInvoice.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
