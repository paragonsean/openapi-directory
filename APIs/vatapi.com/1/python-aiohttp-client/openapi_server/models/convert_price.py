# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConvertPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, country_rate: str=None, price_excl_vat: int=None, price_incl_vat: int=None, rate: int=None, status: int=None, vat: int=None):
        """ConvertPrice - a model defined in OpenAPI

        :param country_code: The country_code of this ConvertPrice.
        :param country_rate: The country_rate of this ConvertPrice.
        :param price_excl_vat: The price_excl_vat of this ConvertPrice.
        :param price_incl_vat: The price_incl_vat of this ConvertPrice.
        :param rate: The rate of this ConvertPrice.
        :param status: The status of this ConvertPrice.
        :param vat: The vat of this ConvertPrice.
        """
        self.openapi_types = {
            'country_code': str,
            'country_rate': str,
            'price_excl_vat': int,
            'price_incl_vat': int,
            'rate': int,
            'status': int,
            'vat': int
        }

        self.attribute_map = {
            'country_code': 'country_code',
            'country_rate': 'country_rate',
            'price_excl_vat': 'price_excl_vat',
            'price_incl_vat': 'price_incl_vat',
            'rate': 'rate',
            'status': 'status',
            'vat': 'vat'
        }

        self._country_code = country_code
        self._country_rate = country_rate
        self._price_excl_vat = price_excl_vat
        self._price_incl_vat = price_incl_vat
        self._rate = rate
        self._status = status
        self._vat = vat

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConvertPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Convert_Price of this ConvertPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this ConvertPrice.

        The 2 digit country code

        :return: The country_code of this ConvertPrice.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ConvertPrice.

        The 2 digit country code

        :param country_code: The country_code of this ConvertPrice.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def country_rate(self):
        """Gets the country_rate of this ConvertPrice.

        The country_rate

        :return: The country_rate of this ConvertPrice.
        :rtype: str
        """
        return self._country_rate

    @country_rate.setter
    def country_rate(self, country_rate):
        """Sets the country_rate of this ConvertPrice.

        The country_rate

        :param country_rate: The country_rate of this ConvertPrice.
        :type country_rate: str
        """
        if country_rate is None:
            raise ValueError("Invalid value for `country_rate`, must not be `None`")

        self._country_rate = country_rate

    @property
    def price_excl_vat(self):
        """Gets the price_excl_vat of this ConvertPrice.

        The price excluding VAT

        :return: The price_excl_vat of this ConvertPrice.
        :rtype: int
        """
        return self._price_excl_vat

    @price_excl_vat.setter
    def price_excl_vat(self, price_excl_vat):
        """Sets the price_excl_vat of this ConvertPrice.

        The price excluding VAT

        :param price_excl_vat: The price_excl_vat of this ConvertPrice.
        :type price_excl_vat: int
        """
        if price_excl_vat is None:
            raise ValueError("Invalid value for `price_excl_vat`, must not be `None`")

        self._price_excl_vat = price_excl_vat

    @property
    def price_incl_vat(self):
        """Gets the price_incl_vat of this ConvertPrice.

        The price including VAT

        :return: The price_incl_vat of this ConvertPrice.
        :rtype: int
        """
        return self._price_incl_vat

    @price_incl_vat.setter
    def price_incl_vat(self, price_incl_vat):
        """Sets the price_incl_vat of this ConvertPrice.

        The price including VAT

        :param price_incl_vat: The price_incl_vat of this ConvertPrice.
        :type price_incl_vat: int
        """
        if price_incl_vat is None:
            raise ValueError("Invalid value for `price_incl_vat`, must not be `None`")

        self._price_incl_vat = price_incl_vat

    @property
    def rate(self):
        """Gets the rate of this ConvertPrice.

        The rate % for the country_rate

        :return: The rate of this ConvertPrice.
        :rtype: int
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this ConvertPrice.

        The rate % for the country_rate

        :param rate: The rate of this ConvertPrice.
        :type rate: int
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate

    @property
    def status(self):
        """Gets the status of this ConvertPrice.

        Response code

        :return: The status of this ConvertPrice.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConvertPrice.

        Response code

        :param status: The status of this ConvertPrice.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def vat(self):
        """Gets the vat of this ConvertPrice.

        The total amount of VAT applied

        :return: The vat of this ConvertPrice.
        :rtype: int
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this ConvertPrice.

        The total amount of VAT applied

        :param vat: The vat of this ConvertPrice.
        :type vat: int
        """
        if vat is None:
            raise ValueError("Invalid value for `vat`, must not be `None`")

        self._vat = vat
