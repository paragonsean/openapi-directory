/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountry_Rates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountry_Rates::OAICountry_Rates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountry_Rates::OAICountry_Rates() {
    this->initializeModel();
}

OAICountry_Rates::~OAICountry_Rates() {}

void OAICountry_Rates::initializeModel() {

    m_parking_isSet = false;
    m_parking_isValid = false;

    m_reduced_isSet = false;
    m_reduced_isValid = false;

    m_reduced_alt_isSet = false;
    m_reduced_alt_isValid = false;

    m_standard_isSet = false;
    m_standard_isValid = false;

    m_super_reduced_isSet = false;
    m_super_reduced_isValid = false;
}

void OAICountry_Rates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountry_Rates::fromJsonObject(QJsonObject json) {

    m_parking_isValid = ::OpenAPI::fromJsonValue(m_parking, json[QString("parking")]);
    m_parking_isSet = !json[QString("parking")].isNull() && m_parking_isValid;

    m_reduced_isValid = ::OpenAPI::fromJsonValue(m_reduced, json[QString("reduced")]);
    m_reduced_isSet = !json[QString("reduced")].isNull() && m_reduced_isValid;

    m_reduced_alt_isValid = ::OpenAPI::fromJsonValue(m_reduced_alt, json[QString("reduced_alt")]);
    m_reduced_alt_isSet = !json[QString("reduced_alt")].isNull() && m_reduced_alt_isValid;

    m_standard_isValid = ::OpenAPI::fromJsonValue(m_standard, json[QString("standard")]);
    m_standard_isSet = !json[QString("standard")].isNull() && m_standard_isValid;

    m_super_reduced_isValid = ::OpenAPI::fromJsonValue(m_super_reduced, json[QString("super_reduced")]);
    m_super_reduced_isSet = !json[QString("super_reduced")].isNull() && m_super_reduced_isValid;
}

QString OAICountry_Rates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountry_Rates::asJsonObject() const {
    QJsonObject obj;
    if (m_parking.isSet()) {
        obj.insert(QString("parking"), ::OpenAPI::toJsonValue(m_parking));
    }
    if (m_reduced.isSet()) {
        obj.insert(QString("reduced"), ::OpenAPI::toJsonValue(m_reduced));
    }
    if (m_reduced_alt.isSet()) {
        obj.insert(QString("reduced_alt"), ::OpenAPI::toJsonValue(m_reduced_alt));
    }
    if (m_standard.isSet()) {
        obj.insert(QString("standard"), ::OpenAPI::toJsonValue(m_standard));
    }
    if (m_super_reduced.isSet()) {
        obj.insert(QString("super_reduced"), ::OpenAPI::toJsonValue(m_super_reduced));
    }
    return obj;
}

OAIParking OAICountry_Rates::getParking() const {
    return m_parking;
}
void OAICountry_Rates::setParking(const OAIParking &parking) {
    m_parking = parking;
    m_parking_isSet = true;
}

bool OAICountry_Rates::is_parking_Set() const{
    return m_parking_isSet;
}

bool OAICountry_Rates::is_parking_Valid() const{
    return m_parking_isValid;
}

OAIReduced OAICountry_Rates::getReduced() const {
    return m_reduced;
}
void OAICountry_Rates::setReduced(const OAIReduced &reduced) {
    m_reduced = reduced;
    m_reduced_isSet = true;
}

bool OAICountry_Rates::is_reduced_Set() const{
    return m_reduced_isSet;
}

bool OAICountry_Rates::is_reduced_Valid() const{
    return m_reduced_isValid;
}

OAIReduced_alt OAICountry_Rates::getReducedAlt() const {
    return m_reduced_alt;
}
void OAICountry_Rates::setReducedAlt(const OAIReduced_alt &reduced_alt) {
    m_reduced_alt = reduced_alt;
    m_reduced_alt_isSet = true;
}

bool OAICountry_Rates::is_reduced_alt_Set() const{
    return m_reduced_alt_isSet;
}

bool OAICountry_Rates::is_reduced_alt_Valid() const{
    return m_reduced_alt_isValid;
}

OAIStandard OAICountry_Rates::getStandard() const {
    return m_standard;
}
void OAICountry_Rates::setStandard(const OAIStandard &standard) {
    m_standard = standard;
    m_standard_isSet = true;
}

bool OAICountry_Rates::is_standard_Set() const{
    return m_standard_isSet;
}

bool OAICountry_Rates::is_standard_Valid() const{
    return m_standard_isValid;
}

OAISuper_reduced OAICountry_Rates::getSuperReduced() const {
    return m_super_reduced;
}
void OAICountry_Rates::setSuperReduced(const OAISuper_reduced &super_reduced) {
    m_super_reduced = super_reduced;
    m_super_reduced_isSet = true;
}

bool OAICountry_Rates::is_super_reduced_Set() const{
    return m_super_reduced_isSet;
}

bool OAICountry_Rates::is_super_reduced_Valid() const{
    return m_super_reduced_isValid;
}

bool OAICountry_Rates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parking.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reduced.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reduced_alt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_reduced.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountry_Rates::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parking_isValid && m_reduced_isValid && m_reduced_alt_isValid && m_standard_isValid && m_super_reduced_isValid && true;
}

} // namespace OpenAPI
