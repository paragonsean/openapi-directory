/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountry_Code_Check.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountry_Code_Check::OAICountry_Code_Check(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountry_Code_Check::OAICountry_Code_Check() {
    this->initializeModel();
}

OAICountry_Code_Check::~OAICountry_Code_Check() {}

void OAICountry_Code_Check::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_rates_isSet = false;
    m_rates_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vat_applies_isSet = false;
    m_vat_applies_isValid = false;
}

void OAICountry_Code_Check::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountry_Code_Check::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_rates_isValid = ::OpenAPI::fromJsonValue(m_rates, json[QString("rates")]);
    m_rates_isSet = !json[QString("rates")].isNull() && m_rates_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vat_applies_isValid = ::OpenAPI::fromJsonValue(m_vat_applies, json[QString("vat_applies")]);
    m_vat_applies_isSet = !json[QString("vat_applies")].isNull() && m_vat_applies_isValid;
}

QString OAICountry_Code_Check::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountry_Code_Check::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_rates.isSet()) {
        obj.insert(QString("rates"), ::OpenAPI::toJsonValue(m_rates));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vat_applies_isSet) {
        obj.insert(QString("vat_applies"), ::OpenAPI::toJsonValue(m_vat_applies));
    }
    return obj;
}

QString OAICountry_Code_Check::getCountry() const {
    return m_country;
}
void OAICountry_Code_Check::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICountry_Code_Check::is_country_Set() const{
    return m_country_isSet;
}

bool OAICountry_Code_Check::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICountry_Code_Check::getCountryCode() const {
    return m_country_code;
}
void OAICountry_Code_Check::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAICountry_Code_Check::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAICountry_Code_Check::is_country_code_Valid() const{
    return m_country_code_isValid;
}

OAICountry_Rates OAICountry_Code_Check::getRates() const {
    return m_rates;
}
void OAICountry_Code_Check::setRates(const OAICountry_Rates &rates) {
    m_rates = rates;
    m_rates_isSet = true;
}

bool OAICountry_Code_Check::is_rates_Set() const{
    return m_rates_isSet;
}

bool OAICountry_Code_Check::is_rates_Valid() const{
    return m_rates_isValid;
}

qint32 OAICountry_Code_Check::getStatus() const {
    return m_status;
}
void OAICountry_Code_Check::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICountry_Code_Check::is_status_Set() const{
    return m_status_isSet;
}

bool OAICountry_Code_Check::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICountry_Code_Check::getVatApplies() const {
    return m_vat_applies;
}
void OAICountry_Code_Check::setVatApplies(const QString &vat_applies) {
    m_vat_applies = vat_applies;
    m_vat_applies_isSet = true;
}

bool OAICountry_Code_Check::is_vat_applies_Set() const{
    return m_vat_applies_isSet;
}

bool OAICountry_Code_Check::is_vat_applies_Valid() const{
    return m_vat_applies_isValid;
}

bool OAICountry_Code_Check::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_applies_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountry_Code_Check::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_country_code_isValid && m_rates_isValid && m_status_isValid && m_vat_applies_isValid && true;
}

} // namespace OpenAPI
