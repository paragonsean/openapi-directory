/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Usage::OAIApi_Usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Usage::OAIApi_Usage() {
    this->initializeModel();
}

OAIApi_Usage::~OAIApi_Usage() {}

void OAIApi_Usage::initializeModel() {

    m_requests_remaining_isSet = false;
    m_requests_remaining_isValid = false;

    m_requests_used_isSet = false;
    m_requests_used_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIApi_Usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Usage::fromJsonObject(QJsonObject json) {

    m_requests_remaining_isValid = ::OpenAPI::fromJsonValue(m_requests_remaining, json[QString("requests_remaining")]);
    m_requests_remaining_isSet = !json[QString("requests_remaining")].isNull() && m_requests_remaining_isValid;

    m_requests_used_isValid = ::OpenAPI::fromJsonValue(m_requests_used, json[QString("requests_used")]);
    m_requests_used_isSet = !json[QString("requests_used")].isNull() && m_requests_used_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIApi_Usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Usage::asJsonObject() const {
    QJsonObject obj;
    if (m_requests_remaining_isSet) {
        obj.insert(QString("requests_remaining"), ::OpenAPI::toJsonValue(m_requests_remaining));
    }
    if (m_requests_used_isSet) {
        obj.insert(QString("requests_used"), ::OpenAPI::toJsonValue(m_requests_used));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIApi_Usage::getRequestsRemaining() const {
    return m_requests_remaining;
}
void OAIApi_Usage::setRequestsRemaining(const qint32 &requests_remaining) {
    m_requests_remaining = requests_remaining;
    m_requests_remaining_isSet = true;
}

bool OAIApi_Usage::is_requests_remaining_Set() const{
    return m_requests_remaining_isSet;
}

bool OAIApi_Usage::is_requests_remaining_Valid() const{
    return m_requests_remaining_isValid;
}

qint32 OAIApi_Usage::getRequestsUsed() const {
    return m_requests_used;
}
void OAIApi_Usage::setRequestsUsed(const qint32 &requests_used) {
    m_requests_used = requests_used;
    m_requests_used_isSet = true;
}

bool OAIApi_Usage::is_requests_used_Set() const{
    return m_requests_used_isSet;
}

bool OAIApi_Usage::is_requests_used_Valid() const{
    return m_requests_used_isValid;
}

qint32 OAIApi_Usage::getStatus() const {
    return m_status;
}
void OAIApi_Usage::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApi_Usage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApi_Usage::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIApi_Usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_requests_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_requests_remaining_isValid && m_requests_used_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
