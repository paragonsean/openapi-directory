/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrency_Conversion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrency_Conversion::OAICurrency_Conversion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrency_Conversion::OAICurrency_Conversion() {
    this->initializeModel();
}

OAICurrency_Conversion::~OAICurrency_Conversion() {}

void OAICurrency_Conversion::initializeModel() {

    m_amount_from_isSet = false;
    m_amount_from_isValid = false;

    m_amount_to_isSet = false;
    m_amount_to_isValid = false;

    m_currency_from_isSet = false;
    m_currency_from_isValid = false;

    m_currency_to_isSet = false;
    m_currency_to_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICurrency_Conversion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrency_Conversion::fromJsonObject(QJsonObject json) {

    m_amount_from_isValid = ::OpenAPI::fromJsonValue(m_amount_from, json[QString("amount_from")]);
    m_amount_from_isSet = !json[QString("amount_from")].isNull() && m_amount_from_isValid;

    m_amount_to_isValid = ::OpenAPI::fromJsonValue(m_amount_to, json[QString("amount_to")]);
    m_amount_to_isSet = !json[QString("amount_to")].isNull() && m_amount_to_isValid;

    m_currency_from_isValid = ::OpenAPI::fromJsonValue(m_currency_from, json[QString("currency_from")]);
    m_currency_from_isSet = !json[QString("currency_from")].isNull() && m_currency_from_isValid;

    m_currency_to_isValid = ::OpenAPI::fromJsonValue(m_currency_to, json[QString("currency_to")]);
    m_currency_to_isSet = !json[QString("currency_to")].isNull() && m_currency_to_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICurrency_Conversion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrency_Conversion::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_from_isSet) {
        obj.insert(QString("amount_from"), ::OpenAPI::toJsonValue(m_amount_from));
    }
    if (m_amount_to_isSet) {
        obj.insert(QString("amount_to"), ::OpenAPI::toJsonValue(m_amount_to));
    }
    if (m_currency_from_isSet) {
        obj.insert(QString("currency_from"), ::OpenAPI::toJsonValue(m_currency_from));
    }
    if (m_currency_to_isSet) {
        obj.insert(QString("currency_to"), ::OpenAPI::toJsonValue(m_currency_to));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICurrency_Conversion::getAmountFrom() const {
    return m_amount_from;
}
void OAICurrency_Conversion::setAmountFrom(const QString &amount_from) {
    m_amount_from = amount_from;
    m_amount_from_isSet = true;
}

bool OAICurrency_Conversion::is_amount_from_Set() const{
    return m_amount_from_isSet;
}

bool OAICurrency_Conversion::is_amount_from_Valid() const{
    return m_amount_from_isValid;
}

QString OAICurrency_Conversion::getAmountTo() const {
    return m_amount_to;
}
void OAICurrency_Conversion::setAmountTo(const QString &amount_to) {
    m_amount_to = amount_to;
    m_amount_to_isSet = true;
}

bool OAICurrency_Conversion::is_amount_to_Set() const{
    return m_amount_to_isSet;
}

bool OAICurrency_Conversion::is_amount_to_Valid() const{
    return m_amount_to_isValid;
}

QString OAICurrency_Conversion::getCurrencyFrom() const {
    return m_currency_from;
}
void OAICurrency_Conversion::setCurrencyFrom(const QString &currency_from) {
    m_currency_from = currency_from;
    m_currency_from_isSet = true;
}

bool OAICurrency_Conversion::is_currency_from_Set() const{
    return m_currency_from_isSet;
}

bool OAICurrency_Conversion::is_currency_from_Valid() const{
    return m_currency_from_isValid;
}

qint32 OAICurrency_Conversion::getCurrencyTo() const {
    return m_currency_to;
}
void OAICurrency_Conversion::setCurrencyTo(const qint32 &currency_to) {
    m_currency_to = currency_to;
    m_currency_to_isSet = true;
}

bool OAICurrency_Conversion::is_currency_to_Set() const{
    return m_currency_to_isSet;
}

bool OAICurrency_Conversion::is_currency_to_Valid() const{
    return m_currency_to_isValid;
}

QString OAICurrency_Conversion::getRate() const {
    return m_rate;
}
void OAICurrency_Conversion::setRate(const QString &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAICurrency_Conversion::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAICurrency_Conversion::is_rate_Valid() const{
    return m_rate_isValid;
}

qint32 OAICurrency_Conversion::getStatus() const {
    return m_status;
}
void OAICurrency_Conversion::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICurrency_Conversion::is_status_Set() const{
    return m_status_isSet;
}

bool OAICurrency_Conversion::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICurrency_Conversion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrency_Conversion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_from_isValid && m_currency_to_isValid && m_rate_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
