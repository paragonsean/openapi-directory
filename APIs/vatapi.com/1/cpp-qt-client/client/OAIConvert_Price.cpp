/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConvert_Price.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConvert_Price::OAIConvert_Price(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConvert_Price::OAIConvert_Price() {
    this->initializeModel();
}

OAIConvert_Price::~OAIConvert_Price() {}

void OAIConvert_Price::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_rate_isSet = false;
    m_country_rate_isValid = false;

    m_price_excl_vat_isSet = false;
    m_price_excl_vat_isValid = false;

    m_price_incl_vat_isSet = false;
    m_price_incl_vat_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;
}

void OAIConvert_Price::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConvert_Price::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_country_rate_isValid = ::OpenAPI::fromJsonValue(m_country_rate, json[QString("country_rate")]);
    m_country_rate_isSet = !json[QString("country_rate")].isNull() && m_country_rate_isValid;

    m_price_excl_vat_isValid = ::OpenAPI::fromJsonValue(m_price_excl_vat, json[QString("price_excl_vat")]);
    m_price_excl_vat_isSet = !json[QString("price_excl_vat")].isNull() && m_price_excl_vat_isValid;

    m_price_incl_vat_isValid = ::OpenAPI::fromJsonValue(m_price_incl_vat, json[QString("price_incl_vat")]);
    m_price_incl_vat_isSet = !json[QString("price_incl_vat")].isNull() && m_price_incl_vat_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;
}

QString OAIConvert_Price::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConvert_Price::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_rate_isSet) {
        obj.insert(QString("country_rate"), ::OpenAPI::toJsonValue(m_country_rate));
    }
    if (m_price_excl_vat_isSet) {
        obj.insert(QString("price_excl_vat"), ::OpenAPI::toJsonValue(m_price_excl_vat));
    }
    if (m_price_incl_vat_isSet) {
        obj.insert(QString("price_incl_vat"), ::OpenAPI::toJsonValue(m_price_incl_vat));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vat_isSet) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(m_vat));
    }
    return obj;
}

QString OAIConvert_Price::getCountryCode() const {
    return m_country_code;
}
void OAIConvert_Price::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIConvert_Price::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIConvert_Price::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIConvert_Price::getCountryRate() const {
    return m_country_rate;
}
void OAIConvert_Price::setCountryRate(const QString &country_rate) {
    m_country_rate = country_rate;
    m_country_rate_isSet = true;
}

bool OAIConvert_Price::is_country_rate_Set() const{
    return m_country_rate_isSet;
}

bool OAIConvert_Price::is_country_rate_Valid() const{
    return m_country_rate_isValid;
}

qint32 OAIConvert_Price::getPriceExclVat() const {
    return m_price_excl_vat;
}
void OAIConvert_Price::setPriceExclVat(const qint32 &price_excl_vat) {
    m_price_excl_vat = price_excl_vat;
    m_price_excl_vat_isSet = true;
}

bool OAIConvert_Price::is_price_excl_vat_Set() const{
    return m_price_excl_vat_isSet;
}

bool OAIConvert_Price::is_price_excl_vat_Valid() const{
    return m_price_excl_vat_isValid;
}

qint32 OAIConvert_Price::getPriceInclVat() const {
    return m_price_incl_vat;
}
void OAIConvert_Price::setPriceInclVat(const qint32 &price_incl_vat) {
    m_price_incl_vat = price_incl_vat;
    m_price_incl_vat_isSet = true;
}

bool OAIConvert_Price::is_price_incl_vat_Set() const{
    return m_price_incl_vat_isSet;
}

bool OAIConvert_Price::is_price_incl_vat_Valid() const{
    return m_price_incl_vat_isValid;
}

qint32 OAIConvert_Price::getRate() const {
    return m_rate;
}
void OAIConvert_Price::setRate(const qint32 &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIConvert_Price::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIConvert_Price::is_rate_Valid() const{
    return m_rate_isValid;
}

qint32 OAIConvert_Price::getStatus() const {
    return m_status;
}
void OAIConvert_Price::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIConvert_Price::is_status_Set() const{
    return m_status_isSet;
}

bool OAIConvert_Price::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIConvert_Price::getVat() const {
    return m_vat;
}
void OAIConvert_Price::setVat(const qint32 &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAIConvert_Price::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIConvert_Price::is_vat_Valid() const{
    return m_vat_isValid;
}

bool OAIConvert_Price::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_excl_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_incl_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConvert_Price::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_code_isValid && m_country_rate_isValid && m_price_excl_vat_isValid && m_price_incl_vat_isValid && m_rate_isValid && m_status_isValid && m_vat_isValid && true;
}

} // namespace OpenAPI
