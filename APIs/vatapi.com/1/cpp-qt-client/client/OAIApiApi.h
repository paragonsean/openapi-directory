/**
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiApi_H
#define OAI_OAIApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_Usage.h"
#include "OAIConvert_Price.h"
#include "OAICountry_Code_Check.h"
#include "OAICreate_Invoice.h"
#include "OAICurrency_Conversion.h"
#include "OAIIP_Check.h"
#include "OAIInvoice_Data.h"
#include "OAIRetrieve_Invoice.h"
#include "OAIUpdate_Invoice.h"
#include "OAIUpdate_Invoice_Array.h"
#include "OAIVat_Rates.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiApi : public QObject {
    Q_OBJECT

public:
    OAIApiApi(const int timeOut = 0);
    ~OAIApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  response_type QString [optional]
    */
    virtual void apiUsage(const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  code QString [required]
    * @param[in]  price qint32 [required]
    * @param[in]  response_type QString [optional]
    * @param[in]  country_rate QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void convertPrice(const QString &code, const qint32 &price, const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_rate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  code QString [required]
    * @param[in]  response_type QString [optional]
    */
    virtual void countryCodeCheck(const QString &code, const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIInvoice_Data [required]
    * @param[in]  response_type QString [optional]
    */
    virtual void createInvoice(const OAIInvoice_Data &body, const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  currency_from QString [required]
    * @param[in]  currency_to QString [required]
    * @param[in]  response_type QString [optional]
    * @param[in]  amount qint32 [optional]
    */
    virtual void currencyConversion(const QString &currency_from, const QString &currency_to, const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &amount = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  response_type QString [optional]
    */
    virtual void getInvoice(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  response_type QString [optional]
    */
    virtual void invoiceDelete(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  body OAIUpdate_Invoice_Array [required]
    * @param[in]  response_type QString [optional]
    */
    virtual void invoiceUpdate(const qint32 &id, const OAIUpdate_Invoice_Array &body, const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  address QString [required]
    * @param[in]  response_type QString [optional]
    */
    virtual void ipCheck(const QString &address, const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vatid QString [required]
    * @param[in]  response_type QString [optional]
    */
    virtual void vatNumberValidate(const QString &vatid, const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  response_type QString [optional]
    */
    virtual void vatRates(const ::OpenAPI::OptionalParam<QString> &response_type = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiUsageCallback(OAIHttpRequestWorker *worker);
    void convertPriceCallback(OAIHttpRequestWorker *worker);
    void countryCodeCheckCallback(OAIHttpRequestWorker *worker);
    void createInvoiceCallback(OAIHttpRequestWorker *worker);
    void currencyConversionCallback(OAIHttpRequestWorker *worker);
    void getInvoiceCallback(OAIHttpRequestWorker *worker);
    void invoiceDeleteCallback(OAIHttpRequestWorker *worker);
    void invoiceUpdateCallback(OAIHttpRequestWorker *worker);
    void ipCheckCallback(OAIHttpRequestWorker *worker);
    void vatNumberValidateCallback(OAIHttpRequestWorker *worker);
    void vatRatesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiUsageSignal(OAIApi_Usage summary);
    void convertPriceSignal(OAIConvert_Price summary);
    void countryCodeCheckSignal(OAICountry_Code_Check summary);
    void createInvoiceSignal(OAICreate_Invoice summary);
    void currencyConversionSignal(OAICurrency_Conversion summary);
    void getInvoiceSignal(OAIRetrieve_Invoice summary);
    void invoiceDeleteSignal();
    void invoiceUpdateSignal(OAIUpdate_Invoice summary);
    void ipCheckSignal(OAIIP_Check summary);
    void vatNumberValidateSignal();
    void vatRatesSignal(OAIVat_Rates summary);


    void apiUsageSignalFull(OAIHttpRequestWorker *worker, OAIApi_Usage summary);
    void convertPriceSignalFull(OAIHttpRequestWorker *worker, OAIConvert_Price summary);
    void countryCodeCheckSignalFull(OAIHttpRequestWorker *worker, OAICountry_Code_Check summary);
    void createInvoiceSignalFull(OAIHttpRequestWorker *worker, OAICreate_Invoice summary);
    void currencyConversionSignalFull(OAIHttpRequestWorker *worker, OAICurrency_Conversion summary);
    void getInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIRetrieve_Invoice summary);
    void invoiceDeleteSignalFull(OAIHttpRequestWorker *worker);
    void invoiceUpdateSignalFull(OAIHttpRequestWorker *worker, OAIUpdate_Invoice summary);
    void ipCheckSignalFull(OAIHttpRequestWorker *worker, OAIIP_Check summary);
    void vatNumberValidateSignalFull(OAIHttpRequestWorker *worker);
    void vatRatesSignalFull(OAIHttpRequestWorker *worker, OAIVat_Rates summary);

    Q_DECL_DEPRECATED_X("Use apiUsageSignalError() instead")
    void apiUsageSignalE(OAIApi_Usage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsageSignalError(OAIApi_Usage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use convertPriceSignalError() instead")
    void convertPriceSignalE(OAIConvert_Price summary, QNetworkReply::NetworkError error_type, QString error_str);
    void convertPriceSignalError(OAIConvert_Price summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countryCodeCheckSignalError() instead")
    void countryCodeCheckSignalE(OAICountry_Code_Check summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countryCodeCheckSignalError(OAICountry_Code_Check summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoiceSignalError() instead")
    void createInvoiceSignalE(OAICreate_Invoice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceSignalError(OAICreate_Invoice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currencyConversionSignalError() instead")
    void currencyConversionSignalE(OAICurrency_Conversion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currencyConversionSignalError(OAICurrency_Conversion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceSignalError() instead")
    void getInvoiceSignalE(OAIRetrieve_Invoice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceSignalError(OAIRetrieve_Invoice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceDeleteSignalError() instead")
    void invoiceDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceUpdateSignalError() instead")
    void invoiceUpdateSignalE(OAIUpdate_Invoice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceUpdateSignalError(OAIUpdate_Invoice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipCheckSignalError() instead")
    void ipCheckSignalE(OAIIP_Check summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipCheckSignalError(OAIIP_Check summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatNumberValidateSignalError() instead")
    void vatNumberValidateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vatNumberValidateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesSignalError() instead")
    void vatRatesSignalE(OAIVat_Rates summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesSignalError(OAIVat_Rates summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiUsageSignalErrorFull() instead")
    void apiUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use convertPriceSignalErrorFull() instead")
    void convertPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void convertPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countryCodeCheckSignalErrorFull() instead")
    void countryCodeCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countryCodeCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoiceSignalErrorFull() instead")
    void createInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currencyConversionSignalErrorFull() instead")
    void currencyConversionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currencyConversionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceSignalErrorFull() instead")
    void getInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceDeleteSignalErrorFull() instead")
    void invoiceDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceUpdateSignalErrorFull() instead")
    void invoiceUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipCheckSignalErrorFull() instead")
    void ipCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatNumberValidateSignalErrorFull() instead")
    void vatNumberValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vatNumberValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vatRatesSignalErrorFull() instead")
    void vatRatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vatRatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
