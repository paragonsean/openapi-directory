/*
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InvoiceItems;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:16.592388-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceData {
  public static final String SERIALIZED_NAME_BUSINESS_ADDRESS = "business_address";
  @SerializedName(SERIALIZED_NAME_BUSINESS_ADDRESS)
  private String businessAddress;

  public static final String SERIALIZED_NAME_BUSINESS_NAME = "business_name";
  @SerializedName(SERIALIZED_NAME_BUSINESS_NAME)
  private String businessName;

  public static final String SERIALIZED_NAME_CONVERSION_RATE = "conversion_rate";
  @SerializedName(SERIALIZED_NAME_CONVERSION_RATE)
  private Integer conversionRate;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE_CONVERSION = "currency_code_conversion";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE_CONVERSION)
  private String currencyCodeConversion;

  public static final String SERIALIZED_NAME_CUSTOMER_ADDRESS = "customer_address";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ADDRESS)
  private String customerAddress;

  public static final String SERIALIZED_NAME_CUSTOMER_NAME = "customer_name";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NAME)
  private String customerName;

  public static final String SERIALIZED_NAME_CUSTOMER_VAT_NUMBER = "customer_vat_number";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_VAT_NUMBER)
  private String customerVatNumber;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DISCOUNT_RATE = "discount_rate";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_RATE)
  private String discountRate;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<InvoiceItems> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PRICE_TYPE = "price_type";
  @SerializedName(SERIALIZED_NAME_PRICE_TYPE)
  private String priceType;

  public static final String SERIALIZED_NAME_TAX_POINT = "tax_point";
  @SerializedName(SERIALIZED_NAME_TAX_POINT)
  private String taxPoint;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VAT_NUMBER = "vat_number";
  @SerializedName(SERIALIZED_NAME_VAT_NUMBER)
  private String vatNumber;

  public static final String SERIALIZED_NAME_ZERO_RATED = "zero_rated";
  @SerializedName(SERIALIZED_NAME_ZERO_RATED)
  private String zeroRated;

  public InvoiceData() {
  }

  public InvoiceData businessAddress(String businessAddress) {
    this.businessAddress = businessAddress;
    return this;
  }

  /**
   * Your business address
   * @return businessAddress
   */
  @javax.annotation.Nonnull
  public String getBusinessAddress() {
    return businessAddress;
  }

  public void setBusinessAddress(String businessAddress) {
    this.businessAddress = businessAddress;
  }


  public InvoiceData businessName(String businessName) {
    this.businessName = businessName;
    return this;
  }

  /**
   * Your business name
   * @return businessName
   */
  @javax.annotation.Nonnull
  public String getBusinessName() {
    return businessName;
  }

  public void setBusinessName(String businessName) {
    this.businessName = businessName;
  }


  public InvoiceData conversionRate(Integer conversionRate) {
    this.conversionRate = conversionRate;
    return this;
  }

  /**
   * The rate of conversion at time of supply
   * @return conversionRate
   */
  @javax.annotation.Nullable
  public Integer getConversionRate() {
    return conversionRate;
  }

  public void setConversionRate(Integer conversionRate) {
    this.conversionRate = conversionRate;
  }


  public InvoiceData currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * 3 character currency code for invoice
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public InvoiceData currencyCodeConversion(String currencyCodeConversion) {
    this.currencyCodeConversion = currencyCodeConversion;
    return this;
  }

  /**
   * 3 character currency code to be converted from original transaction currency
   * @return currencyCodeConversion
   */
  @javax.annotation.Nullable
  public String getCurrencyCodeConversion() {
    return currencyCodeConversion;
  }

  public void setCurrencyCodeConversion(String currencyCodeConversion) {
    this.currencyCodeConversion = currencyCodeConversion;
  }


  public InvoiceData customerAddress(String customerAddress) {
    this.customerAddress = customerAddress;
    return this;
  }

  /**
   * Your customers address
   * @return customerAddress
   */
  @javax.annotation.Nullable
  public String getCustomerAddress() {
    return customerAddress;
  }

  public void setCustomerAddress(String customerAddress) {
    this.customerAddress = customerAddress;
  }


  public InvoiceData customerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  /**
   * Your customers name or trading name
   * @return customerName
   */
  @javax.annotation.Nullable
  public String getCustomerName() {
    return customerName;
  }

  public void setCustomerName(String customerName) {
    this.customerName = customerName;
  }


  public InvoiceData customerVatNumber(String customerVatNumber) {
    this.customerVatNumber = customerVatNumber;
    return this;
  }

  /**
   * Optional customers VAT number
   * @return customerVatNumber
   */
  @javax.annotation.Nullable
  public String getCustomerVatNumber() {
    return customerVatNumber;
  }

  public void setCustomerVatNumber(String customerVatNumber) {
    this.customerVatNumber = customerVatNumber;
  }


  public InvoiceData date(String date) {
    this.date = date;
    return this;
  }

  /**
   * The date the invoice was issued
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public InvoiceData discountRate(String discountRate) {
    this.discountRate = discountRate;
    return this;
  }

  /**
   * The discount rate per item
   * @return discountRate
   */
  @javax.annotation.Nullable
  public String getDiscountRate() {
    return discountRate;
  }

  public void setDiscountRate(String discountRate) {
    this.discountRate = discountRate;
  }


  public InvoiceData items(List<InvoiceItems> items) {
    this.items = items;
    return this;
  }

  public InvoiceData addItemsItem(InvoiceItems itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * An array of your invoice items
   * @return items
   */
  @javax.annotation.Nonnull
  public List<InvoiceItems> getItems() {
    return items;
  }

  public void setItems(List<InvoiceItems> items) {
    this.items = items;
  }


  public InvoiceData notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Add a note to the invoice.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public InvoiceData priceType(String priceType) {
    this.priceType = priceType;
    return this;
  }

  /**
   * Optional, if the price is including VAT set the type to &#39;incl&#39;. Otherwise the default is assumed as excluding VAT already, &#39;excl&#39;
   * @return priceType
   */
  @javax.annotation.Nullable
  public String getPriceType() {
    return priceType;
  }

  public void setPriceType(String priceType) {
    this.priceType = priceType;
  }


  public InvoiceData taxPoint(String taxPoint) {
    this.taxPoint = taxPoint;
    return this;
  }

  /**
   * (or &#39;time of supply&#39;) if this is different from the invoice date
   * @return taxPoint
   */
  @javax.annotation.Nullable
  public String getTaxPoint() {
    return taxPoint;
  }

  public void setTaxPoint(String taxPoint) {
    this.taxPoint = taxPoint;
  }


  public InvoiceData type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of invoice. Either &#39;sale&#39; or &#39;refund&#39;
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public InvoiceData vatNumber(String vatNumber) {
    this.vatNumber = vatNumber;
    return this;
  }

  /**
   * Your VAT number
   * @return vatNumber
   */
  @javax.annotation.Nonnull
  public String getVatNumber() {
    return vatNumber;
  }

  public void setVatNumber(String vatNumber) {
    this.vatNumber = vatNumber;
  }


  public InvoiceData zeroRated(String zeroRated) {
    this.zeroRated = zeroRated;
    return this;
  }

  /**
   * To Zero-Rate the VAT, set to true.
   * @return zeroRated
   */
  @javax.annotation.Nullable
  public String getZeroRated() {
    return zeroRated;
  }

  public void setZeroRated(String zeroRated) {
    this.zeroRated = zeroRated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceData invoiceData = (InvoiceData) o;
    return Objects.equals(this.businessAddress, invoiceData.businessAddress) &&
        Objects.equals(this.businessName, invoiceData.businessName) &&
        Objects.equals(this.conversionRate, invoiceData.conversionRate) &&
        Objects.equals(this.currencyCode, invoiceData.currencyCode) &&
        Objects.equals(this.currencyCodeConversion, invoiceData.currencyCodeConversion) &&
        Objects.equals(this.customerAddress, invoiceData.customerAddress) &&
        Objects.equals(this.customerName, invoiceData.customerName) &&
        Objects.equals(this.customerVatNumber, invoiceData.customerVatNumber) &&
        Objects.equals(this.date, invoiceData.date) &&
        Objects.equals(this.discountRate, invoiceData.discountRate) &&
        Objects.equals(this.items, invoiceData.items) &&
        Objects.equals(this.notes, invoiceData.notes) &&
        Objects.equals(this.priceType, invoiceData.priceType) &&
        Objects.equals(this.taxPoint, invoiceData.taxPoint) &&
        Objects.equals(this.type, invoiceData.type) &&
        Objects.equals(this.vatNumber, invoiceData.vatNumber) &&
        Objects.equals(this.zeroRated, invoiceData.zeroRated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessAddress, businessName, conversionRate, currencyCode, currencyCodeConversion, customerAddress, customerName, customerVatNumber, date, discountRate, items, notes, priceType, taxPoint, type, vatNumber, zeroRated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceData {\n");
    sb.append("    businessAddress: ").append(toIndentedString(businessAddress)).append("\n");
    sb.append("    businessName: ").append(toIndentedString(businessName)).append("\n");
    sb.append("    conversionRate: ").append(toIndentedString(conversionRate)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyCodeConversion: ").append(toIndentedString(currencyCodeConversion)).append("\n");
    sb.append("    customerAddress: ").append(toIndentedString(customerAddress)).append("\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    customerVatNumber: ").append(toIndentedString(customerVatNumber)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    discountRate: ").append(toIndentedString(discountRate)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    taxPoint: ").append(toIndentedString(taxPoint)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vatNumber: ").append(toIndentedString(vatNumber)).append("\n");
    sb.append("    zeroRated: ").append(toIndentedString(zeroRated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("business_address");
    openapiFields.add("business_name");
    openapiFields.add("conversion_rate");
    openapiFields.add("currency_code");
    openapiFields.add("currency_code_conversion");
    openapiFields.add("customer_address");
    openapiFields.add("customer_name");
    openapiFields.add("customer_vat_number");
    openapiFields.add("date");
    openapiFields.add("discount_rate");
    openapiFields.add("items");
    openapiFields.add("notes");
    openapiFields.add("price_type");
    openapiFields.add("tax_point");
    openapiFields.add("type");
    openapiFields.add("vat_number");
    openapiFields.add("zero_rated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("business_address");
    openapiRequiredFields.add("business_name");
    openapiRequiredFields.add("currency_code");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("vat_number");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceData is not found in the empty JSON string", InvoiceData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvoiceData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("business_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `business_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("business_address").toString()));
      }
      if (!jsonObj.get("business_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `business_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("business_name").toString()));
      }
      if (!jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("currency_code_conversion") != null && !jsonObj.get("currency_code_conversion").isJsonNull()) && !jsonObj.get("currency_code_conversion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code_conversion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code_conversion").toString()));
      }
      if ((jsonObj.get("customer_address") != null && !jsonObj.get("customer_address").isJsonNull()) && !jsonObj.get("customer_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_address").toString()));
      }
      if ((jsonObj.get("customer_name") != null && !jsonObj.get("customer_name").isJsonNull()) && !jsonObj.get("customer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_name").toString()));
      }
      if ((jsonObj.get("customer_vat_number") != null && !jsonObj.get("customer_vat_number").isJsonNull()) && !jsonObj.get("customer_vat_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_vat_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_vat_number").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("discount_rate") != null && !jsonObj.get("discount_rate").isJsonNull()) && !jsonObj.get("discount_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount_rate").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        InvoiceItems.validateJsonElement(jsonArrayitems.get(i));
      };
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("price_type") != null && !jsonObj.get("price_type").isJsonNull()) && !jsonObj.get("price_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price_type").toString()));
      }
      if ((jsonObj.get("tax_point") != null && !jsonObj.get("tax_point").isJsonNull()) && !jsonObj.get("tax_point").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_point` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_point").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("vat_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vat_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vat_number").toString()));
      }
      if ((jsonObj.get("zero_rated") != null && !jsonObj.get("zero_rated").isJsonNull()) && !jsonObj.get("zero_rated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zero_rated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zero_rated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceData.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceData>() {
           @Override
           public void write(JsonWriter out, InvoiceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceData
   * @throws IOException if the JSON string is invalid with respect to InvoiceData
   */
  public static InvoiceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceData.class);
  }

  /**
   * Convert an instance of InvoiceData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

