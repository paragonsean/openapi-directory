/*
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConvertPrice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:16.592388-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConvertPrice {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_RATE = "country_rate";
  @SerializedName(SERIALIZED_NAME_COUNTRY_RATE)
  private String countryRate;

  public static final String SERIALIZED_NAME_PRICE_EXCL_VAT = "price_excl_vat";
  @SerializedName(SERIALIZED_NAME_PRICE_EXCL_VAT)
  private Integer priceExclVat;

  public static final String SERIALIZED_NAME_PRICE_INCL_VAT = "price_incl_vat";
  @SerializedName(SERIALIZED_NAME_PRICE_INCL_VAT)
  private Integer priceInclVat;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Integer rate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_VAT = "vat";
  @SerializedName(SERIALIZED_NAME_VAT)
  private Integer vat;

  public ConvertPrice() {
  }

  public ConvertPrice countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The 2 digit country code
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public ConvertPrice countryRate(String countryRate) {
    this.countryRate = countryRate;
    return this;
  }

  /**
   * The country_rate
   * @return countryRate
   */
  @javax.annotation.Nonnull
  public String getCountryRate() {
    return countryRate;
  }

  public void setCountryRate(String countryRate) {
    this.countryRate = countryRate;
  }


  public ConvertPrice priceExclVat(Integer priceExclVat) {
    this.priceExclVat = priceExclVat;
    return this;
  }

  /**
   * The price excluding VAT
   * @return priceExclVat
   */
  @javax.annotation.Nonnull
  public Integer getPriceExclVat() {
    return priceExclVat;
  }

  public void setPriceExclVat(Integer priceExclVat) {
    this.priceExclVat = priceExclVat;
  }


  public ConvertPrice priceInclVat(Integer priceInclVat) {
    this.priceInclVat = priceInclVat;
    return this;
  }

  /**
   * The price including VAT
   * @return priceInclVat
   */
  @javax.annotation.Nonnull
  public Integer getPriceInclVat() {
    return priceInclVat;
  }

  public void setPriceInclVat(Integer priceInclVat) {
    this.priceInclVat = priceInclVat;
  }


  public ConvertPrice rate(Integer rate) {
    this.rate = rate;
    return this;
  }

  /**
   * The rate % for the country_rate
   * @return rate
   */
  @javax.annotation.Nonnull
  public Integer getRate() {
    return rate;
  }

  public void setRate(Integer rate) {
    this.rate = rate;
  }


  public ConvertPrice status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Response code
   * @return status
   */
  @javax.annotation.Nonnull
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public ConvertPrice vat(Integer vat) {
    this.vat = vat;
    return this;
  }

  /**
   * The total amount of VAT applied
   * @return vat
   */
  @javax.annotation.Nonnull
  public Integer getVat() {
    return vat;
  }

  public void setVat(Integer vat) {
    this.vat = vat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertPrice convertPrice = (ConvertPrice) o;
    return Objects.equals(this.countryCode, convertPrice.countryCode) &&
        Objects.equals(this.countryRate, convertPrice.countryRate) &&
        Objects.equals(this.priceExclVat, convertPrice.priceExclVat) &&
        Objects.equals(this.priceInclVat, convertPrice.priceInclVat) &&
        Objects.equals(this.rate, convertPrice.rate) &&
        Objects.equals(this.status, convertPrice.status) &&
        Objects.equals(this.vat, convertPrice.vat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, countryRate, priceExclVat, priceInclVat, rate, status, vat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertPrice {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryRate: ").append(toIndentedString(countryRate)).append("\n");
    sb.append("    priceExclVat: ").append(toIndentedString(priceExclVat)).append("\n");
    sb.append("    priceInclVat: ").append(toIndentedString(priceInclVat)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    vat: ").append(toIndentedString(vat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country_code");
    openapiFields.add("country_rate");
    openapiFields.add("price_excl_vat");
    openapiFields.add("price_incl_vat");
    openapiFields.add("rate");
    openapiFields.add("status");
    openapiFields.add("vat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country_code");
    openapiRequiredFields.add("country_rate");
    openapiRequiredFields.add("price_excl_vat");
    openapiRequiredFields.add("price_incl_vat");
    openapiRequiredFields.add("rate");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("vat");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConvertPrice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConvertPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConvertPrice is not found in the empty JSON string", ConvertPrice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConvertPrice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConvertPrice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConvertPrice.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if (!jsonObj.get("country_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_rate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConvertPrice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConvertPrice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConvertPrice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConvertPrice.class));

       return (TypeAdapter<T>) new TypeAdapter<ConvertPrice>() {
           @Override
           public void write(JsonWriter out, ConvertPrice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConvertPrice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConvertPrice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConvertPrice
   * @throws IOException if the JSON string is invalid with respect to ConvertPrice
   */
  public static ConvertPrice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConvertPrice.class);
  }

  /**
   * Convert an instance of ConvertPrice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

