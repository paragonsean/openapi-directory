/*
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiUsage;
import org.openapitools.client.model.ConvertPrice;
import org.openapitools.client.model.CountryCodeCheck;
import org.openapitools.client.model.CreateInvoice;
import org.openapitools.client.model.CurrencyConversion;
import org.openapitools.client.model.IPCheck;
import org.openapitools.client.model.InvoiceData;
import org.openapitools.client.model.RetrieveInvoice;
import org.openapitools.client.model.UpdateInvoice;
import org.openapitools.client.model.UpdateInvoiceArray;
import org.openapitools.client.model.VatRates;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiUsage
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsageCall(String responseType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage-check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (responseType != null) {
            localVarHeaderParams.put("Response-Type", localVarApiClient.parameterToString(responseType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsageValidateBeforeCall(String responseType, final ApiCallback _callback) throws ApiException {
        return apiUsageCall(responseType, _callback);

    }

    /**
     * Check api requests remaining on current subscription plan
     * 
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return ApiUsage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiUsage apiUsage(String responseType) throws ApiException {
        ApiResponse<ApiUsage> localVarResp = apiUsageWithHttpInfo(responseType);
        return localVarResp.getData();
    }

    /**
     * Check api requests remaining on current subscription plan
     * 
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return ApiResponse&lt;ApiUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiUsage> apiUsageWithHttpInfo(String responseType) throws ApiException {
        okhttp3.Call localVarCall = apiUsageValidateBeforeCall(responseType, null);
        Type localVarReturnType = new TypeToken<ApiUsage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check api requests remaining on current subscription plan (asynchronously)
     * 
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsageAsync(String responseType, final ApiCallback<ApiUsage> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsageValidateBeforeCall(responseType, _callback);
        Type localVarReturnType = new TypeToken<ApiUsage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertPrice
     * @param code The 2 digit country code (required)
     * @param price The price you want converting (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param countryRate The VAT rate to get the price for. Default: standard (optional)
     * @param type Optional, if the price is including VAT set the type to &#39;incl&#39;. Otherwise the default is assumed as excluding VAT already, &#39;excl&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertPriceCall(String code, Integer price, String responseType, String countryRate, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vat-price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (countryRate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_rate", countryRate));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (responseType != null) {
            localVarHeaderParams.put("Response-Type", localVarApiClient.parameterToString(responseType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertPriceValidateBeforeCall(String code, Integer price, String responseType, String countryRate, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling convertPrice(Async)");
        }

        // verify the required parameter 'price' is set
        if (price == null) {
            throw new ApiException("Missing the required parameter 'price' when calling convertPrice(Async)");
        }

        return convertPriceCall(code, price, responseType, countryRate, type, _callback);

    }

    /**
     * Convert a price to or from VAT price.
     * 
     * @param code The 2 digit country code (required)
     * @param price The price you want converting (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param countryRate The VAT rate to get the price for. Default: standard (optional)
     * @param type Optional, if the price is including VAT set the type to &#39;incl&#39;. Otherwise the default is assumed as excluding VAT already, &#39;excl&#39; (optional)
     * @return ConvertPrice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ConvertPrice convertPrice(String code, Integer price, String responseType, String countryRate, String type) throws ApiException {
        ApiResponse<ConvertPrice> localVarResp = convertPriceWithHttpInfo(code, price, responseType, countryRate, type);
        return localVarResp.getData();
    }

    /**
     * Convert a price to or from VAT price.
     * 
     * @param code The 2 digit country code (required)
     * @param price The price you want converting (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param countryRate The VAT rate to get the price for. Default: standard (optional)
     * @param type Optional, if the price is including VAT set the type to &#39;incl&#39;. Otherwise the default is assumed as excluding VAT already, &#39;excl&#39; (optional)
     * @return ApiResponse&lt;ConvertPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConvertPrice> convertPriceWithHttpInfo(String code, Integer price, String responseType, String countryRate, String type) throws ApiException {
        okhttp3.Call localVarCall = convertPriceValidateBeforeCall(code, price, responseType, countryRate, type, null);
        Type localVarReturnType = new TypeToken<ConvertPrice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert a price to or from VAT price. (asynchronously)
     * 
     * @param code The 2 digit country code (required)
     * @param price The price you want converting (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param countryRate The VAT rate to get the price for. Default: standard (optional)
     * @param type Optional, if the price is including VAT set the type to &#39;incl&#39;. Otherwise the default is assumed as excluding VAT already, &#39;excl&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertPriceAsync(String code, Integer price, String responseType, String countryRate, String type, final ApiCallback<ConvertPrice> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertPriceValidateBeforeCall(code, price, responseType, countryRate, type, _callback);
        Type localVarReturnType = new TypeToken<ConvertPrice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countryCodeCheck
     * @param code The 2 digit country code (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countryCodeCheckCall(String code, String responseType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/country-code-check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (responseType != null) {
            localVarHeaderParams.put("Response-Type", localVarApiClient.parameterToString(responseType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countryCodeCheckValidateBeforeCall(String code, String responseType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling countryCodeCheck(Async)");
        }

        return countryCodeCheckCall(code, responseType, _callback);

    }

    /**
     * Retrieve a countries VAT rates by its 2 digit country code
     * 
     * @param code The 2 digit country code (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return CountryCodeCheck
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public CountryCodeCheck countryCodeCheck(String code, String responseType) throws ApiException {
        ApiResponse<CountryCodeCheck> localVarResp = countryCodeCheckWithHttpInfo(code, responseType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a countries VAT rates by its 2 digit country code
     * 
     * @param code The 2 digit country code (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return ApiResponse&lt;CountryCodeCheck&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CountryCodeCheck> countryCodeCheckWithHttpInfo(String code, String responseType) throws ApiException {
        okhttp3.Call localVarCall = countryCodeCheckValidateBeforeCall(code, responseType, null);
        Type localVarReturnType = new TypeToken<CountryCodeCheck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a countries VAT rates by its 2 digit country code (asynchronously)
     * 
     * @param code The 2 digit country code (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countryCodeCheckAsync(String code, String responseType, final ApiCallback<CountryCodeCheck> _callback) throws ApiException {

        okhttp3.Call localVarCall = countryCodeCheckValidateBeforeCall(code, responseType, _callback);
        Type localVarReturnType = new TypeToken<CountryCodeCheck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createInvoice
     * @param body Enter invoice data as JSON (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvoiceCall(InvoiceData body, String responseType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/invoice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (responseType != null) {
            localVarHeaderParams.put("Response-Type", localVarApiClient.parameterToString(responseType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvoiceValidateBeforeCall(InvoiceData body, String responseType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createInvoice(Async)");
        }

        return createInvoiceCall(body, responseType, _callback);

    }

    /**
     * Create a VAT invoice
     * 
     * @param body Enter invoice data as JSON (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return CreateInvoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public CreateInvoice createInvoice(InvoiceData body, String responseType) throws ApiException {
        ApiResponse<CreateInvoice> localVarResp = createInvoiceWithHttpInfo(body, responseType);
        return localVarResp.getData();
    }

    /**
     * Create a VAT invoice
     * 
     * @param body Enter invoice data as JSON (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return ApiResponse&lt;CreateInvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateInvoice> createInvoiceWithHttpInfo(InvoiceData body, String responseType) throws ApiException {
        okhttp3.Call localVarCall = createInvoiceValidateBeforeCall(body, responseType, null);
        Type localVarReturnType = new TypeToken<CreateInvoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a VAT invoice (asynchronously)
     * 
     * @param body Enter invoice data as JSON (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvoiceAsync(InvoiceData body, String responseType, final ApiCallback<CreateInvoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInvoiceValidateBeforeCall(body, responseType, _callback);
        Type localVarReturnType = new TypeToken<CreateInvoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currencyConversion
     * @param currencyFrom The currency code you are converting from (required)
     * @param currencyTo The currency code you are converting to (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param amount Optional, an amount you are wanting to convert. Leave blank to just get the current rate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currencyConversionCall(String currencyFrom, String currencyTo, String responseType, Integer amount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/currency-conversion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currencyFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_from", currencyFrom));
        }

        if (currencyTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_to", currencyTo));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (responseType != null) {
            localVarHeaderParams.put("Response-Type", localVarApiClient.parameterToString(responseType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currencyConversionValidateBeforeCall(String currencyFrom, String currencyTo, String responseType, Integer amount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currencyFrom' is set
        if (currencyFrom == null) {
            throw new ApiException("Missing the required parameter 'currencyFrom' when calling currencyConversion(Async)");
        }

        // verify the required parameter 'currencyTo' is set
        if (currencyTo == null) {
            throw new ApiException("Missing the required parameter 'currencyTo' when calling currencyConversion(Async)");
        }

        return currencyConversionCall(currencyFrom, currencyTo, responseType, amount, _callback);

    }

    /**
     * Convert a currency
     * 
     * @param currencyFrom The currency code you are converting from (required)
     * @param currencyTo The currency code you are converting to (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param amount Optional, an amount you are wanting to convert. Leave blank to just get the current rate (optional)
     * @return CurrencyConversion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public CurrencyConversion currencyConversion(String currencyFrom, String currencyTo, String responseType, Integer amount) throws ApiException {
        ApiResponse<CurrencyConversion> localVarResp = currencyConversionWithHttpInfo(currencyFrom, currencyTo, responseType, amount);
        return localVarResp.getData();
    }

    /**
     * Convert a currency
     * 
     * @param currencyFrom The currency code you are converting from (required)
     * @param currencyTo The currency code you are converting to (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param amount Optional, an amount you are wanting to convert. Leave blank to just get the current rate (optional)
     * @return ApiResponse&lt;CurrencyConversion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrencyConversion> currencyConversionWithHttpInfo(String currencyFrom, String currencyTo, String responseType, Integer amount) throws ApiException {
        okhttp3.Call localVarCall = currencyConversionValidateBeforeCall(currencyFrom, currencyTo, responseType, amount, null);
        Type localVarReturnType = new TypeToken<CurrencyConversion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert a currency (asynchronously)
     * 
     * @param currencyFrom The currency code you are converting from (required)
     * @param currencyTo The currency code you are converting to (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param amount Optional, an amount you are wanting to convert. Leave blank to just get the current rate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currencyConversionAsync(String currencyFrom, String currencyTo, String responseType, Integer amount, final ApiCallback<CurrencyConversion> _callback) throws ApiException {

        okhttp3.Call localVarCall = currencyConversionValidateBeforeCall(currencyFrom, currencyTo, responseType, amount, _callback);
        Type localVarReturnType = new TypeToken<CurrencyConversion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoice
     * @param id Enter the invoice id (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceCall(Integer id, String responseType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (responseType != null) {
            localVarHeaderParams.put("Response-Type", localVarApiClient.parameterToString(responseType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceValidateBeforeCall(Integer id, String responseType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInvoice(Async)");
        }

        return getInvoiceCall(id, responseType, _callback);

    }

    /**
     * Retrieve an invoice
     * 
     * @param id Enter the invoice id (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return RetrieveInvoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveInvoice getInvoice(Integer id, String responseType) throws ApiException {
        ApiResponse<RetrieveInvoice> localVarResp = getInvoiceWithHttpInfo(id, responseType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an invoice
     * 
     * @param id Enter the invoice id (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return ApiResponse&lt;RetrieveInvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveInvoice> getInvoiceWithHttpInfo(Integer id, String responseType) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceValidateBeforeCall(id, responseType, null);
        Type localVarReturnType = new TypeToken<RetrieveInvoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an invoice (asynchronously)
     * 
     * @param id Enter the invoice id (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAsync(Integer id, String responseType, final ApiCallback<RetrieveInvoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceValidateBeforeCall(id, responseType, _callback);
        Type localVarReturnType = new TypeToken<RetrieveInvoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceDelete
     * @param id Enter an invoice id (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceDeleteCall(Integer id, String responseType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (responseType != null) {
            localVarHeaderParams.put("Response-Type", localVarApiClient.parameterToString(responseType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceDeleteValidateBeforeCall(Integer id, String responseType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling invoiceDelete(Async)");
        }

        return invoiceDeleteCall(id, responseType, _callback);

    }

    /**
     * Delete an invoice
     * 
     * @param id Enter an invoice id (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void invoiceDelete(Integer id, String responseType) throws ApiException {
        invoiceDeleteWithHttpInfo(id, responseType);
    }

    /**
     * Delete an invoice
     * 
     * @param id Enter an invoice id (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> invoiceDeleteWithHttpInfo(Integer id, String responseType) throws ApiException {
        okhttp3.Call localVarCall = invoiceDeleteValidateBeforeCall(id, responseType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an invoice (asynchronously)
     * 
     * @param id Enter an invoice id (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceDeleteAsync(Integer id, String responseType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceDeleteValidateBeforeCall(id, responseType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceUpdate
     * @param id Enter an invoice id (required)
     * @param body Enter invoice data as JSON (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceUpdateCall(Integer id, UpdateInvoiceArray body, String responseType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/invoice/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (responseType != null) {
            localVarHeaderParams.put("Response-Type", localVarApiClient.parameterToString(responseType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceUpdateValidateBeforeCall(Integer id, UpdateInvoiceArray body, String responseType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling invoiceUpdate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling invoiceUpdate(Async)");
        }

        return invoiceUpdateCall(id, body, responseType, _callback);

    }

    /**
     * Update an existing invoice
     * 
     * @param id Enter an invoice id (required)
     * @param body Enter invoice data as JSON (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return UpdateInvoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInvoice invoiceUpdate(Integer id, UpdateInvoiceArray body, String responseType) throws ApiException {
        ApiResponse<UpdateInvoice> localVarResp = invoiceUpdateWithHttpInfo(id, body, responseType);
        return localVarResp.getData();
    }

    /**
     * Update an existing invoice
     * 
     * @param id Enter an invoice id (required)
     * @param body Enter invoice data as JSON (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return ApiResponse&lt;UpdateInvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateInvoice> invoiceUpdateWithHttpInfo(Integer id, UpdateInvoiceArray body, String responseType) throws ApiException {
        okhttp3.Call localVarCall = invoiceUpdateValidateBeforeCall(id, body, responseType, null);
        Type localVarReturnType = new TypeToken<UpdateInvoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing invoice (asynchronously)
     * 
     * @param id Enter an invoice id (required)
     * @param body Enter invoice data as JSON (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceUpdateAsync(Integer id, UpdateInvoiceArray body, String responseType, final ApiCallback<UpdateInvoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceUpdateValidateBeforeCall(id, body, responseType, _callback);
        Type localVarReturnType = new TypeToken<UpdateInvoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipCheck
     * @param address The IP address to search against (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipCheckCall(String address, String responseType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ip-check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (responseType != null) {
            localVarHeaderParams.put("Response-Type", localVarApiClient.parameterToString(responseType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipCheckValidateBeforeCall(String address, String responseType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling ipCheck(Async)");
        }

        return ipCheckCall(address, responseType, _callback);

    }

    /**
     * Retrieve a countries VAT rates from an IP address
     * 
     * @param address The IP address to search against (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return IPCheck
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public IPCheck ipCheck(String address, String responseType) throws ApiException {
        ApiResponse<IPCheck> localVarResp = ipCheckWithHttpInfo(address, responseType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a countries VAT rates from an IP address
     * 
     * @param address The IP address to search against (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return ApiResponse&lt;IPCheck&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IPCheck> ipCheckWithHttpInfo(String address, String responseType) throws ApiException {
        okhttp3.Call localVarCall = ipCheckValidateBeforeCall(address, responseType, null);
        Type localVarReturnType = new TypeToken<IPCheck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a countries VAT rates from an IP address (asynchronously)
     * 
     * @param address The IP address to search against (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipCheckAsync(String address, String responseType, final ApiCallback<IPCheck> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipCheckValidateBeforeCall(address, responseType, _callback);
        Type localVarReturnType = new TypeToken<IPCheck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vatNumberValidate
     * @param vatid The VAT number to validate (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatNumberValidateCall(String vatid, String responseType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vat-number-check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vatid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vatid", vatid));
        }

        if (responseType != null) {
            localVarHeaderParams.put("Response-Type", localVarApiClient.parameterToString(responseType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vatNumberValidateValidateBeforeCall(String vatid, String responseType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vatid' is set
        if (vatid == null) {
            throw new ApiException("Missing the required parameter 'vatid' when calling vatNumberValidate(Async)");
        }

        return vatNumberValidateCall(vatid, responseType, _callback);

    }

    /**
     * Validate a VAT number
     * &lt;p&gt;We highly recommend if you are able, to check a VAT number on your end first to save wasted API lookups. It maybe that your customer has simply entered the wrong format. &lt;a href&#x3D;&#39;http://www.braemoor.co.uk/software/vat.shtml&#39; target&#x3D;&#39;_blank&#39;&gt;Heres a client side way to check the format using Javascript&lt;/a&gt;&lt;/p&gt;
     * @param vatid The VAT number to validate (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void vatNumberValidate(String vatid, String responseType) throws ApiException {
        vatNumberValidateWithHttpInfo(vatid, responseType);
    }

    /**
     * Validate a VAT number
     * &lt;p&gt;We highly recommend if you are able, to check a VAT number on your end first to save wasted API lookups. It maybe that your customer has simply entered the wrong format. &lt;a href&#x3D;&#39;http://www.braemoor.co.uk/software/vat.shtml&#39; target&#x3D;&#39;_blank&#39;&gt;Heres a client side way to check the format using Javascript&lt;/a&gt;&lt;/p&gt;
     * @param vatid The VAT number to validate (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vatNumberValidateWithHttpInfo(String vatid, String responseType) throws ApiException {
        okhttp3.Call localVarCall = vatNumberValidateValidateBeforeCall(vatid, responseType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate a VAT number (asynchronously)
     * &lt;p&gt;We highly recommend if you are able, to check a VAT number on your end first to save wasted API lookups. It maybe that your customer has simply entered the wrong format. &lt;a href&#x3D;&#39;http://www.braemoor.co.uk/software/vat.shtml&#39; target&#x3D;&#39;_blank&#39;&gt;Heres a client side way to check the format using Javascript&lt;/a&gt;&lt;/p&gt;
     * @param vatid The VAT number to validate (required)
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatNumberValidateAsync(String vatid, String responseType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vatNumberValidateValidateBeforeCall(vatid, responseType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vatRates
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatRatesCall(String responseType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vat-rates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (responseType != null) {
            localVarHeaderParams.put("Response-Type", localVarApiClient.parameterToString(responseType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vatRatesValidateBeforeCall(String responseType, final ApiCallback _callback) throws ApiException {
        return vatRatesCall(responseType, _callback);

    }

    /**
     * Retrieve all current EU VAT rates
     * 
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return VatRates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public VatRates vatRates(String responseType) throws ApiException {
        ApiResponse<VatRates> localVarResp = vatRatesWithHttpInfo(responseType);
        return localVarResp.getData();
    }

    /**
     * Retrieve all current EU VAT rates
     * 
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @return ApiResponse&lt;VatRates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VatRates> vatRatesWithHttpInfo(String responseType) throws ApiException {
        okhttp3.Call localVarCall = vatRatesValidateBeforeCall(responseType, null);
        Type localVarReturnType = new TypeToken<VatRates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all current EU VAT rates (asynchronously)
     * 
     * @param responseType The default response type is application/json if you would like to receive an XML response then set this to XML (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vatRatesAsync(String responseType, final ApiCallback<VatRates> _callback) throws ApiException {

        okhttp3.Call localVarCall = vatRatesValidateBeforeCall(responseType, _callback);
        Type localVarReturnType = new TypeToken<VatRates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
