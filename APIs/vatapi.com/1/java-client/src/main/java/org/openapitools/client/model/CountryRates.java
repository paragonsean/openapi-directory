/*
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Parking;
import org.openapitools.client.model.Reduced;
import org.openapitools.client.model.ReducedAlt;
import org.openapitools.client.model.Standard;
import org.openapitools.client.model.SuperReduced;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CountryRates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:16.592388-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CountryRates {
  public static final String SERIALIZED_NAME_PARKING = "parking";
  @SerializedName(SERIALIZED_NAME_PARKING)
  private Parking parking;

  public static final String SERIALIZED_NAME_REDUCED = "reduced";
  @SerializedName(SERIALIZED_NAME_REDUCED)
  private Reduced reduced;

  public static final String SERIALIZED_NAME_REDUCED_ALT = "reduced_alt";
  @SerializedName(SERIALIZED_NAME_REDUCED_ALT)
  private ReducedAlt reducedAlt;

  public static final String SERIALIZED_NAME_STANDARD = "standard";
  @SerializedName(SERIALIZED_NAME_STANDARD)
  private Standard standard;

  public static final String SERIALIZED_NAME_SUPER_REDUCED = "super_reduced";
  @SerializedName(SERIALIZED_NAME_SUPER_REDUCED)
  private SuperReduced superReduced;

  public CountryRates() {
  }

  public CountryRates parking(Parking parking) {
    this.parking = parking;
    return this;
  }

  /**
   * Get parking
   * @return parking
   */
  @javax.annotation.Nonnull
  public Parking getParking() {
    return parking;
  }

  public void setParking(Parking parking) {
    this.parking = parking;
  }


  public CountryRates reduced(Reduced reduced) {
    this.reduced = reduced;
    return this;
  }

  /**
   * Get reduced
   * @return reduced
   */
  @javax.annotation.Nonnull
  public Reduced getReduced() {
    return reduced;
  }

  public void setReduced(Reduced reduced) {
    this.reduced = reduced;
  }


  public CountryRates reducedAlt(ReducedAlt reducedAlt) {
    this.reducedAlt = reducedAlt;
    return this;
  }

  /**
   * Get reducedAlt
   * @return reducedAlt
   */
  @javax.annotation.Nonnull
  public ReducedAlt getReducedAlt() {
    return reducedAlt;
  }

  public void setReducedAlt(ReducedAlt reducedAlt) {
    this.reducedAlt = reducedAlt;
  }


  public CountryRates standard(Standard standard) {
    this.standard = standard;
    return this;
  }

  /**
   * Get standard
   * @return standard
   */
  @javax.annotation.Nonnull
  public Standard getStandard() {
    return standard;
  }

  public void setStandard(Standard standard) {
    this.standard = standard;
  }


  public CountryRates superReduced(SuperReduced superReduced) {
    this.superReduced = superReduced;
    return this;
  }

  /**
   * Get superReduced
   * @return superReduced
   */
  @javax.annotation.Nonnull
  public SuperReduced getSuperReduced() {
    return superReduced;
  }

  public void setSuperReduced(SuperReduced superReduced) {
    this.superReduced = superReduced;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountryRates countryRates = (CountryRates) o;
    return Objects.equals(this.parking, countryRates.parking) &&
        Objects.equals(this.reduced, countryRates.reduced) &&
        Objects.equals(this.reducedAlt, countryRates.reducedAlt) &&
        Objects.equals(this.standard, countryRates.standard) &&
        Objects.equals(this.superReduced, countryRates.superReduced);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parking, reduced, reducedAlt, standard, superReduced);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountryRates {\n");
    sb.append("    parking: ").append(toIndentedString(parking)).append("\n");
    sb.append("    reduced: ").append(toIndentedString(reduced)).append("\n");
    sb.append("    reducedAlt: ").append(toIndentedString(reducedAlt)).append("\n");
    sb.append("    standard: ").append(toIndentedString(standard)).append("\n");
    sb.append("    superReduced: ").append(toIndentedString(superReduced)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("parking");
    openapiFields.add("reduced");
    openapiFields.add("reduced_alt");
    openapiFields.add("standard");
    openapiFields.add("super_reduced");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("parking");
    openapiRequiredFields.add("reduced");
    openapiRequiredFields.add("reduced_alt");
    openapiRequiredFields.add("standard");
    openapiRequiredFields.add("super_reduced");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CountryRates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CountryRates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CountryRates is not found in the empty JSON string", CountryRates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CountryRates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CountryRates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CountryRates.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `parking`
      Parking.validateJsonElement(jsonObj.get("parking"));
      // validate the required field `reduced`
      Reduced.validateJsonElement(jsonObj.get("reduced"));
      // validate the required field `reduced_alt`
      ReducedAlt.validateJsonElement(jsonObj.get("reduced_alt"));
      // validate the required field `standard`
      Standard.validateJsonElement(jsonObj.get("standard"));
      // validate the required field `super_reduced`
      SuperReduced.validateJsonElement(jsonObj.get("super_reduced"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CountryRates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CountryRates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CountryRates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CountryRates.class));

       return (TypeAdapter<T>) new TypeAdapter<CountryRates>() {
           @Override
           public void write(JsonWriter out, CountryRates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CountryRates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CountryRates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CountryRates
   * @throws IOException if the JSON string is invalid with respect to CountryRates
   */
  public static CountryRates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CountryRates.class);
  }

  /**
   * Convert an instance of CountryRates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

