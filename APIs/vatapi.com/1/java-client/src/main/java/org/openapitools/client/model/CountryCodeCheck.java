/*
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CountryRates;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CountryCodeCheck
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:16.592388-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CountryCodeCheck {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private CountryRates rates;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_VAT_APPLIES = "vat_applies";
  @SerializedName(SERIALIZED_NAME_VAT_APPLIES)
  private String vatApplies;

  public CountryCodeCheck() {
  }

  public CountryCodeCheck country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country name
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public CountryCodeCheck countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The 2 digit country code
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public CountryCodeCheck rates(CountryRates rates) {
    this.rates = rates;
    return this;
  }

  /**
   * Get rates
   * @return rates
   */
  @javax.annotation.Nonnull
  public CountryRates getRates() {
    return rates;
  }

  public void setRates(CountryRates rates) {
    this.rates = rates;
  }


  public CountryCodeCheck status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Response code
   * @return status
   */
  @javax.annotation.Nonnull
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public CountryCodeCheck vatApplies(String vatApplies) {
    this.vatApplies = vatApplies;
    return this;
  }

  /**
   * TRUE or FALSE, depending if country is within the EU.
   * @return vatApplies
   */
  @javax.annotation.Nonnull
  public String getVatApplies() {
    return vatApplies;
  }

  public void setVatApplies(String vatApplies) {
    this.vatApplies = vatApplies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountryCodeCheck countryCodeCheck = (CountryCodeCheck) o;
    return Objects.equals(this.country, countryCodeCheck.country) &&
        Objects.equals(this.countryCode, countryCodeCheck.countryCode) &&
        Objects.equals(this.rates, countryCodeCheck.rates) &&
        Objects.equals(this.status, countryCodeCheck.status) &&
        Objects.equals(this.vatApplies, countryCodeCheck.vatApplies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, countryCode, rates, status, vatApplies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountryCodeCheck {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    vatApplies: ").append(toIndentedString(vatApplies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("country_code");
    openapiFields.add("rates");
    openapiFields.add("status");
    openapiFields.add("vat_applies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("country_code");
    openapiRequiredFields.add("rates");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("vat_applies");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CountryCodeCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CountryCodeCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CountryCodeCheck is not found in the empty JSON string", CountryCodeCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CountryCodeCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CountryCodeCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CountryCodeCheck.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      // validate the required field `rates`
      CountryRates.validateJsonElement(jsonObj.get("rates"));
      if (!jsonObj.get("vat_applies").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vat_applies` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vat_applies").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CountryCodeCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CountryCodeCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CountryCodeCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CountryCodeCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<CountryCodeCheck>() {
           @Override
           public void write(JsonWriter out, CountryCodeCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CountryCodeCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CountryCodeCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CountryCodeCheck
   * @throws IOException if the JSON string is invalid with respect to CountryCodeCheck
   */
  public static CountryCodeCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CountryCodeCheck.class);
  }

  /**
   * Convert an instance of CountryCodeCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

