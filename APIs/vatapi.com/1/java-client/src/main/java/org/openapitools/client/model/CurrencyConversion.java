/*
 * VAT API
 * A developer friendly API to help your business achieve VAT compliance
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CurrencyConversion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:16.592388-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CurrencyConversion {
  public static final String SERIALIZED_NAME_AMOUNT_FROM = "amount_from";
  @SerializedName(SERIALIZED_NAME_AMOUNT_FROM)
  private String amountFrom;

  public static final String SERIALIZED_NAME_AMOUNT_TO = "amount_to";
  @SerializedName(SERIALIZED_NAME_AMOUNT_TO)
  private String amountTo;

  public static final String SERIALIZED_NAME_CURRENCY_FROM = "currency_from";
  @SerializedName(SERIALIZED_NAME_CURRENCY_FROM)
  private String currencyFrom;

  public static final String SERIALIZED_NAME_CURRENCY_TO = "currency_to";
  @SerializedName(SERIALIZED_NAME_CURRENCY_TO)
  private Integer currencyTo;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private String rate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public CurrencyConversion() {
  }

  public CurrencyConversion amountFrom(String amountFrom) {
    this.amountFrom = amountFrom;
    return this;
  }

  /**
   * The amount you are converting from
   * @return amountFrom
   */
  @javax.annotation.Nullable
  public String getAmountFrom() {
    return amountFrom;
  }

  public void setAmountFrom(String amountFrom) {
    this.amountFrom = amountFrom;
  }


  public CurrencyConversion amountTo(String amountTo) {
    this.amountTo = amountTo;
    return this;
  }

  /**
   * The result amount you have converted to
   * @return amountTo
   */
  @javax.annotation.Nullable
  public String getAmountTo() {
    return amountTo;
  }

  public void setAmountTo(String amountTo) {
    this.amountTo = amountTo;
  }


  public CurrencyConversion currencyFrom(String currencyFrom) {
    this.currencyFrom = currencyFrom;
    return this;
  }

  /**
   * The currency code you are converting from
   * @return currencyFrom
   */
  @javax.annotation.Nonnull
  public String getCurrencyFrom() {
    return currencyFrom;
  }

  public void setCurrencyFrom(String currencyFrom) {
    this.currencyFrom = currencyFrom;
  }


  public CurrencyConversion currencyTo(Integer currencyTo) {
    this.currencyTo = currencyTo;
    return this;
  }

  /**
   * The currency code you are converting to
   * @return currencyTo
   */
  @javax.annotation.Nonnull
  public Integer getCurrencyTo() {
    return currencyTo;
  }

  public void setCurrencyTo(Integer currencyTo) {
    this.currencyTo = currencyTo;
  }


  public CurrencyConversion rate(String rate) {
    this.rate = rate;
    return this;
  }

  /**
   * The rate according to HMRC at time of sale
   * @return rate
   */
  @javax.annotation.Nonnull
  public String getRate() {
    return rate;
  }

  public void setRate(String rate) {
    this.rate = rate;
  }


  public CurrencyConversion status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Response code
   * @return status
   */
  @javax.annotation.Nonnull
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyConversion currencyConversion = (CurrencyConversion) o;
    return Objects.equals(this.amountFrom, currencyConversion.amountFrom) &&
        Objects.equals(this.amountTo, currencyConversion.amountTo) &&
        Objects.equals(this.currencyFrom, currencyConversion.currencyFrom) &&
        Objects.equals(this.currencyTo, currencyConversion.currencyTo) &&
        Objects.equals(this.rate, currencyConversion.rate) &&
        Objects.equals(this.status, currencyConversion.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountFrom, amountTo, currencyFrom, currencyTo, rate, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyConversion {\n");
    sb.append("    amountFrom: ").append(toIndentedString(amountFrom)).append("\n");
    sb.append("    amountTo: ").append(toIndentedString(amountTo)).append("\n");
    sb.append("    currencyFrom: ").append(toIndentedString(currencyFrom)).append("\n");
    sb.append("    currencyTo: ").append(toIndentedString(currencyTo)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount_from");
    openapiFields.add("amount_to");
    openapiFields.add("currency_from");
    openapiFields.add("currency_to");
    openapiFields.add("rate");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency_from");
    openapiRequiredFields.add("currency_to");
    openapiRequiredFields.add("rate");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurrencyConversion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurrencyConversion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrencyConversion is not found in the empty JSON string", CurrencyConversion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurrencyConversion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrencyConversion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CurrencyConversion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amount_from") != null && !jsonObj.get("amount_from").isJsonNull()) && !jsonObj.get("amount_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount_from").toString()));
      }
      if ((jsonObj.get("amount_to") != null && !jsonObj.get("amount_to").isJsonNull()) && !jsonObj.get("amount_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount_to").toString()));
      }
      if (!jsonObj.get("currency_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_from").toString()));
      }
      if (!jsonObj.get("rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrencyConversion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrencyConversion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrencyConversion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrencyConversion.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrencyConversion>() {
           @Override
           public void write(JsonWriter out, CurrencyConversion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrencyConversion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurrencyConversion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrencyConversion
   * @throws IOException if the JSON string is invalid with respect to CurrencyConversion
   */
  public static CurrencyConversion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrencyConversion.class);
  }

  /**
   * Convert an instance of CurrencyConversion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

