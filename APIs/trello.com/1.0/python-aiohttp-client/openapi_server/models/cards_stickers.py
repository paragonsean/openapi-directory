# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardsStickers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image: str=None, left: str=None, rotate: str=None, top: str=None, z_index: str=None):
        """CardsStickers - a model defined in OpenAPI

        :param image: The image of this CardsStickers.
        :param left: The left of this CardsStickers.
        :param rotate: The rotate of this CardsStickers.
        :param top: The top of this CardsStickers.
        :param z_index: The z_index of this CardsStickers.
        """
        self.openapi_types = {
            'image': str,
            'left': str,
            'rotate': str,
            'top': str,
            'z_index': str
        }

        self.attribute_map = {
            'image': 'image',
            'left': 'left',
            'rotate': 'rotate',
            'top': 'top',
            'z_index': 'zIndex'
        }

        self._image = image
        self._left = left
        self._rotate = rotate
        self._top = top
        self._z_index = z_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardsStickers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cards_stickers of this CardsStickers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image(self):
        """Gets the image of this CardsStickers.

        a string with a length from 0 to 16384

        :return: The image of this CardsStickers.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this CardsStickers.

        a string with a length from 0 to 16384

        :param image: The image of this CardsStickers.
        :type image: str
        """

        self._image = image

    @property
    def left(self):
        """Gets the left of this CardsStickers.

        undefined

        :return: The left of this CardsStickers.
        :rtype: str
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this CardsStickers.

        undefined

        :param left: The left of this CardsStickers.
        :type left: str
        """

        self._left = left

    @property
    def rotate(self):
        """Gets the rotate of this CardsStickers.

        undefined

        :return: The rotate of this CardsStickers.
        :rtype: str
        """
        return self._rotate

    @rotate.setter
    def rotate(self, rotate):
        """Sets the rotate of this CardsStickers.

        undefined

        :param rotate: The rotate of this CardsStickers.
        :type rotate: str
        """

        self._rotate = rotate

    @property
    def top(self):
        """Gets the top of this CardsStickers.

        undefined

        :return: The top of this CardsStickers.
        :rtype: str
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this CardsStickers.

        undefined

        :param top: The top of this CardsStickers.
        :type top: str
        """

        self._top = top

    @property
    def z_index(self):
        """Gets the z_index of this CardsStickers.

        Valid Z values for stickers, must be an integer

        :return: The z_index of this CardsStickers.
        :rtype: str
        """
        return self._z_index

    @z_index.setter
    def z_index(self, z_index):
        """Sets the z_index of this CardsStickers.

        Valid Z values for stickers, must be an integer

        :param z_index: The z_index of this CardsStickers.
        :type z_index: str
        """

        self._z_index = z_index
