# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Lists(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed: str=None, id_board: str=None, id_list_source: str=None, name: str=None, pos: str=None, subscribed: str=None):
        """Lists - a model defined in OpenAPI

        :param closed: The closed of this Lists.
        :param id_board: The id_board of this Lists.
        :param id_list_source: The id_list_source of this Lists.
        :param name: The name of this Lists.
        :param pos: The pos of this Lists.
        :param subscribed: The subscribed of this Lists.
        """
        self.openapi_types = {
            'closed': str,
            'id_board': str,
            'id_list_source': str,
            'name': str,
            'pos': str,
            'subscribed': str
        }

        self.attribute_map = {
            'closed': 'closed',
            'id_board': 'idBoard',
            'id_list_source': 'idListSource',
            'name': 'name',
            'pos': 'pos',
            'subscribed': 'subscribed'
        }

        self._closed = closed
        self._id_board = id_board
        self._id_list_source = id_list_source
        self._name = name
        self._pos = pos
        self._subscribed = subscribed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Lists':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The lists of this Lists.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed(self):
        """Gets the closed of this Lists.

         true or false

        :return: The closed of this Lists.
        :rtype: str
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Lists.

         true or false

        :param closed: The closed of this Lists.
        :type closed: str
        """

        self._closed = closed

    @property
    def id_board(self):
        """Gets the id_board of this Lists.

        id of the board that the list should be added to

        :return: The id_board of this Lists.
        :rtype: str
        """
        return self._id_board

    @id_board.setter
    def id_board(self, id_board):
        """Sets the id_board of this Lists.

        id of the board that the list should be added to

        :param id_board: The id_board of this Lists.
        :type id_board: str
        """

        self._id_board = id_board

    @property
    def id_list_source(self):
        """Gets the id_list_source of this Lists.

        The id of the list to copy into a new list.

        :return: The id_list_source of this Lists.
        :rtype: str
        """
        return self._id_list_source

    @id_list_source.setter
    def id_list_source(self, id_list_source):
        """Sets the id_list_source of this Lists.

        The id of the list to copy into a new list.

        :param id_list_source: The id_list_source of this Lists.
        :type id_list_source: str
        """

        self._id_list_source = id_list_source

    @property
    def name(self):
        """Gets the name of this Lists.

        a string with a length from 1 to 16384

        :return: The name of this Lists.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Lists.

        a string with a length from 1 to 16384

        :param name: The name of this Lists.
        :type name: str
        """

        self._name = name

    @property
    def pos(self):
        """Gets the pos of this Lists.

        A position. top , bottom , or a positive number.

        :return: The pos of this Lists.
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this Lists.

        A position. top , bottom , or a positive number.

        :param pos: The pos of this Lists.
        :type pos: str
        """

        self._pos = pos

    @property
    def subscribed(self):
        """Gets the subscribed of this Lists.

         true or false

        :return: The subscribed of this Lists.
        :rtype: str
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this Lists.

         true or false

        :param subscribed: The subscribed of this Lists.
        :type subscribed: str
        """

        self._subscribed = subscribed
