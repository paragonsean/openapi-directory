# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationsMemberships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, member_fields: str=None, type: str=None):
        """OrganizationsMemberships - a model defined in OpenAPI

        :param member_fields: The member_fields of this OrganizationsMemberships.
        :param type: The type of this OrganizationsMemberships.
        """
        self.openapi_types = {
            'member_fields': str,
            'type': str
        }

        self.attribute_map = {
            'member_fields': 'member_fields',
            'type': 'type'
        }

        self._member_fields = member_fields
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationsMemberships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The organizations_memberships of this OrganizationsMemberships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def member_fields(self):
        """Gets the member_fields of this OrganizationsMemberships.

        all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username

        :return: The member_fields of this OrganizationsMemberships.
        :rtype: str
        """
        return self._member_fields

    @member_fields.setter
    def member_fields(self, member_fields):
        """Sets the member_fields of this OrganizationsMemberships.

        all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username

        :param member_fields: The member_fields of this OrganizationsMemberships.
        :type member_fields: str
        """

        self._member_fields = member_fields

    @property
    def type(self):
        """Gets the type of this OrganizationsMemberships.

        One of: admin, normal or observer

        :return: The type of this OrganizationsMemberships.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrganizationsMemberships.

        One of: admin, normal or observer

        :param type: The type of this OrganizationsMemberships.
        :type type: str
        """

        self._type = type
