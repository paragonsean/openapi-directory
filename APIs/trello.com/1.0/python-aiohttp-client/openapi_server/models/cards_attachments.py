# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardsAttachments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file: str=None, mime_type: str=None, name: str=None, url: str=None):
        """CardsAttachments - a model defined in OpenAPI

        :param file: The file of this CardsAttachments.
        :param mime_type: The mime_type of this CardsAttachments.
        :param name: The name of this CardsAttachments.
        :param url: The url of this CardsAttachments.
        """
        self.openapi_types = {
            'file': str,
            'mime_type': str,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'file': 'file',
            'mime_type': 'mimeType',
            'name': 'name',
            'url': 'url'
        }

        self._file = file
        self._mime_type = mime_type
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardsAttachments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cards_attachments of this CardsAttachments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self):
        """Gets the file of this CardsAttachments.

        A file

        :return: The file of this CardsAttachments.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this CardsAttachments.

        A file

        :param file: The file of this CardsAttachments.
        :type file: str
        """

        self._file = file

    @property
    def mime_type(self):
        """Gets the mime_type of this CardsAttachments.

        a string with a length from 0 to 256

        :return: The mime_type of this CardsAttachments.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this CardsAttachments.

        a string with a length from 0 to 256

        :param mime_type: The mime_type of this CardsAttachments.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this CardsAttachments.

        a string with a length from 0 to 256

        :return: The name of this CardsAttachments.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CardsAttachments.

        a string with a length from 0 to 256

        :param name: The name of this CardsAttachments.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this CardsAttachments.

        A URL starting with http:// or https:// or null

        :return: The url of this CardsAttachments.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CardsAttachments.

        A URL starting with http:// or https:// or null

        :param url: The url of this CardsAttachments.
        :type url: str
        """

        self._url = url
