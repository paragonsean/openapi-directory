# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Cards(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed: str=None, desc: str=None, due: str=None, file_source: str=None, id_attachment_cover: str=None, id_board: str=None, id_card_source: str=None, id_labels: str=None, id_list: str=None, id_members: str=None, keep_from_source: str=None, labels: str=None, name: str=None, pos: str=None, subscribed: str=None, url_source: str=None):
        """Cards - a model defined in OpenAPI

        :param closed: The closed of this Cards.
        :param desc: The desc of this Cards.
        :param due: The due of this Cards.
        :param file_source: The file_source of this Cards.
        :param id_attachment_cover: The id_attachment_cover of this Cards.
        :param id_board: The id_board of this Cards.
        :param id_card_source: The id_card_source of this Cards.
        :param id_labels: The id_labels of this Cards.
        :param id_list: The id_list of this Cards.
        :param id_members: The id_members of this Cards.
        :param keep_from_source: The keep_from_source of this Cards.
        :param labels: The labels of this Cards.
        :param name: The name of this Cards.
        :param pos: The pos of this Cards.
        :param subscribed: The subscribed of this Cards.
        :param url_source: The url_source of this Cards.
        """
        self.openapi_types = {
            'closed': str,
            'desc': str,
            'due': str,
            'file_source': str,
            'id_attachment_cover': str,
            'id_board': str,
            'id_card_source': str,
            'id_labels': str,
            'id_list': str,
            'id_members': str,
            'keep_from_source': str,
            'labels': str,
            'name': str,
            'pos': str,
            'subscribed': str,
            'url_source': str
        }

        self.attribute_map = {
            'closed': 'closed',
            'desc': 'desc',
            'due': 'due',
            'file_source': 'fileSource',
            'id_attachment_cover': 'idAttachmentCover',
            'id_board': 'idBoard',
            'id_card_source': 'idCardSource',
            'id_labels': 'idLabels',
            'id_list': 'idList',
            'id_members': 'idMembers',
            'keep_from_source': 'keepFromSource',
            'labels': 'labels',
            'name': 'name',
            'pos': 'pos',
            'subscribed': 'subscribed',
            'url_source': 'urlSource'
        }

        self._closed = closed
        self._desc = desc
        self._due = due
        self._file_source = file_source
        self._id_attachment_cover = id_attachment_cover
        self._id_board = id_board
        self._id_card_source = id_card_source
        self._id_labels = id_labels
        self._id_list = id_list
        self._id_members = id_members
        self._keep_from_source = keep_from_source
        self._labels = labels
        self._name = name
        self._pos = pos
        self._subscribed = subscribed
        self._url_source = url_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cards':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cards of this Cards.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed(self):
        """Gets the closed of this Cards.

         true or false

        :return: The closed of this Cards.
        :rtype: str
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Cards.

         true or false

        :param closed: The closed of this Cards.
        :type closed: str
        """

        self._closed = closed

    @property
    def desc(self):
        """Gets the desc of this Cards.

        a string with a length from 0 to 16384

        :return: The desc of this Cards.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Cards.

        a string with a length from 0 to 16384

        :param desc: The desc of this Cards.
        :type desc: str
        """

        self._desc = desc

    @property
    def due(self):
        """Gets the due of this Cards.

        A date, or null

        :return: The due of this Cards.
        :rtype: str
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this Cards.

        A date, or null

        :param due: The due of this Cards.
        :type due: str
        """

        self._due = due

    @property
    def file_source(self):
        """Gets the file_source of this Cards.

        A file

        :return: The file_source of this Cards.
        :rtype: str
        """
        return self._file_source

    @file_source.setter
    def file_source(self, file_source):
        """Sets the file_source of this Cards.

        A file

        :param file_source: The file_source of this Cards.
        :type file_source: str
        """

        self._file_source = file_source

    @property
    def id_attachment_cover(self):
        """Gets the id_attachment_cover of this Cards.

        Id of the image attachment of this card to use as its cover, or null for no cover

        :return: The id_attachment_cover of this Cards.
        :rtype: str
        """
        return self._id_attachment_cover

    @id_attachment_cover.setter
    def id_attachment_cover(self, id_attachment_cover):
        """Sets the id_attachment_cover of this Cards.

        Id of the image attachment of this card to use as its cover, or null for no cover

        :param id_attachment_cover: The id_attachment_cover of this Cards.
        :type id_attachment_cover: str
        """

        self._id_attachment_cover = id_attachment_cover

    @property
    def id_board(self):
        """Gets the id_board of this Cards.

        id of the board the card should be moved to

        :return: The id_board of this Cards.
        :rtype: str
        """
        return self._id_board

    @id_board.setter
    def id_board(self, id_board):
        """Sets the id_board of this Cards.

        id of the board the card should be moved to

        :param id_board: The id_board of this Cards.
        :type id_board: str
        """

        self._id_board = id_board

    @property
    def id_card_source(self):
        """Gets the id_card_source of this Cards.

        The id of the card to copy into a new card.

        :return: The id_card_source of this Cards.
        :rtype: str
        """
        return self._id_card_source

    @id_card_source.setter
    def id_card_source(self, id_card_source):
        """Sets the id_card_source of this Cards.

        The id of the card to copy into a new card.

        :param id_card_source: The id_card_source of this Cards.
        :type id_card_source: str
        """

        self._id_card_source = id_card_source

    @property
    def id_labels(self):
        """Gets the id_labels of this Cards.

        A comma-separated list of objectIds, 24-character hex strings

        :return: The id_labels of this Cards.
        :rtype: str
        """
        return self._id_labels

    @id_labels.setter
    def id_labels(self, id_labels):
        """Sets the id_labels of this Cards.

        A comma-separated list of objectIds, 24-character hex strings

        :param id_labels: The id_labels of this Cards.
        :type id_labels: str
        """

        self._id_labels = id_labels

    @property
    def id_list(self):
        """Gets the id_list of this Cards.

        id of the list that the card should be added to

        :return: The id_list of this Cards.
        :rtype: str
        """
        return self._id_list

    @id_list.setter
    def id_list(self, id_list):
        """Sets the id_list of this Cards.

        id of the list that the card should be added to

        :param id_list: The id_list of this Cards.
        :type id_list: str
        """

        self._id_list = id_list

    @property
    def id_members(self):
        """Gets the id_members of this Cards.

        A comma-separated list of objectIds, 24-character hex strings

        :return: The id_members of this Cards.
        :rtype: str
        """
        return self._id_members

    @id_members.setter
    def id_members(self, id_members):
        """Sets the id_members of this Cards.

        A comma-separated list of objectIds, 24-character hex strings

        :param id_members: The id_members of this Cards.
        :type id_members: str
        """

        self._id_members = id_members

    @property
    def keep_from_source(self):
        """Gets the keep_from_source of this Cards.

        Properties of the card to copy over from the source.

        :return: The keep_from_source of this Cards.
        :rtype: str
        """
        return self._keep_from_source

    @keep_from_source.setter
    def keep_from_source(self, keep_from_source):
        """Sets the keep_from_source of this Cards.

        Properties of the card to copy over from the source.

        :param keep_from_source: The keep_from_source of this Cards.
        :type keep_from_source: str
        """

        self._keep_from_source = keep_from_source

    @property
    def labels(self):
        """Gets the labels of this Cards.

        all or a comma-separated list of: blue, green, orange, purple, red or yellow

        :return: The labels of this Cards.
        :rtype: str
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Cards.

        all or a comma-separated list of: blue, green, orange, purple, red or yellow

        :param labels: The labels of this Cards.
        :type labels: str
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Cards.

        The name of the new card.  It isn&#39;t required if the name is being copied from provided by a URL, file or card that is being copied.

        :return: The name of this Cards.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cards.

        The name of the new card.  It isn&#39;t required if the name is being copied from provided by a URL, file or card that is being copied.

        :param name: The name of this Cards.
        :type name: str
        """

        self._name = name

    @property
    def pos(self):
        """Gets the pos of this Cards.

        A position. top , bottom , or a positive number.

        :return: The pos of this Cards.
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this Cards.

        A position. top , bottom , or a positive number.

        :param pos: The pos of this Cards.
        :type pos: str
        """

        self._pos = pos

    @property
    def subscribed(self):
        """Gets the subscribed of this Cards.

         true or false

        :return: The subscribed of this Cards.
        :rtype: str
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this Cards.

         true or false

        :param subscribed: The subscribed of this Cards.
        :type subscribed: str
        """

        self._subscribed = subscribed

    @property
    def url_source(self):
        """Gets the url_source of this Cards.

        A URL starting with http:// or https:// or null

        :return: The url_source of this Cards.
        :rtype: str
        """
        return self._url_source

    @url_source.setter
    def url_source(self, url_source):
        """Sets the url_source of this Cards.

        A URL starting with http:// or https:// or null

        :param url_source: The url_source of this Cards.
        :type url_source: str
        """

        self._url_source = url_source
