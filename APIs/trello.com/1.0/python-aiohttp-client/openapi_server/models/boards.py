# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Boards(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed: str=None, desc: str=None, id_board_source: str=None, id_organization: str=None, keep_from_source: str=None, label_names_blue: str=None, label_names_green: str=None, label_names_orange: str=None, label_names_purple: str=None, label_names_red: str=None, label_names_yellow: str=None, name: str=None, power_ups: str=None, prefs_background: str=None, prefs_calendar_feed_enabled: str=None, prefs_card_aging: str=None, prefs_card_covers: str=None, prefs_comments: str=None, prefs_invitations: str=None, prefs_permission_level: str=None, prefs_self_join: str=None, prefs_voting: str=None, prefs_background: str=None, prefs_card_aging: str=None, prefs_card_covers: str=None, prefs_comments: str=None, prefs_invitations: str=None, prefs_permission_level: str=None, prefs_self_join: str=None, prefs_voting: str=None, subscribed: str=None):
        """Boards - a model defined in OpenAPI

        :param closed: The closed of this Boards.
        :param desc: The desc of this Boards.
        :param id_board_source: The id_board_source of this Boards.
        :param id_organization: The id_organization of this Boards.
        :param keep_from_source: The keep_from_source of this Boards.
        :param label_names_blue: The label_names_blue of this Boards.
        :param label_names_green: The label_names_green of this Boards.
        :param label_names_orange: The label_names_orange of this Boards.
        :param label_names_purple: The label_names_purple of this Boards.
        :param label_names_red: The label_names_red of this Boards.
        :param label_names_yellow: The label_names_yellow of this Boards.
        :param name: The name of this Boards.
        :param power_ups: The power_ups of this Boards.
        :param prefs_background: The prefs_background of this Boards.
        :param prefs_calendar_feed_enabled: The prefs_calendar_feed_enabled of this Boards.
        :param prefs_card_aging: The prefs_card_aging of this Boards.
        :param prefs_card_covers: The prefs_card_covers of this Boards.
        :param prefs_comments: The prefs_comments of this Boards.
        :param prefs_invitations: The prefs_invitations of this Boards.
        :param prefs_permission_level: The prefs_permission_level of this Boards.
        :param prefs_self_join: The prefs_self_join of this Boards.
        :param prefs_voting: The prefs_voting of this Boards.
        :param prefs_background: The prefs_background of this Boards.
        :param prefs_card_aging: The prefs_card_aging of this Boards.
        :param prefs_card_covers: The prefs_card_covers of this Boards.
        :param prefs_comments: The prefs_comments of this Boards.
        :param prefs_invitations: The prefs_invitations of this Boards.
        :param prefs_permission_level: The prefs_permission_level of this Boards.
        :param prefs_self_join: The prefs_self_join of this Boards.
        :param prefs_voting: The prefs_voting of this Boards.
        :param subscribed: The subscribed of this Boards.
        """
        self.openapi_types = {
            'closed': str,
            'desc': str,
            'id_board_source': str,
            'id_organization': str,
            'keep_from_source': str,
            'label_names_blue': str,
            'label_names_green': str,
            'label_names_orange': str,
            'label_names_purple': str,
            'label_names_red': str,
            'label_names_yellow': str,
            'name': str,
            'power_ups': str,
            'prefs_background': str,
            'prefs_calendar_feed_enabled': str,
            'prefs_card_aging': str,
            'prefs_card_covers': str,
            'prefs_comments': str,
            'prefs_invitations': str,
            'prefs_permission_level': str,
            'prefs_self_join': str,
            'prefs_voting': str,
            'prefs_background': str,
            'prefs_card_aging': str,
            'prefs_card_covers': str,
            'prefs_comments': str,
            'prefs_invitations': str,
            'prefs_permission_level': str,
            'prefs_self_join': str,
            'prefs_voting': str,
            'subscribed': str
        }

        self.attribute_map = {
            'closed': 'closed',
            'desc': 'desc',
            'id_board_source': 'idBoardSource',
            'id_organization': 'idOrganization',
            'keep_from_source': 'keepFromSource',
            'label_names_blue': 'labelNames/blue',
            'label_names_green': 'labelNames/green',
            'label_names_orange': 'labelNames/orange',
            'label_names_purple': 'labelNames/purple',
            'label_names_red': 'labelNames/red',
            'label_names_yellow': 'labelNames/yellow',
            'name': 'name',
            'power_ups': 'powerUps',
            'prefs_background': 'prefs/background',
            'prefs_calendar_feed_enabled': 'prefs/calendarFeedEnabled',
            'prefs_card_aging': 'prefs/cardAging',
            'prefs_card_covers': 'prefs/cardCovers',
            'prefs_comments': 'prefs/comments',
            'prefs_invitations': 'prefs/invitations',
            'prefs_permission_level': 'prefs/permissionLevel',
            'prefs_self_join': 'prefs/selfJoin',
            'prefs_voting': 'prefs/voting',
            'prefs_background': 'prefs_background',
            'prefs_card_aging': 'prefs_cardAging',
            'prefs_card_covers': 'prefs_cardCovers',
            'prefs_comments': 'prefs_comments',
            'prefs_invitations': 'prefs_invitations',
            'prefs_permission_level': 'prefs_permissionLevel',
            'prefs_self_join': 'prefs_selfJoin',
            'prefs_voting': 'prefs_voting',
            'subscribed': 'subscribed'
        }

        self._closed = closed
        self._desc = desc
        self._id_board_source = id_board_source
        self._id_organization = id_organization
        self._keep_from_source = keep_from_source
        self._label_names_blue = label_names_blue
        self._label_names_green = label_names_green
        self._label_names_orange = label_names_orange
        self._label_names_purple = label_names_purple
        self._label_names_red = label_names_red
        self._label_names_yellow = label_names_yellow
        self._name = name
        self._power_ups = power_ups
        self._prefs_background = prefs_background
        self._prefs_calendar_feed_enabled = prefs_calendar_feed_enabled
        self._prefs_card_aging = prefs_card_aging
        self._prefs_card_covers = prefs_card_covers
        self._prefs_comments = prefs_comments
        self._prefs_invitations = prefs_invitations
        self._prefs_permission_level = prefs_permission_level
        self._prefs_self_join = prefs_self_join
        self._prefs_voting = prefs_voting
        self._prefs_background = prefs_background
        self._prefs_card_aging = prefs_card_aging
        self._prefs_card_covers = prefs_card_covers
        self._prefs_comments = prefs_comments
        self._prefs_invitations = prefs_invitations
        self._prefs_permission_level = prefs_permission_level
        self._prefs_self_join = prefs_self_join
        self._prefs_voting = prefs_voting
        self._subscribed = subscribed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Boards':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The boards of this Boards.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed(self):
        """Gets the closed of this Boards.

         true or false

        :return: The closed of this Boards.
        :rtype: str
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Boards.

         true or false

        :param closed: The closed of this Boards.
        :type closed: str
        """

        self._closed = closed

    @property
    def desc(self):
        """Gets the desc of this Boards.

        a string with a length from 0 to 16384

        :return: The desc of this Boards.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Boards.

        a string with a length from 0 to 16384

        :param desc: The desc of this Boards.
        :type desc: str
        """

        self._desc = desc

    @property
    def id_board_source(self):
        """Gets the id_board_source of this Boards.

        The id of the board to copy into the new board

        :return: The id_board_source of this Boards.
        :rtype: str
        """
        return self._id_board_source

    @id_board_source.setter
    def id_board_source(self, id_board_source):
        """Sets the id_board_source of this Boards.

        The id of the board to copy into the new board

        :param id_board_source: The id_board_source of this Boards.
        :type id_board_source: str
        """

        self._id_board_source = id_board_source

    @property
    def id_organization(self):
        """Gets the id_organization of this Boards.

        The id or name of the organization to add the board to.

        :return: The id_organization of this Boards.
        :rtype: str
        """
        return self._id_organization

    @id_organization.setter
    def id_organization(self, id_organization):
        """Sets the id_organization of this Boards.

        The id or name of the organization to add the board to.

        :param id_organization: The id_organization of this Boards.
        :type id_organization: str
        """

        self._id_organization = id_organization

    @property
    def keep_from_source(self):
        """Gets the keep_from_source of this Boards.

        Components of the source board to copy.

        :return: The keep_from_source of this Boards.
        :rtype: str
        """
        return self._keep_from_source

    @keep_from_source.setter
    def keep_from_source(self, keep_from_source):
        """Sets the keep_from_source of this Boards.

        Components of the source board to copy.

        :param keep_from_source: The keep_from_source of this Boards.
        :type keep_from_source: str
        """

        self._keep_from_source = keep_from_source

    @property
    def label_names_blue(self):
        """Gets the label_names_blue of this Boards.

        a string with a length from 0 to 16384

        :return: The label_names_blue of this Boards.
        :rtype: str
        """
        return self._label_names_blue

    @label_names_blue.setter
    def label_names_blue(self, label_names_blue):
        """Sets the label_names_blue of this Boards.

        a string with a length from 0 to 16384

        :param label_names_blue: The label_names_blue of this Boards.
        :type label_names_blue: str
        """

        self._label_names_blue = label_names_blue

    @property
    def label_names_green(self):
        """Gets the label_names_green of this Boards.

        a string with a length from 0 to 16384

        :return: The label_names_green of this Boards.
        :rtype: str
        """
        return self._label_names_green

    @label_names_green.setter
    def label_names_green(self, label_names_green):
        """Sets the label_names_green of this Boards.

        a string with a length from 0 to 16384

        :param label_names_green: The label_names_green of this Boards.
        :type label_names_green: str
        """

        self._label_names_green = label_names_green

    @property
    def label_names_orange(self):
        """Gets the label_names_orange of this Boards.

        a string with a length from 0 to 16384

        :return: The label_names_orange of this Boards.
        :rtype: str
        """
        return self._label_names_orange

    @label_names_orange.setter
    def label_names_orange(self, label_names_orange):
        """Sets the label_names_orange of this Boards.

        a string with a length from 0 to 16384

        :param label_names_orange: The label_names_orange of this Boards.
        :type label_names_orange: str
        """

        self._label_names_orange = label_names_orange

    @property
    def label_names_purple(self):
        """Gets the label_names_purple of this Boards.

        a string with a length from 0 to 16384

        :return: The label_names_purple of this Boards.
        :rtype: str
        """
        return self._label_names_purple

    @label_names_purple.setter
    def label_names_purple(self, label_names_purple):
        """Sets the label_names_purple of this Boards.

        a string with a length from 0 to 16384

        :param label_names_purple: The label_names_purple of this Boards.
        :type label_names_purple: str
        """

        self._label_names_purple = label_names_purple

    @property
    def label_names_red(self):
        """Gets the label_names_red of this Boards.

        a string with a length from 0 to 16384

        :return: The label_names_red of this Boards.
        :rtype: str
        """
        return self._label_names_red

    @label_names_red.setter
    def label_names_red(self, label_names_red):
        """Sets the label_names_red of this Boards.

        a string with a length from 0 to 16384

        :param label_names_red: The label_names_red of this Boards.
        :type label_names_red: str
        """

        self._label_names_red = label_names_red

    @property
    def label_names_yellow(self):
        """Gets the label_names_yellow of this Boards.

        a string with a length from 0 to 16384

        :return: The label_names_yellow of this Boards.
        :rtype: str
        """
        return self._label_names_yellow

    @label_names_yellow.setter
    def label_names_yellow(self, label_names_yellow):
        """Sets the label_names_yellow of this Boards.

        a string with a length from 0 to 16384

        :param label_names_yellow: The label_names_yellow of this Boards.
        :type label_names_yellow: str
        """

        self._label_names_yellow = label_names_yellow

    @property
    def name(self):
        """Gets the name of this Boards.

        a string with a length from 1 to 16384

        :return: The name of this Boards.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Boards.

        a string with a length from 1 to 16384

        :param name: The name of this Boards.
        :type name: str
        """

        self._name = name

    @property
    def power_ups(self):
        """Gets the power_ups of this Boards.

        all or a comma-separated list of: calendar, cardAging, recap or voting

        :return: The power_ups of this Boards.
        :rtype: str
        """
        return self._power_ups

    @power_ups.setter
    def power_ups(self, power_ups):
        """Sets the power_ups of this Boards.

        all or a comma-separated list of: calendar, cardAging, recap or voting

        :param power_ups: The power_ups of this Boards.
        :type power_ups: str
        """

        self._power_ups = power_ups

    @property
    def prefs_background(self):
        """Gets the prefs_background of this Boards.

        A standard background name, or the id of a custom background

        :return: The prefs_background of this Boards.
        :rtype: str
        """
        return self._prefs_background

    @prefs_background.setter
    def prefs_background(self, prefs_background):
        """Sets the prefs_background of this Boards.

        A standard background name, or the id of a custom background

        :param prefs_background: The prefs_background of this Boards.
        :type prefs_background: str
        """

        self._prefs_background = prefs_background

    @property
    def prefs_calendar_feed_enabled(self):
        """Gets the prefs_calendar_feed_enabled of this Boards.

         true or false

        :return: The prefs_calendar_feed_enabled of this Boards.
        :rtype: str
        """
        return self._prefs_calendar_feed_enabled

    @prefs_calendar_feed_enabled.setter
    def prefs_calendar_feed_enabled(self, prefs_calendar_feed_enabled):
        """Sets the prefs_calendar_feed_enabled of this Boards.

         true or false

        :param prefs_calendar_feed_enabled: The prefs_calendar_feed_enabled of this Boards.
        :type prefs_calendar_feed_enabled: str
        """

        self._prefs_calendar_feed_enabled = prefs_calendar_feed_enabled

    @property
    def prefs_card_aging(self):
        """Gets the prefs_card_aging of this Boards.

        One of: pirate or regular

        :return: The prefs_card_aging of this Boards.
        :rtype: str
        """
        return self._prefs_card_aging

    @prefs_card_aging.setter
    def prefs_card_aging(self, prefs_card_aging):
        """Sets the prefs_card_aging of this Boards.

        One of: pirate or regular

        :param prefs_card_aging: The prefs_card_aging of this Boards.
        :type prefs_card_aging: str
        """

        self._prefs_card_aging = prefs_card_aging

    @property
    def prefs_card_covers(self):
        """Gets the prefs_card_covers of this Boards.

         true or false

        :return: The prefs_card_covers of this Boards.
        :rtype: str
        """
        return self._prefs_card_covers

    @prefs_card_covers.setter
    def prefs_card_covers(self, prefs_card_covers):
        """Sets the prefs_card_covers of this Boards.

         true or false

        :param prefs_card_covers: The prefs_card_covers of this Boards.
        :type prefs_card_covers: str
        """

        self._prefs_card_covers = prefs_card_covers

    @property
    def prefs_comments(self):
        """Gets the prefs_comments of this Boards.

        One of: disabled, members, observers, org or public

        :return: The prefs_comments of this Boards.
        :rtype: str
        """
        return self._prefs_comments

    @prefs_comments.setter
    def prefs_comments(self, prefs_comments):
        """Sets the prefs_comments of this Boards.

        One of: disabled, members, observers, org or public

        :param prefs_comments: The prefs_comments of this Boards.
        :type prefs_comments: str
        """

        self._prefs_comments = prefs_comments

    @property
    def prefs_invitations(self):
        """Gets the prefs_invitations of this Boards.

        One of: admins or members

        :return: The prefs_invitations of this Boards.
        :rtype: str
        """
        return self._prefs_invitations

    @prefs_invitations.setter
    def prefs_invitations(self, prefs_invitations):
        """Sets the prefs_invitations of this Boards.

        One of: admins or members

        :param prefs_invitations: The prefs_invitations of this Boards.
        :type prefs_invitations: str
        """

        self._prefs_invitations = prefs_invitations

    @property
    def prefs_permission_level(self):
        """Gets the prefs_permission_level of this Boards.

        One of: org, private or public

        :return: The prefs_permission_level of this Boards.
        :rtype: str
        """
        return self._prefs_permission_level

    @prefs_permission_level.setter
    def prefs_permission_level(self, prefs_permission_level):
        """Sets the prefs_permission_level of this Boards.

        One of: org, private or public

        :param prefs_permission_level: The prefs_permission_level of this Boards.
        :type prefs_permission_level: str
        """

        self._prefs_permission_level = prefs_permission_level

    @property
    def prefs_self_join(self):
        """Gets the prefs_self_join of this Boards.

         true or false

        :return: The prefs_self_join of this Boards.
        :rtype: str
        """
        return self._prefs_self_join

    @prefs_self_join.setter
    def prefs_self_join(self, prefs_self_join):
        """Sets the prefs_self_join of this Boards.

         true or false

        :param prefs_self_join: The prefs_self_join of this Boards.
        :type prefs_self_join: str
        """

        self._prefs_self_join = prefs_self_join

    @property
    def prefs_voting(self):
        """Gets the prefs_voting of this Boards.

        One of: disabled, members, observers, org or public

        :return: The prefs_voting of this Boards.
        :rtype: str
        """
        return self._prefs_voting

    @prefs_voting.setter
    def prefs_voting(self, prefs_voting):
        """Sets the prefs_voting of this Boards.

        One of: disabled, members, observers, org or public

        :param prefs_voting: The prefs_voting of this Boards.
        :type prefs_voting: str
        """

        self._prefs_voting = prefs_voting

    @property
    def prefs_background(self):
        """Gets the prefs_background of this Boards.

        a string with a length from 0 to 16384

        :return: The prefs_background of this Boards.
        :rtype: str
        """
        return self._prefs_background

    @prefs_background.setter
    def prefs_background(self, prefs_background):
        """Sets the prefs_background of this Boards.

        a string with a length from 0 to 16384

        :param prefs_background: The prefs_background of this Boards.
        :type prefs_background: str
        """

        self._prefs_background = prefs_background

    @property
    def prefs_card_aging(self):
        """Gets the prefs_card_aging of this Boards.

        One of: pirate or regular

        :return: The prefs_card_aging of this Boards.
        :rtype: str
        """
        return self._prefs_card_aging

    @prefs_card_aging.setter
    def prefs_card_aging(self, prefs_card_aging):
        """Sets the prefs_card_aging of this Boards.

        One of: pirate or regular

        :param prefs_card_aging: The prefs_card_aging of this Boards.
        :type prefs_card_aging: str
        """

        self._prefs_card_aging = prefs_card_aging

    @property
    def prefs_card_covers(self):
        """Gets the prefs_card_covers of this Boards.

         true or false

        :return: The prefs_card_covers of this Boards.
        :rtype: str
        """
        return self._prefs_card_covers

    @prefs_card_covers.setter
    def prefs_card_covers(self, prefs_card_covers):
        """Sets the prefs_card_covers of this Boards.

         true or false

        :param prefs_card_covers: The prefs_card_covers of this Boards.
        :type prefs_card_covers: str
        """

        self._prefs_card_covers = prefs_card_covers

    @property
    def prefs_comments(self):
        """Gets the prefs_comments of this Boards.

        One of: disabled, members, observers, org or public

        :return: The prefs_comments of this Boards.
        :rtype: str
        """
        return self._prefs_comments

    @prefs_comments.setter
    def prefs_comments(self, prefs_comments):
        """Sets the prefs_comments of this Boards.

        One of: disabled, members, observers, org or public

        :param prefs_comments: The prefs_comments of this Boards.
        :type prefs_comments: str
        """

        self._prefs_comments = prefs_comments

    @property
    def prefs_invitations(self):
        """Gets the prefs_invitations of this Boards.

        One of: admins or members

        :return: The prefs_invitations of this Boards.
        :rtype: str
        """
        return self._prefs_invitations

    @prefs_invitations.setter
    def prefs_invitations(self, prefs_invitations):
        """Sets the prefs_invitations of this Boards.

        One of: admins or members

        :param prefs_invitations: The prefs_invitations of this Boards.
        :type prefs_invitations: str
        """

        self._prefs_invitations = prefs_invitations

    @property
    def prefs_permission_level(self):
        """Gets the prefs_permission_level of this Boards.

        One of: org, private or public

        :return: The prefs_permission_level of this Boards.
        :rtype: str
        """
        return self._prefs_permission_level

    @prefs_permission_level.setter
    def prefs_permission_level(self, prefs_permission_level):
        """Sets the prefs_permission_level of this Boards.

        One of: org, private or public

        :param prefs_permission_level: The prefs_permission_level of this Boards.
        :type prefs_permission_level: str
        """

        self._prefs_permission_level = prefs_permission_level

    @property
    def prefs_self_join(self):
        """Gets the prefs_self_join of this Boards.

         true or false

        :return: The prefs_self_join of this Boards.
        :rtype: str
        """
        return self._prefs_self_join

    @prefs_self_join.setter
    def prefs_self_join(self, prefs_self_join):
        """Sets the prefs_self_join of this Boards.

         true or false

        :param prefs_self_join: The prefs_self_join of this Boards.
        :type prefs_self_join: str
        """

        self._prefs_self_join = prefs_self_join

    @property
    def prefs_voting(self):
        """Gets the prefs_voting of this Boards.

        One of: disabled, members, observers, org or public

        :return: The prefs_voting of this Boards.
        :rtype: str
        """
        return self._prefs_voting

    @prefs_voting.setter
    def prefs_voting(self, prefs_voting):
        """Sets the prefs_voting of this Boards.

        One of: disabled, members, observers, org or public

        :param prefs_voting: The prefs_voting of this Boards.
        :type prefs_voting: str
        """

        self._prefs_voting = prefs_voting

    @property
    def subscribed(self):
        """Gets the subscribed of this Boards.

         true or false

        :return: The subscribed of this Boards.
        :rtype: str
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this Boards.

         true or false

        :param subscribed: The subscribed of this Boards.
        :type subscribed: str
        """

        self._subscribed = subscribed
