/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Members;
import org.openapitools.client.model.MembersAvatar;
import org.openapitools.client.model.MembersAvatarSource;
import org.openapitools.client.model.MembersBio;
import org.openapitools.client.model.MembersBoardBackgrounds;
import org.openapitools.client.model.MembersBoardStars;
import org.openapitools.client.model.MembersBoardStarsIdBoard;
import org.openapitools.client.model.MembersBoardStarsPos;
import org.openapitools.client.model.MembersCustomBoardBackgrounds;
import org.openapitools.client.model.MembersCustomEmoji;
import org.openapitools.client.model.MembersCustomStickers;
import org.openapitools.client.model.MembersFullName;
import org.openapitools.client.model.MembersInitials;
import org.openapitools.client.model.MembersOneTimeMessagesDismissed;
import org.openapitools.client.model.MembersSavedSearches;
import org.openapitools.client.model.MembersSavedSearchesName;
import org.openapitools.client.model.MembersSavedSearchesPos;
import org.openapitools.client.model.MembersSavedSearchesQuery;
import org.openapitools.client.model.MembersUsername;
import org.openapitools.client.model.PrefsColorBlind;
import org.openapitools.client.model.PrefsLocale;
import org.openapitools.client.model.PrefsMinutesBetweenSummaries;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MemberApi
 */
@Disabled
public class MemberApiTest {

    private final MemberApi api = new MemberApi();

    /**
     * addMembersAvatarByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersAvatarByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersAvatar membersAvatar = null;
        api.addMembersAvatarByIdMember(idMember, key, token, membersAvatar);
        // TODO: test validations
    }

    /**
     * addMembersBoardBackgroundsByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersBoardBackgroundsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersBoardBackgrounds membersBoardBackgrounds = null;
        api.addMembersBoardBackgroundsByIdMember(idMember, key, token, membersBoardBackgrounds);
        // TODO: test validations
    }

    /**
     * addMembersBoardStarsByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersBoardStarsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersBoardStars membersBoardStars = null;
        api.addMembersBoardStarsByIdMember(idMember, key, token, membersBoardStars);
        // TODO: test validations
    }

    /**
     * addMembersCustomBoardBackgroundsByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersCustomBoardBackgroundsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = null;
        api.addMembersCustomBoardBackgroundsByIdMember(idMember, key, token, membersCustomBoardBackgrounds);
        // TODO: test validations
    }

    /**
     * addMembersCustomEmojiByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersCustomEmojiByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersCustomEmoji membersCustomEmoji = null;
        api.addMembersCustomEmojiByIdMember(idMember, key, token, membersCustomEmoji);
        // TODO: test validations
    }

    /**
     * addMembersCustomStickersByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersCustomStickersByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersCustomStickers membersCustomStickers = null;
        api.addMembersCustomStickersByIdMember(idMember, key, token, membersCustomStickers);
        // TODO: test validations
    }

    /**
     * addMembersOneTimeMessagesDismissedByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersOneTimeMessagesDismissedByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed = null;
        api.addMembersOneTimeMessagesDismissedByIdMember(idMember, key, token, membersOneTimeMessagesDismissed);
        // TODO: test validations
    }

    /**
     * addMembersSavedSearchesByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersSavedSearchesByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersSavedSearches membersSavedSearches = null;
        api.addMembersSavedSearchesByIdMember(idMember, key, token, membersSavedSearches);
        // TODO: test validations
    }

    /**
     * deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMembersBoardBackgroundsByIdMemberByIdBoardBackgroundTest() throws ApiException {
        String idMember = null;
        String idBoardBackground = null;
        String key = null;
        String token = null;
        api.deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token);
        // TODO: test validations
    }

    /**
     * deleteMembersBoardStarsByIdMemberByIdBoardStar()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMembersBoardStarsByIdMemberByIdBoardStarTest() throws ApiException {
        String idMember = null;
        String idBoardStar = null;
        String key = null;
        String token = null;
        api.deleteMembersBoardStarsByIdMemberByIdBoardStar(idMember, idBoardStar, key, token);
        // TODO: test validations
    }

    /**
     * deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundTest() throws ApiException {
        String idMember = null;
        String idBoardBackground = null;
        String key = null;
        String token = null;
        api.deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token);
        // TODO: test validations
    }

    /**
     * deleteMembersCustomStickersByIdMemberByIdCustomSticker()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMembersCustomStickersByIdMemberByIdCustomStickerTest() throws ApiException {
        String idMember = null;
        String idCustomSticker = null;
        String key = null;
        String token = null;
        api.deleteMembersCustomStickersByIdMemberByIdCustomSticker(idMember, idCustomSticker, key, token);
        // TODO: test validations
    }

    /**
     * deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMembersSavedSearchesByIdMemberByIdSavedSearchTest() throws ApiException {
        String idMember = null;
        String idSavedSearch = null;
        String key = null;
        String token = null;
        api.deleteMembersSavedSearchesByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token);
        // TODO: test validations
    }

    /**
     * getMembersActionsByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersActionsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String entities = null;
        String display = null;
        String filter = null;
        String fields = null;
        String limit = null;
        String format = null;
        String since = null;
        String before = null;
        String page = null;
        String idModels = null;
        String member = null;
        String memberFields = null;
        String memberCreator = null;
        String memberCreatorFields = null;
        api.getMembersActionsByIdMember(idMember, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        // TODO: test validations
    }

    /**
     * getMembersBoardBackgroundsByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersBoardBackgroundsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String filter = null;
        api.getMembersBoardBackgroundsByIdMember(idMember, key, token, filter);
        // TODO: test validations
    }

    /**
     * getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersBoardBackgroundsByIdMemberByIdBoardBackgroundTest() throws ApiException {
        String idMember = null;
        String idBoardBackground = null;
        String key = null;
        String token = null;
        String fields = null;
        api.getMembersBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token, fields);
        // TODO: test validations
    }

    /**
     * getMembersBoardStarsByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersBoardStarsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        api.getMembersBoardStarsByIdMember(idMember, key, token);
        // TODO: test validations
    }

    /**
     * getMembersBoardStarsByIdMemberByIdBoardStar()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersBoardStarsByIdMemberByIdBoardStarTest() throws ApiException {
        String idMember = null;
        String idBoardStar = null;
        String key = null;
        String token = null;
        api.getMembersBoardStarsByIdMemberByIdBoardStar(idMember, idBoardStar, key, token);
        // TODO: test validations
    }

    /**
     * getMembersBoardsByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersBoardsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String filter = null;
        String fields = null;
        String actions = null;
        String actionsEntities = null;
        String actionsLimit = null;
        String actionsFormat = null;
        String actionsSince = null;
        String actionFields = null;
        String memberships = null;
        String organization = null;
        String organizationFields = null;
        String lists = null;
        api.getMembersBoardsByIdMember(idMember, key, token, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists);
        // TODO: test validations
    }

    /**
     * getMembersBoardsByIdMemberByFilter()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersBoardsByIdMemberByFilterTest() throws ApiException {
        String idMember = null;
        String filter = null;
        String key = null;
        String token = null;
        api.getMembersBoardsByIdMemberByFilter(idMember, filter, key, token);
        // TODO: test validations
    }

    /**
     * getMembersBoardsInvitedByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersBoardsInvitedByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String fields = null;
        api.getMembersBoardsInvitedByIdMember(idMember, key, token, fields);
        // TODO: test validations
    }

    /**
     * getMembersBoardsInvitedByIdMemberByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersBoardsInvitedByIdMemberByFieldTest() throws ApiException {
        String idMember = null;
        String field = null;
        String key = null;
        String token = null;
        api.getMembersBoardsInvitedByIdMemberByField(idMember, field, key, token);
        // TODO: test validations
    }

    /**
     * getMembersByIdMember()
     *
     * If you specify &#39;me&#39; as the username, this call will respond as if you had supplied the username associated with the supplied token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String actions = null;
        String actionsEntities = null;
        String actionsDisplay = null;
        String actionsLimit = null;
        String actionFields = null;
        String actionSince = null;
        String actionBefore = null;
        String cards = null;
        String cardFields = null;
        String cardMembers = null;
        String cardMemberFields = null;
        String cardAttachments = null;
        String cardAttachmentFields = null;
        String cardStickers = null;
        String boards = null;
        String boardFields = null;
        String boardActions = null;
        String boardActionsEntities = null;
        String boardActionsDisplay = null;
        String boardActionsFormat = null;
        String boardActionsSince = null;
        String boardActionsLimit = null;
        String boardActionFields = null;
        String boardLists = null;
        String boardMemberships = null;
        String boardOrganization = null;
        String boardOrganizationFields = null;
        String boardsInvited = null;
        String boardsInvitedFields = null;
        String boardStars = null;
        String savedSearches = null;
        String organizations = null;
        String organizationFields = null;
        String organizationPaidAccount = null;
        String organizationsInvited = null;
        String organizationsInvitedFields = null;
        String notifications = null;
        String notificationsEntities = null;
        String notificationsDisplay = null;
        String notificationsLimit = null;
        String notificationFields = null;
        String notificationMemberCreator = null;
        String notificationMemberCreatorFields = null;
        String notificationBefore = null;
        String notificationSince = null;
        String tokens = null;
        String paidAccount = null;
        String boardBackgrounds = null;
        String customBoardBackgrounds = null;
        String customStickers = null;
        String customEmoji = null;
        String fields = null;
        api.getMembersByIdMember(idMember, key, token, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields);
        // TODO: test validations
    }

    /**
     * getMembersByIdMemberByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersByIdMemberByFieldTest() throws ApiException {
        String idMember = null;
        String field = null;
        String key = null;
        String token = null;
        api.getMembersByIdMemberByField(idMember, field, key, token);
        // TODO: test validations
    }

    /**
     * getMembersCardsByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersCardsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String actions = null;
        String attachments = null;
        String attachmentFields = null;
        String stickers = null;
        String members = null;
        String memberFields = null;
        String checkItemStates = null;
        String checklists = null;
        String limit = null;
        String since = null;
        String before = null;
        String filter = null;
        String fields = null;
        api.getMembersCardsByIdMember(idMember, key, token, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields);
        // TODO: test validations
    }

    /**
     * getMembersCardsByIdMemberByFilter()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersCardsByIdMemberByFilterTest() throws ApiException {
        String idMember = null;
        String filter = null;
        String key = null;
        String token = null;
        api.getMembersCardsByIdMemberByFilter(idMember, filter, key, token);
        // TODO: test validations
    }

    /**
     * getMembersCustomBoardBackgroundsByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersCustomBoardBackgroundsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String filter = null;
        api.getMembersCustomBoardBackgroundsByIdMember(idMember, key, token, filter);
        // TODO: test validations
    }

    /**
     * getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundTest() throws ApiException {
        String idMember = null;
        String idBoardBackground = null;
        String key = null;
        String token = null;
        String fields = null;
        api.getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token, fields);
        // TODO: test validations
    }

    /**
     * getMembersCustomEmojiByIdMember()
     *
     * This gets the list of all of the user’s uploaded emoji
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersCustomEmojiByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String filter = null;
        api.getMembersCustomEmojiByIdMember(idMember, key, token, filter);
        // TODO: test validations
    }

    /**
     * getMembersCustomEmojiByIdMemberByIdCustomEmoji()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersCustomEmojiByIdMemberByIdCustomEmojiTest() throws ApiException {
        String idMember = null;
        String idCustomEmoji = null;
        String key = null;
        String token = null;
        String fields = null;
        api.getMembersCustomEmojiByIdMemberByIdCustomEmoji(idMember, idCustomEmoji, key, token, fields);
        // TODO: test validations
    }

    /**
     * getMembersCustomStickersByIdMember()
     *
     * This gets a list of all of the user’s uploaded stickers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersCustomStickersByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String filter = null;
        api.getMembersCustomStickersByIdMember(idMember, key, token, filter);
        // TODO: test validations
    }

    /**
     * getMembersCustomStickersByIdMemberByIdCustomSticker()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersCustomStickersByIdMemberByIdCustomStickerTest() throws ApiException {
        String idMember = null;
        String idCustomSticker = null;
        String key = null;
        String token = null;
        String fields = null;
        api.getMembersCustomStickersByIdMemberByIdCustomSticker(idMember, idCustomSticker, key, token, fields);
        // TODO: test validations
    }

    /**
     * getMembersDeltasByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersDeltasByIdMemberTest() throws ApiException {
        String idMember = null;
        String tags = null;
        String ixLastUpdate = null;
        String key = null;
        String token = null;
        api.getMembersDeltasByIdMember(idMember, tags, ixLastUpdate, key, token);
        // TODO: test validations
    }

    /**
     * getMembersNotificationsByIdMember()
     *
     * You can only read the notifications for the member associated with the supplied token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersNotificationsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String entities = null;
        String display = null;
        String filter = null;
        String readFilter = null;
        String fields = null;
        String limit = null;
        String page = null;
        String before = null;
        String since = null;
        String memberCreator = null;
        String memberCreatorFields = null;
        api.getMembersNotificationsByIdMember(idMember, key, token, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields);
        // TODO: test validations
    }

    /**
     * getMembersNotificationsByIdMemberByFilter()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersNotificationsByIdMemberByFilterTest() throws ApiException {
        String idMember = null;
        String filter = null;
        String key = null;
        String token = null;
        api.getMembersNotificationsByIdMemberByFilter(idMember, filter, key, token);
        // TODO: test validations
    }

    /**
     * getMembersOrganizationsByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersOrganizationsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String filter = null;
        String fields = null;
        String paidAccount = null;
        api.getMembersOrganizationsByIdMember(idMember, key, token, filter, fields, paidAccount);
        // TODO: test validations
    }

    /**
     * getMembersOrganizationsByIdMemberByFilter()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersOrganizationsByIdMemberByFilterTest() throws ApiException {
        String idMember = null;
        String filter = null;
        String key = null;
        String token = null;
        api.getMembersOrganizationsByIdMemberByFilter(idMember, filter, key, token);
        // TODO: test validations
    }

    /**
     * getMembersOrganizationsInvitedByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersOrganizationsInvitedByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String fields = null;
        api.getMembersOrganizationsInvitedByIdMember(idMember, key, token, fields);
        // TODO: test validations
    }

    /**
     * getMembersOrganizationsInvitedByIdMemberByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersOrganizationsInvitedByIdMemberByFieldTest() throws ApiException {
        String idMember = null;
        String field = null;
        String key = null;
        String token = null;
        api.getMembersOrganizationsInvitedByIdMemberByField(idMember, field, key, token);
        // TODO: test validations
    }

    /**
     * getMembersSavedSearchesByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersSavedSearchesByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        api.getMembersSavedSearchesByIdMember(idMember, key, token);
        // TODO: test validations
    }

    /**
     * getMembersSavedSearchesByIdMemberByIdSavedSearch()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersSavedSearchesByIdMemberByIdSavedSearchTest() throws ApiException {
        String idMember = null;
        String idSavedSearch = null;
        String key = null;
        String token = null;
        api.getMembersSavedSearchesByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token);
        // TODO: test validations
    }

    /**
     * getMembersTokensByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersTokensByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        String filter = null;
        api.getMembersTokensByIdMember(idMember, key, token, filter);
        // TODO: test validations
    }

    /**
     * updateMembersAvatarSourceByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersAvatarSourceByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersAvatarSource membersAvatarSource = null;
        api.updateMembersAvatarSourceByIdMember(idMember, key, token, membersAvatarSource);
        // TODO: test validations
    }

    /**
     * updateMembersBioByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersBioByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersBio membersBio = null;
        api.updateMembersBioByIdMember(idMember, key, token, membersBio);
        // TODO: test validations
    }

    /**
     * updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersBoardBackgroundsByIdMemberByIdBoardBackgroundTest() throws ApiException {
        String idMember = null;
        String idBoardBackground = null;
        String key = null;
        String token = null;
        MembersBoardBackgrounds membersBoardBackgrounds = null;
        api.updateMembersBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token, membersBoardBackgrounds);
        // TODO: test validations
    }

    /**
     * updateMembersBoardStarsByIdMemberByIdBoardStar()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersBoardStarsByIdMemberByIdBoardStarTest() throws ApiException {
        String idMember = null;
        String idBoardStar = null;
        String key = null;
        String token = null;
        MembersBoardStars membersBoardStars = null;
        api.updateMembersBoardStarsByIdMemberByIdBoardStar(idMember, idBoardStar, key, token, membersBoardStars);
        // TODO: test validations
    }

    /**
     * updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersBoardStarsIdBoardByIdMemberByIdBoardStarTest() throws ApiException {
        String idMember = null;
        String idBoardStar = null;
        String key = null;
        String token = null;
        MembersBoardStarsIdBoard membersBoardStarsIdBoard = null;
        api.updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar(idMember, idBoardStar, key, token, membersBoardStarsIdBoard);
        // TODO: test validations
    }

    /**
     * updateMembersBoardStarsPosByIdMemberByIdBoardStar()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersBoardStarsPosByIdMemberByIdBoardStarTest() throws ApiException {
        String idMember = null;
        String idBoardStar = null;
        String key = null;
        String token = null;
        MembersBoardStarsPos membersBoardStarsPos = null;
        api.updateMembersBoardStarsPosByIdMemberByIdBoardStar(idMember, idBoardStar, key, token, membersBoardStarsPos);
        // TODO: test validations
    }

    /**
     * updateMembersByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        Members members = null;
        api.updateMembersByIdMember(idMember, key, token, members);
        // TODO: test validations
    }

    /**
     * updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundTest() throws ApiException {
        String idMember = null;
        String idBoardBackground = null;
        String key = null;
        String token = null;
        MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = null;
        api.updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token, membersCustomBoardBackgrounds);
        // TODO: test validations
    }

    /**
     * updateMembersFullNameByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersFullNameByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersFullName membersFullName = null;
        api.updateMembersFullNameByIdMember(idMember, key, token, membersFullName);
        // TODO: test validations
    }

    /**
     * updateMembersInitialsByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersInitialsByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersInitials membersInitials = null;
        api.updateMembersInitialsByIdMember(idMember, key, token, membersInitials);
        // TODO: test validations
    }

    /**
     * updateMembersPrefsColorBlindByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersPrefsColorBlindByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        PrefsColorBlind prefsColorBlind = null;
        api.updateMembersPrefsColorBlindByIdMember(idMember, key, token, prefsColorBlind);
        // TODO: test validations
    }

    /**
     * updateMembersPrefsLocaleByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersPrefsLocaleByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        PrefsLocale prefsLocale = null;
        api.updateMembersPrefsLocaleByIdMember(idMember, key, token, prefsLocale);
        // TODO: test validations
    }

    /**
     * updateMembersPrefsMinutesBetweenSummariesByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersPrefsMinutesBetweenSummariesByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries = null;
        api.updateMembersPrefsMinutesBetweenSummariesByIdMember(idMember, key, token, prefsMinutesBetweenSummaries);
        // TODO: test validations
    }

    /**
     * updateMembersSavedSearchesByIdMemberByIdSavedSearch()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersSavedSearchesByIdMemberByIdSavedSearchTest() throws ApiException {
        String idMember = null;
        String idSavedSearch = null;
        String key = null;
        String token = null;
        MembersSavedSearches membersSavedSearches = null;
        api.updateMembersSavedSearchesByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token, membersSavedSearches);
        // TODO: test validations
    }

    /**
     * updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersSavedSearchesNameByIdMemberByIdSavedSearchTest() throws ApiException {
        String idMember = null;
        String idSavedSearch = null;
        String key = null;
        String token = null;
        MembersSavedSearchesName membersSavedSearchesName = null;
        api.updateMembersSavedSearchesNameByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token, membersSavedSearchesName);
        // TODO: test validations
    }

    /**
     * updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersSavedSearchesPosByIdMemberByIdSavedSearchTest() throws ApiException {
        String idMember = null;
        String idSavedSearch = null;
        String key = null;
        String token = null;
        MembersSavedSearchesPos membersSavedSearchesPos = null;
        api.updateMembersSavedSearchesPosByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token, membersSavedSearchesPos);
        // TODO: test validations
    }

    /**
     * updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersSavedSearchesQueryByIdMemberByIdSavedSearchTest() throws ApiException {
        String idMember = null;
        String idSavedSearch = null;
        String key = null;
        String token = null;
        MembersSavedSearchesQuery membersSavedSearchesQuery = null;
        api.updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token, membersSavedSearchesQuery);
        // TODO: test validations
    }

    /**
     * updateMembersUsernameByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersUsernameByIdMemberTest() throws ApiException {
        String idMember = null;
        String key = null;
        String token = null;
        MembersUsername membersUsername = null;
        api.updateMembersUsernameByIdMember(idMember, key, token, membersUsername);
        // TODO: test validations
    }

}
