/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Organizations;
import org.openapitools.client.model.OrganizationsDesc;
import org.openapitools.client.model.OrganizationsDisplayName;
import org.openapitools.client.model.OrganizationsLogo;
import org.openapitools.client.model.OrganizationsMembers;
import org.openapitools.client.model.OrganizationsMembersDeactivated;
import org.openapitools.client.model.OrganizationsMemberships;
import org.openapitools.client.model.OrganizationsName;
import org.openapitools.client.model.OrganizationsWebsite;
import org.openapitools.client.model.PrefsAssociatedDomain;
import org.openapitools.client.model.PrefsBoardVisibilityRestrict;
import org.openapitools.client.model.PrefsExternalMembersDisabled;
import org.openapitools.client.model.PrefsGoogleAppsVersion;
import org.openapitools.client.model.PrefsOrgInviteRestrict;
import org.openapitools.client.model.PrefsPermissionLevel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationApi
 */
@Disabled
public class OrganizationApiTest {

    private final OrganizationApi api = new OrganizationApi();

    /**
     * addOrganizations()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOrganizationsTest() throws ApiException {
        String key = null;
        String token = null;
        Organizations organizations = null;
        api.addOrganizations(key, token, organizations);
        // TODO: test validations
    }

    /**
     * addOrganizationsLogoByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOrganizationsLogoByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        OrganizationsLogo organizationsLogo = null;
        api.addOrganizationsLogoByIdOrg(idOrg, key, token, organizationsLogo);
        // TODO: test validations
    }

    /**
     * deleteOrganizationsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationsByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        api.deleteOrganizationsByIdOrg(idOrg, key, token);
        // TODO: test validations
    }

    /**
     * deleteOrganizationsLogoByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationsLogoByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        api.deleteOrganizationsLogoByIdOrg(idOrg, key, token);
        // TODO: test validations
    }

    /**
     * deleteOrganizationsMembersAllByIdOrgByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationsMembersAllByIdOrgByIdMemberTest() throws ApiException {
        String idOrg = null;
        String idMember = null;
        String key = null;
        String token = null;
        api.deleteOrganizationsMembersAllByIdOrgByIdMember(idOrg, idMember, key, token);
        // TODO: test validations
    }

    /**
     * deleteOrganizationsMembersByIdOrgByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationsMembersByIdOrgByIdMemberTest() throws ApiException {
        String idOrg = null;
        String idMember = null;
        String key = null;
        String token = null;
        api.deleteOrganizationsMembersByIdOrgByIdMember(idOrg, idMember, key, token);
        // TODO: test validations
    }

    /**
     * deleteOrganizationsPrefsAssociatedDomainByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationsPrefsAssociatedDomainByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        api.deleteOrganizationsPrefsAssociatedDomainByIdOrg(idOrg, key, token);
        // TODO: test validations
    }

    /**
     * deleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationsPrefsOrgInviteRestrictByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        String key = null;
        String token = null;
        api.deleteOrganizationsPrefsOrgInviteRestrictByIdOrg(idOrg, value, key, token);
        // TODO: test validations
    }

    /**
     * getOrganizationsActionsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsActionsByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        String entities = null;
        String display = null;
        String filter = null;
        String fields = null;
        String limit = null;
        String format = null;
        String since = null;
        String before = null;
        String page = null;
        String idModels = null;
        String member = null;
        String memberFields = null;
        String memberCreator = null;
        String memberCreatorFields = null;
        api.getOrganizationsActionsByIdOrg(idOrg, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        // TODO: test validations
    }

    /**
     * getOrganizationsBoardsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsBoardsByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        String filter = null;
        String fields = null;
        String actions = null;
        String actionsEntities = null;
        String actionsLimit = null;
        String actionsFormat = null;
        String actionsSince = null;
        String actionFields = null;
        String memberships = null;
        String organization = null;
        String organizationFields = null;
        String lists = null;
        api.getOrganizationsBoardsByIdOrg(idOrg, key, token, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists);
        // TODO: test validations
    }

    /**
     * getOrganizationsBoardsByIdOrgByFilter()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsBoardsByIdOrgByFilterTest() throws ApiException {
        String idOrg = null;
        String filter = null;
        String key = null;
        String token = null;
        api.getOrganizationsBoardsByIdOrgByFilter(idOrg, filter, key, token);
        // TODO: test validations
    }

    /**
     * getOrganizationsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        String actions = null;
        String actionsEntities = null;
        String actionsDisplay = null;
        String actionsLimit = null;
        String actionFields = null;
        String memberships = null;
        String membershipsMember = null;
        String membershipsMemberFields = null;
        String members = null;
        String memberFields = null;
        String memberActivity = null;
        String membersInvited = null;
        String membersInvitedFields = null;
        String boards = null;
        String boardFields = null;
        String boardActions = null;
        String boardActionsEntities = null;
        String boardActionsDisplay = null;
        String boardActionsFormat = null;
        String boardActionsSince = null;
        String boardActionsLimit = null;
        String boardActionFields = null;
        String boardLists = null;
        String paidAccount = null;
        String fields = null;
        api.getOrganizationsByIdOrg(idOrg, key, token, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, memberActivity, membersInvited, membersInvitedFields, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, paidAccount, fields);
        // TODO: test validations
    }

    /**
     * getOrganizationsByIdOrgByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsByIdOrgByFieldTest() throws ApiException {
        String idOrg = null;
        String field = null;
        String key = null;
        String token = null;
        api.getOrganizationsByIdOrgByField(idOrg, field, key, token);
        // TODO: test validations
    }

    /**
     * getOrganizationsDeltasByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsDeltasByIdOrgTest() throws ApiException {
        String idOrg = null;
        String tags = null;
        String ixLastUpdate = null;
        String key = null;
        String token = null;
        api.getOrganizationsDeltasByIdOrg(idOrg, tags, ixLastUpdate, key, token);
        // TODO: test validations
    }

    /**
     * getOrganizationsMembersByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsMembersByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        String filter = null;
        String fields = null;
        String activity = null;
        api.getOrganizationsMembersByIdOrg(idOrg, key, token, filter, fields, activity);
        // TODO: test validations
    }

    /**
     * getOrganizationsMembersByIdOrgByFilter()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsMembersByIdOrgByFilterTest() throws ApiException {
        String idOrg = null;
        String filter = null;
        String key = null;
        String token = null;
        api.getOrganizationsMembersByIdOrgByFilter(idOrg, filter, key, token);
        // TODO: test validations
    }

    /**
     * getOrganizationsMembersCardsByIdOrgByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsMembersCardsByIdOrgByIdMemberTest() throws ApiException {
        String idOrg = null;
        String idMember = null;
        String key = null;
        String token = null;
        String actions = null;
        String attachments = null;
        String attachmentFields = null;
        String members = null;
        String memberFields = null;
        String checkItemStates = null;
        String checklists = null;
        String board = null;
        String boardFields = null;
        String _list = null;
        String listFields = null;
        String filter = null;
        String fields = null;
        api.getOrganizationsMembersCardsByIdOrgByIdMember(idOrg, idMember, key, token, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, _list, listFields, filter, fields);
        // TODO: test validations
    }

    /**
     * getOrganizationsMembersInvitedByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsMembersInvitedByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        String fields = null;
        api.getOrganizationsMembersInvitedByIdOrg(idOrg, key, token, fields);
        // TODO: test validations
    }

    /**
     * getOrganizationsMembersInvitedByIdOrgByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsMembersInvitedByIdOrgByFieldTest() throws ApiException {
        String idOrg = null;
        String field = null;
        String key = null;
        String token = null;
        api.getOrganizationsMembersInvitedByIdOrgByField(idOrg, field, key, token);
        // TODO: test validations
    }

    /**
     * getOrganizationsMembershipsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsMembershipsByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        String filter = null;
        String member = null;
        String memberFields = null;
        api.getOrganizationsMembershipsByIdOrg(idOrg, key, token, filter, member, memberFields);
        // TODO: test validations
    }

    /**
     * getOrganizationsMembershipsByIdOrgByIdMembership()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsMembershipsByIdOrgByIdMembershipTest() throws ApiException {
        String idOrg = null;
        String idMembership = null;
        String key = null;
        String token = null;
        String member = null;
        String memberFields = null;
        api.getOrganizationsMembershipsByIdOrgByIdMembership(idOrg, idMembership, key, token, member, memberFields);
        // TODO: test validations
    }

    /**
     * updateOrganizationsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        Organizations organizations = null;
        api.updateOrganizationsByIdOrg(idOrg, key, token, organizations);
        // TODO: test validations
    }

    /**
     * updateOrganizationsDescByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsDescByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        OrganizationsDesc organizationsDesc = null;
        api.updateOrganizationsDescByIdOrg(idOrg, key, token, organizationsDesc);
        // TODO: test validations
    }

    /**
     * updateOrganizationsDisplayNameByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsDisplayNameByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        OrganizationsDisplayName organizationsDisplayName = null;
        api.updateOrganizationsDisplayNameByIdOrg(idOrg, key, token, organizationsDisplayName);
        // TODO: test validations
    }

    /**
     * updateOrganizationsMembersByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsMembersByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        OrganizationsMembers organizationsMembers = null;
        api.updateOrganizationsMembersByIdOrg(idOrg, key, token, organizationsMembers);
        // TODO: test validations
    }

    /**
     * updateOrganizationsMembersByIdOrgByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsMembersByIdOrgByIdMemberTest() throws ApiException {
        String idOrg = null;
        String idMember = null;
        String key = null;
        String token = null;
        OrganizationsMembers organizationsMembers = null;
        api.updateOrganizationsMembersByIdOrgByIdMember(idOrg, idMember, key, token, organizationsMembers);
        // TODO: test validations
    }

    /**
     * updateOrganizationsMembersDeactivatedByIdOrgByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsMembersDeactivatedByIdOrgByIdMemberTest() throws ApiException {
        String idOrg = null;
        String idMember = null;
        String key = null;
        String token = null;
        OrganizationsMembersDeactivated organizationsMembersDeactivated = null;
        api.updateOrganizationsMembersDeactivatedByIdOrgByIdMember(idOrg, idMember, key, token, organizationsMembersDeactivated);
        // TODO: test validations
    }

    /**
     * updateOrganizationsMembershipsByIdOrgByIdMembership()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsMembershipsByIdOrgByIdMembershipTest() throws ApiException {
        String idOrg = null;
        String idMembership = null;
        String key = null;
        String token = null;
        OrganizationsMemberships organizationsMemberships = null;
        api.updateOrganizationsMembershipsByIdOrgByIdMembership(idOrg, idMembership, key, token, organizationsMemberships);
        // TODO: test validations
    }

    /**
     * updateOrganizationsNameByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsNameByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        OrganizationsName organizationsName = null;
        api.updateOrganizationsNameByIdOrg(idOrg, key, token, organizationsName);
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsAssociatedDomainByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsPrefsAssociatedDomainByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        PrefsAssociatedDomain prefsAssociatedDomain = null;
        api.updateOrganizationsPrefsAssociatedDomainByIdOrg(idOrg, key, token, prefsAssociatedDomain);
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = null;
        api.updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg(idOrg, key, token, prefsBoardVisibilityRestrict);
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = null;
        api.updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg(idOrg, key, token, prefsBoardVisibilityRestrict);
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = null;
        api.updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg(idOrg, key, token, prefsBoardVisibilityRestrict);
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsExternalMembersDisabledByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsPrefsExternalMembersDisabledByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        PrefsExternalMembersDisabled prefsExternalMembersDisabled = null;
        api.updateOrganizationsPrefsExternalMembersDisabledByIdOrg(idOrg, key, token, prefsExternalMembersDisabled);
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsGoogleAppsVersionByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsPrefsGoogleAppsVersionByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        PrefsGoogleAppsVersion prefsGoogleAppsVersion = null;
        api.updateOrganizationsPrefsGoogleAppsVersionByIdOrg(idOrg, key, token, prefsGoogleAppsVersion);
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsOrgInviteRestrictByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsPrefsOrgInviteRestrictByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        PrefsOrgInviteRestrict prefsOrgInviteRestrict = null;
        api.updateOrganizationsPrefsOrgInviteRestrictByIdOrg(idOrg, key, token, prefsOrgInviteRestrict);
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsPermissionLevelByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsPrefsPermissionLevelByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        PrefsPermissionLevel prefsPermissionLevel = null;
        api.updateOrganizationsPrefsPermissionLevelByIdOrg(idOrg, key, token, prefsPermissionLevel);
        // TODO: test validations
    }

    /**
     * updateOrganizationsWebsiteByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationsWebsiteByIdOrgTest() throws ApiException {
        String idOrg = null;
        String key = null;
        String token = null;
        OrganizationsWebsite organizationsWebsite = null;
        api.updateOrganizationsWebsiteByIdOrg(idOrg, key, token, organizationsWebsite);
        // TODO: test validations
    }

}
