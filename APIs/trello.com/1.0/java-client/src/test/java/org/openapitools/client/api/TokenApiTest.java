/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.TokensWebhooks;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokenApi
 */
@Disabled
public class TokenApiTest {

    private final TokenApi api = new TokenApi();

    /**
     * addTokensWebhooksByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTokensWebhooksByTokenTest() throws ApiException {
        String token = null;
        String key = null;
        String token2 = null;
        TokensWebhooks tokensWebhooks = null;
        api.addTokensWebhooksByToken(token, key, token2, tokensWebhooks);
        // TODO: test validations
    }

    /**
     * deleteTokensByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTokensByTokenTest() throws ApiException {
        String token = null;
        String key = null;
        String token2 = null;
        api.deleteTokensByToken(token, key, token2);
        // TODO: test validations
    }

    /**
     * deleteTokensWebhooksByTokenByIdWebhook()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTokensWebhooksByTokenByIdWebhookTest() throws ApiException {
        String token = null;
        String idWebhook = null;
        String key = null;
        String token2 = null;
        api.deleteTokensWebhooksByTokenByIdWebhook(token, idWebhook, key, token2);
        // TODO: test validations
    }

    /**
     * getTokensByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokensByTokenTest() throws ApiException {
        String token = null;
        String key = null;
        String token2 = null;
        String fields = null;
        String webhooks = null;
        api.getTokensByToken(token, key, token2, fields, webhooks);
        // TODO: test validations
    }

    /**
     * getTokensByTokenByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokensByTokenByFieldTest() throws ApiException {
        String token = null;
        String field = null;
        String key = null;
        String token2 = null;
        api.getTokensByTokenByField(token, field, key, token2);
        // TODO: test validations
    }

    /**
     * getTokensMemberByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokensMemberByTokenTest() throws ApiException {
        String token = null;
        String key = null;
        String token2 = null;
        String fields = null;
        api.getTokensMemberByToken(token, key, token2, fields);
        // TODO: test validations
    }

    /**
     * getTokensMemberByTokenByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokensMemberByTokenByFieldTest() throws ApiException {
        String token = null;
        String field = null;
        String key = null;
        String token2 = null;
        api.getTokensMemberByTokenByField(token, field, key, token2);
        // TODO: test validations
    }

    /**
     * getTokensWebhooksByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokensWebhooksByTokenTest() throws ApiException {
        String token = null;
        String key = null;
        String token2 = null;
        api.getTokensWebhooksByToken(token, key, token2);
        // TODO: test validations
    }

    /**
     * getTokensWebhooksByTokenByIdWebhook()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokensWebhooksByTokenByIdWebhookTest() throws ApiException {
        String token = null;
        String idWebhook = null;
        String key = null;
        String token2 = null;
        api.getTokensWebhooksByTokenByIdWebhook(token, idWebhook, key, token2);
        // TODO: test validations
    }

    /**
     * updateTokensWebhooksByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTokensWebhooksByTokenTest() throws ApiException {
        String token = null;
        String key = null;
        String token2 = null;
        TokensWebhooks tokensWebhooks = null;
        api.updateTokensWebhooksByToken(token, key, token2, tokensWebhooks);
        // TODO: test validations
    }

}
