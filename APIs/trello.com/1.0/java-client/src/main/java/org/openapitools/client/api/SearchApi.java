/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSearch
     * @param query a string with a length from 1 to 16384 (required)
     * @param idOrganizations A comma-separated list of objectIds, 24-character hex strings (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param idBoards A comma-separated list of objectIds, 24-character hex strings (optional, default to mine)
     * @param idCards A comma-separated list of objectIds, 24-character hex strings (optional)
     * @param modelTypes all or a comma-separated list of: actions, boards, cards, members or organizations (optional, default to all)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name and idOrganization)
     * @param boardsLimit a number from 1 to 1000 (optional, default to 10)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardsLimit a number from 1 to 1000 (optional, default to 10)
     * @param cardsPage a number from 0 to 100 (optional, default to 0)
     * @param cardBoard  true or false (optional)
     * @param cardList  true or false (optional)
     * @param cardMembers  true or false (optional)
     * @param cardStickers  true or false (optional)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param organizationsLimit a number from 1 to 1000 (optional, default to 10)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials, username and confirmed)
     * @param membersLimit a number from 1 to 1000 (optional, default to 10)
     * @param partial  true or false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchCall(String query, String idOrganizations, String key, String token, String idBoards, String idCards, String modelTypes, String boardFields, String boardsLimit, String cardFields, String cardsLimit, String cardsPage, String cardBoard, String cardList, String cardMembers, String cardStickers, String cardAttachments, String organizationFields, String organizationsLimit, String memberFields, String membersLimit, String partial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (idBoards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idBoards", idBoards));
        }

        if (idOrganizations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idOrganizations", idOrganizations));
        }

        if (idCards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idCards", idCards));
        }

        if (modelTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelTypes", modelTypes));
        }

        if (boardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_fields", boardFields));
        }

        if (boardsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boards_limit", boardsLimit));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (cardsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards_limit", cardsLimit));
        }

        if (cardsPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards_page", cardsPage));
        }

        if (cardBoard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_board", cardBoard));
        }

        if (cardList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_list", cardList));
        }

        if (cardMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_members", cardMembers));
        }

        if (cardStickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_stickers", cardStickers));
        }

        if (cardAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_attachments", cardAttachments));
        }

        if (organizationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_fields", organizationFields));
        }

        if (organizationsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizations_limit", organizationsLimit));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (membersLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members_limit", membersLimit));
        }

        if (partial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partial", partial));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchValidateBeforeCall(String query, String idOrganizations, String key, String token, String idBoards, String idCards, String modelTypes, String boardFields, String boardsLimit, String cardFields, String cardsLimit, String cardsPage, String cardBoard, String cardList, String cardMembers, String cardStickers, String cardAttachments, String organizationFields, String organizationsLimit, String memberFields, String membersLimit, String partial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getSearch(Async)");
        }

        // verify the required parameter 'idOrganizations' is set
        if (idOrganizations == null) {
            throw new ApiException("Missing the required parameter 'idOrganizations' when calling getSearch(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getSearch(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getSearch(Async)");
        }

        return getSearchCall(query, idOrganizations, key, token, idBoards, idCards, modelTypes, boardFields, boardsLimit, cardFields, cardsLimit, cardsPage, cardBoard, cardList, cardMembers, cardStickers, cardAttachments, organizationFields, organizationsLimit, memberFields, membersLimit, partial, _callback);

    }

    /**
     * getSearch()
     * 
     * @param query a string with a length from 1 to 16384 (required)
     * @param idOrganizations A comma-separated list of objectIds, 24-character hex strings (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param idBoards A comma-separated list of objectIds, 24-character hex strings (optional, default to mine)
     * @param idCards A comma-separated list of objectIds, 24-character hex strings (optional)
     * @param modelTypes all or a comma-separated list of: actions, boards, cards, members or organizations (optional, default to all)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name and idOrganization)
     * @param boardsLimit a number from 1 to 1000 (optional, default to 10)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardsLimit a number from 1 to 1000 (optional, default to 10)
     * @param cardsPage a number from 0 to 100 (optional, default to 0)
     * @param cardBoard  true or false (optional)
     * @param cardList  true or false (optional)
     * @param cardMembers  true or false (optional)
     * @param cardStickers  true or false (optional)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param organizationsLimit a number from 1 to 1000 (optional, default to 10)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials, username and confirmed)
     * @param membersLimit a number from 1 to 1000 (optional, default to 10)
     * @param partial  true or false (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getSearch(String query, String idOrganizations, String key, String token, String idBoards, String idCards, String modelTypes, String boardFields, String boardsLimit, String cardFields, String cardsLimit, String cardsPage, String cardBoard, String cardList, String cardMembers, String cardStickers, String cardAttachments, String organizationFields, String organizationsLimit, String memberFields, String membersLimit, String partial) throws ApiException {
        getSearchWithHttpInfo(query, idOrganizations, key, token, idBoards, idCards, modelTypes, boardFields, boardsLimit, cardFields, cardsLimit, cardsPage, cardBoard, cardList, cardMembers, cardStickers, cardAttachments, organizationFields, organizationsLimit, memberFields, membersLimit, partial);
    }

    /**
     * getSearch()
     * 
     * @param query a string with a length from 1 to 16384 (required)
     * @param idOrganizations A comma-separated list of objectIds, 24-character hex strings (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param idBoards A comma-separated list of objectIds, 24-character hex strings (optional, default to mine)
     * @param idCards A comma-separated list of objectIds, 24-character hex strings (optional)
     * @param modelTypes all or a comma-separated list of: actions, boards, cards, members or organizations (optional, default to all)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name and idOrganization)
     * @param boardsLimit a number from 1 to 1000 (optional, default to 10)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardsLimit a number from 1 to 1000 (optional, default to 10)
     * @param cardsPage a number from 0 to 100 (optional, default to 0)
     * @param cardBoard  true or false (optional)
     * @param cardList  true or false (optional)
     * @param cardMembers  true or false (optional)
     * @param cardStickers  true or false (optional)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param organizationsLimit a number from 1 to 1000 (optional, default to 10)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials, username and confirmed)
     * @param membersLimit a number from 1 to 1000 (optional, default to 10)
     * @param partial  true or false (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSearchWithHttpInfo(String query, String idOrganizations, String key, String token, String idBoards, String idCards, String modelTypes, String boardFields, String boardsLimit, String cardFields, String cardsLimit, String cardsPage, String cardBoard, String cardList, String cardMembers, String cardStickers, String cardAttachments, String organizationFields, String organizationsLimit, String memberFields, String membersLimit, String partial) throws ApiException {
        okhttp3.Call localVarCall = getSearchValidateBeforeCall(query, idOrganizations, key, token, idBoards, idCards, modelTypes, boardFields, boardsLimit, cardFields, cardsLimit, cardsPage, cardBoard, cardList, cardMembers, cardStickers, cardAttachments, organizationFields, organizationsLimit, memberFields, membersLimit, partial, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getSearch() (asynchronously)
     * 
     * @param query a string with a length from 1 to 16384 (required)
     * @param idOrganizations A comma-separated list of objectIds, 24-character hex strings (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param idBoards A comma-separated list of objectIds, 24-character hex strings (optional, default to mine)
     * @param idCards A comma-separated list of objectIds, 24-character hex strings (optional)
     * @param modelTypes all or a comma-separated list of: actions, boards, cards, members or organizations (optional, default to all)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name and idOrganization)
     * @param boardsLimit a number from 1 to 1000 (optional, default to 10)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardsLimit a number from 1 to 1000 (optional, default to 10)
     * @param cardsPage a number from 0 to 100 (optional, default to 0)
     * @param cardBoard  true or false (optional)
     * @param cardList  true or false (optional)
     * @param cardMembers  true or false (optional)
     * @param cardStickers  true or false (optional)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param organizationsLimit a number from 1 to 1000 (optional, default to 10)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials, username and confirmed)
     * @param membersLimit a number from 1 to 1000 (optional, default to 10)
     * @param partial  true or false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchAsync(String query, String idOrganizations, String key, String token, String idBoards, String idCards, String modelTypes, String boardFields, String boardsLimit, String cardFields, String cardsLimit, String cardsPage, String cardBoard, String cardList, String cardMembers, String cardStickers, String cardAttachments, String organizationFields, String organizationsLimit, String memberFields, String membersLimit, String partial, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchValidateBeforeCall(query, idOrganizations, key, token, idBoards, idCards, modelTypes, boardFields, boardsLimit, cardFields, cardsLimit, cardsPage, cardBoard, cardList, cardMembers, cardStickers, cardAttachments, organizationFields, organizationsLimit, memberFields, membersLimit, partial, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSearchMembers
     * @param query a string with a length from 1 to 16384 (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param limit a number from 1 to 20 (optional, default to 8)
     * @param idBoard An id, or null (optional)
     * @param idOrganization An id, or null (optional)
     * @param onlyOrgMembers A boolean (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchMembersCall(String query, String key, String token, String limit, String idBoard, String idOrganization, String onlyOrgMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (idBoard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idBoard", idBoard));
        }

        if (idOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idOrganization", idOrganization));
        }

        if (onlyOrgMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyOrgMembers", onlyOrgMembers));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchMembersValidateBeforeCall(String query, String key, String token, String limit, String idBoard, String idOrganization, String onlyOrgMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getSearchMembers(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getSearchMembers(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getSearchMembers(Async)");
        }

        return getSearchMembersCall(query, key, token, limit, idBoard, idOrganization, onlyOrgMembers, _callback);

    }

    /**
     * getSearchMembers()
     * 
     * @param query a string with a length from 1 to 16384 (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param limit a number from 1 to 20 (optional, default to 8)
     * @param idBoard An id, or null (optional)
     * @param idOrganization An id, or null (optional)
     * @param onlyOrgMembers A boolean (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getSearchMembers(String query, String key, String token, String limit, String idBoard, String idOrganization, String onlyOrgMembers) throws ApiException {
        getSearchMembersWithHttpInfo(query, key, token, limit, idBoard, idOrganization, onlyOrgMembers);
    }

    /**
     * getSearchMembers()
     * 
     * @param query a string with a length from 1 to 16384 (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param limit a number from 1 to 20 (optional, default to 8)
     * @param idBoard An id, or null (optional)
     * @param idOrganization An id, or null (optional)
     * @param onlyOrgMembers A boolean (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSearchMembersWithHttpInfo(String query, String key, String token, String limit, String idBoard, String idOrganization, String onlyOrgMembers) throws ApiException {
        okhttp3.Call localVarCall = getSearchMembersValidateBeforeCall(query, key, token, limit, idBoard, idOrganization, onlyOrgMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getSearchMembers() (asynchronously)
     * 
     * @param query a string with a length from 1 to 16384 (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param limit a number from 1 to 20 (optional, default to 8)
     * @param idBoard An id, or null (optional)
     * @param idOrganization An id, or null (optional)
     * @param onlyOrgMembers A boolean (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchMembersAsync(String query, String key, String token, String limit, String idBoard, String idOrganization, String onlyOrgMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchMembersValidateBeforeCall(query, key, token, limit, idBoard, idOrganization, onlyOrgMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
