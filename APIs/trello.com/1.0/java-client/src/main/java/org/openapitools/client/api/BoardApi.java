/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Boards;
import org.openapitools.client.model.BoardsChecklists;
import org.openapitools.client.model.BoardsClosed;
import org.openapitools.client.model.BoardsDesc;
import org.openapitools.client.model.BoardsIdOrganization;
import org.openapitools.client.model.BoardsLabels;
import org.openapitools.client.model.BoardsLists;
import org.openapitools.client.model.BoardsMembers;
import org.openapitools.client.model.BoardsMemberships;
import org.openapitools.client.model.BoardsName;
import org.openapitools.client.model.BoardsPowerUps;
import org.openapitools.client.model.BoardsSubscribed;
import org.openapitools.client.model.LabelNamesBlue;
import org.openapitools.client.model.LabelNamesGreen;
import org.openapitools.client.model.LabelNamesOrange;
import org.openapitools.client.model.LabelNamesPurple;
import org.openapitools.client.model.LabelNamesRed;
import org.openapitools.client.model.LabelNamesYellow;
import org.openapitools.client.model.MyPrefsEmailPosition;
import org.openapitools.client.model.MyPrefsIdEmailList;
import org.openapitools.client.model.MyPrefsShowListGuide;
import org.openapitools.client.model.MyPrefsShowSidebar;
import org.openapitools.client.model.MyPrefsShowSidebarActivity;
import org.openapitools.client.model.MyPrefsShowSidebarBoardActions;
import org.openapitools.client.model.MyPrefsShowSidebarMembers;
import org.openapitools.client.model.PrefsBackground;
import org.openapitools.client.model.PrefsCalendarFeedEnabled;
import org.openapitools.client.model.PrefsCardAging;
import org.openapitools.client.model.PrefsCardCovers;
import org.openapitools.client.model.PrefsComments;
import org.openapitools.client.model.PrefsInvitations;
import org.openapitools.client.model.PrefsPermissionLevel;
import org.openapitools.client.model.PrefsSelfJoin;
import org.openapitools.client.model.PrefsVoting;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BoardApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BoardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BoardApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addBoards
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boards Attributes of \&quot;Boards\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsCall(String key, String token, Boards boards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boards;

        // create path and map variables
        String localVarPath = "/boards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBoardsValidateBeforeCall(String key, String token, Boards boards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addBoards(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addBoards(Async)");
        }

        // verify the required parameter 'boards' is set
        if (boards == null) {
            throw new ApiException("Missing the required parameter 'boards' when calling addBoards(Async)");
        }

        return addBoardsCall(key, token, boards, _callback);

    }

    /**
     * addBoards()
     * 
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boards Attributes of \&quot;Boards\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addBoards(String key, String token, Boards boards) throws ApiException {
        addBoardsWithHttpInfo(key, token, boards);
    }

    /**
     * addBoards()
     * 
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boards Attributes of \&quot;Boards\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addBoardsWithHttpInfo(String key, String token, Boards boards) throws ApiException {
        okhttp3.Call localVarCall = addBoardsValidateBeforeCall(key, token, boards, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addBoards() (asynchronously)
     * 
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boards Attributes of \&quot;Boards\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsAsync(String key, String token, Boards boards, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBoardsValidateBeforeCall(key, token, boards, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addBoardsCalendarKeyGenerateByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsCalendarKeyGenerateByIdBoardCall(String idBoard, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/calendarKey/generate"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBoardsCalendarKeyGenerateByIdBoardValidateBeforeCall(String idBoard, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling addBoardsCalendarKeyGenerateByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addBoardsCalendarKeyGenerateByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addBoardsCalendarKeyGenerateByIdBoard(Async)");
        }

        return addBoardsCalendarKeyGenerateByIdBoardCall(idBoard, key, token, _callback);

    }

    /**
     * addBoardsCalendarKeyGenerateByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addBoardsCalendarKeyGenerateByIdBoard(String idBoard, String key, String token) throws ApiException {
        addBoardsCalendarKeyGenerateByIdBoardWithHttpInfo(idBoard, key, token);
    }

    /**
     * addBoardsCalendarKeyGenerateByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addBoardsCalendarKeyGenerateByIdBoardWithHttpInfo(String idBoard, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = addBoardsCalendarKeyGenerateByIdBoardValidateBeforeCall(idBoard, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addBoardsCalendarKeyGenerateByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsCalendarKeyGenerateByIdBoardAsync(String idBoard, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBoardsCalendarKeyGenerateByIdBoardValidateBeforeCall(idBoard, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addBoardsChecklistsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsChecklists Attributes of \&quot;Boards Checklists\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsChecklistsByIdBoardCall(String idBoard, String key, String token, BoardsChecklists boardsChecklists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsChecklists;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/checklists"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBoardsChecklistsByIdBoardValidateBeforeCall(String idBoard, String key, String token, BoardsChecklists boardsChecklists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling addBoardsChecklistsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addBoardsChecklistsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addBoardsChecklistsByIdBoard(Async)");
        }

        // verify the required parameter 'boardsChecklists' is set
        if (boardsChecklists == null) {
            throw new ApiException("Missing the required parameter 'boardsChecklists' when calling addBoardsChecklistsByIdBoard(Async)");
        }

        return addBoardsChecklistsByIdBoardCall(idBoard, key, token, boardsChecklists, _callback);

    }

    /**
     * addBoardsChecklistsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsChecklists Attributes of \&quot;Boards Checklists\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addBoardsChecklistsByIdBoard(String idBoard, String key, String token, BoardsChecklists boardsChecklists) throws ApiException {
        addBoardsChecklistsByIdBoardWithHttpInfo(idBoard, key, token, boardsChecklists);
    }

    /**
     * addBoardsChecklistsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsChecklists Attributes of \&quot;Boards Checklists\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addBoardsChecklistsByIdBoardWithHttpInfo(String idBoard, String key, String token, BoardsChecklists boardsChecklists) throws ApiException {
        okhttp3.Call localVarCall = addBoardsChecklistsByIdBoardValidateBeforeCall(idBoard, key, token, boardsChecklists, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addBoardsChecklistsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsChecklists Attributes of \&quot;Boards Checklists\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsChecklistsByIdBoardAsync(String idBoard, String key, String token, BoardsChecklists boardsChecklists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBoardsChecklistsByIdBoardValidateBeforeCall(idBoard, key, token, boardsChecklists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addBoardsEmailKeyGenerateByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsEmailKeyGenerateByIdBoardCall(String idBoard, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/emailKey/generate"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBoardsEmailKeyGenerateByIdBoardValidateBeforeCall(String idBoard, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling addBoardsEmailKeyGenerateByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addBoardsEmailKeyGenerateByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addBoardsEmailKeyGenerateByIdBoard(Async)");
        }

        return addBoardsEmailKeyGenerateByIdBoardCall(idBoard, key, token, _callback);

    }

    /**
     * addBoardsEmailKeyGenerateByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addBoardsEmailKeyGenerateByIdBoard(String idBoard, String key, String token) throws ApiException {
        addBoardsEmailKeyGenerateByIdBoardWithHttpInfo(idBoard, key, token);
    }

    /**
     * addBoardsEmailKeyGenerateByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addBoardsEmailKeyGenerateByIdBoardWithHttpInfo(String idBoard, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = addBoardsEmailKeyGenerateByIdBoardValidateBeforeCall(idBoard, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addBoardsEmailKeyGenerateByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsEmailKeyGenerateByIdBoardAsync(String idBoard, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBoardsEmailKeyGenerateByIdBoardValidateBeforeCall(idBoard, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addBoardsLabelsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsLabels Attributes of \&quot;Boards Labels\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsLabelsByIdBoardCall(String idBoard, String key, String token, BoardsLabels boardsLabels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsLabels;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labels"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBoardsLabelsByIdBoardValidateBeforeCall(String idBoard, String key, String token, BoardsLabels boardsLabels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling addBoardsLabelsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addBoardsLabelsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addBoardsLabelsByIdBoard(Async)");
        }

        // verify the required parameter 'boardsLabels' is set
        if (boardsLabels == null) {
            throw new ApiException("Missing the required parameter 'boardsLabels' when calling addBoardsLabelsByIdBoard(Async)");
        }

        return addBoardsLabelsByIdBoardCall(idBoard, key, token, boardsLabels, _callback);

    }

    /**
     * addBoardsLabelsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsLabels Attributes of \&quot;Boards Labels\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addBoardsLabelsByIdBoard(String idBoard, String key, String token, BoardsLabels boardsLabels) throws ApiException {
        addBoardsLabelsByIdBoardWithHttpInfo(idBoard, key, token, boardsLabels);
    }

    /**
     * addBoardsLabelsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsLabels Attributes of \&quot;Boards Labels\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addBoardsLabelsByIdBoardWithHttpInfo(String idBoard, String key, String token, BoardsLabels boardsLabels) throws ApiException {
        okhttp3.Call localVarCall = addBoardsLabelsByIdBoardValidateBeforeCall(idBoard, key, token, boardsLabels, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addBoardsLabelsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsLabels Attributes of \&quot;Boards Labels\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsLabelsByIdBoardAsync(String idBoard, String key, String token, BoardsLabels boardsLabels, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBoardsLabelsByIdBoardValidateBeforeCall(idBoard, key, token, boardsLabels, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addBoardsListsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsLists Attributes of \&quot;Boards Lists\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsListsByIdBoardCall(String idBoard, String key, String token, BoardsLists boardsLists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsLists;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/lists"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBoardsListsByIdBoardValidateBeforeCall(String idBoard, String key, String token, BoardsLists boardsLists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling addBoardsListsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addBoardsListsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addBoardsListsByIdBoard(Async)");
        }

        // verify the required parameter 'boardsLists' is set
        if (boardsLists == null) {
            throw new ApiException("Missing the required parameter 'boardsLists' when calling addBoardsListsByIdBoard(Async)");
        }

        return addBoardsListsByIdBoardCall(idBoard, key, token, boardsLists, _callback);

    }

    /**
     * addBoardsListsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsLists Attributes of \&quot;Boards Lists\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addBoardsListsByIdBoard(String idBoard, String key, String token, BoardsLists boardsLists) throws ApiException {
        addBoardsListsByIdBoardWithHttpInfo(idBoard, key, token, boardsLists);
    }

    /**
     * addBoardsListsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsLists Attributes of \&quot;Boards Lists\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addBoardsListsByIdBoardWithHttpInfo(String idBoard, String key, String token, BoardsLists boardsLists) throws ApiException {
        okhttp3.Call localVarCall = addBoardsListsByIdBoardValidateBeforeCall(idBoard, key, token, boardsLists, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addBoardsListsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsLists Attributes of \&quot;Boards Lists\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsListsByIdBoardAsync(String idBoard, String key, String token, BoardsLists boardsLists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBoardsListsByIdBoardValidateBeforeCall(idBoard, key, token, boardsLists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addBoardsMarkAsViewedByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsMarkAsViewedByIdBoardCall(String idBoard, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/markAsViewed"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBoardsMarkAsViewedByIdBoardValidateBeforeCall(String idBoard, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling addBoardsMarkAsViewedByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addBoardsMarkAsViewedByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addBoardsMarkAsViewedByIdBoard(Async)");
        }

        return addBoardsMarkAsViewedByIdBoardCall(idBoard, key, token, _callback);

    }

    /**
     * addBoardsMarkAsViewedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addBoardsMarkAsViewedByIdBoard(String idBoard, String key, String token) throws ApiException {
        addBoardsMarkAsViewedByIdBoardWithHttpInfo(idBoard, key, token);
    }

    /**
     * addBoardsMarkAsViewedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addBoardsMarkAsViewedByIdBoardWithHttpInfo(String idBoard, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = addBoardsMarkAsViewedByIdBoardValidateBeforeCall(idBoard, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addBoardsMarkAsViewedByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsMarkAsViewedByIdBoardAsync(String idBoard, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBoardsMarkAsViewedByIdBoardValidateBeforeCall(idBoard, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addBoardsPowerUpsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsPowerUps Attributes of \&quot;Boards Power Ups\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsPowerUpsByIdBoardCall(String idBoard, String key, String token, BoardsPowerUps boardsPowerUps, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsPowerUps;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/powerUps"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBoardsPowerUpsByIdBoardValidateBeforeCall(String idBoard, String key, String token, BoardsPowerUps boardsPowerUps, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling addBoardsPowerUpsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addBoardsPowerUpsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addBoardsPowerUpsByIdBoard(Async)");
        }

        // verify the required parameter 'boardsPowerUps' is set
        if (boardsPowerUps == null) {
            throw new ApiException("Missing the required parameter 'boardsPowerUps' when calling addBoardsPowerUpsByIdBoard(Async)");
        }

        return addBoardsPowerUpsByIdBoardCall(idBoard, key, token, boardsPowerUps, _callback);

    }

    /**
     * addBoardsPowerUpsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsPowerUps Attributes of \&quot;Boards Power Ups\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addBoardsPowerUpsByIdBoard(String idBoard, String key, String token, BoardsPowerUps boardsPowerUps) throws ApiException {
        addBoardsPowerUpsByIdBoardWithHttpInfo(idBoard, key, token, boardsPowerUps);
    }

    /**
     * addBoardsPowerUpsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsPowerUps Attributes of \&quot;Boards Power Ups\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addBoardsPowerUpsByIdBoardWithHttpInfo(String idBoard, String key, String token, BoardsPowerUps boardsPowerUps) throws ApiException {
        okhttp3.Call localVarCall = addBoardsPowerUpsByIdBoardValidateBeforeCall(idBoard, key, token, boardsPowerUps, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addBoardsPowerUpsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsPowerUps Attributes of \&quot;Boards Power Ups\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBoardsPowerUpsByIdBoardAsync(String idBoard, String key, String token, BoardsPowerUps boardsPowerUps, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBoardsPowerUpsByIdBoardValidateBeforeCall(idBoard, key, token, boardsPowerUps, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBoardsMembersByIdBoardByIdMember
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBoardsMembersByIdBoardByIdMemberCall(String idBoard, String idMember, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members/{idMember}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBoardsMembersByIdBoardByIdMemberValidateBeforeCall(String idBoard, String idMember, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling deleteBoardsMembersByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling deleteBoardsMembersByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteBoardsMembersByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteBoardsMembersByIdBoardByIdMember(Async)");
        }

        return deleteBoardsMembersByIdBoardByIdMemberCall(idBoard, idMember, key, token, _callback);

    }

    /**
     * deleteBoardsMembersByIdBoardByIdMember()
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBoardsMembersByIdBoardByIdMember(String idBoard, String idMember, String key, String token) throws ApiException {
        deleteBoardsMembersByIdBoardByIdMemberWithHttpInfo(idBoard, idMember, key, token);
    }

    /**
     * deleteBoardsMembersByIdBoardByIdMember()
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBoardsMembersByIdBoardByIdMemberWithHttpInfo(String idBoard, String idMember, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteBoardsMembersByIdBoardByIdMemberValidateBeforeCall(idBoard, idMember, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteBoardsMembersByIdBoardByIdMember() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBoardsMembersByIdBoardByIdMemberAsync(String idBoard, String idMember, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBoardsMembersByIdBoardByIdMemberValidateBeforeCall(idBoard, idMember, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBoardsPowerUpsByIdBoardByPowerUp
     * @param idBoard board_id (required)
     * @param powerUp powerUp (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBoardsPowerUpsByIdBoardByPowerUpCall(String idBoard, String powerUp, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/powerUps/{powerUp}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "powerUp" + "}", localVarApiClient.escapeString(powerUp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBoardsPowerUpsByIdBoardByPowerUpValidateBeforeCall(String idBoard, String powerUp, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling deleteBoardsPowerUpsByIdBoardByPowerUp(Async)");
        }

        // verify the required parameter 'powerUp' is set
        if (powerUp == null) {
            throw new ApiException("Missing the required parameter 'powerUp' when calling deleteBoardsPowerUpsByIdBoardByPowerUp(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteBoardsPowerUpsByIdBoardByPowerUp(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteBoardsPowerUpsByIdBoardByPowerUp(Async)");
        }

        return deleteBoardsPowerUpsByIdBoardByPowerUpCall(idBoard, powerUp, key, token, _callback);

    }

    /**
     * deleteBoardsPowerUpsByIdBoardByPowerUp()
     * 
     * @param idBoard board_id (required)
     * @param powerUp powerUp (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBoardsPowerUpsByIdBoardByPowerUp(String idBoard, String powerUp, String key, String token) throws ApiException {
        deleteBoardsPowerUpsByIdBoardByPowerUpWithHttpInfo(idBoard, powerUp, key, token);
    }

    /**
     * deleteBoardsPowerUpsByIdBoardByPowerUp()
     * 
     * @param idBoard board_id (required)
     * @param powerUp powerUp (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBoardsPowerUpsByIdBoardByPowerUpWithHttpInfo(String idBoard, String powerUp, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteBoardsPowerUpsByIdBoardByPowerUpValidateBeforeCall(idBoard, powerUp, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteBoardsPowerUpsByIdBoardByPowerUp() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param powerUp powerUp (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBoardsPowerUpsByIdBoardByPowerUpAsync(String idBoard, String powerUp, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBoardsPowerUpsByIdBoardByPowerUpValidateBeforeCall(idBoard, powerUp, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsActionsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsActionsByIdBoardCall(String idBoard, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/actions"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (idModels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idModels", idModels));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsActionsByIdBoardValidateBeforeCall(String idBoard, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsActionsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsActionsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsActionsByIdBoard(Async)");
        }

        return getBoardsActionsByIdBoardCall(idBoard, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);

    }

    /**
     * getBoardsActionsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsActionsByIdBoard(String idBoard, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        getBoardsActionsByIdBoardWithHttpInfo(idBoard, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
    }

    /**
     * getBoardsActionsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsActionsByIdBoardWithHttpInfo(String idBoard, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsActionsByIdBoardValidateBeforeCall(idBoard, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsActionsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsActionsByIdBoardAsync(String idBoard, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsActionsByIdBoardValidateBeforeCall(idBoard, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsBoardStarsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: mine or none (optional, default to mine)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsBoardStarsByIdBoardCall(String idBoard, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/boardStars"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsBoardStarsByIdBoardValidateBeforeCall(String idBoard, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsBoardStarsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsBoardStarsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsBoardStarsByIdBoard(Async)");
        }

        return getBoardsBoardStarsByIdBoardCall(idBoard, key, token, filter, _callback);

    }

    /**
     * getBoardsBoardStarsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: mine or none (optional, default to mine)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsBoardStarsByIdBoard(String idBoard, String key, String token, String filter) throws ApiException {
        getBoardsBoardStarsByIdBoardWithHttpInfo(idBoard, key, token, filter);
    }

    /**
     * getBoardsBoardStarsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: mine or none (optional, default to mine)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsBoardStarsByIdBoardWithHttpInfo(String idBoard, String key, String token, String filter) throws ApiException {
        okhttp3.Call localVarCall = getBoardsBoardStarsByIdBoardValidateBeforeCall(idBoard, key, token, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsBoardStarsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: mine or none (optional, default to mine)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsBoardStarsByIdBoardAsync(String idBoard, String key, String token, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsBoardStarsByIdBoardValidateBeforeCall(idBoard, key, token, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsFormat One of: count, list or minimal (optional, default to list)
     * @param actionsSince A date, null or lastView (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMember  true or false (optional)
     * @param actionMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param actionMemberCreator  true or false (optional)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param cardAttachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param cardChecklists One of: all or none (optional, default to none)
     * @param cardStickers  true or false (optional)
     * @param boardStars One of: mine or none (optional, default to none)
     * @param labels One of: all or none (optional, default to none)
     * @param labelFields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @param labelsLimit a number from 0 to 1000 (optional, default to 50)
     * @param lists One of: all, closed, none or open (optional, default to none)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param membershipsMember  true or false (optional)
     * @param membershipsMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param members One of: admins, all, none, normal or owners (optional, default to none)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName, username and confirmed)
     * @param membersInvited One of: admins, all, none, normal or owners (optional, default to none)
     * @param membersInvitedFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName and username)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param organization  true or false (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param organizationMemberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param myPrefs  true or false (optional)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, descData, closed, idOrganization, pinned, url, shortUrl, prefs and labelNames)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsByIdBoardCall(String idBoard, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsFormat, String actionsSince, String actionsLimit, String actionFields, String actionMember, String actionMemberFields, String actionMemberCreator, String actionMemberCreatorFields, String cards, String cardFields, String cardAttachments, String cardAttachmentFields, String cardChecklists, String cardStickers, String boardStars, String labels, String labelFields, String labelsLimit, String lists, String listFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String membersInvited, String membersInvitedFields, String checklists, String checklistFields, String organization, String organizationFields, String organizationMemberships, String myPrefs, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_display", actionsDisplay));
        }

        if (actionsFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_format", actionsFormat));
        }

        if (actionsSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_since", actionsSince));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (actionMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_member", actionMember));
        }

        if (actionMemberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_member_fields", actionMemberFields));
        }

        if (actionMemberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_memberCreator", actionMemberCreator));
        }

        if (actionMemberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_memberCreator_fields", actionMemberCreatorFields));
        }

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (cardAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_attachments", cardAttachments));
        }

        if (cardAttachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_attachment_fields", cardAttachmentFields));
        }

        if (cardChecklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_checklists", cardChecklists));
        }

        if (cardStickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_stickers", cardStickers));
        }

        if (boardStars != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardStars", boardStars));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (labelFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label_fields", labelFields));
        }

        if (labelsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels_limit", labelsLimit));
        }

        if (lists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lists", lists));
        }

        if (listFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_fields", listFields));
        }

        if (memberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships", memberships));
        }

        if (membershipsMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships_member", membershipsMember));
        }

        if (membershipsMemberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships_member_fields", membershipsMemberFields));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (membersInvited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("membersInvited", membersInvited));
        }

        if (membersInvitedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("membersInvited_fields", membersInvitedFields));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (checklistFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklist_fields", checklistFields));
        }

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        if (organizationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_fields", organizationFields));
        }

        if (organizationMemberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_memberships", organizationMemberships));
        }

        if (myPrefs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("myPrefs", myPrefs));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsByIdBoardValidateBeforeCall(String idBoard, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsFormat, String actionsSince, String actionsLimit, String actionFields, String actionMember, String actionMemberFields, String actionMemberCreator, String actionMemberCreatorFields, String cards, String cardFields, String cardAttachments, String cardAttachmentFields, String cardChecklists, String cardStickers, String boardStars, String labels, String labelFields, String labelsLimit, String lists, String listFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String membersInvited, String membersInvitedFields, String checklists, String checklistFields, String organization, String organizationFields, String organizationMemberships, String myPrefs, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsByIdBoard(Async)");
        }

        return getBoardsByIdBoardCall(idBoard, key, token, actions, actionsEntities, actionsDisplay, actionsFormat, actionsSince, actionsLimit, actionFields, actionMember, actionMemberFields, actionMemberCreator, actionMemberCreatorFields, cards, cardFields, cardAttachments, cardAttachmentFields, cardChecklists, cardStickers, boardStars, labels, labelFields, labelsLimit, lists, listFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, membersInvited, membersInvitedFields, checklists, checklistFields, organization, organizationFields, organizationMemberships, myPrefs, fields, _callback);

    }

    /**
     * getBoardsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsFormat One of: count, list or minimal (optional, default to list)
     * @param actionsSince A date, null or lastView (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMember  true or false (optional)
     * @param actionMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param actionMemberCreator  true or false (optional)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param cardAttachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param cardChecklists One of: all or none (optional, default to none)
     * @param cardStickers  true or false (optional)
     * @param boardStars One of: mine or none (optional, default to none)
     * @param labels One of: all or none (optional, default to none)
     * @param labelFields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @param labelsLimit a number from 0 to 1000 (optional, default to 50)
     * @param lists One of: all, closed, none or open (optional, default to none)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param membershipsMember  true or false (optional)
     * @param membershipsMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param members One of: admins, all, none, normal or owners (optional, default to none)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName, username and confirmed)
     * @param membersInvited One of: admins, all, none, normal or owners (optional, default to none)
     * @param membersInvitedFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName and username)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param organization  true or false (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param organizationMemberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param myPrefs  true or false (optional)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, descData, closed, idOrganization, pinned, url, shortUrl, prefs and labelNames)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsByIdBoard(String idBoard, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsFormat, String actionsSince, String actionsLimit, String actionFields, String actionMember, String actionMemberFields, String actionMemberCreator, String actionMemberCreatorFields, String cards, String cardFields, String cardAttachments, String cardAttachmentFields, String cardChecklists, String cardStickers, String boardStars, String labels, String labelFields, String labelsLimit, String lists, String listFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String membersInvited, String membersInvitedFields, String checklists, String checklistFields, String organization, String organizationFields, String organizationMemberships, String myPrefs, String fields) throws ApiException {
        getBoardsByIdBoardWithHttpInfo(idBoard, key, token, actions, actionsEntities, actionsDisplay, actionsFormat, actionsSince, actionsLimit, actionFields, actionMember, actionMemberFields, actionMemberCreator, actionMemberCreatorFields, cards, cardFields, cardAttachments, cardAttachmentFields, cardChecklists, cardStickers, boardStars, labels, labelFields, labelsLimit, lists, listFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, membersInvited, membersInvitedFields, checklists, checklistFields, organization, organizationFields, organizationMemberships, myPrefs, fields);
    }

    /**
     * getBoardsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsFormat One of: count, list or minimal (optional, default to list)
     * @param actionsSince A date, null or lastView (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMember  true or false (optional)
     * @param actionMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param actionMemberCreator  true or false (optional)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param cardAttachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param cardChecklists One of: all or none (optional, default to none)
     * @param cardStickers  true or false (optional)
     * @param boardStars One of: mine or none (optional, default to none)
     * @param labels One of: all or none (optional, default to none)
     * @param labelFields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @param labelsLimit a number from 0 to 1000 (optional, default to 50)
     * @param lists One of: all, closed, none or open (optional, default to none)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param membershipsMember  true or false (optional)
     * @param membershipsMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param members One of: admins, all, none, normal or owners (optional, default to none)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName, username and confirmed)
     * @param membersInvited One of: admins, all, none, normal or owners (optional, default to none)
     * @param membersInvitedFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName and username)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param organization  true or false (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param organizationMemberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param myPrefs  true or false (optional)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, descData, closed, idOrganization, pinned, url, shortUrl, prefs and labelNames)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsByIdBoardWithHttpInfo(String idBoard, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsFormat, String actionsSince, String actionsLimit, String actionFields, String actionMember, String actionMemberFields, String actionMemberCreator, String actionMemberCreatorFields, String cards, String cardFields, String cardAttachments, String cardAttachmentFields, String cardChecklists, String cardStickers, String boardStars, String labels, String labelFields, String labelsLimit, String lists, String listFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String membersInvited, String membersInvitedFields, String checklists, String checklistFields, String organization, String organizationFields, String organizationMemberships, String myPrefs, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsByIdBoardValidateBeforeCall(idBoard, key, token, actions, actionsEntities, actionsDisplay, actionsFormat, actionsSince, actionsLimit, actionFields, actionMember, actionMemberFields, actionMemberCreator, actionMemberCreatorFields, cards, cardFields, cardAttachments, cardAttachmentFields, cardChecklists, cardStickers, boardStars, labels, labelFields, labelsLimit, lists, listFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, membersInvited, membersInvitedFields, checklists, checklistFields, organization, organizationFields, organizationMemberships, myPrefs, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsFormat One of: count, list or minimal (optional, default to list)
     * @param actionsSince A date, null or lastView (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMember  true or false (optional)
     * @param actionMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param actionMemberCreator  true or false (optional)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param cardAttachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param cardChecklists One of: all or none (optional, default to none)
     * @param cardStickers  true or false (optional)
     * @param boardStars One of: mine or none (optional, default to none)
     * @param labels One of: all or none (optional, default to none)
     * @param labelFields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @param labelsLimit a number from 0 to 1000 (optional, default to 50)
     * @param lists One of: all, closed, none or open (optional, default to none)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param membershipsMember  true or false (optional)
     * @param membershipsMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param members One of: admins, all, none, normal or owners (optional, default to none)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName, username and confirmed)
     * @param membersInvited One of: admins, all, none, normal or owners (optional, default to none)
     * @param membersInvitedFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName and username)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param organization  true or false (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param organizationMemberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param myPrefs  true or false (optional)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, descData, closed, idOrganization, pinned, url, shortUrl, prefs and labelNames)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsByIdBoardAsync(String idBoard, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsFormat, String actionsSince, String actionsLimit, String actionFields, String actionMember, String actionMemberFields, String actionMemberCreator, String actionMemberCreatorFields, String cards, String cardFields, String cardAttachments, String cardAttachmentFields, String cardChecklists, String cardStickers, String boardStars, String labels, String labelFields, String labelsLimit, String lists, String listFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String membersInvited, String membersInvitedFields, String checklists, String checklistFields, String organization, String organizationFields, String organizationMemberships, String myPrefs, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsByIdBoardValidateBeforeCall(idBoard, key, token, actions, actionsEntities, actionsDisplay, actionsFormat, actionsSince, actionsLimit, actionFields, actionMember, actionMemberFields, actionMemberCreator, actionMemberCreatorFields, cards, cardFields, cardAttachments, cardAttachmentFields, cardChecklists, cardStickers, boardStars, labels, labelFields, labelsLimit, lists, listFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, membersInvited, membersInvitedFields, checklists, checklistFields, organization, organizationFields, organizationMemberships, myPrefs, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsByIdBoardByField
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsByIdBoardByFieldCall(String idBoard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/{field}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsByIdBoardByFieldValidateBeforeCall(String idBoard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsByIdBoardByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getBoardsByIdBoardByField(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsByIdBoardByField(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsByIdBoardByField(Async)");
        }

        return getBoardsByIdBoardByFieldCall(idBoard, field, key, token, _callback);

    }

    /**
     * getBoardsByIdBoardByField()
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsByIdBoardByField(String idBoard, String field, String key, String token) throws ApiException {
        getBoardsByIdBoardByFieldWithHttpInfo(idBoard, field, key, token);
    }

    /**
     * getBoardsByIdBoardByField()
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsByIdBoardByFieldWithHttpInfo(String idBoard, String field, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getBoardsByIdBoardByFieldValidateBeforeCall(idBoard, field, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsByIdBoardByField() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsByIdBoardByFieldAsync(String idBoard, String field, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsByIdBoardByFieldValidateBeforeCall(idBoard, field, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsCardsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param stickers  true or false (optional)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param limit a number from 1 to 1000 (optional)
     * @param since A date, or null (optional)
     * @param before A date, or null (optional)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsCardsByIdBoardCall(String idBoard, String key, String token, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/cards"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (stickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stickers", stickers));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsCardsByIdBoardValidateBeforeCall(String idBoard, String key, String token, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsCardsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsCardsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsCardsByIdBoard(Async)");
        }

        return getBoardsCardsByIdBoardCall(idBoard, key, token, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);

    }

    /**
     * getBoardsCardsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param stickers  true or false (optional)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param limit a number from 1 to 1000 (optional)
     * @param since A date, or null (optional)
     * @param before A date, or null (optional)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsCardsByIdBoard(String idBoard, String key, String token, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields) throws ApiException {
        getBoardsCardsByIdBoardWithHttpInfo(idBoard, key, token, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields);
    }

    /**
     * getBoardsCardsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param stickers  true or false (optional)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param limit a number from 1 to 1000 (optional)
     * @param since A date, or null (optional)
     * @param before A date, or null (optional)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsCardsByIdBoardWithHttpInfo(String idBoard, String key, String token, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsCardsByIdBoardValidateBeforeCall(idBoard, key, token, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsCardsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param stickers  true or false (optional)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param limit a number from 1 to 1000 (optional)
     * @param since A date, or null (optional)
     * @param before A date, or null (optional)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsCardsByIdBoardAsync(String idBoard, String key, String token, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsCardsByIdBoardValidateBeforeCall(idBoard, key, token, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsCardsByIdBoardByFilter
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsCardsByIdBoardByFilterCall(String idBoard, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/cards/{filter}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsCardsByIdBoardByFilterValidateBeforeCall(String idBoard, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsCardsByIdBoardByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getBoardsCardsByIdBoardByFilter(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsCardsByIdBoardByFilter(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsCardsByIdBoardByFilter(Async)");
        }

        return getBoardsCardsByIdBoardByFilterCall(idBoard, filter, key, token, _callback);

    }

    /**
     * getBoardsCardsByIdBoardByFilter()
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsCardsByIdBoardByFilter(String idBoard, String filter, String key, String token) throws ApiException {
        getBoardsCardsByIdBoardByFilterWithHttpInfo(idBoard, filter, key, token);
    }

    /**
     * getBoardsCardsByIdBoardByFilter()
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsCardsByIdBoardByFilterWithHttpInfo(String idBoard, String filter, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getBoardsCardsByIdBoardByFilterValidateBeforeCall(idBoard, filter, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsCardsByIdBoardByFilter() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsCardsByIdBoardByFilterAsync(String idBoard, String filter, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsCardsByIdBoardByFilterValidateBeforeCall(idBoard, filter, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsCardsByIdBoardByIdCard
     * @param idBoard board_id (required)
     * @param idCard idCard (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName and username)
     * @param checkItemStates  true or false (optional)
     * @param checkItemStateFields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @param labels  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsCardsByIdBoardByIdCardCall(String idBoard, String idCard, String key, String token, String attachments, String attachmentFields, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String members, String memberFields, String checkItemStates, String checkItemStateFields, String labels, String checklists, String checklistFields, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/cards/{idCard}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_display", actionsDisplay));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (actionMemberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_memberCreator_fields", actionMemberCreatorFields));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checkItemStateFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemState_fields", checkItemStateFields));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (checklistFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklist_fields", checklistFields));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsCardsByIdBoardByIdCardValidateBeforeCall(String idBoard, String idCard, String key, String token, String attachments, String attachmentFields, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String members, String memberFields, String checkItemStates, String checkItemStateFields, String labels, String checklists, String checklistFields, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsCardsByIdBoardByIdCard(Async)");
        }

        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getBoardsCardsByIdBoardByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsCardsByIdBoardByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsCardsByIdBoardByIdCard(Async)");
        }

        return getBoardsCardsByIdBoardByIdCardCall(idBoard, idCard, key, token, attachments, attachmentFields, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, members, memberFields, checkItemStates, checkItemStateFields, labels, checklists, checklistFields, fields, _callback);

    }

    /**
     * getBoardsCardsByIdBoardByIdCard()
     * 
     * @param idBoard board_id (required)
     * @param idCard idCard (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName and username)
     * @param checkItemStates  true or false (optional)
     * @param checkItemStateFields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @param labels  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsCardsByIdBoardByIdCard(String idBoard, String idCard, String key, String token, String attachments, String attachmentFields, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String members, String memberFields, String checkItemStates, String checkItemStateFields, String labels, String checklists, String checklistFields, String fields) throws ApiException {
        getBoardsCardsByIdBoardByIdCardWithHttpInfo(idBoard, idCard, key, token, attachments, attachmentFields, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, members, memberFields, checkItemStates, checkItemStateFields, labels, checklists, checklistFields, fields);
    }

    /**
     * getBoardsCardsByIdBoardByIdCard()
     * 
     * @param idBoard board_id (required)
     * @param idCard idCard (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName and username)
     * @param checkItemStates  true or false (optional)
     * @param checkItemStateFields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @param labels  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsCardsByIdBoardByIdCardWithHttpInfo(String idBoard, String idCard, String key, String token, String attachments, String attachmentFields, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String members, String memberFields, String checkItemStates, String checkItemStateFields, String labels, String checklists, String checklistFields, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsCardsByIdBoardByIdCardValidateBeforeCall(idBoard, idCard, key, token, attachments, attachmentFields, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, members, memberFields, checkItemStates, checkItemStateFields, labels, checklists, checklistFields, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsCardsByIdBoardByIdCard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param idCard idCard (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName and username)
     * @param checkItemStates  true or false (optional)
     * @param checkItemStateFields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @param labels  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsCardsByIdBoardByIdCardAsync(String idBoard, String idCard, String key, String token, String attachments, String attachmentFields, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String members, String memberFields, String checkItemStates, String checkItemStateFields, String labels, String checklists, String checklistFields, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsCardsByIdBoardByIdCardValidateBeforeCall(idBoard, idCard, key, token, attachments, attachmentFields, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, members, memberFields, checkItemStates, checkItemStateFields, labels, checklists, checklistFields, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsChecklistsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param checkItems One of: all or none (optional, default to all)
     * @param checkItemFields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
     * @param filter One of: all or none (optional, default to all)
     * @param fields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsChecklistsByIdBoardCall(String idBoard, String key, String token, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/checklists"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (checkItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItems", checkItems));
        }

        if (checkItemFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItem_fields", checkItemFields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsChecklistsByIdBoardValidateBeforeCall(String idBoard, String key, String token, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsChecklistsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsChecklistsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsChecklistsByIdBoard(Async)");
        }

        return getBoardsChecklistsByIdBoardCall(idBoard, key, token, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);

    }

    /**
     * getBoardsChecklistsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param checkItems One of: all or none (optional, default to all)
     * @param checkItemFields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
     * @param filter One of: all or none (optional, default to all)
     * @param fields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsChecklistsByIdBoard(String idBoard, String key, String token, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields) throws ApiException {
        getBoardsChecklistsByIdBoardWithHttpInfo(idBoard, key, token, cards, cardFields, checkItems, checkItemFields, filter, fields);
    }

    /**
     * getBoardsChecklistsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param checkItems One of: all or none (optional, default to all)
     * @param checkItemFields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
     * @param filter One of: all or none (optional, default to all)
     * @param fields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsChecklistsByIdBoardWithHttpInfo(String idBoard, String key, String token, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsChecklistsByIdBoardValidateBeforeCall(idBoard, key, token, cards, cardFields, checkItems, checkItemFields, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsChecklistsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param checkItems One of: all or none (optional, default to all)
     * @param checkItemFields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
     * @param filter One of: all or none (optional, default to all)
     * @param fields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsChecklistsByIdBoardAsync(String idBoard, String key, String token, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsChecklistsByIdBoardValidateBeforeCall(idBoard, key, token, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsDeltasByIdBoard
     * @param idBoard board_id (required)
     * @param tags A valid tag for subscribing (required)
     * @param ixLastUpdate a number from -1 to Infinity (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsDeltasByIdBoardCall(String idBoard, String tags, String ixLastUpdate, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/deltas"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (ixLastUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ixLastUpdate", ixLastUpdate));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsDeltasByIdBoardValidateBeforeCall(String idBoard, String tags, String ixLastUpdate, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsDeltasByIdBoard(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling getBoardsDeltasByIdBoard(Async)");
        }

        // verify the required parameter 'ixLastUpdate' is set
        if (ixLastUpdate == null) {
            throw new ApiException("Missing the required parameter 'ixLastUpdate' when calling getBoardsDeltasByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsDeltasByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsDeltasByIdBoard(Async)");
        }

        return getBoardsDeltasByIdBoardCall(idBoard, tags, ixLastUpdate, key, token, _callback);

    }

    /**
     * getBoardsDeltasByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param tags A valid tag for subscribing (required)
     * @param ixLastUpdate a number from -1 to Infinity (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsDeltasByIdBoard(String idBoard, String tags, String ixLastUpdate, String key, String token) throws ApiException {
        getBoardsDeltasByIdBoardWithHttpInfo(idBoard, tags, ixLastUpdate, key, token);
    }

    /**
     * getBoardsDeltasByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param tags A valid tag for subscribing (required)
     * @param ixLastUpdate a number from -1 to Infinity (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsDeltasByIdBoardWithHttpInfo(String idBoard, String tags, String ixLastUpdate, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getBoardsDeltasByIdBoardValidateBeforeCall(idBoard, tags, ixLastUpdate, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsDeltasByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param tags A valid tag for subscribing (required)
     * @param ixLastUpdate a number from -1 to Infinity (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsDeltasByIdBoardAsync(String idBoard, String tags, String ixLastUpdate, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsDeltasByIdBoardValidateBeforeCall(idBoard, tags, ixLastUpdate, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsLabelsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsLabelsByIdBoardCall(String idBoard, String key, String token, String fields, String limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labels"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsLabelsByIdBoardValidateBeforeCall(String idBoard, String key, String token, String fields, String limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsLabelsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsLabelsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsLabelsByIdBoard(Async)");
        }

        return getBoardsLabelsByIdBoardCall(idBoard, key, token, fields, limit, _callback);

    }

    /**
     * getBoardsLabelsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsLabelsByIdBoard(String idBoard, String key, String token, String fields, String limit) throws ApiException {
        getBoardsLabelsByIdBoardWithHttpInfo(idBoard, key, token, fields, limit);
    }

    /**
     * getBoardsLabelsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsLabelsByIdBoardWithHttpInfo(String idBoard, String key, String token, String fields, String limit) throws ApiException {
        okhttp3.Call localVarCall = getBoardsLabelsByIdBoardValidateBeforeCall(idBoard, key, token, fields, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsLabelsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsLabelsByIdBoardAsync(String idBoard, String key, String token, String fields, String limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsLabelsByIdBoardValidateBeforeCall(idBoard, key, token, fields, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsLabelsByIdBoardByIdLabel
     * @param idBoard board_id (required)
     * @param idLabel idLabel (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsLabelsByIdBoardByIdLabelCall(String idBoard, String idLabel, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labels/{idLabel}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idLabel" + "}", localVarApiClient.escapeString(idLabel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsLabelsByIdBoardByIdLabelValidateBeforeCall(String idBoard, String idLabel, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsLabelsByIdBoardByIdLabel(Async)");
        }

        // verify the required parameter 'idLabel' is set
        if (idLabel == null) {
            throw new ApiException("Missing the required parameter 'idLabel' when calling getBoardsLabelsByIdBoardByIdLabel(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsLabelsByIdBoardByIdLabel(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsLabelsByIdBoardByIdLabel(Async)");
        }

        return getBoardsLabelsByIdBoardByIdLabelCall(idBoard, idLabel, key, token, fields, _callback);

    }

    /**
     * getBoardsLabelsByIdBoardByIdLabel()
     * 
     * @param idBoard board_id (required)
     * @param idLabel idLabel (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsLabelsByIdBoardByIdLabel(String idBoard, String idLabel, String key, String token, String fields) throws ApiException {
        getBoardsLabelsByIdBoardByIdLabelWithHttpInfo(idBoard, idLabel, key, token, fields);
    }

    /**
     * getBoardsLabelsByIdBoardByIdLabel()
     * 
     * @param idBoard board_id (required)
     * @param idLabel idLabel (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsLabelsByIdBoardByIdLabelWithHttpInfo(String idBoard, String idLabel, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsLabelsByIdBoardByIdLabelValidateBeforeCall(idBoard, idLabel, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsLabelsByIdBoardByIdLabel() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param idLabel idLabel (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsLabelsByIdBoardByIdLabelAsync(String idBoard, String idLabel, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsLabelsByIdBoardByIdLabelValidateBeforeCall(idBoard, idLabel, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsListsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param filter One of: all, closed, none or open (optional, default to open)
     * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsListsByIdBoardCall(String idBoard, String key, String token, String cards, String cardFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/lists"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsListsByIdBoardValidateBeforeCall(String idBoard, String key, String token, String cards, String cardFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsListsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsListsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsListsByIdBoard(Async)");
        }

        return getBoardsListsByIdBoardCall(idBoard, key, token, cards, cardFields, filter, fields, _callback);

    }

    /**
     * getBoardsListsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param filter One of: all, closed, none or open (optional, default to open)
     * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsListsByIdBoard(String idBoard, String key, String token, String cards, String cardFields, String filter, String fields) throws ApiException {
        getBoardsListsByIdBoardWithHttpInfo(idBoard, key, token, cards, cardFields, filter, fields);
    }

    /**
     * getBoardsListsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param filter One of: all, closed, none or open (optional, default to open)
     * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsListsByIdBoardWithHttpInfo(String idBoard, String key, String token, String cards, String cardFields, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsListsByIdBoardValidateBeforeCall(idBoard, key, token, cards, cardFields, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsListsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param filter One of: all, closed, none or open (optional, default to open)
     * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsListsByIdBoardAsync(String idBoard, String key, String token, String cards, String cardFields, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsListsByIdBoardValidateBeforeCall(idBoard, key, token, cards, cardFields, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsListsByIdBoardByFilter
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsListsByIdBoardByFilterCall(String idBoard, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/lists/{filter}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsListsByIdBoardByFilterValidateBeforeCall(String idBoard, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsListsByIdBoardByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getBoardsListsByIdBoardByFilter(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsListsByIdBoardByFilter(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsListsByIdBoardByFilter(Async)");
        }

        return getBoardsListsByIdBoardByFilterCall(idBoard, filter, key, token, _callback);

    }

    /**
     * getBoardsListsByIdBoardByFilter()
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsListsByIdBoardByFilter(String idBoard, String filter, String key, String token) throws ApiException {
        getBoardsListsByIdBoardByFilterWithHttpInfo(idBoard, filter, key, token);
    }

    /**
     * getBoardsListsByIdBoardByFilter()
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsListsByIdBoardByFilterWithHttpInfo(String idBoard, String filter, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getBoardsListsByIdBoardByFilterValidateBeforeCall(idBoard, filter, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsListsByIdBoardByFilter() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsListsByIdBoardByFilterAsync(String idBoard, String filter, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsListsByIdBoardByFilterValidateBeforeCall(idBoard, filter, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsMembersByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: admins, all, none, normal or owners (optional, default to all)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param activity true or false ; works for premium organizations only. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembersByIdBoardCall(String idBoard, String key, String token, String filter, String fields, String activity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (activity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity", activity));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsMembersByIdBoardValidateBeforeCall(String idBoard, String key, String token, String filter, String fields, String activity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsMembersByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsMembersByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsMembersByIdBoard(Async)");
        }

        return getBoardsMembersByIdBoardCall(idBoard, key, token, filter, fields, activity, _callback);

    }

    /**
     * getBoardsMembersByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: admins, all, none, normal or owners (optional, default to all)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param activity true or false ; works for premium organizations only. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsMembersByIdBoard(String idBoard, String key, String token, String filter, String fields, String activity) throws ApiException {
        getBoardsMembersByIdBoardWithHttpInfo(idBoard, key, token, filter, fields, activity);
    }

    /**
     * getBoardsMembersByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: admins, all, none, normal or owners (optional, default to all)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param activity true or false ; works for premium organizations only. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsMembersByIdBoardWithHttpInfo(String idBoard, String key, String token, String filter, String fields, String activity) throws ApiException {
        okhttp3.Call localVarCall = getBoardsMembersByIdBoardValidateBeforeCall(idBoard, key, token, filter, fields, activity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsMembersByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: admins, all, none, normal or owners (optional, default to all)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param activity true or false ; works for premium organizations only. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembersByIdBoardAsync(String idBoard, String key, String token, String filter, String fields, String activity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsMembersByIdBoardValidateBeforeCall(idBoard, key, token, filter, fields, activity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsMembersByIdBoardByFilter
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembersByIdBoardByFilterCall(String idBoard, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members/{filter}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsMembersByIdBoardByFilterValidateBeforeCall(String idBoard, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsMembersByIdBoardByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getBoardsMembersByIdBoardByFilter(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsMembersByIdBoardByFilter(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsMembersByIdBoardByFilter(Async)");
        }

        return getBoardsMembersByIdBoardByFilterCall(idBoard, filter, key, token, _callback);

    }

    /**
     * getBoardsMembersByIdBoardByFilter()
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsMembersByIdBoardByFilter(String idBoard, String filter, String key, String token) throws ApiException {
        getBoardsMembersByIdBoardByFilterWithHttpInfo(idBoard, filter, key, token);
    }

    /**
     * getBoardsMembersByIdBoardByFilter()
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsMembersByIdBoardByFilterWithHttpInfo(String idBoard, String filter, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getBoardsMembersByIdBoardByFilterValidateBeforeCall(idBoard, filter, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsMembersByIdBoardByFilter() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembersByIdBoardByFilterAsync(String idBoard, String filter, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsMembersByIdBoardByFilterValidateBeforeCall(idBoard, filter, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsMembersCardsByIdBoardByIdMember
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param board  true or false (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, closed, idOrganization, pinned, url and prefs)
     * @param _list  true or false (optional)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembersCardsByIdBoardByIdMemberCall(String idBoard, String idMember, String key, String token, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String _list, String listFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members/{idMember}/cards"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (board != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board", board));
        }

        if (boardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_fields", boardFields));
        }

        if (_list != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list", _list));
        }

        if (listFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_fields", listFields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsMembersCardsByIdBoardByIdMemberValidateBeforeCall(String idBoard, String idMember, String key, String token, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String _list, String listFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsMembersCardsByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getBoardsMembersCardsByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsMembersCardsByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsMembersCardsByIdBoardByIdMember(Async)");
        }

        return getBoardsMembersCardsByIdBoardByIdMemberCall(idBoard, idMember, key, token, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, _list, listFields, filter, fields, _callback);

    }

    /**
     * getBoardsMembersCardsByIdBoardByIdMember()
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param board  true or false (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, closed, idOrganization, pinned, url and prefs)
     * @param _list  true or false (optional)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsMembersCardsByIdBoardByIdMember(String idBoard, String idMember, String key, String token, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String _list, String listFields, String filter, String fields) throws ApiException {
        getBoardsMembersCardsByIdBoardByIdMemberWithHttpInfo(idBoard, idMember, key, token, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, _list, listFields, filter, fields);
    }

    /**
     * getBoardsMembersCardsByIdBoardByIdMember()
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param board  true or false (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, closed, idOrganization, pinned, url and prefs)
     * @param _list  true or false (optional)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsMembersCardsByIdBoardByIdMemberWithHttpInfo(String idBoard, String idMember, String key, String token, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String _list, String listFields, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsMembersCardsByIdBoardByIdMemberValidateBeforeCall(idBoard, idMember, key, token, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, _list, listFields, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsMembersCardsByIdBoardByIdMember() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param board  true or false (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, closed, idOrganization, pinned, url and prefs)
     * @param _list  true or false (optional)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembersCardsByIdBoardByIdMemberAsync(String idBoard, String idMember, String key, String token, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String _list, String listFields, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsMembersCardsByIdBoardByIdMemberValidateBeforeCall(idBoard, idMember, key, token, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, _list, listFields, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsMembersInvitedByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembersInvitedByIdBoardCall(String idBoard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/membersInvited"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsMembersInvitedByIdBoardValidateBeforeCall(String idBoard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsMembersInvitedByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsMembersInvitedByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsMembersInvitedByIdBoard(Async)");
        }

        return getBoardsMembersInvitedByIdBoardCall(idBoard, key, token, fields, _callback);

    }

    /**
     * getBoardsMembersInvitedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsMembersInvitedByIdBoard(String idBoard, String key, String token, String fields) throws ApiException {
        getBoardsMembersInvitedByIdBoardWithHttpInfo(idBoard, key, token, fields);
    }

    /**
     * getBoardsMembersInvitedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsMembersInvitedByIdBoardWithHttpInfo(String idBoard, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsMembersInvitedByIdBoardValidateBeforeCall(idBoard, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsMembersInvitedByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembersInvitedByIdBoardAsync(String idBoard, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsMembersInvitedByIdBoardValidateBeforeCall(idBoard, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsMembersInvitedByIdBoardByField
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembersInvitedByIdBoardByFieldCall(String idBoard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/membersInvited/{field}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsMembersInvitedByIdBoardByFieldValidateBeforeCall(String idBoard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsMembersInvitedByIdBoardByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getBoardsMembersInvitedByIdBoardByField(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsMembersInvitedByIdBoardByField(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsMembersInvitedByIdBoardByField(Async)");
        }

        return getBoardsMembersInvitedByIdBoardByFieldCall(idBoard, field, key, token, _callback);

    }

    /**
     * getBoardsMembersInvitedByIdBoardByField()
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsMembersInvitedByIdBoardByField(String idBoard, String field, String key, String token) throws ApiException {
        getBoardsMembersInvitedByIdBoardByFieldWithHttpInfo(idBoard, field, key, token);
    }

    /**
     * getBoardsMembersInvitedByIdBoardByField()
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsMembersInvitedByIdBoardByFieldWithHttpInfo(String idBoard, String field, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getBoardsMembersInvitedByIdBoardByFieldValidateBeforeCall(idBoard, field, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsMembersInvitedByIdBoardByField() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembersInvitedByIdBoardByFieldAsync(String idBoard, String field, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsMembersInvitedByIdBoardByFieldValidateBeforeCall(idBoard, field, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsMembershipsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to all)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembershipsByIdBoardCall(String idBoard, String key, String token, String filter, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/memberships"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsMembershipsByIdBoardValidateBeforeCall(String idBoard, String key, String token, String filter, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsMembershipsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsMembershipsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsMembershipsByIdBoard(Async)");
        }

        return getBoardsMembershipsByIdBoardCall(idBoard, key, token, filter, member, memberFields, _callback);

    }

    /**
     * getBoardsMembershipsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to all)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsMembershipsByIdBoard(String idBoard, String key, String token, String filter, String member, String memberFields) throws ApiException {
        getBoardsMembershipsByIdBoardWithHttpInfo(idBoard, key, token, filter, member, memberFields);
    }

    /**
     * getBoardsMembershipsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to all)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsMembershipsByIdBoardWithHttpInfo(String idBoard, String key, String token, String filter, String member, String memberFields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsMembershipsByIdBoardValidateBeforeCall(idBoard, key, token, filter, member, memberFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsMembershipsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to all)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembershipsByIdBoardAsync(String idBoard, String key, String token, String filter, String member, String memberFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsMembershipsByIdBoardValidateBeforeCall(idBoard, key, token, filter, member, memberFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsMembershipsByIdBoardByIdMembership
     * @param idBoard board_id (required)
     * @param idMembership idMembership (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembershipsByIdBoardByIdMembershipCall(String idBoard, String idMembership, String key, String token, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/memberships/{idMembership}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idMembership" + "}", localVarApiClient.escapeString(idMembership.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsMembershipsByIdBoardByIdMembershipValidateBeforeCall(String idBoard, String idMembership, String key, String token, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsMembershipsByIdBoardByIdMembership(Async)");
        }

        // verify the required parameter 'idMembership' is set
        if (idMembership == null) {
            throw new ApiException("Missing the required parameter 'idMembership' when calling getBoardsMembershipsByIdBoardByIdMembership(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsMembershipsByIdBoardByIdMembership(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsMembershipsByIdBoardByIdMembership(Async)");
        }

        return getBoardsMembershipsByIdBoardByIdMembershipCall(idBoard, idMembership, key, token, member, memberFields, _callback);

    }

    /**
     * getBoardsMembershipsByIdBoardByIdMembership()
     * 
     * @param idBoard board_id (required)
     * @param idMembership idMembership (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsMembershipsByIdBoardByIdMembership(String idBoard, String idMembership, String key, String token, String member, String memberFields) throws ApiException {
        getBoardsMembershipsByIdBoardByIdMembershipWithHttpInfo(idBoard, idMembership, key, token, member, memberFields);
    }

    /**
     * getBoardsMembershipsByIdBoardByIdMembership()
     * 
     * @param idBoard board_id (required)
     * @param idMembership idMembership (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsMembershipsByIdBoardByIdMembershipWithHttpInfo(String idBoard, String idMembership, String key, String token, String member, String memberFields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsMembershipsByIdBoardByIdMembershipValidateBeforeCall(idBoard, idMembership, key, token, member, memberFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsMembershipsByIdBoardByIdMembership() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param idMembership idMembership (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMembershipsByIdBoardByIdMembershipAsync(String idBoard, String idMembership, String key, String token, String member, String memberFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsMembershipsByIdBoardByIdMembershipValidateBeforeCall(idBoard, idMembership, key, token, member, memberFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsMyPrefsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMyPrefsByIdBoardCall(String idBoard, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsMyPrefsByIdBoardValidateBeforeCall(String idBoard, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsMyPrefsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsMyPrefsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsMyPrefsByIdBoard(Async)");
        }

        return getBoardsMyPrefsByIdBoardCall(idBoard, key, token, _callback);

    }

    /**
     * getBoardsMyPrefsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsMyPrefsByIdBoard(String idBoard, String key, String token) throws ApiException {
        getBoardsMyPrefsByIdBoardWithHttpInfo(idBoard, key, token);
    }

    /**
     * getBoardsMyPrefsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsMyPrefsByIdBoardWithHttpInfo(String idBoard, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getBoardsMyPrefsByIdBoardValidateBeforeCall(idBoard, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsMyPrefsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsMyPrefsByIdBoardAsync(String idBoard, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsMyPrefsByIdBoardValidateBeforeCall(idBoard, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsOrganizationByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsOrganizationByIdBoardCall(String idBoard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/organization"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsOrganizationByIdBoardValidateBeforeCall(String idBoard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsOrganizationByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsOrganizationByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsOrganizationByIdBoard(Async)");
        }

        return getBoardsOrganizationByIdBoardCall(idBoard, key, token, fields, _callback);

    }

    /**
     * getBoardsOrganizationByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsOrganizationByIdBoard(String idBoard, String key, String token, String fields) throws ApiException {
        getBoardsOrganizationByIdBoardWithHttpInfo(idBoard, key, token, fields);
    }

    /**
     * getBoardsOrganizationByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsOrganizationByIdBoardWithHttpInfo(String idBoard, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardsOrganizationByIdBoardValidateBeforeCall(idBoard, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsOrganizationByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsOrganizationByIdBoardAsync(String idBoard, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsOrganizationByIdBoardValidateBeforeCall(idBoard, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBoardsOrganizationByIdBoardByField
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsOrganizationByIdBoardByFieldCall(String idBoard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/organization/{field}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsOrganizationByIdBoardByFieldValidateBeforeCall(String idBoard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardsOrganizationByIdBoardByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getBoardsOrganizationByIdBoardByField(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getBoardsOrganizationByIdBoardByField(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBoardsOrganizationByIdBoardByField(Async)");
        }

        return getBoardsOrganizationByIdBoardByFieldCall(idBoard, field, key, token, _callback);

    }

    /**
     * getBoardsOrganizationByIdBoardByField()
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getBoardsOrganizationByIdBoardByField(String idBoard, String field, String key, String token) throws ApiException {
        getBoardsOrganizationByIdBoardByFieldWithHttpInfo(idBoard, field, key, token);
    }

    /**
     * getBoardsOrganizationByIdBoardByField()
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBoardsOrganizationByIdBoardByFieldWithHttpInfo(String idBoard, String field, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getBoardsOrganizationByIdBoardByFieldValidateBeforeCall(idBoard, field, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getBoardsOrganizationByIdBoardByField() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBoardsOrganizationByIdBoardByFieldAsync(String idBoard, String field, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsOrganizationByIdBoardByFieldValidateBeforeCall(idBoard, field, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boards Attributes of \&quot;Boards\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsByIdBoardCall(String idBoard, String key, String token, Boards boards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boards;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsByIdBoardValidateBeforeCall(String idBoard, String key, String token, Boards boards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsByIdBoard(Async)");
        }

        // verify the required parameter 'boards' is set
        if (boards == null) {
            throw new ApiException("Missing the required parameter 'boards' when calling updateBoardsByIdBoard(Async)");
        }

        return updateBoardsByIdBoardCall(idBoard, key, token, boards, _callback);

    }

    /**
     * updateBoardsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boards Attributes of \&quot;Boards\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsByIdBoard(String idBoard, String key, String token, Boards boards) throws ApiException {
        updateBoardsByIdBoardWithHttpInfo(idBoard, key, token, boards);
    }

    /**
     * updateBoardsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boards Attributes of \&quot;Boards\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsByIdBoardWithHttpInfo(String idBoard, String key, String token, Boards boards) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsByIdBoardValidateBeforeCall(idBoard, key, token, boards, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boards Attributes of \&quot;Boards\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsByIdBoardAsync(String idBoard, String key, String token, Boards boards, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsByIdBoardValidateBeforeCall(idBoard, key, token, boards, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsClosedByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsClosed Attributes of \&quot;Boards Closed\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsClosedByIdBoardCall(String idBoard, String key, String token, BoardsClosed boardsClosed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsClosed;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/closed"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsClosedByIdBoardValidateBeforeCall(String idBoard, String key, String token, BoardsClosed boardsClosed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsClosedByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsClosedByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsClosedByIdBoard(Async)");
        }

        // verify the required parameter 'boardsClosed' is set
        if (boardsClosed == null) {
            throw new ApiException("Missing the required parameter 'boardsClosed' when calling updateBoardsClosedByIdBoard(Async)");
        }

        return updateBoardsClosedByIdBoardCall(idBoard, key, token, boardsClosed, _callback);

    }

    /**
     * updateBoardsClosedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsClosed Attributes of \&quot;Boards Closed\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsClosedByIdBoard(String idBoard, String key, String token, BoardsClosed boardsClosed) throws ApiException {
        updateBoardsClosedByIdBoardWithHttpInfo(idBoard, key, token, boardsClosed);
    }

    /**
     * updateBoardsClosedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsClosed Attributes of \&quot;Boards Closed\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsClosedByIdBoardWithHttpInfo(String idBoard, String key, String token, BoardsClosed boardsClosed) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsClosedByIdBoardValidateBeforeCall(idBoard, key, token, boardsClosed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsClosedByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsClosed Attributes of \&quot;Boards Closed\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsClosedByIdBoardAsync(String idBoard, String key, String token, BoardsClosed boardsClosed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsClosedByIdBoardValidateBeforeCall(idBoard, key, token, boardsClosed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsDescByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsDesc Attributes of \&quot;Boards Desc\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsDescByIdBoardCall(String idBoard, String key, String token, BoardsDesc boardsDesc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsDesc;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/desc"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsDescByIdBoardValidateBeforeCall(String idBoard, String key, String token, BoardsDesc boardsDesc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsDescByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsDescByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsDescByIdBoard(Async)");
        }

        // verify the required parameter 'boardsDesc' is set
        if (boardsDesc == null) {
            throw new ApiException("Missing the required parameter 'boardsDesc' when calling updateBoardsDescByIdBoard(Async)");
        }

        return updateBoardsDescByIdBoardCall(idBoard, key, token, boardsDesc, _callback);

    }

    /**
     * updateBoardsDescByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsDesc Attributes of \&quot;Boards Desc\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsDescByIdBoard(String idBoard, String key, String token, BoardsDesc boardsDesc) throws ApiException {
        updateBoardsDescByIdBoardWithHttpInfo(idBoard, key, token, boardsDesc);
    }

    /**
     * updateBoardsDescByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsDesc Attributes of \&quot;Boards Desc\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsDescByIdBoardWithHttpInfo(String idBoard, String key, String token, BoardsDesc boardsDesc) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsDescByIdBoardValidateBeforeCall(idBoard, key, token, boardsDesc, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsDescByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsDesc Attributes of \&quot;Boards Desc\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsDescByIdBoardAsync(String idBoard, String key, String token, BoardsDesc boardsDesc, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsDescByIdBoardValidateBeforeCall(idBoard, key, token, boardsDesc, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsIdOrganizationByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsIdOrganization Attributes of \&quot;Boards Id Organization\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsIdOrganizationByIdBoardCall(String idBoard, String key, String token, BoardsIdOrganization boardsIdOrganization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsIdOrganization;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/idOrganization"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsIdOrganizationByIdBoardValidateBeforeCall(String idBoard, String key, String token, BoardsIdOrganization boardsIdOrganization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsIdOrganizationByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsIdOrganizationByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsIdOrganizationByIdBoard(Async)");
        }

        // verify the required parameter 'boardsIdOrganization' is set
        if (boardsIdOrganization == null) {
            throw new ApiException("Missing the required parameter 'boardsIdOrganization' when calling updateBoardsIdOrganizationByIdBoard(Async)");
        }

        return updateBoardsIdOrganizationByIdBoardCall(idBoard, key, token, boardsIdOrganization, _callback);

    }

    /**
     * updateBoardsIdOrganizationByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsIdOrganization Attributes of \&quot;Boards Id Organization\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsIdOrganizationByIdBoard(String idBoard, String key, String token, BoardsIdOrganization boardsIdOrganization) throws ApiException {
        updateBoardsIdOrganizationByIdBoardWithHttpInfo(idBoard, key, token, boardsIdOrganization);
    }

    /**
     * updateBoardsIdOrganizationByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsIdOrganization Attributes of \&quot;Boards Id Organization\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsIdOrganizationByIdBoardWithHttpInfo(String idBoard, String key, String token, BoardsIdOrganization boardsIdOrganization) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsIdOrganizationByIdBoardValidateBeforeCall(idBoard, key, token, boardsIdOrganization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsIdOrganizationByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsIdOrganization Attributes of \&quot;Boards Id Organization\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsIdOrganizationByIdBoardAsync(String idBoard, String key, String token, BoardsIdOrganization boardsIdOrganization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsIdOrganizationByIdBoardValidateBeforeCall(idBoard, key, token, boardsIdOrganization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsLabelNamesBlueByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesBlue Attributes of \&quot;Label Names Blue\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesBlueByIdBoardCall(String idBoard, String key, String token, LabelNamesBlue labelNamesBlue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesBlue;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/blue"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsLabelNamesBlueByIdBoardValidateBeforeCall(String idBoard, String key, String token, LabelNamesBlue labelNamesBlue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesBlueByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsLabelNamesBlueByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsLabelNamesBlueByIdBoard(Async)");
        }

        // verify the required parameter 'labelNamesBlue' is set
        if (labelNamesBlue == null) {
            throw new ApiException("Missing the required parameter 'labelNamesBlue' when calling updateBoardsLabelNamesBlueByIdBoard(Async)");
        }

        return updateBoardsLabelNamesBlueByIdBoardCall(idBoard, key, token, labelNamesBlue, _callback);

    }

    /**
     * updateBoardsLabelNamesBlueByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesBlue Attributes of \&quot;Label Names Blue\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsLabelNamesBlueByIdBoard(String idBoard, String key, String token, LabelNamesBlue labelNamesBlue) throws ApiException {
        updateBoardsLabelNamesBlueByIdBoardWithHttpInfo(idBoard, key, token, labelNamesBlue);
    }

    /**
     * updateBoardsLabelNamesBlueByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesBlue Attributes of \&quot;Label Names Blue\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsLabelNamesBlueByIdBoardWithHttpInfo(String idBoard, String key, String token, LabelNamesBlue labelNamesBlue) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsLabelNamesBlueByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesBlue, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsLabelNamesBlueByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesBlue Attributes of \&quot;Label Names Blue\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesBlueByIdBoardAsync(String idBoard, String key, String token, LabelNamesBlue labelNamesBlue, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsLabelNamesBlueByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesBlue, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsLabelNamesGreenByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesGreen Attributes of \&quot;Label Names Green\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesGreenByIdBoardCall(String idBoard, String key, String token, LabelNamesGreen labelNamesGreen, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesGreen;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/green"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsLabelNamesGreenByIdBoardValidateBeforeCall(String idBoard, String key, String token, LabelNamesGreen labelNamesGreen, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesGreenByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsLabelNamesGreenByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsLabelNamesGreenByIdBoard(Async)");
        }

        // verify the required parameter 'labelNamesGreen' is set
        if (labelNamesGreen == null) {
            throw new ApiException("Missing the required parameter 'labelNamesGreen' when calling updateBoardsLabelNamesGreenByIdBoard(Async)");
        }

        return updateBoardsLabelNamesGreenByIdBoardCall(idBoard, key, token, labelNamesGreen, _callback);

    }

    /**
     * updateBoardsLabelNamesGreenByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesGreen Attributes of \&quot;Label Names Green\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsLabelNamesGreenByIdBoard(String idBoard, String key, String token, LabelNamesGreen labelNamesGreen) throws ApiException {
        updateBoardsLabelNamesGreenByIdBoardWithHttpInfo(idBoard, key, token, labelNamesGreen);
    }

    /**
     * updateBoardsLabelNamesGreenByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesGreen Attributes of \&quot;Label Names Green\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsLabelNamesGreenByIdBoardWithHttpInfo(String idBoard, String key, String token, LabelNamesGreen labelNamesGreen) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsLabelNamesGreenByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesGreen, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsLabelNamesGreenByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesGreen Attributes of \&quot;Label Names Green\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesGreenByIdBoardAsync(String idBoard, String key, String token, LabelNamesGreen labelNamesGreen, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsLabelNamesGreenByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesGreen, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsLabelNamesOrangeByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesOrange Attributes of \&quot;Label Names Orange\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesOrangeByIdBoardCall(String idBoard, String key, String token, LabelNamesOrange labelNamesOrange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesOrange;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/orange"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsLabelNamesOrangeByIdBoardValidateBeforeCall(String idBoard, String key, String token, LabelNamesOrange labelNamesOrange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesOrangeByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsLabelNamesOrangeByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsLabelNamesOrangeByIdBoard(Async)");
        }

        // verify the required parameter 'labelNamesOrange' is set
        if (labelNamesOrange == null) {
            throw new ApiException("Missing the required parameter 'labelNamesOrange' when calling updateBoardsLabelNamesOrangeByIdBoard(Async)");
        }

        return updateBoardsLabelNamesOrangeByIdBoardCall(idBoard, key, token, labelNamesOrange, _callback);

    }

    /**
     * updateBoardsLabelNamesOrangeByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesOrange Attributes of \&quot;Label Names Orange\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsLabelNamesOrangeByIdBoard(String idBoard, String key, String token, LabelNamesOrange labelNamesOrange) throws ApiException {
        updateBoardsLabelNamesOrangeByIdBoardWithHttpInfo(idBoard, key, token, labelNamesOrange);
    }

    /**
     * updateBoardsLabelNamesOrangeByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesOrange Attributes of \&quot;Label Names Orange\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsLabelNamesOrangeByIdBoardWithHttpInfo(String idBoard, String key, String token, LabelNamesOrange labelNamesOrange) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsLabelNamesOrangeByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesOrange, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsLabelNamesOrangeByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesOrange Attributes of \&quot;Label Names Orange\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesOrangeByIdBoardAsync(String idBoard, String key, String token, LabelNamesOrange labelNamesOrange, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsLabelNamesOrangeByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesOrange, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsLabelNamesPurpleByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesPurple Attributes of \&quot;Label Names Purple\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesPurpleByIdBoardCall(String idBoard, String key, String token, LabelNamesPurple labelNamesPurple, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesPurple;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/purple"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsLabelNamesPurpleByIdBoardValidateBeforeCall(String idBoard, String key, String token, LabelNamesPurple labelNamesPurple, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesPurpleByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsLabelNamesPurpleByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsLabelNamesPurpleByIdBoard(Async)");
        }

        // verify the required parameter 'labelNamesPurple' is set
        if (labelNamesPurple == null) {
            throw new ApiException("Missing the required parameter 'labelNamesPurple' when calling updateBoardsLabelNamesPurpleByIdBoard(Async)");
        }

        return updateBoardsLabelNamesPurpleByIdBoardCall(idBoard, key, token, labelNamesPurple, _callback);

    }

    /**
     * updateBoardsLabelNamesPurpleByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesPurple Attributes of \&quot;Label Names Purple\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsLabelNamesPurpleByIdBoard(String idBoard, String key, String token, LabelNamesPurple labelNamesPurple) throws ApiException {
        updateBoardsLabelNamesPurpleByIdBoardWithHttpInfo(idBoard, key, token, labelNamesPurple);
    }

    /**
     * updateBoardsLabelNamesPurpleByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesPurple Attributes of \&quot;Label Names Purple\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsLabelNamesPurpleByIdBoardWithHttpInfo(String idBoard, String key, String token, LabelNamesPurple labelNamesPurple) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsLabelNamesPurpleByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesPurple, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsLabelNamesPurpleByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesPurple Attributes of \&quot;Label Names Purple\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesPurpleByIdBoardAsync(String idBoard, String key, String token, LabelNamesPurple labelNamesPurple, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsLabelNamesPurpleByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesPurple, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsLabelNamesRedByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesRed Attributes of \&quot;Label Names Red\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesRedByIdBoardCall(String idBoard, String key, String token, LabelNamesRed labelNamesRed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesRed;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/red"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsLabelNamesRedByIdBoardValidateBeforeCall(String idBoard, String key, String token, LabelNamesRed labelNamesRed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesRedByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsLabelNamesRedByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsLabelNamesRedByIdBoard(Async)");
        }

        // verify the required parameter 'labelNamesRed' is set
        if (labelNamesRed == null) {
            throw new ApiException("Missing the required parameter 'labelNamesRed' when calling updateBoardsLabelNamesRedByIdBoard(Async)");
        }

        return updateBoardsLabelNamesRedByIdBoardCall(idBoard, key, token, labelNamesRed, _callback);

    }

    /**
     * updateBoardsLabelNamesRedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesRed Attributes of \&quot;Label Names Red\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsLabelNamesRedByIdBoard(String idBoard, String key, String token, LabelNamesRed labelNamesRed) throws ApiException {
        updateBoardsLabelNamesRedByIdBoardWithHttpInfo(idBoard, key, token, labelNamesRed);
    }

    /**
     * updateBoardsLabelNamesRedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesRed Attributes of \&quot;Label Names Red\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsLabelNamesRedByIdBoardWithHttpInfo(String idBoard, String key, String token, LabelNamesRed labelNamesRed) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsLabelNamesRedByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesRed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsLabelNamesRedByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesRed Attributes of \&quot;Label Names Red\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesRedByIdBoardAsync(String idBoard, String key, String token, LabelNamesRed labelNamesRed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsLabelNamesRedByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesRed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsLabelNamesYellowByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesYellow Attributes of \&quot;Label Names Yellow\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesYellowByIdBoardCall(String idBoard, String key, String token, LabelNamesYellow labelNamesYellow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesYellow;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/yellow"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsLabelNamesYellowByIdBoardValidateBeforeCall(String idBoard, String key, String token, LabelNamesYellow labelNamesYellow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesYellowByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsLabelNamesYellowByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsLabelNamesYellowByIdBoard(Async)");
        }

        // verify the required parameter 'labelNamesYellow' is set
        if (labelNamesYellow == null) {
            throw new ApiException("Missing the required parameter 'labelNamesYellow' when calling updateBoardsLabelNamesYellowByIdBoard(Async)");
        }

        return updateBoardsLabelNamesYellowByIdBoardCall(idBoard, key, token, labelNamesYellow, _callback);

    }

    /**
     * updateBoardsLabelNamesYellowByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesYellow Attributes of \&quot;Label Names Yellow\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsLabelNamesYellowByIdBoard(String idBoard, String key, String token, LabelNamesYellow labelNamesYellow) throws ApiException {
        updateBoardsLabelNamesYellowByIdBoardWithHttpInfo(idBoard, key, token, labelNamesYellow);
    }

    /**
     * updateBoardsLabelNamesYellowByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesYellow Attributes of \&quot;Label Names Yellow\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsLabelNamesYellowByIdBoardWithHttpInfo(String idBoard, String key, String token, LabelNamesYellow labelNamesYellow) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsLabelNamesYellowByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesYellow, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsLabelNamesYellowByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param labelNamesYellow Attributes of \&quot;Label Names Yellow\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsLabelNamesYellowByIdBoardAsync(String idBoard, String key, String token, LabelNamesYellow labelNamesYellow, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsLabelNamesYellowByIdBoardValidateBeforeCall(idBoard, key, token, labelNamesYellow, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsMembersByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMembersByIdBoardCall(String idBoard, String key, String token, BoardsMembers boardsMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsMembers;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsMembersByIdBoardValidateBeforeCall(String idBoard, String key, String token, BoardsMembers boardsMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsMembersByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsMembersByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsMembersByIdBoard(Async)");
        }

        // verify the required parameter 'boardsMembers' is set
        if (boardsMembers == null) {
            throw new ApiException("Missing the required parameter 'boardsMembers' when calling updateBoardsMembersByIdBoard(Async)");
        }

        return updateBoardsMembersByIdBoardCall(idBoard, key, token, boardsMembers, _callback);

    }

    /**
     * updateBoardsMembersByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsMembersByIdBoard(String idBoard, String key, String token, BoardsMembers boardsMembers) throws ApiException {
        updateBoardsMembersByIdBoardWithHttpInfo(idBoard, key, token, boardsMembers);
    }

    /**
     * updateBoardsMembersByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsMembersByIdBoardWithHttpInfo(String idBoard, String key, String token, BoardsMembers boardsMembers) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsMembersByIdBoardValidateBeforeCall(idBoard, key, token, boardsMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsMembersByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMembersByIdBoardAsync(String idBoard, String key, String token, BoardsMembers boardsMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsMembersByIdBoardValidateBeforeCall(idBoard, key, token, boardsMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsMembersByIdBoardByIdMember
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMembersByIdBoardByIdMemberCall(String idBoard, String idMember, String key, String token, BoardsMembers boardsMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsMembers;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members/{idMember}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsMembersByIdBoardByIdMemberValidateBeforeCall(String idBoard, String idMember, String key, String token, BoardsMembers boardsMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsMembersByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateBoardsMembersByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsMembersByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsMembersByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'boardsMembers' is set
        if (boardsMembers == null) {
            throw new ApiException("Missing the required parameter 'boardsMembers' when calling updateBoardsMembersByIdBoardByIdMember(Async)");
        }

        return updateBoardsMembersByIdBoardByIdMemberCall(idBoard, idMember, key, token, boardsMembers, _callback);

    }

    /**
     * updateBoardsMembersByIdBoardByIdMember()
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsMembersByIdBoardByIdMember(String idBoard, String idMember, String key, String token, BoardsMembers boardsMembers) throws ApiException {
        updateBoardsMembersByIdBoardByIdMemberWithHttpInfo(idBoard, idMember, key, token, boardsMembers);
    }

    /**
     * updateBoardsMembersByIdBoardByIdMember()
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsMembersByIdBoardByIdMemberWithHttpInfo(String idBoard, String idMember, String key, String token, BoardsMembers boardsMembers) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsMembersByIdBoardByIdMemberValidateBeforeCall(idBoard, idMember, key, token, boardsMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsMembersByIdBoardByIdMember() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMembersByIdBoardByIdMemberAsync(String idBoard, String idMember, String key, String token, BoardsMembers boardsMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsMembersByIdBoardByIdMemberValidateBeforeCall(idBoard, idMember, key, token, boardsMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsMembershipsByIdBoardByIdMembership
     * @param idBoard board_id (required)
     * @param idMembership idMembership (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMemberships Attributes of \&quot;Boards Memberships\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMembershipsByIdBoardByIdMembershipCall(String idBoard, String idMembership, String key, String token, BoardsMemberships boardsMemberships, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsMemberships;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/memberships/{idMembership}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idMembership" + "}", localVarApiClient.escapeString(idMembership.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsMembershipsByIdBoardByIdMembershipValidateBeforeCall(String idBoard, String idMembership, String key, String token, BoardsMemberships boardsMemberships, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsMembershipsByIdBoardByIdMembership(Async)");
        }

        // verify the required parameter 'idMembership' is set
        if (idMembership == null) {
            throw new ApiException("Missing the required parameter 'idMembership' when calling updateBoardsMembershipsByIdBoardByIdMembership(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsMembershipsByIdBoardByIdMembership(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsMembershipsByIdBoardByIdMembership(Async)");
        }

        // verify the required parameter 'boardsMemberships' is set
        if (boardsMemberships == null) {
            throw new ApiException("Missing the required parameter 'boardsMemberships' when calling updateBoardsMembershipsByIdBoardByIdMembership(Async)");
        }

        return updateBoardsMembershipsByIdBoardByIdMembershipCall(idBoard, idMembership, key, token, boardsMemberships, _callback);

    }

    /**
     * updateBoardsMembershipsByIdBoardByIdMembership()
     * 
     * @param idBoard board_id (required)
     * @param idMembership idMembership (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMemberships Attributes of \&quot;Boards Memberships\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsMembershipsByIdBoardByIdMembership(String idBoard, String idMembership, String key, String token, BoardsMemberships boardsMemberships) throws ApiException {
        updateBoardsMembershipsByIdBoardByIdMembershipWithHttpInfo(idBoard, idMembership, key, token, boardsMemberships);
    }

    /**
     * updateBoardsMembershipsByIdBoardByIdMembership()
     * 
     * @param idBoard board_id (required)
     * @param idMembership idMembership (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMemberships Attributes of \&quot;Boards Memberships\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsMembershipsByIdBoardByIdMembershipWithHttpInfo(String idBoard, String idMembership, String key, String token, BoardsMemberships boardsMemberships) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsMembershipsByIdBoardByIdMembershipValidateBeforeCall(idBoard, idMembership, key, token, boardsMemberships, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsMembershipsByIdBoardByIdMembership() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param idMembership idMembership (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsMemberships Attributes of \&quot;Boards Memberships\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMembershipsByIdBoardByIdMembershipAsync(String idBoard, String idMembership, String key, String token, BoardsMemberships boardsMemberships, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsMembershipsByIdBoardByIdMembershipValidateBeforeCall(idBoard, idMembership, key, token, boardsMemberships, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsMyPrefsEmailPositionByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsEmailPosition Attributes of \&quot;My Prefs Email Position\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsEmailPositionByIdBoardCall(String idBoard, String key, String token, MyPrefsEmailPosition myPrefsEmailPosition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsEmailPosition;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/emailPosition"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsMyPrefsEmailPositionByIdBoardValidateBeforeCall(String idBoard, String key, String token, MyPrefsEmailPosition myPrefsEmailPosition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsEmailPositionByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsMyPrefsEmailPositionByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsMyPrefsEmailPositionByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsEmailPosition' is set
        if (myPrefsEmailPosition == null) {
            throw new ApiException("Missing the required parameter 'myPrefsEmailPosition' when calling updateBoardsMyPrefsEmailPositionByIdBoard(Async)");
        }

        return updateBoardsMyPrefsEmailPositionByIdBoardCall(idBoard, key, token, myPrefsEmailPosition, _callback);

    }

    /**
     * updateBoardsMyPrefsEmailPositionByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsEmailPosition Attributes of \&quot;My Prefs Email Position\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsMyPrefsEmailPositionByIdBoard(String idBoard, String key, String token, MyPrefsEmailPosition myPrefsEmailPosition) throws ApiException {
        updateBoardsMyPrefsEmailPositionByIdBoardWithHttpInfo(idBoard, key, token, myPrefsEmailPosition);
    }

    /**
     * updateBoardsMyPrefsEmailPositionByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsEmailPosition Attributes of \&quot;My Prefs Email Position\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsMyPrefsEmailPositionByIdBoardWithHttpInfo(String idBoard, String key, String token, MyPrefsEmailPosition myPrefsEmailPosition) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsMyPrefsEmailPositionByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsEmailPosition, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsMyPrefsEmailPositionByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsEmailPosition Attributes of \&quot;My Prefs Email Position\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsEmailPositionByIdBoardAsync(String idBoard, String key, String token, MyPrefsEmailPosition myPrefsEmailPosition, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsMyPrefsEmailPositionByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsEmailPosition, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsMyPrefsIdEmailListByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsIdEmailList Attributes of \&quot;My Prefs Id Email List\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsIdEmailListByIdBoardCall(String idBoard, String key, String token, MyPrefsIdEmailList myPrefsIdEmailList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsIdEmailList;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/idEmailList"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsMyPrefsIdEmailListByIdBoardValidateBeforeCall(String idBoard, String key, String token, MyPrefsIdEmailList myPrefsIdEmailList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsIdEmailListByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsMyPrefsIdEmailListByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsMyPrefsIdEmailListByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsIdEmailList' is set
        if (myPrefsIdEmailList == null) {
            throw new ApiException("Missing the required parameter 'myPrefsIdEmailList' when calling updateBoardsMyPrefsIdEmailListByIdBoard(Async)");
        }

        return updateBoardsMyPrefsIdEmailListByIdBoardCall(idBoard, key, token, myPrefsIdEmailList, _callback);

    }

    /**
     * updateBoardsMyPrefsIdEmailListByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsIdEmailList Attributes of \&quot;My Prefs Id Email List\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsMyPrefsIdEmailListByIdBoard(String idBoard, String key, String token, MyPrefsIdEmailList myPrefsIdEmailList) throws ApiException {
        updateBoardsMyPrefsIdEmailListByIdBoardWithHttpInfo(idBoard, key, token, myPrefsIdEmailList);
    }

    /**
     * updateBoardsMyPrefsIdEmailListByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsIdEmailList Attributes of \&quot;My Prefs Id Email List\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsMyPrefsIdEmailListByIdBoardWithHttpInfo(String idBoard, String key, String token, MyPrefsIdEmailList myPrefsIdEmailList) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsMyPrefsIdEmailListByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsIdEmailList, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsMyPrefsIdEmailListByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsIdEmailList Attributes of \&quot;My Prefs Id Email List\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsIdEmailListByIdBoardAsync(String idBoard, String key, String token, MyPrefsIdEmailList myPrefsIdEmailList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsMyPrefsIdEmailListByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsIdEmailList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsMyPrefsShowListGuideByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowListGuide Attributes of \&quot;My Prefs Show List Guide\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsShowListGuideByIdBoardCall(String idBoard, String key, String token, MyPrefsShowListGuide myPrefsShowListGuide, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsShowListGuide;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/showListGuide"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsMyPrefsShowListGuideByIdBoardValidateBeforeCall(String idBoard, String key, String token, MyPrefsShowListGuide myPrefsShowListGuide, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsShowListGuideByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsMyPrefsShowListGuideByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsMyPrefsShowListGuideByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsShowListGuide' is set
        if (myPrefsShowListGuide == null) {
            throw new ApiException("Missing the required parameter 'myPrefsShowListGuide' when calling updateBoardsMyPrefsShowListGuideByIdBoard(Async)");
        }

        return updateBoardsMyPrefsShowListGuideByIdBoardCall(idBoard, key, token, myPrefsShowListGuide, _callback);

    }

    /**
     * updateBoardsMyPrefsShowListGuideByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowListGuide Attributes of \&quot;My Prefs Show List Guide\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsMyPrefsShowListGuideByIdBoard(String idBoard, String key, String token, MyPrefsShowListGuide myPrefsShowListGuide) throws ApiException {
        updateBoardsMyPrefsShowListGuideByIdBoardWithHttpInfo(idBoard, key, token, myPrefsShowListGuide);
    }

    /**
     * updateBoardsMyPrefsShowListGuideByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowListGuide Attributes of \&quot;My Prefs Show List Guide\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsMyPrefsShowListGuideByIdBoardWithHttpInfo(String idBoard, String key, String token, MyPrefsShowListGuide myPrefsShowListGuide) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsMyPrefsShowListGuideByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsShowListGuide, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsMyPrefsShowListGuideByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowListGuide Attributes of \&quot;My Prefs Show List Guide\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsShowListGuideByIdBoardAsync(String idBoard, String key, String token, MyPrefsShowListGuide myPrefsShowListGuide, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsMyPrefsShowListGuideByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsShowListGuide, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsMyPrefsShowSidebarActivityByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarActivity Attributes of \&quot;My Prefs Show Sidebar Activity\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsShowSidebarActivityByIdBoardCall(String idBoard, String key, String token, MyPrefsShowSidebarActivity myPrefsShowSidebarActivity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsShowSidebarActivity;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/showSidebarActivity"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsMyPrefsShowSidebarActivityByIdBoardValidateBeforeCall(String idBoard, String key, String token, MyPrefsShowSidebarActivity myPrefsShowSidebarActivity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsShowSidebarActivityByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsMyPrefsShowSidebarActivityByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsMyPrefsShowSidebarActivityByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsShowSidebarActivity' is set
        if (myPrefsShowSidebarActivity == null) {
            throw new ApiException("Missing the required parameter 'myPrefsShowSidebarActivity' when calling updateBoardsMyPrefsShowSidebarActivityByIdBoard(Async)");
        }

        return updateBoardsMyPrefsShowSidebarActivityByIdBoardCall(idBoard, key, token, myPrefsShowSidebarActivity, _callback);

    }

    /**
     * updateBoardsMyPrefsShowSidebarActivityByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarActivity Attributes of \&quot;My Prefs Show Sidebar Activity\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsMyPrefsShowSidebarActivityByIdBoard(String idBoard, String key, String token, MyPrefsShowSidebarActivity myPrefsShowSidebarActivity) throws ApiException {
        updateBoardsMyPrefsShowSidebarActivityByIdBoardWithHttpInfo(idBoard, key, token, myPrefsShowSidebarActivity);
    }

    /**
     * updateBoardsMyPrefsShowSidebarActivityByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarActivity Attributes of \&quot;My Prefs Show Sidebar Activity\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsMyPrefsShowSidebarActivityByIdBoardWithHttpInfo(String idBoard, String key, String token, MyPrefsShowSidebarActivity myPrefsShowSidebarActivity) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsMyPrefsShowSidebarActivityByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsShowSidebarActivity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsMyPrefsShowSidebarActivityByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarActivity Attributes of \&quot;My Prefs Show Sidebar Activity\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsShowSidebarActivityByIdBoardAsync(String idBoard, String key, String token, MyPrefsShowSidebarActivity myPrefsShowSidebarActivity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsMyPrefsShowSidebarActivityByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsShowSidebarActivity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarBoardActions Attributes of \&quot;My Prefs Show Sidebar Board Actions\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsShowSidebarBoardActionsByIdBoardCall(String idBoard, String key, String token, MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsShowSidebarBoardActions;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/showSidebarBoardActions"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsMyPrefsShowSidebarBoardActionsByIdBoardValidateBeforeCall(String idBoard, String key, String token, MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsShowSidebarBoardActions' is set
        if (myPrefsShowSidebarBoardActions == null) {
            throw new ApiException("Missing the required parameter 'myPrefsShowSidebarBoardActions' when calling updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard(Async)");
        }

        return updateBoardsMyPrefsShowSidebarBoardActionsByIdBoardCall(idBoard, key, token, myPrefsShowSidebarBoardActions, _callback);

    }

    /**
     * updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarBoardActions Attributes of \&quot;My Prefs Show Sidebar Board Actions\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard(String idBoard, String key, String token, MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions) throws ApiException {
        updateBoardsMyPrefsShowSidebarBoardActionsByIdBoardWithHttpInfo(idBoard, key, token, myPrefsShowSidebarBoardActions);
    }

    /**
     * updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarBoardActions Attributes of \&quot;My Prefs Show Sidebar Board Actions\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsMyPrefsShowSidebarBoardActionsByIdBoardWithHttpInfo(String idBoard, String key, String token, MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsMyPrefsShowSidebarBoardActionsByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsShowSidebarBoardActions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarBoardActions Attributes of \&quot;My Prefs Show Sidebar Board Actions\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsShowSidebarBoardActionsByIdBoardAsync(String idBoard, String key, String token, MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsMyPrefsShowSidebarBoardActionsByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsShowSidebarBoardActions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsMyPrefsShowSidebarByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebar Attributes of \&quot;My Prefs Show Sidebar\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsShowSidebarByIdBoardCall(String idBoard, String key, String token, MyPrefsShowSidebar myPrefsShowSidebar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsShowSidebar;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/showSidebar"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsMyPrefsShowSidebarByIdBoardValidateBeforeCall(String idBoard, String key, String token, MyPrefsShowSidebar myPrefsShowSidebar, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsShowSidebarByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsMyPrefsShowSidebarByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsMyPrefsShowSidebarByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsShowSidebar' is set
        if (myPrefsShowSidebar == null) {
            throw new ApiException("Missing the required parameter 'myPrefsShowSidebar' when calling updateBoardsMyPrefsShowSidebarByIdBoard(Async)");
        }

        return updateBoardsMyPrefsShowSidebarByIdBoardCall(idBoard, key, token, myPrefsShowSidebar, _callback);

    }

    /**
     * updateBoardsMyPrefsShowSidebarByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebar Attributes of \&quot;My Prefs Show Sidebar\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsMyPrefsShowSidebarByIdBoard(String idBoard, String key, String token, MyPrefsShowSidebar myPrefsShowSidebar) throws ApiException {
        updateBoardsMyPrefsShowSidebarByIdBoardWithHttpInfo(idBoard, key, token, myPrefsShowSidebar);
    }

    /**
     * updateBoardsMyPrefsShowSidebarByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebar Attributes of \&quot;My Prefs Show Sidebar\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsMyPrefsShowSidebarByIdBoardWithHttpInfo(String idBoard, String key, String token, MyPrefsShowSidebar myPrefsShowSidebar) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsMyPrefsShowSidebarByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsShowSidebar, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsMyPrefsShowSidebarByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebar Attributes of \&quot;My Prefs Show Sidebar\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsShowSidebarByIdBoardAsync(String idBoard, String key, String token, MyPrefsShowSidebar myPrefsShowSidebar, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsMyPrefsShowSidebarByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsShowSidebar, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsMyPrefsShowSidebarMembersByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarMembers Attributes of \&quot;My Prefs Show Sidebar Members\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsShowSidebarMembersByIdBoardCall(String idBoard, String key, String token, MyPrefsShowSidebarMembers myPrefsShowSidebarMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsShowSidebarMembers;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/showSidebarMembers"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsMyPrefsShowSidebarMembersByIdBoardValidateBeforeCall(String idBoard, String key, String token, MyPrefsShowSidebarMembers myPrefsShowSidebarMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsShowSidebarMembersByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsMyPrefsShowSidebarMembersByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsMyPrefsShowSidebarMembersByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsShowSidebarMembers' is set
        if (myPrefsShowSidebarMembers == null) {
            throw new ApiException("Missing the required parameter 'myPrefsShowSidebarMembers' when calling updateBoardsMyPrefsShowSidebarMembersByIdBoard(Async)");
        }

        return updateBoardsMyPrefsShowSidebarMembersByIdBoardCall(idBoard, key, token, myPrefsShowSidebarMembers, _callback);

    }

    /**
     * updateBoardsMyPrefsShowSidebarMembersByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarMembers Attributes of \&quot;My Prefs Show Sidebar Members\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsMyPrefsShowSidebarMembersByIdBoard(String idBoard, String key, String token, MyPrefsShowSidebarMembers myPrefsShowSidebarMembers) throws ApiException {
        updateBoardsMyPrefsShowSidebarMembersByIdBoardWithHttpInfo(idBoard, key, token, myPrefsShowSidebarMembers);
    }

    /**
     * updateBoardsMyPrefsShowSidebarMembersByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarMembers Attributes of \&quot;My Prefs Show Sidebar Members\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsMyPrefsShowSidebarMembersByIdBoardWithHttpInfo(String idBoard, String key, String token, MyPrefsShowSidebarMembers myPrefsShowSidebarMembers) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsMyPrefsShowSidebarMembersByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsShowSidebarMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsMyPrefsShowSidebarMembersByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param myPrefsShowSidebarMembers Attributes of \&quot;My Prefs Show Sidebar Members\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsMyPrefsShowSidebarMembersByIdBoardAsync(String idBoard, String key, String token, MyPrefsShowSidebarMembers myPrefsShowSidebarMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsMyPrefsShowSidebarMembersByIdBoardValidateBeforeCall(idBoard, key, token, myPrefsShowSidebarMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsNameByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsName Attributes of \&quot;Boards Name\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsNameByIdBoardCall(String idBoard, String key, String token, BoardsName boardsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsName;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/name"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsNameByIdBoardValidateBeforeCall(String idBoard, String key, String token, BoardsName boardsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsNameByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsNameByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsNameByIdBoard(Async)");
        }

        // verify the required parameter 'boardsName' is set
        if (boardsName == null) {
            throw new ApiException("Missing the required parameter 'boardsName' when calling updateBoardsNameByIdBoard(Async)");
        }

        return updateBoardsNameByIdBoardCall(idBoard, key, token, boardsName, _callback);

    }

    /**
     * updateBoardsNameByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsName Attributes of \&quot;Boards Name\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsNameByIdBoard(String idBoard, String key, String token, BoardsName boardsName) throws ApiException {
        updateBoardsNameByIdBoardWithHttpInfo(idBoard, key, token, boardsName);
    }

    /**
     * updateBoardsNameByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsName Attributes of \&quot;Boards Name\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsNameByIdBoardWithHttpInfo(String idBoard, String key, String token, BoardsName boardsName) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsNameByIdBoardValidateBeforeCall(idBoard, key, token, boardsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsNameByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsName Attributes of \&quot;Boards Name\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsNameByIdBoardAsync(String idBoard, String key, String token, BoardsName boardsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsNameByIdBoardValidateBeforeCall(idBoard, key, token, boardsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsPrefsBackgroundByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsBackground Attributes of \&quot;Prefs Background\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsBackgroundByIdBoardCall(String idBoard, String key, String token, PrefsBackground prefsBackground, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsBackground;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/background"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsPrefsBackgroundByIdBoardValidateBeforeCall(String idBoard, String key, String token, PrefsBackground prefsBackground, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsPrefsBackgroundByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsPrefsBackgroundByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsPrefsBackgroundByIdBoard(Async)");
        }

        // verify the required parameter 'prefsBackground' is set
        if (prefsBackground == null) {
            throw new ApiException("Missing the required parameter 'prefsBackground' when calling updateBoardsPrefsBackgroundByIdBoard(Async)");
        }

        return updateBoardsPrefsBackgroundByIdBoardCall(idBoard, key, token, prefsBackground, _callback);

    }

    /**
     * updateBoardsPrefsBackgroundByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsBackground Attributes of \&quot;Prefs Background\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsPrefsBackgroundByIdBoard(String idBoard, String key, String token, PrefsBackground prefsBackground) throws ApiException {
        updateBoardsPrefsBackgroundByIdBoardWithHttpInfo(idBoard, key, token, prefsBackground);
    }

    /**
     * updateBoardsPrefsBackgroundByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsBackground Attributes of \&quot;Prefs Background\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsPrefsBackgroundByIdBoardWithHttpInfo(String idBoard, String key, String token, PrefsBackground prefsBackground) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsPrefsBackgroundByIdBoardValidateBeforeCall(idBoard, key, token, prefsBackground, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsPrefsBackgroundByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsBackground Attributes of \&quot;Prefs Background\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsBackgroundByIdBoardAsync(String idBoard, String key, String token, PrefsBackground prefsBackground, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsPrefsBackgroundByIdBoardValidateBeforeCall(idBoard, key, token, prefsBackground, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsPrefsCalendarFeedEnabledByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCalendarFeedEnabled Attributes of \&quot;Prefs Calendar Feed Enabled\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsCalendarFeedEnabledByIdBoardCall(String idBoard, String key, String token, PrefsCalendarFeedEnabled prefsCalendarFeedEnabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsCalendarFeedEnabled;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/calendarFeedEnabled"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsPrefsCalendarFeedEnabledByIdBoardValidateBeforeCall(String idBoard, String key, String token, PrefsCalendarFeedEnabled prefsCalendarFeedEnabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsPrefsCalendarFeedEnabledByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsPrefsCalendarFeedEnabledByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsPrefsCalendarFeedEnabledByIdBoard(Async)");
        }

        // verify the required parameter 'prefsCalendarFeedEnabled' is set
        if (prefsCalendarFeedEnabled == null) {
            throw new ApiException("Missing the required parameter 'prefsCalendarFeedEnabled' when calling updateBoardsPrefsCalendarFeedEnabledByIdBoard(Async)");
        }

        return updateBoardsPrefsCalendarFeedEnabledByIdBoardCall(idBoard, key, token, prefsCalendarFeedEnabled, _callback);

    }

    /**
     * updateBoardsPrefsCalendarFeedEnabledByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCalendarFeedEnabled Attributes of \&quot;Prefs Calendar Feed Enabled\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsPrefsCalendarFeedEnabledByIdBoard(String idBoard, String key, String token, PrefsCalendarFeedEnabled prefsCalendarFeedEnabled) throws ApiException {
        updateBoardsPrefsCalendarFeedEnabledByIdBoardWithHttpInfo(idBoard, key, token, prefsCalendarFeedEnabled);
    }

    /**
     * updateBoardsPrefsCalendarFeedEnabledByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCalendarFeedEnabled Attributes of \&quot;Prefs Calendar Feed Enabled\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsPrefsCalendarFeedEnabledByIdBoardWithHttpInfo(String idBoard, String key, String token, PrefsCalendarFeedEnabled prefsCalendarFeedEnabled) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsPrefsCalendarFeedEnabledByIdBoardValidateBeforeCall(idBoard, key, token, prefsCalendarFeedEnabled, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsPrefsCalendarFeedEnabledByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCalendarFeedEnabled Attributes of \&quot;Prefs Calendar Feed Enabled\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsCalendarFeedEnabledByIdBoardAsync(String idBoard, String key, String token, PrefsCalendarFeedEnabled prefsCalendarFeedEnabled, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsPrefsCalendarFeedEnabledByIdBoardValidateBeforeCall(idBoard, key, token, prefsCalendarFeedEnabled, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsPrefsCardAgingByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCardAging Attributes of \&quot;Prefs Card Aging\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsCardAgingByIdBoardCall(String idBoard, String key, String token, PrefsCardAging prefsCardAging, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsCardAging;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/cardAging"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsPrefsCardAgingByIdBoardValidateBeforeCall(String idBoard, String key, String token, PrefsCardAging prefsCardAging, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsPrefsCardAgingByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsPrefsCardAgingByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsPrefsCardAgingByIdBoard(Async)");
        }

        // verify the required parameter 'prefsCardAging' is set
        if (prefsCardAging == null) {
            throw new ApiException("Missing the required parameter 'prefsCardAging' when calling updateBoardsPrefsCardAgingByIdBoard(Async)");
        }

        return updateBoardsPrefsCardAgingByIdBoardCall(idBoard, key, token, prefsCardAging, _callback);

    }

    /**
     * updateBoardsPrefsCardAgingByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCardAging Attributes of \&quot;Prefs Card Aging\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsPrefsCardAgingByIdBoard(String idBoard, String key, String token, PrefsCardAging prefsCardAging) throws ApiException {
        updateBoardsPrefsCardAgingByIdBoardWithHttpInfo(idBoard, key, token, prefsCardAging);
    }

    /**
     * updateBoardsPrefsCardAgingByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCardAging Attributes of \&quot;Prefs Card Aging\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsPrefsCardAgingByIdBoardWithHttpInfo(String idBoard, String key, String token, PrefsCardAging prefsCardAging) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsPrefsCardAgingByIdBoardValidateBeforeCall(idBoard, key, token, prefsCardAging, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsPrefsCardAgingByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCardAging Attributes of \&quot;Prefs Card Aging\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsCardAgingByIdBoardAsync(String idBoard, String key, String token, PrefsCardAging prefsCardAging, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsPrefsCardAgingByIdBoardValidateBeforeCall(idBoard, key, token, prefsCardAging, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsPrefsCardCoversByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCardCovers Attributes of \&quot;Prefs Card Covers\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsCardCoversByIdBoardCall(String idBoard, String key, String token, PrefsCardCovers prefsCardCovers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsCardCovers;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/cardCovers"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsPrefsCardCoversByIdBoardValidateBeforeCall(String idBoard, String key, String token, PrefsCardCovers prefsCardCovers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsPrefsCardCoversByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsPrefsCardCoversByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsPrefsCardCoversByIdBoard(Async)");
        }

        // verify the required parameter 'prefsCardCovers' is set
        if (prefsCardCovers == null) {
            throw new ApiException("Missing the required parameter 'prefsCardCovers' when calling updateBoardsPrefsCardCoversByIdBoard(Async)");
        }

        return updateBoardsPrefsCardCoversByIdBoardCall(idBoard, key, token, prefsCardCovers, _callback);

    }

    /**
     * updateBoardsPrefsCardCoversByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCardCovers Attributes of \&quot;Prefs Card Covers\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsPrefsCardCoversByIdBoard(String idBoard, String key, String token, PrefsCardCovers prefsCardCovers) throws ApiException {
        updateBoardsPrefsCardCoversByIdBoardWithHttpInfo(idBoard, key, token, prefsCardCovers);
    }

    /**
     * updateBoardsPrefsCardCoversByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCardCovers Attributes of \&quot;Prefs Card Covers\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsPrefsCardCoversByIdBoardWithHttpInfo(String idBoard, String key, String token, PrefsCardCovers prefsCardCovers) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsPrefsCardCoversByIdBoardValidateBeforeCall(idBoard, key, token, prefsCardCovers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsPrefsCardCoversByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsCardCovers Attributes of \&quot;Prefs Card Covers\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsCardCoversByIdBoardAsync(String idBoard, String key, String token, PrefsCardCovers prefsCardCovers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsPrefsCardCoversByIdBoardValidateBeforeCall(idBoard, key, token, prefsCardCovers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsPrefsCommentsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsComments Attributes of \&quot;Prefs Comments\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsCommentsByIdBoardCall(String idBoard, String key, String token, PrefsComments prefsComments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsComments;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/comments"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsPrefsCommentsByIdBoardValidateBeforeCall(String idBoard, String key, String token, PrefsComments prefsComments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsPrefsCommentsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsPrefsCommentsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsPrefsCommentsByIdBoard(Async)");
        }

        // verify the required parameter 'prefsComments' is set
        if (prefsComments == null) {
            throw new ApiException("Missing the required parameter 'prefsComments' when calling updateBoardsPrefsCommentsByIdBoard(Async)");
        }

        return updateBoardsPrefsCommentsByIdBoardCall(idBoard, key, token, prefsComments, _callback);

    }

    /**
     * updateBoardsPrefsCommentsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsComments Attributes of \&quot;Prefs Comments\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsPrefsCommentsByIdBoard(String idBoard, String key, String token, PrefsComments prefsComments) throws ApiException {
        updateBoardsPrefsCommentsByIdBoardWithHttpInfo(idBoard, key, token, prefsComments);
    }

    /**
     * updateBoardsPrefsCommentsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsComments Attributes of \&quot;Prefs Comments\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsPrefsCommentsByIdBoardWithHttpInfo(String idBoard, String key, String token, PrefsComments prefsComments) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsPrefsCommentsByIdBoardValidateBeforeCall(idBoard, key, token, prefsComments, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsPrefsCommentsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsComments Attributes of \&quot;Prefs Comments\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsCommentsByIdBoardAsync(String idBoard, String key, String token, PrefsComments prefsComments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsPrefsCommentsByIdBoardValidateBeforeCall(idBoard, key, token, prefsComments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsPrefsInvitationsByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsInvitations Attributes of \&quot;Prefs Invitations\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsInvitationsByIdBoardCall(String idBoard, String key, String token, PrefsInvitations prefsInvitations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsInvitations;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/invitations"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsPrefsInvitationsByIdBoardValidateBeforeCall(String idBoard, String key, String token, PrefsInvitations prefsInvitations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsPrefsInvitationsByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsPrefsInvitationsByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsPrefsInvitationsByIdBoard(Async)");
        }

        // verify the required parameter 'prefsInvitations' is set
        if (prefsInvitations == null) {
            throw new ApiException("Missing the required parameter 'prefsInvitations' when calling updateBoardsPrefsInvitationsByIdBoard(Async)");
        }

        return updateBoardsPrefsInvitationsByIdBoardCall(idBoard, key, token, prefsInvitations, _callback);

    }

    /**
     * updateBoardsPrefsInvitationsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsInvitations Attributes of \&quot;Prefs Invitations\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsPrefsInvitationsByIdBoard(String idBoard, String key, String token, PrefsInvitations prefsInvitations) throws ApiException {
        updateBoardsPrefsInvitationsByIdBoardWithHttpInfo(idBoard, key, token, prefsInvitations);
    }

    /**
     * updateBoardsPrefsInvitationsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsInvitations Attributes of \&quot;Prefs Invitations\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsPrefsInvitationsByIdBoardWithHttpInfo(String idBoard, String key, String token, PrefsInvitations prefsInvitations) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsPrefsInvitationsByIdBoardValidateBeforeCall(idBoard, key, token, prefsInvitations, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsPrefsInvitationsByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsInvitations Attributes of \&quot;Prefs Invitations\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsInvitationsByIdBoardAsync(String idBoard, String key, String token, PrefsInvitations prefsInvitations, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsPrefsInvitationsByIdBoardValidateBeforeCall(idBoard, key, token, prefsInvitations, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsPrefsPermissionLevelByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsPermissionLevel Attributes of \&quot;Prefs Permission Level\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsPermissionLevelByIdBoardCall(String idBoard, String key, String token, PrefsPermissionLevel prefsPermissionLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsPermissionLevel;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/permissionLevel"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsPrefsPermissionLevelByIdBoardValidateBeforeCall(String idBoard, String key, String token, PrefsPermissionLevel prefsPermissionLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsPrefsPermissionLevelByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsPrefsPermissionLevelByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsPrefsPermissionLevelByIdBoard(Async)");
        }

        // verify the required parameter 'prefsPermissionLevel' is set
        if (prefsPermissionLevel == null) {
            throw new ApiException("Missing the required parameter 'prefsPermissionLevel' when calling updateBoardsPrefsPermissionLevelByIdBoard(Async)");
        }

        return updateBoardsPrefsPermissionLevelByIdBoardCall(idBoard, key, token, prefsPermissionLevel, _callback);

    }

    /**
     * updateBoardsPrefsPermissionLevelByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsPermissionLevel Attributes of \&quot;Prefs Permission Level\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsPrefsPermissionLevelByIdBoard(String idBoard, String key, String token, PrefsPermissionLevel prefsPermissionLevel) throws ApiException {
        updateBoardsPrefsPermissionLevelByIdBoardWithHttpInfo(idBoard, key, token, prefsPermissionLevel);
    }

    /**
     * updateBoardsPrefsPermissionLevelByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsPermissionLevel Attributes of \&quot;Prefs Permission Level\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsPrefsPermissionLevelByIdBoardWithHttpInfo(String idBoard, String key, String token, PrefsPermissionLevel prefsPermissionLevel) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsPrefsPermissionLevelByIdBoardValidateBeforeCall(idBoard, key, token, prefsPermissionLevel, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsPrefsPermissionLevelByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsPermissionLevel Attributes of \&quot;Prefs Permission Level\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsPermissionLevelByIdBoardAsync(String idBoard, String key, String token, PrefsPermissionLevel prefsPermissionLevel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsPrefsPermissionLevelByIdBoardValidateBeforeCall(idBoard, key, token, prefsPermissionLevel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsPrefsSelfJoinByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsSelfJoin Attributes of \&quot;Prefs Self Join\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsSelfJoinByIdBoardCall(String idBoard, String key, String token, PrefsSelfJoin prefsSelfJoin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsSelfJoin;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/selfJoin"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsPrefsSelfJoinByIdBoardValidateBeforeCall(String idBoard, String key, String token, PrefsSelfJoin prefsSelfJoin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsPrefsSelfJoinByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsPrefsSelfJoinByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsPrefsSelfJoinByIdBoard(Async)");
        }

        // verify the required parameter 'prefsSelfJoin' is set
        if (prefsSelfJoin == null) {
            throw new ApiException("Missing the required parameter 'prefsSelfJoin' when calling updateBoardsPrefsSelfJoinByIdBoard(Async)");
        }

        return updateBoardsPrefsSelfJoinByIdBoardCall(idBoard, key, token, prefsSelfJoin, _callback);

    }

    /**
     * updateBoardsPrefsSelfJoinByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsSelfJoin Attributes of \&quot;Prefs Self Join\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsPrefsSelfJoinByIdBoard(String idBoard, String key, String token, PrefsSelfJoin prefsSelfJoin) throws ApiException {
        updateBoardsPrefsSelfJoinByIdBoardWithHttpInfo(idBoard, key, token, prefsSelfJoin);
    }

    /**
     * updateBoardsPrefsSelfJoinByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsSelfJoin Attributes of \&quot;Prefs Self Join\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsPrefsSelfJoinByIdBoardWithHttpInfo(String idBoard, String key, String token, PrefsSelfJoin prefsSelfJoin) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsPrefsSelfJoinByIdBoardValidateBeforeCall(idBoard, key, token, prefsSelfJoin, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsPrefsSelfJoinByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsSelfJoin Attributes of \&quot;Prefs Self Join\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsSelfJoinByIdBoardAsync(String idBoard, String key, String token, PrefsSelfJoin prefsSelfJoin, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsPrefsSelfJoinByIdBoardValidateBeforeCall(idBoard, key, token, prefsSelfJoin, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsPrefsVotingByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsVoting Attributes of \&quot;Prefs Voting\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsVotingByIdBoardCall(String idBoard, String key, String token, PrefsVoting prefsVoting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsVoting;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/voting"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsPrefsVotingByIdBoardValidateBeforeCall(String idBoard, String key, String token, PrefsVoting prefsVoting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsPrefsVotingByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsPrefsVotingByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsPrefsVotingByIdBoard(Async)");
        }

        // verify the required parameter 'prefsVoting' is set
        if (prefsVoting == null) {
            throw new ApiException("Missing the required parameter 'prefsVoting' when calling updateBoardsPrefsVotingByIdBoard(Async)");
        }

        return updateBoardsPrefsVotingByIdBoardCall(idBoard, key, token, prefsVoting, _callback);

    }

    /**
     * updateBoardsPrefsVotingByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsVoting Attributes of \&quot;Prefs Voting\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsPrefsVotingByIdBoard(String idBoard, String key, String token, PrefsVoting prefsVoting) throws ApiException {
        updateBoardsPrefsVotingByIdBoardWithHttpInfo(idBoard, key, token, prefsVoting);
    }

    /**
     * updateBoardsPrefsVotingByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsVoting Attributes of \&quot;Prefs Voting\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsPrefsVotingByIdBoardWithHttpInfo(String idBoard, String key, String token, PrefsVoting prefsVoting) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsPrefsVotingByIdBoardValidateBeforeCall(idBoard, key, token, prefsVoting, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsPrefsVotingByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsVoting Attributes of \&quot;Prefs Voting\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsPrefsVotingByIdBoardAsync(String idBoard, String key, String token, PrefsVoting prefsVoting, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsPrefsVotingByIdBoardValidateBeforeCall(idBoard, key, token, prefsVoting, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBoardsSubscribedByIdBoard
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsSubscribed Attributes of \&quot;Boards Subscribed\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsSubscribedByIdBoardCall(String idBoard, String key, String token, BoardsSubscribed boardsSubscribed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsSubscribed;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/subscribed"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardsSubscribedByIdBoardValidateBeforeCall(String idBoard, String key, String token, BoardsSubscribed boardsSubscribed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateBoardsSubscribedByIdBoard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateBoardsSubscribedByIdBoard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBoardsSubscribedByIdBoard(Async)");
        }

        // verify the required parameter 'boardsSubscribed' is set
        if (boardsSubscribed == null) {
            throw new ApiException("Missing the required parameter 'boardsSubscribed' when calling updateBoardsSubscribedByIdBoard(Async)");
        }

        return updateBoardsSubscribedByIdBoardCall(idBoard, key, token, boardsSubscribed, _callback);

    }

    /**
     * updateBoardsSubscribedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsSubscribed Attributes of \&quot;Boards Subscribed\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateBoardsSubscribedByIdBoard(String idBoard, String key, String token, BoardsSubscribed boardsSubscribed) throws ApiException {
        updateBoardsSubscribedByIdBoardWithHttpInfo(idBoard, key, token, boardsSubscribed);
    }

    /**
     * updateBoardsSubscribedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsSubscribed Attributes of \&quot;Boards Subscribed\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBoardsSubscribedByIdBoardWithHttpInfo(String idBoard, String key, String token, BoardsSubscribed boardsSubscribed) throws ApiException {
        okhttp3.Call localVarCall = updateBoardsSubscribedByIdBoardValidateBeforeCall(idBoard, key, token, boardsSubscribed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateBoardsSubscribedByIdBoard() (asynchronously)
     * 
     * @param idBoard board_id (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param boardsSubscribed Attributes of \&quot;Boards Subscribed\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBoardsSubscribedByIdBoardAsync(String idBoard, String key, String token, BoardsSubscribed boardsSubscribed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardsSubscribedByIdBoardValidateBeforeCall(idBoard, key, token, boardsSubscribed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
